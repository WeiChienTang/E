@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inherits ComponentBase
@inject IServiceProvider ServiceProvider

@if (isAuthorized)
{
    @ChildContent
}
else if (!string.IsNullOrEmpty(UnauthorizedContent))
{
    <div class="alert alert-warning">
        <i class="fas fa-exclamation-triangle me-2"></i>
        @UnauthorizedContent
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Permission { get; set; }
    [Parameter] public string? Role { get; set; }
    [Parameter] public string UnauthorizedContent { get; set; } = "您沒有權限執行此操作";
    [Parameter] public int? EmployeeId { get; set; } // 新增 EmployeeId 參數用於測試
    
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }
    
    private bool isAuthorized = false;    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine($"🔐 PermissionCheck 開始檢查，權限: '{Permission}', 角色: '{Role}', 員工ID: {EmployeeId}");
        
        // 如果有提供 EmployeeId 參數，直接使用它進行權限檢查（測試模式）
        if (EmployeeId.HasValue && !string.IsNullOrEmpty(Permission))
        {
            Console.WriteLine($"🧪 測試模式：使用指定的員工ID ({EmployeeId}) 檢查權限");
            try
            {
                using var scope = ServiceProvider.CreateScope();
                var permissionService = scope.ServiceProvider.GetService<ERPCore2.Services.IPermissionService>();
                
                if (permissionService != null)
                {
                    Console.WriteLine("✅ PermissionService 注入成功");
                    var result = await permissionService.HasPermissionAsync(EmployeeId.Value, Permission);
                    isAuthorized = result.IsSuccess && result.Data;
                    Console.WriteLine($"🔍 權限檢查結果: IsSuccess={result.IsSuccess}, Data={result.Data}, isAuthorized={isAuthorized}");
                    if (!result.IsSuccess)
                    {
                        Console.WriteLine($"❌ 權限檢查錯誤: {result.ErrorMessage}");
                    }
                }
                else
                {
                    Console.WriteLine("❌ PermissionService 注入失敗");
                    isAuthorized = false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"💥 權限檢查例外: {ex.Message}");
                isAuthorized = false;
            }
            return;
        }
        
        // 原本的認證邏輯
        if (AuthenticationState is null)
        {
            Console.WriteLine("❌ AuthenticationState 為 null");
            isAuthorized = false;
            return;
        }

        var authState = await AuthenticationState;
        var user = authState.User;

        Console.WriteLine($"🔍 使用者認證狀態: {user.Identity?.IsAuthenticated}");
        Console.WriteLine($"🔍 使用者名稱: {user.Identity?.Name}");

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Console.WriteLine("❌ 使用者未認證");
            isAuthorized = false;
            return;
        }

        // 檢查角色權限
        if (!string.IsNullOrEmpty(Role))
        {
            isAuthorized = user.IsInRole(Role);
            Console.WriteLine($"🔍 角色檢查 '{Role}': {isAuthorized}");
            return;
        }

        // 檢查特定權限
        if (!string.IsNullOrEmpty(Permission))
        {
            Console.WriteLine($"🔍 開始檢查特定權限: '{Permission}'");
            try
            {
                using var scope = ServiceProvider.CreateScope();
                var permissionService = scope.ServiceProvider.GetService<ERPCore2.Services.IPermissionService>();
                
                if (permissionService != null)
                {
                    Console.WriteLine("✅ PermissionService 注入成功");
                    var employeeIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                    Console.WriteLine($"🔍 員工ID Claim: '{employeeIdClaim}'");
                    
                    if (int.TryParse(employeeIdClaim, out int employeeId))
                    {
                        Console.WriteLine($"🔍 解析員工ID: {employeeId}");
                        
                        // 優先檢查是否有 System.Admin 權限
                        var adminResult = await permissionService.HasPermissionAsync(employeeId, "System.Admin");
                        if (adminResult.IsSuccess && adminResult.Data)
                        {
                            Console.WriteLine("✅ 使用者具有 System.Admin 權限，允許存取");
                            isAuthorized = true;
                            return;
                        }
                        
                        // 檢查指定的權限
                        var result = await permissionService.HasPermissionAsync(employeeId, Permission);
                        isAuthorized = result.IsSuccess && result.Data;
                        Console.WriteLine($"🔍 權限檢查結果: IsSuccess={result.IsSuccess}, Data={result.Data}, isAuthorized={isAuthorized}");
                        if (!result.IsSuccess)
                        {
                            Console.WriteLine($"❌ 權限檢查錯誤: {result.ErrorMessage}");
                        }
                    }
                    else
                    {
                        Console.WriteLine("❌ 無法解析員工ID");
                    }
                }
                else
                {
                    Console.WriteLine("❌ PermissionService 注入失敗");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"💥 權限檢查例外: {ex.Message}");
                isAuthorized = false;
            }
            return;
        }

        // 如果沒有特定權限要求，只要已登入就允許
        Console.WriteLine("✅ 沒有特定權限要求，允許存取");
        isAuthorized = true;
    }
}
