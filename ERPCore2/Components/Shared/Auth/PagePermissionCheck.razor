@using ERPCore2.Services
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject INavigationPermissionService NavigationPermissionService
@inject NavigationManager NavigationManager

@if (isAuthorized)
{
    @ChildContent
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? RequiredPermission { get; set; }
    [Parameter] public string[]? AnyOfPermissions { get; set; }
    [Parameter] public string? RequiredModule { get; set; }

    private bool isAuthorized = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthorized = await CheckPermissionAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // 每次參數變更時重新檢查權限，避免快取問題
        isAuthorized = await CheckPermissionAsync();
    }

    private async Task<bool> CheckPermissionAsync()
    {
        try
        {
            // 優先檢查是否有 System.Admin 權限
            if (await NavigationPermissionService.CanAccessAsync("System.Admin"))
            {
                return true;
            }

            // 如果指定了單一權限
            if (!string.IsNullOrEmpty(RequiredPermission))
            {
                return await NavigationPermissionService.CanAccessAsync(RequiredPermission);
            }

            // 如果指定了多個權限中的任一個
            if (AnyOfPermissions != null && AnyOfPermissions.Any())
            {
                foreach (var permission in AnyOfPermissions)
                {
                    if (await NavigationPermissionService.CanAccessAsync(permission))
                        return true;
                }
                return false;
            }

            // 如果指定了模組
            if (!string.IsNullOrEmpty(RequiredModule))
            {
                return await NavigationPermissionService.CanAccessModuleAsync(RequiredModule);
            }

            // 如果沒有指定任何權限要求，檢查用戶是否已認證
            var employeeId = await NavigationPermissionService.GetCurrentEmployeeIdAsync();
            return employeeId > 0;
        }
        catch (Exception)
        {
            return false;
        }
    }

    private void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }
}
