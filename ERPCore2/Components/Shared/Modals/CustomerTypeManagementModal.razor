@namespace ERPCore2.Components.Shared.Modals
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services.Interfaces
@using static ERPCore2.Components.Shared.Buttons.ButtonComponent
@using static ERPCore2.Components.Shared.Alerts.AlertComponent

@inject ICustomerTypeService CustomerTypeService
@inject IJSRuntime JSRuntime

@* CustomerType 管理模態視窗 - 用於管理客戶類型的小型阻擋式視窗 *@

<div class="modal fade" id="@ModalId" tabindex="-1" aria-labelledby="@($"{ModalId}Label")" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="@($"{ModalId}Label")">
                    <i class="fas fa-users me-2"></i>
                    客戶類型管理
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="關閉" @onclick="CloseModal"></button>
            </div>
            
            <div class="modal-body">
                <LoadingComponent IsLoading="@isLoading" 
                                LoadingText="載入客戶類型資料中..." 
                                ShowText="true" />

                @if (!isLoading)
                {
                    <!-- 新增客戶類型表單 -->
                    <div class="card mb-3">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-plus text-primary me-2"></i>
                                新增客戶類型
                            </h6>
                        </div>
                        <div class="card-body">
                            <EditForm Model="@newCustomerType" OnValidSubmit="@CreateCustomerType">
                                <DataAnnotationsValidator />
                                
                                <div class="row">
                                    <div class="col-md-6">
                                        <InputComponent Id="typeName" 
                                                      Label="類型名稱" 
                                                      Value="@newCustomerType.TypeName"
                                                      ValueChanged="@(value => newCustomerType.TypeName = value)"
                                                      IsRequired="true"
                                                      Placeholder="例如：企業客戶、個人客戶..." />
                                        <ValidationMessage For="@(() => newCustomerType.TypeName)" class="text-danger" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <InputComponent Id="description" 
                                                      Label="描述" 
                                                      Value="@newCustomerType.Description"
                                                      ValueChanged="@(value => newCustomerType.Description = value)"
                                                      Placeholder="選填的詳細說明..." />
                                    </div>
                                </div>
                                
                                <div class="d-flex justify-content-end mt-3">
                                    <ButtonComponent Text="新增" 
                                                   Variant="ButtonVariant.Primary" 
                                                   IconClass="fas fa-plus"
                                                   IsDisabled="@isSubmitting"
                                                   IsSubmit="true" />
                                </div>
                            </EditForm>
                        </div>
                    </div>

                    <!-- 現有客戶類型列表 -->
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0">
                                <i class="fas fa-list text-info me-2"></i>
                                現有客戶類型
                                <span class="badge bg-info">@customerTypes.Count</span>
                            </h6>
                        </div>
                        <div class="card-body">
                            @if (customerTypes.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>類型名稱</th>
                                                <th>描述</th>
                                                <th>狀態</th>
                                                <th>建立日期</th>
                                                <th class="text-end">操作</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var customerType in customerTypes)
                                            {
                                                <tr class="@(customerType.Status == EntityStatus.Inactive ? "table-secondary" : "")">
                                                    <td>
                                                        <strong>@customerType.TypeName</strong>
                                                    </td>
                                                    <td>
                                                        <small class="text-muted">@(string.IsNullOrWhiteSpace(customerType.Description) ? "無描述" : customerType.Description)</small>
                                                    </td>
                                                    <td>
                                                        <span class="badge @(customerType.Status == EntityStatus.Active ? "bg-success" : "bg-secondary")">
                                                            @GetStatusText(customerType.Status)
                                                        </span>
                                                    </td>                                                    <td>
                                                        <small class="text-muted">@customerType.CreatedAt.ToString("yyyy/MM/dd")</small>
                                                    </td>
                                                    <td class="text-end">
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            @if (customerType.Status == EntityStatus.Active)
                                                            {
                                                                <ButtonComponent Text="" 
                                                                               Variant="ButtonVariant.OutlineSecondary" 
                                                                               Size="ButtonSize.Small"
                                                                               IconClass="fas fa-pause"
                                                                               Title="停用"
                                                                               OnClick="@(() => ToggleCustomerTypeStatus(customerType.Id, EntityStatus.Inactive))" />
                                                            }
                                                            else
                                                            {
                                                                <ButtonComponent Text="" 
                                                                               Variant="ButtonVariant.Success" 
                                                                               Size="ButtonSize.Small"
                                                                               IconClass="fas fa-play"
                                                                               Title="啟用"
                                                                               OnClick="@(() => ToggleCustomerTypeStatus(customerType.Id, EntityStatus.Active))" />
                                                            }
                                                            
                                                            <ButtonComponent Text="" 
                                                                           Variant="ButtonVariant.OutlineDanger" 
                                                                           Size="ButtonSize.Small"
                                                                           IconClass="fas fa-trash"
                                                                           Title="刪除"
                                                                           OnClick="@(() => DeleteCustomerType(customerType.Id))" />
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="fas fa-inbox fa-2x text-muted mb-2"></i>
                                    <p class="text-muted">尚未建立任何客戶類型</p>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- 錯誤訊息顯示 -->
                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <AlertComponent Type="AlertType.Danger" 
                                  Message="@errorMessage" 
                                  IconClass="fas fa-exclamation-triangle"
                                  OnDismiss="ClearError" />
                }

                <!-- 成功訊息顯示 -->
                @if (!string.IsNullOrWhiteSpace(successMessage))
                {
                    <AlertComponent Type="AlertType.Success" 
                                  Message="@successMessage" 
                                  IconClass="fas fa-check-circle"
                                  OnDismiss="ClearSuccess" />
                }
            </div>
            
            <div class="modal-footer">
                <ButtonComponent Text="關閉" 
                               Variant="ButtonVariant.Secondary" 
                               IconClass="fas fa-times"
                               OnClick="CloseModal" />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string ModalId { get; set; } = "customerTypeModal";
    [Parameter] public EventCallback OnCustomerTypesChanged { get; set; }

    private List<CustomerType> customerTypes = new();
    private CustomerType newCustomerType = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomerTypes();
    }

    public async Task ShowModal()
    {
        // 重新載入最新資料
        await LoadCustomerTypes();
        
        // 使用 bootstrap-helpers 顯示模態視窗
        await JSRuntime.InvokeVoidAsync("bootstrapHelpers.showModal", ModalId);
    }

    private async Task CloseModal()
    {
        // 使用 bootstrap-helpers 隱藏模態視窗
        await JSRuntime.InvokeVoidAsync("bootstrapHelpers.hideModal", ModalId);
        
        // 通知父組件客戶類型已變更
        if (OnCustomerTypesChanged.HasDelegate)
        {
            await OnCustomerTypesChanged.InvokeAsync();
        }
    }

    private async Task LoadCustomerTypes()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            customerTypes = await CustomerTypeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"載入客戶類型時發生錯誤：{ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CreateCustomerType()
    {
        try
        {
            isSubmitting = true;
            ClearMessages();
            StateHasChanged();

            // 設定預設值
            newCustomerType.CreatedBy = "系統管理員"; // 實際應用中應該從使用者身份取得
            newCustomerType.Status = EntityStatus.Active;

            var result = await CustomerTypeService.CreateAsync(newCustomerType);
            
            if (result.IsSuccess)
            {
                successMessage = "客戶類型新增成功！";
                newCustomerType = new CustomerType(); // 重置表單
                await LoadCustomerTypes(); // 重新載入列表
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "新增客戶類型失敗";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"新增客戶類型時發生錯誤：{ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task ToggleCustomerTypeStatus(int customerTypeId, EntityStatus newStatus)
    {
        try
        {
            ClearMessages();

            var result = await CustomerTypeService.ToggleStatusAsync(customerTypeId);
            
            if (result.IsSuccess)
            {
                successMessage = $"客戶類型狀態已更新";
                await LoadCustomerTypes(); // 重新載入列表
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "更新客戶類型狀態失敗";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"更新客戶類型狀態時發生錯誤：{ex.Message}";
        }

        StateHasChanged();
    }

    private async Task DeleteCustomerType(int customerTypeId)
    {
        try
        {
            // 使用 JavaScript 確認對話框
            bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "確定要刪除此客戶類型嗎？此操作無法復原。");
            
            if (!confirmed)
                return;

            ClearMessages();

            var result = await CustomerTypeService.DeleteAsync(customerTypeId);
            
            if (result.IsSuccess)
            {
                successMessage = "客戶類型已刪除";
                await LoadCustomerTypes(); // 重新載入列表
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "刪除客戶類型失敗";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"刪除客戶類型時發生錯誤：{ex.Message}";
        }

        StateHasChanged();
    }

    private string GetStatusText(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Active => "啟用",
            EntityStatus.Inactive => "停用",
            EntityStatus.Deleted => "已刪除",
            _ => "未知"
        };
    }

    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private void ClearError()
    {
        errorMessage = string.Empty;
    }

    private void ClearSuccess()
    {
        successMessage = string.Empty;
    }
}
