@* 可重用的廠商編輯組件 - 可在任何頁面中嵌入 *@
@inject ISupplierService SupplierService
@inject IContactService ContactService
@inject IAddressService AddressService
@inject IContactTypeService ContactTypeService
@inject IAddressTypeService AddressTypeService
@inject ISupplierTypeService SupplierTypeService
@inject INotificationService NotificationService

<GenericEditModalComponent TEntity="Supplier" 
                          TService="ISupplierService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@SupplierId"
                          Service="@SupplierService"
                          EntityName="廠商"
                          EntityNamePlural="廠商"
                          ModalTitle="@(SupplierId.HasValue ? "編輯廠商" : "新增廠商")"
                          Size="GenericEditModalComponent<Supplier, ISupplierService>.ModalSize.ExtraLarge"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadSupplierData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          SaveHandler="@SaveSupplier"
                          OnSaveSuccess="@OnSaveSuccess"
                          RequiredPermission="Supplier.Read"
                          OnCancel="@OnCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          AdditionalSections="@GetAdditionalSections()" />

@* 廠商類型編輯 Modal *@
<SupplierTypeEditModalComponent @ref="supplierTypeEditModal"
                               IsVisible="@supplierTypeModalManager.IsModalVisible"
                               IsVisibleChanged="@supplierTypeModalManager.HandleModalVisibilityChangedAsync"
                               SupplierTypeId="@supplierTypeModalManager.SelectedEntityId"
                               OnSupplierTypeSaved="@OnSupplierTypeSavedWrapper"
                               OnCancel="@supplierTypeModalManager.HandleModalCancelAsync" />

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? SupplierId { get; set; }
    [Parameter] public EventCallback<Supplier> OnSupplierSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private GenericEditModalComponent<Supplier, ISupplierService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 廠商類型編輯 Modal 相關變數 - 使用泛型管理器
    private SupplierTypeEditModalComponent? supplierTypeEditModal;
    private RelatedEntityModalManager<SupplierType> supplierTypeModalManager = default!;
    
    // 選項清單
    private List<SupplierType> supplierTypes = new();
    private List<ContactType> contactTypes = new();
    private List<AddressType> addressTypes = new();
    
    // 聯絡資訊和地址資訊相關變數
    private List<Contact> supplierContacts = new();
    private List<Address> supplierAddresses = new();
    
    // 子集合組件用的轉換清單
    private List<ERPCore2.Data.BaseEntity> contactTypeOptions = new();
    private List<ERPCore2.Data.BaseEntity> addressTypeOptions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化廠商類型 Modal 管理器
            InitializeSupplierTypeModalManager();
            
            await LoadAdditionalDataAsync();
            InitializeFormFields();
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化廠商編輯組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // 當 SupplierId 參數變更時，重新初始化表單欄位
        if (formFields != null) // 只有在已經初始化過的情況下才重新設定
        {
            await LoadAdditionalDataAsync();
            InitializeFormFields();
        }
        
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// 初始化廠商類型 Modal 管理器
    /// </summary>
    private void InitializeSupplierTypeModalManager()
    {
        supplierTypeModalManager = new RelatedEntityManagerBuilder<SupplierType>(NotificationService, "廠商類型")
            .WithPropertyName(nameof(Supplier.SupplierTypeId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(supplierTypeId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.SupplierTypeId = supplierTypeId;
                }
            })
            .WithCustomPostProcess(supplierType => 
            {
                // 重新初始化表單欄位以更新按鈕狀態
                InitializeFormFields();
                return Task.CompletedTask;
            })
            .Build();
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入可選擇的廠商類型列表
            supplierTypes = await SupplierService.GetSupplierTypesAsync();
            
            // 載入聯絡類型和地址類型
            contactTypes = await ContactTypeService.GetActiveAsync();
            addressTypes = await AddressTypeService.GetActiveAsync();
            
            // 轉換為子集合組件用的基礎實體清單
            contactTypeOptions = contactTypes.Cast<ERPCore2.Data.BaseEntity>().ToList();
            addressTypeOptions = addressTypes.Cast<ERPCore2.Data.BaseEntity>().ToList();
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("載入廠商編輯相關資料時發生錯誤");
            supplierTypes = new List<SupplierType>();
            contactTypes = new List<ContactType>();
            addressTypes = new List<AddressType>();
            contactTypeOptions = new List<ERPCore2.Data.BaseEntity>();
            addressTypeOptions = new List<ERPCore2.Data.BaseEntity>();
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(Supplier.SupplierCode),
                    Label = "廠商代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入廠商代碼",
                    IsRequired = true,
                    MaxLength = 20,
                    HelpText = "廠商的唯一識別代碼"
                },
                new()
                {
                    PropertyName = nameof(Supplier.CompanyName),
                    Label = "公司名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司名稱",
                    IsRequired = true,
                    MaxLength = 100,
                    HelpText = "廠商的正式公司名稱"
                },
                new()
                {
                    PropertyName = nameof(Supplier.ContactPerson),
                    Label = "聯絡人",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入聯絡人姓名",
                    MaxLength = 50,
                    HelpText = "主要聯絡人姓名"
                },
                new()
                {
                    PropertyName = nameof(Supplier.TaxNumber),
                    Label = "統一編號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入統一編號",
                    MaxLength = 8,
                    HelpText = "公司統一編號（8位數字）"
                },
                new()
                {
                    PropertyName = nameof(Supplier.SupplierTypeId),
                    Label = "廠商類型",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇廠商類型",
                    MinSearchLength = 0, // 允許空白搜尋以顯示所有選項
                    HelpText = "輸入廠商類型名稱進行搜尋，或直接選擇",
                    ActionButtons = GetSupplierTypeActionButtons()
                },
                new()
                {
                    PropertyName = nameof(Supplier.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註",
                    IsRequired = false,
                    MaxLength = 500,
                    Rows = 2,
                    HelpText = "廠商的額外說明或注意事項",
                    ContainerCssClass = "col-12"
                }
            };

            // 更新表單區段定義
            formSections = new Dictionary<string, string>
            {
                { nameof(Supplier.SupplierCode), "基本資訊" },
                { nameof(Supplier.CompanyName), "基本資訊" },
                { nameof(Supplier.ContactPerson), "基本資訊" },
                { nameof(Supplier.TaxNumber), "基本資訊" },
                { nameof(Supplier.SupplierTypeId), "基本資訊" },
                { nameof(Supplier.Remarks), "額外資訊" }
            };
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }
    
    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(Supplier.SupplierTypeId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["TypeName"] = searchTerm,
                    ["Status"] = 1 // EntityStatus.Active
                }
            }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(Supplier.SupplierTypeId), supplierTypes.Cast<object>() }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Supplier.SupplierTypeId), "TypeName" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Supplier.SupplierTypeId), "Id" }
        };
    }
    
    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(Supplier.SupplierTypeId), supplierTypeModalManager }
        };
    }

    private async Task<Supplier?> LoadSupplierData()
    {
        try
        {
            if (!SupplierId.HasValue) 
            {
                // 新增模式
                var newSupplier = new Supplier
                {
                    SupplierCode = GenerateSupplierCode(),
                    CompanyName = "",
                    ContactPerson = "",
                    TaxNumber = "",
                    Status = EntityStatus.Active
                };
                
                supplierContacts = new List<Contact>();
                supplierAddresses = new List<Address>();
                
                return newSupplier;
            }

            var supplier = await SupplierService.GetByIdAsync(SupplierId.Value);            
            
            if (supplier == null)
            {
                _ = NotificationService.ShowErrorAsync("找不到指定的廠商資料");
                return null;
            }
            
            // 載入聯絡資訊和地址資訊
            supplierContacts = await ContactService.GetByOwnerAsync(ContactOwnerTypes.Supplier, SupplierId.Value);
            supplierAddresses = await AddressService.GetSupplierAddressesAsync(SupplierId.Value);
            
            return supplier;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("載入廠商資料時發生錯誤");
            
            // 設定安全的預設值，確保程式不會崩潰
            return new Supplier
            {
                SupplierCode = "",
                CompanyName = "",
                ContactPerson = "",
                TaxNumber = "",
                Status = EntityStatus.Active
            };
        }
    }

    private string GenerateSupplierCode()
    {
        try
        {
            // 簡單的廠商代碼生成邏輯：S + 時間戳
            return $"S{DateTime.Now:yyyyMMddHHmmss}";
        }
        catch (Exception)
        {
            // 如果生成失敗，返回預設格式
            return $"S{DateTime.Now:yyyyMMddHHmmss}";
        }
    }

    private async Task<bool> SaveSupplier(Supplier entity)
    {
        try
        {
            // 基本驗證 - 使用通知服務
            if (string.IsNullOrWhiteSpace(entity.SupplierCode))
            {
                _ = NotificationService.ShowErrorAsync("廠商代碼為必填");
                return false;
            }

            if (string.IsNullOrWhiteSpace(entity.CompanyName))
            {
                _ = NotificationService.ShowErrorAsync("公司名稱為必填");
                return false;
            }

            ServiceResult result;
            
            if (SupplierId.HasValue)
            {
                // 更新現有廠商
                result = await SupplierService.UpdateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新聯絡方式和地址資料
                    await UpdateSupplierSubCollectionsAsync(entity.Id);
                }
            }
            else
            {
                // 新增廠商
                result = await SupplierService.CreateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新聯絡方式和地址資料
                    await UpdateSupplierSubCollectionsAsync(entity.Id);
                }
            }

            // 讓 GenericEditModalComponent 處理通用的成功/失敗訊息
            return result.IsSuccess;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("儲存廠商資料時發生錯誤");
            return false;
        }
    }

    private async Task UpdateSupplierSubCollectionsAsync(int supplierId)
    {
        try
        {
            // 更新聯絡資訊
            // TODO: 重新實作聯絡方式保存邏輯使用 ContactService
            // 暫時註解掉舊的聯絡方式保存邏輯
            /*
            if (supplierContacts.Any())
            {
                // 聯絡方式的保存邏輯
            }
            */

            // 更新地址資訊
            if (supplierAddresses.Any())
            {
                // 地址的保存邏輯
                foreach (var address in supplierAddresses)
                {
                    SetSupplierIdForAddress(address, supplierId);
                    
                    if (address.Id == 0)
                    {
                        // 新增地址
                        await AddressService.CreateAddressAsync(AddressOwnerTypes.Supplier, supplierId, address);
                    }
                    else
                    {
                        // 更新地址
                        await AddressService.UpdateAddressAsync(address);
                    }
                }
            }
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("更新廠商相關資料時發生錯誤");
        }
    }

    private async Task OnSaveSuccess()
    {
        try
        {
            if (editModalComponent?.Entity != null)
            {
                await OnSupplierSaved.InvokeAsync(editModalComponent.Entity);
            }
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("儲存成功回調時發生錯誤");
        }
    }

    private void SetSupplierIdForAddress(Address address, int parentId)
    {
        address.OwnerId = parentId;
        address.OwnerType = AddressOwnerTypes.Supplier;
    }

    /// <summary>
    /// 處理廠商聯絡方式變更事件
    /// </summary>
    private Task OnSupplierContactsChanged(List<Contact> updatedContacts)
    {
        try
        {
            supplierContacts = updatedContacts;
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("更新聯絡方式時發生錯誤");
            return Task.CompletedTask;
        }
    }

    /// <summary>
    /// 處理廠商地址變更事件
    /// </summary>
    private Task OnSupplierAddressesChanged(List<Address> updatedAddresses)
    {
        try
        {
            supplierAddresses = updatedAddresses;
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("更新地址資料時發生錯誤");
            return Task.CompletedTask;
        }
    }

    /// <summary>
    /// 取得額外區段內容（聯絡方式和地址管理）
    /// </summary>
    private RenderFragment? GetAdditionalSections()
    {
        return @<div class="row mt-4">
            <div class="col-md-6">
                <ContactManagerComponent TContactEntity="Contact"
                                       TParentEntity="Supplier"
                                       Items="@supplierContacts"
                                       Options="@contactTypeOptions"
                                       ParentEntityId="@(SupplierId ?? 0)"
                                       GetIsPrimary="@(c => c.IsPrimary)"
                                       GetTypeId="@(c => c.ContactTypeId)"
                                       GetContactValue="@(c => c.ContactValue)"
                                       SetIsPrimary="@((c, isPrimary) => c.IsPrimary = isPrimary)"
                                       SetTypeId="@((c, typeId) => c.ContactTypeId = typeId)"
                                       SetContactValue="@((c, value) => c.ContactValue = value)"
                                       SetParentId="@((c, parentId) => { c.OwnerType = ContactOwnerTypes.Supplier; c.OwnerId = parentId; })"
                                       ItemsChanged="@OnSupplierContactsChanged" />
            </div>
            <div class="col-md-6">
                <AddressManagerComponent TAddressEntity="Address"
                                       TParentEntity="Supplier"
                                       Items="@supplierAddresses"
                                       Options="@addressTypeOptions"
                                       ParentEntityId="@(SupplierId ?? 0)"
                                       GetIsPrimary="@(a => a.IsPrimary)"
                                       GetTypeId="@(a => a.AddressTypeId)"
                                       GetPostalCode="@(a => a.PostalCode)"
                                       GetCity="@(a => a.City)"
                                       GetAddress="@(a => a.AddressLine)"
                                       SetIsPrimary="@((a, isPrimary) => a.IsPrimary = isPrimary)"
                                       SetTypeId="@((a, typeId) => a.AddressTypeId = typeId)"
                                       SetPostalCode="@((a, postalCode) => a.PostalCode = postalCode)"
                                       SetCity="@((a, city) => a.City = city)"
                                       SetAddress="@((a, address) => a.AddressLine = address)"
                                       SetParentId="@((a, parentId) => SetSupplierIdForAddress(a, parentId))"
                                       ItemsChanged="@OnSupplierAddressesChanged" />
            </div>
        </div>;
    }
    
    /// <summary>
    /// 包裝廠商類型儲存事件以符合原有介面
    /// </summary>
    private async Task OnSupplierTypeSavedWrapper(SupplierType savedSupplierType)
    {
        await supplierTypeModalManager.HandleEntitySavedAsync(savedSupplierType, shouldAutoSelect: true);
    }
    
    /// <summary>
    /// 使用泛型管理器產生廠商類型操作按鈕
    /// </summary>
    private List<FieldActionButton> GetSupplierTypeActionButtons()
    {
        var currentSupplierTypeId = editModalComponent?.Entity?.SupplierTypeId;
        return supplierTypeModalManager.GenerateActionButtons(currentSupplierTypeId);
    }

    /// <summary>
    /// 開啟廠商類型編輯 Modal - 使用泛型管理器
    /// </summary>
    private async Task OpenSupplierTypeModal(int? supplierTypeId)
    {
        await supplierTypeModalManager.OpenModalAsync(supplierTypeId);
    }

    /// <summary>
    /// 處理欄位值變更事件
    /// </summary>
    private Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 使用泛型管理器自動處理廠商類型欄位變更
            if (fieldChange.PropertyName == nameof(Supplier.SupplierTypeId))
            {
                supplierTypeModalManager.UpdateFieldActionButtons(formFields, fieldChange.PropertyName, 
                    fieldChange.Value != null && int.TryParse(fieldChange.Value.ToString(), out int typeId) ? typeId : null);
            }
            
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("欄位變更處理時發生錯誤");
            return Task.CompletedTask;
        }
    }
}
