@*
    批次審核 Modal 組件
    用於顯示待審核單據清單並提供查看和審核功能
*@
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.SubCollections
@using ERPCore2.Models
@using ERPCore2.Services
@using Microsoft.JSInterop
@typeparam TEntity where TEntity : class
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="modal fade @(IsVisible ? "show" : "")"
     style="display: @(IsVisible ? "block" : "none"); z-index: 1040;"
     tabindex="-1"
     role="dialog"
     @onclick="@HandleBackdropClick">

    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable"
         role="document"
         @onclick:stopPropagation="true">
        <div class="modal-content shadow-lg">

            @* Header：標題區 *@
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title fw-bold">
                    @Title
                </h5>
                <GenericButtonComponent Type="button"
                                      CssClass="btn-close"
                                      OnClick="HandleClose"
                                      Title="關閉" />
            </div>

            @* Modal Actions - 按鈕區塊 *@
            <div class="modal-footer border-bottom border-top-0 d-flex align-items-center">
                @* 左側：選取資訊 *@
                <div class="text-muted">
                    @if (pendingItems.Any())
                    {
                        <small>
                            已選取 <strong class="text-primary">@selectedItems.Count</strong> / @pendingItems.Count 筆
                        </small>
                    }
                </div>
                
                @* 右側：按鈕組 *@
                <div class="d-flex gap-2 ms-auto">
                    @* 全選/取消全選按鈕 *@
                    <GenericButtonComponent Variant="ButtonVariant.Secondary" 
                                          Text="@(selectedItems.Count == pendingItems.Count ? "取消全選" : "全選")" 
                                          OnClick="HandleToggleSelectAll"
                                          IsDisabled="@(!pendingItems.Any() || isLoading)"
                                          Title="@(selectedItems.Count == pendingItems.Count ? "取消選取所有項目" : "選取所有項目")" />
                    
                    @* 審核按鈕 - 只審核已選取的項目 *@
                    <GenericButtonComponent Variant="ButtonVariant.Success" 
                                          Text="審核" 
                                          OnClick="HandleApproveSelected"
                                          IsDisabled="@(!selectedItems.Any() || isLoading)"
                                          Title="@($"審核已選取的 {selectedItems.Count} 筆單據")" />
                    
                    @* 關閉按鈕 *@
                    <GenericButtonComponent Variant="ButtonVariant.Danger" 
                                          Text="關閉" 
                                          OnClick="HandleClose"
                                          Title="關閉視窗" />
                </div>
            </div>

            @* Body：表格內容 *@
            <div class="modal-body p-4">
                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">載入中...</span>
                        </div>
                        <p class="mt-3 text-muted">正在載入待審核資料...</p>
                    </div>
                }
                else if (!pendingItems.Any())
                {
                    <div class="alert alert-success mb-0">
                        太棒了！目前沒有待審核的項目。
                    </div>
                }
                else
                {                    
                    <div class="card border-0 shadow-sm">
                        <div class="card-body p-0">
                            <InteractiveTableComponent TItem="TEntity"
                                                     Items="@pendingItems"
                                                     ColumnDefinitions="@ColumnDefinitions"
                                                     ShowHeader="true"
                                                     ShowActions="true"
                                                     ShowRowNumbers="true"
                                                     IsStriped="true"
                                                     IsHoverable="true"
                                                     IsBordered="true"
                                                     CssClass="mb-0 batch-approval-table"
                                                     EnableRowClick="true"
                                                     OnRowClick="@HandleRowClick"
                                                     GetRowCssClass="@GetRowCssClass"
                                                     ActionsTemplate="@GetActionsTemplate()" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* 獨立的背景遮罩 - 與 GenericEditModalComponent 保持一致 *@
@if (IsVisible)
{
    <div class="modal-backdrop fade show" style="z-index: 1039;"></div>
}

@code {
    // ===== 參數定義 =====

    /// <summary>
    /// Modal 是否顯示
    /// </summary>
    [Parameter]
    public bool IsVisible { get; set; }

    /// <summary>
    /// Modal 顯示狀態變更事件
    /// </summary>
    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    /// <summary>
    /// Modal 標題
    /// </summary>
    [Parameter]
    public string Title { get; set; } = "批次審核";

    /// <summary>
    /// 實體名稱（例如：採購單、報價單）
    /// </summary>
    [Parameter]
    public string EntityName { get; set; } = "單據";

    /// <summary>
    /// 載入待審核資料的方法
    /// </summary>
    [Parameter]
    public Func<Task<List<TEntity>>>? LoadPendingItems { get; set; }

    /// <summary>
    /// 單筆審核方法
    /// </summary>
    [Parameter]
    public Func<TEntity, Task<bool>>? OnApproveItem { get; set; }

    /// <summary>
    /// 批次審核方法
    /// </summary>
    [Parameter]
    public Func<List<TEntity>, Task<(int successCount, int failCount)>>? OnApproveAll { get; set; }

    /// <summary>
    /// 查看按鈕點擊事件
    /// </summary>
    [Parameter]
    public EventCallback<TEntity> OnViewClick { get; set; }

    /// <summary>
    /// 表格欄位定義
    /// </summary>
    [Parameter]
    public List<InteractiveColumnDefinition>? ColumnDefinitions { get; set; }

    /// <summary>
    /// 審核完成後的回調
    /// </summary>
    [Parameter]
    public EventCallback OnApprovalCompleted { get; set; }

    // ===== 私有欄位 =====
    private bool isLoading = false;
    private List<TEntity> pendingItems = new();
    private HashSet<TEntity> selectedItems = new(); // 儲存選取的項目
    
    // ESC 鍵支援
    private DotNetObjectReference<BatchApprovalModalComponent<TEntity>>? _escKeyDotNetRef;
    private bool _isEscKeyListenerActive = false;
    private bool _isDisposed = false;
    private readonly object _escKeyLock = new object();

    // ===== 生命週期方法 =====

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && !isLoading && !pendingItems.Any())
        {
            await LoadPendingDataAsync();
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible)
        {
            bool shouldSetup;
            lock (_escKeyLock)
            {
                shouldSetup = !_isEscKeyListenerActive;
            }
            
            if (shouldSetup)
            {
                await SetupEscKeyListenerAsync();
            }
        }
        else
        {
            bool shouldCleanup;
            lock (_escKeyLock)
            {
                shouldCleanup = _isEscKeyListenerActive;
            }
            
            if (shouldCleanup)
            {
                await CleanupEscKeyListenerAsync();
            }
        }
    }

    // ===== 資料載入方法 =====

    /// <summary>
    /// 載入待審核資料
    /// </summary>
    private async Task LoadPendingDataAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            if (LoadPendingItems != null)
            {
                pendingItems = await LoadPendingItems();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入待審核{EntityName}失敗：{ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // ===== 操作按鈕範本 =====

    private RenderFragment<TEntity> GetActionsTemplate()
    {
        return entity => __builder =>
        {
            @* 查看按鈕 - 參考 PurchaseReceivingDetailManagerComponent 的設計 *@
            <GenericButtonComponent Variant="ButtonVariant.Info"
                                  IconClass="bi bi-eye text-white"
                                  Size="ButtonSize.Large"
                                  Title="查看詳情"
                                  OnClick="@(async () => await HandleViewClick(entity))"
                                  StopPropagation="true"
                                  CssClass="btn-square" />
        };
    }

    // ===== 事件處理方法 =====

    /// <summary>
    /// 處理行點擊事件 - 切換選取狀態
    /// </summary>
    private void HandleRowClick(TEntity entity)
    {
        if (selectedItems.Contains(entity))
        {
            selectedItems.Remove(entity);
        }
        else
        {
            selectedItems.Add(entity);
        }
        StateHasChanged();
    }

    /// <summary>
    /// 取得行的 CSS 類別 - 為選取的行添加高亮樣式
    /// </summary>
    private string GetRowCssClass(TEntity entity, int index)
    {
        return selectedItems.Contains(entity) ? "table-row-selected" : "";
    }

    /// <summary>
    /// 處理全選/取消全選
    /// </summary>
    private void HandleToggleSelectAll()
    {
        if (selectedItems.Count == pendingItems.Count)
        {
            // 取消全選
            selectedItems.Clear();
        }
        else
        {
            // 全選
            selectedItems = pendingItems.ToHashSet();
        }
        StateHasChanged();
    }

    /// <summary>
    /// 處理審核所選項目
    /// </summary>
    private async Task HandleApproveSelected()
    {
        try
        {
            if (!selectedItems.Any())
            {
                await NotificationService.ShowWarningAsync("請先選取要審核的項目");
                return;
            }

            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"確定要審核已選取的 {selectedItems.Count} 筆{EntityName}嗎？");
            
            if (!confirmed)
            {
                return;
            }

            isLoading = true;
            StateHasChanged();

            if (OnApproveAll != null)
            {
                var (successCount, failCount) = await OnApproveAll(selectedItems.ToList());

                if (failCount == 0)
                {
                    await NotificationService.ShowSuccessAsync($"審核完成！成功審核 {successCount} 筆{EntityName}");
                }
                else
                {
                    await NotificationService.ShowWarningAsync($"審核完成！成功 {successCount} 筆，失敗 {failCount} 筆");
                }

                // 清空選取
                selectedItems.Clear();
                
                // 重新載入待審核資料
                await LoadPendingDataAsync();

                // 觸發審核完成事件
                if (OnApprovalCompleted.HasDelegate)
                {
                    await OnApprovalCompleted.InvokeAsync();
                }
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"審核所選項目時發生錯誤：{ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 處理查看按鈕點擊
    /// </summary>
    private async Task HandleViewClick(TEntity entity)
    {
        if (OnViewClick.HasDelegate)
        {
            await OnViewClick.InvokeAsync(entity);
        }
    }

    /// <summary>
    /// 處理單筆審核按鈕點擊
    /// </summary>
    private async Task HandleApproveClick(TEntity entity)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"確定要審核此{EntityName}嗎？");
            
            if (!confirmed)
            {
                return;
            }

            bool success = false;
            if (OnApproveItem != null)
            {
                success = await OnApproveItem(entity);
            }

            if (success)
            {
                await NotificationService.ShowSuccessAsync($"{EntityName}審核成功");
                
                // 從列表中移除已審核的項目
                pendingItems.Remove(entity);
                StateHasChanged();

                // 觸發審核完成事件
                if (OnApprovalCompleted.HasDelegate)
                {
                    await OnApprovalCompleted.InvokeAsync();
                }
            }
            else
            {
                await NotificationService.ShowErrorAsync($"{EntityName}審核失敗");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"審核時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理關閉按鈕點擊
    /// </summary>
    private async Task HandleClose()
    {
        await CloseModal();
    }

    /// <summary>
    /// 處理背景點擊
    /// </summary>
    private async Task HandleBackdropClick()
    {
        await CloseModal();
    }

    /// <summary>
    /// 關閉 Modal
    /// </summary>
    private async Task CloseModal()
    {
        pendingItems.Clear();
        selectedItems.Clear(); // 清空選取
        
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(false);
        }
    }

    // ===== ESC 鍵支援方法 =====

    private async Task SetupEscKeyListenerAsync()
    {
        try
        {
            lock (_escKeyLock)
            {
                if (_isEscKeyListenerActive && _escKeyDotNetRef != null)
                {
                    return;
                }
                
                _isEscKeyListenerActive = true;
            }
            
            lock (_escKeyLock)
            {
                _escKeyDotNetRef = DotNetObjectReference.Create(this);
            }
            
            await JSRuntime.InvokeVoidAsync("setupEscKeyListener", _escKeyDotNetRef);
        }
        catch (Exception ex)
        {
            lock (_escKeyLock)
            {
                _isEscKeyListenerActive = false;
            }
            LogError("SetupEscKeyListener", ex);
        }
    }
    
    private async Task CleanupEscKeyListenerAsync()
    {
        DotNetObjectReference<BatchApprovalModalComponent<TEntity>>? refToDispose = null;
        
        lock (_escKeyLock)
        {
            if (!_isEscKeyListenerActive)
            {
                return;
            }
            
            _isEscKeyListenerActive = false;
            refToDispose = _escKeyDotNetRef;
            _escKeyDotNetRef = null;
        }
        
        try
        {
            await JSRuntime.InvokeVoidAsync("cleanupEscKeyListener");
            await Task.Delay(200);
            
            if (refToDispose != null)
            {
                try
                {
                    refToDispose.Dispose();
                }
                catch (ObjectDisposedException)
                {
                    // 對象已被釋放，這是正常的
                }
                catch (Exception ex)
                {
                    LogError($"DotNetObjectReference dispose warning (safe to ignore): {ex.Message}", ex);
                }
            }
        }
        catch (JSDisconnectedException)
        {
            // Blazor 連接已斷開，這是正常的
        }
        catch (TaskCanceledException)
        {
            // 任務被取消，這是正常的
        }
        catch (Exception ex)
        {
            LogError("CleanupEscKeyListener", ex);
        }
    }
    
    [JSInvokable]
    public async Task HandleEscapeKey()
    {
        try
        {
            if (_isDisposed)
            {
                return;
            }
            
            if (IsVisible)
            {
                await HandleClose();
            }
        }
        catch (ObjectDisposedException)
        {
            // 忽略已釋放物件的錯誤
        }
        catch (InvalidOperationException)
        {
            // 忽略無效操作錯誤
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"ESC Error: {ex.Message}");
        }
    }
    
    private void LogError(string method, Exception ex)
    {
        System.Diagnostics.Debug.WriteLine($"[BatchApprovalModalComponent.{method}] 錯誤：{ex.Message}");
    }

    // ===== 資源清理 =====

    public void Dispose()
    {
        try
        {
            DotNetObjectReference<BatchApprovalModalComponent<TEntity>>? refToDispose = null;
            
            lock (_escKeyLock)
            {
                _isDisposed = true;
                _isEscKeyListenerActive = false;
                refToDispose = _escKeyDotNetRef;
                _escKeyDotNetRef = null;
            }
            
            refToDispose?.Dispose();
            
            _ = Task.Run(async () =>
            {
                try
                {
                    await CleanupEscKeyListenerAsync();
                }
                catch
                {
                    // 忽略清理過程中的錯誤
                }
            });
        }
        catch
        {
            // 忽略清理過程中的錯誤
        }
    }
}

<style>
    /* 批次審核表格樣式 */
    .batch-approval-table tbody tr {
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.1s ease, box-shadow 0.2s ease, border-color 0.2s ease;
    }

    /* 選取的行樣式 - 整個 Row 背景變色 */
    .batch-approval-table tbody tr.table-row-selected {
        background-color: #cfe2ff !important; /* 淺藍色背景 */
        border-left: 5px solid #0d6efd !important; /* 左側藍色粗邊框 */
        box-shadow: 0 2px 8px rgba(13, 110, 253, 0.2) !important; /* 添加陰影效果 */
    }

    /* 選取的行內所有儲存格都使用相同背景色和邊框顏色 */
    .batch-approval-table tbody tr.table-row-selected td {
        background-color: #cfe2ff !important;
        border-color: #cfe2ff !important; /* 垂直線顏色與背景一致 */
    }

    /* 選取的行 hover 效果 */
    .batch-approval-table tbody tr.table-row-selected:hover {
        background-color: #b6d4fe !important; /* 稍深的藍色 */
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(13, 110, 253, 0.3) !important;
    }

    .batch-approval-table tbody tr.table-row-selected:hover td {
        background-color: #b6d4fe !important;
        border-color: #b6d4fe !important; /* hover 時垂直線顏色也跟著變 */
    }

    /* 未選取的行 hover 效果 */
    .batch-approval-table tbody tr:not(.table-row-selected):hover {
        background-color: #f8f9fa !important;
    }

    .batch-approval-table tbody tr:not(.table-row-selected):hover td {
        background-color: #f8f9fa !important;
    }

    /* 按鈕區域不影響行點擊，但保持正常的 pointer 事件 */
    .batch-approval-table tbody tr td .btn {
        pointer-events: all;
        position: relative;
        z-index: 1;
    }

    /* 選取計數器樣式 */
    .modal-footer small {
        font-size: 0.9rem;
    }

    .modal-footer small strong {
        font-size: 1.1rem;
    }

    /* 行選取時的文字對比度優化 */
    .batch-approval-table tbody tr.table-row-selected td {
        color: #000 !important;
    }

    /* 確保 striped 效果不會覆蓋選取樣式 */
    .batch-approval-table.table-striped tbody tr.table-row-selected:nth-of-type(odd) td,
    .batch-approval-table.table-striped tbody tr.table-row-selected:nth-of-type(even) td {
        background-color: #cfe2ff !important;
        border-color: #cfe2ff !important;
    }

    .batch-approval-table.table-striped tbody tr.table-row-selected:hover:nth-of-type(odd) td,
    .batch-approval-table.table-striped tbody tr.table-row-selected:hover:nth-of-type(even) td {
        background-color: #b6d4fe !important;
        border-color: #b6d4fe !important;
    }
</style>
