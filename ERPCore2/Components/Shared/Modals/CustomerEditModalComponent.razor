@* 可重用的客戶編輯組件 - 可在任何頁面中嵌入 *@
@inject ICustomerService CustomerService
@inject IAddressService AddressService
@inject IContactService ContactService
@inject ICustomerTypeService CustomerTypeService
@inject INotificationService NotificationService

<GenericEditModalComponent TEntity="Customer" 
                          TService="ICustomerService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@CustomerId"
                          Service="@CustomerService"
                          EntityName="客戶"
                          EntityNamePlural="客戶"
                          ModalTitle="@(CustomerId.HasValue ? "編輯客戶" : "新增客戶")"
                          Size="GenericEditModalComponent<Customer, ICustomerService>.ModalSize.ExtraLarge"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadCustomerData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          AfterSave="@SaveSubCollectionsAsync"
                          SaveSuccessMessage="@(CustomerId.HasValue ? "客戶更新成功" : "客戶新增成功")"
                          SaveFailureMessage="客戶儲存失敗"
                          RequiredPermission="Customer.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged">
    <AdditionalSections>
        <div class="row mt-4">
            <div class="col-md-6">
                @* 聯絡方式管理 *@
                <ContactManagerComponent TContactEntity="Contact" 
                                        TParentEntity="Customer"
                                        Items="@customerContacts"
                                        Options="@contactTypeOptions"
                                        ParentEntityId="@(CustomerId ?? editModalComponent?.Entity?.Id ?? 0)"
                                        Title="聯絡方式"
                                        ItemDisplayName="聯絡方式"
                                        TypeDisplayName="聯絡類型"
                                        ValueDisplayName="聯絡內容"
                                        ValuePlaceholder="請輸入聯絡內容"
                                        GetTypeId="@(contact => contact.ContactTypeId)"
                                        GetContactValue="@(contact => contact.ContactValue)"
                                        GetOptionId="@(option => option.Id)"
                                        GetOptionDisplayText="@(option => ((ContactType)option).TypeName)"
                                        SetTypeId="@((contact, typeId) => contact.ContactTypeId = typeId)"
                                        SetContactValue="@((contact, value) => contact.ContactValue = value)"
                                        SetParentId="@((contact, parentId) => { contact.OwnerType = ContactOwnerTypes.Customer; contact.OwnerId = parentId; })"
                                        ItemsChanged="@OnContactsChanged" />
            </div>
            <div class="col-md-6">
                @* 地址管理 *@
                <AddressManagerComponent TAddressEntity="Address" 
                                        TParentEntity="Customer"
                                        Items="@customerAddresses"
                                        Options="@addressTypeOptions"
                                        ParentEntityId="@(CustomerId ?? editModalComponent?.Entity?.Id ?? 0)"
                                        Title="地址資訊"
                                        ItemDisplayName="地址"
                                        TypeDisplayName="地址類型"
                                        GetTypeId="@(address => address.AddressTypeId)"
                                        GetAddress="@(address => address.AddressLine)"
                                        GetOptionId="@(option => option.Id)"
                                        GetOptionDisplayText="@(option => ((AddressType)option).TypeName)"
                                        SetTypeId="@((address, typeId) => address.AddressTypeId = typeId)"
                                        SetAddress="@((address, value) => address.AddressLine = value)"
                                        SetParentId="@((address, parentId) => { address.OwnerType = AddressOwnerTypes.Customer; address.OwnerId = parentId; })"
                                        ItemsChanged="@OnAddressesChanged" />
            </div>
        </div>
    </AdditionalSections>
</GenericEditModalComponent>

@* 客戶類型編輯 Modal *@
<CustomerTypeEditModalComponent @ref="customerTypeEditModal"
                               IsVisible="@customerTypeModalManager.IsModalVisible"
                               IsVisibleChanged="@customerTypeModalManager.HandleModalVisibilityChangedAsync"
                               CustomerTypeId="@customerTypeModalManager.SelectedEntityId"
                               OnCustomerTypeSaved="@OnCustomerTypeSavedWrapper"
                               OnCancel="@customerTypeModalManager.HandleModalCancelAsync" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? CustomerId { get; set; }
    [Parameter] public EventCallback<Customer> OnCustomerSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<Customer, ICustomerService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 客戶類型編輯 Modal 相關變數 - 使用泛型管理器
    private CustomerTypeEditModalComponent? customerTypeEditModal;
    private RelatedEntityModalManager<CustomerType> customerTypeModalManager = default!;
    
    // 資料模型
    private List<Contact> customerContacts = new();
    private List<Address> customerAddresses = new();
    
    // 選項清單
    private List<CustomerType> customerTypes = new();
    private List<ContactType> contactTypes = new();
    private List<AddressType> addressTypes = new();
    
    // 子集合組件用的轉換清單
    private List<ERPCore2.Data.BaseEntity> contactTypeOptions = new();
    private List<ERPCore2.Data.BaseEntity> addressTypeOptions = new();

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化客戶類型 Modal 管理器
            InitializeCustomerTypeModalManager();
            
            await LoadAdditionalDataAsync();
            InitializeFormFields();
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化客戶編輯組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // 當 CustomerId 參數變更時，重新初始化表單欄位
        if (formFields != null) // 只有在已經初始化過的情況下才重新設定
        {
            await LoadAdditionalDataAsync();
            InitializeFormFields();
        }
        
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// 初始化客戶類型 Modal 管理器
    /// </summary>
    private void InitializeCustomerTypeModalManager()
    {
        customerTypeModalManager = new RelatedEntityManagerBuilder<CustomerType>(NotificationService, "客戶類型")
            .WithPropertyName(nameof(Customer.CustomerTypeId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(customerTypeId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.CustomerTypeId = customerTypeId;
                }
            })
            .WithCustomPostProcess(customerType => 
            {
                // 重新初始化表單欄位以更新按鈕狀態
                InitializeFormFields();
                return Task.CompletedTask;
            })
            .Build();
    }

    private async Task HandleSaveSuccess()
    {
        if (editModalComponent?.Entity != null)
        {
            await OnCustomerSaved.InvokeAsync(editModalComponent.Entity);
        }
        await CloseModal();
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task<Customer?> LoadCustomerData()
    {
        try
        {
            if (!CustomerId.HasValue)
            {
                // 新增模式
                var newCustomer = new Customer
                {
                    Code = await GenerateCustomerCodeAsync(),
                    Status = EntityStatus.Active
                };

                // 初始化空的子集合
                customerContacts = new List<Contact>();
                customerAddresses = new List<Address>();

                return newCustomer;
            }

            // 編輯模式
            var customer = await CustomerService.GetByIdAsync(CustomerId.Value);
            
            if (customer != null)
            {
                // 載入聯絡方式
                customerContacts = await ContactService.GetByOwnerAsync(ContactOwnerTypes.Customer, customer.Id);
                
                // 載入地址
                customerAddresses = await AddressService.GetAddressesByOwnerAsync(AddressOwnerTypes.Customer, customer.Id);
            }
            else
            {
                customerContacts = new List<Contact>();
                customerAddresses = new List<Address>();
            }

            return customer;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入客戶資料時發生錯誤：{ex.Message}");
            return null;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入可選擇的客戶類型列表
            customerTypes = await CustomerTypeService.GetActiveAsync();
            
            // 載入聯絡類型
            contactTypes = await CustomerService.GetContactTypesAsync();
            contactTypeOptions = contactTypes.Cast<ERPCore2.Data.BaseEntity>().ToList();
            
            // 載入地址類型
            addressTypes = await CustomerService.GetAddressTypesAsync();
            addressTypeOptions = addressTypes.Cast<ERPCore2.Data.BaseEntity>().ToList();
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("載入客戶編輯相關資料時發生錯誤");
            customerTypes = new List<CustomerType>();
            contactTypes = new List<ContactType>();
            addressTypes = new List<AddressType>();
            contactTypeOptions = new List<ERPCore2.Data.BaseEntity>();
            addressTypeOptions = new List<ERPCore2.Data.BaseEntity>();
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
            new()
            {
                PropertyName = nameof(Customer.Code),
                Label = "客戶代碼",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入客戶代碼",
                IsRequired = true,
                MaxLength = 20,
                HelpText = "客戶的唯一識別代碼，新增時系統會自動產生，也可手動修改"
            },
            new()
            {
                PropertyName = nameof(Customer.CompanyName),
                Label = "公司名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入公司名稱",
                IsRequired = true,
                MaxLength = 100,
                HelpText = "客戶的完整公司名稱"
            },
            new()
            {
                PropertyName = nameof(Customer.ContactPerson),
                Label = "聯絡人",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入聯絡人姓名",
                IsRequired = false,
                MaxLength = 50,
                HelpText = "主要聯絡人姓名"
            },
            new()
            {
                PropertyName = nameof(Customer.TaxNumber),
                Label = "統一編號",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入統一編號",
                IsRequired = false,
                MaxLength = 8,
                HelpText = "公司統一編號（8位數字）"
            },
            new()
            {
                PropertyName = nameof(Customer.CustomerTypeId),
                Label = "客戶類型",
                FieldType = FormFieldType.AutoComplete,
                Placeholder = "請輸入或選擇客戶類型",
                MinSearchLength = 0, // 允許空白搜尋以顯示所有選項
                HelpText = "輸入客戶類型名稱進行搜尋，或直接選擇",
                ActionButtons = GetCustomerTypeActionButtons()
            },
            new()
            {
                PropertyName = nameof(Customer.Remarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入備註",
                IsRequired = false,
                MaxLength = 500,
                Rows = 2,
                HelpText = "客戶的額外說明或注意事項",
                ContainerCssClass = "col-12"
            }
        };

        formSections = new Dictionary<string, string>
        {
            { nameof(Customer.Code), "基本資訊" },
            { nameof(Customer.CompanyName), "基本資訊" },
            { nameof(Customer.ContactPerson), "基本資訊" },
            { nameof(Customer.TaxNumber), "基本資訊" },
            { nameof(Customer.CustomerTypeId), "基本資訊" },            
            { nameof(Customer.Remarks), "其他資訊" }
        };
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    // 子集合變更事件處理
    private Task OnContactsChanged(List<Contact> updatedContacts)
    {
        customerContacts = updatedContacts;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnAddressesChanged(List<Address> updatedAddresses)
    {
        customerAddresses = updatedAddresses;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task SaveSubCollectionsAsync(Customer customer)
    {
        try
        {
            // 只有在客戶ID存在時才處理子集合（新增客戶時可能ID還是0）
            if (customer.Id <= 0)
            {
                return; // 新增的客戶，ID可能還沒設定，跳過子集合儲存
            }

            // 更新聯絡資訊 - 只更新或新增，不刪除
            foreach (var contact in customerContacts)
            {
                contact.OwnerType = ContactOwnerTypes.Customer;
                contact.OwnerId = customer.Id;
                
                if (contact.Id == 0)
                {
                    // 新記錄
                    await ContactService.CreateAsync(contact);
                }
                else
                {
                    // 更新現有記錄
                    await ContactService.UpdateAsync(contact);
                }
            }

            // 重新加載聯絡資料以更新UI顯示
            customerContacts = await ContactService.GetByOwnerAsync(ContactOwnerTypes.Customer, customer.Id);

            // 更新地址資訊 - 只更新或新增，不刪除
            foreach (var address in customerAddresses)
            {
                address.OwnerType = AddressOwnerTypes.Customer;
                address.OwnerId = customer.Id;
                
                if (address.Id == 0)
                {
                    // 新記錄
                    await AddressService.CreateAddressAsync(AddressOwnerTypes.Customer, customer.Id, address);
                }
                else
                {
                    // 更新現有記錄
                    await AddressService.UpdateAddressAsync(address);
                }
            }

            // 重新加載地址資料以更新UI顯示
            customerAddresses = await AddressService.GetCustomerAddressesAsync(customer.Id);

            StateHasChanged(); // 通知UI更新
        }
        catch (Exception)
        {
            // 記錄錯誤但不中斷流程，因為主要實體已經儲存成功
            // 可以考慮使用 Logger 記錄錯誤
        }
    }

    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(Customer.CustomerTypeId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["TypeName"] = searchTerm,
                    ["Status"] = 1 // EntityStatus.Active
                }
            }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(Customer.CustomerTypeId), customerTypes.Cast<object>() }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Customer.CustomerTypeId), "TypeName" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Customer.CustomerTypeId), "Id" }
        };
    }

    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(Customer.CustomerTypeId), customerTypeModalManager }
        };
    }

    /// <summary>
    /// 包裝客戶類型儲存事件以符合原有介面
    /// </summary>
    private async Task OnCustomerTypeSavedWrapper(CustomerType savedCustomerType)
    {
        await customerTypeModalManager.HandleEntitySavedAsync(savedCustomerType, shouldAutoSelect: true);
    }

    /// <summary>
    /// 使用泛型管理器產生客戶類型操作按鈕
    /// </summary>
    private List<FieldActionButton> GetCustomerTypeActionButtons()
    {
        var currentCustomerTypeId = editModalComponent?.Entity?.CustomerTypeId;
        return customerTypeModalManager.GenerateActionButtons(currentCustomerTypeId);
    }

    /// <summary>
    /// 開啟客戶類型編輯 Modal - 使用泛型管理器
    /// </summary>
    private async Task OpenCustomerTypeModal(int? customerTypeId)
    {
        await customerTypeModalManager.OpenModalAsync(customerTypeId);
    }

    /// <summary>
    /// 處理欄位值變更事件
    /// </summary>
    private Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 使用泛型管理器自動處理客戶類型欄位變更
            if (fieldChange.PropertyName == nameof(Customer.CustomerTypeId))
            {
                customerTypeModalManager.UpdateFieldActionButtons(formFields, fieldChange.PropertyName, 
                    fieldChange.Value != null && int.TryParse(fieldChange.Value.ToString(), out int typeId) ? typeId : null);
            }
            
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("欄位變更處理時發生錯誤");
            return Task.CompletedTask;
        }
    }

    /// <summary>
    /// 生成客戶代碼
    /// </summary>
    private async Task<string> GenerateCustomerCodeAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            CustomerService,
            "CUST",
            (service, code, excludeId) => service.IsCustomerCodeExistsAsync(code, excludeId)
        );
    }
}
