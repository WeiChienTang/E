@* 可重用的職位編輯組件 - 可在任何頁面中嵌入 *@
@inject IEmployeePositionService EmployeePositionService
@inject INotificationService NotificationService

<GenericEditModalComponent TEntity="EmployeePosition" 
                          TService="IEmployeePositionService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@EmployeePositionId"
                          Service="@EmployeePositionService"
                          EntityName="職位"
                          EntityNamePlural="職位"
                          ModalTitle="@(EmployeePositionId.HasValue ? "編輯職位" : "新增職位")"
                          Size="GenericEditModalComponent<EmployeePosition, IEmployeePositionService>.ModalSize.Large"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          DataLoader="@LoadEmployeePositionData"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(EmployeePositionId.HasValue ? "職位更新成功" : "職位新增成功")"
                          SaveFailureMessage="職位儲存失敗"
                          RequiredPermission="EmployeePosition.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel" />

@code {
    // ===== 參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? EmployeePositionId { get; set; }
    [Parameter] public EventCallback<EmployeePosition> OnEmployeePositionSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public Dictionary<string, object?>? PrefilledValues { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<EmployeePosition, IEmployeePositionService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();

    // ===== 生命週期 =====
    protected override Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            InitializeFormFields();
        }
        return Task.CompletedTask;
    }

    // ===== 事件處理 =====
    private async Task HandleSaveSuccess()
    {
        try
        {
            // 如果父組件需要知道職位已儲存
            if (OnEmployeePositionSaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnEmployeePositionSaved.InvokeAsync(editModalComponent.Entity);
            }

            // 關閉 Modal
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }

            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理取消事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task CloseModal()
    {
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(false);
        }
    }

    // ===== 資料載入 =====
    private async Task<EmployeePosition?> LoadEmployeePositionData()
    {
        try
        {
            if (!EmployeePositionId.HasValue) 
            {
                // 新增模式：建立新的職位實體並生成代碼
                var newPosition = new EmployeePosition
                {
                    Name = string.Empty,
                    Code = await GenerateEmployeePositionCodeAsync(),
                    Status = EntityStatus.Active
                };
                
                // 應用預填值
                if (PrefilledValues != null)
                {
                    foreach (var kvp in PrefilledValues)
                    {
                        var property = typeof(EmployeePosition).GetProperty(kvp.Key);
                        if (property != null && property.CanWrite && kvp.Value != null)
                        {
                            try
                            {
                                // 轉換值的類型
                                var convertedValue = Convert.ChangeType(kvp.Value, property.PropertyType);
                                property.SetValue(newPosition, convertedValue);
                            }
                            catch (Exception)
                            {
                                // 忽略轉換失敗的值
                            }
                        }
                    }
                }
                
                return newPosition;
            }

            var employeePosition = await EmployeePositionService.GetByIdAsync(EmployeePositionId.Value);            
            
            if (employeePosition == null)
            {
                // 如果找不到職位，建立新的預設職位
                return new EmployeePosition
                {
                    Status = EntityStatus.Active
                };
            }
            return employeePosition;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入職位資料時發生錯誤：{ex.Message}");
            
            // 設定安全的預設值，確保程式不會崩潰
            return new EmployeePosition
            {
                Code = "ERROR",
                Name = "ERROR",
                Status = EntityStatus.Active
            };
        }
    }

    // ===== 表單初始化 =====
    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(EmployeePosition.Code),
                    Label = "職位代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入職位代碼",
                    IsRequired = false,
                    HelpText = "職位的唯一識別代碼，新增時系統會自動產生，也可手動修改"
                },
                new()
                {
                    PropertyName = nameof(EmployeePosition.Name),
                    Label = "職位名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入職位名稱",
                    IsRequired = true,
                    HelpText = "職位的正式名稱，將顯示在系統各處"
                },

                // 備註區段
                new()
                {
                    PropertyName = nameof(EmployeePosition.Remarks),
                    Label = "職位備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入職位備註",
                    Rows = 2,
                    HelpText = "其他需要補充的資訊",
                    ContainerCssClass = "col-12"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(EmployeePosition.Code), "基本資訊" },
                { nameof(EmployeePosition.Name), "基本資訊" },
                { nameof(EmployeePosition.Remarks), "額外資料" }
            };
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    // ===== 輔助方法 =====
    private async Task<string> GenerateEmployeePositionCodeAsync()
    {
        try
        {
            // 簡單的職位代碼生成邏輯：POS + 時間戳
            var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            var baseCode = $"POS{timestamp}";
            
            // 檢查是否重複，如果重複則加上隨機數
            var isExists = await EmployeePositionService.IsCodeExistsAsync(baseCode);
            if (isExists)
            {
                var random = new Random().Next(100, 999);
                baseCode = $"POS{timestamp}{random}";
            }
            
            return baseCode;
        }
        catch
        {
            // 如果生成失敗，返回預設格式
            return $"POS{DateTime.Now:yyyyMMddHHmmss}";
        }
    }

    // ===== 公開方法 (供父組件調用) =====

    /// <summary>
    /// 開啟新增職位 Modal
    /// </summary>
    public async Task ShowAddModal()
    {
        EmployeePositionId = null;
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(true);
        }
    }

    /// <summary>
    /// 開啟編輯職位 Modal
    /// </summary>
    public async Task ShowEditModal(int employeePositionId)
    {
        EmployeePositionId = employeePositionId;
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(true);
        }
    }
}
