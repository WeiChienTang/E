@* 可重用的廠商類型編輯組件 - 可在任何頁面中嵌入 *@
@inject ISupplierTypeService SupplierTypeService
@inject INotificationService NotificationService

<GenericEditModalComponent TEntity="SupplierType" 
                          TService="ISupplierTypeService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@SupplierTypeId"
                          Service="@SupplierTypeService"
                          EntityName="廠商類型"
                          EntityNamePlural="廠商類型"
                          ModalTitle="@(SupplierTypeId.HasValue ? "編輯廠商類型" : "新增廠商類型")"
                          Size="GenericEditModalComponent<SupplierType, ISupplierTypeService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          DataLoader="@LoadSupplierTypeData"
                          SaveHandler="@SaveSupplierType"
                          OnSaveSuccess="@OnSaveSuccess"
                          RequiredPermission="SupplierType.Read"
                          OnCancel="@OnCancel" />

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? SupplierTypeId { get; set; }
    [Parameter] public EventCallback<SupplierType> OnSupplierTypeSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private GenericEditModalComponent<SupplierType, ISupplierTypeService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeFormFields();
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化廠商類型編輯組件時發生錯誤");
        }
    }
    
    protected override void OnParametersSet()
    {
        // 當 SupplierTypeId 參數變更時，重新初始化表單欄位
        if (formFields != null) // 只有在已經初始化過的情況下才重新設定
        {
            InitializeFormFields();
        }
        
        base.OnParametersSet();
    }

    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(SupplierType.Code),
                    Label = "類型代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入類型代碼",
                    IsRequired = true,
                    MaxLength = 20,
                    HelpText = "廠商類型的唯一代碼，用於區別不同的廠商分類，新增時系統會自動產生，也可手動修改"
                },
                new()
                {
                    PropertyName = nameof(SupplierType.TypeName),
                    Label = "類型名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入類型名稱",
                    IsRequired = true,
                    MaxLength = 50,
                    HelpText = "廠商類型的唯一名稱，用於區別不同的廠商分類"
                },
                new()
                {
                    PropertyName = nameof(SupplierType.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註",
                    IsRequired = false,
                    MaxLength = 500,
                    Rows = 2,
                    HelpText = "廠商類型的額外說明或注意事項",
                    ContainerCssClass = "col-12"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(SupplierType.Code), "基本資訊" },
                { nameof(SupplierType.TypeName), "基本資訊" },
                { nameof(SupplierType.Remarks), "詳細資訊" }
            };
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    private async Task<SupplierType?> LoadSupplierTypeData()
    {
        try
        {
            if (!SupplierTypeId.HasValue)
            {
                // 新增模式
                return new SupplierType
                {
                    Code = await GenerateSupplierTypeCodeAsync(),
                    Status = EntityStatus.Active,
                    TypeName = string.Empty,
                    Remarks = null
                };
            }

            var supplierType = await SupplierTypeService.GetByIdAsync(SupplierTypeId.Value);
            
            if (supplierType == null)
            {
                _ = NotificationService.ShowErrorAsync("找不到指定的廠商類型資料");
                return null;
            }
            
            return supplierType;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("載入廠商類型資料時發生錯誤");
            
            // 設定安全的預設值，確保程式不會崩潰
            return new SupplierType
            {
                Status = EntityStatus.Active,
                TypeName = string.Empty,
                Remarks = null
            };
        }
    }

    private async Task<bool> SaveSupplierType(SupplierType entity)
    {
        try
        {
            // 基本驗證 - 使用通知服務
            if (string.IsNullOrWhiteSpace(entity.TypeName))
            {
                _ = NotificationService.ShowErrorAsync("類型名稱為必填欄位");
                return false;
            }
            
            // 檢查類型名稱是否重複
            var isNameExists = await SupplierTypeService.IsSupplierTypeNameExistsAsync(entity.TypeName, SupplierTypeId);
            if (isNameExists)
            {
                _ = NotificationService.ShowErrorAsync("此類型名稱已存在，請使用其他名稱");
                return false;
            }

            ServiceResult result;
            
            if (SupplierTypeId.HasValue)
            {
                // 更新現有廠商類型
                result = await SupplierTypeService.UpdateAsync(entity);
            }
            else
            {
                // 新增廠商類型
                result = await SupplierTypeService.CreateAsync(entity);
            }

            // 讓 GenericEditModalComponent 處理通用的成功/失敗訊息
            return result.IsSuccess;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("儲存廠商類型資料時發生錯誤");
            return false;
        }
    }

    private async Task OnSaveSuccess()
    {
        try
        {
            if (editModalComponent?.Entity != null)
            {
                await OnSupplierTypeSaved.InvokeAsync(editModalComponent.Entity);
            }
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("儲存成功回調時發生錯誤");
        }
    }

    // ===== 輔助方法 =====
    private async Task<string> GenerateSupplierTypeCodeAsync()
    {
        try
        {
            // 簡單的廠商類型代碼生成邏輯：STYPE + 時間戳
            var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            var baseCode = $"STYPE{timestamp}";
            
            // 檢查是否重複，如果重複則加上隨機數
            var isExists = await SupplierTypeService.IsSupplierTypeCodeExistsAsync(baseCode);
            if (isExists)
            {
                var random = new Random().Next(100, 999);
                baseCode = $"STYPE{timestamp}{random}";
            }
            
            return baseCode;
        }
        catch
        {
            // 如果生成失敗，返回預設格式
            return $"STYPE{DateTime.Now:yyyyMMddHHmmss}";
        }
    }
}
