@* 可重用的員工編輯組件 - 可在任何頁面中嵌入 *@
@using System.Security.Claims
@inject IEmployeeService EmployeeService
@inject IDepartmentService DepartmentService
@inject IEmployeePositionService EmployeePositionService
@inject IRoleService RoleService
@inject IContactService ContactService
@inject IAddressService AddressService
@inject IContactTypeService ContactTypeService
@inject IAddressTypeService AddressTypeService
@inject INotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject INavigationPermissionService NavigationPermissionService

<GenericEditModalComponent TEntity="Employee" 
                          TService="IEmployeeService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@EmployeeId"
                          Service="@EmployeeService"
                          EntityName="員工"
                          EntityNamePlural="員工"
                          ModalTitle="@(EmployeeId.HasValue ? "編輯員工" : "新增員工")"
                          Size="GenericEditModalComponent<Employee, IEmployeeService>.ModalSize.ExtraLarge"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadEmployeeData"
                          SaveHandler="@SaveEmployee"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          OnSaveSuccess="@OnSaveSuccess"
                          RequiredPermission="Employee.Read"
                          OnCancel="@OnCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          AdditionalSections="@GetAdditionalSections()" />

@* 部門編輯 Modal *@
<DepartmentEditModalComponent @ref="departmentEditModal"
                             IsVisible="@departmentModalManager.IsModalVisible"
                             IsVisibleChanged="@departmentModalManager.HandleModalVisibilityChangedAsync"
                             DepartmentId="@departmentModalManager.SelectedEntityId"
                             PrefilledValues="@departmentModalManager.PrefilledValues"
                             OnDepartmentSaved="@OnDepartmentSavedWrapper"
                             OnCancel="@departmentModalManager.HandleModalCancelAsync" />

@* 職位編輯 Modal *@
<EmployeePositionEditModalComponent @ref="positionEditModal"
                                   IsVisible="@positionModalManager.IsModalVisible"
                                   IsVisibleChanged="@positionModalManager.HandleModalVisibilityChangedAsync"
                                   EmployeePositionId="@positionModalManager.SelectedEntityId"
                                   PrefilledValues="@positionModalManager.PrefilledValues"
                                   OnEmployeePositionSaved="@OnEmployeePositionSavedWrapper"
                                   OnCancel="@positionModalManager.HandleModalCancelAsync" />

@* 角色編輯 Modal *@
<RoleEditModalComponent @ref="roleEditModal"
                       IsVisible="@roleModalManager.IsModalVisible"
                       IsVisibleChanged="@roleModalManager.HandleModalVisibilityChangedAsync"
                       RoleId="@roleModalManager.SelectedEntityId"
                       PrefilledValues="@roleModalManager.PrefilledValues"
                       OnRoleSaved="@OnRoleSavedWrapper"
                       OnCancel="@roleModalManager.HandleModalCancelAsync" />


@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? EmployeeId { get; set; }
    [Parameter] public EventCallback<Employee> OnEmployeeSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private GenericEditModalComponent<Employee, IEmployeeService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 部門編輯 Modal 相關變數 - 使用泛型管理器
    private DepartmentEditModalComponent? departmentEditModal;
    private RelatedEntityModalManager<Department> departmentModalManager = default!;
    
    // 職位編輯 Modal 相關變數 - 使用泛型管理器
    private EmployeePositionEditModalComponent? positionEditModal;
    private RelatedEntityModalManager<EmployeePosition> positionModalManager = default!;
    
    // 角色編輯 Modal 相關變數 - 使用泛型管理器
    private RoleEditModalComponent? roleEditModal;
    private RelatedEntityModalManager<Role> roleModalManager = default!;
    
    // 選項資料
    private List<Department> availableDepartments = new();
    private List<EmployeePosition> availablePositions = new();
    private List<Role> availableRoles = new();
    
    // 聯絡資訊和地址資訊相關變數
    private List<Contact> employeeContacts = new();
    private List<Address> employeeAddresses = new();
    private List<ContactType> contactTypes = new();
    private List<AddressType> addressTypes = new();
    
    // 子集合組件用的轉換清單
    private List<ERPCore2.Data.BaseEntity> contactTypeOptions = new();
    private List<ERPCore2.Data.BaseEntity> addressTypeOptions = new();
    
    // 注意：搜尋關鍵字追蹤已整合到 GenericEditModalComponent 中，不再需要手動追蹤
    // private string lastDepartmentSearchTerm = string.Empty;  // 已移除
    // private string lastPositionSearchTerm = string.Empty;    // 已移除

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化部門 Modal 管理器
            InitializeDepartmentModalManager();
            
            // 初始化職位 Modal 管理器
            InitializePositionModalManager();
            
            // 初始化角色 Modal 管理器
            InitializeRoleModalManager();
            
            await LoadAdditionalDataAsync();
            
            // 根據是否為編輯模式來決定初始的系統使用者狀態
            bool initialIsSystemUser = false; // 新增模式預設為非系統使用者
            
            if (EmployeeId.HasValue)
            {
                // 編輯模式：先取得現有員工資料來確定系統使用者狀態
                var existingEmployee = await EmployeeService.GetByIdAsync(EmployeeId.Value);
                if (existingEmployee != null)
                {
                    initialIsSystemUser = existingEmployee.IsSystemUser;
                }
            }
            
            await InitializeFormFieldsAsync(initialIsSystemUser);
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化員工編輯組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // 當 EmployeeId 參數變更時，重新初始化表單欄位
        if (formFields != null) // 只有在已經初始化過的情況下才重新設定
        {
            bool initialIsSystemUser = false; // 新增模式預設為非系統使用者
            
            if (EmployeeId.HasValue)
            {
                // 編輯模式：先取得現有員工資料來確定系統使用者狀態
                var existingEmployee = await EmployeeService.GetByIdAsync(EmployeeId.Value);
                if (existingEmployee != null)
                {
                    initialIsSystemUser = existingEmployee.IsSystemUser;
                }
            }
            
            await InitializeFormFieldsAsync(initialIsSystemUser);
        }
        
        await base.OnParametersSetAsync();
    }
    
    /// <summary>
    /// 初始化部門 Modal 管理器
    /// </summary>
    private void InitializeDepartmentModalManager()
    {
        departmentModalManager = new RelatedEntityManagerBuilder<Department>(NotificationService, "部門")
            .WithPropertyName(nameof(Employee.DepartmentId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(departmentId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.DepartmentId = departmentId;
                }
            })
            .WithCustomPostProcess(async department => 
            {
                // 員工特定的後處理邏輯
                await InitializeFormFieldsAsync(editModalComponent?.Entity?.IsSystemUser ?? false);
            })
            .Build();
    }

    /// <summary>
    /// 初始化職位 Modal 管理器
    /// </summary>
    private void InitializePositionModalManager()
    {
        positionModalManager = new RelatedEntityManagerBuilder<EmployeePosition>(NotificationService, "職位")
            .WithPropertyName(nameof(Employee.EmployeePositionId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(positionId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.EmployeePositionId = positionId;
                }
            })
            .WithCustomPostProcess(async position => 
            {
                // 員工特定的後處理邏輯
                await InitializeFormFieldsAsync(editModalComponent?.Entity?.IsSystemUser ?? false);
            })
            .Build();
    }

    /// <summary>
    /// 初始化角色 Modal 管理器
    /// </summary>
    private void InitializeRoleModalManager()
    {
        roleModalManager = new RelatedEntityManagerBuilder<Role>(NotificationService, "角色")
            .WithPropertyName(nameof(Employee.RoleId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(roleId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.RoleId = roleId;
                }
            })
            .WithCustomPostProcess(async role => 
            {
                // 員工特定的後處理邏輯
                await InitializeFormFieldsAsync(editModalComponent?.Entity?.IsSystemUser ?? false);
            })
            .Build();
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入可選擇的部門列表
            availableDepartments = await DepartmentService.GetAllAsync();
            
            // 載入可選擇的職位列表
            availablePositions = await EmployeePositionService.GetAllAsync();
            
            // 載入可指派的角色列表 - 根據當前使用者角色過濾
            var currentUserRole = await CurrentUserHelper.GetCurrentRoleAsync(AuthenticationStateProvider);
            var rolesResult = await RoleService.GetAssignableRolesForCurrentUserAsync(currentUserRole);
            availableRoles = rolesResult.IsSuccess ? rolesResult.Data ?? new List<Role>() : new List<Role>();
            
            // 載入聯絡類型和地址類型
            contactTypes = await ContactTypeService.GetActiveAsync();
            addressTypes = await AddressTypeService.GetActiveAsync();
            
            // 轉換為子集合組件用的基礎實體清單
            contactTypeOptions = contactTypes.Cast<ERPCore2.Data.BaseEntity>().ToList();
            addressTypeOptions = addressTypes.Cast<ERPCore2.Data.BaseEntity>().ToList();
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("載入員工編輯相關資料時發生錯誤");
            availableDepartments = new List<Department>();
            availablePositions = new List<EmployeePosition>();
            availableRoles = new List<Role>();
            contactTypes = new List<ContactType>();
            addressTypes = new List<AddressType>();
            contactTypeOptions = new List<ERPCore2.Data.BaseEntity>();
            addressTypeOptions = new List<ERPCore2.Data.BaseEntity>();
        }
    }

    /// <summary>
    /// 檢查當前使用者是否擁有指定權限
    /// </summary>
    private async Task<bool> CheckCurrentUserPermissionAsync(string permission)
    {
        try
        {
            return await NavigationPermissionService.CanAccessAsync(permission);
        }
        catch
        {
            return false;
        }
    }

    private async Task InitializeFormFieldsAsync(bool isSystemUser = false)
    {
        try
        {
            // 準備角色選項
            var roleOptions = availableRoles.Select(r => new SelectOption
            {
                Text = r.RoleName,
                Value = r.Id.ToString()
            }).ToList();

            // 根據系統使用者狀態選擇預設角色
            Role? defaultRole;
            if (isSystemUser)
            {
                // 系統使用者：選擇辦公室員工角色
                defaultRole = availableRoles.FirstOrDefault(r => 
                    r.RoleName.Contains("Employee") && r.RoleName.Contains("系統使用者"));
            }
            else
            {
                // 非系統使用者：選擇員工角色（一般員工）
                defaultRole = availableRoles.FirstOrDefault(r => 
                    r.RoleName.Contains("Employee") && r.RoleName.Contains("非系統使用者"));
            }
            var defaultRoleValue = defaultRole?.Id.ToString();

            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(Employee.Code),
                    Label = "員工代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入員工代碼",
                    IsRequired = true,
                    MaxLength = 20,
                    HelpText = "員工的唯一識別代碼，新增時系統會自動產生，也可手動修改"
                },
                new()
                {
                    PropertyName = nameof(Employee.LastName),
                    Label = "姓氏",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入姓氏",
                    IsRequired = true,
                    MaxLength = 25,
                    HelpText = "員工的姓氏"
                },
                new()
                {
                    PropertyName = nameof(Employee.FirstName),
                    Label = "名字",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入名字",
                    IsRequired = true,
                    MaxLength = 25,
                    HelpText = "員工的名字"
                }
            };

            // 檢查使用者是否擁有特定權限才可以看到系統使用者相關設定
            var hasAccountPasswordPermission = await CheckCurrentUserPermissionAsync("EmployeeEdit_Account_Password.Read");
            
            if (hasAccountPasswordPermission)
            {
                // 帳號資訊區段 - 僅有權限的使用者可見
                formFields.AddRange(new List<FormFieldDefinition>
                {
                    new()
                    {
                        PropertyName = nameof(Employee.IsSystemUser),
                        Label = "系統使用者",
                        FieldType = FormFieldType.Checkbox,
                        DefaultValue = isSystemUser ? "true" : "false",
                        HelpText = "是否允許此員工登入系統（需要權限才能設定）"
                    },
                    new()
                    {
                        PropertyName = nameof(Employee.Account),
                        Label = "登入帳號",
                        FieldType = FormFieldType.Text,
                        Placeholder = isSystemUser ? "請輸入登入帳號" : "僅系統使用者可設定",
                        IsRequired = isSystemUser,
                        IsDisabled = !isSystemUser, // 非系統使用者時停用
                        MaxLength = 50,
                        HelpText = isSystemUser ? "系統登入帳號" : "僅系統使用者需要設定登入帳號"
                    },
                    new()
                    {
                        PropertyName = nameof(Employee.Password),
                        Label = "登入密碼",
                        FieldType = FormFieldType.Password,
                        Placeholder = isSystemUser ? "請輸入登入密碼" : "僅系統使用者可設定",
                        IsRequired = isSystemUser && !EmployeeId.HasValue, // 新增時必填，編輯時選填
                        IsDisabled = !isSystemUser, // 非系統使用者時停用
                        MaxLength = 100,
                        HelpText = isSystemUser ? "系統登入密碼" : "僅系統使用者需要設定登入密碼"
                    },
                    new()
                    {
                        PropertyName = nameof(Employee.RoleId),
                        Label = "系統角色",
                        FieldType = FormFieldType.AutoComplete,
                        Placeholder = isSystemUser ? "請輸入或選擇系統角色" : "僅系統使用者可選擇",
                        MinSearchLength = 0, // 允許空白搜尋以顯示所有選項
                        IsRequired = isSystemUser,
                        IsDisabled = !isSystemUser, // 非系統使用者時停用
                        HelpText = isSystemUser ? "輸入角色名稱進行搜尋，或直接選擇員工在系統中的權限角色" : "僅系統使用者可以選擇系統角色",
                        ActionButtons = GetRoleActionButtons()
                    }
                });
            }
            
            // 組織架構區段 - 所有人都可見
            formFields.AddRange(new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(Employee.DepartmentId),
                    Label = "部門",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇部門",
                    MinSearchLength = 0, // 允許空白搜尋以顯示所有選項
                    HelpText = "輸入部門名稱進行搜尋，或直接選擇",
                    ActionButtons = GetDepartmentActionButtons()
                },
                new()
                {
                    PropertyName = nameof(Employee.EmployeePositionId),
                    Label = "職位",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇職位",
                    MinSearchLength = 0, // 允許空白搜尋以顯示所有選項
                    HelpText = "輸入職位名稱進行搜尋，或直接選擇",
                    ActionButtons = GetPositionActionButtons()
                }
            });

            // 備註區段 - 所有人都可見
            formFields.Add(new()
            {
                PropertyName = nameof(Employee.Remarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入備註",
                Rows = 2,
                HelpText = "其他需要補充的資訊",
                ContainerCssClass = "col-12" // 使用整排寬度
            });

            // 更新表單區段定義
            formSections = new Dictionary<string, string>
            {
                { nameof(Employee.Code), "基本資訊" },
                { nameof(Employee.LastName), "基本資訊" },
                { nameof(Employee.FirstName), "基本資訊" },                
                { nameof(Employee.DepartmentId), "基本資訊" },
                { nameof(Employee.EmployeePositionId), "基本資訊" },
                { nameof(Employee.Remarks), "額外資料" }
            };

            // 只有有權限的使用者才加入帳號相關區段
            if (hasAccountPasswordPermission)
            {
                formSections.Add(nameof(Employee.IsSystemUser), "帳號資訊");
                formSections.Add(nameof(Employee.Account), "帳號資訊");
                formSections.Add(nameof(Employee.Password), "帳號資訊");
                formSections.Add(nameof(Employee.RoleId), "帳號資訊");                
            }
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }
    
    /// <summary>
    /// 配置 AutoComplete 預填器 - 使用整合方式
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(Employee.DepartmentId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["Name"] = searchTerm,
                    // 根據搜尋詞推測部門代碼
                    ["DepartmentCode"] = searchTerm.Contains("財務") ? "FIN" : 
                                       searchTerm.Contains("業務") ? "SALES" :
                                       searchTerm.Contains("人資") ? "HR" : 
                                       searchTerm.ToUpper().Replace(" ", "")
                }
            },
            {
                nameof(Employee.EmployeePositionId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["Name"] = searchTerm,
                    ["PositionCode"] = searchTerm.ToUpper().Replace(" ", "")
                }
            },
            {
                nameof(Employee.RoleId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["RoleName"] = searchTerm,
                    // 可以根據搜尋詞智能推測角色類型
                    ["Status"] = 1 // EntityStatus.Active
                }
            }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(Employee.DepartmentId), availableDepartments.Cast<object>() },
            { nameof(Employee.EmployeePositionId), availablePositions.Cast<object>() },
            { nameof(Employee.RoleId), availableRoles.Cast<object>() }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Employee.DepartmentId), "Name" },
            { nameof(Employee.EmployeePositionId), "Name" },
            { nameof(Employee.RoleId), "RoleName" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Employee.DepartmentId), "Id" },
            { nameof(Employee.EmployeePositionId), "Id" },
            { nameof(Employee.RoleId), "Id" }
        };
    }
    
    /// <summary>
    /// 配置 Modal 管理器 - 使用整合方式
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(Employee.DepartmentId), departmentModalManager },
            { nameof(Employee.EmployeePositionId), positionModalManager },
            { nameof(Employee.RoleId), roleModalManager }
        };
    }

    private async Task UpdateFormFieldsForSystemUserAsync(bool isSystemUser)
    {
        try
        {
            // 檢查使用者是否擁有權限來變更系統使用者設定
            var hasAccountPasswordPermission = await CheckCurrentUserPermissionAsync("EmployeeEdit_Account_Password.Read");
            if (!hasAccountPasswordPermission)
            {
                return; // 無權限的使用者無法進行系統使用者相關的設定變更
            }
            
            // 重新初始化表單欄位
            await InitializeFormFieldsAsync(isSystemUser);
            
            // 如果有編輯組件的參考，通知更新
            if (editModalComponent?.Entity != null)
            {
                // 根據系統使用者狀態自動設定角色
                Role? targetRole;
                if (isSystemUser)
                {
                    // 系統使用者：選擇辦公室員工角色
                    targetRole = availableRoles.FirstOrDefault(r => 
                        r.RoleName.Contains("Employee") && r.RoleName.Contains("系統使用者"));
                }
                else
                {
                    // 非系統使用者：選擇員工角色，並清空帳號密碼
                    targetRole = availableRoles.FirstOrDefault(r => 
                        r.RoleName.Contains("Employee") && r.RoleName.Contains("非系統使用者"));
                    
                    // 清空帳號和密碼欄位，設為 null
                    editModalComponent.Entity.Account = null;
                    editModalComponent.Entity.Password = null;
                }
                
                if (targetRole != null)
                {
                    editModalComponent.Entity.RoleId = targetRole.Id;
                }
                
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("更新表單欄位時發生錯誤");
        }
    }

    private async Task<Employee?> LoadEmployeeData()
    {
        try
        {
            if (!EmployeeId.HasValue) 
            {
                // 新增模式：建立新的員工實體並生成代碼
                employeeContacts = new List<Contact>();
                employeeAddresses = new List<Address>();
                
                // 找出預設的系統角色 (Employee-非系統使用者)
                var defaultRole = availableRoles.FirstOrDefault(r => 
                    r.RoleName.Contains("Employee") && r.RoleName.Contains("非系統使用者"));
                
                var newEmployee = new Employee
                {
                    Code = await GenerateEmployeeCodeAsync(),
                    FirstName = string.Empty,
                    LastName = string.Empty,
                    IsSystemUser = false,
                    RoleId = defaultRole?.Id,
                    Status = EntityStatus.Active
                };
                
                // 根據預設的系統使用者狀態初始化表單欄位
                await InitializeFormFieldsAsync(newEmployee.IsSystemUser);
                
                return newEmployee;
            }

            var employee = await EmployeeService.GetByIdAsync(EmployeeId.Value);            
            
            if (employee == null)
            {
                // 如果找不到員工，建立新的預設員工
                employee = new Employee
                {
                    Code = "ERROR",
                    FirstName = "ERROR",
                    LastName = "ERROR",
                    Status = EntityStatus.Active
                };
                employeeContacts = new List<Contact>();
                employeeAddresses = new List<Address>();
                return employee;
            }
            
            // 載入聯絡資訊和地址資訊
            employeeContacts = await ContactService.GetByOwnerAsync(ContactOwnerTypes.Employee, EmployeeId.Value);
            
            employeeAddresses = await AddressService.GetEmployeeAddressesAsync(EmployeeId.Value);
            
            // 根據員工的系統使用者狀態重新初始化表單欄位
            await InitializeFormFieldsAsync(employee.IsSystemUser);
            
            return employee;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("載入員工資料時發生錯誤");
            
            // 設定安全的預設值，確保程式不會崩潰
            return new Employee
            {
                Code = "ERROR",
                FirstName = "ERROR",
                LastName = "ERROR",
                Status = EntityStatus.Active
            };
        }
    }

    private async Task<string> GenerateEmployeeCodeAsync()
    {
        try
        {
            // 簡單的員工代碼生成邏輯：EMP + 時間戳
            var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            var baseCode = $"EMP{timestamp}";
            
            // 檢查是否重複，如果重複則加上隨機數
            var existsResult = await EmployeeService.IsEmployeeCodeExistsAsync(baseCode);
            if (existsResult.IsSuccess && existsResult.Data)
            {
                var random = new Random().Next(100, 999);
                baseCode = $"EMP{timestamp}{random}";
            }
            
            return baseCode;
        }
        catch (Exception)
        {
            // 如果生成失敗，返回預設格式
            return $"EMP{DateTime.Now:yyyyMMddHHmmss}";
        }
    }

    private async Task<bool> SaveEmployee(Employee entity)
    {
        try
        {
            // 處理非系統使用者的帳號和密碼 - 設為 null 以避免資料庫索引問題
            if (!entity.IsSystemUser)
            {
                entity.Account = null;
                entity.Password = null;
                entity.RoleId = null; // 非系統使用者不需要系統角色
            }

            // 基本驗證 - 使用通知服務
            if (string.IsNullOrWhiteSpace(entity.Code))
            {
                await NotificationService.ShowErrorAsync("員工代碼為必填");
                return false;
            }

            if (string.IsNullOrWhiteSpace(entity.FirstName))
            {
                await NotificationService.ShowErrorAsync("員工姓名為必填");
                return false;
            }

            if (string.IsNullOrWhiteSpace(entity.LastName))
            {
                await NotificationService.ShowErrorAsync("員工姓氏為必填");
                return false;
            }

            // 檢查員工代碼是否重複
            var employeeCodeExistsResult = await EmployeeService.IsEmployeeCodeExistsAsync(entity.Code, EmployeeId);
            if (employeeCodeExistsResult.IsSuccess && employeeCodeExistsResult.Data)
            {
                await NotificationService.ShowErrorAsync($"員工代碼 '{entity.Code}' 已存在，請使用其他代碼");
                return false;
            }

            // 檢查帳號是否重複（無論是否為系統使用者，只要有設定帳號就檢查）
            if (!string.IsNullOrWhiteSpace(entity.Account))
            {
                var accountExistsResult = await EmployeeService.IsAccountExistsAsync(entity.Account, EmployeeId);
                if (accountExistsResult.IsSuccess && accountExistsResult.Data)
                {
                    await NotificationService.ShowErrorAsync($"帳號 '{entity.Account}' 已存在，請使用其他帳號");
                    return false;
                }
            }

            // 系統使用者特殊驗證
            if (entity.IsSystemUser)
            {
                if (string.IsNullOrWhiteSpace(entity.Account))
                {
                    await NotificationService.ShowErrorAsync("系統使用者必須設定登入帳號");
                    return false;
                }

                if (string.IsNullOrWhiteSpace(entity.Password) && !EmployeeId.HasValue)
                {
                    await NotificationService.ShowErrorAsync("新增系統使用者必須設定登入密碼");
                    return false;
                }

                if (!entity.RoleId.HasValue)
                {
                    await NotificationService.ShowErrorAsync("系統使用者必須指派系統角色");
                    return false;
                }
            }

            // 處理密碼雜湊 - 只有在新增或密碼有變更時才雜湊
            if (entity.IsSystemUser && !string.IsNullOrWhiteSpace(entity.Password))
            {
                // 檢查是否為新密碼（新增模式或密碼欄位被修改）
                bool isNewPassword = false;
                
                if (!EmployeeId.HasValue)
                {
                    // 新增模式
                    isNewPassword = true;
                }
                else
                {
                    // 編輯模式：檢查密碼是否有變更
                    var originalEmployee = await EmployeeService.GetByIdAsync(EmployeeId.Value);
                    if (originalEmployee != null && originalEmployee.Password != entity.Password)
                    {
                        isNewPassword = true;
                    }
                }
                
                if (isNewPassword)
                {
                    // 使用 SeedDataHelper 的密碼雜湊方法
                    entity.Password = SeedDataHelper.HashPassword(entity.Password);
                }
            }

            ServiceResult result;
            
            if (EmployeeId.HasValue)
            {
                // 更新現有員工
                result = await EmployeeService.UpdateAsync(entity);
                if (result.IsSuccess)
                {
                    await UpdateEmployeeSubCollectionsAsync(EmployeeId.Value);
                }
            }
            else
            {
                // 新增員工
                result = await EmployeeService.CreateAsync(entity);
                if (result.IsSuccess && entity.Id > 0)
                {
                    await UpdateEmployeeSubCollectionsAsync(entity.Id);
                }
            }

            // 讓 GenericEditModalComponent 處理通用的成功/失敗訊息
            return result.IsSuccess;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("儲存員工資料時發生錯誤");
            return false;
        }
    }

    private async Task UpdateEmployeeSubCollectionsAsync(int employeeId)
    {
        try
        {
            // 更新聯絡資訊 - 只更新或新增，不刪除
            foreach (var contact in employeeContacts)
            {
                contact.OwnerType = ContactOwnerTypes.Employee;
                contact.OwnerId = employeeId;
                
                if (contact.Id == 0)
                {
                    // 新記錄
                    await ContactService.CreateAsync(contact);
                }
                else
                {
                    // 更新現有記錄
                    await ContactService.UpdateAsync(contact);
                }
            }

            // 重新加載聯絡資料以更新UI顯示
            employeeContacts = await ContactService.GetByOwnerAsync(ContactOwnerTypes.Employee, employeeId);

            // 更新地址資訊 - 只更新或新增，不刪除
            foreach (var address in employeeAddresses)
            {
                address.OwnerType = AddressOwnerTypes.Employee;
                address.OwnerId = employeeId;
                
                if (address.Id == 0)
                {
                    // 新記錄
                    await AddressService.CreateAddressAsync(AddressOwnerTypes.Employee, employeeId, address);
                }
                else
                {
                    // 更新現有記錄
                    await AddressService.UpdateAddressAsync(address);
                }
            }

            // 重新加載地址資料以更新UI顯示
            employeeAddresses = await AddressService.GetEmployeeAddressesAsync(employeeId);

            StateHasChanged(); // 通知UI更新
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("更新員工相關資料時發生錯誤");
        }
    }

    private async Task OnSaveSuccess()
    {
        try
        {
            if (editModalComponent?.Entity != null)
            {
                await OnEmployeeSaved.InvokeAsync(editModalComponent.Entity);
            }
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("儲存成功回調時發生錯誤");
        }
    }

    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 監聽 IsSystemUser 欄位變更 - 檢查權限
            if (fieldChange.PropertyName == nameof(Employee.IsSystemUser) && fieldChange.Value is bool isSystemUser)
            {
                var hasAccountPasswordPermission = await CheckCurrentUserPermissionAsync("EmployeeEdit_Account_Password.Read");
                if (hasAccountPasswordPermission)
                {
                    await UpdateFormFieldsForSystemUserAsync(isSystemUser);
                    
                    // 當系統使用者狀態變更時，也要更新角色按鈕的狀態
                    roleModalManager.UpdateFieldActionButtons(formFields, nameof(Employee.RoleId), 
                        editModalComponent?.Entity?.RoleId);
                }
                else
                {
                    // 無權限的使用者無法變更系統使用者設定，顯示警告並回復原值
                    _ = NotificationService.ShowWarningAsync("您沒有權限變更系統使用者設定");
                    // 這裡可以考慮重置該欄位的值
                }
            }
            
            // 使用泛型管理器處理部門欄位變更
            if (fieldChange.PropertyName == nameof(Employee.DepartmentId))
            {
                departmentModalManager.UpdateFieldActionButtons(formFields, fieldChange.PropertyName, 
                    fieldChange.Value != null && int.TryParse(fieldChange.Value.ToString(), out int deptId) ? deptId : null);
            }
            
            // 使用泛型管理器處理職位欄位變更
            if (fieldChange.PropertyName == nameof(Employee.EmployeePositionId))
            {
                positionModalManager.UpdateFieldActionButtons(formFields, fieldChange.PropertyName, 
                    fieldChange.Value != null && int.TryParse(fieldChange.Value.ToString(), out int posId) ? posId : null);
            }
            
            // 使用泛型管理器處理角色欄位變更
            if (fieldChange.PropertyName == nameof(Employee.RoleId))
            {
                roleModalManager.UpdateFieldActionButtons(formFields, fieldChange.PropertyName, 
                    fieldChange.Value != null && int.TryParse(fieldChange.Value.ToString(), out int roleId) ? roleId : null);
            }
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("欄位變更處理時發生錯誤");
        }
    }
    
    /// <summary>
    /// 包裝部門儲存事件以符合原有介面
    /// </summary>
    private async Task OnDepartmentSavedWrapper(Department savedDepartment)
    {
        await departmentModalManager.HandleEntitySavedAsync(savedDepartment, shouldAutoSelect: true);
    }
    
    /// <summary>
    /// 包裝職位儲存事件以符合原有介面
    /// </summary>
    private async Task OnEmployeePositionSavedWrapper(EmployeePosition savedPosition)
    {
        await positionModalManager.HandleEntitySavedAsync(savedPosition, shouldAutoSelect: true);
    }
    
    /// <summary>
    /// 包裝角色儲存事件以符合原有介面
    /// </summary>
    private async Task OnRoleSavedWrapper(Role savedRole)
    {
        await roleModalManager.HandleEntitySavedAsync(savedRole, shouldAutoSelect: true);
    }
    
    /// <summary>
    /// 使用泛型管理器產生部門操作按鈕 - 簡化版本（智能預填已整合到 GenericEditModalComponent）
    /// </summary>
    private List<FieldActionButton> GetDepartmentActionButtons()
    {
        var currentDepartmentId = editModalComponent?.Entity?.DepartmentId;
        return departmentModalManager.GenerateActionButtons(currentDepartmentId);
    }

    /// <summary>
    /// 使用泛型管理器產生職位操作按鈕 - 簡化版本（智能預填已整合到 GenericEditModalComponent）
    /// </summary>
    private List<FieldActionButton> GetPositionActionButtons()
    {
        var currentPositionId = editModalComponent?.Entity?.EmployeePositionId;
        return positionModalManager.GenerateActionButtons(currentPositionId);
    }

    /// <summary>
    /// 使用泛型管理器產生角色操作按鈕 - 簡化版本（智能預填已整合到 GenericEditModalComponent）
    /// 注意：角色按鈕的啟用狀態取決於是否勾選了"系統使用者"
    /// </summary>
    private List<FieldActionButton> GetRoleActionButtons()
    {
        var currentRoleId = editModalComponent?.Entity?.RoleId;
        var isSystemUser = editModalComponent?.Entity?.IsSystemUser ?? false;
        
        // 使用泛型管理器產生按鈕
        var buttons = roleModalManager.GenerateActionButtons(currentRoleId);
        
        // 根據系統使用者狀態設定按鈕的啟用/停用狀態
        foreach (var button in buttons)
        {
            button.IsDisabled = !isSystemUser; // 非系統使用者時停用按鈕
            
            // 更新按鈕標題，讓使用者知道為什麼按鈕被停用
            if (!isSystemUser)
            {
                button.Title = "僅系統使用者可以管理系統角色";
            }
            else
            {
                // 系統使用者時使用原本的標題
                button.Title = currentRoleId.HasValue ? "編輯選擇的角色" : "新增角色";
            }
        }
        
        return buttons;
    }

    // ===== 部門管理相關方法 - 已重構為使用泛型管理器 =====

    /// <summary>
    /// 開啟部門編輯 Modal - 使用泛型管理器
    /// </summary>
    private async Task OpenDepartmentModal(int? departmentId)
    {
        await departmentModalManager.OpenModalAsync(departmentId);
    }

    /// <summary>
    /// 取得目前選擇的部門 ID
    /// </summary>
    private int? GetSelectedDepartmentId()
    {
        try
        {
            return editModalComponent?.Entity?.DepartmentId;
        }
        catch
        {
            return null;
        }
    }

    /// <summary>
    /// 處理員工聯絡方式變更事件
    /// </summary>
    private Task OnEmployeeContactsChanged(List<Contact> updatedContacts)
    {
        try
        {
            employeeContacts = updatedContacts;
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("更新聯絡方式時發生錯誤");
            return Task.CompletedTask;
        }
    }

    /// <summary>
    /// 處理員工地址變更事件
    /// </summary>
    private Task OnEmployeeAddressesChanged(List<Address> updatedAddresses)
    {
        try
        {
            employeeAddresses = updatedAddresses;
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("更新地址資料時發生錯誤");
            return Task.CompletedTask;
        }
    }

    /// <summary>
    /// 取得額外區段內容（聯絡方式和地址管理）
    /// </summary>
    private RenderFragment? GetAdditionalSections()
    {
        return @<div class="row mt-4">
            <div class="col-md-6">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-gradient bg-light border-0">
                        <h6 class="mb-0 d-flex align-items-center">
                            <i class="fas fa-phone text-success me-2"></i>
                            員工聯絡方式管理
                        </h6>
                    </div>
                    <div class="card-body">
                        <ContactManagerComponent TContactEntity="Contact"
                                               TParentEntity="Employee"
                                               Items="@employeeContacts"
                                               Options="@contactTypeOptions"
                                               ParentEntityId="@(EmployeeId ?? editModalComponent?.Entity?.Id ?? 0)"
                                               GetTypeId="@(c => c.ContactTypeId)"
                                               GetContactValue="@(c => c.ContactValue)"
                                               SetTypeId="@((c, typeId) => c.ContactTypeId = typeId)"
                                               SetContactValue="@((c, value) => c.ContactValue = value)"
                                               SetParentId="@((c, parentId) => { c.OwnerType = ContactOwnerTypes.Employee; c.OwnerId = parentId; })"
                                               ItemsChanged="@OnEmployeeContactsChanged" />
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-gradient bg-light border-0">
                        <h6 class="mb-0 d-flex align-items-center">
                            <i class="fas fa-map-marker-alt text-danger me-2"></i>
                            員工地址資料管理
                        </h6>
                    </div>
                    <div class="card-body">
                        <AddressManagerComponent TAddressEntity="Address"
                                               TParentEntity="Employee"
                                               Items="@employeeAddresses"
                                               Options="@addressTypeOptions"
                                               ParentEntityId="@(EmployeeId ?? editModalComponent?.Entity?.Id ?? 0)"
                                               GetTypeId="@(a => a.AddressTypeId)"
                                               GetAddress="@(a => a.AddressLine)"
                                               SetTypeId="@((a, typeId) => a.AddressTypeId = typeId)"
                                               SetAddress="@((a, address) => a.AddressLine = address)"
                                               SetParentId="@((a, parentId) => SetEmployeeIdForAddress(a, parentId))"
                                               ItemsChanged="@OnEmployeeAddressesChanged" />
                    </div>
                </div>
            </div>
        </div>;
    }

    private void SetEmployeeIdForAddress(Address address, int parentId)
    {
        address.OwnerId = parentId;
        address.OwnerType = AddressOwnerTypes.Employee;
    }
}
