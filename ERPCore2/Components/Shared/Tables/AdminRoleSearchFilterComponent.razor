@* 角色管理搜尋篩選組件 *@
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.Buttons

<div class="card mb-4">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">搜尋關鍵字</label>
                <input type="text" class="form-control" 
                       @bind="SearchTerm" 
                       @bind:after="(() => HandleSearchTermChanged(SearchTerm))"
                       @oninput="HandleSearchInput" 
                       placeholder="輸入角色名稱或描述...">
            </div>
            <div class="col-md-3">
                <label class="form-label">角色類型</label>
                <select class="form-select" @bind="FilterType" @bind:after="(() => HandleFilterTypeChanged(FilterType))">
                    <option value="">全部角色</option>
                    <option value="system">系統角色</option>
                    <option value="custom">自訂角色</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">狀態</label>
                <select class="form-select" value="@(FilterStatus?.ToString() ?? "")" @onchange="@((ChangeEventArgs e) => HandleFilterStatusChanged(e.Value?.ToString() ?? ""))">
                    <option value="">全部狀態</option>
                    <option value="@EntityStatus.Active">啟用</option>
                    <option value="@EntityStatus.Inactive">停用</option>
                </select>
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <ButtonComponent Text="重置" 
                               Variant="ButtonVariant.OutlineSecondary" 
                               IconClass="bi bi-arrow-clockwise"
                               OnClick="HandleReset" />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string SearchTerm { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> SearchTermChanged { get; set; }
    [Parameter] public string FilterType { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> FilterTypeChanged { get; set; }
    [Parameter] public EntityStatus? FilterStatus { get; set; }
    [Parameter] public EventCallback<EntityStatus?> FilterStatusChanged { get; set; }
    [Parameter] public EventCallback OnReset { get; set; }
    [Parameter] public EventCallback<ChangeEventArgs> OnSearchInput { get; set; }

    private async Task HandleSearchTermChanged(string value)
    {
        await SearchTermChanged.InvokeAsync(value);
    }

    private async Task HandleFilterTypeChanged(string value)
    {
        await FilterTypeChanged.InvokeAsync(value);
    }

    private async Task HandleFilterStatusChanged(string value)
    {
        EntityStatus? status = null;
        if (!string.IsNullOrEmpty(value) && Enum.TryParse<EntityStatus>(value, out var parsedStatus))
        {
            status = parsedStatus;
        }
        await FilterStatusChanged.InvokeAsync(status);
    }

    private async Task HandleReset()
    {
        await OnReset.InvokeAsync();
    }

    private async Task HandleSearchInput(ChangeEventArgs e)
    {
        await OnSearchInput.InvokeAsync(e);
    }
}
