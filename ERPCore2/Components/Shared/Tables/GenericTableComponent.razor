@* 增強版資料表格組件 - 支援欄位配置和自動格式化 *@
@using System.Reflection
@using System.Web
@typeparam TItem

<div class="table-responsive">
    <table class="table @GetTableClass()">
        @if (ShowHeader && ColumnDefinitions != null && ColumnDefinitions.Any())
        {
            <thead class="@GetHeaderClass()">
                <tr>
                    @foreach (var column in ColumnDefinitions)
                    {
                        <th scope="col" class="@column.HeaderCssClass" style="@column.HeaderStyle">
                            @if (!string.IsNullOrEmpty(column.IconClass))
                            {
                                <i class="@column.IconClass me-1"></i>
                            }
                            @column.Title
                            @if (column.IsSortable && EnableSorting)
                            {
                                <i class="fas fa-sort ms-1 text-muted" style="cursor: pointer;" 
                                   @onclick="() => HandleSort(column.PropertyName)"></i>
                            }
                        </th>
                    }
                    @if (ShowActions)
                    {
                        <th scope="col" class="text-center">@ActionsHeader</th>
                    }
                </tr>
            </thead>
        }
        <tbody>
            @if (Items != null && Items.Any())
            {
                @foreach (var item in Items)
                {
                    <tr class="@GetRowClass(item)" 
                        @onclick="() => HandleRowClick(item)"
                        style="@(EnableRowClick ? $"cursor: {RowClickCursor};" : "")">
                        
                        @foreach (var column in ColumnDefinitions ?? new List<TableColumnDefinition>())
                        {                            <td class="@column.CellCssClass" style="@column.CellStyle">
                                @if (column.CustomTemplate != null && item != null)
                                {
                                    @column.CustomTemplate(item)
                                }
                                else
                                {
                                    @((MarkupString)FormatCellValue(item, column))
                                }
                            </td>
                        }
                        
                        @if (ShowActions && ActionsTemplate != null)
                        {
                            <td class="text-center">
                                @ActionsTemplate(item)
                            </td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="@GetColspan()" class="text-center py-4 text-light-custom">
                        @if (EmptyTemplate != null)
                        {
                            @EmptyTemplate
                        }
                        else
                        {
                            <i class="fas fa-inbox fa-2x mb-2 text-light-custom"></i>
                            <br />
                            @EmptyMessage
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public List<TableColumnDefinition>? ColumnDefinitions { get; set; }
    [Parameter] public RenderFragment<TItem>? ActionsTemplate { get; set; }
    [Parameter] public RenderFragment? EmptyTemplate { get; set; }
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowActions { get; set; } = false;
    [Parameter] public bool IsStriped { get; set; } = true;
    [Parameter] public bool IsHoverable { get; set; } = true;
    [Parameter] public bool IsBordered { get; set; } = false;
    [Parameter] public TableSize Size { get; set; } = TableSize.Normal;
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public string EmptyMessage { get; set; } = "沒有找到資料";
    [Parameter] public string ActionsHeader { get; set; } = "操作";
    [Parameter] public Func<TItem, string>? GetRowCssClass { get; set; }
    [Parameter] public EventCallback<TItem> OnRowClick { get; set; }
    [Parameter] public bool EnableRowClick { get; set; } = false;
    [Parameter] public string RowClickCursor { get; set; } = "pointer";
    [Parameter] public bool EnableSorting { get; set; } = false;
    [Parameter] public EventCallback<string> OnSort { get; set; }

    private string GetTableClass()
    {
        var classes = new List<string>();
        
        if (IsStriped) classes.Add("table-striped");
        if (IsHoverable) classes.Add("table-hover");
        if (IsBordered) classes.Add("table-bordered");
        
        classes.Add(Size switch
        {
            TableSize.Small => "table-sm",
            TableSize.Large => "table-lg",
            _ => ""
        });
        
        if (!string.IsNullOrEmpty(CssClass))
            classes.Add(CssClass);
            
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    private string GetHeaderClass()
    {
        return "table-header-primary";
    }

    private string GetRowClass(TItem item)
    {
        if (GetRowCssClass != null)
            return GetRowCssClass(item) ?? "";
        return "";
    }

    private int GetColspan()
    {
        var columnCount = ColumnDefinitions?.Count ?? 0;
        return ShowActions ? columnCount + 1 : columnCount;
    }

    private async Task HandleRowClick(TItem item)
    {
        if (EnableRowClick && OnRowClick.HasDelegate)
        {
            await OnRowClick.InvokeAsync(item);
        }
    }

    private async Task HandleSort(string propertyName)
    {
        if (EnableSorting && OnSort.HasDelegate)
        {
            await OnSort.InvokeAsync(propertyName);
        }
    }

    private string FormatCellValue(TItem item, TableColumnDefinition column)
    {
        var value = GetPropertyValue(item, column.PropertyName);
        
        if (value == null)
            return column.NullDisplayText ?? "-";

        return column.DataType switch
        {
            ColumnDataType.Text => HttpUtility.HtmlEncode(value.ToString() ?? ""),
            ColumnDataType.Number => FormatNumber(value, column.Format),
            ColumnDataType.Currency => FormatCurrency(value, column.CurrencySymbol, column.Format),
            ColumnDataType.Date => FormatDate(value, column.Format),
            ColumnDataType.DateTime => FormatDateTime(value, column.Format),
            ColumnDataType.Boolean => FormatBoolean(value, column.TrueText, column.FalseText),
            ColumnDataType.Status => FormatStatus(value, column.StatusBadgeMap),
            ColumnDataType.Html => value.ToString() ?? "",
            _ => HttpUtility.HtmlEncode(value.ToString() ?? "")
        };
    }

    private object? GetPropertyValue(TItem item, string propertyName)
    {
        if (item == null || string.IsNullOrEmpty(propertyName))
            return null;

        // 支援巢狀屬性 例如: "CustomerType.TypeName"
        var parts = propertyName.Split('.');
        object? currentValue = item;
        
        foreach (var part in parts)
        {
            if (currentValue == null) return null;
            
            var currentType = currentValue.GetType();
            var property = currentType.GetProperty(part);
            
            if (property == null) return null;
            
            currentValue = property.GetValue(currentValue);
        }
        
        return currentValue;
    }

    private string FormatNumber(object value, string? format)
    {
        format = format ?? "N2";
        
        return value switch
        {
            decimal d => HttpUtility.HtmlEncode(d.ToString(format)),
            double d => HttpUtility.HtmlEncode(d.ToString(format)),
            float f => HttpUtility.HtmlEncode(f.ToString(format)),
            int i => HttpUtility.HtmlEncode(i.ToString(format)),
            long l => HttpUtility.HtmlEncode(l.ToString(format)),
            _ => HttpUtility.HtmlEncode(value.ToString() ?? "")
        };
    }

    private string FormatCurrency(object value, string? symbol, string? format)
    {
        var currencySymbol = symbol ?? "NT$";
        format = format ?? "N2";
        
        var numericValue = value switch
        {
            decimal d => d.ToString(format),
            double d => d.ToString(format),
            float f => f.ToString(format),
            int i => i.ToString(format),
            long l => l.ToString(format),
            _ => value.ToString()
        };
        
        return HttpUtility.HtmlEncode($"{currencySymbol} {numericValue}");
    }

    private string FormatDate(object value, string? format)
    {
        format = format ?? "yyyy/MM/dd";
        
        var dateString = value switch
        {
            DateTime dt => dt.ToString(format),
            DateOnly d => d.ToString(format),
            DateTimeOffset dto => dto.ToString(format),
            _ => value.ToString()
        };
        
        return HttpUtility.HtmlEncode(dateString ?? "");
    }

    private string FormatDateTime(object value, string? format)
    {
        format = format ?? "yyyy/MM/dd HH:mm";
        
        var dateString = value switch
        {
            DateTime dt => dt.ToString(format),
            DateTimeOffset dto => dto.ToString(format),
            _ => value.ToString()
        };
        
        return HttpUtility.HtmlEncode(dateString ?? "");
    }

    private string FormatBoolean(object value, string? trueText, string? falseText)
    {
        if (value is bool boolValue)
        {
            var text = boolValue ? (trueText ?? "是") : (falseText ?? "否");
            return HttpUtility.HtmlEncode(text);
        }
        
        return HttpUtility.HtmlEncode(value.ToString() ?? "");
    }

    private string FormatStatus(object value, Dictionary<object, string>? badgeMap)
    {
        if (badgeMap != null && badgeMap.ContainsKey(value))
        {
            return $"<span class=\"badge {badgeMap[value]}\">{HttpUtility.HtmlEncode(value.ToString() ?? "")}</span>";
        }
          return $"<span class=\"badge bg-secondary\">{HttpUtility.HtmlEncode(value.ToString() ?? "")}</span>";
    }
}
