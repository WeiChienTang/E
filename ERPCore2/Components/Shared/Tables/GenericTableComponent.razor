@* 增強版資料表格組件 - 支援欄位配置、自動格式化和分頁功能 *@
@using System.Reflection
@using System.Web
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Data.Enums
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@typeparam TItem

<div class="table-responsive table-container-hover">
    <table class="table @GetTableClass() @(EnableColumnResize ? "resizable-table" : "")"
           id="@TableId">
        @if (ShowHeader && ColumnDefinitions != null && ColumnDefinitions.Any())
        {
            <thead class="@GetHeaderClass()">
                <tr>
                    @foreach (var column in ColumnDefinitions)
                    {
                        <th scope="col" 
                            class="@column.HeaderCssClass @(EnableColumnResize ? "resizable-column" : "")" 
                            style="@GetColumnStyle(column)" 
                            data-column="@column.PropertyName">
                            <div class="column-header-content">
                                @if (!string.IsNullOrEmpty(column.IconClass))
                                {
                                    <i class="@column.IconClass me-1"></i>
                                }
                                @column.Title
                                @if (column.IsSortable && EnableSorting)
                                {
                                    <i class="fas fa-sort ms-1 text-muted" style="cursor: pointer;" 
                                       @onclick="() => HandleSort(column.PropertyName)"></i>
                                }
                            </div>
                            @if (EnableColumnResize)
                            {
                                <div class="column-resizer" @onmousedown="@((e) => StartColumnResize(e, column.PropertyName))"></div>
                            }
                        </th>
                    }
                </tr>
            </thead>
        }
        <tbody>
            @if (Items != null && Items.Any())
            {
                @foreach (var item in Items)
                {
                    <tr class="@GetRowClass(item)" 
                        @onclick="() => HandleRowClick(item)"
                        style="@(EnableRowClick ? $"cursor: {RowClickCursor};" : "")">
                        
                        @foreach (var column in ColumnDefinitions ?? new List<TableColumnDefinition>())
                        {                            <td class="@column.CellCssClass" style="@column.CellStyle">
                                @if (column.CustomTemplate != null && item != null)
                                {
                                    @column.CustomTemplate(item)
                                }
                                else
                                {
                                    @((MarkupString)FormatCellValue(item, column))
                                }
                            </td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="@GetColspan()" class="text-center py-4 text-light-custom">
                        @if (EmptyTemplate != null)
                        {
                            @EmptyTemplate
                        }
                        else
                        {
                            <i class="fas fa-inbox fa-2x mb-2 text-light-custom"></i>
                            <br />
                            @EmptyMessage
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@* 分頁控制區塊 *@
@if (EnablePagination && TotalItems > 0)
{
    <!-- 響應式分頁容器 - 大螢幕水平排列，小螢幕垂直堆疊 -->
    <div class="mt-3">
        <!-- 第一行：資料統計資訊與每頁筆數選擇器 -->
        <div class="d-flex flex-column flex-sm-row justify-content-between align-items-center mb-2 gap-2">
            <!-- 資料統計資訊 -->
            <div class="text-muted text-center text-sm-start">
                <small>
                    顯示第 @StartItem - @EndItem 筆，共 @TotalItems 筆資料 (第 @CurrentPage 頁，共 @TotalPages 頁)
                </small>
            </div>
            
            <!-- 每頁筆數選擇器 -->
            @if (ShowPageSizeSelector)
            {
                <div class="d-flex align-items-center flex-shrink-0">
                    <label class="form-label me-2 mb-0 text-muted">
                        <small>每頁顯示:</small>
                    </label>
                    <select class="form-select form-select-sm" style="width: auto;" 
                            value="@PageSize" 
                            @onchange="HandlePageSizeChanged">
                        @foreach (var size in PageSizeOptions)
                        {
                            <option value="@size">@size</option>
                        }
                    </select>
                    <small class="text-muted ms-1">筆</small>
                </div>
            }
        </div>
        
        <!-- 第二行：分頁按鈕群 - 置中顯示 -->
        <div class="d-flex justify-content-center">
            <nav aria-label="資料表分頁">
                <div class="btn-group flex-wrap" role="group" aria-label="分頁控制">
                    <!-- 第一頁按鈕 - 只在中大螢幕顯示 -->
                    <div class="d-none d-md-block">
                        <GenericButtonComponent Text="第一頁"
                                              IconClass="fas fa-angle-double-left"
                                              Variant="ButtonVariant.OutlinePrimary"
                                              Size="ButtonSize.Small"
                                              IsDisabled="@(!HasPreviousPage)"
                                              OnClick="@(() => HandlePageChanged(1))"
                                              Title="前往第一頁" />
                    </div>
                    
                    <!-- 上一頁按鈕 -->
                    <GenericButtonComponent Text="@GetPreviousButtonText()"
                                          IconClass="fas fa-angle-left"
                                          Variant="ButtonVariant.OutlinePrimary"
                                          Size="ButtonSize.Small"
                                          IsDisabled="@(!HasPreviousPage)"
                                          OnClick="@(() => HandlePageChanged(CurrentPage - 1))"
                                          Title="上一頁" />
                    
                    <!-- 頁碼按鈕群 - 響應式數量控制 -->
                    @foreach (var pageNumber in GetPageNumbers())
                    {
                        var currentPageNumber = pageNumber;
                        var isCurrentPage = currentPageNumber == CurrentPage;
                        
                        <GenericButtonComponent Text="@currentPageNumber.ToString()"
                                              Variant="@(isCurrentPage ? ButtonVariant.Primary : ButtonVariant.OutlinePrimary)"
                                              Size="ButtonSize.Small"
                                              OnClick="@(() => HandlePageChanged(currentPageNumber))"
                                              Title="@($"前往第 {currentPageNumber} 頁")" />
                    }
                    
                    <!-- 下一頁按鈕 -->
                    <GenericButtonComponent Text="@GetNextButtonText()"
                                          IconClass="fas fa-angle-right"
                                          Variant="ButtonVariant.OutlinePrimary"
                                          Size="ButtonSize.Small"
                                          IsDisabled="@(!HasNextPage)"
                                          OnClick="@(() => HandlePageChanged(CurrentPage + 1))"
                                          Title="下一頁" />
                    
                    <!-- 最後一頁按鈕 - 只在中大螢幕顯示 -->
                    <div class="d-none d-md-block">
                        <GenericButtonComponent Text="最後一頁"
                                              IconClass="fas fa-angle-double-right"
                                              Variant="ButtonVariant.OutlinePrimary"
                                              Size="ButtonSize.Small"
                                              IsDisabled="@(!HasNextPage)"
                                              OnClick="@(() => HandlePageChanged(TotalPages))"
                                              Title="前往最後一頁" />
                    </div>
                </div>
            </nav>
        </div>
    </div>
}

@code {
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public List<TableColumnDefinition>? ColumnDefinitions { get; set; }
    [Parameter] public RenderFragment? EmptyTemplate { get; set; }
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool IsStriped { get; set; } = true;
    [Parameter] public bool IsHoverable { get; set; } = true;
    [Parameter] public bool IsBordered { get; set; } = true;
    [Parameter] public bool ShowColumnBorders { get; set; } = true;
    [Parameter] public TableSize Size { get; set; } = TableSize.Normal;
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public string EmptyMessage { get; set; } = "沒有找到資料";
    [Parameter] public Func<TItem, string>? GetRowCssClass { get; set; }
    [Parameter] public EventCallback<TItem> OnRowClick { get; set; }
    [Parameter] public bool EnableRowClick { get; set; } = false;    [Parameter] public string RowClickCursor { get; set; } = "pointer";
    [Parameter] public bool EnableSorting { get; set; } = false;
    [Parameter] public EventCallback<string> OnSort { get; set; }
    [Parameter] public bool EnableColumnResize { get; set; } = true;
    [Parameter] public string TableId { get; set; } = Guid.NewGuid().ToString("N")[..8];

    // 分頁相關參數
    [Parameter] public bool EnablePagination { get; set; } = false;
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int PageSize { get; set; } = 20;
    [Parameter] public int TotalItems { get; set; } = 0;
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public EventCallback<int> OnPageSizeChanged { get; set; }
    [Parameter] public bool ShowPageSizeSelector { get; set; } = true;
    [Parameter] public List<int> PageSizeOptions { get; set; } = new() { 10, 20, 50, 100 };
    [Parameter] public int MaxDisplayedPages { get; set; } = 5;
    [Parameter] public int MaxDisplayedPagesMobile { get; set; } = 3;

    // 分頁計算屬性
    private int TotalPages => TotalItems > 0 ? (int)Math.Ceiling((double)TotalItems / PageSize) : 0;
    private bool HasPreviousPage => CurrentPage > 1;
    private bool HasNextPage => CurrentPage < TotalPages;
    private int StartItem => TotalItems > 0 ? ((CurrentPage - 1) * PageSize) + 1 : 0;
    private int EndItem => TotalItems > 0 ? Math.Min(CurrentPage * PageSize, TotalItems) : 0;

    private string GetTableClass()
    {
        var classes = new List<string>();
        
        if (IsStriped) classes.Add("table-striped");
        if (IsHoverable) classes.Add("table-hover");
        if (IsBordered) classes.Add("table-bordered");
        
        // 添加列邊框樣式
        if (ShowColumnBorders) classes.Add("table-with-column-borders");
        
        classes.Add(Size switch
        {
            TableSize.Small => "table-sm",
            TableSize.Large => "table-lg",
            _ => ""
        });
        
        if (!string.IsNullOrEmpty(CssClass))
            classes.Add(CssClass);
            
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }    private string GetHeaderClass()
    {
        return "table-header-primary";
    }

    private string GetRowClass(TItem item)
    {
        if (GetRowCssClass != null)
            return GetRowCssClass(item) ?? "";
        return "";
    }

    private int GetColspan()
    {
        return ColumnDefinitions?.Count ?? 0;
    }

    private async Task HandleRowClick(TItem item)
    {
        if (EnableRowClick && OnRowClick.HasDelegate)
        {
            await OnRowClick.InvokeAsync(item);
        }
    }

    private async Task HandleSort(string propertyName)
    {
        if (EnableSorting && OnSort.HasDelegate)
        {
            await OnSort.InvokeAsync(propertyName);
        }
    }

    private string GetColumnStyle(TableColumnDefinition column)
    {
        var styles = new List<string>();
        
        // 如果有設定寬度，加入 width 樣式
        if (!string.IsNullOrEmpty(column.Width))
        {
            styles.Add($"width: {column.Width}");
        }
        
        // 如果有設定標題樣式，加入
        if (!string.IsNullOrEmpty(column.HeaderStyle))
        {
            styles.Add(column.HeaderStyle);
        }
        
        return string.Join("; ", styles);
    }

    private void StartColumnResize(MouseEventArgs e, string columnName)
    {
        // 這個方法將配合 JavaScript 使用
        // JavaScript 將處理實際的拖拽邏輯
    }

    private string FormatCellValue(TItem item, TableColumnDefinition column)
    {
        var value = GetPropertyValue(item, column.PropertyName);
        
        if (value == null)
            return column.NullDisplayText ?? "-";

        return column.DataType switch
        {
            ColumnDataType.Text => HttpUtility.HtmlEncode(value.ToString() ?? ""),
            ColumnDataType.Number => FormatNumber(value, column.Format),
            ColumnDataType.Currency => FormatCurrency(value, column.CurrencySymbol, column.Format),
            ColumnDataType.Date => FormatDate(value, column.Format),
            ColumnDataType.DateTime => FormatDateTime(value, column.Format),
            ColumnDataType.Boolean => FormatBoolean(value, column.TrueText, column.FalseText),
            ColumnDataType.Status => FormatStatus(value, column.StatusBadgeMap),
            ColumnDataType.Html => value.ToString() ?? "",
            _ => HttpUtility.HtmlEncode(value.ToString() ?? "")
        };
    }

    private object? GetPropertyValue(TItem item, string propertyName)
    {
        if (item == null || string.IsNullOrEmpty(propertyName))
            return null;

        // 支援巢狀屬性 例如: "CustomerType.TypeName"
        var parts = propertyName.Split('.');
        object? currentValue = item;
        
        foreach (var part in parts)
        {
            if (currentValue == null) return null;
            
            var currentType = currentValue.GetType();
            var property = currentType.GetProperty(part);
            
            if (property == null) return null;
            
            currentValue = property.GetValue(currentValue);
        }
        
        return currentValue;
    }

    private string FormatNumber(object value, string? format)
    {
        format = format ?? "N2";
        
        return value switch
        {
            decimal d => HttpUtility.HtmlEncode(d.ToString(format)),
            double d => HttpUtility.HtmlEncode(d.ToString(format)),
            float f => HttpUtility.HtmlEncode(f.ToString(format)),
            int i => HttpUtility.HtmlEncode(i.ToString(format)),
            long l => HttpUtility.HtmlEncode(l.ToString(format)),
            _ => HttpUtility.HtmlEncode(value.ToString() ?? "")
        };
    }

    private string FormatCurrency(object value, string? symbol, string? format)
    {
        var currencySymbol = symbol ?? "NT$";
        format = format ?? "N2";
        
        var numericValue = value switch
        {
            decimal d => d.ToString(format),
            double d => d.ToString(format),
            float f => f.ToString(format),
            int i => i.ToString(format),
            long l => l.ToString(format),
            _ => value.ToString()
        };
        
        return HttpUtility.HtmlEncode($"{currencySymbol} {numericValue}");
    }

    private string FormatDate(object value, string? format)
    {
        format = format ?? "yyyy/MM/dd";
        
        var dateString = value switch
        {
            DateTime dt => dt.ToString(format),
            DateOnly d => d.ToString(format),
            DateTimeOffset dto => dto.ToString(format),
            _ => value.ToString()
        };
        
        return HttpUtility.HtmlEncode(dateString ?? "");
    }

    private string FormatDateTime(object value, string? format)
    {
        format = format ?? "yyyy/MM/dd HH:mm";
        
        var dateString = value switch
        {
            DateTime dt => dt.ToString(format),
            DateTimeOffset dto => dto.ToString(format),
            _ => value.ToString()
        };
        
        return HttpUtility.HtmlEncode(dateString ?? "");
    }

    private string FormatBoolean(object value, string? trueText, string? falseText)
    {
        if (value is bool boolValue)
        {
            var text = boolValue ? (trueText ?? "是") : (falseText ?? "否");
            return HttpUtility.HtmlEncode(text);
        }
        
        return HttpUtility.HtmlEncode(value.ToString() ?? "");
    }

    private string FormatStatus(object value, Dictionary<object, string>? badgeMap)
    {
        if (badgeMap != null && badgeMap.ContainsKey(value))
        {
            // 使用映射中的值作為顯示文字，而不是原始枚舉值
            var displayText = badgeMap[value];
            var cssClass = GetStatusBadgeClass(value);
            return $"<span class=\"badge {cssClass}\">{HttpUtility.HtmlEncode(displayText)}</span>";
        }
        return $"<span class=\"badge bg-secondary\">{HttpUtility.HtmlEncode(value.ToString() ?? "")}</span>";
    }
    
    private string GetStatusBadgeClass(object value)
    {
        if (value is EntityStatus status)
        {
            return status switch
            {
                EntityStatus.Active => "bg-success",
                EntityStatus.Inactive => "bg-danger",
                EntityStatus.Deleted => "bg-danger",
                _ => "bg-secondary"
            };
        }
        return "bg-secondary";
    }

    // 分頁相關方法
    private async Task HandlePageChanged(int newPage)
    {
        if (newPage >= 1 && newPage <= TotalPages && newPage != CurrentPage)
        {
            if (OnPageChanged.HasDelegate)
            {
                await OnPageChanged.InvokeAsync(newPage);
            }
        }
    }

    private async Task HandlePageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newPageSize) && newPageSize > 0)
        {
            if (OnPageSizeChanged.HasDelegate)
            {
                await OnPageSizeChanged.InvokeAsync(newPageSize);
            }
        }
    }

    private IEnumerable<int> GetPageNumbers()
    {
        // 使用較少的頁碼數量以適應手機螢幕
        var maxPages = Math.Min(MaxDisplayedPages, 3); // 限制最多3個頁碼按鈕
        
        var startPage = Math.Max(1, CurrentPage - maxPages / 2);
        var endPage = Math.Min(TotalPages, startPage + maxPages - 1);
        
        // 調整起始頁面，確保顯示正確數量的頁碼
        if (endPage - startPage + 1 < maxPages)
        {
            startPage = Math.Max(1, endPage - maxPages + 1);
        }
        
        return Enumerable.Range(startPage, endPage - startPage + 1);
    }

    // 響應式按鈕文字方法
    private string GetPreviousButtonText()
    {
        return "上一頁"; // 在所有螢幕大小都顯示文字
    }

    private string GetNextButtonText()
    {
        return "下一頁"; // 在所有螢幕大小都顯示文字
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && EnableColumnResize)
        {
            await JSRuntime.InvokeVoidAsync("tableColumnResizer.init", TableId);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
}

<script>
window.tableColumnResizer = {
    currentTable: null,
    currentColumn: null,
    currentResizer: null,
    nextColumn: null,
    startX: 0,
    startWidth: 0,
    nextStartWidth: 0,
    
    init: function(tableId) {
        const table = document.getElementById(tableId);
        if (!table) return;
        
        // 為所有 resizer 添加事件監聽器
        const resizers = table.querySelectorAll('.column-resizer');
        resizers.forEach(resizer => {
            resizer.addEventListener('mousedown', (e) => this.startResize(e, table));
        });
        
        // 添加全域事件監聽器
        document.addEventListener('mousemove', (e) => this.doResize(e));
        document.addEventListener('mouseup', () => this.stopResize());
    },
    
    startResize: function(e, table) {
        e.preventDefault();
        
        this.currentResizer = e.target;
        this.currentTable = table;
        this.currentColumn = e.target.parentElement;
        
        this.startX = e.clientX;
        this.startWidth = parseInt(document.defaultView.getComputedStyle(this.currentColumn).width, 10);
        
        // 找到下一個欄位，用於調整時的補償
        const currentIndex = Array.from(this.currentColumn.parentElement.children).indexOf(this.currentColumn);
        this.nextColumn = this.currentColumn.parentElement.children[currentIndex + 1] || null;
        this.nextStartWidth = this.nextColumn ? 
            parseInt(document.defaultView.getComputedStyle(this.nextColumn).width, 10) : 0;
        
        this.currentResizer.classList.add('resizing');
        this.currentTable.classList.add('resizing');
        
        document.body.style.cursor = 'col-resize';
    },
    
    doResize: function(e) {
        if (!this.currentColumn) return;
        
        const deltaX = e.clientX - this.startX;
        const newWidth = this.startWidth + deltaX;
        
        // 設定最小寬度限制
        if (newWidth < 50) return;
        
        // 只調整當前欄位寬度
        this.currentColumn.style.width = newWidth + 'px';
        
        // 如果有下一個欄位，調整其寬度以保持表格總寬度不變
        if (this.nextColumn && this.nextStartWidth - deltaX > 50) {
            this.nextColumn.style.width = (this.nextStartWidth - deltaX) + 'px';
        }
    },
    
    stopResize: function() {
        if (this.currentResizer) {
            this.currentResizer.classList.remove('resizing');
        }
        if (this.currentTable) {
            this.currentTable.classList.remove('resizing');
        }
        
        document.body.style.cursor = '';
        
        this.currentTable = null;
        this.currentColumn = null;
        this.currentResizer = null;
        this.nextColumn = null;
        this.nextStartWidth = 0;
    }
};
</script>
