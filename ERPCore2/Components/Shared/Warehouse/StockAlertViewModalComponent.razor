@*
    庫存警戒檢視 Modal 組件
    用於顯示低庫存或庫存過多的商品清單（唯讀）
*@
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.SubCollections
@using ERPCore2.Models
@using Microsoft.JSInterop
@inject IInventoryStockService InventoryStockService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="modal fade @(IsVisible ? "show" : "")"
     style="display: @(IsVisible ? "block" : "none"); background-color: rgba(0,0,0,0.5);"
     tabindex="-1"
     role="dialog"
     @onclick="@HandleBackdropClick">

    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable"
         role="document"
         @onclick:stopPropagation="true">
        <div class="modal-content shadow-lg">

            @* Header：標題區 *@
            <div class="modal-header @GetHeaderCssClass()">
                <h5 class="modal-title fw-bold">
                    <i class="bi @GetHeaderIcon() me-2"></i>
                    @GetTitle()
                </h5>
                <GenericButtonComponent Type="button"
                                      CssClass="btn-close"
                                      OnClick="HandleClose"
                                      Title="關閉" />
            </div>

            @* Body：表格內容 *@
            <div class="modal-body p-4">
                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">載入中...</span>
                        </div>
                        <p class="mt-3 text-muted">正在載入庫存警戒資訊...</p>
                    </div>
                }
                else if (!stockAlertItems.Any())
                {
                    <div class="alert @GetAlertCssClass() mb-0">
                        <i class="bi bi-check-circle me-2"></i>
                        @GetEmptyMessage()
                    </div>
                }
                else
                {
                    <div class="alert @GetAlertCssClass() mb-3">
                        <i class="bi @GetAlertIcon() me-2"></i>
                        共發現 <strong>@stockAlertItems.Count</strong> 筆 @GetAlertTypeText() 的商品
                    </div>
                    
                    <div class="card border-0 shadow-sm">
                        <div class="card-body p-0">
                            <InteractiveTableComponent TItem="StockAlertViewItem"
                                                     Items="@stockAlertItems"
                                                     ColumnDefinitions="@GetColumnDefinitions()"
                                                     ShowHeader="true"
                                                     ShowActions="false"
                                                     ShowRowNumbers="true"
                                                     IsStriped="true"
                                                     IsHoverable="true"
                                                     IsBordered="true"
                                                     CssClass="mb-0" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    // ===== 參數定義 =====

    /// <summary>
    /// Modal 是否顯示
    /// </summary>
    [Parameter]
    public bool IsVisible { get; set; }

    /// <summary>
    /// Modal 顯示狀態變更事件
    /// </summary>
    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    /// <summary>
    /// 警戒類型：LowStock（低庫存）或 OverStock（庫存過多）
    /// </summary>
    [Parameter]
    public StockAlertType AlertType { get; set; } = StockAlertType.LowStock;

    // ===== 私有欄位 =====
    private bool isLoading = false;
    private List<StockAlertViewItem> stockAlertItems = new();
    
    // ESC 鍵支援
    private DotNetObjectReference<StockAlertViewModalComponent>? _escKeyDotNetRef;
    private bool _isEscKeyListenerActive = false;
    private bool _isDisposed = false;
    private readonly object _escKeyLock = new object();

    // ===== 生命週期方法 =====

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && !isLoading && !stockAlertItems.Any())
        {
            await LoadStockAlertDataAsync();
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible)
        {
            bool shouldSetup;
            lock (_escKeyLock)
            {
                shouldSetup = !_isEscKeyListenerActive;
            }
            
            if (shouldSetup)
            {
                await SetupEscKeyListenerAsync();
            }
        }
        else
        {
            bool shouldCleanup;
            lock (_escKeyLock)
            {
                shouldCleanup = _isEscKeyListenerActive;
            }
            
            if (shouldCleanup)
            {
                await CleanupEscKeyListenerAsync();
            }
        }
    }

    // ===== 資料載入方法 =====

    /// <summary>
    /// 載入庫存警戒資料
    /// </summary>
    private async Task LoadStockAlertDataAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            List<InventoryStockDetail> details;
            
            if (AlertType == StockAlertType.LowStock)
            {
                details = await InventoryStockService.GetLowStockDetailsAsync();
            }
            else
            {
                details = await InventoryStockService.GetOverStockDetailsAsync();
            }
            
            stockAlertItems = details.Select(d => new StockAlertViewItem
            {
                DetailId = d.Id,
                ProductName = d.InventoryStock?.Product?.Name ?? "未知商品",
                WarehouseName = d.Warehouse?.Name ?? "未知倉庫",
                WarehouseLocationName = d.WarehouseLocation?.Name ?? "未指定",
                CurrentStock = d.CurrentStock,
                MinStockLevel = d.MinStockLevel ?? 0,
                MaxStockLevel = d.MaxStockLevel ?? 0,
                AlertType = AlertType
            }).ToList();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入庫存警戒資訊失敗：{ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // ===== 表格欄位定義 =====

    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>
        {
            new()
            {
                Title = "產品名稱",
                PropertyName = nameof(StockAlertViewItem.ProductName),
                ColumnType = InteractiveColumnType.Display,
                Width = "20%"
            },
            new()
            {
                Title = "倉庫",
                PropertyName = nameof(StockAlertViewItem.WarehouseName),
                ColumnType = InteractiveColumnType.Display,
                Width = "12%"
            },
            new()
            {
                Title = "倉庫位置",
                PropertyName = nameof(StockAlertViewItem.WarehouseLocationName),
                ColumnType = InteractiveColumnType.Display,
                Width = "12%"
            },
            new()
            {
                Title = "當前數量",
                PropertyName = nameof(StockAlertViewItem.CurrentStock),
                ColumnType = InteractiveColumnType.Display,
                Width = "10%",
                CellCssClass = "text-end fw-bold"
            },
            new()
            {
                Title = "最低量",
                PropertyName = nameof(StockAlertViewItem.MinStockLevel),
                ColumnType = InteractiveColumnType.Display,
                Width = "10%",
                CellCssClass = "text-end"
            },
            new()
            {
                Title = "最高量",
                PropertyName = nameof(StockAlertViewItem.MaxStockLevel),
                ColumnType = InteractiveColumnType.Display,
                Width = "10%",
                CellCssClass = "text-end"
            },
            new()
            {
                Title = "警戒狀態",
                PropertyName = nameof(StockAlertViewItem.AlertStatus),
                ColumnType = InteractiveColumnType.Display,
                Width = "18%",
                CellCssClass = AlertType == StockAlertType.LowStock ? "text-warning fw-bold" : "text-info fw-bold"
            }
        };

        return columns;
    }

    // ===== UI 輔助方法 =====

    private string GetHeaderCssClass()
    {
        return AlertType == StockAlertType.LowStock 
            ? "bg-warning text-dark" 
            : "bg-info text-white";
    }

    private string GetHeaderIcon()
    {
        return AlertType == StockAlertType.LowStock 
            ? "bi-exclamation-triangle" 
            : "bi-inbox-fill";
    }

    private string GetTitle()
    {
        return AlertType == StockAlertType.LowStock 
            ? "低庫存警戒商品清單" 
            : "庫存過多警戒商品清單";
    }

    private string GetAlertCssClass()
    {
        return AlertType == StockAlertType.LowStock 
            ? "alert-warning" 
            : "alert-info";
    }

    private string GetAlertIcon()
    {
        return AlertType == StockAlertType.LowStock 
            ? "bi-exclamation-triangle-fill" 
            : "bi-info-circle-fill";
    }

    private string GetAlertTypeText()
    {
        return AlertType == StockAlertType.LowStock 
            ? "低庫存" 
            : "庫存過多";
    }

    private string GetEmptyMessage()
    {
        return AlertType == StockAlertType.LowStock 
            ? "太棒了！目前沒有低於警戒線的商品。" 
            : "太棒了！目前沒有超過警戒線的商品。";
    }

    // ===== 事件處理方法 =====

    /// <summary>
    /// 處理關閉按鈕點擊
    /// </summary>
    private async Task HandleClose()
    {
        await CloseModal();
    }

    /// <summary>
    /// 處理背景點擊
    /// </summary>
    private async Task HandleBackdropClick()
    {
        await CloseModal();
    }

    /// <summary>
    /// 關閉 Modal
    /// </summary>
    private async Task CloseModal()
    {
        stockAlertItems.Clear();
        
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(false);
        }
    }

    // ===== ESC 鍵支援方法 =====

    private async Task SetupEscKeyListenerAsync()
    {
        try
        {
            lock (_escKeyLock)
            {
                if (_isEscKeyListenerActive && _escKeyDotNetRef != null)
                {
                    return;
                }
                
                _isEscKeyListenerActive = true;
            }
            
            lock (_escKeyLock)
            {
                _escKeyDotNetRef = DotNetObjectReference.Create(this);
            }
            
            await JSRuntime.InvokeVoidAsync("setupEscKeyListener", _escKeyDotNetRef);
        }
        catch (Exception ex)
        {
            lock (_escKeyLock)
            {
                _isEscKeyListenerActive = false;
            }
            LogError("SetupEscKeyListener", ex);
        }
    }
    
    private async Task CleanupEscKeyListenerAsync()
    {
        DotNetObjectReference<StockAlertViewModalComponent>? refToDispose = null;
        
        lock (_escKeyLock)
        {
            if (!_isEscKeyListenerActive)
            {
                return;
            }
            
            _isEscKeyListenerActive = false;
            refToDispose = _escKeyDotNetRef;
            _escKeyDotNetRef = null;
        }
        
        try
        {
            await JSRuntime.InvokeVoidAsync("cleanupEscKeyListener");
            await Task.Delay(200);
            
            if (refToDispose != null)
            {
                try
                {
                    refToDispose.Dispose();
                }
                catch (ObjectDisposedException)
                {
                    // 對象已被釋放，這是正常的
                }
                catch (Exception ex)
                {
                    LogError($"DotNetObjectReference dispose warning (safe to ignore): {ex.Message}", ex);
                }
            }
        }
        catch (JSDisconnectedException)
        {
            // Blazor 連接已斷開，這是正常的
        }
        catch (TaskCanceledException)
        {
            // 任務被取消，這是正常的
        }
        catch (Exception ex)
        {
            LogError("CleanupEscKeyListener", ex);
        }
    }
    
    [JSInvokable]
    public async Task HandleEscapeKey()
    {
        try
        {
            if (_isDisposed)
            {
                return;
            }
            
            if (IsVisible)
            {
                await HandleClose();
            }
        }
        catch (ObjectDisposedException)
        {
            // 忽略已釋放物件的錯誤
        }
        catch (InvalidOperationException)
        {
            // 忽略無效操作錯誤
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"ESC Error: {ex.Message}");
        }
    }
    
    private void LogError(string method, Exception ex)
    {
        System.Diagnostics.Debug.WriteLine($"[StockAlertViewModalComponent.{method}] 錯誤：{ex.Message}");
    }

    // ===== 資源清理 =====

    public void Dispose()
    {
        try
        {
            DotNetObjectReference<StockAlertViewModalComponent>? refToDispose = null;
            
            lock (_escKeyLock)
            {
                _isDisposed = true;
                _isEscKeyListenerActive = false;
                refToDispose = _escKeyDotNetRef;
                _escKeyDotNetRef = null;
            }
            
            refToDispose?.Dispose();
            
            _ = Task.Run(async () =>
            {
                try
                {
                    await CleanupEscKeyListenerAsync();
                }
                catch
                {
                    // 忽略清理過程中的錯誤
                }
            });
        }
        catch
        {
            // 忽略清理過程中的錯誤
        }
    }

    // ===== 列舉與內部類別 =====

    /// <summary>
    /// 庫存警戒類型
    /// </summary>
    public enum StockAlertType
    {
        /// <summary>
        /// 低庫存（當前數量 < 最低量）
        /// </summary>
        LowStock,
        
        /// <summary>
        /// 庫存過多（當前數量 > 最高量）
        /// </summary>
        OverStock
    }

    /// <summary>
    /// 庫存警戒檢視項目
    /// </summary>
    public class StockAlertViewItem
    {
        public int DetailId { get; set; }
        public string ProductName { get; set; } = string.Empty;
        public string WarehouseName { get; set; } = string.Empty;
        public string WarehouseLocationName { get; set; } = string.Empty;
        public int CurrentStock { get; set; }
        public int MinStockLevel { get; set; }
        public int MaxStockLevel { get; set; }
        public StockAlertType AlertType { get; set; }

        /// <summary>
        /// 警戒狀態文字
        /// </summary>
        public string AlertStatus
        {
            get
            {
                if (AlertType == StockAlertType.LowStock)
                {
                    var shortage = MinStockLevel - CurrentStock;
                    return $"低於警戒線 {shortage} 個";
                }
                else
                {
                    var excess = CurrentStock - MaxStockLevel;
                    return $"超出警戒線 {excess} 個";
                }
            }
        }
    }
}
