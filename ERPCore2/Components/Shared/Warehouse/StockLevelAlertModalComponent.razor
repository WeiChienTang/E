@*
    庫存警戒線設定 Modal 組件
    用於批次設定未設定警戒線的庫存明細
*@
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.SubCollections
@using ERPCore2.Models
@inject IInventoryStockService InventoryStockService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="modal fade @(IsVisible ? "show" : "")"
     style="display: @(IsVisible ? "block" : "none"); background-color: rgba(0,0,0,0.5);"
     tabindex="-1"
     role="dialog"
     @onclick="@HandleBackdropClick">

    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable"
         role="document"
         @onclick:stopPropagation="true">
        <div class="modal-content shadow-lg">

            @* Header：標題區 *@
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title fw-bold">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    @Title
                </h5>
                <GenericButtonComponent Type="button"
                                      CssClass="btn-close"
                                      OnClick="HandleCancel"
                                      Title="關閉" />
            </div>

            @* Modal Actions - 按鈕區塊 *@
            <div class="modal-footer border-bottom border-top-0 d-flex align-items-center flex-wrap">
                @if (!isLoading && stockDetails.Any())
                {
                    <div class="text-muted small me-auto">
                        <i class="bi bi-info-circle me-1"></i>
                        共 @stockDetails.Count 筆未設警戒線的庫存明細
                    </div>
                }
                
                @* 批次填入輸入區 *@
                @if (!isLoading && stockDetails.Any())
                {
                    <div class="d-flex gap-2 align-items-center">
                        <div class="input-group input-group-sm" style="width: 150px;">
                            <span class="input-group-text">最低量</span>
                            <input type="number" 
                                   class="form-control" 
                                   @bind="batchMinLevel" 
                                   min="0" 
                                   placeholder="0" />
                        </div>
                        <div class="input-group input-group-sm" style="width: 150px;">
                            <span class="input-group-text">最高量</span>
                            <input type="number" 
                                   class="form-control" 
                                   @bind="batchMaxLevel" 
                                   min="0" 
                                   placeholder="0" />
                        </div>
                        <GenericButtonComponent Variant="ButtonVariant.Primary"
                                              Text="批次填入"
                                              OnClick="ApplyBatchFill"
                                              Title="批次設定所有明細的警戒線" />
                        <GenericButtonComponent Variant="ButtonVariant.Primary"
                                              Text="清空"
                                              OnClick="HandleClearAll"
                                              Title="清空所有已輸入的警戒線" />
                    </div>
                }
                
                @* 按鈕組靠右對齊 *@
                <div class="d-flex gap-2 ms-auto">
                    <GenericButtonComponent Variant="ButtonVariant.Primary"
                                          Text="儲存"
                                          OnClick="HandleSave"
                                          IsDisabled="@(isLoading || !stockDetails.Any())"
                                          Title="儲存警戒線設定" />
                    <GenericButtonComponent Variant="ButtonVariant.Danger"
                                          Text="取消"
                                          OnClick="HandleCancel"
                                          IsDisabled="@isLoading"
                                          Title="取消並關閉" />
                </div>
            </div>

            @* Body：表格內容 *@
            <div class="modal-body p-4">
                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">載入中...</span>
                        </div>
                        <p class="mt-3 text-muted">正在載入未設警戒線的庫存明細...</p>
                    </div>
                }
                else if (!stockDetails.Any())
                {
                    <div class="alert alert-success mb-0">
                        <i class="bi bi-check-circle me-2"></i>
                        太棒了！所有庫存明細都已設定警戒線。
                    </div>
                }
                else
                {
                    <div class="card border-0 shadow-sm">
                        <div class="card-body p-0">
                            <InteractiveTableComponent TItem="StockLevelAlertItem"
                                                     Items="@stockDetails"
                                                     ColumnDefinitions="@GetColumnDefinitions()"
                                                     ShowHeader="true"
                                                     ShowActions="false"
                                                     ShowRowNumbers="true"
                                                     IsStriped="true"
                                                     IsHoverable="true"
                                                     IsBordered="true"
                                                     CssClass="mb-0" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    // ===== 參數定義 =====

    /// <summary>
    /// Modal 是否顯示
    /// </summary>
    [Parameter]
    public bool IsVisible { get; set; }

    /// <summary>
    /// Modal 顯示狀態變更事件
    /// </summary>
    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    /// <summary>
    /// Modal 標題
    /// </summary>
    [Parameter]
    public string Title { get; set; } = "設定庫存警戒線";

    /// <summary>
    /// 儲存成功後的回調
    /// </summary>
    [Parameter]
    public EventCallback OnSaved { get; set; }

    // ===== 私有欄位 =====
    private bool isLoading = false;
    private List<StockLevelAlertItem> stockDetails = new();
    
    // 批次填入相關
    private int? batchMinLevel = null;
    private int? batchMaxLevel = null;
    
    // ESC 鍵支援
    private DotNetObjectReference<StockLevelAlertModalComponent>? _escKeyDotNetRef;
    private bool _isEscKeyListenerActive = false;
    private bool _isDisposed = false;
    private readonly object _escKeyLock = new object();

    // ===== 生命週期方法 =====

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && !isLoading && !stockDetails.Any())
        {
            await LoadStockDetailsAsync();
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible)
        {
            // 只在狀態真正改變時設置監聽器
            bool shouldSetup;
            lock (_escKeyLock)
            {
                shouldSetup = !_isEscKeyListenerActive;
            }
            
            if (shouldSetup)
            {
                await SetupEscKeyListenerAsync();
            }
        }
        else
        {
            // 只在有監聽器時才清理
            bool shouldCleanup;
            lock (_escKeyLock)
            {
                shouldCleanup = _isEscKeyListenerActive;
            }
            
            if (shouldCleanup)
            {
                await CleanupEscKeyListenerAsync();
            }
        }
    }

    // ===== 資料載入方法 =====

    /// <summary>
    /// 載入未設警戒線的庫存明細
    /// </summary>
    private async Task LoadStockDetailsAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var details = await InventoryStockService.GetStockDetailsWithoutAlertAsync();
            
            stockDetails = details.Select(d => new StockLevelAlertItem
            {
                DetailId = d.Id,
                ProductName = d.InventoryStock?.Product?.Name ?? "未知商品",
                WarehouseName = d.Warehouse?.Name ?? "未知倉庫",
                WarehouseLocationName = d.WarehouseLocation?.Name ?? "未指定",
                CurrentStock = d.CurrentStock,
                MinStockLevel = d.MinStockLevel,
                MaxStockLevel = d.MaxStockLevel
            }).ToList();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入庫存明細失敗：{ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // ===== 表格欄位定義 =====

    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        return new List<InteractiveColumnDefinition>
        {
            new()
            {
                Title = "產品名稱",
                PropertyName = nameof(StockLevelAlertItem.ProductName),
                ColumnType = InteractiveColumnType.Display,
                Width = "25%"
            },
            new()
            {
                Title = "倉庫",
                PropertyName = nameof(StockLevelAlertItem.WarehouseName),
                ColumnType = InteractiveColumnType.Display,
                Width = "15%"
            },
            new()
            {
                Title = "倉庫位置",
                PropertyName = nameof(StockLevelAlertItem.WarehouseLocationName),
                ColumnType = InteractiveColumnType.Display,
                Width = "15%"
            },
            new()
            {
                Title = "當前數量",
                PropertyName = nameof(StockLevelAlertItem.CurrentStock),
                ColumnType = InteractiveColumnType.Display,
                Width = "10%",
                CellCssClass = "text-end"
            },
            new()
            {
                Title = "最低量",
                PropertyName = nameof(StockLevelAlertItem.MinStockLevel),
                ColumnType = InteractiveColumnType.Number,
                Width = "15%",
                MinValue = 0,
                CellCssClass = "text-end"
            },
            new()
            {
                Title = "最高量",
                PropertyName = nameof(StockLevelAlertItem.MaxStockLevel),
                ColumnType = InteractiveColumnType.Number,
                Width = "15%",
                MinValue = 0,
                CellCssClass = "text-end"
            }
        };
    }

    // ===== 事件處理方法 =====

    /// <summary>
    /// 處理儲存按鈕點擊
    /// </summary>
    private async Task HandleSave()
    {
        try
        {
            if (!stockDetails.Any())
            {
                await NotificationService.ShowWarningAsync("沒有需要儲存的資料");
                return;
            }

            // 驗證資料
            var errors = new List<string>();
            foreach (var item in stockDetails)
            {
                if (item.MinStockLevel.HasValue && item.MinStockLevel.Value < 0)
                {
                    errors.Add($"{item.ProductName} 的最低量不能為負數");
                }

                if (item.MaxStockLevel.HasValue && item.MaxStockLevel.Value < 0)
                {
                    errors.Add($"{item.ProductName} 的最高量不能為負數");
                }

                if (item.MinStockLevel.HasValue && item.MaxStockLevel.HasValue &&
                    item.MinStockLevel.Value > item.MaxStockLevel.Value)
                {
                    errors.Add($"{item.ProductName} 的最低量不能大於最高量");
                }
            }

            if (errors.Any())
            {
                await NotificationService.ShowErrorAsync($"資料驗證失敗：{string.Join("；", errors)}");
                return;
            }

            isLoading = true;
            StateHasChanged();

            // 準備更新資料
            var updates = stockDetails
                .Select(item => (item.DetailId, item.MinStockLevel, item.MaxStockLevel))
                .ToList();

            // 批次更新
            var result = await InventoryStockService.BatchUpdateStockLevelAlertsAsync(updates);

            if (result.IsSuccess)
            {
                await NotificationService.ShowSuccessAsync($"成功更新 {stockDetails.Count} 筆庫存警戒線設定");
                
                // 清空資料並關閉 Modal
                stockDetails.Clear();
                
                if (OnSaved.HasDelegate)
                {
                    await OnSaved.InvokeAsync();
                }
                
                await CloseModal();
            }
            else
            {
                await NotificationService.ShowErrorAsync($"儲存失敗：{result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"儲存時發生錯誤：{ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 處理取消按鈕點擊
    /// </summary>
    private async Task HandleCancel()
    {
        await CloseModal();
    }

    /// <summary>
    /// 處理背景點擊
    /// </summary>
    private async Task HandleBackdropClick()
    {
        await CloseModal();
    }

    /// <summary>
    /// 套用批次填入
    /// </summary>
    private async Task ApplyBatchFill()
    {
        try
        {
            // 驗證輸入
            if (!batchMinLevel.HasValue && !batchMaxLevel.HasValue)
            {
                await NotificationService.ShowWarningAsync("請至少輸入最低量或最高量");
                return;
            }

            if (batchMinLevel.HasValue && batchMinLevel.Value < 0)
            {
                await NotificationService.ShowWarningAsync("最低量不能為負數");
                return;
            }

            if (batchMaxLevel.HasValue && batchMaxLevel.Value < 0)
            {
                await NotificationService.ShowWarningAsync("最高量不能為負數");
                return;
            }

            if (batchMinLevel.HasValue && batchMaxLevel.HasValue && 
                batchMinLevel.Value > batchMaxLevel.Value)
            {
                await NotificationService.ShowWarningAsync("最低量不能大於最高量");
                return;
            }

            // 套用到所有項目
            foreach (var item in stockDetails)
            {
                if (batchMinLevel.HasValue)
                {
                    item.MinStockLevel = batchMinLevel.Value;
                }
                
                if (batchMaxLevel.HasValue)
                {
                    item.MaxStockLevel = batchMaxLevel.Value;
                }
            }

            // 清空輸入值
            batchMinLevel = null;
            batchMaxLevel = null;
            
            await NotificationService.ShowSuccessAsync($"已批次填入 {stockDetails.Count} 筆警戒線設定");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"批次填入時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理清空按鈕
    /// </summary>
    private async Task HandleClearAll()
    {
        try
        {
            // 清空所有警戒線設定
            foreach (var item in stockDetails)
            {
                item.MinStockLevel = null;
                item.MaxStockLevel = null;
            }

            await NotificationService.ShowSuccessAsync("已清空所有警戒線設定");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"清空時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 關閉 Modal
    /// </summary>
    private async Task CloseModal()
    {
        stockDetails.Clear();
        
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(false);
        }
    }

    // ===== ESC 鍵支援方法 =====

    /// <summary>
    /// 設置 ESC 鍵監聽器，當按下 ESC 鍵時自動關閉 Modal
    /// </summary>
    private async Task SetupEscKeyListenerAsync()
    {
        try
        {
            lock (_escKeyLock)
            {
                // 如果已經設置過，不重複設置
                if (_isEscKeyListenerActive && _escKeyDotNetRef != null)
                {
                    return;
                }
                
                _isEscKeyListenerActive = true;
            }
            
            // 創建新的 DotNetObjectReference
            lock (_escKeyLock)
            {
                _escKeyDotNetRef = DotNetObjectReference.Create(this);
            }
            
            await JSRuntime.InvokeVoidAsync("setupEscKeyListener", _escKeyDotNetRef);
        }
        catch (Exception ex)
        {
            lock (_escKeyLock)
            {
                _isEscKeyListenerActive = false;
            }
            LogError("SetupEscKeyListener", ex);
        }
    }
    
    /// <summary>
    /// 清理 ESC 鍵事件監聽器
    /// </summary>
    private async Task CleanupEscKeyListenerAsync()
    {
        DotNetObjectReference<StockLevelAlertModalComponent>? refToDispose = null;
        
        lock (_escKeyLock)
        {
            // 如果已經清理過，不重複清理
            if (!_isEscKeyListenerActive)
            {
                return;
            }
            
            _isEscKeyListenerActive = false;
            refToDispose = _escKeyDotNetRef;
            _escKeyDotNetRef = null;
        }
        
        try
        {
            // 先調用 JavaScript 清理
            await JSRuntime.InvokeVoidAsync("cleanupEscKeyListener");
            
            // 給 JavaScript 更多時間完成清理
            await Task.Delay(200);
            
            // 在鎖外釋放資源，避免死鎖
            if (refToDispose != null)
            {
                try
                {
                    refToDispose.Dispose();
                }
                catch (ObjectDisposedException)
                {
                    // 對象已被釋放，這是正常的
                }
                catch (Exception ex)
                {
                    // 記錄但不拋出 dispose 錯誤
                    LogError($"DotNetObjectReference dispose warning (safe to ignore): {ex.Message}", ex);
                }
            }
        }
        catch (JSDisconnectedException)
        {
            // Blazor 連接已斷開，這是正常的
        }
        catch (TaskCanceledException)
        {
            // 任務被取消，這是正常的
        }
        catch (Exception ex)
        {
            LogError("CleanupEscKeyListener", ex);
        }
    }
    
    /// <summary>
    /// 處理 ESC 鍵按下事件（由 JavaScript 調用）
    /// </summary>
    [JSInvokable]
    public async Task HandleEscapeKey()
    {
        try
        {
            // 增加額外的安全檢查
            if (_isDisposed)
            {
                return;
            }
            
            if (IsVisible)
            {
                await HandleCancel();
            }
        }
        catch (ObjectDisposedException)
        {
            // 忽略已釋放物件的錯誤
        }
        catch (InvalidOperationException)
        {
            // 忽略無效操作錯誤（通常發生在組件已被釋放時）
        }
        catch (Exception ex)
        {
            // 簡化錯誤處理，避免複雜的 JSInterop 調用
            System.Diagnostics.Debug.WriteLine($"ESC Error: {ex.Message}");
            // 不重新拋出例外，避免影響使用者體驗
        }
    }
    
    /// <summary>
    /// 錯誤日誌記錄
    /// </summary>
    private void LogError(string method, Exception ex)
    {
        // 使用系統日誌而非 console 輸出
        System.Diagnostics.Debug.WriteLine($"[StockLevelAlertModalComponent.{method}] 錯誤：{ex.Message}");
    }

    // ===== 資源清理 =====

    public void Dispose()
    {
        try
        {
            DotNetObjectReference<StockLevelAlertModalComponent>? refToDispose = null;
            
            lock (_escKeyLock)
            {
                // 標記為已釋放
                _isDisposed = true;
                // 標記為已清理，防止重複操作
                _isEscKeyListenerActive = false;
                refToDispose = _escKeyDotNetRef;
                _escKeyDotNetRef = null;
            }
            
            // 同步釋放 DotNetObjectReference（避免重複釋放）
            refToDispose?.Dispose();
            
            // 異步清理事件監聽器，但不等待結果以避免阻塞 Dispose
            _ = Task.Run(async () =>
            {
                try
                {
                    await CleanupEscKeyListenerAsync();
                }
                catch
                {
                    // 忽略清理過程中的錯誤
                }
            });
        }
        catch
        {
            // 忽略清理過程中的錯誤
        }
    }

    // ===== 內部類別 =====

    /// <summary>
    /// 警戒線設定項目
    /// </summary>
    public class StockLevelAlertItem
    {
        public int DetailId { get; set; }
        public string ProductName { get; set; } = string.Empty;
        public string WarehouseName { get; set; } = string.Empty;
        public string WarehouseLocationName { get; set; } = string.Empty;
        public int CurrentStock { get; set; }
        public int? MinStockLevel { get; set; }
        public int? MaxStockLevel { get; set; }
    }
}
