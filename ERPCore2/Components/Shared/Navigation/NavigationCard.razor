@using ERPCore2.Models
@using ERPCore2.Components.Shared.Buttons
@inject NavigationManager Navigation

<div class="card h-100 navigation-card" @onclick="() => HandleCardClick(Item)">
    <div class="card-body d-flex flex-column">
        <div class="d-flex align-items-start mb-3">
            <div class="flex-shrink-0 me-3">
                <div class="icon-wrapper">
                    <i class="@Item.IconClass text-primary fs-2"></i>
                </div>
            </div>
            <div class="flex-grow-1">
                <h5 class="card-title mb-2">@Item.Name</h5>
                <p class="card-text text-muted small mb-2">@Item.Description</p>
                @if (!string.IsNullOrEmpty(Item.Category))
                {
                    <span class="badge bg-secondary">@Item.Category</span>
                }
            </div>
        </div>
        
        @if (ShowRoute && !string.IsNullOrEmpty(Item.Route) && Item.Route != "#")
        {
            <div class="mt-auto">
                <small class="text-muted">
                    <i class="bi bi-link-45deg me-1"></i>
                    @Item.Route
                </small>
            </div>
        }
    </div>
      @if (ShowActionButton && !string.IsNullOrEmpty(Item.Route) && Item.Route != "#")
    {
        <div class="card-footer bg-transparent border-0 pt-0">
            <GenericButtonComponent Variant="ButtonVariant.Primary" Size="ButtonSize.Small" 
                                   Text="前往" IconClass="bi bi-arrow-right me-1" 
                                   OnClick="() => HandleCardClick(Item)" CssClass="w-100"
                                   AdditionalAttributes="@(new Dictionary<string, object> { {"onclick:stopPropagation", "true"} })" />
        </div>
    }
</div>

@code {
    [Parameter] public NavigationItem Item { get; set; } = new();
    [Parameter] public bool ShowRoute { get; set; } = false;
    [Parameter] public bool ShowActionButton { get; set; } = false;
    [Parameter] public EventCallback<NavigationItem> OnCardClick { get; set; }

    private async Task HandleCardClick(NavigationItem item)
    {
        if (OnCardClick.HasDelegate)
        {
            await OnCardClick.InvokeAsync(item);
        }
        else if (!string.IsNullOrEmpty(item.Route) && item.Route != "#")
        {
            Navigation.NavigateTo(item.Route);
        }
    }
}
