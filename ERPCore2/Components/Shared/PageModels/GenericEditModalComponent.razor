@* 泛型Edit Modal組件 *@
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject INotificationService NotificationService
@using System.Reflection
@typeparam TEntity where TEntity : BaseEntity, new()
@typeparam TService

@{
    // 權限檢查 - 如果沒有設定權限，預設拒絕存取
    string requiredPermission = RequiredPermission;
    if (string.IsNullOrWhiteSpace(requiredPermission))
    {
        // 安全起見，如果沒有設定權限，設定為一個不存在的權限以確保拒絕存取
        requiredPermission = "System.RequiredPermissionNotSet";
    }
}

<PagePermissionCheck RequiredPermission="@requiredPermission">

@* Bootstrap Modal *@
@if (IsVisible)
{
    <div class="modal fade show" tabindex="-1" style="display: block; position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 1050; overflow: hidden;">
        <div class="modal-dialog @GetModalSizeClass()" style="position: relative; margin: 1.5rem auto; max-height: calc(100vh - 3rem);">
            <div class="modal-content">
                @* Modal Header *@
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="@GetModalIcon() me-2"></i>
                        @GetModalTitle()
                    </h5>
                    <GenericButtonComponent Type="button" 
                                          CssClass="btn-close" 
                                          OnClick="HandleCancel" 
                                          Title="關閉" />
                </div>

                @* Modal Actions - 按鈕區塊移到頂部 *@
                <div class="modal-footer border-bottom border-top-0 d-flex align-items-center">
                    @* 最左側：自訂操作按鈕（例如：轉入庫、轉沖款等業務流程按鈕） *@
                    @if (CustomActionButtons != null)
                    {
                        <div class="d-flex gap-2 me-auto">
                            @CustomActionButtons
                        </div>
                    }
                    
                    @* 左側：審核狀態顯示 *@
                    <div class="@(CustomActionButtons == null ? "flex-grow-1" : "")">
                        @if (ShowApprovalSection && !IsLoading && Entity != null && Entity.Id > 0 && !string.IsNullOrEmpty(ApprovalStatusText))
                        {
                            <span class="badge bg-info me-2">
                                <i class="fas fa-info-circle me-1"></i>@ApprovalStatusText
                            </span>
                        }
                    </div>
                    
                    @* 中央：審核操作按鈕 *@
                    @if (ShowApprovalSection && !IsLoading && Entity != null && Entity.Id > 0)
                    {
                        @* 有權限者才能看到審核通過/駁回按鈕 *@
                        @if (!IsEntityApproved())
                        {
                            <PermissionCheck Permission="@ApprovalPermission">
                                <div class="d-flex gap-2 me-3">
                                    <GenericButtonComponent Text="通過" 
                                                          Variant="ButtonVariant.Success" 
                                                          OnClick="HandleApprove" 
                                                          IsDisabled="@(IsSubmitting || IsApproving || IsRejecting)"
                                                          IsLoading="@IsApproving" />
                                    <GenericButtonComponent Text="駁回" 
                                                          Variant="ButtonVariant.Danger" 
                                                          OnClick="HandleReject" 
                                                          IsDisabled="@(IsSubmitting || IsApproving || IsRejecting)"
                                                          IsLoading="@IsRejecting" />
                                </div>
                            </PermissionCheck>
                        }
                    }
                    
                    @* 右側：原有的主要操作按鈕 *@
                    <div class="d-flex gap-2">
                        @* 根據審核狀態動態顯示按鈕 *@
                        @if (IsEntityApproved())
                        {
                            @* 已審核狀態：只顯示完成按鈕 *@
                            <GenericButtonComponent Text="完成" 
                                                  Variant="ButtonVariant.Primary" 
                                                  OnClick="HandleApprovedEntityComplete" 
                                                  IsDisabled="@IsSubmitting" />
                        }
                        else
                        {
                            @* 未審核狀態：顯示取消和儲存按鈕 *@
                            <GenericButtonComponent Text="@CancelButtonText" 
                                                  Variant="ButtonVariant.Secondary" 
                                                  OnClick="HandleCancel" 
                                                  IsDisabled="@IsSubmitting" />
                            <GenericButtonComponent Text="@SaveButtonText" 
                                                  Variant="ButtonVariant.Primary" 
                                                  OnClick="HandleSave" 
                                                  IsDisabled="@(IsSubmitting || IsLoading)" 
                                                  IsLoading="@IsSubmitting" />
                        }
                        
                        @* 列印按鈕：無論審核狀態如何都顯示 *@
                        @if (ShowPrintButton)
                        {
                            <GenericButtonComponent Text="@PrintButtonText" 
                                                  Variant="ButtonVariant.Info" 
                                                  IconClass="fas fa-print"
                                                  OnClick="HandlePrint" 
                                                  IsDisabled="@(IsSubmitting || IsLoading)" />
                        }
                    </div>
                </div>

                @* Modal Body *@
                <div class="modal-body edit-modal-body">
                    @if (IsLoading)
                    {
                        <div class="d-flex justify-content-center align-items-center py-4">
                            <div class="spinner-border text-primary me-3" role="status"></div>
                            <span>@LoadingMessage</span>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <h6 class="alert-heading">載入錯誤</h6>
                            @ErrorMessage
                        </div>
                    }
                    else
                    {
                        @* 基本表單 *@
                        @if (UseGenericForm && FormFields.Any())
                        {
                            <div class="edit-form-container">
                                <GenericFormComponent TModel="TEntity"
                                                    Model="@Entity"
                                                    FieldDefinitions="@GetProcessedFormFields()"
                                                    FieldSections="@FormSections"
                                                    ShowFormHeader="false"
                                                    ShowFormButtons="false"
                                                    OnFieldChanged="@HandleFieldChanged" />
                            </div>
                        }

                        @* 自訂表單內容 *@
                        @if (CustomFormContent != null)
                        {
                            <div class="custom-form-content">
                                <CascadingValue Value="@editContext">
                                    @CustomFormContent
                                </CascadingValue>
                            </div>
                        }

                        @* 自訂模組系統 *@
                        @if (CustomModules != null && CustomModules.Any())
                        {
                            @foreach (var module in CustomModules.Where(m => m.IsVisible).OrderBy(m => m.Order))
                            {
                                @if (module.Content != null)
                                {
                                    <div class="@GetModuleCssClass(module) custom-module">
                                        @if (!string.IsNullOrWhiteSpace(module.Title))
                                        {
                                            <h6 class="mb-3">@module.Title</h6>
                                        }
                                        <CascadingValue Value="@editContext">
                                            @module.Content
                                        </CascadingValue>
                                    </div>
                                }
                            }
                        }

                        @* 額外區段 *@
                        @if (AdditionalSections != null)
                        {
                            <div class="additional-sections">
                                <CascadingValue Value="@editContext">
                                    @AdditionalSections
                                </CascadingValue>
                            </div>
                        }
                    }
                </div>

                @* 元數據區段 - 顯示審計資訊 *@
                @if (!IsLoading && Entity != null && Entity.Id > 0)
                {
                    <div class="modal-metadata border-top bg-light px-3 py-2">
                        <div class="text-muted small d-flex flex-wrap gap-3">
                            <span><strong>建立時間：</strong>@Entity.CreatedAt.ToString("yyyy/MM/dd HH:mm:ss")</span>
                            <span><strong>創建者：</strong>@(Entity.CreatedBy ?? "系統")</span>
                            @if (Entity.UpdatedAt.HasValue)
                            {
                                <span><strong>最後更新時間：</strong>@Entity.UpdatedAt.Value.ToString("yyyy/MM/dd HH:mm:ss")</span>
                                <span><strong>最後修改者：</strong>@(Entity.UpdatedBy ?? "系統")</span>
                            }
                        </div>
                    </div>
                }


            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

</PagePermissionCheck>

@code {
    // ===== 自訂模組類別 =====
    
    /// <summary>
    /// 自訂模組類別，用於定義可重複使用的頁面模組
    /// </summary>
    public class CustomModule
    {
        /// <summary>
        /// 模組標題（可選）
        /// </summary>
        public string? Title { get; set; }
        
        /// <summary>
        /// 模組內容
        /// </summary>
        public RenderFragment? Content { get; set; }
        
        /// <summary>
        /// 排序順序，數字越小越靠前
        /// </summary>
        public int Order { get; set; } = 0;
        
        /// <summary>
        /// 自訂 CSS 類別
        /// </summary>
        public string? CssClass { get; set; }
        
        /// <summary>
        /// 模組唯一識別符（可選，用於除錯或特殊處理）
        /// </summary>
        public string? Id { get; set; }
        
        /// <summary>
        /// 是否顯示此模組
        /// </summary>
        public bool IsVisible { get; set; } = true;
    }
    
    // ===== 參數 =====
    
    // 顯示控制
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    
    // 權限檢查參數
    [Parameter] public string RequiredPermission { get; set; } = "";
    
    // 核心參數
    [Parameter] public int? Id { get; set; }
    [Parameter] public TEntity Entity { get; set; } = new();
    [Parameter] public TService Service { get; set; } = default!;
    
    // 頁面基本設定
    [Parameter] public string EntityName { get; set; } = "資料";
    [Parameter] public string EntityNamePlural { get; set; } = "資料";
    [Parameter] public string ModalTitle { get; set; } = string.Empty;
    [Parameter] public ModalSize Size { get; set; } = ModalSize.Desktop;
    
    // 按鈕設定
    [Parameter] public string SaveButtonText { get; set; } = "儲存";
    [Parameter] public string CancelButtonText { get; set; } = "取消";
    [Parameter] public string PrintButtonText { get; set; } = "列印";
    [Parameter] public bool ShowPrintButton { get; set; } = false;
    
    // 自訂操作按鈕區域（顯示在頂部按鈕列的最左側）
    [Parameter] public RenderFragment? CustomActionButtons { get; set; }
    
    // 表單設定
    [Parameter] public bool UseGenericForm { get; set; } = true;
    [Parameter] public List<FormFieldDefinition> FormFields { get; set; } = new();
    [Parameter] public Dictionary<string, string> FormSections { get; set; } = new();
    
    // AutoComplete 智能預填支援
    [Parameter] public Dictionary<string, Func<string, Dictionary<string, object?>>>? AutoCompletePrefillers { get; set; }
    [Parameter] public Dictionary<string, object>? ModalManagers { get; set; }
    
    // AutoComplete 自動搜尋集合支援
    [Parameter] public Dictionary<string, IEnumerable<object>>? AutoCompleteCollections { get; set; }
    [Parameter] public Dictionary<string, string>? AutoCompleteDisplayProperties { get; set; }
    [Parameter] public Dictionary<string, string>? AutoCompleteValueProperties { get; set; }
    [Parameter] public Dictionary<string, int>? AutoCompleteMaxResults { get; set; }
    
    // 自訂內容
    [Parameter] public RenderFragment? CustomFormContent { get; set; }
    [Parameter] public RenderFragment? AdditionalSections { get; set; }
    
    // 自訂模組系統
    [Parameter] public List<CustomModule> CustomModules { get; set; } = new();
    
    // 委派參數 - 資料操作
    [Parameter] public Func<Task<TEntity?>>? DataLoader { get; set; }
    [Parameter] public Func<TEntity, Task<bool>>? SaveHandler { get; set; }
    [Parameter] public Func<Task>? AdditionalDataLoader { get; set; }
    
    // 通用Save相關參數
    [Parameter] public Func<TEntity, Task<bool>>? CustomValidator { get; set; }
    [Parameter] public Func<TEntity, Task>? BeforeSave { get; set; }
    [Parameter] public Func<TEntity, Task>? AfterSave { get; set; }
    [Parameter] public bool UseGenericSave { get; set; } = false;
    [Parameter] public string SaveSuccessMessage { get; set; } = "儲存成功";
    [Parameter] public string SaveFailureMessage { get; set; } = "儲存失敗";
    
    // 委派參數 - 事件處理
    [Parameter] public EventCallback OnSaveSuccess { get; set; }
    [Parameter] public EventCallback OnSaveFailure { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnPrint { get; set; }
    [Parameter] public Func<(string PropertyName, object? Value), Task>? OnFieldChanged { get; set; }
    
    // 訊息設定
    [Parameter] public string LoadingMessage { get; set; } = "載入資料中...";
    
    // 審核功能參數
    [Parameter] public bool ShowApprovalSection { get; set; } = false;
    [Parameter] public string ApprovalPermission { get; set; } = string.Empty;
    [Parameter] public Func<Task<bool>>? OnApprove { get; set; }
    [Parameter] public Func<Task<bool>>? OnReject { get; set; }
    [Parameter] public Func<Task<string?>>? GetApprovalStatus { get; set; }
    
    // ===== 內部狀態 =====
    
    private bool IsLoading { get; set; } = false;
    private bool IsSubmitting { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private int? _lastId = null;
    private bool _lastVisible = false;
    private readonly SemaphoreSlim _loadingSemaphore = new(1, 1);
    private EditContext? editContext;
    
    // 審核狀態
    private bool IsApproving { get; set; } = false;
    private bool IsRejecting { get; set; } = false;
    private string? ApprovalStatusText { get; set; }
    
    // AutoComplete 搜尋關鍵字追蹤
    private readonly Dictionary<string, string> _lastSearchTerms = new();
    
    // ESC 鍵支援
    private DotNetObjectReference<GenericEditModalComponent<TEntity, TService>>? _escKeyDotNetRef;
    private bool _isEscKeyListenerActive = false;
    private bool _isDisposed = false;
    private readonly object _escKeyLock = new object();
    
    // ===== Modal 尺寸列舉 =====
    
    public enum ModalSize
    {
        Small,
        Default,
        Large,
        ExtraLarge,
        Desktop  // 新增桌面尺寸，更大更適合電腦螢幕
    }
    
    // ===== 生命週期方法 =====
    
    protected override Task OnInitializedAsync()
    {
        // 初始化 EditContext
        editContext = new EditContext(Entity);
        return Task.CompletedTask;
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // 只有當 Modal 顯示且 Id 參數真的變化時才重新載入
        if (IsVisible && !_lastVisible)
        {
            // Modal 剛打開
            _lastVisible = true;
            _lastId = Id;
            await LoadAllData();
        }
        else if (IsVisible && _lastId != Id)
        {
            // Modal 已打開但 Id 變更
            _lastId = Id;
            await LoadAllData();
        }
        else if (!IsVisible && _lastVisible)
        {
            // Modal 剛關閉
            _lastVisible = false;
            ResetState();
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible)
        {
            // 只在狀態真正改變時設置監聽器
            bool shouldSetup;
            lock (_escKeyLock)
            {
                shouldSetup = !_isEscKeyListenerActive;
            }
            
            if (shouldSetup)
            {
                await SetupTabNavigationAsync();
                await SetupEscKeyListenerAsync();
            }
        }
        else
        {
            // 只在有監聽器時才清理
            bool shouldCleanup;
            lock (_escKeyLock)
            {
                shouldCleanup = _isEscKeyListenerActive;
            }
            
            if (shouldCleanup)
            {
                await CleanupEscKeyListenerAsync();
            }
        }
    }
    
    // ===== Tab 導航處理 =====
    
    /// <summary>
    /// 設置 Tab 鍵導航，當焦點在按鈕上時自動跳到下一個非按鈕元素
    /// </summary>
    private async Task SetupTabNavigationAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("setupButtonTabNavigation");
        }
        catch (Exception ex)
        {
            LogError("SetupTabNavigation", ex);
        }
    }
    
    /// <summary>
    /// 清理 Tab 鍵導航事件監聽器
    /// </summary>
    private async Task CleanupTabNavigationAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("cleanupButtonTabNavigation");
        }
        catch (Exception ex)
        {
            LogError("CleanupTabNavigation", ex);
        }
    }
    
    // ===== ESC 鍵處理 =====
    
    /// <summary>
    /// 設置 ESC 鍵監聽器，當按下 ESC 鍵時自動關閉 Modal
    /// </summary>
    private async Task SetupEscKeyListenerAsync()
    {
        try
        {
            lock (_escKeyLock)
            {
                // 如果已經設置過，不重複設置
                if (_isEscKeyListenerActive && _escKeyDotNetRef != null)
                {
                    return;
                }
                
                _isEscKeyListenerActive = true;
            }
            
            // 創建新的 DotNetObjectReference（不需要先清理，因為JavaScript現在使用堆疊管理）
            lock (_escKeyLock)
            {
                _escKeyDotNetRef = DotNetObjectReference.Create(this);
            }
            
            await JSRuntime.InvokeVoidAsync("setupEscKeyListener", _escKeyDotNetRef);
        }
        catch (Exception ex)
        {
            lock (_escKeyLock)
            {
                _isEscKeyListenerActive = false;
            }
            LogError("SetupEscKeyListener", ex);
        }
    }
    
    /// <summary>
    /// 清理 ESC 鍵事件監聽器
    /// </summary>
    private async Task CleanupEscKeyListenerAsync()
    {
        DotNetObjectReference<GenericEditModalComponent<TEntity, TService>>? refToDispose = null;
        
        lock (_escKeyLock)
        {
            // 如果已經清理過，不重複清理
            if (!_isEscKeyListenerActive)
            {
                return;
            }
            
            _isEscKeyListenerActive = false;
            refToDispose = _escKeyDotNetRef;
            _escKeyDotNetRef = null;
        }
        
        try
        {
            // 先調用 JavaScript 清理
            await JSRuntime.InvokeVoidAsync("cleanupEscKeyListener");
            
            // 給 JavaScript 更多時間完成清理
            await Task.Delay(200);
            
            // 在鎖外釋放資源，避免死鎖
            if (refToDispose != null)
            {
                try
                {
                    refToDispose.Dispose();
                }
                catch (ObjectDisposedException)
                {
                    // 對象已被釋放，這是正常的
                }
                catch (Exception ex)
                {
                    // 記錄但不拋出 dispose 錯誤
                    LogError($"DotNetObjectReference dispose warning (safe to ignore): {ex.Message}", ex);
                }
            }
        }
        catch (JSDisconnectedException)
        {
            // Blazor 連接已斷開，這是正常的
        }
        catch (TaskCanceledException)
        {
            // 任務被取消，這是正常的
        }
        catch (Exception ex)
        {
            LogError("CleanupEscKeyListener", ex);
        }
    }
    
    /// <summary>
    /// 處理 ESC 鍵按下事件（由 JavaScript 調用）
    /// </summary>
    [JSInvokable]
    public async Task HandleEscapeKey()
    {
        try
        {
            // 增加額外的安全檢查，特別是對於複雜的子組件
            if (_isDisposed)
            {
                return;
            }
            
            if (IsVisible && !IsSubmitting && !IsApproving && !IsRejecting)
            {
                await HandleCancel();
            }
        }
        catch (ObjectDisposedException)
        {
            // 忽略已釋放物件的錯誤
        }
        catch (InvalidOperationException)
        {
            // 忽略無效操作錯誤（通常發生在組件已被釋放時）
        }
        catch (Exception ex)
        {
            // 簡化錯誤處理，避免複雜的 JSInterop 調用
            System.Diagnostics.Debug.WriteLine($"ESC Error: {ex.Message}");
            // 不重新拋出例外，避免影響使用者體驗
        }
    }
    
    // ===== 資料載入方法 =====
    
    private async Task LoadAllData()
    {
        await _loadingSemaphore.WaitAsync();
        try
        {
            IsLoading = true;
            ErrorMessage = string.Empty;
            StateHasChanged();
            
            // 載入額外資料（如選項列表）
            if (AdditionalDataLoader != null)
            {
                await AdditionalDataLoader();
            }
            
            // 載入實體資料
            if (DataLoader != null)
            {
                var loadedEntity = await DataLoader();
                if (loadedEntity != null)
                {
                    Entity = loadedEntity;
                    // 重新建立 EditContext
                    editContext = new EditContext(Entity);
                    
                    // 方案三：主動更新所有 ActionButtons，確保按鈕狀態與實體資料同步
                    UpdateAllActionButtons();
                }
            }
            
            // 載入審核資料
            await LoadApprovalData();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"載入資料時發生錯誤：{ex.Message}";
            LogError("LoadAllData", ex);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
            _loadingSemaphore.Release();
        }
    }
    
    /// <summary>
    /// 載入審核相關資料
    /// </summary>
    private async Task LoadApprovalData()
    {
        try
        {
            if (!ShowApprovalSection || Entity == null || Entity.Id <= 0)
                return;

            // 載入審核狀態
            if (GetApprovalStatus != null)
            {
                ApprovalStatusText = await GetApprovalStatus();
            }
        }
        catch (Exception ex)
        {
            LogError("LoadApprovalData", ex);
            // 不拋出例外，避免影響主要資料載入
        }
    }
    
    /// <summary>
    /// 重新載入實體資料（公共方法，解決組件參數不應在外部設置的問題）
    /// </summary>
    public async Task RefreshEntityAsync()
    {
        if (DataLoader != null && Entity != null && Entity.Id > 0)
        {
            var reloadedEntity = await DataLoader();
            if (reloadedEntity != null)
            {
                Entity = reloadedEntity;
                editContext = new EditContext(Entity);
                await LoadApprovalData(); // 重新載入審核狀態
                StateHasChanged();
            }
        }
    }
    
    // ===== 事件處理方法 =====
    
    private async Task HandleSave()
    {
        if (IsSubmitting) return;
        
        try
        {
            IsSubmitting = true;
            StateHasChanged();
            
            bool success;
            
            if (UseGenericSave)
            {
                success = await GenericSave(Entity);
            }
            else if (SaveHandler != null)
            {
                success = await SaveHandler(Entity);
            }
            else
            {
                await ShowErrorMessage("未設定儲存處理程序");
                return;
            }
            
            if (success)
            {
                await ShowSuccessMessage(SaveSuccessMessage);
                
                if (OnSaveSuccess.HasDelegate)
                {
                    await OnSaveSuccess.InvokeAsync();
                }
                
                await CloseModal();
            }
            else
            {
                if (OnSaveFailure.HasDelegate)
                {
                    await OnSaveFailure.InvokeAsync();
                }
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"儲存時發生錯誤：{ex.Message}");
            LogError("HandleSave", ex);
            
            if (OnSaveFailure.HasDelegate)
            {
                await OnSaveFailure.InvokeAsync();
            }
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }
    
    private async Task HandleCancel()
    {
        try
        {
            // 檢查是否已經被釋放
            if (_isDisposed)
            {
                return;
            }
            
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
            
            await CloseModal();
        }
        catch (ObjectDisposedException)
        {
            // 忽略已釋放物件的錯誤
        }
        catch (InvalidOperationException)
        {
            // 忽略無效操作錯誤
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Cancel Error: {ex.Message}");
            // 不重新拋出例外，避免影響使用者體驗
        }
    }
    
    private async Task HandlePrint()
    {
        if (OnPrint.HasDelegate)
        {
            await OnPrint.InvokeAsync();
        }
    }
    
    private async Task HandleApprove()
    {
        if (OnApprove == null || IsApproving || IsRejecting) return;
        
        try
        {
            IsApproving = true;
            StateHasChanged();
            
            var success = await OnApprove();
            
            if (success)
            {
                await ShowSuccessMessage("審核通過");
                
                // 重新載入實體資料以確保狀態同步
                await RefreshEntityAsync();
            }
            else
            {
                await ShowErrorMessage("審核通過失敗");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"審核通過時發生錯誤：{ex.Message}");
            LogError("HandleApprove", ex);
        }
        finally
        {
            IsApproving = false;
            StateHasChanged();
        }
    }
    
    private async Task HandleReject()
    {
        if (OnReject == null || IsApproving || IsRejecting) return;
        
        try
        {
            IsRejecting = true;
            StateHasChanged();
            
            var success = await OnReject();
            
            if (success)
            {
                await ShowSuccessMessage("審核駁回");
                
                // 重新載入實體資料以確保狀態同步
                await RefreshEntityAsync();
            }
            else
            {
                await ShowErrorMessage("審核駁回失敗");
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"審核駁回時發生錯誤：{ex.Message}");
            LogError("HandleReject", ex);
        }
        finally
        {
            IsRejecting = false;
            StateHasChanged();
        }
    }
    

    
    private async Task CloseModal()
    {
        await CleanupTabNavigationAsync();
        await SetVisible(false);
    }
    
    private async Task SetVisible(bool visible)
    {
        if (IsVisible != visible)
        {
            await IsVisibleChanged.InvokeAsync(visible);
        }
    }
    
    // ===== 輔助方法 =====
    
    /// <summary>
    /// 檢查實體是否已審核通過
    /// </summary>
    private bool IsEntityApproved()
    {
        if (Entity == null) return false;
        
        // 檢查實體是否有 IsApproved 屬性
        var propertyInfo = typeof(TEntity).GetProperty("IsApproved");
        if (propertyInfo != null && propertyInfo.PropertyType == typeof(bool))
        {
            var isApproved = (bool?)propertyInfo.GetValue(Entity);
            return isApproved == true;
        }
        
        return false;
    }
    
    /// <summary>
    /// 處理已審核實體的完成按鈕點擊事件
    /// </summary>
    private async Task HandleApprovedEntityComplete()
    {
        try
        {
            // 觸發 OnSaveSuccess 事件以通知父組件刷新資料
            if (OnSaveSuccess.HasDelegate)
            {
                await OnSaveSuccess.InvokeAsync();
            }
            
            // 關閉 Modal
            await CloseModal();
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"完成操作時發生錯誤：{ex.Message}");
            LogError("HandleApprovedEntityComplete", ex);
        }
    }
    
    private string GetModalTitle()
    {
        if (!string.IsNullOrEmpty(ModalTitle))
            return ModalTitle;
            
        return Id.HasValue ? $"編輯{EntityName}" : $"新增{EntityName}";
    }
    
    private string GetModalIcon()
    {
        return Id.HasValue ? "fas fa-edit" : "fas fa-plus";
    }
    
    private string GetModalSizeClass()
    {
        return Size switch
        {
            ModalSize.Small => "modal-sm",
            ModalSize.Default => "",
            ModalSize.Large => "modal-lg",
            ModalSize.ExtraLarge => "modal-xl",
            ModalSize.Desktop => "modal-xl modal-desktop", // 新增桌面專用樣式
            _ => "modal-xl modal-desktop"
        };
    }
    
    /// <summary>
    /// 取得自訂模組的 CSS 類別
    /// </summary>
    private string GetModuleCssClass(CustomModule module)
    {
        var cssClasses = new List<string>();
        
        // 基本間距類別（Modal 中使用較小的間距）
        if (!string.IsNullOrWhiteSpace(module.Title))
        {
            cssClasses.Add("mb-3");
        }
        else
        {
            cssClasses.Add("mb-2");
        }
        
        // 自訂 CSS 類別
        if (!string.IsNullOrWhiteSpace(module.CssClass))
        {
            cssClasses.Add(module.CssClass);
        }
        
        return string.Join(" ", cssClasses);
    }
    
    private void ResetState()
    {
        IsLoading = false;
        IsSubmitting = false;
        ErrorMessage = string.Empty;
        Entity = new();
        editContext = new EditContext(Entity);
        
        // 重置審核狀態
        IsApproving = false;
        IsRejecting = false;
        ApprovalStatusText = null;
    }
    
    // ===== 通知方法 =====
    
    private async Task ShowSuccessMessage(string message)
    {
        await NotificationService.ShowSuccessAsync(message);
    }
    
    private async Task ShowErrorMessage(string message)
    {
        await NotificationService.ShowErrorAsync(message);
    }
    
    private void LogError(string method, Exception ex)
    {
        // 使用系統日誌而非 console 輸出
        System.Diagnostics.Debug.WriteLine($"[GenericEditModalComponent.{method}] 錯誤：{ex.Message}");
    }
    
    // ===== 通用Save方法 =====
    
    /// <summary>
    /// 通用的保存方法，適用於大部分簡單實體
    /// </summary>
    private async Task<bool> GenericSave(TEntity entity)
    {
        try
        {
            // 自訂驗證
            if (CustomValidator != null && !await CustomValidator(entity))
            {
                return false;
            }
            
            // 儲存前處理
            if (BeforeSave != null)
            {
                await BeforeSave(entity);
            }
            
            // 直接轉型為基礎接口調用方法，避免反射問題
            var genericService = Service as IGenericManagementService<TEntity>;
            if (genericService == null)
            {
                await ShowErrorMessage("服務未實作泛型管理介面");
                return false;
            }
            
            ServiceResult<TEntity> serviceResult;
            
            if (Id.HasValue)
            {
                serviceResult = await genericService.UpdateAsync(entity);
            }
            else
            {
                serviceResult = await genericService.CreateAsync(entity);
            }
            
            var result = new ServiceResult
            {
                IsSuccess = serviceResult.IsSuccess,
                ErrorMessage = serviceResult.ErrorMessage,
                ValidationErrors = serviceResult.ValidationErrors
            };
            
            if (result.IsSuccess)
            {
                // 儲存後處理
                if (AfterSave != null)
                {
                    await AfterSave(entity);
                }
                return true;
            }
            else
            {
                var errorMsg = !string.IsNullOrEmpty(result.ErrorMessage) 
                    ? result.ErrorMessage 
                    : "儲存失敗";
                await ShowErrorMessage($"{SaveFailureMessage}：{errorMsg}");
                return false;
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"{SaveFailureMessage}：{ex.Message}");
            LogError("GenericSave", ex);
            return false;
        }
    }
    
    // ===== 欄位變更處理 =====
    
    private async Task HandleFieldChanged((string PropertyName, object? Value) fieldChange)
    {
        if (OnFieldChanged != null)
        {
            await OnFieldChanged(fieldChange);
        }
    }
    
    // ===== AutoComplete 智能處理 =====
    
    /// <summary>
    /// 處理已處理的表單欄位，包含 AutoComplete 智能功能
    /// </summary>
    private List<FormFieldDefinition> GetProcessedFormFields()
    {
        var processedFields = new List<FormFieldDefinition>();
        
        foreach (var field in FormFields)
        {
            var processedField = new FormFieldDefinition
            {
                PropertyName = field.PropertyName,
                Label = field.Label,
                FieldType = field.FieldType,
                Placeholder = field.Placeholder,
                HelpText = field.HelpText,
                IsRequired = field.IsRequired,
                IsReadOnly = field.IsReadOnly,
                IsDisabled = field.IsDisabled,
                CssClass = field.CssClass,
                ContainerCssClass = field.ContainerCssClass,
                Min = field.Min,
                Max = field.Max,
                Step = field.Step,
                MinLength = field.MinLength,
                MaxLength = field.MaxLength,
                Rows = field.Rows,
                Options = field.Options,
                AutoCompleteDelayMs = field.AutoCompleteDelayMs,
                MinSearchLength = field.MinSearchLength,
                DefaultValue = field.DefaultValue,
                ValidationRules = field.ValidationRules,
                Order = field.Order,
                GroupName = field.GroupName,
                ActionButtons = field.ActionButtons
            };
            
            // 如果是 AutoComplete 欄位，包裝搜尋函式以支援智能預填
            if (field.FieldType == FormFieldType.AutoComplete)
            {
                if (field.SearchFunction != null)
                {
                    // 使用自訂搜尋函式
                    var originalSearchFunction = field.SearchFunction;
                    processedField.SearchFunction = async (searchTerm) =>
                    {
                        // 記錄搜尋關鍵字
                        _lastSearchTerms[field.PropertyName] = searchTerm ?? string.Empty;
                        
                        // 調用原始搜尋函式
                        return await originalSearchFunction(searchTerm ?? string.Empty);
                    };
                }
                else if (AutoCompleteCollections?.ContainsKey(field.PropertyName) == true)
                {
                    // 使用自動搜尋集合
                    processedField.SearchFunction = CreateAutoSearchFunction(field.PropertyName);
                }
                
                // 處理智能按鈕
                if (field.ActionButtons != null && field.ActionButtons.Any())
                {
                    processedField.ActionButtons = ProcessActionButtonsForAutoComplete(field);
                }
            }
            
            processedFields.Add(processedField);
        }
        
        return processedFields;
    }
    
    /// <summary>
    /// 處理 AutoComplete 欄位的操作按鈕，支援智能預填和分離的新增/編輯按鈕
    /// </summary>
    private List<FieldActionButton> ProcessActionButtonsForAutoComplete(FormFieldDefinition field)
    {
        var processedButtons = new List<FieldActionButton>();
        
        foreach (var button in field.ActionButtons!)
        {
            var processedButton = new FieldActionButton
            {
                Text = button.Text,
                Variant = button.Variant,
                Size = button.Size,
                IconClass = button.IconClass,
                Title = button.Title,
                IsDisabled = button.IsDisabled
            };
            
            // 如果是新增按鈕且有預填器，包裝點擊事件以支援智能預填
            if (button.Text == "新增" && 
                AutoCompletePrefillers?.ContainsKey(field.PropertyName) == true &&
                button.OnClick != null)
            {
                var originalOnClick = button.OnClick;
                processedButton.OnClick = async () =>
                {
                    // 取得預填值
                    var searchTerm = _lastSearchTerms.GetValueOrDefault(field.PropertyName, string.Empty);
                    if (!string.IsNullOrWhiteSpace(searchTerm))
                    {
                        var prefilledValues = AutoCompletePrefillers[field.PropertyName](searchTerm);
                        
                        // 如果有對應的 Modal 管理器，使用智能開啟
                        if (ModalManagers?.ContainsKey(field.PropertyName) == true)
                        {
                            var modalManager = ModalManagers[field.PropertyName];
                            
                            // 使用反射調用 OpenModalWithPrefilledValuesAsync
                            var openMethod = modalManager.GetType().GetMethod("OpenModalWithPrefilledValuesAsync");
                            if (openMethod != null)
                            {
                                var task = (Task?)openMethod.Invoke(modalManager, new object[] { null!, prefilledValues });
                                if (task != null)
                                {
                                    await task;
                                    return;
                                }
                            }
                        }
                    }
                    
                    // 否則使用原始點擊事件
                    await originalOnClick();
                };
            }
            // 如果是編輯按鈕，包裝點擊事件以支援智能檢查
            else if (button.Text == "編輯" && button.OnClick != null)
            {
                var originalOnClick = button.OnClick;
                processedButton.OnClick = async () =>
                {
                    // 取得當前輸入值
                    var searchTerm = _lastSearchTerms.GetValueOrDefault(field.PropertyName, string.Empty);
                    
                    // 如果有 Modal 管理器且有 AutoComplete 集合，使用智能檢查
                    if (ModalManagers?.ContainsKey(field.PropertyName) == true && 
                        AutoCompleteCollections?.ContainsKey(field.PropertyName) == true &&
                        !string.IsNullOrWhiteSpace(searchTerm))
                    {
                        var modalManager = ModalManagers[field.PropertyName];
                        var availableEntities = AutoCompleteCollections[field.PropertyName];
                        var displayProperty = AutoCompleteDisplayProperties?.GetValueOrDefault(field.PropertyName, "Name") ?? "Name";
                        
                        // 檢查是否存在匹配的實體
                        var matchedEntity = FindMatchingEntity(availableEntities, displayProperty, searchTerm);
                        if (matchedEntity != null)
                        {
                            // 找到匹配的實體，開啟編輯模式
                            var entityId = GetPropertyValue(matchedEntity, "Id") as int?;
                            if (entityId.HasValue)
                            {
                                var openMethod = modalManager.GetType().GetMethod("OpenModalAsync");
                                if (openMethod != null)
                                {
                                    var task = (Task?)openMethod.Invoke(modalManager, new object[] { entityId.Value });
                                    if (task != null)
                                    {
                                        await task;
                                        return;
                                    }
                                }
                            }
                        }
                        else
                        {
                            // 找不到匹配的實體，顯示警告
                            await ShowErrorMessage($"找不到名稱為「{searchTerm}」的資料，請先新增此資料");
                            return;
                        }
                    }
                    
                    // 否則使用原始點擊事件
                    await originalOnClick();
                };
            }
            else
            {
                processedButton.OnClick = button.OnClick;
            }
            
            processedButtons.Add(processedButton);
        }
        
        return processedButtons;
    }
    
    /// <summary>
    /// 為指定屬性建立自動搜尋函式
    /// </summary>
    private Func<string, Task<List<SelectOption>>> CreateAutoSearchFunction(string propertyName)
    {
        return async (searchTerm) =>
        {
            try
            {
                await Task.Delay(1); // 模擬異步操作
                
                // 記錄搜尋關鍵字
                _lastSearchTerms[propertyName] = searchTerm ?? string.Empty;
                
                if (!AutoCompleteCollections!.ContainsKey(propertyName))
                {
                    return new List<SelectOption>();
                }
                
                var collection = AutoCompleteCollections[propertyName];
                var displayProperty = AutoCompleteDisplayProperties?.GetValueOrDefault(propertyName, "Name") ?? "Name";
                var valueProperty = AutoCompleteValueProperties?.GetValueOrDefault(propertyName, "Id") ?? "Id";
                var maxResults = AutoCompleteMaxResults?.GetValueOrDefault(propertyName, 100) ?? 100;
                
                var filteredResults = collection
                    .Where(item => 
                    {
                        if (string.IsNullOrEmpty(searchTerm))
                            return true;
                            
                        var displayValue = GetPropertyValue(item, displayProperty)?.ToString() ?? string.Empty;
                        return displayValue.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);
                    })
                    .Take(maxResults)
                    .Select(item => new SelectOption
                    {
                        Text = GetPropertyValue(item, displayProperty)?.ToString() ?? string.Empty,
                        Value = GetPropertyValue(item, valueProperty)?.ToString() ?? string.Empty
                    })
                    .ToList();
                
                return filteredResults;
            }
            catch (Exception ex)
            {
                LogError($"AutoSearch_{propertyName}", ex);
                return new List<SelectOption>();
            }
        };
    }
    
    /// <summary>
    /// 在集合中尋找匹配的實體
    /// </summary>
    /// <param name="entities">實體集合</param>
    /// <param name="propertyName">要比較的屬性名稱</param>
    /// <param name="searchValue">搜尋值</param>
    /// <returns>匹配的實體，如果找不到則返回 null</returns>
    private object? FindMatchingEntity(IEnumerable<object> entities, string propertyName, string searchValue)
    {
        try
        {
            return entities.FirstOrDefault(entity =>
            {
                var propertyValue = GetPropertyValue(entity, propertyName)?.ToString();
                return string.Equals(propertyValue, searchValue, StringComparison.OrdinalIgnoreCase);
            });
        }
        catch
        {
            return null;
        }
    }
    
    /// <summary>
    /// 使用反射取得物件屬性值
    /// </summary>
    private object? GetPropertyValue(object obj, string propertyName)
    {
        try
        {
            var property = obj.GetType().GetProperty(propertyName);
            return property?.GetValue(obj);
        }
        catch
        {
            return null;
        }
    }
    
    /// <summary>
    /// 更新所有帶有 ActionButtons 的欄位，確保按鈕狀態與實體資料同步
    /// </summary>
    private void UpdateAllActionButtons()
    {
        try
        {
            // 只有在實體資料存在且有 ModalManagers 和 FormFields 時才執行更新
            if (Entity == null || ModalManagers == null || !ModalManagers.Any() || FormFields == null || !FormFields.Any())
                return;

            // 直接更新原始的 FormFields，而不是 GetProcessedFormFields 的結果
            var fieldsWithButtons = FormFields.Where(f => f.ActionButtons != null && f.ActionButtons.Any()).ToList();
            
            foreach (var field in fieldsWithButtons)
            {
                // 從 ModalManagers 字典中找到對應的管理器並更新按鈕
                if (ModalManagers.ContainsKey(field.PropertyName))
                {
                    var modalManager = ModalManagers[field.PropertyName];
                    
                    // 取得當前實體對應屬性的值
                    var currentValue = GetEntityPropertyValue(Entity, field.PropertyName);
                    var intValue = currentValue as int?;
                    
                    // 使用反射調用 UpdateFieldActionButtons 方法
                    var updateMethod = modalManager?.GetType().GetMethod("UpdateFieldActionButtons");
                    if (updateMethod != null && modalManager != null)
                    {
                        // 直接傳入原始的 FormFields，而不是處理過的
                        updateMethod.Invoke(modalManager, new object?[] { FormFields, field.PropertyName, intValue });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _ = Task.Run(() => LogError("UpdateAllActionButtons", ex));
        }
    }
    
    /// <summary>
    /// 取得實體屬性值的輔助方法
    /// </summary>
    private object? GetEntityPropertyValue(object obj, string propertyName)
    {
        try
        {
            var property = obj.GetType().GetProperty(propertyName);
            return property?.GetValue(obj);
        }
        catch
        {
            return null;
        }
    }
    
    // ===== 清理資源 =====
    
    public void Dispose()
    {
        try
        {
            DotNetObjectReference<GenericEditModalComponent<TEntity, TService>>? refToDispose = null;
            
            lock (_escKeyLock)
            {
                // 標記為已釋放
                _isDisposed = true;
                // 標記為已清理，防止重複操作
                _isEscKeyListenerActive = false;
                refToDispose = _escKeyDotNetRef;
                _escKeyDotNetRef = null;
            }
            
            // 同步釋放 DotNetObjectReference（避免重複釋放）
            refToDispose?.Dispose();
            
            // 異步清理事件監聽器，但不等待結果以避免阻塞 Dispose
            _ = Task.Run(async () =>
            {
                try
                {
                    await CleanupTabNavigationAsync();
                    // 不需要再調用 CleanupEscKeyListenerAsync，因為已經在上面處理了
                }
                catch
                {
                    // 忽略清理過程中的錯誤
                }
            });
        }
        catch
        {
            // 忽略清理過程中的錯誤
        }
        
        _loadingSemaphore?.Dispose();
    }
}
