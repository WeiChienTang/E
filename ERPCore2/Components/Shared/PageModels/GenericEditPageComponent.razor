@* 泛型Edit頁面組件 - 重新設計 *@
@using ERPCore2.Data
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Components.Shared.Forms
@using ERPCore2.Components.Shared.Buttons
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@typeparam TEntity where TEntity : BaseEntity, new()
@typeparam TService

@* 頁面標題 *@
<GenericHeaderComponent Title="@GetPageTitle()"
                       Subtitle="@GetPageSubtitle()"
                       TitleIcon="@GetPageIcon()"
                       HeadingLevel="h1"
                       BreadcrumbItems="@BreadcrumbItems"
                       IsLoading="@IsLoading"
                       LoadingText="載入中..."
                       ShowDivider="true">    
    <ActionButtons>
        <div class="btn-group">
            <button type="button" class="btn btn-success" @onclick="HandleSave" disabled="@(IsLoading || IsSubmitting)">
                @if (IsSubmitting)
                {
                    <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                }
                else
                {
                    <i class="bi-check-circle me-1"></i>
                }
                @SaveButtonText
            </button>              
            <button type="button" class="btn btn-cancel-custom" @onclick="HandleCancel" disabled="@(IsLoading || IsSubmitting)">
                @CancelButtonText
            </button>
        </div>
    </ActionButtons>
</GenericHeaderComponent>

@* 主要內容區域 *@
<div class="row">
    <div class="col-12">
        @if (IsLoading)
        {
            <div class="d-flex justify-content-center align-items-center py-5">
                <div class="spinner-border text-primary me-3" role="status"></div>
                <span>@LoadingMessage</span>
            </div>
        }
        else if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <h6 class="alert-heading">載入錯誤</h6>
                @ErrorMessage
            </div>
        }
        else
        {
            @* 基本表單 *@
            @if (UseGenericForm && FormFields.Any())
            {
                <div class="card mb-4">
                    <GenericHeaderComponent Title="@FormTitle"
                                           Subtitle="@FormSubtitle"
                                           TitleIcon="@FormIcon"
                                           IsCardHeader="true" />
                    <div class="card-body">                        <GenericFormComponent TModel="TEntity"
                                            Model="@Entity"
                                            FieldDefinitions="@FormFields"
                                            FieldSections="@FormSections"
                                            ShowFormHeader="false"
                                            ShowFormButtons="false" />
                    </div>
                </div>
            }            @* 自訂表單內容 *@
            @if (CustomFormContent != null)
            {
                <CascadingValue Value="@editContext">
                    @CustomFormContent
                </CascadingValue>
            }
            
            @* 額外區段 *@
            @if (AdditionalSections != null)
            {
                @AdditionalSections
            }
        }
    </div>
</div>

@code {
    // ===== 參數 =====
    
    // 核心參數
    [Parameter] public int? Id { get; set; }
    [Parameter] public TEntity Entity { get; set; } = new();
    [Parameter] public TService Service { get; set; } = default!;
    
    // 頁面基本設定
    [Parameter] public string EntityName { get; set; } = "資料";
    [Parameter] public string EntityNamePlural { get; set; } = "資料";
    [Parameter] public string PageTitle { get; set; } = string.Empty;
    [Parameter] public string PageSubtitle { get; set; } = string.Empty;
    [Parameter] public string PageIcon { get; set; } = string.Empty;
    [Parameter] public string IndexRoute { get; set; } = "/";
    
    // 導航URL設定
    [Parameter] public string EntityBasePath { get; set; } = "";
    
    // 按鈕設定
    [Parameter] public string SaveButtonText { get; set; } = "儲存";
    [Parameter] public string CancelButtonText { get; set; } = "取消";
    
    // 表單設定
    [Parameter] public string FormTitle { get; set; } = "基本資料";
    [Parameter] public string FormSubtitle { get; set; } = string.Empty;
    [Parameter] public string FormIcon { get; set; } = "info-circle";
    [Parameter] public bool UseGenericForm { get; set; } = true;
    [Parameter] public List<FormFieldDefinition> FormFields { get; set; } = new();
    [Parameter] public Dictionary<string, string> FormSections { get; set; } = new();
    
    // 麵包屑導航
    [Parameter] public List<GenericHeaderComponent.BreadcrumbItem> BreadcrumbItems { get; set; } = new();
    
    // 自訂內容
    [Parameter] public RenderFragment? CustomFormContent { get; set; }
    [Parameter] public RenderFragment? AdditionalSections { get; set; }
    
    // 委派參數 - 資料操作
    [Parameter] public Func<Task<TEntity?>>? DataLoader { get; set; }
    [Parameter] public Func<TEntity, Task<bool>>? SaveHandler { get; set; }
    [Parameter] public Func<Task>? AdditionalDataLoader { get; set; }
      // 新增：通用Save相關參數
    [Parameter] public Func<TEntity, Task<bool>>? CustomValidator { get; set; }
    [Parameter] public Func<TEntity, Task>? BeforeSave { get; set; }
    [Parameter] public Func<TEntity, Task>? AfterSave { get; set; }
    [Parameter] public bool UseGenericSave { get; set; } = false;
    [Parameter] public string SaveSuccessMessage { get; set; } = "儲存成功";
    [Parameter] public string SaveFailureMessage { get; set; } = "儲存失敗";
      // 委派參數 - 事件處理
    [Parameter] public Func<Task>? OnSaveSuccess { get; set; }
    [Parameter] public Func<Task>? OnSaveFailure { get; set; }
    [Parameter] public Func<Task>? OnCancel { get; set; }
    
    // 訊息設定
    [Parameter] public string LoadingMessage { get; set; } = "載入資料中...";
    
    // ===== 內部狀態 =====
    
    private bool IsLoading { get; set; } = true;
    private bool IsSubmitting { get; set; } = false;
    private string ErrorMessage { get; set; } = string.Empty;
    private bool _hasInitialized = false;
    private int? _lastId = null; // 追蹤上次的 Id 值
    private readonly SemaphoreSlim _loadingSemaphore = new(1, 1);
    private EditContext? editContext;
    
    // ===== 生命週期方法 =====
    
    protected override async Task OnInitializedAsync()
    {        
        // 初始化 EditContext
        editContext = new EditContext(Entity);
        
        if (!_hasInitialized)
        {
            _lastId = Id; // 先記錄初始 Id
            await LoadAllData();
            _hasInitialized = true;
        }
    }
      protected override async Task OnParametersSetAsync()
    {
        // 只有當 Id 參數真的變化時才重新載入
        if (_hasInitialized && _lastId != Id)
        {
            _lastId = Id; // 更新記錄的 Id
            await LoadAllData();
        }
    }
    
    // ===== 資料載入方法 =====
    
    private async Task LoadAllData()
    {
        await _loadingSemaphore.WaitAsync();
        try
        {
            IsLoading = true;
            ErrorMessage = string.Empty;
            StateHasChanged();
            
            // 載入額外資料（如選項列表）
            if (AdditionalDataLoader != null)
            {
                await AdditionalDataLoader();
            }
              // 載入實體資料
            if (DataLoader != null)
            {
                var loadedEntity = await DataLoader();
                if (loadedEntity != null)
                {
                    Entity = loadedEntity;
                    // 更新 EditContext
                    editContext = new EditContext(Entity);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"載入資料時發生錯誤：{ex.Message}";
            await LogError("LoadAllData", ex);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
            _loadingSemaphore.Release();
        }
    }
    
    // ===== 事件處理方法 =====
      private async Task HandleSave()
    {
        if (IsSubmitting) return;
        
        try
        {
            IsSubmitting = true;
            StateHasChanged();
            
            bool success;
            
            if (UseGenericSave)
            {
                success = await GenericSave(Entity);
            }
            else if (SaveHandler != null)
            {
                // 執行通用儲存前處理
                if (BeforeSave != null)
                {
                    await BeforeSave(Entity);
                }
                
                // 自訂驗證
                if (CustomValidator != null)
                {
                    var isValid = await CustomValidator(Entity);
                    if (!isValid)
                    {
                        await ShowErrorMessage("驗證失敗");
                        return;
                    }
                }
                
                success = await SaveHandler(Entity);
                
                // 執行通用儲存後處理
                if (success && AfterSave != null)
                {
                    await AfterSave(Entity);
                }
            }
            else
            {
                await ShowErrorMessage("沒有設定儲存處理器");
                return;
            }
            
            if (success)
            {
                await ShowSuccessMessage(SaveSuccessMessage);
                
                if (OnSaveSuccess != null)
                {
                    await OnSaveSuccess();
                }
                else
                {
                    // 預設行為：導航回索引頁
                    Navigation.NavigateTo(IndexRoute);
                }
            }
            else
            {
                if (!UseGenericSave) // GenericSave 已經顯示過錯誤訊息了
                {
                    await ShowErrorMessage(SaveFailureMessage);
                }
                
                if (OnSaveFailure != null)
                {
                    await OnSaveFailure();
                }
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"儲存時發生錯誤：{ex.Message}");
            await LogError("HandleSave", ex);
            
            if (OnSaveFailure != null)
            {
                await OnSaveFailure();
            }
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }
    
    private async Task HandleCancel()
    {
        if (OnCancel != null)
        {
            await OnCancel();
        }
        else
        {
            // 預設行為：導航回索引頁
            Navigation.NavigateTo(IndexRoute);
        }    }
    
    // ===== 輔助方法 =====
    
    private string GetPageTitle()
    {
        if (!string.IsNullOrEmpty(PageTitle))
            return PageTitle;
            
        return Id.HasValue ? $"編輯{EntityName}" : $"新增{EntityName}";
    }
    
    private string GetPageSubtitle()
    {
        if (!string.IsNullOrEmpty(PageSubtitle))
            return PageSubtitle;
            
        return Id.HasValue ? $"修改{EntityName}資料" : $"建立新的{EntityName}資料";
    }
    
    private string GetPageIcon()
    {
        if (!string.IsNullOrEmpty(PageIcon))
            return PageIcon;
            
        return Id.HasValue ? "pencil-square" : "plus-circle";    }
    
    // ===== 通知方法 =====
    
    private async Task ShowSuccessMessage(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
    
    private async Task ShowErrorMessage(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
    
    private async Task LogError(string method, Exception ex)
    {
        await JSRuntime.InvokeVoidAsync("console.error", $"[{method}] 錯誤：", ex.Message);    }
      // ===== 通用Save方法 =====
    
    /// <summary>
    /// 通用的保存方法，適用於大部分簡單實體
    /// </summary>
    private async Task<bool> GenericSave(TEntity entity)
    {
        try
        {
            // 自訂驗證
            if (CustomValidator != null && !await CustomValidator(entity))
            {
                return false; // CustomValidator 應該已經顯示錯誤訊息
            }
            
            // 儲存前處理
            if (BeforeSave != null)
            {
                await BeforeSave(entity);
            }
            
            // 使用反射呼叫Service的CreateAsync或UpdateAsync
            var serviceType = typeof(TService);
            ServiceResult result;
            
            if (Id.HasValue)
            {
                // 更新
                var updateMethod = serviceType.GetMethod("UpdateAsync");
                if (updateMethod != null)
                {
                    var task = (Task<ServiceResult>)updateMethod.Invoke(Service, new object[] { entity })!;
                    result = await task;
                }
                else
                {
                    await ShowErrorMessage("Service中找不到UpdateAsync方法");
                    return false;
                }
            }
            else
            {
                // 新增
                var createMethod = serviceType.GetMethod("CreateAsync");
                if (createMethod != null)
                {
                    var task = (Task<ServiceResult>)createMethod.Invoke(Service, new object[] { entity })!;
                    result = await task;
                }
                else
                {
                    await ShowErrorMessage("Service中找不到CreateAsync方法");
                    return false;
                }
            }
            
            if (result.IsSuccess)
            {
                // 儲存後處理
                if (AfterSave != null)
                {
                    await AfterSave(entity);
                }
                
                return true;
            }
            else
            {
                await ShowErrorMessage($"{SaveFailureMessage}：{result.ErrorMessage}");
                return false;
            }
        }
        catch (Exception ex)
        {
            await ShowErrorMessage($"{SaveFailureMessage}：{ex.Message}");
            await LogError("GenericSave", ex);
            return false;
        }
    }
      // ===== 清理資源 =====
    
    public void Dispose()
    {
        _loadingSemaphore?.Dispose();
    }
}
