@* 泛型Index頁面基底組件 *@
@using ERPCore2.Data
@using ERPCore2.Data.Entities
@using ERPCore2.Components.Shared.Forms
@using ERPCore2.Components.Shared.Tables
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.Cards
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Models
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@typeparam TEntity where TEntity : BaseEntity
@typeparam TService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject INotificationService NotificationService

@* 頁面標題 *@
<GenericHeaderComponent Title="@PageTitle"
                       Subtitle="@PageSubtitle"
                       HeadingLevel="h1"
                       BreadcrumbItems="@BreadcrumbItems"
                       IsLoading="@IsLoading"
                       LoadingText="載入中..."
                       ShowDivider="true">
    <ActionButtons>
        @if (ShowDefaultActions && CustomActionButtons == null)
        {
            <IndexActionButtonsComponent 
                AddButtonText="@GetAddButtonText()"
                AddButtonTitle="@GetAddButtonTitle()"
                OnAddClick="@HandleAddClick"
                OnRefreshClick="@RefreshData"
                IsLoading="@IsLoading"
                LoadingOnRefresh="true" />
        }
        else if (CustomActionButtons != null)
        {
            @CustomActionButtons
        }
    </ActionButtons>
</GenericHeaderComponent>

@* 統計卡片區域 - 條件顯示 *@
@if (ShowStatisticsCards && StatisticsCardConfigs != null && StatisticsCardConfigs.Any())
{
    <div class="row mb-4">
        <div class="col-12">
            <ERPCore2.Components.Shared.Cards.GenericStatisticsCards CardConfigs="@StatisticsCardConfigs" 
                                   Statistics="@StatisticsData" />
        </div>
    </div>
}

@* 主要內容區域 *@
<div class="row">
    <div class="col-12">
        <div class="card section-card">
            <div class="card-header section-header-primary">                
                <h5 class="card-title mb-0">
                    <i class="bi bi-search me-2"></i>
                    @GetSearchSectionTitle()
                </h5>
            </div>
            <div class="card-body">                
                @* 搜尋篩選區域 *@
                <GenericSearchFilterComponent TModel="SearchFilterModel"
                                             FilterDefinitions="@FilterDefinitions"
                                             FilterModel="@SearchModel"
                                             OnSearch="@HandleSearch"
                                             OnFilterChanged="@HandleFilterChanged"
                                             AutoSearch="@AutoSearch"
                                             ShowSearchButton="@ShowSearchButton"
                                             SearchDelayMs="@SearchDelayMs" />

                @* 列表表格 *@
                <div class="mt-4">                    
                    <GenericTableComponent TItem="TEntity"
                                          Items="@PagedItems"
                                          ColumnDefinitions="@ColumnDefinitions"
                                          ShowActions="@ShowActions"
                                          ActionsTemplate="@GetFinalActionsTemplate()"
                                          EnableRowClick="@EnableRowClick"
                                          OnRowClick="@HandleRowClick"
                                          EnableSorting="@EnableSorting"
                                          IsStriped="@IsStriped"
                                          IsHoverable="@IsHoverable"
                                          IsBordered="@IsBordered"
                                          Size="@TableSize"
                                          EmptyMessage="@GetEmptyMessage()"
                                          ActionsHeader="@ActionsHeader"
                                          EnablePagination="@EnablePagination"
                                          CurrentPage="@CurrentPage"
                                          PageSize="@PageSize"
                                          TotalItems="@TotalItems"
                                          OnPageChanged="@HandlePageChanged"
                                          OnPageSizeChanged="@HandlePageSizeChanged"
                                          ShowPageSizeSelector="@ShowPageSizeSelector">
                    </GenericTableComponent>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // ===== 參數 =====    // 頁面基本設定
    [Parameter] public string PageTitle { get; set; } = "資料管理";
    [Parameter] public string PageSubtitle { get; set; } = "管理資料";
    [Parameter] public string AddButtonText { get; set; } = "";
    [Parameter] public string AddButtonTitle { get; set; } = "";
    [Parameter] public string SearchSectionTitle { get; set; } = "";
    [Parameter] public string EmptyMessage { get; set; } = "";
    [Parameter] public string ActionsHeader { get; set; } = "操作";
    
    // 動作按鈕顯示控制
    [Parameter] public bool ShowDefaultActions { get; set; } = true;
    [Parameter] public RenderFragment? CustomActionButtons { get; set; }
    
    // 麵包屑導航
    [Parameter] public List<GenericHeaderComponent.BreadcrumbItem> BreadcrumbItems { get; set; } = new();
    
    // 統計卡片相關參數
    [Parameter] public bool ShowStatisticsCards { get; set; } = false;
    [Parameter] public List<StatisticsCardConfig>? StatisticsCardConfigs { get; set; }
    [Parameter] public Dictionary<string, object> StatisticsData { get; set; } = new();
    [Parameter] public Func<Task<Dictionary<string, object>>>? StatisticsDataLoader { get; set; }
    
    // 導航URL設定 - 新增的參數
    [Parameter] public string EntityBasePath { get; set; } = "";
    [Parameter] public string CreateUrl { get; set; } = "";
    [Parameter] public string DetailUrl { get; set; } = "";
    [Parameter] public string EditUrl { get; set; } = "";
    
    // 服務和資料相關
    [Parameter] public TService Service { get; set; } = default!;
    [Parameter] public Func<Task<List<TEntity>>> DataLoader { get; set; } = default!;
    [Parameter] public Func<Task> InitializeBasicData { get; set; } = default!;
    
    // 篩選和表格設定
    [Parameter] public List<SearchFilterDefinition> FilterDefinitions { get; set; } = new();
    [Parameter] public List<TableColumnDefinition> ColumnDefinitions { get; set; } = new();
    [Parameter] public Func<SearchFilterModel, IQueryable<TEntity>, IQueryable<TEntity>> FilterApplier { get; set; } = default!;
    
    // 搜尋組件設定
    [Parameter] public bool AutoSearch { get; set; } = true;
    [Parameter] public bool ShowSearchButton { get; set; } = true;
    [Parameter] public int SearchDelayMs { get; set; } = 500;
    
    // 表格組件設定
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool EnableRowClick { get; set; } = true;
    [Parameter] public bool EnableSorting { get; set; } = false;
    [Parameter] public bool IsStriped { get; set; } = true;
    [Parameter] public bool IsHoverable { get; set; } = true;
    [Parameter] public bool IsBordered { get; set; } = false;
    [Parameter] public TableSize TableSize { get; set; } = TableSize.Normal;
    [Parameter] public bool EnablePagination { get; set; } = true;
    [Parameter] public bool ShowPageSizeSelector { get; set; } = true;
    [Parameter] public int DefaultPageSize { get; set; } = 20;
    
    // === 通用刪除功能相關參數 ===
    [Parameter] public string EntityName { get; set; } = "資料";
    [Parameter] public Func<TEntity, string> GetEntityDisplayName { get; set; } = entity => entity.Id.ToString();
    [Parameter] public string DeleteSuccessMessage { get; set; } = "";
    [Parameter] public string DeleteConfirmMessage { get; set; } = "";
    [Parameter] public bool EnableStandardActions { get; set; } = true;
    [Parameter] public bool ShowViewButton { get; set; } = true;
    [Parameter] public bool ShowEditButton { get; set; } = true;
    [Parameter] public bool ShowDeleteButton { get; set; } = true;
    [Parameter] public RenderFragment<TEntity>? CustomActionsTemplate { get; set; }
    
    // 事件處理 - 修改為內建導航
    [Parameter] public EventCallback OnAddClick { get; set; }
    [Parameter] public EventCallback<TEntity> OnRowClick { get; set; }
    [Parameter] public RenderFragment<TEntity>? ActionsTemplate { get; set; }

    // ===== 內建導航方法 =====
    
    private async Task HandleAddClick()
    {
        // 先執行外部提供的事件處理
        if (OnAddClick.HasDelegate)
        {
            await OnAddClick.InvokeAsync();
        }
        else
        {
            // 使用內建導航邏輯
            var url = !string.IsNullOrEmpty(CreateUrl) ? CreateUrl : $"{EntityBasePath}/edit";
            Navigation.NavigateTo(url);
        }
    }
    
    private async Task HandleRowClick(TEntity entity)
    {
        // 先執行外部提供的事件處理
        if (OnRowClick.HasDelegate)
        {
            await OnRowClick.InvokeAsync(entity);
        }
        else
        {
            // 使用內建導航邏輯
            var url = !string.IsNullOrEmpty(DetailUrl) ? DetailUrl.Replace("{id}", entity.Id.ToString()) : $"{EntityBasePath}/detail/{entity.Id}";
            Navigation.NavigateTo(url);
        }
    }
      // 公開方法供外部調用
    public void NavigateToEdit(TEntity entity)
    {
        var url = !string.IsNullOrEmpty(EditUrl) ? EditUrl.Replace("{id}", entity.Id.ToString()) : $"{EntityBasePath}/edit/{entity.Id}";
        Navigation.NavigateTo(url);
    }
    
    public void NavigateToDetail(TEntity entity)
    {
        var url = !string.IsNullOrEmpty(DetailUrl) ? DetailUrl.Replace("{id}", entity.Id.ToString()) : $"{EntityBasePath}/detail/{entity.Id}";
        Navigation.NavigateTo(url);
    }
    
    public void NavigateToCreate()
    {
        var url = !string.IsNullOrEmpty(CreateUrl) ? CreateUrl : $"{EntityBasePath}/edit";
        Navigation.NavigateTo(url);
    }
    
    // ===== 通用刪除操作 =====
      /// <summary>
    /// 通用刪除方法
    /// </summary>
    public async Task DeleteEntityAsync(TEntity entity)
    {
        var displayName = GetEntityDisplayName(entity);
        var confirmMessage = GetDeleteConfirmMessage(displayName);
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", confirmMessage);
        
        if (confirmed)
        {
            try
            {
                // 使用反射調用服務的 DeleteAsync 方法
                var deleteMethod = Service?.GetType().GetMethod("DeleteAsync", new[] { typeof(int) });
                if (deleteMethod != null)
                {
                    var task = (Task)deleteMethod.Invoke(Service, new object[] { entity.Id })!;
                    await task;
                    
                    // 獲取結果
                    var resultProperty = task.GetType().GetProperty("Result");
                    if (resultProperty != null)
                    {
                        var result = resultProperty.GetValue(task);
                        var isSuccessProperty = result?.GetType().GetProperty("IsSuccess");
                        var errorMessageProperty = result?.GetType().GetProperty("ErrorMessage");
                        
                        if (isSuccessProperty != null)
                        {
                            var isSuccess = (bool)isSuccessProperty.GetValue(result)!;                            if (isSuccess)
                            {
                                var successMessage = GetDeleteSuccessMessage();
                                await NotificationService.ShowSuccessAsync(successMessage);
                                await Refresh();
                            }
                            else
                            {
                                var errorMessage = errorMessageProperty?.GetValue(result)?.ToString() ?? "刪除失敗";
                                await NotificationService.ShowErrorAsync($"刪除失敗：{errorMessage}");
                            }
                        }
                    }                }                else
                {
                    await NotificationService.ShowErrorAsync("找不到刪除方法");
                }
            }            catch (Exception ex)
            {
                await NotificationService.ShowErrorAsync($"刪除時發生錯誤：{ex.Message}");
            }
        }
    }
    
    /// <summary>
    /// 取得標準操作按鈕範本
    /// </summary>
    public RenderFragment<TEntity> GetStandardActionsTemplate()
    {
        return entity => 
            @<div class="btn-group btn-group-sm">
                @if (ShowViewButton)
                {
                    <button class="btn btn-outline-primary" @onclick="() => NavigateToDetail(entity)" @onclick:stopPropagation="true" title="檢視">
                        <i class="bi bi-eye"></i>
                    </button>
                }
                @if (ShowEditButton)
                {
                    <button class="btn btn-outline-warning" @onclick="() => NavigateToEdit(entity)" @onclick:stopPropagation="true" title="編輯">
                        <i class="bi bi-pencil"></i>
                    </button>
                }
                @if (CustomActionsTemplate != null)
                {
                    @CustomActionsTemplate(entity)
                }
                @if (ShowDeleteButton)
                {
                    <button class="btn btn-outline-danger" @onclick="@(async () => await DeleteEntityAsync(entity))" @onclick:stopPropagation="true" title="刪除">
                        <i class="bi bi-trash"></i>
                    </button>
                }
            </div>;
    }
    
    /// <summary>
    /// 取得最終的操作範本
    /// </summary>
    private RenderFragment<TEntity> GetFinalActionsTemplate()
    {
        if (ActionsTemplate != null)
        {
            return ActionsTemplate;
        }
        else if (EnableStandardActions)
        {
            return GetStandardActionsTemplate();
        }
        else
        {
            return entity => @<div></div>;
        }
    }

    // ===== 智能文字產生方法 =====
    
    /// <summary>
    /// 取得新增按鈕文字，優先使用自訂值，否則根據 EntityName 自動產生
    /// </summary>
    private string GetAddButtonText()
    {
        return !string.IsNullOrWhiteSpace(AddButtonText) ? AddButtonText : $"新增{EntityName}";
    }
    
    /// <summary>
    /// 取得新增按鈕標題，優先使用自訂值，否則根據 EntityName 自動產生
    /// </summary>
    private string GetAddButtonTitle()
    {
        return !string.IsNullOrWhiteSpace(AddButtonTitle) ? AddButtonTitle : $"新增{EntityName}資料";
    }
    
    /// <summary>
    /// 取得搜尋區域標題，優先使用自訂值，否則根據 EntityName 自動產生
    /// </summary>
    private string GetSearchSectionTitle()
    {
        return !string.IsNullOrWhiteSpace(SearchSectionTitle) ? SearchSectionTitle : $"{EntityName}搜尋與管理";
    }
    
    /// <summary>
    /// 取得空資料訊息，優先使用自訂值，否則根據 EntityName 自動產生
    /// </summary>
    private string GetEmptyMessage()
    {
        return !string.IsNullOrWhiteSpace(EmptyMessage) ? EmptyMessage : $"沒有找到符合條件的{EntityName}資料";
    }
    
    /// <summary>
    /// 取得刪除成功訊息，優先使用自訂值，否則根據 EntityName 自動產生
    /// </summary>
    private string GetDeleteSuccessMessage()
    {
        return !string.IsNullOrWhiteSpace(DeleteSuccessMessage) ? DeleteSuccessMessage : $"{EntityName}刪除成功";
    }
    
    /// <summary>
    /// 取得刪除確認訊息，優先使用自訂值，否則根據 EntityName 自動產生
    /// </summary>
    private string GetDeleteConfirmMessage(string displayName)
    {
        if (!string.IsNullOrWhiteSpace(DeleteConfirmMessage))
        {
            return string.Format(DeleteConfirmMessage, displayName);
        }
        return $"確定要刪除{EntityName}「{displayName}」嗎？";
    }

    // ...existing code...
    // ===== 內部狀態 =====
    
    // 資料來源
    private List<TEntity> allItems = new();
    private List<TEntity> filteredItems = new();
    
    // 篩選相關
    private SearchFilterModel searchModel = new();
    
    // 分頁相關
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalItems = 0;
    
    // 狀態管理
    private bool isLoading = true;
    
    // ===== 公開屬性 (供外部存取) =====
    public SearchFilterModel SearchModel => searchModel;
    public List<TEntity> PagedItems => GetPagedItems();
    public int CurrentPage => currentPage;
    public int PageSize => pageSize;
    public int TotalItems => totalItems;
    public bool IsLoading => isLoading;
    
    // ===== 生命週期 =====
    
    protected override async Task OnInitializedAsync()
    {
        pageSize = DefaultPageSize;
        await InitializePageAsync();
    }
    
    // ===== 初始化方法 =====
    
    private async Task InitializePageAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            // 初始化基礎資料 (如選項清單等)
            if (InitializeBasicData != null)
            {
                await InitializeBasicData();
            }
            
            // 載入統計資料
            if (ShowStatisticsCards && StatisticsDataLoader != null)
            {
                StatisticsData = await StatisticsDataLoader();
            }
            
            // 載入主要資料
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            // 錯誤處理 - 可以透過參數提供自定義錯誤處理
            Console.Error.WriteLine($"初始化頁面時發生錯誤: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task LoadDataAsync()
    {
        try
        {
            if (DataLoader != null)
            {
                allItems = await DataLoader();
                await ApplyFilters();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"載入資料失敗: {ex.Message}");
            allItems = new List<TEntity>();
            filteredItems = new List<TEntity>();
        }
    }
    
    // ===== 篩選和分頁邏輯 =====
    
    private async Task ApplyFilters()
    {
        var query = allItems.AsQueryable();
        
        // 應用自定義篩選邏輯
        if (FilterApplier != null)
        {
            query = FilterApplier(searchModel, query);
        }
        
        filteredItems = query.ToList();
        totalItems = filteredItems.Count;
        
        // 重置分頁到第一頁
        currentPage = 1;
        
        // 自動更新統計資料
        if (ShowStatisticsCards && StatisticsCardConfigs != null && StatisticsCardConfigs.Any())
        {
            UpdateStatisticsData();
        }
        
        await Task.CompletedTask;
    }
    
    /// <summary>
    /// 自動更新統計資料
    /// </summary>
    private void UpdateStatisticsData()
    {
        try
        {
            StatisticsData = StatisticsData ?? new Dictionary<string, object>();
            
            // 自動計算基本統計
            StatisticsData["TotalItems"] = filteredItems.Count;
            StatisticsData["TotalOrders"] = filteredItems.Count;
            
            // 如果是採購訂單，計算特定統計
            if (typeof(TEntity).Name == "PurchaseOrder")
            {
                var orders = filteredItems.Cast<dynamic>().ToList();
                
                StatisticsData["PendingOrders"] = orders.Count(o => 
                    o.OrderStatus.ToString() == "Approved" || 
                    o.OrderStatus.ToString() == "PartialReceived");
                    
                StatisticsData["CompletedOrders"] = orders.Count(o => 
                    o.OrderStatus.ToString() == "Completed");
                    
                StatisticsData["TotalAmount"] = orders.Sum(o => (decimal)o.TotalAmount);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"更新統計資料失敗: {ex.Message}");
        }
    }
    
    private List<TEntity> GetPagedItems()
    {
        // 確保當前頁面有效
        var maxPage = totalItems > 0 ? (int)Math.Ceiling((double)totalItems / pageSize) : 1;
        if (currentPage > maxPage)
        {
            currentPage = Math.Max(1, maxPage);
        }
        
        // 計算分頁資料
        return filteredItems
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }
    
    // ===== 事件處理方法 =====
    
    private async Task HandleSearch(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        await ApplyFilters();
        StateHasChanged();
    }
    
    private async Task HandleFilterChanged(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        // 如果啟用自動搜尋，這裡不需要立即執行搜尋
        await Task.CompletedTask;
    }
    
    private async Task HandlePageChanged(int newPage)
    {
        currentPage = newPage;
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private async Task HandlePageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1; // 重置到第一頁
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private async Task RefreshData()
    {
        // 重新載入統計資料
        if (ShowStatisticsCards && StatisticsDataLoader != null)
        {
            StatisticsData = await StatisticsDataLoader();
        }
        
        await LoadDataAsync();
        StateHasChanged();
    }
    
    // ===== 公開方法 (供外部調用) =====
    
    public async Task Refresh()
    {
        await RefreshData();
    }
    
    public async Task ReloadData()
    {
        await LoadDataAsync();
    }
    
    public void ResetFilters()
    {
        searchModel = new SearchFilterModel();
        _ = ApplyFilters();
        StateHasChanged();
    }
}
