@typeparam TValue
@typeparam TEntity
@inject IJSRuntime JSRuntime
@* 支援資料庫載入的下拉選單組件 *@

<div class="mb-3">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id" class="form-label">
            @Label
            @if (IsRequired)
            {
                <span class="text-danger">*</span>
            }
        </label>
    }
    
    <select id="@Id" class="form-select @CssClass" 
            value="@Value?.ToString()" 
            @onchange="OnValueChanged"
            disabled="@(IsDisabled || isLoading)">
        @if (ShowEmptyOption)
        {
            <option value="">@EmptyOptionText</option>
        }
        @if (isLoading)
        {
            <option disabled>載入中...</option>
        }
        else
        {
            @foreach (var item in items)
            {
                <option value="@GetItemValue(item)">@GetItemText(item)</option>
            }
        }
    </select>
    
    @if (isLoading)
    {
        <div class="form-text text-muted">
            <i class="spinner-border spinner-border-sm me-1"></i>
            載入資料中...
        </div>
    }
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="form-text">@HelpText</div>
    }
</div>

@code {
    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public TValue? Value { get; set; }
    [Parameter] public EventCallback<TValue?> ValueChanged { get; set; }
    [Parameter] public Func<TEntity, string> GetItemText { get; set; } = item => item?.ToString() ?? "";
    [Parameter] public Func<TEntity, object> GetItemValue { get; set; } = item => item!;
    [Parameter] public bool IsRequired { get; set; } = false;
    [Parameter] public bool IsDisabled { get; set; } = false;
    [Parameter] public bool ShowEmptyOption { get; set; } = true;
    [Parameter] public string EmptyOptionText { get; set; } = "請選擇...";
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public string HelpText { get; set; } = string.Empty;
    
    // 資料庫載入相關參數
    [Parameter] public Func<Task<List<TEntity>>> LoadDataFunc { get; set; } = default!;
    [Parameter] public bool AutoLoad { get; set; } = true;
    [Parameter] public bool RefreshOnParametersSet { get; set; } = false;
    
    private List<TEntity> items = new();
    private bool isLoading = false;
    private bool hasLoaded = false;
    
    protected override async Task OnInitializedAsync()
    {
        if (AutoLoad && !hasLoaded)
        {
            await LoadDataAsync();
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (RefreshOnParametersSet || (!hasLoaded && AutoLoad))
        {
            await LoadDataAsync();
        }
    }
    
    public async Task LoadDataAsync()
    {
        if (LoadDataFunc == null) return;
        
        try
        {
            isLoading = true;
            StateHasChanged();
            
            items = await LoadDataFunc();
            hasLoaded = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入下拉選單資料時發生錯誤: {ex.Message}");
            items = new List<TEntity>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    public async Task RefreshDataAsync()
    {
        hasLoaded = false;
        await LoadDataAsync();
    }
    
    private async Task OnValueChanged(ChangeEventArgs e)
    {
        var oldValue = Value;
        var stringValue = e.Value?.ToString();
        
        if (string.IsNullOrEmpty(stringValue))
        {
            Value = default(TValue?);
        }
        else
        {
            // 嘗試轉換為適當的類型
            var targetType = typeof(TValue);
            var nullableType = Nullable.GetUnderlyingType(targetType);
            var actualType = nullableType ?? targetType;
              try
            {
                if (actualType == typeof(int))
                {
                    Value = (TValue?)(object?)(int.TryParse(stringValue, out var intValue) ? intValue : (int?)null);
                }
                else if (actualType == typeof(string))
                {
                    Value = (TValue?)(object?)stringValue;
                }
                else if (actualType.IsEnum)
                {
                    Value = (TValue?)Enum.Parse(actualType, stringValue);
                }
                else
                {
                    Value = (TValue?)Convert.ChangeType(stringValue, actualType);
                }
            }
            catch
            {
                Value = default(TValue?);
            }
        }
        
        // 只有在值真正改變時才觸發 ValueChanged 事件
        if (!EqualityComparer<TValue?>.Default.Equals(oldValue, Value) && ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }
}
