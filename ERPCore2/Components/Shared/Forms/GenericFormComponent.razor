@* 通用表單組件 - 基於配置驅動的動態表單 *@
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using ERPCore2.Components.Shared.Buttons
@inject IJSRuntime JSRuntime
@typeparam TModel
@implements IDisposable

<div class="@GetFormCssClass()">
    @* @if (ShowFormHeader && !string.IsNullOrEmpty(FormTitle))
    {
        <div class="card-header">
            <h5 class="card-title mb-0">
                @if (!string.IsNullOrEmpty(FormIconClass))
                {
                    <i class="@FormIconClass me-2"></i>
                }
                @FormTitle
            </h5>
        </div>
    } *@
    
    <div class="@GetFormBodyCssClass()">
        <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" @ref="editForm">
            <DataAnnotationsValidator />
            
            @if (ShowValidationSummary)
            {
                <ValidationSummary class="alert alert-danger" />
            }
            
            @if (FieldSections != null && FieldSections.Any() && FieldDefinitions != null)
            {
                @* 按照 FieldDefinitions 中的欄位順序來排列區段 *@
                @foreach (var section in GetOrderedSections())
                {
                    <div class="mb-4">
                        <h6 class="text-primary border-bottom pb-2 mb-3">@(section.Key)</h6>
                        <div class="row g-3">
                            @foreach (var fieldKvp in section)
                            {
                                var field = FieldDefinitions?.FirstOrDefault(f => f.PropertyName == fieldKvp.Key);
                                if (field != null)
                                {
                                    @RenderField(field)
                                }
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="row g-3">
                    @if (FieldDefinitions != null)
                    {
                        @foreach (var field in FieldDefinitions)
                        {
                            @RenderField(field)
                        }
                    }
                </div>
            }              
            @if (ShowFormButtons)
            {
                <div class="mt-4 d-flex gap-2">
                    <GenericButtonComponent Variant="ButtonVariant.Primary" Text="@SubmitButtonText" 
                                           OnClick="@(async () => await HandleValidSubmit())" IsDisabled="@IsSubmitting" 
                                           IsLoading="@IsSubmitting" IsSubmit="true" />
                    
                    @if (ShowCancelButton)
                    {
                        <GenericButtonComponent Variant="ButtonVariant.Secondary" Text="@CancelButtonText" 
                                               OnClick="@(async () => await HandleCancel())" IsDisabled="@IsSubmitting" />
                    }
                    
                    @if (ShowResetButton)
                    {
                        <GenericButtonComponent Variant="ButtonVariant.OutlineSecondary" Text="@ResetButtonText" 
                                               Type="reset" IsDisabled="@IsSubmitting" />
                    }
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public TModel Model { get; set; } = default!;
    [Parameter] public List<FormFieldDefinition>? FieldDefinitions { get; set; }
    [Parameter] public Dictionary<string, string>? FieldSections { get; set; }
    [Parameter] public EventCallback<TModel> OnFormSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool IsSubmitting { get; set; } = false;
    [Parameter] public bool ShowFormHeader { get; set; } = true;
    [Parameter] public bool ShowFormButtons { get; set; } = true;
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public bool ShowResetButton { get; set; } = false;
    [Parameter] public bool ShowValidationSummary { get; set; } = true;
    [Parameter] public string FormTitle { get; set; } = "表單";
    [Parameter] public string FormIconClass { get; set; } = string.Empty;
    [Parameter] public string SubmitButtonText { get; set; } = "提交";
    [Parameter] public string CancelButtonText { get; set; } = "取消";
    [Parameter] public string ResetButtonText { get; set; } = "重置";
    [Parameter] public string FormCssClass { get; set; } = "card";
    [Parameter] public string FormBodyCssClass { get; set; } = "card-body";
    [Parameter] public string FieldContainerCssClass { get; set; } = "col-md-2";

    private EditForm? editForm;
      // 自動完成相關狀態
    private readonly Dictionary<string, List<SelectOption>> autoCompleteOptions = new();
    private readonly Dictionary<string, bool> autoCompleteLoading = new();
    private readonly Dictionary<string, bool> autoCompleteVisible = new();
    private readonly Dictionary<string, Timer?> autoCompleteTimers = new();
    private readonly Dictionary<string, string> autoCompleteDisplayValues = new();
    
    // 鍵盤導航狀態
    private readonly Dictionary<string, int> highlightedOptionIndex = new();
    private readonly Dictionary<string, bool> keyboardNavigationActive = new();

    private async Task HandleValidSubmit()
    {
        if (OnFormSubmit.HasDelegate)
        {
            await OnFormSubmit.InvokeAsync(Model);
        }
    }    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }    protected override void OnParametersSet()
    {
        // 初始化 AutoComplete 欄位的顯示值
        if (FieldDefinitions != null && Model != null)
        {
            foreach (var field in FieldDefinitions.Where(f => f.FieldType == FormFieldType.AutoComplete))
            {
                var fieldId = field.PropertyName;
                var value = GetPropertyValue(Model, field.PropertyName);
                
                if (value != null && !autoCompleteDisplayValues.ContainsKey(fieldId))
                {
                    // 對於新加載的資料，先設置 ID 值作為顯示值
                    // 實際的顯示文字會在使用者與欄位互動時通過搜索獲取
                    autoCompleteDisplayValues[fieldId] = "";
                    
                    // 如果我們能夠快速查找顯示文字，則設置它
                    _ = Task.Run(async () =>
                    {
                        try
                        {
                            if (field.SearchFunction != null)
                            {
                                // 嘗試使用空字符串搜索來獲取所有選項，然後找到匹配的項目
                                var options = await field.SearchFunction("");
                                var matchingOption = options.FirstOrDefault(o => o.Value == value.ToString());
                                if (matchingOption != null)
                                {
                                    await InvokeAsync(() =>
                                    {
                                        autoCompleteDisplayValues[fieldId] = matchingOption.Text;
                                        StateHasChanged();
                                    });
                                }
                            }
                        }
                        catch
                        {
                            // 靜默處理，保持原來的顯示值
                        }
                    });
                }
            }
        }
        
        base.OnParametersSet();
    }

    // 按照 FieldDefinitions 中的欄位順序來排列區段
    private IEnumerable<IGrouping<string, KeyValuePair<string, string>>> GetOrderedSections()
    {
        if (FieldDefinitions == null || FieldSections == null)
            return Enumerable.Empty<IGrouping<string, KeyValuePair<string, string>>>();

        // 建立區段出現順序的對應表
        var sectionOrderMap = new Dictionary<string, int>();
        var sectionOrder = 0;
        
        foreach (var field in FieldDefinitions)
        {
            if (FieldSections.TryGetValue(field.PropertyName, out var sectionName))
            {
                if (!sectionOrderMap.ContainsKey(sectionName))
                {
                    sectionOrderMap[sectionName] = sectionOrder++;
                }
            }
        }

        // 按照區段在 FieldDefinitions 中的出現順序排列
        return FieldSections
            .GroupBy(kvp => kvp.Value)
            .OrderBy(g => sectionOrderMap.GetValueOrDefault(g.Key, int.MaxValue));
    }

    private string GetFormCssClass()
    {
        return string.IsNullOrEmpty(FormCssClass) ? "" : FormCssClass;
    }

    private string GetFormBodyCssClass()
    {
        return string.IsNullOrEmpty(FormBodyCssClass) ? "" : FormBodyCssClass;
    }

    private RenderFragment RenderField(FormFieldDefinition field) => builder =>
    {
        var containerCssClass = string.IsNullOrEmpty(field.ContainerCssClass) ? FieldContainerCssClass : field.ContainerCssClass;
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", containerCssClass);
        
        // 欄位標籤
        if (!string.IsNullOrEmpty(field.Label))
        {
            builder.OpenElement(2, "label");
            builder.AddAttribute(3, "class", "form-label");
            builder.AddAttribute(4, "for", field.PropertyName);
            builder.AddContent(5, field.Label);
            
            if (field.IsRequired)
            {
                builder.OpenElement(6, "span");
                builder.AddAttribute(7, "class", "text-danger");
                builder.AddContent(8, " *");
                builder.CloseElement();
            }
            builder.CloseElement();
        }
        
        // 根據欄位類型渲染不同的輸入控制項
        switch (field.FieldType)
        {
            case FormFieldType.Text:
            case FormFieldType.Email:
            case FormFieldType.Password:
                RenderTextInput(builder, field, 9);
                break;
            case FormFieldType.Number:
                RenderNumberInput(builder, field, 9);
                break;
            case FormFieldType.Date:
                RenderDateInput(builder, field, 9);
                break;
            case FormFieldType.DateTime:
                RenderDateTimeInput(builder, field, 9);
                break;
            case FormFieldType.TextArea:
                RenderTextArea(builder, field, 9);
                break;
            case FormFieldType.Select:
                RenderSelect(builder, field, 9);
                break;
            case FormFieldType.Checkbox:
                RenderCheckbox(builder, field, 9);
                break;            case FormFieldType.Radio:
                RenderRadio(builder, field, 9);
                break;
            case FormFieldType.AutoComplete:
                RenderAutoComplete(builder, field, 9);
                break;
            default:
                RenderTextInput(builder, field, 9);
                break;
        }
        
        // 說明文字
        if (!string.IsNullOrEmpty(field.HelpText))
        {
            builder.OpenElement(20, "div");
            builder.AddAttribute(21, "class", "form-text");
            builder.AddContent(22, field.HelpText);
            builder.CloseElement();
        }        // 驗證訊息 - 使用簡單的驗證錯誤顯示，不依賴 ValidationMessage 組件
        if (field.IsRequired && ShowValidationSummary)
        {
            builder.OpenElement(23, "div");
            builder.AddAttribute(24, "class", "invalid-feedback");
            builder.AddContent(25, $"{field.Label} 為必填欄位");
            builder.CloseElement();
        }
        
        builder.CloseElement(); // container div
    };    private void RenderTextInput(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "input");
        builder.AddAttribute(sequence + 1, "type", GetInputType(field.FieldType));
        builder.AddAttribute(sequence + 2, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 3, "id", field.PropertyName);
        builder.AddAttribute(sequence + 4, "placeholder", field.Placeholder);
        builder.AddAttribute(sequence + 5, "readonly", field.IsReadOnly);
        if (field.IsRequired)
        {
            builder.AddAttribute(sequence + 6, "required", true);
        }
        builder.AddAttribute(sequence + 7, "value", GetPropertyValue(Model, field.PropertyName)?.ToString());
        builder.AddAttribute(sequence + 8, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            GetPropertyValue(Model, field.PropertyName)?.ToString() ?? ""));
        builder.CloseElement();
    }    private void RenderNumberInput(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "input");
        builder.AddAttribute(sequence + 1, "type", "number");
        builder.AddAttribute(sequence + 2, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 3, "id", field.PropertyName);
        builder.AddAttribute(sequence + 4, "placeholder", field.Placeholder);
        builder.AddAttribute(sequence + 5, "readonly", field.IsReadOnly);
        
        if (field.IsRequired)
        {
            builder.AddAttribute(sequence + 6, "required", true);
        }
        
        if (field.Min.HasValue)
            builder.AddAttribute(sequence + 7, "min", field.Min.Value);
        if (field.Max.HasValue)
            builder.AddAttribute(sequence + 8, "max", field.Max.Value);
        if (field.Step.HasValue)
            builder.AddAttribute(sequence + 9, "step", field.Step.Value);
            
        builder.AddAttribute(sequence + 10, "value", GetPropertyValue(Model, field.PropertyName)?.ToString());
        builder.AddAttribute(sequence + 11, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            GetPropertyValue(Model, field.PropertyName)?.ToString() ?? ""));
        builder.CloseElement();
    }

    private void RenderDateInput(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "input");
        builder.AddAttribute(sequence + 1, "type", "date");
        builder.AddAttribute(sequence + 2, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 3, "id", field.PropertyName);
        builder.AddAttribute(sequence + 4, "readonly", field.IsReadOnly);
        
        var dateValue = GetPropertyValue(Model, field.PropertyName);
        if (dateValue is DateTime dt)
        {
            builder.AddAttribute(sequence + 5, "value", dt.ToString("yyyy-MM-dd"));
        }
        
        builder.AddAttribute(sequence + 6, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            dateValue?.ToString() ?? ""));
        builder.CloseElement();
    }

    private void RenderDateTimeInput(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "input");
        builder.AddAttribute(sequence + 1, "type", "datetime-local");
        builder.AddAttribute(sequence + 2, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 3, "id", field.PropertyName);
        builder.AddAttribute(sequence + 4, "readonly", field.IsReadOnly);
        
        var dateValue = GetPropertyValue(Model, field.PropertyName);
        if (dateValue is DateTime dt)
        {
            builder.AddAttribute(sequence + 5, "value", dt.ToString("yyyy-MM-ddTHH:mm"));
        }
        
        builder.AddAttribute(sequence + 6, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            dateValue?.ToString() ?? ""));
        builder.CloseElement();
    }

    private void RenderTextArea(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "textarea");
        builder.AddAttribute(sequence + 1, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 2, "id", field.PropertyName);
        builder.AddAttribute(sequence + 3, "placeholder", field.Placeholder);
        builder.AddAttribute(sequence + 4, "readonly", field.IsReadOnly);
        builder.AddAttribute(sequence + 5, "rows", field.Rows ?? 3);
        builder.AddAttribute(sequence + 6, "value", GetPropertyValue(Model, field.PropertyName)?.ToString());
        builder.AddAttribute(sequence + 7, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            GetPropertyValue(Model, field.PropertyName)?.ToString() ?? ""));
        builder.CloseElement();
    }    private void RenderSelect(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "select");
        builder.AddAttribute(sequence + 1, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 2, "id", field.PropertyName);
        builder.AddAttribute(sequence + 3, "disabled", field.IsReadOnly);
        builder.AddAttribute(sequence + 4, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            GetPropertyValue(Model, field.PropertyName)?.ToString() ?? ""));
        
        // 空選項
        if (!field.IsRequired)
        {
            builder.OpenElement(sequence + 10, "option");
            builder.AddAttribute(sequence + 11, "value", "");
            builder.AddContent(sequence + 12, "請選擇...");
            builder.CloseElement();
        }        
        // 選項
        if (field.Options != null)
        {
            var currentValue = GetPropertyValue(Model, field.PropertyName)?.ToString();
            var optionSequence = sequence + 20;
            
            foreach (var option in field.Options)
            {
                builder.OpenElement(optionSequence, "option");
                builder.AddAttribute(optionSequence + 1, "value", option.Value);
                builder.AddAttribute(optionSequence + 2, "selected", option.Value == currentValue);
                builder.AddContent(optionSequence + 3, option.Text);
                builder.CloseElement();
                optionSequence += 4;
            }        }
        
        builder.CloseElement();
    }

    private void RenderCheckbox(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "div");
        builder.AddAttribute(sequence + 1, "class", "form-check");
        
        builder.OpenElement(sequence + 2, "input");
        builder.AddAttribute(sequence + 3, "type", "checkbox");
        builder.AddAttribute(sequence + 4, "class", "form-check-input");
        builder.AddAttribute(sequence + 5, "id", field.PropertyName);
        builder.AddAttribute(sequence + 6, "disabled", field.IsReadOnly);
          var currentValue = GetPropertyValue(Model, field.PropertyName);
        bool boolValue = false;
        if (currentValue is bool b)
        {
            boolValue = b;
            builder.AddAttribute(sequence + 7, "checked", boolValue);
        }
        
        builder.AddAttribute(sequence + 8, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            boolValue));
        builder.CloseElement();
        
        builder.OpenElement(sequence + 9, "label");
        builder.AddAttribute(sequence + 10, "class", "form-check-label");
        builder.AddAttribute(sequence + 11, "for", field.PropertyName);
        builder.AddContent(sequence + 12, field.Label);
        builder.CloseElement();
        
        builder.CloseElement();
    }

    private void RenderRadio(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        if (field.Options != null)
        {
            var currentValue = GetPropertyValue(Model, field.PropertyName)?.ToString();
            var radioSequence = sequence;
            
            foreach (var option in field.Options)
            {
                builder.OpenElement(radioSequence, "div");
                builder.AddAttribute(radioSequence + 1, "class", "form-check");
                
                builder.OpenElement(radioSequence + 2, "input");
                builder.AddAttribute(radioSequence + 3, "type", "radio");
                builder.AddAttribute(radioSequence + 4, "class", "form-check-input");
                builder.AddAttribute(radioSequence + 5, "id", $"{field.PropertyName}_{option.Value}");
                builder.AddAttribute(radioSequence + 6, "name", field.PropertyName);
                builder.AddAttribute(radioSequence + 7, "value", option.Value);
                builder.AddAttribute(radioSequence + 8, "disabled", field.IsReadOnly);
                builder.AddAttribute(radioSequence + 9, "checked", option.Value == currentValue);
                builder.AddAttribute(radioSequence + 10, "onchange", EventCallback.Factory.CreateBinder(this, 
                    value => SetPropertyValue(Model, field.PropertyName, value), 
                    currentValue ?? ""));
                builder.CloseElement();
                
                builder.OpenElement(radioSequence + 11, "label");
                builder.AddAttribute(radioSequence + 12, "class", "form-check-label");
                builder.AddAttribute(radioSequence + 13, "for", $"{field.PropertyName}_{option.Value}");
                builder.AddContent(radioSequence + 14, option.Text);
                builder.CloseElement();
                
                builder.CloseElement();
                radioSequence += 15;
            }        }
    }

    private void RenderAutoComplete(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        var fieldId = field.PropertyName;
        var currentValue = GetPropertyValue(Model, field.PropertyName);
        var displayValue = autoCompleteDisplayValues.GetValueOrDefault(fieldId, currentValue?.ToString() ?? "");
        
        // 容器 div
        builder.OpenElement(sequence, "div");
        builder.AddAttribute(sequence + 1, "class", "autocomplete-container");
        
        // 輸入框
        builder.OpenElement(sequence + 2, "input");
        builder.AddAttribute(sequence + 3, "type", "text");
        builder.AddAttribute(sequence + 4, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 5, "id", fieldId);
        builder.AddAttribute(sequence + 6, "placeholder", field.Placeholder);
        builder.AddAttribute(sequence + 7, "readonly", field.IsReadOnly);
        builder.AddAttribute(sequence + 8, "value", displayValue);
        
        // 輸入事件處理
        builder.AddAttribute(sequence + 9, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(this, args =>
        {
            var inputValue = args.Value?.ToString() ?? "";
            autoCompleteDisplayValues[fieldId] = inputValue;
            _ = HandleAutoCompleteInput(field, inputValue);
        }));
        
        // 焦點事件處理
        builder.AddAttribute(sequence + 10, "onfocus", EventCallback.Factory.Create(this, () =>
        {
            var inputValue = autoCompleteDisplayValues.GetValueOrDefault(fieldId, "");
            if (!string.IsNullOrEmpty(inputValue) && inputValue.Length >= field.MinSearchLength)
            {
                _ = HandleAutoCompleteInput(field, inputValue);
            }
        }));
          // 失去焦點事件處理
        builder.AddAttribute(sequence + 11, "onblur", EventCallback.Factory.Create(this, () =>
        {
            // 延遲隱藏下拉選單，讓使用者有時間點擊選項
            Timer? timer = null;
            timer = new Timer(_ =>
            {
                autoCompleteVisible[fieldId] = false;
                InvokeAsync(StateHasChanged);
                timer?.Dispose();
            }, null, 150, Timeout.Infinite);
        }));
        
        // 鍵盤事件處理
        builder.AddAttribute(sequence + 12, "onkeydown", EventCallback.Factory.Create<KeyboardEventArgs>(this, args =>
        {
            _ = HandleKeyDown(field, args);
        }));
        
        builder.CloseElement(); // input
        
        // 載入指示器
        if (autoCompleteLoading.GetValueOrDefault(fieldId, false))
        {
            builder.OpenElement(sequence + 20, "div");
            builder.AddAttribute(sequence + 21, "class", "position-absolute");
            builder.AddAttribute(sequence + 22, "style", "right: 10px; top: 50%; transform: translateY(-50%);");
            builder.OpenElement(sequence + 23, "span");
            builder.AddAttribute(sequence + 24, "class", "spinner-border spinner-border-sm");
            builder.CloseElement();
            builder.CloseElement();
        }
        
        // 下拉選項
        if (autoCompleteVisible.GetValueOrDefault(fieldId, false) && autoCompleteOptions.ContainsKey(fieldId))
        {
            var options = autoCompleteOptions[fieldId];
            if (options.Any())
            {
                builder.OpenElement(sequence + 30, "div");
                builder.AddAttribute(sequence + 31, "class", "autocomplete-dropdown position-absolute w-100");
                builder.AddAttribute(sequence + 32, "style", "max-height: 200px; overflow-y: auto; z-index: 1000;");                var optionSequence = sequence + 40;
                var optionIndex = 0;
                foreach (var option in options)
                {
                    var isHighlighted = highlightedOptionIndex.GetValueOrDefault(fieldId, -1) == optionIndex;
                    var cssClass = isHighlighted ? "autocomplete-item highlighted" : "autocomplete-item";
                    var optionId = $"{fieldId}_option_{optionIndex}";
                    
                    builder.OpenElement(optionSequence, "button");
                    builder.AddAttribute(optionSequence + 1, "type", "button");
                    builder.AddAttribute(optionSequence + 2, "class", cssClass);
                    builder.AddAttribute(optionSequence + 3, "id", optionId);
                    
                    // 滑鼠移動時更新高亮索引
                    builder.AddAttribute(optionSequence + 4, "onmousemove", EventCallback.Factory.Create(this, () =>
                    {
                        highlightedOptionIndex[fieldId] = optionIndex;
                        keyboardNavigationActive[fieldId] = false;
                        StateHasChanged();
                    }));
                      builder.AddAttribute(optionSequence + 5, "onmousedown", EventCallback.Factory.Create(this, () =>
                    {
                        autoCompleteDisplayValues[fieldId] = option.Text;
                        SetPropertyValue(Model, field.PropertyName, option.Value);
                        autoCompleteVisible[fieldId] = false;
                        ResetKeyboardNavigation(fieldId);
                        StateHasChanged();
                    }));
                    builder.AddContent(optionSequence + 6, option.Text);
                    builder.CloseElement();
                    optionSequence += 7;
                    optionIndex++;
                }
                
                builder.CloseElement(); // dropdown-menu
            }
        }
        
        builder.CloseElement(); // container div
    }
    
    private Task HandleAutoCompleteInput(FormFieldDefinition field, string inputValue)
    {
        var fieldId = field.PropertyName;
        
        // 清除之前的計時器
        if (autoCompleteTimers.ContainsKey(fieldId))
        {
            autoCompleteTimers[fieldId]?.Dispose();
        }
          // 如果輸入長度不足，隱藏下拉選單
        if (inputValue.Length < field.MinSearchLength)
        {
            autoCompleteVisible[fieldId] = false;
            StateHasChanged();
            return Task.CompletedTask;
        }
        
        // 設置載入狀態
        autoCompleteLoading[fieldId] = true;
        StateHasChanged();
        
        // 設置延遲搜尋計時器
        autoCompleteTimers[fieldId] = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                try
                {
                    if (field.SearchFunction != null)
                    {
                        var results = await field.SearchFunction(inputValue);
                        autoCompleteOptions[fieldId] = results;
                        autoCompleteVisible[fieldId] = results.Any();
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"AutoComplete search error: {ex.Message}");
                    autoCompleteOptions[fieldId] = new List<SelectOption>();
                    autoCompleteVisible[fieldId] = false;
                }
                finally
                {
                    autoCompleteLoading[fieldId] = false;
                    StateHasChanged();
                }            });
        }, null, field.AutoCompleteDelayMs, Timeout.Infinite);
          return Task.CompletedTask;
    }
    
    private async Task HandleKeyDown(FormFieldDefinition field, KeyboardEventArgs args)
    {
        var fieldId = field.PropertyName;
        var options = autoCompleteOptions.GetValueOrDefault(fieldId, new List<SelectOption>());
        
        switch (args.Key)
        {
            case "ArrowDown":
                // 如果下拉選單未顯示，顯示它
                if (!autoCompleteVisible.GetValueOrDefault(fieldId, false))
                {
                    var inputValue = autoCompleteDisplayValues.GetValueOrDefault(fieldId, "");
                    if (!string.IsNullOrEmpty(inputValue) && inputValue.Length >= field.MinSearchLength)
                    {
                        await HandleAutoCompleteInput(field, inputValue);
                    }
                }
                else if (options.Any())
                {
                    // 移動到下一個選項
                    MoveHighlight(fieldId, options, 1);
                }
                break;
                
            case "ArrowUp":
                if (autoCompleteVisible.GetValueOrDefault(fieldId, false) && options.Any())
                {
                    MoveHighlight(fieldId, options, -1);
                }
                break;
                
            case "Enter":
                if (autoCompleteVisible.GetValueOrDefault(fieldId, false) && options.Any())
                {
                    await SelectHighlightedOption(field, options);
                }
                break;
                
            case "Escape":
                HideDropdown(fieldId);
                break;
                
            case "Tab":
                HideDropdown(fieldId);
                // 不阻止 Tab，讓它正常移動到下一個欄位
                break;
        }
        
        StateHasChanged();
    }
      private void MoveHighlight(string fieldId, List<SelectOption> options, int direction)
    {
        if (!options.Any()) return;
        
        var currentIndex = highlightedOptionIndex.GetValueOrDefault(fieldId, -1);
        var newIndex = currentIndex + direction;
        
        // 循環導航
        if (newIndex < 0)
            newIndex = options.Count - 1;
        else if (newIndex >= options.Count)
            newIndex = 0;
            
        highlightedOptionIndex[fieldId] = newIndex;
        keyboardNavigationActive[fieldId] = true;
        
        // 滾動到可見區域
        _ = ScrollToHighlightedOption(fieldId, newIndex);
    }
    
    private async Task ScrollToHighlightedOption(string fieldId, int optionIndex)
    {
        try
        {
            var optionId = $"{fieldId}_option_{optionIndex}";
            await JSRuntime.InvokeVoidAsync("scrollToElement", optionId);
        }
        catch (Exception ex)
        {
            // 靜默處理滾動錯誤，不影響主要功能
            Console.Error.WriteLine($"ScrollToHighlightedOption error: {ex.Message}");
        }
    }
      private Task SelectHighlightedOption(FormFieldDefinition field, List<SelectOption> options)
    {
        var fieldId = field.PropertyName;
        var highlightedIndex = highlightedOptionIndex.GetValueOrDefault(fieldId, -1);
        
        if (highlightedIndex >= 0 && highlightedIndex < options.Count)
        {
            var selectedOption = options[highlightedIndex];
            autoCompleteDisplayValues[fieldId] = selectedOption.Text;
            SetPropertyValue(Model, field.PropertyName, selectedOption.Value);
            HideDropdown(fieldId);
        }
        
        return Task.CompletedTask;
    }
    
    private void HideDropdown(string fieldId)
    {
        autoCompleteVisible[fieldId] = false;
        ResetKeyboardNavigation(fieldId);
    }
    
    private void ResetKeyboardNavigation(string fieldId)
    {
        highlightedOptionIndex[fieldId] = -1;
        keyboardNavigationActive[fieldId] = false;
    }

    public void Dispose()
    {
        // 清理所有計時器
        foreach (var timer in autoCompleteTimers.Values)
        {
            timer?.Dispose();
        }
        autoCompleteTimers.Clear();
    }

    private string GetInputType(FormFieldType fieldType)
    {
        return fieldType switch
        {
            FormFieldType.Email => "email",
            FormFieldType.Password => "password",
            FormFieldType.Number => "number",
            FormFieldType.Date => "date",
            FormFieldType.DateTime => "datetime-local",
            FormFieldType.Time => "time",
            _ => "text"
        };
    }

    private string GetInputCssClass(FormFieldDefinition field)
    {
        var classes = new List<string> { "form-control" };
        
        if (!string.IsNullOrEmpty(field.CssClass))
            classes.Add(field.CssClass);
            
        return string.Join(" ", classes);
    }

    private object? GetPropertyValue(TModel model, string propertyName)
    {
        if (model == null || string.IsNullOrEmpty(propertyName))
            return null;

        var parts = propertyName.Split('.');
        object? currentValue = model;
        
        foreach (var part in parts)
        {
            if (currentValue == null) return null;
            
            var currentType = currentValue.GetType();
            var property = currentType.GetProperty(part);
            
            if (property == null) return null;
            
            currentValue = property.GetValue(currentValue);
        }
        
        return currentValue;
    }

    private void SetPropertyValue(TModel model, string propertyName, object? value)
    {
        if (model == null || string.IsNullOrEmpty(propertyName))
            return;

        var parts = propertyName.Split('.');
        object? currentValue = model;
        
        // 導航到最後一個屬性的父物件
        for (int i = 0; i < parts.Length - 1; i++)
        {
            if (currentValue == null) return;
            
            var currentType = currentValue.GetType();
            var property = currentType.GetProperty(parts[i]);
            
            if (property == null) return;
            
            currentValue = property.GetValue(currentValue);
        }
        
        // 設定最後一個屬性的值
        if (currentValue != null)
        {
            var finalType = currentValue.GetType();
            var finalProperty = finalType.GetProperty(parts[^1]);
            
            if (finalProperty != null && finalProperty.CanWrite)
            {
                var convertedValue = ConvertValue(value, finalProperty.PropertyType);
                finalProperty.SetValue(currentValue, convertedValue);
            }
        }
    }

    private object? ConvertValue(object? value, Type targetType)
    {
        if (value == null)
            return null;

        if (targetType.IsAssignableFrom(value.GetType()))
            return value;

        var underlyingType = Nullable.GetUnderlyingType(targetType) ?? targetType;

        try
        {
            return Convert.ChangeType(value, underlyingType);
        }
        catch
        {
            return null;
        }
    }
}
