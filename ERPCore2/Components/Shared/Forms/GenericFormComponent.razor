@* 通用表單組件 - 基於配置驅動的動態表單 *@
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Microsoft.AspNetCore.Components.Rendering
@typeparam TModel

<div class="@GetFormCssClass()">
    @if (ShowFormHeader && !string.IsNullOrEmpty(FormTitle))
    {
        <div class="card-header">
            <h5 class="card-title mb-0">
                @if (!string.IsNullOrEmpty(FormIconClass))
                {
                    <i class="@FormIconClass me-2"></i>
                }
                @FormTitle
            </h5>
        </div>
    }
    
    <div class="@GetFormBodyCssClass()">
        <EditForm Model="Model" OnValidSubmit="HandleValidSubmit" @ref="editForm">
            <DataAnnotationsValidator />
            
            @if (ShowValidationSummary)
            {
                <ValidationSummary class="alert alert-danger" />
            }
            
            @if (FieldSections != null && FieldSections.Any())
            {
                @foreach (var section in FieldSections.GroupBy(kvp => kvp.Value).OrderBy(g => g.Key))
                {
                    <div class="mb-4">
                        <h6 class="text-primary border-bottom pb-2 mb-3">@(section.Key)</h6>
                        <div class="row g-3">
                            @foreach (var fieldKvp in section)
                            {
                                var field = FieldDefinitions?.FirstOrDefault(f => f.PropertyName == fieldKvp.Key);
                                if (field != null)
                                {
                                    @RenderField(field)
                                }
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="row g-3">
                    @if (FieldDefinitions != null)
                    {
                        @foreach (var field in FieldDefinitions)
                        {
                            @RenderField(field)
                        }
                    }
                </div>
            }
            
            @if (ShowFormButtons)
            {
                <div class="mt-4 d-flex gap-2">
                    <button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
                        @if (IsSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        @SubmitButtonText
                    </button>
                    
                    @if (ShowCancelButton)
                    {
                        <button type="button" class="btn btn-secondary" @onclick="HandleCancel" disabled="@IsSubmitting">
                            @CancelButtonText
                        </button>
                    }
                    
                    @if (ShowResetButton)
                    {
                        <button type="reset" class="btn btn-outline-secondary" disabled="@IsSubmitting">
                            @ResetButtonText
                        </button>
                    }
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public TModel Model { get; set; } = default!;
    [Parameter] public List<FormFieldDefinition>? FieldDefinitions { get; set; }
    [Parameter] public Dictionary<string, string>? FieldSections { get; set; }
    [Parameter] public EventCallback<TModel> OnFormSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool IsSubmitting { get; set; } = false;
    [Parameter] public bool ShowFormHeader { get; set; } = true;
    [Parameter] public bool ShowFormButtons { get; set; } = true;
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public bool ShowResetButton { get; set; } = false;
    [Parameter] public bool ShowValidationSummary { get; set; } = true;
    [Parameter] public string FormTitle { get; set; } = "表單";
    [Parameter] public string FormIconClass { get; set; } = string.Empty;
    [Parameter] public string SubmitButtonText { get; set; } = "提交";
    [Parameter] public string CancelButtonText { get; set; } = "取消";
    [Parameter] public string ResetButtonText { get; set; } = "重置";
    [Parameter] public string FormCssClass { get; set; } = "card";
    [Parameter] public string FormBodyCssClass { get; set; } = "card-body";
    [Parameter] public string FieldContainerCssClass { get; set; } = "col-md-6";

    private EditForm? editForm;

    private async Task HandleValidSubmit()
    {
        if (OnFormSubmit.HasDelegate)
        {
            await OnFormSubmit.InvokeAsync(Model);
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }

    private string GetFormCssClass()
    {
        return string.IsNullOrEmpty(FormCssClass) ? "" : FormCssClass;
    }

    private string GetFormBodyCssClass()
    {
        return string.IsNullOrEmpty(FormBodyCssClass) ? "" : FormBodyCssClass;
    }

    private RenderFragment RenderField(FormFieldDefinition field) => builder =>
    {
        var containerCssClass = string.IsNullOrEmpty(field.ContainerCssClass) ? FieldContainerCssClass : field.ContainerCssClass;
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", containerCssClass);
        
        // 欄位標籤
        if (!string.IsNullOrEmpty(field.Label))
        {
            builder.OpenElement(2, "label");
            builder.AddAttribute(3, "class", "form-label");
            builder.AddAttribute(4, "for", field.PropertyName);
            builder.AddContent(5, field.Label);
            
            if (field.IsRequired)
            {
                builder.OpenElement(6, "span");
                builder.AddAttribute(7, "class", "text-danger");
                builder.AddContent(8, " *");
                builder.CloseElement();
            }
            builder.CloseElement();
        }
        
        // 根據欄位類型渲染不同的輸入控制項
        switch (field.FieldType)
        {
            case FormFieldType.Text:
            case FormFieldType.Email:
            case FormFieldType.Password:
                RenderTextInput(builder, field, 9);
                break;
            case FormFieldType.Number:
                RenderNumberInput(builder, field, 9);
                break;
            case FormFieldType.Date:
                RenderDateInput(builder, field, 9);
                break;
            case FormFieldType.DateTime:
                RenderDateTimeInput(builder, field, 9);
                break;
            case FormFieldType.TextArea:
                RenderTextArea(builder, field, 9);
                break;
            case FormFieldType.Select:
                RenderSelect(builder, field, 9);
                break;
            case FormFieldType.Checkbox:
                RenderCheckbox(builder, field, 9);
                break;
            case FormFieldType.Radio:
                RenderRadio(builder, field, 9);
                break;
            default:
                RenderTextInput(builder, field, 9);
                break;
        }
        
        // 說明文字
        if (!string.IsNullOrEmpty(field.HelpText))
        {
            builder.OpenElement(20, "div");
            builder.AddAttribute(21, "class", "form-text");
            builder.AddContent(22, field.HelpText);
            builder.CloseElement();
        }
        
        // 驗證訊息
        builder.OpenComponent<ValidationMessage<object>>(23);
        builder.AddAttribute(24, "For", () => GetPropertyValue(Model, field.PropertyName));
        builder.AddAttribute(25, "class", "text-danger");
        builder.CloseComponent();
        
        builder.CloseElement(); // container div
    };

    private void RenderTextInput(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "input");
        builder.AddAttribute(sequence + 1, "type", GetInputType(field.FieldType));
        builder.AddAttribute(sequence + 2, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 3, "id", field.PropertyName);
        builder.AddAttribute(sequence + 4, "placeholder", field.Placeholder);
        builder.AddAttribute(sequence + 5, "readonly", field.IsReadOnly);
        builder.AddAttribute(sequence + 6, "value", GetPropertyValue(Model, field.PropertyName)?.ToString());
        builder.AddAttribute(sequence + 7, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            GetPropertyValue(Model, field.PropertyName)?.ToString() ?? ""));
        builder.CloseElement();
    }

    private void RenderNumberInput(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "input");
        builder.AddAttribute(sequence + 1, "type", "number");
        builder.AddAttribute(sequence + 2, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 3, "id", field.PropertyName);
        builder.AddAttribute(sequence + 4, "placeholder", field.Placeholder);
        builder.AddAttribute(sequence + 5, "readonly", field.IsReadOnly);
        
        if (field.Min.HasValue)
            builder.AddAttribute(sequence + 6, "min", field.Min.Value);
        if (field.Max.HasValue)
            builder.AddAttribute(sequence + 7, "max", field.Max.Value);
        if (field.Step.HasValue)
            builder.AddAttribute(sequence + 8, "step", field.Step.Value);
            
        builder.AddAttribute(sequence + 9, "value", GetPropertyValue(Model, field.PropertyName)?.ToString());
        builder.AddAttribute(sequence + 10, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            GetPropertyValue(Model, field.PropertyName)?.ToString() ?? ""));
        builder.CloseElement();
    }

    private void RenderDateInput(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "input");
        builder.AddAttribute(sequence + 1, "type", "date");
        builder.AddAttribute(sequence + 2, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 3, "id", field.PropertyName);
        builder.AddAttribute(sequence + 4, "readonly", field.IsReadOnly);
        
        var dateValue = GetPropertyValue(Model, field.PropertyName);
        if (dateValue is DateTime dt)
        {
            builder.AddAttribute(sequence + 5, "value", dt.ToString("yyyy-MM-dd"));
        }
        
        builder.AddAttribute(sequence + 6, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            dateValue?.ToString() ?? ""));
        builder.CloseElement();
    }

    private void RenderDateTimeInput(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "input");
        builder.AddAttribute(sequence + 1, "type", "datetime-local");
        builder.AddAttribute(sequence + 2, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 3, "id", field.PropertyName);
        builder.AddAttribute(sequence + 4, "readonly", field.IsReadOnly);
        
        var dateValue = GetPropertyValue(Model, field.PropertyName);
        if (dateValue is DateTime dt)
        {
            builder.AddAttribute(sequence + 5, "value", dt.ToString("yyyy-MM-ddTHH:mm"));
        }
        
        builder.AddAttribute(sequence + 6, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            dateValue?.ToString() ?? ""));
        builder.CloseElement();
    }

    private void RenderTextArea(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "textarea");
        builder.AddAttribute(sequence + 1, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 2, "id", field.PropertyName);
        builder.AddAttribute(sequence + 3, "placeholder", field.Placeholder);
        builder.AddAttribute(sequence + 4, "readonly", field.IsReadOnly);
        builder.AddAttribute(sequence + 5, "rows", field.Rows ?? 3);
        builder.AddAttribute(sequence + 6, "value", GetPropertyValue(Model, field.PropertyName)?.ToString());
        builder.AddAttribute(sequence + 7, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            GetPropertyValue(Model, field.PropertyName)?.ToString() ?? ""));
        builder.CloseElement();
    }    private void RenderSelect(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "select");
        builder.AddAttribute(sequence + 1, "class", GetInputCssClass(field));
        builder.AddAttribute(sequence + 2, "id", field.PropertyName);
        builder.AddAttribute(sequence + 3, "disabled", field.IsReadOnly);
        builder.AddAttribute(sequence + 4, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            GetPropertyValue(Model, field.PropertyName)?.ToString() ?? ""));
        
        // 空選項
        if (!field.IsRequired)
        {
            builder.OpenElement(sequence + 10, "option");
            builder.AddAttribute(sequence + 11, "value", "");
            builder.AddContent(sequence + 12, "請選擇...");
            builder.CloseElement();
        }        
        // 選項
        if (field.Options != null)
        {
            var currentValue = GetPropertyValue(Model, field.PropertyName)?.ToString();
            var optionSequence = sequence + 20;
            
            foreach (var option in field.Options)
            {
                builder.OpenElement(optionSequence, "option");
                builder.AddAttribute(optionSequence + 1, "value", option.Value);
                builder.AddAttribute(optionSequence + 2, "selected", option.Value == currentValue);
                builder.AddContent(optionSequence + 3, option.Text);
                builder.CloseElement();
                optionSequence += 4;
            }        }
        
        builder.CloseElement();
    }

    private void RenderCheckbox(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        builder.OpenElement(sequence, "div");
        builder.AddAttribute(sequence + 1, "class", "form-check");
        
        builder.OpenElement(sequence + 2, "input");
        builder.AddAttribute(sequence + 3, "type", "checkbox");
        builder.AddAttribute(sequence + 4, "class", "form-check-input");
        builder.AddAttribute(sequence + 5, "id", field.PropertyName);
        builder.AddAttribute(sequence + 6, "disabled", field.IsReadOnly);
          var currentValue = GetPropertyValue(Model, field.PropertyName);
        bool boolValue = false;
        if (currentValue is bool b)
        {
            boolValue = b;
            builder.AddAttribute(sequence + 7, "checked", boolValue);
        }
        
        builder.AddAttribute(sequence + 8, "onchange", EventCallback.Factory.CreateBinder(this, 
            value => SetPropertyValue(Model, field.PropertyName, value), 
            boolValue));
        builder.CloseElement();
        
        builder.OpenElement(sequence + 9, "label");
        builder.AddAttribute(sequence + 10, "class", "form-check-label");
        builder.AddAttribute(sequence + 11, "for", field.PropertyName);
        builder.AddContent(sequence + 12, field.Label);
        builder.CloseElement();
        
        builder.CloseElement();
    }

    private void RenderRadio(RenderTreeBuilder builder, FormFieldDefinition field, int sequence)
    {
        if (field.Options != null)
        {
            var currentValue = GetPropertyValue(Model, field.PropertyName)?.ToString();
            var radioSequence = sequence;
            
            foreach (var option in field.Options)
            {
                builder.OpenElement(radioSequence, "div");
                builder.AddAttribute(radioSequence + 1, "class", "form-check");
                
                builder.OpenElement(radioSequence + 2, "input");
                builder.AddAttribute(radioSequence + 3, "type", "radio");
                builder.AddAttribute(radioSequence + 4, "class", "form-check-input");
                builder.AddAttribute(radioSequence + 5, "id", $"{field.PropertyName}_{option.Value}");
                builder.AddAttribute(radioSequence + 6, "name", field.PropertyName);
                builder.AddAttribute(radioSequence + 7, "value", option.Value);
                builder.AddAttribute(radioSequence + 8, "disabled", field.IsReadOnly);
                builder.AddAttribute(radioSequence + 9, "checked", option.Value == currentValue);
                builder.AddAttribute(radioSequence + 10, "onchange", EventCallback.Factory.CreateBinder(this, 
                    value => SetPropertyValue(Model, field.PropertyName, value), 
                    currentValue ?? ""));
                builder.CloseElement();
                
                builder.OpenElement(radioSequence + 11, "label");
                builder.AddAttribute(radioSequence + 12, "class", "form-check-label");
                builder.AddAttribute(radioSequence + 13, "for", $"{field.PropertyName}_{option.Value}");
                builder.AddContent(radioSequence + 14, option.Text);
                builder.CloseElement();
                
                builder.CloseElement();
                radioSequence += 15;
            }
        }
    }

    private string GetInputType(FormFieldType fieldType)
    {
        return fieldType switch
        {
            FormFieldType.Email => "email",
            FormFieldType.Password => "password",
            FormFieldType.Number => "number",
            FormFieldType.Date => "date",
            FormFieldType.DateTime => "datetime-local",
            FormFieldType.Time => "time",
            _ => "text"
        };
    }

    private string GetInputCssClass(FormFieldDefinition field)
    {
        var classes = new List<string> { "form-control" };
        
        if (!string.IsNullOrEmpty(field.CssClass))
            classes.Add(field.CssClass);
            
        return string.Join(" ", classes);
    }

    private object? GetPropertyValue(TModel model, string propertyName)
    {
        if (model == null || string.IsNullOrEmpty(propertyName))
            return null;

        var parts = propertyName.Split('.');
        object? currentValue = model;
        
        foreach (var part in parts)
        {
            if (currentValue == null) return null;
            
            var currentType = currentValue.GetType();
            var property = currentType.GetProperty(part);
            
            if (property == null) return null;
            
            currentValue = property.GetValue(currentValue);
        }
        
        return currentValue;
    }

    private void SetPropertyValue(TModel model, string propertyName, object? value)
    {
        if (model == null || string.IsNullOrEmpty(propertyName))
            return;

        var parts = propertyName.Split('.');
        object? currentValue = model;
        
        // 導航到最後一個屬性的父物件
        for (int i = 0; i < parts.Length - 1; i++)
        {
            if (currentValue == null) return;
            
            var currentType = currentValue.GetType();
            var property = currentType.GetProperty(parts[i]);
            
            if (property == null) return;
            
            currentValue = property.GetValue(currentValue);
        }
        
        // 設定最後一個屬性的值
        if (currentValue != null)
        {
            var finalType = currentValue.GetType();
            var finalProperty = finalType.GetProperty(parts[^1]);
            
            if (finalProperty != null && finalProperty.CanWrite)
            {
                var convertedValue = ConvertValue(value, finalProperty.PropertyType);
                finalProperty.SetValue(currentValue, convertedValue);
            }
        }
    }

    private object? ConvertValue(object? value, Type targetType)
    {
        if (value == null)
            return null;

        if (targetType.IsAssignableFrom(value.GetType()))
            return value;

        var underlyingType = Nullable.GetUnderlyingType(targetType) ?? targetType;

        try
        {
            return Convert.ChangeType(value, underlyingType);
        }
        catch
        {
            return null;
        }
    }
}
