@* 輸入欄位組件 - 統一的表單輸入樣式 *@
<div class="mb-3 @ContainerCssClass">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id" class="form-label">
            @Label
            @if (IsRequired)
            {
                <span class="text-danger">*</span>
            }
        </label>
    }
    
    @if (InputType == "textarea")
    {
        <textarea id="@Id" 
                  class="form-control @GetInputClass()" 
                  placeholder="@Placeholder"
                  rows="@Rows"
                  disabled="@IsDisabled"
                  readonly="@IsReadOnly"
                  value="@CurrentValue"
                  @oninput="OnValueChanged">
        </textarea>
    }
    else
    {        
        <input id="@Id" 
               type="@InputType" 
               class="form-control @GetInputClass()" 
               placeholder="@Placeholder"
               disabled="@IsDisabled"
               readonly="@IsReadOnly"
               value="@CurrentValue"
               @oninput="OnValueChanged" />
    }
    
    @if (!string.IsNullOrEmpty(HelpText))
    {
        <div class="form-text text-secondary-custom">@HelpText</div>
    }
    
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="invalid-feedback d-block">@ErrorMessage</div>
    }
</div>

@code {
    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string InputType { get; set; } = "text";
    [Parameter] public string Placeholder { get; set; } = string.Empty;
    [Parameter] public bool IsRequired { get; set; } = false;
    [Parameter] public bool IsDisabled { get; set; } = false;
    [Parameter] public bool IsReadOnly { get; set; } = false;
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public string ContainerCssClass { get; set; } = string.Empty;
    [Parameter] public string HelpText { get; set; } = string.Empty;
    [Parameter] public string ErrorMessage { get; set; } = string.Empty;
    [Parameter] public int Rows { get; set; } = 3;
    [Parameter] public string BindEvent { get; set; } = "onchange";

    // 內部狀態來保持值的穩定性
    private string _currentValue = string.Empty;
    
    // 使用屬性來確保值的一致性
    private string CurrentValue
    {
        get => _currentValue ?? string.Empty;
        set => _currentValue = value ?? string.Empty;
    }

    protected override void OnParametersSet()
    {
        // 只有在外部值確實改變時才更新內部狀態
        if (_currentValue != (Value ?? string.Empty))
        {
            _currentValue = Value ?? string.Empty;
        }
    }

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        var newValue = e.Value?.ToString() ?? string.Empty;
        
        // 更新內部狀態
        _currentValue = newValue;
        
        // 通知父組件值已改變
        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(newValue);
        }
    }

    private string GetInputClass()
    {
        var classes = new List<string>();
        
        if (!string.IsNullOrEmpty(CssClass))
            classes.Add(CssClass);
            
        if (!string.IsNullOrEmpty(ErrorMessage))
            classes.Add("is-invalid");
            
        return string.Join(" ", classes);
    }
}