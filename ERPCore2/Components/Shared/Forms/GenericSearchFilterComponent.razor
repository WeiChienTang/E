@* 通用搜尋篩選組件 - 基於配置驅動的動態篩選 *@
@using System.Reflection
@using Microsoft.AspNetCore.Components.Rendering
@typeparam TModel

<div class="card mb-3">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h6 class="card-title mb-0">
            <i class="fas fa-filter me-2"></i>
            搜尋篩選
        </h6>
        <div class="d-flex gap-2">
            @if (ShowAdvancedToggle && HasAdvancedFilters())
            {
                <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="ToggleAdvancedFilters">
                    <i class="fas fa-@(showAdvanced ? "chevron-up" : "chevron-down") me-1"></i>
                    @(showAdvanced ? "隱藏" : "顯示")進階篩選
                </button>
            }
            <button type="button" class="btn btn-sm btn-outline-danger" @onclick="ClearAllFilters">
                <i class="fas fa-times me-1"></i>
                清除篩選
            </button>
        </div>
    </div>
    
    <div class="card-body">
        <div class="row g-3">
            @if (FilterDefinitions != null)
            {
                @foreach (var filter in FilterDefinitions.Where(f => !f.IsAdvanced || showAdvanced))
                {
                    @RenderFilter(filter)
                }
            }
        </div>
        
        @if (ShowSearchButton)
        {
            <div class="row mt-3">
                <div class="col-12">
                    <button type="button" class="btn btn-primary" @onclick="HandleSearch">
                        <i class="fas fa-search me-1"></i>
                        搜尋
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public List<SearchFilterDefinition>? FilterDefinitions { get; set; }
    [Parameter] public SearchFilterModel FilterModel { get; set; } = new();
    [Parameter] public EventCallback<SearchFilterModel> OnSearch { get; set; }
    [Parameter] public EventCallback<SearchFilterModel> OnFilterChanged { get; set; }
    [Parameter] public bool AutoSearch { get; set; } = false;
    [Parameter] public bool ShowSearchButton { get; set; } = true;
    [Parameter] public bool ShowAdvancedToggle { get; set; } = true;
    [Parameter] public int SearchDelayMs { get; set; } = 300;

    private bool showAdvanced = false;
    private Timer? searchTimer;

    private async Task HandleSearch()
    {
        if (OnSearch.HasDelegate)
        {
            await OnSearch.InvokeAsync(FilterModel);
        }
    }

    private async Task HandleFilterChanged()
    {
        if (OnFilterChanged.HasDelegate)
        {
            await OnFilterChanged.InvokeAsync(FilterModel);
        }

        if (AutoSearch)
        {
            // 延遲搜尋，避免頻繁觸發
            searchTimer?.Dispose();
            searchTimer = new Timer(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    await HandleSearch();
                    StateHasChanged();
                });
            }, null, SearchDelayMs, Timeout.Infinite);
        }
    }

    private void ToggleAdvancedFilters()
    {
        showAdvanced = !showAdvanced;
    }

    private async Task ClearAllFilters()
    {
        FilterModel = new SearchFilterModel();
        await HandleFilterChanged();
    }

    private bool HasAdvancedFilters()
    {
        return FilterDefinitions?.Any(f => f.IsAdvanced) ?? false;
    }

    private RenderFragment RenderFilter(SearchFilterDefinition filter) => builder =>
    {
        var containerCssClass = filter.ContainerCssClass ?? "col-md-4";
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", containerCssClass);
        
        // 欄位標籤
        if (!string.IsNullOrEmpty(filter.Label))
        {
            builder.OpenElement(2, "label");
            builder.AddAttribute(3, "class", "form-label");
            builder.AddAttribute(4, "for", filter.PropertyName);
            builder.AddContent(5, filter.Label);
            builder.CloseElement();
        }
        
        // 根據篩選類型渲染不同的控制項
        switch (filter.FilterType)
        {
            case SearchFilterType.Text:
                RenderTextFilter(builder, filter, 6);
                break;
            case SearchFilterType.Select:
                RenderSelectFilter(builder, filter, 6);
                break;
            case SearchFilterType.MultiSelect:
                RenderMultiSelectFilter(builder, filter, 6);
                break;
            case SearchFilterType.DateRange:
                RenderDateRangeFilter(builder, filter, 6);
                break;            case SearchFilterType.NumberRange:
                RenderNumberRangeFilter(builder, filter, 6);
                break;
            case SearchFilterType.Boolean:
                RenderCheckboxFilter(builder, filter, 6);
                break;
            default:
                RenderTextFilter(builder, filter, 6);
                break;
        }
        
        builder.CloseElement(); // container div
    };    private void RenderTextFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        builder.OpenElement(sequence, "input");
        builder.AddAttribute(sequence + 1, "type", "text");
        builder.AddAttribute(sequence + 2, "class", "form-control");
        builder.AddAttribute(sequence + 3, "id", filter.PropertyName);
        builder.AddAttribute(sequence + 4, "placeholder", filter.Placeholder);
        
        var currentValue = FilterModel.GetFilterValue(filter.PropertyName)?.ToString() ?? "";
        builder.AddAttribute(sequence + 5, "value", currentValue);        builder.AddAttribute(sequence + 6, "oninput", EventCallback.Factory.Create<string>(this, value =>
        {
            FilterModel.SetFilterValue(filter.PropertyName, value);
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
    }    private void RenderSelectFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        builder.OpenElement(sequence, "select");
        builder.AddAttribute(sequence + 1, "class", "form-select");
        builder.AddAttribute(sequence + 2, "id", filter.PropertyName);        builder.AddAttribute(sequence + 3, "onchange", EventCallback.Factory.Create<string>(this, value =>
        {
            FilterModel.SetFilterValue(filter.PropertyName, value);
            _ = HandleFilterChanged();
        }));
        
        // 空選項
        builder.OpenElement(sequence + 10, "option");
        builder.AddAttribute(sequence + 11, "value", "");
        builder.AddContent(sequence + 12, filter.EmptyOptionText ?? "全部");
        builder.CloseElement();
        
        // 選項
        if (filter.Options != null)
        {
            var currentValue = FilterModel.GetFilterValue(filter.PropertyName)?.ToString();
            var optionSequence = sequence + 20;
            
            foreach (var option in filter.Options)
            {
                builder.OpenElement(optionSequence, "option");
                builder.AddAttribute(optionSequence + 1, "value", option.Value);
                builder.AddAttribute(optionSequence + 2, "selected", option.Value == currentValue);
                builder.AddContent(optionSequence + 3, option.Text);
                builder.CloseElement();
                optionSequence += 4;
            }
        }
        
        builder.CloseElement();
    }private void RenderMultiSelectFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        // 簡化版多選，使用多個 checkbox
        if (filter.Options != null)
        {
            var currentValues = FilterModel.GetFilterValue(filter.PropertyName) as List<string> ?? new List<string>();
            var checkboxSequence = sequence;
            
            foreach (var option in filter.Options)
            {
                builder.OpenElement(checkboxSequence, "div");
                builder.AddAttribute(checkboxSequence + 1, "class", "form-check");
                
                builder.OpenElement(checkboxSequence + 2, "input");
                builder.AddAttribute(checkboxSequence + 3, "type", "checkbox");
                builder.AddAttribute(checkboxSequence + 4, "class", "form-check-input");
                builder.AddAttribute(checkboxSequence + 5, "id", $"{filter.PropertyName}_{option.Value}");
                builder.AddAttribute(checkboxSequence + 6, "value", option.Value);
                builder.AddAttribute(checkboxSequence + 7, "checked", currentValues.Contains(option.Value));
                
                builder.AddAttribute(checkboxSequence + 8, "onchange", EventCallback.Factory.Create(this, () =>
                {
                    if (currentValues.Contains(option.Value))
                        currentValues.Remove(option.Value);
                    else
                        currentValues.Add(option.Value);
                    
                    FilterModel.SetFilterValue(filter.PropertyName, currentValues);
                    _ = HandleFilterChanged();
                }));
                builder.CloseElement();
                
                builder.OpenElement(checkboxSequence + 9, "label");
                builder.AddAttribute(checkboxSequence + 10, "class", "form-check-label");
                builder.AddAttribute(checkboxSequence + 11, "for", $"{filter.PropertyName}_{option.Value}");
                builder.AddContent(checkboxSequence + 12, option.Text);
                builder.CloseElement();
                
                builder.CloseElement();
                checkboxSequence += 13;
            }
        }
    }    private void RenderDateRangeFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        var dateRange = FilterModel.GetFilterValue(filter.PropertyName) as DateRange ?? new DateRange();
        
        // 開始日期
        builder.OpenElement(sequence, "div");
        builder.AddAttribute(sequence + 1, "class", "row g-2");
        
        builder.OpenElement(sequence + 2, "div");
        builder.AddAttribute(sequence + 3, "class", "col-6");
        
        builder.OpenElement(sequence + 4, "input");
        builder.AddAttribute(sequence + 5, "type", "date");
        builder.AddAttribute(sequence + 6, "class", "form-control");
        builder.AddAttribute(sequence + 7, "placeholder", "開始日期");
        
        if (dateRange.StartDate.HasValue)
        {
            builder.AddAttribute(sequence + 8, "value", dateRange.StartDate.Value.ToString("yyyy-MM-dd"));
        }
          builder.AddAttribute(sequence + 9, "onchange", EventCallback.Factory.Create<string>(this, value =>
        {
            if (DateTime.TryParse(value, out var date))
                dateRange.StartDate = date;
            else
                dateRange.StartDate = null;
            FilterModel.SetFilterValue(filter.PropertyName, dateRange);
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        // 結束日期
        builder.OpenElement(sequence + 10, "div");
        builder.AddAttribute(sequence + 11, "class", "col-6");
        
        builder.OpenElement(sequence + 12, "input");
        builder.AddAttribute(sequence + 13, "type", "date");
        builder.AddAttribute(sequence + 14, "class", "form-control");
        builder.AddAttribute(sequence + 15, "placeholder", "結束日期");
        
        if (dateRange.EndDate.HasValue)
        {
            builder.AddAttribute(sequence + 16, "value", dateRange.EndDate.Value.ToString("yyyy-MM-dd"));
        }
          builder.AddAttribute(sequence + 17, "onchange", EventCallback.Factory.Create<string>(this, value =>
        {
            if (DateTime.TryParse(value, out var date))
                dateRange.EndDate = date;
            else
                dateRange.EndDate = null;
            FilterModel.SetFilterValue(filter.PropertyName, dateRange);
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        builder.CloseElement();
    }    private void RenderNumberRangeFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        var numberRange = FilterModel.GetFilterValue(filter.PropertyName) as NumberRange ?? new NumberRange();
        
        // 最小值
        builder.OpenElement(sequence, "div");
        builder.AddAttribute(sequence + 1, "class", "row g-2");
        
        builder.OpenElement(sequence + 2, "div");
        builder.AddAttribute(sequence + 3, "class", "col-6");
        
        builder.OpenElement(sequence + 4, "input");
        builder.AddAttribute(sequence + 5, "type", "number");
        builder.AddAttribute(sequence + 6, "class", "form-control");
        builder.AddAttribute(sequence + 7, "placeholder", "最小值");
        
        if (numberRange.Min.HasValue)
        {
            builder.AddAttribute(sequence + 8, "value", numberRange.Min.Value);
        }
          builder.AddAttribute(sequence + 9, "onchange", EventCallback.Factory.Create<string>(this, value =>
        {
            if (decimal.TryParse(value, out var num))
                numberRange.Min = num;
            else
                numberRange.Min = null;
            FilterModel.SetFilterValue(filter.PropertyName, numberRange);
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        // 最大值
        builder.OpenElement(sequence + 10, "div");
        builder.AddAttribute(sequence + 11, "class", "col-6");
        
        builder.OpenElement(sequence + 12, "input");
        builder.AddAttribute(sequence + 13, "type", "number");
        builder.AddAttribute(sequence + 14, "class", "form-control");
        builder.AddAttribute(sequence + 15, "placeholder", "最大值");
        
        if (numberRange.Max.HasValue)
        {
            builder.AddAttribute(sequence + 16, "value", numberRange.Max.Value);
        }
          builder.AddAttribute(sequence + 17, "onchange", EventCallback.Factory.Create<string>(this, value =>
        {
            if (decimal.TryParse(value, out var num))
                numberRange.Max = num;
            else
                numberRange.Max = null;
            FilterModel.SetFilterValue(filter.PropertyName, numberRange);
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        builder.CloseElement();
    }    private void RenderCheckboxFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        builder.OpenElement(sequence, "div");
        builder.AddAttribute(sequence + 1, "class", "form-check");
        
        builder.OpenElement(sequence + 2, "input");
        builder.AddAttribute(sequence + 3, "type", "checkbox");
        builder.AddAttribute(sequence + 4, "class", "form-check-input");
        builder.AddAttribute(sequence + 5, "id", filter.PropertyName);
        
        var currentValue = FilterModel.GetFilterValue(filter.PropertyName);
        var isChecked = currentValue is bool boolValue && boolValue;
        
        if (isChecked)
        {
            builder.AddAttribute(sequence + 6, "checked", true);
        }
        
        builder.AddAttribute(sequence + 7, "onchange", EventCallback.Factory.Create<bool>(this, value =>
        {
            FilterModel.SetFilterValue(filter.PropertyName, value);
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
        
        builder.OpenElement(sequence + 8, "label");
        builder.AddAttribute(sequence + 9, "class", "form-check-label");
        builder.AddAttribute(sequence + 10, "for", filter.PropertyName);
        builder.AddContent(sequence + 11, filter.Label);
        builder.CloseElement();
        
        builder.CloseElement();
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}
