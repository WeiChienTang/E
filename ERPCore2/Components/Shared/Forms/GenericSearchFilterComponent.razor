@* 通用搜尋篩選組件 - 基於配置驅動 *@
@using ERPCore2.Components.Shared.Forms
@using ERPCore2.Components.Shared.Buttons
@typeparam TModel where TModel : class

<div class="card mb-4">
    <div class="card-body">
        <div class="row g-3">
            @foreach (var filter in FilterDefinitions.Where(f => f.IsDefaultVisible).OrderBy(f => f.Order))
            {
                <div class="@GetFilterColumnClass(filter)">
                    @if (filter.CustomTemplate != null)
                    {
                        @filter.CustomTemplate(FilterModel)
                    }
                    else
                    {
                        @RenderFilter(filter)
                    }
                </div>
            }
            
            @* 動作按鈕區域 *@
            <div class="col-md-12 d-flex justify-content-between align-items-center">
                <div>
                    @if (FilterDefinitions.Any(f => !f.IsDefaultVisible))
                    {
                        <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="ToggleAdvancedFilters">
                            <i class="fas fa-@(ShowAdvancedFilters ? "minus" : "plus") me-1"></i>
                            @(ShowAdvancedFilters ? "隱藏" : "顯示")進階篩選
                        </button>
                    }
                </div>
                
                <div>
                    @if (ShowClearAllButton)
                    {
                        <button type="button" class="btn btn-outline-warning btn-sm me-2" @onclick="ClearAllFilters">
                            <i class="fas fa-times me-1"></i>
                            清除篩選
                        </button>
                    }
                    
                    @if (ShowSearchButton)
                    {
                        <button type="button" class="btn btn-primary btn-sm" @onclick="HandleSearch">
                            <i class="fas fa-search me-1"></i>
                            搜尋
                        </button>
                    }
                </div>
            </div>
        </div>
        
        @* 進階篩選區域 *@
        @if (ShowAdvancedFilters)
        {
            <hr class="my-3" />
            <div class="row g-3">
                @foreach (var filter in FilterDefinitions.Where(f => !f.IsDefaultVisible).OrderBy(f => f.Order))
                {
                    <div class="@GetFilterColumnClass(filter)">
                        @if (filter.CustomTemplate != null)
                        {
                            @filter.CustomTemplate(FilterModel)
                        }
                        else
                        {
                            @RenderFilter(filter)
                        }
                    </div>
                }
            </div>
        }
        
        @* 自定義內容區域 *@
        @if (ChildContent != null)
        {
            <hr class="my-3" />
            @ChildContent
        }
    </div>
</div>

@code {
    [Parameter] public List<SearchFilterDefinition> FilterDefinitions { get; set; } = new();
    [Parameter] public SearchFilterModel FilterModel { get; set; } = new();
    [Parameter] public EventCallback<SearchFilterModel> OnSearch { get; set; }
    [Parameter] public EventCallback<SearchFilterModel> OnFilterChanged { get; set; }
    
    [Parameter] public bool ShowSearchButton { get; set; } = true;
    [Parameter] public bool ShowClearAllButton { get; set; } = true;
    [Parameter] public bool AutoSearch { get; set; } = false;
    [Parameter] public int AutoSearchDelay { get; set; } = 500;
    
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    private bool ShowAdvancedFilters = false;
    private Timer? _searchTimer;
    
    protected override void OnInitialized()
    {
        // 設定預設值
        foreach (var filter in FilterDefinitions.Where(f => f.DefaultValue != null))
        {
            FilterModel.SetFilter(filter.PropertyName, filter.DefaultValue);
        }
    }
    
    private void ToggleAdvancedFilters()
    {
        ShowAdvancedFilters = !ShowAdvancedFilters;
    }
    
    private async Task ClearAllFilters()
    {
        FilterModel.Clear();
        
        // 重新設定預設值
        foreach (var filter in FilterDefinitions.Where(f => f.DefaultValue != null))
        {
            FilterModel.SetFilter(filter.PropertyName, filter.DefaultValue);
        }
        
        StateHasChanged();
        
        if (AutoSearch)
        {
            await HandleSearch();
        }
        
        if (OnFilterChanged.HasDelegate)
        {
            await OnFilterChanged.InvokeAsync(FilterModel);
        }
    }
    
    private async Task HandleSearch()
    {
        if (OnSearch.HasDelegate)
        {
            await OnSearch.InvokeAsync(FilterModel);
        }
    }
    
    private async Task HandleFilterValueChanged(string propertyName, object? value)
    {
        FilterModel.SetFilter(propertyName, value);
        
        if (OnFilterChanged.HasDelegate)
        {
            await OnFilterChanged.InvokeAsync(FilterModel);
        }
        
        if (AutoSearch)
        {
            _searchTimer?.Dispose();
            _searchTimer = new Timer(async _ =>
            {
                await InvokeAsync(HandleSearch);
            }, null, AutoSearchDelay, Timeout.Infinite);
        }
    }
    
    private string GetFilterColumnClass(SearchFilterDefinition filter)
    {
        var baseClass = $"col-md-{filter.ColumnWidth}";
        return string.IsNullOrEmpty(filter.CssClass) ? baseClass : $"{baseClass} {filter.CssClass}";
    }
    
    private RenderFragment RenderFilter(SearchFilterDefinition filter) => builder =>
    {
        // 標籤
        if (!string.IsNullOrEmpty(filter.Label))
        {
            builder.OpenElement(0, "label");
            builder.AddAttribute(1, "class", "form-label");
            builder.AddContent(2, filter.Label);
            builder.CloseElement();
        }
        
        // 篩選字段
        switch (filter.FilterType)
        {
            case FilterType.Text:
                RenderTextFilter(builder, filter);
                break;
            case FilterType.Select:
                RenderSelectFilter(builder, filter);
                break;
            case FilterType.MultiSelect:
                RenderMultiSelectFilter(builder, filter);
                break;
            case FilterType.DateRange:
                RenderDateRangeFilter(builder, filter);
                break;
            case FilterType.NumberRange:
                RenderNumberRangeFilter(builder, filter);
                break;
            case FilterType.Checkbox:
                RenderCheckboxFilter(builder, filter);
                break;
        }
        
        // 說明文字
        if (!string.IsNullOrEmpty(filter.HelpText))
        {
            builder.OpenElement(100, "small");
            builder.AddAttribute(101, "class", "form-text text-muted");
            builder.AddContent(102, filter.HelpText);
            builder.CloseElement();
        }
    };
    
    private void RenderTextFilter(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, SearchFilterDefinition filter)
    {
        var currentValue = FilterModel.GetFilter<string>(filter.PropertyName) ?? "";
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "input-group");
        
        builder.OpenElement(2, "input");
        builder.AddAttribute(3, "type", "text");
        builder.AddAttribute(4, "class", "form-control");
        builder.AddAttribute(5, "placeholder", filter.Placeholder ?? "");
        builder.AddAttribute(6, "value", currentValue);
        builder.AddAttribute(7, "oninput", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, async (args) =>
        {
            await HandleFilterValueChanged(filter.PropertyName, args.Value?.ToString());
        }));
        builder.CloseElement();
        
        if (filter.ShowClearButton && !string.IsNullOrEmpty(currentValue))
        {
            builder.OpenElement(8, "button");
            builder.AddAttribute(9, "type", "button");
            builder.AddAttribute(10, "class", "btn btn-outline-secondary");
            builder.AddAttribute(11, "onclick", EventCallback.Factory.Create(this, async () =>
            {
                await HandleFilterValueChanged(filter.PropertyName, "");
            }));
            builder.OpenElement(12, "i");
            builder.AddAttribute(13, "class", "fas fa-times");
            builder.CloseElement();
            builder.CloseElement();
        }
        
        builder.CloseElement();
    }
    
    private void RenderSelectFilter(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, SearchFilterDefinition filter)
    {
        var currentValue = FilterModel.GetFilter<string>(filter.PropertyName) ?? "";
        
        builder.OpenElement(0, "select");
        builder.AddAttribute(1, "class", "form-select");
        builder.AddAttribute(2, "value", currentValue);
        builder.AddAttribute(3, "onchange", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, async (args) =>
        {
            await HandleFilterValueChanged(filter.PropertyName, args.Value?.ToString());
        }));
        
        // 預設選項
        builder.OpenElement(4, "option");
        builder.AddAttribute(5, "value", "");
        builder.AddContent(6, $"全部{filter.Label}");
        builder.CloseElement();
        
        // 選項清單
        if (filter.SelectOptions != null)
        {
            foreach (var option in filter.SelectOptions)
            {
                builder.OpenElement(7, "option");
                builder.AddAttribute(8, "value", option.Value);
                if (option.IsDisabled) builder.AddAttribute(9, "disabled", true);
                builder.AddContent(10, option.Text);
                builder.CloseElement();
            }
        }
        
        builder.CloseElement();
    }
    
    private void RenderMultiSelectFilter(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, SearchFilterDefinition filter)
    {
        // TODO: 實作多選下拉，可使用第三方元件如 Select2 或自製
        builder.AddContent(0, "多選篩選待實作");
    }
    
    private void RenderDateRangeFilter(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, SearchFilterDefinition filter)
    {
        var startValue = FilterModel.GetFilter<DateTime?>($"{filter.PropertyName}_Start");
        var endValue = FilterModel.GetFilter<DateTime?>($"{filter.PropertyName}_End");
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "row g-2");
        
        // 開始日期
        builder.OpenElement(2, "div");
        builder.AddAttribute(3, "class", "col-6");
        builder.OpenElement(4, "input");
        builder.AddAttribute(5, "type", "date");
        builder.AddAttribute(6, "class", "form-control");
        builder.AddAttribute(7, "placeholder", "開始日期");
        if (startValue.HasValue)
        {
            builder.AddAttribute(8, "value", startValue.Value.ToString("yyyy-MM-dd"));
        }
        builder.AddAttribute(9, "onchange", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, async (args) =>
        {
            if (DateTime.TryParse(args.Value?.ToString(), out var date))
            {
                await HandleFilterValueChanged($"{filter.PropertyName}_Start", date);
            }
            else
            {
                await HandleFilterValueChanged($"{filter.PropertyName}_Start", null);
            }
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        // 結束日期
        builder.OpenElement(10, "div");
        builder.AddAttribute(11, "class", "col-6");
        builder.OpenElement(12, "input");
        builder.AddAttribute(13, "type", "date");
        builder.AddAttribute(14, "class", "form-control");
        builder.AddAttribute(15, "placeholder", "結束日期");
        if (endValue.HasValue)
        {
            builder.AddAttribute(16, "value", endValue.Value.ToString("yyyy-MM-dd"));
        }
        builder.AddAttribute(17, "onchange", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, async (args) =>
        {
            if (DateTime.TryParse(args.Value?.ToString(), out var date))
            {
                await HandleFilterValueChanged($"{filter.PropertyName}_End", date);
            }
            else
            {
                await HandleFilterValueChanged($"{filter.PropertyName}_End", null);
            }
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        builder.CloseElement();
    }
    
    private void RenderNumberRangeFilter(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, SearchFilterDefinition filter)
    {
        var minValue = FilterModel.GetFilter<decimal?>($"{filter.PropertyName}_Min");
        var maxValue = FilterModel.GetFilter<decimal?>($"{filter.PropertyName}_Max");
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "row g-2");
        
        // 最小值
        builder.OpenElement(2, "div");
        builder.AddAttribute(3, "class", "col-6");
        builder.OpenElement(4, "input");
        builder.AddAttribute(5, "type", "number");
        builder.AddAttribute(6, "class", "form-control");
        builder.AddAttribute(7, "placeholder", "最小值");
        if (minValue.HasValue)
        {
            builder.AddAttribute(8, "value", minValue.Value);
        }
        builder.AddAttribute(9, "onchange", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, async (args) =>
        {
            if (decimal.TryParse(args.Value?.ToString(), out var value))
            {
                await HandleFilterValueChanged($"{filter.PropertyName}_Min", value);
            }
            else
            {
                await HandleFilterValueChanged($"{filter.PropertyName}_Min", null);
            }
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        // 最大值
        builder.OpenElement(10, "div");
        builder.AddAttribute(11, "class", "col-6");
        builder.OpenElement(12, "input");
        builder.AddAttribute(13, "type", "number");
        builder.AddAttribute(14, "class", "form-control");
        builder.AddAttribute(15, "placeholder", "最大值");
        if (maxValue.HasValue)
        {
            builder.AddAttribute(16, "value", maxValue.Value);
        }
        builder.AddAttribute(17, "onchange", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, async (args) =>
        {
            if (decimal.TryParse(args.Value?.ToString(), out var value))
            {
                await HandleFilterValueChanged($"{filter.PropertyName}_Max", value);
            }
            else
            {
                await HandleFilterValueChanged($"{filter.PropertyName}_Max", null);
            }
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        builder.CloseElement();
    }
    
    private void RenderCheckboxFilter(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder builder, SearchFilterDefinition filter)
    {
        var currentValue = FilterModel.GetFilter<bool>(filter.PropertyName);
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "form-check");
        
        builder.OpenElement(2, "input");
        builder.AddAttribute(3, "type", "checkbox");
        builder.AddAttribute(4, "class", "form-check-input");
        builder.AddAttribute(5, "checked", currentValue);
        builder.AddAttribute(6, "onchange", EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, async (args) =>
        {
            await HandleFilterValueChanged(filter.PropertyName, bool.Parse(args.Value?.ToString() ?? "false"));
        }));
        builder.CloseElement();
        
        builder.OpenElement(7, "label");
        builder.AddAttribute(8, "class", "form-check-label");
        builder.AddContent(9, filter.Label);
        builder.CloseElement();
        
        builder.CloseElement();
    }
    
    public void Dispose()
    {
        _searchTimer?.Dispose();
    }
}
