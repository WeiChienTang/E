@* 通用搜尋篩選組件 - 基於配置驅動的動態篩選 *@
@using System.Reflection
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.Forms
@inject IJSRuntime JSRuntime
@typeparam TModel
@implements IDisposable

<div class="card mb-3">    
    <div class="card-header d-flex justify-content-between align-items-center">        
        <h6 class="card-title mb-0">
            <i class="fas fa-filter me-2"></i>
            搜尋篩選
        </h6>        
        <div class="d-flex gap-2">            
            <GenericButtonComponent Variant="ButtonVariant.Danger" Text="清除篩選" 
                                   IconClass="fas fa-times me-1" OnClick="ClearAllFilters" 
                                   CssClass="search-filter-btn search-clear-btn" />
        </div>
    </div>
    
    <div class="card-body">
        <div class="row g-3">
            @if (FilterDefinitions != null)
            {
                @foreach (var filter in FilterDefinitions)
                {
                    @RenderFilter(filter)
                }
            }        
        </div>
    </div>
</div>

@code {
    [Parameter] public List<SearchFilterDefinition>? FilterDefinitions { get; set; }
    [Parameter] public SearchFilterModel FilterModel { get; set; } = new();
    [Parameter] public EventCallback<SearchFilterModel> OnSearch { get; set; }
    [Parameter] public EventCallback<SearchFilterModel> OnFilterChanged { get; set; }
    [Parameter] public bool AutoSearch { get; set; } = true;
    [Parameter] public bool ShowSearchButton { get; set; } = false;
    [Parameter] public int SearchDelayMs { get; set; } = 300;

    private Timer? searchTimer;

    // 自動完成相關狀態
    private readonly Dictionary<string, List<SelectOption>> autoCompleteOptions = new();
    private readonly Dictionary<string, bool> autoCompleteLoading = new();
    private readonly Dictionary<string, bool> autoCompleteVisible = new();
    private readonly Dictionary<string, Timer?> autoCompleteTimers = new();
    private readonly Dictionary<string, string> autoCompleteDisplayValues = new();
    
    // 鍵盤導航狀態
    private readonly Dictionary<string, int> highlightedOptionIndex = new();
    private readonly Dictionary<string, bool> keyboardNavigationActive = new();

    private async Task HandleSearch()
    {
        if (OnSearch.HasDelegate)
        {
            await OnSearch.InvokeAsync(FilterModel);
        }
    }

    private async Task HandleFilterChanged()
    {
        if (OnFilterChanged.HasDelegate)
        {
            await OnFilterChanged.InvokeAsync(FilterModel);
        }

        if (AutoSearch)
        {
            // 延遲搜尋，避免頻繁觸發
            searchTimer?.Dispose();
            searchTimer = new Timer(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    await HandleSearch();
                    StateHasChanged();
                });
            }, null, SearchDelayMs, Timeout.Infinite);
        }
    }

    private async Task ClearAllFilters()
    {
        FilterModel = new SearchFilterModel();
        await HandleFilterChanged();
    }    private RenderFragment RenderFilter(SearchFilterDefinition filter) => builder =>
    {
        var containerCssClass = filter.ContainerCssClass ?? "col-md-2";
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", containerCssClass);
        
        // 欄位標籤
        if (!string.IsNullOrEmpty(filter.Label))
        {
            builder.OpenElement(2, "label");
            builder.AddAttribute(3, "class", "form-label");
            builder.AddAttribute(4, "for", filter.PropertyName);
            builder.AddContent(5, filter.Label);
            builder.CloseElement();
        }
        
        // 根據篩選類型渲染不同的控制項
        switch (filter.FilterType)
        {
            case SearchFilterType.Text:
                RenderTextFilter(builder, filter, 6);
                break;
            case SearchFilterType.Select:
                RenderSelectFilter(builder, filter, 6);
                break;
            case SearchFilterType.MultiSelect:
                RenderMultiSelectFilter(builder, filter, 6);
                break;            
            case SearchFilterType.DateRange:
                RenderDateRangeFilter(builder, filter, 6);
                break;            
            case SearchFilterType.NumberRange:
                RenderNumberRangeFilter(builder, filter, 6);
                break;
            case SearchFilterType.Boolean:
                RenderCheckboxFilter(builder, filter, 6);
                break;
            case SearchFilterType.AutoComplete:
                RenderAutoCompleteFilter(builder, filter, 6);
                break;
            default:
                RenderTextFilter(builder, filter, 6);
                break;
        }
        
        builder.CloseElement(); // container div
    };   

    private void RenderTextFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        builder.OpenElement(sequence, "input");
        builder.AddAttribute(sequence + 1, "type", "text");
        builder.AddAttribute(sequence + 2, "class", "form-control");
        builder.AddAttribute(sequence + 3, "id", filter.PropertyName);
        builder.AddAttribute(sequence + 4, "placeholder", filter.Placeholder);
          var currentValue = FilterModel.GetFilterValue(filter.PropertyName)?.ToString() ?? "";
        builder.AddAttribute(sequence + 5, "value", currentValue);        builder.AddAttribute(sequence + 6, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(this, args =>
        {
            FilterModel.SetFilterValue(filter.PropertyName, args.Value?.ToString());
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
    }    

    private void RenderSelectFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        builder.OpenElement(sequence, "select");
        builder.AddAttribute(sequence + 1, "class", "form-select");
        builder.AddAttribute(sequence + 2, "id", filter.PropertyName);        builder.AddAttribute(sequence + 3, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, args =>
        {
            FilterModel.SetFilterValue(filter.PropertyName, args.Value?.ToString());
            _ = HandleFilterChanged();
        }));
        
        // 空選項
        builder.OpenElement(sequence + 10, "option");
        builder.AddAttribute(sequence + 11, "value", "");
        var currentValue = FilterModel.GetFilterValue(filter.PropertyName)?.ToString();
        builder.AddAttribute(sequence + 12, "selected", string.IsNullOrWhiteSpace(currentValue));
        builder.AddContent(sequence + 13, filter.EmptyOptionText ?? "全部");
        builder.CloseElement();
        
        // 選項
        if (filter.Options != null)
        {
            var optionSequence = sequence + 20;
            
            foreach (var option in filter.Options)
            {
                builder.OpenElement(optionSequence, "option");
                builder.AddAttribute(optionSequence + 1, "value", option.Value);
                builder.AddAttribute(optionSequence + 2, "selected", option.Value == currentValue);
                builder.AddContent(optionSequence + 3, option.Text);
                builder.CloseElement();
                optionSequence += 4;
            }
        }
        
        builder.CloseElement();
    }
    
    private void RenderMultiSelectFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        // 簡化版多選，使用多個 checkbox
        if (filter.Options != null)
        {
            var currentValues = FilterModel.GetFilterValue(filter.PropertyName) as List<string> ?? new List<string>();
            var checkboxSequence = sequence;
            
            foreach (var option in filter.Options)
            {
                builder.OpenElement(checkboxSequence, "div");
                builder.AddAttribute(checkboxSequence + 1, "class", "form-check");
                
                builder.OpenElement(checkboxSequence + 2, "input");
                builder.AddAttribute(checkboxSequence + 3, "type", "checkbox");
                builder.AddAttribute(checkboxSequence + 4, "class", "form-check-input");
                builder.AddAttribute(checkboxSequence + 5, "id", $"{filter.PropertyName}_{option.Value}");
                builder.AddAttribute(checkboxSequence + 6, "value", option.Value);
                builder.AddAttribute(checkboxSequence + 7, "checked", currentValues.Contains(option.Value));
                  builder.AddAttribute(checkboxSequence + 8, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, args =>
                {
                    var isChecked = args.Value is bool boolValue ? boolValue : bool.Parse(args.Value?.ToString() ?? "false");
                    
                    if (isChecked && !currentValues.Contains(option.Value))
                        currentValues.Add(option.Value);
                    else if (!isChecked && currentValues.Contains(option.Value))
                        currentValues.Remove(option.Value);
                    
                    FilterModel.SetFilterValue(filter.PropertyName, currentValues);
                    _ = HandleFilterChanged();
                }));
                builder.CloseElement();
                
                builder.OpenElement(checkboxSequence + 9, "label");
                builder.AddAttribute(checkboxSequence + 10, "class", "form-check-label");
                builder.AddAttribute(checkboxSequence + 11, "for", $"{filter.PropertyName}_{option.Value}");
                builder.AddContent(checkboxSequence + 12, option.Text);
                builder.CloseElement();
                
                builder.CloseElement();
                checkboxSequence += 13;
            }
        }
    }    
    
    private void RenderDateRangeFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        var dateRange = FilterModel.GetFilterValue(filter.PropertyName) as DateRange ?? new DateRange();
        
        // 開始日期
        builder.OpenElement(sequence, "div");
        builder.AddAttribute(sequence + 1, "class", "row g-2");
        
        builder.OpenElement(sequence + 2, "div");
        builder.AddAttribute(sequence + 3, "class", "col-6");
        
        builder.OpenElement(sequence + 4, "input");
        builder.AddAttribute(sequence + 5, "type", "date");
        builder.AddAttribute(sequence + 6, "class", "form-control");
        builder.AddAttribute(sequence + 7, "placeholder", "開始日期");
        
        if (dateRange.StartDate.HasValue)
        {
            builder.AddAttribute(sequence + 8, "value", dateRange.StartDate.Value.ToString("yyyy-MM-dd"));
        }          builder.AddAttribute(sequence + 9, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, args =>
        {
            if (DateTime.TryParse(args.Value?.ToString(), out var date))
                dateRange.StartDate = date;
            else
                dateRange.StartDate = null;
            FilterModel.SetFilterValue(filter.PropertyName, dateRange);
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        // 結束日期
        builder.OpenElement(sequence + 10, "div");
        builder.AddAttribute(sequence + 11, "class", "col-6");
        
        builder.OpenElement(sequence + 12, "input");
        builder.AddAttribute(sequence + 13, "type", "date");
        builder.AddAttribute(sequence + 14, "class", "form-control");
        builder.AddAttribute(sequence + 15, "placeholder", "結束日期");
        
        if (dateRange.EndDate.HasValue)
        {
            builder.AddAttribute(sequence + 16, "value", dateRange.EndDate.Value.ToString("yyyy-MM-dd"));
        }          builder.AddAttribute(sequence + 17, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, args =>
        {
            if (DateTime.TryParse(args.Value?.ToString(), out var date))
                dateRange.EndDate = date;
            else
                dateRange.EndDate = null;
            FilterModel.SetFilterValue(filter.PropertyName, dateRange);
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        builder.CloseElement();
    }    
    
    private void RenderNumberRangeFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        var numberRange = FilterModel.GetFilterValue(filter.PropertyName) as NumberRange ?? new NumberRange();
        
        // 最小值
        builder.OpenElement(sequence, "div");
        builder.AddAttribute(sequence + 1, "class", "row g-2");
        
        builder.OpenElement(sequence + 2, "div");
        builder.AddAttribute(sequence + 3, "class", "col-6");
        
        builder.OpenElement(sequence + 4, "input");
        builder.AddAttribute(sequence + 5, "type", "number");
        builder.AddAttribute(sequence + 6, "class", "form-control");
        builder.AddAttribute(sequence + 7, "placeholder", "最小值");
        
        if (numberRange.Min.HasValue)
        {
            builder.AddAttribute(sequence + 8, "value", numberRange.Min.Value);
        }          builder.AddAttribute(sequence + 9, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, args =>
        {
            if (decimal.TryParse(args.Value?.ToString(), out var num))
                numberRange.Min = num;
            else
                numberRange.Min = null;
            FilterModel.SetFilterValue(filter.PropertyName, numberRange);
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        // 最大值
        builder.OpenElement(sequence + 10, "div");
        builder.AddAttribute(sequence + 11, "class", "col-6");
        
        builder.OpenElement(sequence + 12, "input");
        builder.AddAttribute(sequence + 13, "type", "number");
        builder.AddAttribute(sequence + 14, "class", "form-control");
        builder.AddAttribute(sequence + 15, "placeholder", "最大值");
        
        if (numberRange.Max.HasValue)
        {
            builder.AddAttribute(sequence + 16, "value", numberRange.Max.Value);
        }          builder.AddAttribute(sequence + 17, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, args =>
        {
            if (decimal.TryParse(args.Value?.ToString(), out var num))
                numberRange.Max = num;
            else
                numberRange.Max = null;
            FilterModel.SetFilterValue(filter.PropertyName, numberRange);
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
        builder.CloseElement();
        
        builder.CloseElement();
    }    
    
    private void RenderCheckboxFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        builder.OpenElement(sequence, "div");
        builder.AddAttribute(sequence + 1, "class", "form-check");
        
        builder.OpenElement(sequence + 2, "input");
        builder.AddAttribute(sequence + 3, "type", "checkbox");
        builder.AddAttribute(sequence + 4, "class", "form-check-input");
        builder.AddAttribute(sequence + 5, "id", filter.PropertyName);
        
        var currentValue = FilterModel.GetFilterValue(filter.PropertyName);
        var isChecked = currentValue is bool boolValue && boolValue;
        
        if (isChecked)
        {
            builder.AddAttribute(sequence + 6, "checked", true);
        }
          builder.AddAttribute(sequence + 7, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, args =>
        {
            var isChecked = args.Value is bool boolValue ? boolValue : bool.Parse(args.Value?.ToString() ?? "false");
            FilterModel.SetFilterValue(filter.PropertyName, isChecked);
            _ = HandleFilterChanged();
        }));
        builder.CloseElement();
        
        builder.OpenElement(sequence + 8, "label");
        builder.AddAttribute(sequence + 9, "class", "form-check-label");
        builder.AddAttribute(sequence + 10, "for", filter.PropertyName);
        builder.AddContent(sequence + 11, filter.Label);
        builder.CloseElement();
          builder.CloseElement();
    }

    private void RenderAutoCompleteFilter(RenderTreeBuilder builder, SearchFilterDefinition filter, int sequence)
    {
        var fieldId = filter.PropertyName;
        var currentValue = FilterModel.GetFilterValue(filter.PropertyName);
        var displayValue = autoCompleteDisplayValues.GetValueOrDefault(fieldId, currentValue?.ToString() ?? "");
          // 容器 div
        builder.OpenElement(sequence, "div");
        builder.AddAttribute(sequence + 1, "class", "autocomplete-container");
        
        // 輸入框
        builder.OpenElement(sequence + 2, "input");
        builder.AddAttribute(sequence + 3, "type", "text");
        builder.AddAttribute(sequence + 4, "class", "form-control");
        builder.AddAttribute(sequence + 5, "id", fieldId);
        builder.AddAttribute(sequence + 6, "placeholder", filter.Placeholder);
        builder.AddAttribute(sequence + 7, "value", displayValue);
        
        // 輸入事件處理
        builder.AddAttribute(sequence + 8, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(this, args =>
        {
            var inputValue = args.Value?.ToString() ?? "";
            autoCompleteDisplayValues[fieldId] = inputValue;
            _ = HandleAutoCompleteInput(filter, inputValue);
        }));
        
        // 焦點事件處理
        builder.AddAttribute(sequence + 9, "onfocus", EventCallback.Factory.Create(this, () =>
        {
            var inputValue = autoCompleteDisplayValues.GetValueOrDefault(fieldId, "");
            // 當 MinSearchLength 為 0 時，允許空輸入觸發搜尋以顯示所有選項
            if (filter.MinSearchLength == 0 || (!string.IsNullOrEmpty(inputValue) && inputValue.Length >= filter.MinSearchLength))
            {
                _ = HandleAutoCompleteInput(filter, inputValue);
            }
        }));
        
        // 失去焦點事件處理
        builder.AddAttribute(sequence + 10, "onblur", EventCallback.Factory.Create(this, () =>
        {
            // 延遲隱藏下拉選單，讓使用者有時間點擊選項
            Timer? timer = null;
            timer = new Timer(_ =>
            {
                autoCompleteVisible[fieldId] = false;
                InvokeAsync(StateHasChanged);
                timer?.Dispose();
            }, null, 150, Timeout.Infinite);
        }));
        
        // 鍵盤事件處理
        builder.AddAttribute(sequence + 11, "onkeydown", EventCallback.Factory.Create<KeyboardEventArgs>(this, args =>
        {
            _ = HandleKeyDown(filter, args);
        }));
        
        builder.CloseElement(); // input
        
        // 載入指示器
        if (autoCompleteLoading.GetValueOrDefault(fieldId, false))
        {
            builder.OpenElement(sequence + 20, "div");
            builder.AddAttribute(sequence + 21, "class", "position-absolute");
            builder.AddAttribute(sequence + 22, "style", "right: 10px; top: 50%; transform: translateY(-50%);");
            builder.OpenElement(sequence + 23, "span");
            builder.AddAttribute(sequence + 24, "class", "spinner-border spinner-border-sm");
            builder.CloseElement();
            builder.CloseElement();
        }
        
        // 下拉選項
        if (autoCompleteVisible.GetValueOrDefault(fieldId, false) && autoCompleteOptions.ContainsKey(fieldId))
        {
            var options = autoCompleteOptions[fieldId];
            if (options.Any())
            {
                builder.OpenElement(sequence + 30, "div");
                builder.AddAttribute(sequence + 31, "class", "autocomplete-dropdown position-absolute w-100");
                builder.AddAttribute(sequence + 32, "style", "max-height: 200px; overflow-y: auto; z-index: 1000;");
                
                var optionSequence = sequence + 40;
                var optionIndex = 0;
                foreach (var option in options)
                {
                    var isHighlighted = keyboardNavigationActive.GetValueOrDefault(fieldId, false) && 
                                       highlightedOptionIndex.GetValueOrDefault(fieldId, -1) == optionIndex;
                    
                    builder.OpenElement(optionSequence, "button");
                    builder.AddAttribute(optionSequence + 1, "type", "button");                    builder.AddAttribute(optionSequence + 2, "class", $"autocomplete-item{(isHighlighted ? " highlighted" : "")}");
                    builder.AddAttribute(optionSequence + 3, "id", $"{fieldId}_option_{optionIndex}");
                    builder.AddAttribute(optionSequence + 4, "onmousedown", EventCallback.Factory.Create(this, () =>
                    {
                        autoCompleteDisplayValues[fieldId] = option.Text;
                        FilterModel.SetFilterValue(filter.PropertyName, option.Value);
                        HideDropdown(fieldId);
                        _ = HandleFilterChanged();
                    }));
                    builder.AddAttribute(optionSequence + 5, "onmouseenter", EventCallback.Factory.Create(this, () =>
                    {
                        highlightedOptionIndex[fieldId] = optionIndex;
                        keyboardNavigationActive[fieldId] = false; // 滑鼠懸停時停用鍵盤導航高亮
                        StateHasChanged();
                    }));
                    builder.AddContent(optionSequence + 6, option.Text);
                    builder.CloseElement();
                    
                    optionSequence += 7;
                    optionIndex++;
                }
                
                builder.CloseElement(); // dropdown-menu
            }
        }
        
        builder.CloseElement(); // container div
    }

    private Task HandleAutoCompleteInput(SearchFilterDefinition filter, string inputValue)
    {
        var fieldId = filter.PropertyName;
        
        // 清除之前的計時器
        if (autoCompleteTimers.ContainsKey(fieldId))
        {
            autoCompleteTimers[fieldId]?.Dispose();
        }
        
        // 如果輸入長度不足，檢查 MinSearchLength 設定
        if (inputValue.Length < filter.MinSearchLength)
        {
            autoCompleteVisible[fieldId] = false;
            // 如果 MinSearchLength > 0，清空篩選值
            if (filter.MinSearchLength > 0)
            {
                FilterModel.SetFilterValue(filter.PropertyName, "");
                _ = HandleFilterChanged();
            }
            StateHasChanged();
            return Task.CompletedTask;
        }
        
        // 設置載入狀態
        autoCompleteLoading[fieldId] = true;
        StateHasChanged();
        
        // 設置延遲搜尋計時器
        autoCompleteTimers[fieldId] = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                try
                {
                    if (filter.SearchFunction != null)
                    {
                        var options = await filter.SearchFunction(inputValue);
                        autoCompleteOptions[fieldId] = options;
                        autoCompleteVisible[fieldId] = options.Any();
                        ResetKeyboardNavigation(fieldId);
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"AutoComplete search error: {ex.Message}");
                    autoCompleteOptions[fieldId] = new List<SelectOption>();
                    autoCompleteVisible[fieldId] = false;
                }
                finally
                {
                    autoCompleteLoading[fieldId] = false;
                    StateHasChanged();
                }
            });
        }, null, filter.AutoCompleteDelayMs, Timeout.Infinite);
        
        return Task.CompletedTask;
    }

    private async Task HandleKeyDown(SearchFilterDefinition filter, KeyboardEventArgs args)
    {
        var fieldId = filter.PropertyName;
        var options = autoCompleteOptions.GetValueOrDefault(fieldId, new List<SelectOption>());
        
        switch (args.Key)
        {
            case "ArrowDown":
                // 如果下拉選單未顯示，顯示它
                if (!autoCompleteVisible.GetValueOrDefault(fieldId, false))
                {
                    var inputValue = autoCompleteDisplayValues.GetValueOrDefault(fieldId, "");
                    // 當 MinSearchLength 為 0 時，允許空輸入觸發搜尋
                    if (filter.MinSearchLength == 0 || (!string.IsNullOrEmpty(inputValue) && inputValue.Length >= filter.MinSearchLength))
                    {
                        await HandleAutoCompleteInput(filter, inputValue);
                    }
                }
                else if (options.Any())
                {
                    MoveHighlight(fieldId, options, 1);
                }
                break;
                
            case "ArrowUp":
                if (autoCompleteVisible.GetValueOrDefault(fieldId, false) && options.Any())
                {
                    MoveHighlight(fieldId, options, -1);
                }
                break;
                
            case "Enter":
                if (autoCompleteVisible.GetValueOrDefault(fieldId, false) && options.Any())
                {
                    await SelectHighlightedOption(filter, options);
                }
                break;
                
            case "Escape":
                HideDropdown(fieldId);
                break;
                
            case "Tab":
                HideDropdown(fieldId);
                // 不阻止 Tab，讓它正常移動到下一個欄位
                break;
        }
        
        StateHasChanged();
    }

    private void MoveHighlight(string fieldId, List<SelectOption> options, int direction)
    {
        if (!options.Any()) return;
        
        var currentIndex = highlightedOptionIndex.GetValueOrDefault(fieldId, -1);
        var newIndex = currentIndex + direction;
        
        // 循環導航
        if (newIndex < 0)
            newIndex = options.Count - 1;
        else if (newIndex >= options.Count)
            newIndex = 0;
            
        highlightedOptionIndex[fieldId] = newIndex;
        keyboardNavigationActive[fieldId] = true;
        
        // 滾動到可見區域
        _ = ScrollToHighlightedOption(fieldId, newIndex);
    }

    private async Task ScrollToHighlightedOption(string fieldId, int optionIndex)
    {
        try
        {
            var optionId = $"{fieldId}_option_{optionIndex}";
            await JSRuntime.InvokeVoidAsync("scrollToElement", optionId);
        }
        catch (Exception ex)
        {
            // 靜默處理滾動錯誤，不影響主要功能
            Console.Error.WriteLine($"ScrollToHighlightedOption error: {ex.Message}");
        }
    }

    private Task SelectHighlightedOption(SearchFilterDefinition filter, List<SelectOption> options)
    {
        var fieldId = filter.PropertyName;
        var highlightedIndex = highlightedOptionIndex.GetValueOrDefault(fieldId, -1);
        
        if (highlightedIndex >= 0 && highlightedIndex < options.Count)
        {
            var selectedOption = options[highlightedIndex];
            autoCompleteDisplayValues[fieldId] = selectedOption.Text;
            FilterModel.SetFilterValue(filter.PropertyName, selectedOption.Value);
            HideDropdown(fieldId);
            _ = HandleFilterChanged();
        }
        
        return Task.CompletedTask;
    }

    private void HideDropdown(string fieldId)
    {
        autoCompleteVisible[fieldId] = false;
        ResetKeyboardNavigation(fieldId);
    }

    private void ResetKeyboardNavigation(string fieldId)
    {
        highlightedOptionIndex[fieldId] = -1;
        keyboardNavigationActive[fieldId] = false;
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
        
        // 清理所有自動完成計時器
        foreach (var timer in autoCompleteTimers.Values)
        {
            timer?.Dispose();
        }
        autoCompleteTimers.Clear();
    }
}
