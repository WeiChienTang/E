@* 採購退回明細管理組件 - 使用 InteractiveTableComponent 統一UI 並整合自動空行功能 *@

@inject IProductService ProductService
@inject IPurchaseReceivingService PurchaseReceivingService
@inject IPurchaseReturnDetailService PurchaseReturnDetailService
@inject INotificationService NotificationService

@if (!EffectiveSupplierId.HasValue || EffectiveSupplierId.Value <= 0)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="supplier-warning">
                <p class="text-muted">選擇廠商後即可查看該廠商的退回商品</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <InteractiveTableComponent TItem="ReturnItem" 
                                      Items="@ReturnItems"
                                      ColumnDefinitions="@GetColumnDefinitions()"
                                      IsReadOnly="@IsReadOnly"
                                      ShowRowNumbers="false"
                                      EmptyMessage="@EmptyMessage"
                                      ShowBuiltInActions="true"
                                      ShowBuiltInDeleteButton="false"
                                      CustomActionsTemplate="@GetCustomActionsTemplate"
                                      ActionsColumnWidth = "60px" />
        </div>

        <div class="card-footer">
            <div class="d-flex justify-content-between">
                <div>
                    <GenericButtonComponent Text="載入所有可退回"
                                          Variant="ButtonVariant.Info"
                                          OnClick="LoadAllReturnableItems"
                                          IsDisabled="@(!CanLoadAllReturnable)" />
                </div>
                <div class="d-flex gap-2">
                    <GenericButtonComponent Text="退回量全填"
                                          Variant="ButtonVariant.Success"
                                          OnClick="FillAllQuantities" />
                    <GenericButtonComponent Text="退回量清空"
                                          Variant="ButtonVariant.Danger"
                                          OnClick="ClearAllQuantities" />
                    <GenericButtonComponent Text="明細全移除"
                                          Variant="ButtonVariant.Info"
                                          OnClick="ClearAllDetails" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public List<Product> Products { get; set; } = new List<Product>();
    [Parameter] public EventCallback<List<ReturnItem>> OnReturnItemsChanged { get; set; }
    
    // ===== 供應商過濾參數 =====
    [Parameter] public int? SupplierId { get; set; }
    [Parameter] public int? SelectedSupplierId { get; set; }
    
    // ===== 篩選參數 =====
    [Parameter] public int? SelectedPurchaseReceivingId { get; set; }
    [Parameter] public int? FilterProductId { get; set; }
    [Parameter] public int? FilterPurchaseReceivingId { get; set; }
    
    // ===== 現有明細參數 =====
    [Parameter] public List<PurchaseReturnDetail> ExistingReturnDetails { get; set; } = new List<PurchaseReturnDetail>();
    [Parameter] public EventCallback<List<PurchaseReturnDetail>> OnDetailsChanged { get; set; }
    [Parameter] public EventCallback<List<PurchaseReturnDetail>> OnReturnDetailsChanged { get; set; }
    [Parameter] public EventCallback<List<int>> OnDeletedDetailsChanged { get; set; }
    [Parameter] public EventCallback<ReturnItem> OnItemRemoved { get; set; }
    
    // ===== 編輯模式參數 =====
    [Parameter] public bool IsEditMode { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "退回明細";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "undo";
    [Parameter] public string ItemDisplayName { get; set; } = "商品";
    [Parameter] public string EmptyIcon { get; set; } = "box-open";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增退回商品";
    
    // ===== 唯讀模式參數 =====
    [Parameter] public bool IsReadOnly { get; set; } = false;

    private List<ReturnItem> ReturnItems { get; set; } = new List<ReturnItem>();
    private List<Product> AvailableProducts { get; set; } = new List<Product>();
    private List<PurchaseReceivingDetail> AvailableReceivingDetails { get; set; } = new List<PurchaseReceivingDetail>();
    private int? _previousSelectedSupplierId = null;
    private int? _previousSelectedPurchaseReceivingId = null;
    private int? _previousFilterProductId = null;
    private List<int> _deletedDetailIds { get; set; } = new List<int>();

    // ===== 計算屬性 =====
    private int? EffectiveSupplierId => SupplierId ?? SelectedSupplierId;
    private int? EffectivePurchaseReceivingId => FilterPurchaseReceivingId ?? SelectedPurchaseReceivingId;
    private int? EffectiveFilterProductId => FilterProductId;
    private EventCallback<List<PurchaseReturnDetail>> EffectiveDetailsChangedCallback => 
        OnReturnDetailsChanged.HasDelegate ? OnReturnDetailsChanged : OnDetailsChanged;
    
    private bool CanLoadAllReturnable => 
        EffectiveSupplierId.HasValue && 
        EffectiveSupplierId.Value > 0 && 
        GetAvailableReceivingDetails().Any();

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableProductsAsync();
        LoadExistingDetailsAsync();
        EnsureOneEmptyRow();
    }

    // ===== 沖款記錄管理方法 =====
    
    /// <summary>
    /// 檢查指定的退回明細項目是否有沖款記錄
    /// 檢查邏輯：
    /// - 資料表：PurchaseReturnDetail
    /// - 欄位：TotalReceivedAmount (累計收款金額)
    /// - 條件：TotalReceivedAmount > 0 表示已有沖款記錄，不可刪除
    /// </summary>
    /// <param name="item">要檢查的退回明細項目</param>
    /// <returns>true 表示有沖款記錄，false 表示沒有</returns>
    private bool HasPaymentRecord(ReturnItem item)
    {
        if (item.ExistingDetailEntity is PurchaseReturnDetail detail && detail.Id > 0)
        {
            // 檢查 TotalReceivedAmount 是否大於 0
            return detail.TotalReceivedAmount > 0;
        }
        return false;
    }
    
    /// <summary>
    /// 取得指定退回明細項目的已收款金額
    /// </summary>
    /// <param name="item">要檢查的退回明細項目</param>
    /// <returns>已收款金額</returns>
    private decimal GetReceivedAmount(ReturnItem item)
    {
        if (item.ExistingDetailEntity is PurchaseReturnDetail detail && detail.Id > 0)
        {
            return detail.TotalReceivedAmount;
        }
        return 0;
    }
    
    /// <summary>
    /// 檢查項目是否可以刪除
    /// 檢查條件：
    /// - 沖款記錄檢查 (HasPaymentRecord)
    ///   - 資料來源：直接讀取 PurchaseReturnDetail 實體
    ///   - 檢查資料表：PurchaseReturnDetail (採購退回明細)
    ///   - 檢查欄位：TotalReceivedAmount (累計收款金額)
    ///   - 限制原因：已收款的退回明細不可刪除，避免財務資料錯亂
    /// </summary>
    /// <param name="item">要檢查的項目</param>
    /// <param name="reason">不可刪除的原因（輸出參數）</param>
    /// <returns>true 表示可以刪除，false 表示不可刪除</returns>
    private bool CanDeleteItem(ReturnItem item, out string reason)
    {
        // 檢查：沖款記錄
        if (HasPaymentRecord(item))
        {
            var receivedAmount = GetReceivedAmount(item);
            reason = $"此商品已有沖款記錄（已收款 {receivedAmount:N0} 元），無法刪除";
            return false;
        }
        
        reason = string.Empty;
        return true;
    }

    private async Task FillAllQuantities()
    {
        foreach (var item in ReturnItems)
        {
            if (item.SelectedReceivingDetail != null)
            {
                // 退回量設為可退回的最大數量
                var maxReturnQuantity = item.AvailableQuantity;
                item.ReturnQuantity = maxReturnQuantity > 0 ? maxReturnQuantity : 0;
            }
        }
        
        await NotifyDetailsChanged();
    }

    private async Task ClearAllQuantities()
    {
        foreach (var item in ReturnItems)
        {
            item.ReturnQuantity = 0;
        }
        
        await NotifyDetailsChanged();
    }

    private async Task ClearAllDetails()
    {
        // 通知父組件所有項目即將被移除
        if (OnItemRemoved.HasDelegate)
        {
            foreach (var item in ReturnItems.ToList()) // 創建副本避免修改集合時的問題
            {
                if (!IsEmptyRow(item)) // 只通知非空行
                {
                    await OnItemRemoved.InvokeAsync(item);
                }
            }
        }
        
        // 記錄所有現有明細的 ID 以便刪除
        foreach (var item in ReturnItems.Where(item => item.ExistingDetailEntity?.Id > 0))
        {
            _deletedDetailIds.Add(item.ExistingDetailEntity!.Id);
        }
        
        // 清空所有明細，只保留一個空行
        ReturnItems.Clear();
        EnsureOneEmptyRow();
        
        await NotifyDetailsChanged();
        await NotificationService.ShowSuccessAsync("已清空所有退回明細");
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        
        // 檢查篩選參數是否變更
        bool supplierChanged = _previousSelectedSupplierId != EffectiveSupplierId;
        bool purchaseReceivingChanged = _previousSelectedPurchaseReceivingId != EffectivePurchaseReceivingId;
        bool productFilterChanged = _previousFilterProductId != EffectiveFilterProductId;
        
        // 如果廠商變更，需要重新載入所有資料
        if (supplierChanged)
        {
            _previousSelectedSupplierId = EffectiveSupplierId;
            _previousSelectedPurchaseReceivingId = EffectivePurchaseReceivingId;
            _previousFilterProductId = EffectiveFilterProductId;
            
            await LoadAvailableProductsAsync();
            
            // 廠商變更時清空現有選項並重新載入
            ReturnItems.Clear();
            LoadExistingDetailsAsync();
            return;
        }
        
        // 如果只是進貨單或商品篩選變更，只需要更新篩選狀態並重新渲染
        if (purchaseReceivingChanged || productFilterChanged)
        {
            _previousSelectedPurchaseReceivingId = EffectivePurchaseReceivingId;
            _previousFilterProductId = EffectiveFilterProductId;
            
            // 觸發重新渲染以套用新的篩選
            StateHasChanged();
            return;
        }
        
        // 總是確保有一行空行可以輸入，不論是否已有資料
        EnsureOneEmptyRow();
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    private bool IsEmptyRow(ReturnItem item)
    {
        return item.SelectedReceivingDetail == null && item.SelectedProduct == null;
    }
    
    private ReturnItem CreateEmptyItem()
    {
        return new ReturnItem();
    }
    
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.ForAny<ReturnItem>.EnsureOneEmptyRow(
            ReturnItems, 
            IsEmptyRow, 
            CreateEmptyItem
        );
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>();

        // 進貨明細選擇欄位 - 自訂模板支援動態唯讀
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "商品", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "300px",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                var hasPaymentRecord = HasPaymentRecord(returnItem);
                var isFieldReadOnly = IsReadOnly || hasPaymentRecord;
                
                // 組合 tooltip 訊息
                var title = hasPaymentRecord 
                    ? $"此商品已有沖款記錄（已收款 {GetReceivedAmount(returnItem):N0} 元），無法修改商品選擇" 
                    : "";
                
                // 如果是唯讀狀態，直接顯示 span
                if (isFieldReadOnly)
                {
                    return @<div class="position-relative d-flex align-items-center" style="min-height: 31px;">
                        <span class="text-muted small" title="@title">
                            @(string.IsNullOrEmpty(returnItem.ReceivingDetailSearch) ? "無商品選擇" : returnItem.ReceivingDetailSearch)
                        </span>
                        
                        @if (hasPaymentRecord)
                        {
                            <div class="position-absolute" style="top: 2px; right: 8px; pointer-events: none;">
                                <i class="fas fa-lock text-danger" title="@title"></i>
                            </div>
                        }
                    </div>;
                }
                
                // 可編輯狀態，顯示輸入框
                return @<div class="position-relative">
                    <input type="text" 
                           class="form-control form-control-sm" 
                           value="@returnItem.ReceivingDetailSearch"
                           placeholder="請選擇進貨明細..."
                           @onfocus="() => OnReceivingDetailInputFocus(returnItem)"
                           @onblur="() => OnReceivingDetailInputBlur(returnItem)"
                           @oninput="(e) => OnReceivingDetailSearchInput(returnItem, e.Value?.ToString())" />
                    
                    @if (returnItem.ShowDropdown && returnItem.FilteredReceivingDetails.Any())
                    {
                        <div class="dropdown-menu show position-absolute w-100" style="z-index: 1050; max-height: 300px; overflow-y: auto;">
                            @for (int i = 0; i < returnItem.FilteredReceivingDetails.Count; i++)
                            {
                                var index = i;
                                var detail = returnItem.FilteredReceivingDetails[i];
                                var isSelected = index == returnItem.SelectedIndex;
                                var itemClass = isSelected ? "dropdown-item active" : "dropdown-item";
                                
                                <a href="#" class="@itemClass" 
                                   @onclick="() => OnReceivingDetailSelected(returnItem, detail)"
                                   @onclick:preventDefault="true"
                                   @onmouseenter="() => OnReceivingDetailItemMouseEnter(returnItem, index)">
                                    @((MarkupString)FormatReceivingDetailDisplay(detail))
                                </a>
                            }
                        </div>
                    }
                </div>;
            }
        });

        // 原始進貨數量欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "原始進貨數量", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span>@returnItem.OriginalQuantity.ToString("N0")</span>
                </div>;
            }
        });

        // 退回數量欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "退回數量", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                var returnableQuantity = returnItem.AvailableQuantity;
                var value = returnItem.ReturnQuantity > 0 ? returnItem.ReturnQuantity.ToString("N0") : "";
                var hasPaymentRecord = HasPaymentRecord(returnItem);
                var isFieldReadOnly = IsReadOnly || hasPaymentRecord;
                
                // 組合 tooltip 訊息
                var title = hasPaymentRecord 
                    ? $"此商品已有沖款記錄（已收款 {GetReceivedAmount(returnItem):N0} 元），無法修改退回數量" 
                    : "";
                
                // 如果是唯讀狀態（含沖款記錄），直接顯示 span
                if (isFieldReadOnly)
                {
                    return @<div class="d-flex align-items-center justify-content-end">
                        <span class="text-muted" title="@title">@value</span>
                    </div>;
                }
                
                // 可編輯狀態，顯示輸入框
                return @<input type="number" class="form-control form-control-sm" 
                               value="@value"
                               @oninput="(e) => OnReturnQuantityInput(returnItem, e.Value?.ToString())"
                               onkeydown="if(['e','E','+','-'].includes(event.key)) event.preventDefault();"
                               placeholder="" 
                               min="0" 
                               max="@returnableQuantity"
                               step="1" />;
            }
        });

        // 單價欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "單價", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "100px",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span>@returnItem.OriginalUnitPrice.ToString("F0")</span>
                </div>;
            }
        });

        // 小計欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "小計", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                
                return @<div class="text-end fw-bold text-success">
                    @returnItem.ReturnSubtotal.ToString("C")
                </div>;
            }
        });

        // 備註欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "備註", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "150px",
            HideOnMobile = true,
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                
                return @<input type="text" class="form-control form-control-sm" 
                               value="@returnItem.Remarks"
                               @oninput="(e) => OnRemarksInput(returnItem, e.Value?.ToString())"
                               placeholder="選填..."
                               readonly="@IsReadOnly" />;
            }
        });

        return columns;
    }

    private RenderFragment<ReturnItem> GetCustomActionsTemplate => item => __builder =>
    {
        // 檢查項目是否可以刪除（檢查沖款記錄）
        var canDelete = CanDeleteItem(item, out _);
        
        // 只有當項目可以刪除時才顯示刪除按鈕
        if (canDelete)
        {
            <GenericButtonComponent Variant="ButtonVariant.Danger"
                                   IconClass="bi bi-trash text-white"
                                   Size="ButtonSize.Large"
                                   IsDisabled="@IsReadOnly"
                                   Title="刪除"
                                   OnClick="async () => await HandleItemDelete(item)"
                                   StopPropagation="true"
                                   CssClass="btn-square" />
        }
    };

    private async Task HandleItemDelete(ReturnItem item)
    {
        // 使用綜合檢查方法，確認是否可以刪除
        if (!CanDeleteItem(item, out string reason))
        {
            await NotificationService.ShowWarningAsync(
                reason, 
                "操作限制"
            );
            return;
        }
        
        var index = ReturnItems.IndexOf(item);
        await RemoveItemAsync(index);
    }

    // ===== 內部方法 =====
    private async Task LoadAvailableProductsAsync()
    {
        try
        {
            if (EffectiveSupplierId.HasValue && EffectiveSupplierId.Value > 0)
            {
                // 載入該廠商的可退貨進貨明細
                AvailableReceivingDetails = await PurchaseReceivingService.GetReturnableDetailsBySupplierAsync(EffectiveSupplierId.Value);
                
                // 從進貨明細中提取商品清單（向下相容）
                AvailableProducts = AvailableReceivingDetails
                    .Where(rd => rd.Product != null)
                    .Select(rd => rd.Product!)
                    .Distinct()
                    .ToList();
            }
            else
            {
                AvailableProducts = new List<Product>();
                AvailableReceivingDetails = new List<PurchaseReceivingDetail>();
            }
        }
        catch (Exception)
        {
            AvailableProducts = new List<Product>();
            AvailableReceivingDetails = new List<PurchaseReceivingDetail>();
        }
    }

    private void LoadExistingDetailsAsync()
    {
        if (ExistingReturnDetails?.Any() != true) 
        {
            EnsureOneEmptyRow();
            return;
        }

        ReturnItems.Clear();
        
        foreach (var detail in ExistingReturnDetails)
        {
            var item = new ReturnItem
            {
                // 使用 Navigation Properties
                SelectedProduct = detail.Product,
                SelectedReceivingDetail = detail.PurchaseReceivingDetail,
                
                // 使用屬性值
                ReturnQuantity = detail.ReturnQuantity,
                OriginalUnitPrice = detail.OriginalUnitPrice,
                Remarks = detail.Remarks ?? string.Empty,
                BatchNumber = detail.BatchNumber ?? string.Empty,
                ExistingDetailEntity = detail
            };
            
            // 設置原始數量和已退回數量
            if (item.SelectedReceivingDetail != null)
            {
                item.OriginalQuantity = item.SelectedReceivingDetail.ReceivedQuantity;
                // 已退回數量需要從資料庫計算，暫時設為0
                item.AlreadyReturnedQuantity = 0; // TODO: 需要實作計算已退回數量的邏輯
                
                // 設置搜尋顯示文字 - 使用 DisplayName 計算屬性
                item.ReceivingDetailSearch = item.DisplayName;
            }
            
            ReturnItems.Add(item);
        }
        
        EnsureOneEmptyRow();
    }

    private List<PurchaseReceivingDetail> GetAvailableReceivingDetails()
    {
        var filteredDetails = AvailableReceivingDetails.AsQueryable();
        
        // 根據進貨單篩選
        if (EffectivePurchaseReceivingId.HasValue && EffectivePurchaseReceivingId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(rd => rd.PurchaseReceivingId == EffectivePurchaseReceivingId.Value);
        }
        
        // 根據商品篩選
        if (EffectiveFilterProductId.HasValue && EffectiveFilterProductId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(rd => rd.ProductId == EffectiveFilterProductId.Value);
        }
        
        // 只顯示還有可退回數量的明細 (暫時顯示所有已進貨的明細)
        return filteredDetails.ToList();
    }

    // ===== 事件處理方法 =====
    
    // ===== SearchableSelect 相關方法 =====
    private string FormatReceivingDetailDisplay(PurchaseReceivingDetail detail)
    {
        if (detail?.Product == null || detail.PurchaseReceiving == null) return "";
        
        var product = detail.Product;
        var receiptNumber = detail.PurchaseReceiving.ReceiptNumber ?? "N/A";
        
        var productDisplay = !string.IsNullOrEmpty(product.Code) && !string.IsNullOrEmpty(product.Name)
            ? $"<strong>[{product.Code}]</strong> {product.Name}"
            : (!string.IsNullOrEmpty(product.Code) ? $"<strong>[{product.Code}]</strong>" : product.Name);
        
        return $"<span class='text-primary'>[{receiptNumber}]</span> {productDisplay}";
    }
    
    /// <summary>
    /// 格式化進貨明細顯示文字（純文字版本，用於搜尋輸入框）
    /// </summary>
    private string FormatReceivingDetailDisplayText(PurchaseReceivingDetail detail)
    {
        if (detail?.Product == null || detail.PurchaseReceiving == null) return "";
        
        var product = detail.Product;
        var receiptNumber = detail.PurchaseReceiving.ReceiptNumber ?? "N/A";
        
        var productDisplay = !string.IsNullOrEmpty(product.Code) && !string.IsNullOrEmpty(product.Name)
            ? $"[{product.Code}] {product.Name}"
            : (!string.IsNullOrEmpty(product.Code) ? $"[{product.Code}]" : product.Name ?? "");
        
        return $"[{receiptNumber}] {productDisplay}";
    }

    private bool FilterReceivingDetail(PurchaseReceivingDetail detail, string searchValue)
    {
        if (string.IsNullOrWhiteSpace(searchValue))
            return true;

        var search = searchValue.ToLower();
        return (detail.Product?.Code?.ToLower().Contains(search) == true) ||
               (detail.Product?.Name?.ToLower().Contains(search) == true) ||
               (detail.PurchaseReceiving?.ReceiptNumber?.ToLower().Contains(search) == true); // 新增進貨單號搜尋
    }

    private void OnReceivingDetailSearchInput(ReturnItem returnItem, string? searchValue)
    {
        var availableDetails = GetAvailableReceivingDetails();
        
        if (string.IsNullOrWhiteSpace(searchValue))
        {
            returnItem.FilteredReceivingDetails = availableDetails.Take(20).ToList();
        }
        else
        {
            returnItem.FilteredReceivingDetails = availableDetails
                .Where(detail => FilterReceivingDetail(detail, searchValue))
                .Take(20)
                .ToList();
        }
        
        returnItem.ShowDropdown = returnItem.FilteredReceivingDetails.Any();
        returnItem.SelectedIndex = -1;
        StateHasChanged();
    }

    private void OnReceivingDetailInputFocus(ReturnItem returnItem)
    {
        if (!string.IsNullOrWhiteSpace(returnItem.ReceivingDetailSearch))
        {
            OnReceivingDetailSearchInput(returnItem, returnItem.ReceivingDetailSearch);
        }
        else
        {
            returnItem.SelectedIndex = -1;
            var availableDetails = GetAvailableReceivingDetails();
            returnItem.FilteredReceivingDetails = availableDetails.Take(20).ToList();
            returnItem.ShowDropdown = returnItem.FilteredReceivingDetails.Any();
            StateHasChanged();
        }
    }

    private async Task OnReceivingDetailInputBlur(ReturnItem returnItem)
    {
        // 延遲隱藏下拉選單以允許點擊
        await Task.Delay(200);
        returnItem.ShowDropdown = false;
        StateHasChanged();
    }

    private void OnReceivingDetailItemMouseEnter(ReturnItem returnItem, int index)
    {
        returnItem.SelectedIndex = index;
        StateHasChanged();
    }

    private async Task OnReceivingDetailSelected(ReturnItem returnItem, PurchaseReceivingDetail selectedDetail)
    {
        if (selectedDetail != null)
        {
            returnItem.SelectedReceivingDetail = selectedDetail;
            returnItem.SelectedProduct = selectedDetail.Product;
            returnItem.ReceivingDetailSearch = FormatReceivingDetailDisplayText(selectedDetail); // 使用純文字版本
            
            // 設置數量資訊
            returnItem.OriginalQuantity = selectedDetail.ReceivedQuantity;
            returnItem.AlreadyReturnedQuantity = 0; // TODO: 需要從資料庫計算已退回數量
            
            // 設置單價資訊
            returnItem.OriginalUnitPrice = selectedDetail.UnitPrice;
            
            // 確保有空行可以輸入新項目
            EnsureOneEmptyRow();
            
            await NotifyDetailsChanged();
        }
        
        returnItem.ShowDropdown = false;
        StateHasChanged();
    }

    private async Task OnReceivingDetailSelected(ReturnItem returnItem, int? receivingDetailId)
    {
        if (receivingDetailId.HasValue)
        {
            var selectedDetail = AvailableReceivingDetails.FirstOrDefault(rd => rd.Id == receivingDetailId.Value);
            if (selectedDetail != null)
            {
                returnItem.SelectedReceivingDetail = selectedDetail;
                returnItem.SelectedProduct = selectedDetail.Product;
                
                // 設置數量資訊
                returnItem.OriginalQuantity = selectedDetail.ReceivedQuantity;
                returnItem.AlreadyReturnedQuantity = 0; // TODO: 需要從資料庫計算已退回數量
                
                // 設置單價資訊
                returnItem.OriginalUnitPrice = selectedDetail.UnitPrice;
                
                // 確保有空行可以輸入新項目
                EnsureOneEmptyRow();
                
                await NotifyDetailsChanged();
            }
        }
        else
        {
            // 清除選擇
            returnItem.SelectedReceivingDetail = null;
            returnItem.SelectedProduct = null;
            returnItem.OriginalQuantity = 0;
            returnItem.AlreadyReturnedQuantity = 0;
            returnItem.ReturnQuantity = 0;
            returnItem.OriginalUnitPrice = 0;
            returnItem.Remarks = string.Empty;
            
            await NotifyDetailsChanged();
        }
        
        StateHasChanged();
    }

    private async Task OnReturnQuantityInput(ReturnItem returnItem, string? value)
    {
        if (int.TryParse(value, out var quantity) && quantity >= 0)
        {
            var maxQuantity = returnItem.OriginalQuantity - returnItem.AlreadyReturnedQuantity;
            returnItem.ReturnQuantity = Math.Min(quantity, maxQuantity);
        }
        else
        {
            returnItem.ReturnQuantity = 0;
        }
        
        await NotifyDetailsChanged();
    }

    private async Task OnRemarksInput(ReturnItem returnItem, string? value)
    {
        returnItem.Remarks = value ?? string.Empty;
        await NotifyDetailsChanged();
    }

    private async Task LoadAllReturnableItems()
    {
        try
        {
            var availableDetails = GetAvailableReceivingDetails();
            
            // 清除現有項目但保留已有資料的項目
            var existingItems = ReturnItems.Where(item => item.SelectedReceivingDetail != null).ToList();
            ReturnItems.Clear();
            ReturnItems.AddRange(existingItems);
            
            // 新增所有可退回的項目
            foreach (var detail in availableDetails)
            {
                // 檢查是否已經存在
                if (ReturnItems.Any(item => item.SelectedReceivingDetail?.Id == detail.Id))
                    continue;
                
                var newItem = new ReturnItem
                {
                    SelectedReceivingDetail = detail,
                    SelectedProduct = detail.Product,
                    OriginalQuantity = detail.ReceivedQuantity,
                    AlreadyReturnedQuantity = 0, // TODO: 需要從資料庫計算已退回數量
                    ReturnQuantity = 0,
                    OriginalUnitPrice = detail.UnitPrice
                };
                
                // 設置搜尋顯示文字
                newItem.ReceivingDetailSearch = newItem.DisplayName;
                
                ReturnItems.Add(newItem);
            }
            
            EnsureOneEmptyRow();
            await NotifyDetailsChanged();
            await NotificationService.ShowSuccessAsync($"已載入 {availableDetails.Count} 項可退回商品");
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入可退回商品時發生錯誤：{ex.Message}");
        }
    }

    private async Task RemoveItemAsync(int index)
    {
        if (index >= 0 && index < ReturnItems.Count)
        {
            var itemToRemove = ReturnItems[index];
            
            // 如果被刪除的項目有對應的資料庫實體，記錄其 ID 以便後續刪除
            if (itemToRemove.ExistingDetailEntity?.Id > 0)
            {
                _deletedDetailIds.Add(itemToRemove.ExistingDetailEntity.Id);
            }
            
            // 通知父組件項目即將被移除（讓父組件可以處理實際的資料庫刪除）
            if (OnItemRemoved.HasDelegate)
            {
                await OnItemRemoved.InvokeAsync(itemToRemove);
            }
            
            ReturnItems.RemoveAt(index);
            EnsureOneEmptyRow();
            await NotifyDetailsChanged();
        }
    }

    private decimal GetTotalAmount()
    {
        return ReturnItems.Where(item => !IsEmptyRow(item))
                          .Sum(item => item.ReturnQuantity * item.OriginalUnitPrice);
    }

    private async Task NotifyDetailsChanged()
    {
        // 轉換為 PurchaseReturnDetail 實體
        var details = ReturnItems.Where(item => !IsEmptyRow(item) && item.ReturnQuantity > 0)
                                 .Select(ConvertToEntity)
                                 .Where(detail => detail != null)
                                 .Cast<PurchaseReturnDetail>()
                                 .ToList();
        
        if (EffectiveDetailsChangedCallback.HasDelegate)
        {
            await EffectiveDetailsChangedCallback.InvokeAsync(details);
        }
        
        // 通知已刪除的明細 ID
        if (OnDeletedDetailsChanged.HasDelegate && _deletedDetailIds.Any())
        {
            await OnDeletedDetailsChanged.InvokeAsync(_deletedDetailIds.ToList());
            // 清空已通知的刪除 ID，避免重複刪除
            _deletedDetailIds.Clear();
        }
        
        if (OnReturnItemsChanged.HasDelegate)
        {
            await OnReturnItemsChanged.InvokeAsync(ReturnItems);
        }
    }

    private PurchaseReturnDetail? ConvertToEntity(ReturnItem item)
    {
        if (item.SelectedReceivingDetail == null || item.SelectedProduct == null || item.ReturnQuantity <= 0)
        {
            return null;
        }
        
        // 如果已有實體，更新它
        if (item.ExistingDetailEntity != null)
        {
            var existingDetail = item.ExistingDetailEntity;
            existingDetail.ReturnQuantity = item.ReturnQuantity;
            existingDetail.OriginalUnitPrice = item.OriginalUnitPrice;
            existingDetail.Remarks = item.Remarks;
            existingDetail.BatchNumber = item.BatchNumber;
            existingDetail.PurchaseReceivingDetailId = item.SelectedReceivingDetail.Id;
            existingDetail.ProductId = item.SelectedProduct.Id;
            
            return existingDetail;
        }
        
        // 創建新實體
        return new PurchaseReturnDetail
        {
            ProductId = item.SelectedProduct.Id,
            PurchaseReceivingDetailId = item.SelectedReceivingDetail.Id,
            ReturnQuantity = item.ReturnQuantity,
            OriginalUnitPrice = item.OriginalUnitPrice,
            Remarks = item.Remarks,
            BatchNumber = item.BatchNumber
        };
    }

    // ===== 公開方法 - 供父組件調用 =====
    public async Task<bool> ValidateAsync()
    {
        try
        {
            // 檢查是否有有效的退回明細
            var validItems = ReturnItems.Where(item => !IsEmptyRow(item) && item.ReturnQuantity > 0).ToList();
            
            if (!validItems.Any())
            {
                await NotificationService.ShowWarningAsync("至少需要一筆有效的退回明細");
                return false;
            }
            
            // 檢查退回數量是否超過可退回數量
            foreach (var item in validItems)
            {
                var maxQuantity = item.OriginalQuantity - item.AlreadyReturnedQuantity;
                if (item.ReturnQuantity > maxQuantity)
                {
                    await NotificationService.ShowErrorAsync($"商品 {item.SelectedProduct?.Name} 的退回數量 ({item.ReturnQuantity}) 超過可退回數量 ({maxQuantity})");
                    return false;
                }
            }
            
            return true;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"驗證退回明細時發生錯誤：{ex.Message}");
            return false;
        }
    }
    
    // ===== ReturnItem 內部類別 =====
    public class ReturnItem
    {
        public Product? SelectedProduct { get; set; }
        public PurchaseReceivingDetail? SelectedReceivingDetail { get; set; }
        
        public int OriginalQuantity { get; set; } = 0;
        public int AlreadyReturnedQuantity { get; set; } = 0;
        public int ReturnQuantity { get; set; } = 0;
        
        public decimal OriginalUnitPrice { get; set; } = 0;
        
        public string Remarks { get; set; } = string.Empty;
        public string BatchNumber { get; set; } = string.Empty;
        
        public PurchaseReturnDetail? ExistingDetailEntity { get; set; }
        public string? ValidationError { get; set; }
        
        // SearchableSelect 支援屬性
        public string ReceivingDetailSearch { get; set; } = string.Empty;
        public List<PurchaseReceivingDetail> FilteredReceivingDetails { get; set; } = new();
        public bool ShowDropdown { get; set; } = false;
        public int SelectedIndex { get; set; } = -1;
        
        // 計算屬性
        public decimal ReturnSubtotal => ReturnQuantity * OriginalUnitPrice;
        public int AvailableQuantity => OriginalQuantity - AlreadyReturnedQuantity;
        
        /// <summary>
        /// 取得顯示用的商品名稱（包含進貨單號）
        /// </summary>
        public string DisplayName => 
            SelectedReceivingDetail?.Product != null && !string.IsNullOrEmpty(SelectedReceivingDetail.PurchaseReceiving?.ReceiptNumber)
                ? $"[{SelectedReceivingDetail.PurchaseReceiving.ReceiptNumber}] [{SelectedReceivingDetail.Product.Code}] {SelectedReceivingDetail.Product.Name}"
                : SelectedProduct != null 
                    ? $"[{SelectedProduct.Code}] {SelectedProduct.Name}" 
                    : ReceivingDetailSearch;
        
        // 顯示名稱（舊版，保持向下相容）
        public string DisplayNameLegacy => SelectedProduct != null 
            ? $"{SelectedProduct.Code} - {SelectedProduct.Name}"
            : "";
    }
}
