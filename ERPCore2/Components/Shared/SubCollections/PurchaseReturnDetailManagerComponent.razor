@* 採購退回明細管理組件 - 使用 InteractiveTableComponent 統一UI 並整合自動空行功能 *@

@inject IProductService ProductService
@inject IPurchaseReceivingService PurchaseReceivingService
@inject IPurchaseReturnDetailService PurchaseReturnDetailService
@inject INotificationService NotificationService
@using ERPCore2.Helpers
@using ERPCore2.Data.Entities

@if (!EffectiveSupplierId.HasValue || EffectiveSupplierId.Value <= 0)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="supplier-warning">
                <p class="text-muted">選擇廠商後即可查看該廠商的退回商品</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <InteractiveTableComponent TItem="ReturnItem" 
                                      Items="@ReturnItems"
                                      ColumnDefinitions="@GetColumnDefinitions()"
                                      IsReadOnly="@IsReadOnly"
                                      ShowRowNumbers="false"
                                      EmptyMessage="@EmptyMessage"
                                      ShowBuiltInActions="true"
                                      ShowBuiltInDeleteButton="true"
                                      ActionsColumnWidth = "60px"
                                      OnItemDelete="@HandleItemDelete"
                                      ShowTotalRow="true"
                                      TotalRowTemplate="@GetTotalRowTemplate" />
        </div>

        <div class="card-footer">
            <div class="d-flex justify-content-between">
                <div>
                    <GenericButtonComponent Text="載入所有可退回"
                                          Variant="ButtonVariant.Info"
                                          OnClick="LoadAllReturnableItems"
                                          IsDisabled="@(!CanLoadAllReturnable)" />
                </div>
                <div class="d-flex gap-2">
                    <GenericButtonComponent Text="退回量全填"
                                          Variant="ButtonVariant.Success"
                                          OnClick="FillAllQuantities" />
                    <GenericButtonComponent Text="退回量清空"
                                          Variant="ButtonVariant.Danger"
                                          OnClick="ClearAllQuantities" />
                    <GenericButtonComponent Text="明細全移除"
                                          Variant="ButtonVariant.Info"
                                          OnClick="ClearAllDetails" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public List<Product> Products { get; set; } = new List<Product>();
    [Parameter] public EventCallback<List<ReturnItem>> OnReturnItemsChanged { get; set; }
    
    // ===== 供應商過濾參數 =====
    [Parameter] public int? SupplierId { get; set; }
    [Parameter] public int? SelectedSupplierId { get; set; }
    
    // ===== 篩選參數 =====
    [Parameter] public int? SelectedPurchaseReceivingId { get; set; }
    [Parameter] public int? FilterProductId { get; set; }
    [Parameter] public int? FilterPurchaseReceivingId { get; set; }
    
    // ===== 現有明細參數 =====
    [Parameter] public List<PurchaseReturnDetail> ExistingReturnDetails { get; set; } = new List<PurchaseReturnDetail>();
    [Parameter] public EventCallback<List<PurchaseReturnDetail>> OnDetailsChanged { get; set; }
    [Parameter] public EventCallback<List<PurchaseReturnDetail>> OnReturnDetailsChanged { get; set; }
    [Parameter] public EventCallback<List<int>> OnDeletedDetailsChanged { get; set; }
    [Parameter] public EventCallback<ReturnItem> OnItemRemoved { get; set; }
    
    // ===== 編輯模式參數 =====
    [Parameter] public bool IsEditMode { get; set; } = false;
    
    // ===== 顯示標籤參數 =====
    [Parameter] public string OriginalQuantityLabel { get; set; } = "原始數量";
    [Parameter] public string ReturnQuantityLabel { get; set; } = "退回數量";
    [Parameter] public string ReturnPriceLabel { get; set; } = "退回單價";
    [Parameter] public string RemarksLabel { get; set; } = "備註";
    [Parameter] public string QualityConditionLabel { get; set; } = "品質狀況";
    [Parameter] public string BatchNumberLabel { get; set; } = "批號";
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "退回明細";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "undo";
    [Parameter] public string ItemDisplayName { get; set; } = "商品";
    [Parameter] public string EmptyIcon { get; set; } = "box-open";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增退回商品";
    
    // ===== 唯讀模式參數 =====
    [Parameter] public bool IsReadOnly { get; set; } = false;

    private List<ReturnItem> ReturnItems { get; set; } = new List<ReturnItem>();
    private List<Product> AvailableProducts { get; set; } = new List<Product>();
    private List<PurchaseReceivingDetail> AvailableReceivingDetails { get; set; } = new List<PurchaseReceivingDetail>();
    private int? _previousSelectedSupplierId = null;
    private int? _previousSelectedPurchaseReceivingId = null;
    private int? _previousFilterProductId = null;
    private List<int> _deletedDetailIds { get; set; } = new List<int>();

    // ===== 計算屬性 =====
    private int? EffectiveSupplierId => SupplierId ?? SelectedSupplierId;
    private int? EffectivePurchaseReceivingId => FilterPurchaseReceivingId ?? SelectedPurchaseReceivingId;
    private int? EffectiveFilterProductId => FilterProductId;
    private EventCallback<List<PurchaseReturnDetail>> EffectiveDetailsChangedCallback => 
        OnReturnDetailsChanged.HasDelegate ? OnReturnDetailsChanged : OnDetailsChanged;
    
    private bool CanLoadAllReturnable => 
        EffectiveSupplierId.HasValue && 
        EffectiveSupplierId.Value > 0 && 
        GetAvailableReceivingDetails().Any();

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableProductsAsync();
        LoadExistingDetailsAsync();
        EnsureOneEmptyRow();
    }

    private async Task FillAllQuantities()
    {
        foreach (var item in ReturnItems)
        {
            if (item.SelectedReceivingDetail != null)
            {
                // 退回量設為可退回的最大數量
                var maxReturnQuantity = item.AvailableQuantity;
                item.ReturnQuantity = maxReturnQuantity > 0 ? maxReturnQuantity : 0;
            }
        }
        
        await NotifyDetailsChanged();
    }

    private async Task ClearAllQuantities()
    {
        foreach (var item in ReturnItems)
        {
            item.ReturnQuantity = 0;
        }
        
        await NotifyDetailsChanged();
    }

    private async Task ClearAllDetails()
    {
        // 通知父組件所有項目即將被移除
        if (OnItemRemoved.HasDelegate)
        {
            foreach (var item in ReturnItems.ToList()) // 創建副本避免修改集合時的問題
            {
                if (!IsEmptyRow(item)) // 只通知非空行
                {
                    await OnItemRemoved.InvokeAsync(item);
                }
            }
        }
        
        // 記錄所有現有明細的 ID 以便刪除
        foreach (var item in ReturnItems.Where(item => item.ExistingDetailEntity?.Id > 0))
        {
            _deletedDetailIds.Add(item.ExistingDetailEntity!.Id);
        }
        
        // 清空所有明細，只保留一個空行
        ReturnItems.Clear();
        EnsureOneEmptyRow();
        
        await NotifyDetailsChanged();
        await NotificationService.ShowSuccessAsync("已清空所有退回明細");
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        
        // 檢查篩選參數是否變更
        bool supplierChanged = _previousSelectedSupplierId != EffectiveSupplierId;
        bool purchaseReceivingChanged = _previousSelectedPurchaseReceivingId != EffectivePurchaseReceivingId;
        bool productFilterChanged = _previousFilterProductId != EffectiveFilterProductId;
        
        // 如果廠商變更，需要重新載入所有資料
        if (supplierChanged)
        {
            _previousSelectedSupplierId = EffectiveSupplierId;
            _previousSelectedPurchaseReceivingId = EffectivePurchaseReceivingId;
            _previousFilterProductId = EffectiveFilterProductId;
            
            await LoadAvailableProductsAsync();
            
            // 廠商變更時清空現有選項並重新載入
            ReturnItems.Clear();
            LoadExistingDetailsAsync();
            return;
        }
        
        // 如果只是進貨單或商品篩選變更，只需要更新篩選狀態並重新渲染
        if (purchaseReceivingChanged || productFilterChanged)
        {
            _previousSelectedPurchaseReceivingId = EffectivePurchaseReceivingId;
            _previousFilterProductId = EffectiveFilterProductId;
            
            // 觸發重新渲染以套用新的篩選
            StateHasChanged();
            return;
        }
        
        // 總是確保有一行空行可以輸入，不論是否已有資料
        EnsureOneEmptyRow();
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    private bool IsEmptyRow(ReturnItem item)
    {
        return item.SelectedReceivingDetail == null && item.SelectedProduct == null;
    }
    
    private ReturnItem CreateEmptyItem()
    {
        return new ReturnItem();
    }
    
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.ForAny<ReturnItem>.EnsureOneEmptyRow(
            ReturnItems, 
            IsEmptyRow, 
            CreateEmptyItem
        );
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>();

        // 進貨明細選擇欄位 - 使用新的 ProductSelectHelper
        columns.Add(ProductSelectHelper.CreateReceivingDetailSelect<ReturnItem>(
            title: "商品",
            width: "25%",
            availableReceivingDetailsProvider: () => GetAvailableReceivingDetails(),
            onReceivingDetailSelected: EventCallback.Factory.Create<(ReturnItem item, PurchaseReceivingDetail? selectedDetail)>(this, async args => {
                if (args.selectedDetail != null)
                    await OnReceivingDetailSelected(args.item, args.selectedDetail);
            }),
            onSearchInputChanged: EventCallback.Factory.Create<(ReturnItem item, string? searchValue)>(this, args => OnReceivingDetailSearchInput(args.item, args.searchValue)),
            onInputFocus: EventCallback.Factory.Create<ReturnItem>(this, item => OnReceivingDetailInputFocus(item)),
            onInputBlur: EventCallback.Factory.Create<ReturnItem>(this, async item => await OnReceivingDetailInputBlur(item)),
            onItemMouseEnter: EventCallback.Factory.Create<(ReturnItem item, int index)>(this, args => OnReceivingDetailItemMouseEnter(args.item, args.index)),
            isReadOnly: IsReadOnly
        ));

        // 原始進貨數量欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = OriginalQuantityLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold">@returnItem.OriginalQuantity.ToString("N0")</span>
                </div>;
            }
        });

        // 退回數量欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = ReturnQuantityLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                var value = returnItem.ReturnQuantity > 0 ? returnItem.ReturnQuantity.ToString() : "";
                var maxQuantity = returnItem.OriginalQuantity - returnItem.AlreadyReturnedQuantity;
                
                return @<input type="number" class="form-control form-control-sm" 
                               value="@value"
                               @oninput="(e) => OnReturnQuantityInput(returnItem, e.Value?.ToString())"
                               placeholder="" 
                               min="0" 
                               max="@maxQuantity"
                               step="1" 
                               readonly="@IsReadOnly" />;
            }
        });

        // 單價欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "單價", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold">@returnItem.OriginalUnitPrice.ToString("F0")</span>
                </div>;
            }
        });

        // 品質狀況欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = QualityConditionLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "12%",
            HideOnMobile = true,
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                
                return @<input type="text" class="form-control form-control-sm" 
                               value="@returnItem.QualityCondition"
                               @oninput="(e) => OnQualityConditionInput(returnItem, e.Value?.ToString())"
                               placeholder="品質狀況..."
                               readonly="@IsReadOnly" />;
            }
        });

        // 備註欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = RemarksLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "12%",
            HideOnMobile = true,
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                
                return @<input type="text" class="form-control form-control-sm" 
                               value="@returnItem.Remarks"
                               @oninput="(e) => OnRemarksInput(returnItem, e.Value?.ToString())"
                               placeholder="選填..."
                               readonly="@IsReadOnly" />;
            }
        });

        return columns;
    }

    private RenderFragment<InteractiveColumnDefinition> GetTotalRowTemplate => column => __builder =>
    {
        if (column.Title == "單價")
        {
            <strong class="text-success">總計: @GetTotalAmount().ToString("C")</strong>
        }
    };

    private async Task HandleItemDelete(ReturnItem item)
    {
        var index = ReturnItems.IndexOf(item);
        await RemoveItemAsync(index);
    }

    // ===== 內部方法 =====
    private async Task LoadAvailableProductsAsync()
    {
        try
        {
            if (EffectiveSupplierId.HasValue && EffectiveSupplierId.Value > 0)
            {
                // 載入該廠商的可退貨進貨明細
                AvailableReceivingDetails = await PurchaseReceivingService.GetReturnableDetailsBySupplierAsync(EffectiveSupplierId.Value);
                
                // 從進貨明細中提取商品清單（向下相容）
                AvailableProducts = AvailableReceivingDetails
                    .Where(rd => rd.Product != null)
                    .Select(rd => rd.Product!)
                    .Distinct()
                    .ToList();
            }
            else
            {
                AvailableProducts = new List<Product>();
                AvailableReceivingDetails = new List<PurchaseReceivingDetail>();
            }
        }
        catch (Exception)
        {
            AvailableProducts = new List<Product>();
            AvailableReceivingDetails = new List<PurchaseReceivingDetail>();
        }
    }

    private void LoadExistingDetailsAsync()
    {
        if (ExistingReturnDetails?.Any() != true) 
        {
            EnsureOneEmptyRow();
            return;
        }

        ReturnItems.Clear();
        
        foreach (var detail in ExistingReturnDetails)
        {
            var item = new ReturnItem
            {
                // 使用 Navigation Properties
                SelectedProduct = detail.Product,
                SelectedReceivingDetail = detail.PurchaseReceivingDetail,
                
                // 使用屬性值
                ReturnQuantity = detail.ReturnQuantity,
                OriginalUnitPrice = detail.OriginalUnitPrice,
                ReturnUnitPrice = detail.ReturnUnitPrice,
                QualityCondition = detail.QualityCondition ?? string.Empty,
                Remarks = detail.DetailRemarks ?? string.Empty,
                BatchNumber = detail.BatchNumber ?? string.Empty,
                ExistingDetailEntity = detail
            };
            
            // 設置原始數量和已退回數量
            if (item.SelectedReceivingDetail != null)
            {
                item.OriginalQuantity = item.SelectedReceivingDetail.ReceivedQuantity;
                // 已退回數量需要從資料庫計算，暫時設為0
                item.AlreadyReturnedQuantity = 0; // TODO: 需要實作計算已退回數量的邏輯
                
                // 設置搜尋顯示文字 - 使用 DisplayName 計算屬性
                item.ReceivingDetailSearch = item.DisplayName;
            }
            
            ReturnItems.Add(item);
        }
        
        EnsureOneEmptyRow();
    }

    private List<PurchaseReceivingDetail> GetAvailableReceivingDetails()
    {
        var filteredDetails = AvailableReceivingDetails.AsQueryable();
        
        // 根據進貨單篩選
        if (EffectivePurchaseReceivingId.HasValue && EffectivePurchaseReceivingId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(rd => rd.PurchaseReceivingId == EffectivePurchaseReceivingId.Value);
        }
        
        // 根據商品篩選
        if (EffectiveFilterProductId.HasValue && EffectiveFilterProductId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(rd => rd.ProductId == EffectiveFilterProductId.Value);
        }
        
        // 只顯示還有可退回數量的明細 (暫時顯示所有已進貨的明細)
        return filteredDetails.ToList();
    }

    // ===== 事件處理方法 =====
    
    // ===== SearchableSelect 相關方法 =====
    private string FormatReceivingDetailDisplay(PurchaseReceivingDetail detail)
    {
        if (detail?.Product == null || detail.PurchaseReceiving == null) return "";
        
        var product = detail.Product;
        var receiptNumber = detail.PurchaseReceiving.ReceiptNumber ?? "N/A";
        
        var productDisplay = !string.IsNullOrEmpty(product.Code) && !string.IsNullOrEmpty(product.Name)
            ? $"<strong>[{product.Code}]</strong> {product.Name}"
            : (!string.IsNullOrEmpty(product.Code) ? $"<strong>[{product.Code}]</strong>" : product.Name);
        
        return $"<span class='text-primary'>[{receiptNumber}]</span> {productDisplay}";
    }
    
    /// <summary>
    /// 格式化進貨明細顯示文字（純文字版本，用於搜尋輸入框）
    /// </summary>
    private string FormatReceivingDetailDisplayText(PurchaseReceivingDetail detail)
    {
        if (detail?.Product == null || detail.PurchaseReceiving == null) return "";
        
        var product = detail.Product;
        var receiptNumber = detail.PurchaseReceiving.ReceiptNumber ?? "N/A";
        
        var productDisplay = !string.IsNullOrEmpty(product.Code) && !string.IsNullOrEmpty(product.Name)
            ? $"[{product.Code}] {product.Name}"
            : (!string.IsNullOrEmpty(product.Code) ? $"[{product.Code}]" : product.Name ?? "");
        
        return $"[{receiptNumber}] {productDisplay}";
    }

    private bool FilterReceivingDetail(PurchaseReceivingDetail detail, string searchValue)
    {
        if (string.IsNullOrWhiteSpace(searchValue))
            return true;

        var search = searchValue.ToLower();
        return (detail.Product?.Code?.ToLower().Contains(search) == true) ||
               (detail.Product?.Name?.ToLower().Contains(search) == true) ||
               (detail.PurchaseReceiving?.ReceiptNumber?.ToLower().Contains(search) == true); // 新增進貨單號搜尋
    }

    private void OnReceivingDetailSearchInput(ReturnItem returnItem, string? searchValue)
    {
        var availableDetails = GetAvailableReceivingDetails();
        
        if (string.IsNullOrWhiteSpace(searchValue))
        {
            returnItem.FilteredReceivingDetails = availableDetails.Take(20).ToList();
        }
        else
        {
            returnItem.FilteredReceivingDetails = availableDetails
                .Where(detail => FilterReceivingDetail(detail, searchValue))
                .Take(20)
                .ToList();
        }
        
        returnItem.ShowDropdown = returnItem.FilteredReceivingDetails.Any();
        returnItem.SelectedIndex = -1;
        StateHasChanged();
    }

    private void OnReceivingDetailInputFocus(ReturnItem returnItem)
    {
        if (!string.IsNullOrWhiteSpace(returnItem.ReceivingDetailSearch))
        {
            OnReceivingDetailSearchInput(returnItem, returnItem.ReceivingDetailSearch);
        }
        else
        {
            returnItem.SelectedIndex = -1;
            var availableDetails = GetAvailableReceivingDetails();
            returnItem.FilteredReceivingDetails = availableDetails.Take(20).ToList();
            returnItem.ShowDropdown = returnItem.FilteredReceivingDetails.Any();
            StateHasChanged();
        }
    }

    private async Task OnReceivingDetailInputBlur(ReturnItem returnItem)
    {
        // 延遲隱藏下拉選單以允許點擊
        await Task.Delay(200);
        returnItem.ShowDropdown = false;
        StateHasChanged();
    }

    private void OnReceivingDetailItemMouseEnter(ReturnItem returnItem, int index)
    {
        returnItem.SelectedIndex = index;
        StateHasChanged();
    }

    private async Task OnReceivingDetailSelected(ReturnItem returnItem, PurchaseReceivingDetail selectedDetail)
    {
        if (selectedDetail != null)
        {
            returnItem.SelectedReceivingDetail = selectedDetail;
            returnItem.SelectedProduct = selectedDetail.Product;
            returnItem.ReceivingDetailSearch = FormatReceivingDetailDisplayText(selectedDetail); // 使用純文字版本
            
            // 設置數量資訊
            returnItem.OriginalQuantity = selectedDetail.ReceivedQuantity;
            returnItem.AlreadyReturnedQuantity = 0; // TODO: 需要從資料庫計算已退回數量
            
            // 設置單價資訊
            returnItem.OriginalUnitPrice = selectedDetail.UnitPrice;
            returnItem.ReturnUnitPrice = selectedDetail.UnitPrice; // 預設為原始單價
            
            // 確保有空行可以輸入新項目
            EnsureOneEmptyRow();
            
            await NotifyDetailsChanged();
        }
        
        returnItem.ShowDropdown = false;
        StateHasChanged();
    }

    private async Task OnReceivingDetailSelected(ReturnItem returnItem, int? receivingDetailId)
    {
        if (receivingDetailId.HasValue)
        {
            var selectedDetail = AvailableReceivingDetails.FirstOrDefault(rd => rd.Id == receivingDetailId.Value);
            if (selectedDetail != null)
            {
                returnItem.SelectedReceivingDetail = selectedDetail;
                returnItem.SelectedProduct = selectedDetail.Product;
                
                // 設置數量資訊
                returnItem.OriginalQuantity = selectedDetail.ReceivedQuantity;
                returnItem.AlreadyReturnedQuantity = 0; // TODO: 需要從資料庫計算已退回數量
                
                // 設置單價資訊
                returnItem.OriginalUnitPrice = selectedDetail.UnitPrice;
                returnItem.ReturnUnitPrice = selectedDetail.UnitPrice; // 預設為原始單價
                
                // 確保有空行可以輸入新項目
                EnsureOneEmptyRow();
                
                await NotifyDetailsChanged();
            }
        }
        else
        {
            // 清除選擇
            returnItem.SelectedReceivingDetail = null;
            returnItem.SelectedProduct = null;
            returnItem.OriginalQuantity = 0;
            returnItem.AlreadyReturnedQuantity = 0;
            returnItem.ReturnQuantity = 0;
            returnItem.OriginalUnitPrice = 0;
            returnItem.ReturnUnitPrice = 0;
            returnItem.QualityCondition = string.Empty;
            returnItem.Remarks = string.Empty;
            
            await NotifyDetailsChanged();
        }
        
        StateHasChanged();
    }

    private async Task OnReturnQuantityInput(ReturnItem returnItem, string? value)
    {
        if (int.TryParse(value, out var quantity) && quantity >= 0)
        {
            var maxQuantity = returnItem.OriginalQuantity - returnItem.AlreadyReturnedQuantity;
            returnItem.ReturnQuantity = Math.Min(quantity, maxQuantity);
        }
        else
        {
            returnItem.ReturnQuantity = 0;
        }
        
        await NotifyDetailsChanged();
    }

    private async Task OnReturnPriceInput(ReturnItem returnItem, string? value)
    {
        if (decimal.TryParse(value, out var price) && price >= 0)
        {
            returnItem.ReturnUnitPrice = price;
        }
        else
        {
            returnItem.ReturnUnitPrice = 0;
        }
        
        await NotifyDetailsChanged();
    }

    private async Task OnQualityConditionInput(ReturnItem returnItem, string? value)
    {
        returnItem.QualityCondition = value ?? string.Empty;
        await NotifyDetailsChanged();
    }

    private async Task OnRemarksInput(ReturnItem returnItem, string? value)
    {
        returnItem.Remarks = value ?? string.Empty;
        await NotifyDetailsChanged();
    }

    private async Task LoadAllReturnableItems()
    {
        try
        {
            var availableDetails = GetAvailableReceivingDetails();
            
            // 清除現有項目但保留已有資料的項目
            var existingItems = ReturnItems.Where(item => item.SelectedReceivingDetail != null).ToList();
            ReturnItems.Clear();
            ReturnItems.AddRange(existingItems);
            
            // 新增所有可退回的項目
            foreach (var detail in availableDetails)
            {
                // 檢查是否已經存在
                if (ReturnItems.Any(item => item.SelectedReceivingDetail?.Id == detail.Id))
                    continue;
                
                var newItem = new ReturnItem
                {
                    SelectedReceivingDetail = detail,
                    SelectedProduct = detail.Product,
                    OriginalQuantity = detail.ReceivedQuantity,
                    AlreadyReturnedQuantity = 0, // TODO: 需要從資料庫計算已退回數量
                    ReturnQuantity = 0,
                    OriginalUnitPrice = detail.UnitPrice,
                    ReturnUnitPrice = detail.UnitPrice
                };
                
                // 設置搜尋顯示文字
                newItem.ReceivingDetailSearch = newItem.DisplayName;
                
                ReturnItems.Add(newItem);
            }
            
            EnsureOneEmptyRow();
            await NotifyDetailsChanged();
            await NotificationService.ShowSuccessAsync($"已載入 {availableDetails.Count} 項可退回商品");
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入可退回商品時發生錯誤：{ex.Message}");
        }
    }

    private async Task RemoveItemAsync(int index)
    {
        if (index >= 0 && index < ReturnItems.Count)
        {
            var itemToRemove = ReturnItems[index];
            
            // 如果被刪除的項目有對應的資料庫實體，記錄其 ID 以便後續刪除
            if (itemToRemove.ExistingDetailEntity?.Id > 0)
            {
                _deletedDetailIds.Add(itemToRemove.ExistingDetailEntity.Id);
            }
            
            // 通知父組件項目即將被移除（讓父組件可以處理實際的資料庫刪除）
            if (OnItemRemoved.HasDelegate)
            {
                await OnItemRemoved.InvokeAsync(itemToRemove);
            }
            
            ReturnItems.RemoveAt(index);
            EnsureOneEmptyRow();
            await NotifyDetailsChanged();
        }
    }

    private decimal GetTotalAmount()
    {
        return ReturnItems.Where(item => !IsEmptyRow(item))
                          .Sum(item => item.ReturnQuantity * item.OriginalUnitPrice);
    }

    private async Task NotifyDetailsChanged()
    {
        // 轉換為 PurchaseReturnDetail 實體
        var details = ReturnItems.Where(item => !IsEmptyRow(item) && item.ReturnQuantity > 0)
                                 .Select(ConvertToEntity)
                                 .Where(detail => detail != null)
                                 .Cast<PurchaseReturnDetail>()
                                 .ToList();
        
        if (EffectiveDetailsChangedCallback.HasDelegate)
        {
            await EffectiveDetailsChangedCallback.InvokeAsync(details);
        }
        
        // 通知已刪除的明細 ID
        if (OnDeletedDetailsChanged.HasDelegate && _deletedDetailIds.Any())
        {
            await OnDeletedDetailsChanged.InvokeAsync(_deletedDetailIds.ToList());
            // 清空已通知的刪除 ID，避免重複刪除
            _deletedDetailIds.Clear();
        }
        
        if (OnReturnItemsChanged.HasDelegate)
        {
            await OnReturnItemsChanged.InvokeAsync(ReturnItems);
        }
    }

    private PurchaseReturnDetail? ConvertToEntity(ReturnItem item)
    {
        if (item.SelectedReceivingDetail == null || item.SelectedProduct == null || item.ReturnQuantity <= 0)
        {
            return null;
        }
        
        // 如果已有實體，更新它
        if (item.ExistingDetailEntity != null)
        {
            var existingDetail = item.ExistingDetailEntity;
            existingDetail.ReturnQuantity = item.ReturnQuantity;
            existingDetail.OriginalUnitPrice = item.OriginalUnitPrice;
            existingDetail.ReturnUnitPrice = item.ReturnUnitPrice;
            existingDetail.QualityCondition = item.QualityCondition;
            existingDetail.DetailRemarks = item.Remarks;
            existingDetail.BatchNumber = item.BatchNumber;
            existingDetail.PurchaseReceivingDetailId = item.SelectedReceivingDetail.Id;
            existingDetail.ProductId = item.SelectedProduct.Id;
            
            return existingDetail;
        }
        
        // 創建新實體
        return new PurchaseReturnDetail
        {
            ProductId = item.SelectedProduct.Id,
            PurchaseReceivingDetailId = item.SelectedReceivingDetail.Id,
            ReturnQuantity = item.ReturnQuantity,
            OriginalUnitPrice = item.OriginalUnitPrice,
            ReturnUnitPrice = item.ReturnUnitPrice,
            QualityCondition = item.QualityCondition,
            DetailRemarks = item.Remarks,
            BatchNumber = item.BatchNumber,
            ProcessedQuantity = 0,
            IsShipped = false,
            ShippedQuantity = 0,
            ScrapQuantity = 0
        };
    }

    // ===== 公開方法 - 供父組件調用 =====
    public async Task<bool> ValidateAsync()
    {
        try
        {
            // 檢查是否有有效的退回明細
            var validItems = ReturnItems.Where(item => !IsEmptyRow(item) && item.ReturnQuantity > 0).ToList();
            
            if (!validItems.Any())
            {
                await NotificationService.ShowWarningAsync("至少需要一筆有效的退回明細");
                return false;
            }
            
            // 檢查退回數量是否超過可退回數量
            foreach (var item in validItems)
            {
                var maxQuantity = item.OriginalQuantity - item.AlreadyReturnedQuantity;
                if (item.ReturnQuantity > maxQuantity)
                {
                    await NotificationService.ShowErrorAsync($"商品 {item.SelectedProduct?.Name} 的退回數量 ({item.ReturnQuantity}) 超過可退回數量 ({maxQuantity})");
                    return false;
                }
            }
            
            return true;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"驗證退回明細時發生錯誤：{ex.Message}");
            return false;
        }
    }
    
    // ===== ReturnItem 內部類別 =====
    public class ReturnItem
    {
        public Product? SelectedProduct { get; set; }
        public PurchaseReceivingDetail? SelectedReceivingDetail { get; set; }
        
        public int OriginalQuantity { get; set; } = 0;
        public int AlreadyReturnedQuantity { get; set; } = 0;
        public int ReturnQuantity { get; set; } = 0;
        
        public decimal OriginalUnitPrice { get; set; } = 0;
        public decimal ReturnUnitPrice { get; set; } = 0;
        
        public string QualityCondition { get; set; } = string.Empty;
        public string Remarks { get; set; } = string.Empty;
        public string BatchNumber { get; set; } = string.Empty;
        
        public PurchaseReturnDetail? ExistingDetailEntity { get; set; }
        
        // SearchableSelect 支援屬性
        public string ReceivingDetailSearch { get; set; } = string.Empty;
        public List<PurchaseReceivingDetail> FilteredReceivingDetails { get; set; } = new();
        public bool ShowDropdown { get; set; } = false;
        public int SelectedIndex { get; set; } = -1;
        
        // 計算屬性
        public decimal ReturnSubtotal => ReturnQuantity * ReturnUnitPrice;
        public int AvailableQuantity => OriginalQuantity - AlreadyReturnedQuantity;
        
        /// <summary>
        /// 取得顯示用的商品名稱（包含進貨單號）
        /// </summary>
        public string DisplayName => 
            SelectedReceivingDetail?.Product != null && !string.IsNullOrEmpty(SelectedReceivingDetail.PurchaseReceiving?.ReceiptNumber)
                ? $"[{SelectedReceivingDetail.PurchaseReceiving.ReceiptNumber}] [{SelectedReceivingDetail.Product.Code}] {SelectedReceivingDetail.Product.Name}"
                : SelectedProduct != null 
                    ? $"[{SelectedProduct.Code}] {SelectedProduct.Name}" 
                    : ReceivingDetailSearch;
        
        // 顯示名稱（舊版，保持向下相容）
        public string DisplayNameLegacy => SelectedProduct != null 
            ? $"{SelectedProduct.Code} - {SelectedProduct.Name}"
            : "";
    }
}
