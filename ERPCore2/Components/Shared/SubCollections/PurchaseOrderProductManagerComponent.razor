@* 採購單商品管理組件 - 使用 InteractiveTableComponent 統一UI 並整合自動空行功能 *@

@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@inject INotificationService NotificationService
@typeparam TMainEntity where TMainEntity : BaseEntity
@typeparam TDetailEntity where TDetailEntity : BaseEntity, new()

@if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="supplier-warning">
                <i class="fas fa-exclamation-triangle text-warning fa-3x mb-3"></i>
                <h5 class="text-muted">請先選擇供應商</h5>
                <p class="text-muted">選擇供應商後即可開始新增商品</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <InteractiveTableComponent TItem="ProductItem" 
                                      Items="@ProductItems"
                                      ColumnDefinitions="@GetColumnDefinitions()"
                                      IsReadOnly="@IsReadOnly"
                                      ShowRowNumbers="false"
                                      EmptyMessage="@EmptyMessage"
                                      ShowBuiltInActions="true"
                                      ShowBuiltInDeleteButton="true"
                                      OnItemDelete="@HandleItemDelete"
                                      ShowTotalRow="true"
                                      TotalRowTemplate="@GetTotalRowTemplate" />
        </div>
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public List<Product> Products { get; set; } = new List<Product>();
    [Parameter] public EventCallback<List<ProductItem>> OnProductItemsChanged { get; set; }
    
    // ===== 新增供應商過濾參數 =====
    [Parameter] public int? SelectedSupplierId { get; set; }
    
    // ===== 泛型參數 =====
    [Parameter] public TMainEntity? MainEntity { get; set; }
    [Parameter] public List<TDetailEntity> ExistingDetails { get; set; } = new List<TDetailEntity>();
    [Parameter] public EventCallback<List<TDetailEntity>> OnDetailsChanged { get; set; }
    
    // ===== 欄位映射參數 =====
    [Parameter] public string MainEntityIdPropertyName { get; set; } = string.Empty;
    [Parameter] public string QuantityPropertyName { get; set; } = "Quantity";
    [Parameter] public string ReceivedQuantityPropertyName { get; set; } = "ReceivedQuantity";
    [Parameter] public string UnitPricePropertyName { get; set; } = "UnitPrice";
    [Parameter] public string RemarksPropertyName { get; set; } = "Remarks";
    [Parameter] public string? UnitIdPropertyName { get; set; }
    [Parameter] public string? IsReceivingCompletedPropertyName { get; set; }
    [Parameter] public string? WarehouseIdPropertyName { get; set; }
    [Parameter] public string? WarehouseLocationIdPropertyName { get; set; }
    
    // ===== 顯示控制參數 =====
    [Parameter] public bool ShowIsReceivingCompleted { get; set; } = false;
    
    // ===== 顯示標籤參數 =====
    [Parameter] public string QuantityLabel { get; set; } = "數量";
    [Parameter] public string ReceivedQuantityLabel { get; set; } = "入庫量";
    [Parameter] public string PriceLabel { get; set; } = "單價";
    [Parameter] public string RemarksLabel { get; set; } = "備註";
    [Parameter] public string IsReceivingCompletedLabel { get; set; } = "完成進貨";
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "商品資訊";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "box";
    [Parameter] public string ItemDisplayName { get; set; } = "商品";
    [Parameter] public string EmptyIcon { get; set; } = "box-open";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增商品";
    
    // ===== 唯讀模式參數 =====
    [Parameter] public bool IsReadOnly { get; set; } = false;

    private List<ProductItem> ProductItems { get; set; } = new List<ProductItem>();
    private List<Product> FilteredProducts { get; set; } = new List<Product>();
    private List<Product> AvailableProducts { get; set; } = new List<Product>();
    private List<Warehouse> Warehouses { get; set; } = new List<Warehouse>();
    private int? _previousSelectedSupplierId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableProductsAsync();
        await LoadWarehousesAsync();
        await LoadExistingDetailsAsync();
        EnsureOneEmptyRow();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        
        // 檢查供應商是否變更
        if (_previousSelectedSupplierId != SelectedSupplierId)
        {
            _previousSelectedSupplierId = SelectedSupplierId;
            await LoadAvailableProductsAsync();
            
            // 如果更換供應商，需要清空現有選項並重新載入
            ProductItems.Clear();
            await LoadExistingDetailsAsync();
            return; // 供應商變更時已經處理完畢，直接返回
        }
        
        // 參考 ProductSupplierManagerComponent - 簡化邏輯，只在初始化時載入
        // 總是確保有一行空行可以輸入，不論是否已有資料
        EnsureOneEmptyRow();
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    
    /// <summary>
    /// 檢查是否為空行
    /// 業務邏輯：只要選擇了商品，就算是有效的一行，不再是空行
    /// </summary>
    private bool IsEmptyRow(ProductItem item)
    {
        // 檢查商品是否為空
        var isEmpty = item.SelectedProduct == null;
        
        // 只要商品有值，就不是空行
        // 商品是核心欄位，其他欄位可以後續填寫
        return isEmpty;
    }
    
    /// <summary>
    /// 創建空的商品項目
    /// </summary>
    private ProductItem CreateEmptyItem()
    {
        return new ProductItem();
    }
    
    /// <summary>
    /// 確保有一行空行
    /// </summary>
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.ForAny<ProductItem>.EnsureOneEmptyRow(
            ProductItems, 
            IsEmptyRow, 
            CreateEmptyItem
        );
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>();

        // 商品選擇欄位 - 自訂模板
        columns.Add(new() 
        { 
            Title = "商品", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "25%",
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                var isEmptyRow = IsEmptyRow(productItem);
                
                return @<div class="position-relative">
                    <input type="text" class="form-control form-control-sm @(isEmptyRow ? "empty-row-input" : "")" 
                           value="@productItem.ProductSearch"
                           @oninput="async (e) => await OnProductSearchInput(productItem, e.Value?.ToString())"
                           @onfocus="async () => await OnInputFocus(productItem)"
                           @onkeydown="(e) => OnKeyDown(productItem, e)"
                           placeholder="@GetProductInputPlaceholder(isEmptyRow)" 
                           readonly="@IsReadOnly" />
                    
                    @if (productItem.ShowDropdown && FilteredProducts != null && FilteredProducts.Any() && !IsReadOnly)
                    {
                        <div class="dropdown-menu show position-fixed w-auto shadow" 
                             style="z-index: 9999; max-height: 200px; overflow-y: auto; overflow-x: hidden; border: 1px solid #dee2e6; min-width: 300px; max-width: 500px;"
                             id="dropdown-@ProductItems.IndexOf(productItem)">
                            @for (int i = 0; i < FilteredProducts.Count; i++)
                            {
                                var product = FilteredProducts[i];
                                var index = i;
                                <a class="dropdown-item @(productItem.SelectedIndex == index ? "active bg-primary text-white" : "")" 
                                   href="#" 
                                   @onclick="() => SelectProduct(productItem, product)" 
                                   @onclick:preventDefault="true"
                                   style="cursor: pointer; padding: 8px 12px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"
                                   @onmouseenter="() => productItem.SelectedIndex = index">
                                    <strong>@product.Code</strong> - @product.Name
                                </a>
                            }
                        </div>
                    }
                </div>;
            }
        });

        // 數量欄位
        columns.Add(new() 
        { 
            Title = QuantityLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                var isEmptyRow = IsEmptyRow(productItem);
                var value = productItem.Quantity > 0 ? productItem.Quantity.ToString() : "";
                
                return @<input type="number" class="form-control form-control-sm" 
                               value="@value"
                               @oninput="(e) => OnQuantityInput(productItem, e.Value?.ToString())"
                               placeholder="" 
                               min="0" 
                               step="1" 
                               readonly="@IsReadOnly" />;
            }
        });

        // 入庫量欄位 (只讀)
        columns.Add(new() 
        { 
            Title = ReceivedQuantityLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                var isEmptyRow = IsEmptyRow(productItem);
                var value = productItem.ReceivedQuantity > 0 ? productItem.ReceivedQuantity.ToString() : "";
                
                return @<input type="number" class="form-control form-control-sm" 
                               value="@value"
                               readonly
                               placeholder="" 
                               style="background-color: #f8f9fa; cursor: not-allowed;" />;
            }
        });

        // 單價欄位
        columns.Add(new() 
        { 
            Title = PriceLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                var isEmptyRow = IsEmptyRow(productItem);
                var value = productItem.Price > 0 ? productItem.Price.ToString("F0") : "";
                
                return @<input type="number" class="form-control form-control-sm" 
                               value="@value"
                               @oninput="(e) => OnPriceInput(productItem, e.Value?.ToString())"
                               placeholder=""
                               step="1"
                               min="0" 
                               readonly="@IsReadOnly" />;
            }
        });

        // 倉庫選擇欄位
        columns.Add(new() 
        { 
            Title = "倉庫", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "12%",
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                var selectedValue = productItem.WarehouseId.ToString();
                
                return @<select class="form-select form-select-sm"
                                value="@selectedValue"
                                @onchange="(e) => OnWarehouseChanged(productItem, int.TryParse(e.Value?.ToString(), out var warehouseId) ? warehouseId : 0)"
                                disabled="@IsReadOnly">
                    <option value="0">請選擇倉庫</option>
                    @if (Warehouses != null)
                    {
                        @foreach (var warehouse in Warehouses)
                        {
                            <option value="@warehouse.Id">@warehouse.Name</option>
                        }
                    }
                </select>;
            }
        });

        // 庫位選擇欄位
        columns.Add(new() 
        { 
            Title = "庫位", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "12%",
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                var selectedValue = productItem.WarehouseLocationId.ToString();
                
                return @<select class="form-select form-select-sm"
                                value="@selectedValue"
                                @onchange="(e) => OnWarehouseLocationChanged(productItem, int.TryParse(e.Value?.ToString(), out var locationId) ? locationId : 0)"
                                disabled="@(IsReadOnly || productItem.WarehouseId == 0)">
                    <option value="0">請選擇庫位</option>
                    @if (productItem.AvailableWarehouseLocations != null)
                    {
                        @foreach (var location in productItem.AvailableWarehouseLocations)
                        {
                            <option value="@location.Id">@location.Name</option>
                        }
                    }
                </select>;
            }
        });

        // 完成進貨欄位 (條件顯示)
        if (ShowIsReceivingCompleted)
        {
            columns.Add(new() 
            { 
                Title = IsReceivingCompletedLabel, 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "8%",
                CustomTemplate = item => 
                {
                    var productItem = (ProductItem)item;
                    
                    return @<div class="text-center">
                        <div class="form-check form-switch d-flex justify-content-center">
                            <input class="form-check-input" 
                                   type="checkbox" 
                                   checked="@productItem.IsReceivingCompleted"
                                   @onclick="() => OnIsReceivingCompletedChanged(productItem)"
                                   title="手動標記為完成進貨" 
                                   disabled="@IsReadOnly" />
                        </div>
                        @if (productItem.IsReceivingCompleted)
                        {
                            <small class="text-success">
                                <i class="fas fa-check-circle"></i> 已完成
                            </small>
                        }
                    </div>;
                }
            });
        }

        // 備註欄位
        columns.Add(new() 
        { 
            Title = RemarksLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = ShowIsReceivingCompleted ? "10%" : "15%",
            HideOnMobile = true,
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                var isEmptyRow = IsEmptyRow(productItem);
                
                return @<input type="text" class="form-control form-control-sm" 
                               value="@productItem.Remarks"
                               @oninput="(e) => OnRemarksInput(productItem, e.Value?.ToString())"
                               placeholder="選填..."
                               readonly="@IsReadOnly" />;
            }
        });

        return columns;
    }

    private RenderFragment<InteractiveColumnDefinition> GetTotalRowTemplate => column => __builder =>
    {
        if (column.Title == PriceLabel)
        {
            <strong class="text-success">總計: @GetTotalAmount().ToString("C")</strong>
        }
    };

    private async Task HandleItemDelete(ProductItem item)
    {
        var index = ProductItems.IndexOf(item);
        await RemoveItemAsync(index);
    }

    // ===== 內部方法 =====

    /// <summary>
    /// 根據選擇的供應商載入可用商品
    /// </summary>
    private async Task LoadAvailableProductsAsync()
    {
        try
        {
            if (SelectedSupplierId.HasValue && SelectedSupplierId.Value > 0)
            {
                AvailableProducts = await ProductService.GetBySupplierAsync(SelectedSupplierId.Value);
            }
            else
            {
                AvailableProducts = new List<Product>();
            }
        }
        catch (Exception)
        {
            AvailableProducts = new List<Product>();
        }
    }

    /// <summary>
    /// 載入倉庫資料
    /// </summary>
    private async Task LoadWarehousesAsync()
    {
        try
        {
            Warehouses = await WarehouseService.GetAllAsync();
        }
        catch (Exception)
        {
            Warehouses = new List<Warehouse>();
        }
    }

    /// <summary>
    /// 從現有明細資料載入到 ProductItems
    /// </summary>
    private async Task LoadExistingDetailsAsync()
    {
        if (ExistingDetails?.Any() != true) 
        {
            EnsureOneEmptyRow();
            return;
        }

        ProductItems.Clear();
        
        foreach (var detail in ExistingDetails)
        {
            var productId = GetPropertyValue<int>(detail, "ProductId");
            var product = Products.FirstOrDefault(p => p.Id == productId) ?? 
                         AvailableProducts.FirstOrDefault(p => p.Id == productId);
            
            if (product != null)
            {
                var item = new ProductItem
                {
                    SelectedProduct = product,
                    ProductSearch = $"{product.Code} - {product.Name}",
                    Quantity = Convert.ToInt32(GetPropertyValue<object>(detail, QuantityPropertyName) ?? 0),
                    ReceivedQuantity = Convert.ToInt32(GetPropertyValue<object>(detail, ReceivedQuantityPropertyName) ?? 0),
                    Price = Convert.ToDecimal(GetPropertyValue<object>(detail, UnitPricePropertyName) ?? 0m),
                    Remarks = GetPropertyValue<string>(detail, RemarksPropertyName) ?? string.Empty,
                    IsReceivingCompleted = !string.IsNullOrEmpty(IsReceivingCompletedPropertyName) ? 
                        Convert.ToBoolean(GetPropertyValue<object>(detail, IsReceivingCompletedPropertyName) ?? false) : false,
                    ExistingDetailEntity = detail,
                    WarehouseId = !string.IsNullOrEmpty(WarehouseIdPropertyName) ? 
                        Convert.ToInt32(GetPropertyValue<object>(detail, WarehouseIdPropertyName) ?? 0) : 0,
                    WarehouseLocationId = !string.IsNullOrEmpty(WarehouseLocationIdPropertyName) ? 
                        Convert.ToInt32(GetPropertyValue<object>(detail, WarehouseLocationIdPropertyName) ?? 0) : 0
                };
                
                // 如果有倉庫ID，載入對應的庫位列表
                if (item.WarehouseId > 0)
                {
                    try
                    {
                        var result = await WarehouseLocationService.GetByWarehouseIdAsync(item.WarehouseId);
                        if (result.IsSuccess && result.Data != null)
                        {
                            item.AvailableWarehouseLocations = result.Data.ToList();
                        }
                    }
                    catch (Exception)
                    {
                        item.AvailableWarehouseLocations = new List<WarehouseLocation>();
                    }
                }
                
                ProductItems.Add(item);
            }
        }
        
        EnsureOneEmptyRow();
    }

    /// <summary>
    /// 轉換 ProductItems 為明細實體列表
    /// </summary>
    private List<TDetailEntity> ConvertToDetailEntities()
    {
        var details = new List<TDetailEntity>();
        
        foreach (var item in ProductItems.Where(x => !IsEmptyRow(x) && x.SelectedProduct != null))
        {
            TDetailEntity detail;
            
            if (item.ExistingDetailEntity != null)
            {
                detail = item.ExistingDetailEntity;
            }
            else
            {
                detail = new TDetailEntity();
                
                if (MainEntity != null && !string.IsNullOrEmpty(MainEntityIdPropertyName))
                {
                    SetPropertyValue(detail, MainEntityIdPropertyName, MainEntity.Id);
                }
                
                if (item.SelectedProduct != null)
                {
                    SetPropertyValue(detail, "ProductId", item.SelectedProduct.Id);
                }
            }
            
            SetPropertyValue(detail, QuantityPropertyName, item.Quantity);
            SetPropertyValue(detail, ReceivedQuantityPropertyName, item.ReceivedQuantity);
            SetPropertyValue(detail, UnitPricePropertyName, item.Price);
            SetPropertyValue(detail, RemarksPropertyName, item.Remarks);
            
            if (!string.IsNullOrEmpty(IsReceivingCompletedPropertyName))
            {
                SetPropertyValue(detail, IsReceivingCompletedPropertyName, item.IsReceivingCompleted);
            }
            
            if (!string.IsNullOrEmpty(WarehouseIdPropertyName))
            {
                SetPropertyValue(detail, WarehouseIdPropertyName, item.WarehouseId);
            }
            if (!string.IsNullOrEmpty(WarehouseLocationIdPropertyName))
            {
                SetPropertyValue(detail, WarehouseLocationIdPropertyName, item.WarehouseLocationId);
            }
            
            details.Add(detail);
        }
        
        return details;
    }

    /// <summary>
    /// 直接通知詳細資料變更 - 參考 ProductSupplierManagerComponent 的簡潔寫法
    /// </summary>
    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToDetailEntities();
        await OnDetailsChanged.InvokeAsync(details);
    }

    /// <summary>
    /// 使用反射取得屬性值
    /// </summary>
    private T? GetPropertyValue<T>(object obj, string propertyName)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property == null) return default(T);
        
        var value = property.GetValue(obj);
        if (value == null) return default(T);
        
        if (typeof(T) == typeof(object)) return (T)value;
        
        return (T)Convert.ChangeType(value, typeof(T));
    }

    /// <summary>
    /// 使用反射設定屬性值
    /// </summary>
    private void SetPropertyValue(object obj, string propertyName, object? value)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property != null && property.CanWrite)
        {
            if (value != null && property.PropertyType != value.GetType())
            {
                if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    var underlyingType = Nullable.GetUnderlyingType(property.PropertyType);
                    value = Convert.ChangeType(value, underlyingType!);
                }
                else
                {
                    value = Convert.ChangeType(value, property.PropertyType);
                }
            }
            property.SetValue(obj, value);
        }
    }

    // ===== InteractiveTableComponent 事件處理 =====

    private async Task OnInputFocus(ProductItem item)
    {
        await ShowProductDropdown(item);
    }

    private async Task OnProductSearchInput(ProductItem item, string? searchValue)
    {
        var wasEmpty = IsEmptyRow(item);
        
        item.ProductSearch = searchValue ?? string.Empty;
        
        if (string.IsNullOrWhiteSpace(searchValue))
        {
            item.SelectedProduct = null;
            item.SelectedIndex = -1;
            
            var availableProducts = GetAvailableProducts();
            FilteredProducts = availableProducts.Take(20).ToList();
            item.ShowDropdown = FilteredProducts.Any();
        }
        else
        {
            var availableProducts = GetAvailableProducts();
            
            FilteredProducts = availableProducts
                .Where(p => p.Code?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true ||
                           p.Name?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true)
                .Take(20)
                .ToList();
            
            item.ShowDropdown = FilteredProducts.Any();
            item.SelectedIndex = FilteredProducts.Any() ? 0 : -1;
        }
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
        
        if (item.ShowDropdown)
        {
            await Task.Delay(10);
            await PositionDropdownAsync(item);
        }
    }

    private async Task OnQuantityInput(ProductItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(value))
        {
            item.Quantity = 0;
        }
        else if (int.TryParse(value, out var quantity))
        {
            item.Quantity = quantity;
        }
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnPriceInput(ProductItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(value))
        {
            item.Price = 0;
        }
        else if (decimal.TryParse(value, out var price))
        {
            item.Price = price;
        }
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnRemarksInput(ProductItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        item.Remarks = value ?? string.Empty;
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnWarehouseChanged(ProductItem item, int warehouseId)
    {
        var wasEmpty = IsEmptyRow(item);
        
        item.WarehouseId = warehouseId;
        item.WarehouseLocationId = 0;
        
        if (warehouseId > 0)
        {
            try
            {
                var result = await WarehouseLocationService.GetByWarehouseIdAsync(warehouseId);
                if (result.IsSuccess && result.Data != null)
                {
                    item.AvailableWarehouseLocations = result.Data.ToList();
                }
                else
                {
                    item.AvailableWarehouseLocations = new List<WarehouseLocation>();
                }
            }
            catch (Exception)
            {
                item.AvailableWarehouseLocations = new List<WarehouseLocation>();
            }
        }
        else
        {
            item.AvailableWarehouseLocations = new List<WarehouseLocation>();
        }
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnWarehouseLocationChanged(ProductItem item, int locationId)
    {
        var wasEmpty = IsEmptyRow(item);
        
        item.WarehouseLocationId = locationId;
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnIsReceivingCompletedChanged(ProductItem item)
    {
        var wasEmpty = IsEmptyRow(item);
        
        item.IsReceivingCompleted = !item.IsReceivingCompleted;
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task SelectProduct(ProductItem item, Product product)
    {
        var wasEmpty = IsEmptyRow(item);
        
        item.ProductSearch = $"{product.Code} - {product.Name}";
        item.SelectedProduct = product;
        item.ShowDropdown = false;
        item.SelectedIndex = -1;
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnKeyDown(ProductItem item, KeyboardEventArgs e)
    {
        if (!item.ShowDropdown || FilteredProducts == null || !FilteredProducts.Any())
            return;

        switch (e.Key)
        {
            case "ArrowDown":
                item.SelectedIndex = Math.Min(item.SelectedIndex + 1, FilteredProducts.Count - 1);
                await ScrollSelectedItemIntoView(item);
                StateHasChanged();
                break;
                
            case "ArrowUp":
                item.SelectedIndex = Math.Max(item.SelectedIndex - 1, 0);
                await ScrollSelectedItemIntoView(item);
                StateHasChanged();
                break;
                
            case "Enter":
                if (item.SelectedIndex >= 0 && item.SelectedIndex < FilteredProducts.Count)
                {
                    await SelectProduct(item, FilteredProducts[item.SelectedIndex]);
                }
                break;
                
            case "Escape":
                item.ShowDropdown = false;
                item.SelectedIndex = -1;
                StateHasChanged();
                break;
        }
    }

    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= ProductItems.Count) return;
        
        var removedItem = ProductItems[index];
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleItemRemove(
            ProductItems, removedItem, IsEmptyRow, CreateEmptyItem);
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    // ===== 舊版相容性方法 =====

    private async Task ShowProductDropdown(ProductItem item)
    {
        if (!string.IsNullOrWhiteSpace(item.ProductSearch))
        {
            await OnProductSearchInput(item, item.ProductSearch);
        }
        else
        {
            item.SelectedIndex = -1;
            var availableProducts = GetAvailableProducts();
            FilteredProducts = availableProducts.Take(20).ToList();
            item.ShowDropdown = FilteredProducts.Any();
        }
        
        if (item.ShowDropdown)
        {
            StateHasChanged();
            await Task.Delay(10);
            await PositionDropdownAsync(item);
        }
    }

    /// <summary>
    /// 取得可用商品列表（根據供應商過濾）
    /// </summary>
    private List<Product> GetAvailableProducts()
    {
        if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
        {
            return new List<Product>();
        }
        
        return AvailableProducts;
    }

    private async Task ScrollSelectedItemIntoView(ProductItem item)
    {
        await Task.CompletedTask;
    }

    /// <summary>
    /// 使用 JavaScript 定位下拉選單
    /// </summary>
    private async Task PositionDropdownAsync(ProductItem item)
    {
        try
        {
            var itemIndex = ProductItems.IndexOf(item);
            // 簡化的 JavaScript 定位邏輯
            await Task.Delay(1);
        }
        catch (Exception)
        {
            // 忽略 JavaScript 錯誤
        }
    }

    /// <summary>
    /// 取得商品輸入框的提示文字
    /// </summary>
    private string GetProductInputPlaceholder(bool isEmptyRow)
    {
        if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
        {
            return "請先選擇供應商...";
        }
        
        return isEmptyRow ? "點擊開始輸入商品..." : "輸入商品編號或名稱...";
    }

    private decimal GetTotalAmount()
    {
        return ProductItems
            .Where(item => !IsEmptyRow(item) && item.SelectedProduct != null && item.Quantity > 0)
            .Sum(item => item.Quantity * item.Price);
    }

    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        if (!AutoEmptyRowHelper.ForAny<ProductItem>.HasSufficientItems(ProductItems, IsEmptyRow, 1))
        {
            errors.Add("至少需要一個商品");
        }
        else
        {
            var nonEmptyItems = AutoEmptyRowHelper.ForAny<ProductItem>.GetNonEmptyItems(ProductItems, IsEmptyRow);
            var productIds = nonEmptyItems.Select(item => item.SelectedProduct?.Id).Where(id => id.HasValue).ToList();
            if (productIds.Count != productIds.Distinct().Count())
            {
                errors.Add("存在重複的商品");
            }
        }
          
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }

    public class ProductItem
    {
        public string ProductSearch { get; set; } = string.Empty;
        public Product? SelectedProduct { get; set; }
        public int Quantity { get; set; } = 0;
        public int ReceivedQuantity { get; set; } = 0;
        public decimal Price { get; set; } = 0;
        public string Remarks { get; set; } = string.Empty;
        public bool IsReceivingCompleted { get; set; } = false;
        public bool ShowDropdown { get; set; } = false;
        public int SelectedIndex { get; set; } = -1;
        public TDetailEntity? ExistingDetailEntity { get; set; }
        
        public int WarehouseId { get; set; } = 0;
        public int WarehouseLocationId { get; set; } = 0;
        public List<WarehouseLocation> AvailableWarehouseLocations { get; set; } = new List<WarehouseLocation>();
    }
}
