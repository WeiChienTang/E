@* 銷售退貨商品明細管理元件 - 使用 InteractiveTableComponent 統一UI *@

@inject ISalesOrderDetailService SalesOrderDetailService
@inject ISalesReturnDetailService SalesReturnDetailService
@inject INotificationService NotificationService
@inject IWarehouseLocationService WarehouseLocationService
@inject ISystemParameterService SystemParameterService
@using ERPCore2.Helpers
@using ERPCore2.Components.Shared.SubCollections
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Components.Shared.Tables

@if (!CustomerId.HasValue || CustomerId.Value <= 0)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="customer-warning">
                <p class="text-muted">選擇客戶後即可查看該客戶可退貨的商品</p>
            </div>
        </div>
    </div>
}
else if ((IsEditMode && ReturnItems.Any()) || (!IsEditMode && ReturnableDetails != null && ReturnableDetails.Any()))
{
    <div class="card border-0 shadow-sm">
        @* 篩選資訊顯示 *@
        @if (FilterSalesOrderId.HasValue && FilterSalesOrderId.Value > 0 && !IsEditMode)
        {
            var selectedOrder = ReturnableDetails.FirstOrDefault(rd => rd.SalesOrderId == FilterSalesOrderId.Value)?.SalesOrder;
            @if (selectedOrder != null)
            {
                <div class="card-header bg-info text-white">
                    <i class="fas fa-filter me-2"></i>
                    <span>正在顯示銷售訂單：<strong>@selectedOrder.SalesOrderNumber</strong> 的商品明細</span>
                </div>
            }
        }
        
        @if (FilterProductId.HasValue && FilterProductId.Value > 0 && !IsEditMode)
        {
            var selectedProduct = ReturnableDetails.FirstOrDefault(rd => rd.ProductId == FilterProductId.Value)?.Product;
            @if (selectedProduct != null)
            {
                <div class="card-header bg-warning text-dark">
                    <i class="fas fa-filter me-2"></i>
                    <span>正在篩選產品：<strong>@selectedProduct.Code - @selectedProduct.Name</strong></span>
                </div>
            }
        }
        
        <div class="card-body p-0">
            <InteractiveTableComponent TItem="ReturnItem" 
                                      Items="@ReturnItems"
                                      ColumnDefinitions="@GetColumnDefinitions()"
                                      IsReadOnly="false"
                                      ShowRowNumbers="false"
                                      EmptyMessage="@EmptyMessage"
                                      ShowTotalRow="true"
                                      TotalRowTemplate="@GetTotalRowTemplate" />
        </div>
        
        <div class="card-footer">
            <div class="d-flex justify-content-end gap-2">
                <GenericButtonComponent Text="退貨量全填"
                                      Variant="ButtonVariant.Success"
                                      OnClick="FillAllQuantities" />
                <GenericButtonComponent Text="退貨量清空"
                                      Variant="ButtonVariant.Danger"
                                      OnClick="ClearAllQuantities" />
            </div>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="empty-state">
                <i class="fas fa-undo-alt fa-3x mb-3 text-muted"></i>
                @if (IsEditMode)
                {
                    <h5 class="text-muted">此退貨單尚無明細資料</h5>
                    <p class="text-muted">請檢查資料載入狀況或聯繫系統管理員</p>
                }
                else if (FilterSalesOrderId.HasValue && FilterSalesOrderId.Value > 0)
                {
                    <h5 class="text-muted">該銷售訂單尚無可退貨的商品</h5>
                    <p class="text-muted">該銷售訂單的所有商品都已退貨完成，或您可以選擇其他訂單</p>
                }
                else
                {
                    <h5 class="text-muted">尚無可退貨的商品</h5>
                    <p class="text-muted">該客戶的所有銷售項目都已退貨完成</p>
                }
            </div>
        </div>
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public int? CustomerId { get; set; }
    [Parameter] public int? FilterSalesOrderId { get; set; }
    [Parameter] public int? FilterProductId { get; set; }
    [Parameter] public List<SalesReturnDetail> ExistingReturnDetails { get; set; } = new List<SalesReturnDetail>();
    [Parameter] public EventCallback<List<SalesReturnDetail>> OnReturnDetailsChanged { get; set; }
    [Parameter] public bool IsEditMode { get; set; } = false;

    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "退貨明細";
    [Parameter] public string EmptyMessage { get; set; } = "尚無退貨明細";
    
    // ===== 內部狀態 =====
    private List<SalesOrderDetail> ReturnableDetails { get; set; } = new List<SalesOrderDetail>();
    private List<ReturnItem> ReturnItems { get; set; } = new List<ReturnItem>();
    private List<WarehouseLocation> AllWarehouseLocations { get; set; } = new List<WarehouseLocation>();
    private Dictionary<int, decimal> _returnedQuantityCache = new Dictionary<int, decimal>(); // 快取已退貨數量
    private decimal _taxRate = 5.00m; // 系統稅率，預設5%
    private int? _previousCustomerId = null;
    private int? _previousFilterSalesOrderId = null;
    private int? _previousFilterProductId = null;
    private bool _isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // 檢查客戶、銷售訂單或產品篩選是否變更
        if (_previousCustomerId != CustomerId || 
            _previousFilterSalesOrderId != FilterSalesOrderId ||
            _previousFilterProductId != FilterProductId)
        {
            _previousCustomerId = CustomerId;
            _previousFilterSalesOrderId = FilterSalesOrderId;
            _previousFilterProductId = FilterProductId;
            
            // 只在已初始化後才重新載入資料，避免與 OnInitializedAsync 重複
            if (_isInitialized)
            {
                await LoadReturnableDetailsAsync();
                LoadExistingReturnDetails();
            }
        }
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>();

        // 銷售訂單號欄位
        columns.Add(new()
        {
            Title = "銷售訂單",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "14%",
            CustomTemplate = item =>
            {
                var returnItem = (ReturnItem)item;
                var orderDetail = returnItem.SalesOrderDetail;
                
                // 加強空值檢查
                if (orderDetail?.SalesOrder == null)
                {
                    return @<small class="text-muted">-</small>;
                }
                
                return @<small class="text-primary fw-bold">@orderDetail.SalesOrder.SalesOrderNumber</small>;
            }
        });

        // 訂單日期欄位
        columns.Add(new()
        {
            Title = "訂單日期",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            HideOnMobile = true,
            CustomTemplate = item =>
            {
                var returnItem = (ReturnItem)item;
                var orderDetail = returnItem.SalesOrderDetail;
                
                // 加強空值檢查
                if (orderDetail?.SalesOrder == null)
                {
                    return @<small class="text-muted">-</small>;
                }
                
                return @<small class="text-muted">@orderDetail.SalesOrder.OrderDate.ToString("MM/dd")</small>;
            }
        });

        // 商品欄位
        columns.Add(new()
        {
            Title = "商品",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "18%",
            CustomTemplate = item =>
            {
                var returnItem = (ReturnItem)item;
                var orderDetail = returnItem.SalesOrderDetail;
                
                // 加強空值檢查
                if (orderDetail?.Product == null)
                {
                    return @<div class="product-info">
                        <span class="text-muted">-</span>
                    </div>;
                }
                
                return @<div class="product-info">
                    <strong>@orderDetail.Product.Code</strong>
                    <br />
                    <small class="text-muted">@orderDetail.Product.Name</small>
                </div>;
            }
        });

        // 訂單量欄位（唯讀）
        columns.Add(new()
        {
            Title = "訂單量",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "7%",
            CustomTemplate = item =>
            {
                var returnItem = (ReturnItem)item;
                var orderDetail = returnItem.SalesOrderDetail;
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold">@orderDetail.OrderQuantity.ToString("N0")</span>
                </div>;
            }
        });

        // 已退貨量欄位（唯讀）
        columns.Add(new()
        {
            Title = "已退貨",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "7%",
            CustomTemplate = item =>
            {
                var returnItem = (ReturnItem)item;
                var returnedQuantity = GetReturnedQuantity(returnItem.SalesOrderDetail);
                var isCompleted = returnedQuantity >= returnItem.SalesOrderDetail.OrderQuantity;
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold @(isCompleted ? "text-success" : "")">@returnedQuantity.ToString("N0")</span>
                </div>;
            }
        });

        // 退貨數量欄位
        columns.Add(new()
        {
            Title = "退貨量",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "7%",
            CustomTemplate = item =>
            {
                var returnItem = (ReturnItem)item;
                var returnableQuantity = GetReturnableQuantity(returnItem.SalesOrderDetail);
                var value = returnItem.ReturnQuantity > 0 ? returnItem.ReturnQuantity.ToString("N0") : "";
                
                return @<div>
                    <input type="number" class="form-control form-control-sm text-end" 
                           value="@value"
                           min="0" max="@returnableQuantity"
                           step="1"
                           @onchange="@(async (e) => await OnReturnQuantityChanged(returnItem, e.Value?.ToString()))"
                           placeholder="0" />
                    @if (returnItem.ValidationError != null)
                    {
                        <small class="text-danger">@returnItem.ValidationError</small>
                    }
                </div>;
            }
        });

        // 退貨單價欄位（唯讀顯示）
        columns.Add(new()
        {
            Title = "退貨單價",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "7%",
            CustomTemplate = item =>
            {
                var returnItem = (ReturnItem)item;
                var value = returnItem.ReturnUnitPrice > 0 ? returnItem.ReturnUnitPrice : returnItem.SalesOrderDetail.UnitPrice;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold">@value.ToString("N0")</span>
                </div>;
            }
        });

        // 退貨原因欄位
        columns.Add(new()
        {
            Title = "退貨原因",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "8%",
            CustomTemplate = item =>
            {
                var returnItem = (ReturnItem)item;
                
                return @<select class="form-select form-select-sm" 
                                @onchange="@(async (e) => await OnReturnReasonChanged(returnItem, e.Value?.ToString()))">
                    <option value="">請選擇</option>
                    <option value="客戶不滿意" selected="@(returnItem.ReturnReason == "客戶不滿意")">客戶不滿意</option>
                    <option value="商品瑕疵" selected="@(returnItem.ReturnReason == "商品瑕疵")">商品瑕疵</option>
                    <option value="規格錯誤" selected="@(returnItem.ReturnReason == "規格錯誤")">規格錯誤</option>
                    <option value="過期商品" selected="@(returnItem.ReturnReason == "過期商品")">過期商品</option>
                    <option value="數量錯誤" selected="@(returnItem.ReturnReason == "數量錯誤")">數量錯誤</option>
                    <option value="其他" selected="@(returnItem.ReturnReason == "其他")">其他</option>
                </select>;
            }
        });

        return columns;
    }

    private RenderFragment<InteractiveColumnDefinition> GetTotalRowTemplate => column => __builder =>
    {
        if (column.Title == "退貨單價")
        {
            <strong class="text-danger">總計(含稅): @GetTotalReturnAmount().ToString("C")</strong>
        }
    };

    /// <summary>
    /// 載入所有必要資料
    /// </summary>
    private async Task LoadDataAsync()
    {
        try
        {
            await LoadTaxRateAsync();
            await LoadWarehouseLocationsAsync();
            await LoadReturnableDetailsAsync();
            await LoadReturnedQuantitiesAsync();
            LoadExistingReturnDetails();
            _isInitialized = true;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入資料時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 載入系統稅率
    /// </summary>
    private async Task LoadTaxRateAsync()
    {
        try
        {
            _taxRate = await SystemParameterService.GetTaxRateAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入系統稅率時發生錯誤，使用預設稅率：{ex.Message}");
            _taxRate = 5.00m; // 發生錯誤時使用預設稅率
        }
    }

    /// <summary>
    /// 載入倉庫位置資料
    /// </summary>
    private async Task LoadWarehouseLocationsAsync()
    {
        try
        {
            AllWarehouseLocations = await WarehouseLocationService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫位置資料時發生錯誤：{ex.Message}");
            AllWarehouseLocations = new List<WarehouseLocation>();
        }
    }

    /// <summary>
    /// 載入已退貨數量快取
    /// </summary>
    private async Task LoadReturnedQuantitiesAsync()
    {
        try
        {
            _returnedQuantityCache.Clear();
            if (ReturnableDetails?.Any() == true)
            {
                foreach (var detail in ReturnableDetails)
                {
                    var returnedQuantity = await SalesReturnDetailService.GetReturnedQuantityByOrderDetailAsync(detail.Id);
                    _returnedQuantityCache[detail.Id] = returnedQuantity;
                }
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入已退貨數量時發生錯誤：{ex.Message}");
            _returnedQuantityCache.Clear();
        }
    }

    /// <summary>
    /// 載入客戶的可退貨明細
    /// </summary>
    private async Task LoadReturnableDetailsAsync()
    {
        try
        {
            if (CustomerId.HasValue && CustomerId.Value > 0)
            {
                if (IsEditMode)
                {
                    // 編輯模式：根據現有退貨明細，載入對應的銷售訂單明細以提供完整的導航屬性
                    if (ExistingReturnDetails?.Any() == true)
                    {
                        var orderDetailIds = ExistingReturnDetails
                            .Where(rd => rd.SalesOrderDetailId.HasValue)
                            .Select(rd => rd.SalesOrderDetailId!.Value)
                            .Distinct()
                            .ToList();
                        
                        ReturnableDetails = new List<SalesOrderDetail>();
                        foreach (var id in orderDetailIds)
                        {
                            var detail = await SalesOrderDetailService.GetWithIncludesAsync(id);
                            if (detail != null)
                            {
                                ReturnableDetails.Add(detail);
                            }
                        }
                    }
                    else
                    {
                        ReturnableDetails = new List<SalesOrderDetail>();
                    }
                }
                else
                {
                    // 新增模式：載入客戶的可退貨明細
                    ReturnableDetails = await SalesOrderDetailService.GetReturnableDetailsByCustomerAsync(CustomerId.Value);
                }
                await CreateReturnItems();
            }
            else
            {
                ReturnableDetails = new List<SalesOrderDetail>();
                ReturnItems = new List<ReturnItem>();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入可退貨明細時發生錯誤：{ex.Message}");
            ReturnableDetails = new List<SalesOrderDetail>();
            ReturnItems = new List<ReturnItem>();
        }
    }

    /// <summary>
    /// 從可退貨明細建立退貨項目
    /// </summary>
    private Task CreateReturnItems()
    {
        if (IsEditMode)
        {
            // 編輯模式：只在沒有項目時初始化空列表，項目將在 LoadExistingReturnDetails 中建立
            if (!ReturnItems.Any())
            {
                ReturnItems = new List<ReturnItem>();
            }
        }
        else
        {
            // 新增模式：從可退貨明細建立項目
            var filteredDetails = ReturnableDetails.AsEnumerable();
            
            // 如果有指定銷售訂單ID，只顯示該訂單的明細
            if (FilterSalesOrderId.HasValue && FilterSalesOrderId.Value > 0)
            {
                filteredDetails = filteredDetails.Where(rd => rd.SalesOrderId == FilterSalesOrderId.Value);
            }
            
            // 如果有指定產品篩選，只顯示該產品的明細
            if (FilterProductId.HasValue && FilterProductId.Value > 0)
            {
                filteredDetails = filteredDetails.Where(rd => rd.ProductId == FilterProductId.Value);
            }
            
            var detailsList = filteredDetails.ToList();
            ReturnItems = new List<ReturnItem>();
            
            foreach (var rd in detailsList)
            {
                var returnItem = new ReturnItem
                {
                    SalesOrderDetail = rd,
                    ReturnQuantity = 0,
                    ReturnUnitPrice = rd.UnitPrice, // 預設為原銷售單價
                    WarehouseLocationId = rd.WarehouseId.HasValue ? null : null, // 可以自選倉庫位置
                    ReturnReason = "",
                    QualityCondition = ""
                };
                
                ReturnItems.Add(returnItem);
            }
        }
        
        return Task.CompletedTask;
    }

    /// <summary>
    /// 載入現有退貨明細
    /// </summary>
    private void LoadExistingReturnDetails()
    {
        if (ExistingReturnDetails?.Any() != true) return;

        if (IsEditMode)
        {
            // 編輯模式：只在 ReturnItems 為空時才基於現有明細建立退貨項目，避免重複創建
            if (!ReturnItems.Any())
            {
                ReturnItems = ExistingReturnDetails.Select(existingDetail => new ReturnItem
                {
                    ExistingReturnDetail = existingDetail,
                    SalesOrderDetail = ReturnableDetails.FirstOrDefault(rd => rd.Id == existingDetail.SalesOrderDetailId) ?? new SalesOrderDetail(),
                    ReturnQuantity = existingDetail.ReturnQuantity,
                    ReturnUnitPrice = existingDetail.ReturnUnitPrice,
                    WarehouseLocationId = null, // 銷售退貨不涉及特定倉庫位置
                    ReturnReason = existingDetail.DetailRemarks ?? "",
                    QualityCondition = existingDetail.QualityCondition ?? ""
                }).ToList();
            }
            else
            {
                // 如果已有項目，則更新現有項目而不是重新創建
                foreach (var existingDetail in ExistingReturnDetails)
                {
                    var item = ReturnItems.FirstOrDefault(ri => ri.SalesOrderDetail?.Id == existingDetail.SalesOrderDetailId);
                    if (item != null)
                    {
                        item.ExistingReturnDetail = existingDetail;
                        item.ReturnQuantity = existingDetail.ReturnQuantity;
                        item.ReturnUnitPrice = existingDetail.ReturnUnitPrice;
                        item.ReturnReason = existingDetail.DetailRemarks ?? "";
                        item.QualityCondition = existingDetail.QualityCondition ?? "";
                    }
                }
            }
        }
        else
        {
            // 新增模式：將現有明細套用到項目上
            if (!ReturnItems.Any()) return;

            foreach (var existingDetail in ExistingReturnDetails)
            {
                var item = ReturnItems.FirstOrDefault(ri => ri.SalesOrderDetail?.Id == existingDetail.SalesOrderDetailId);
                if (item != null)
                {
                    item.ReturnQuantity = existingDetail.ReturnQuantity;
                    item.ReturnUnitPrice = existingDetail.ReturnUnitPrice;
                    item.ReturnReason = existingDetail.DetailRemarks ?? "";
                    item.QualityCondition = existingDetail.QualityCondition ?? "";
                }
            }
        }
    }

    // ===== 事件處理 =====

    /// <summary>
    /// 填滿所有可退貨數量
    /// </summary>
    private async Task FillAllQuantities()
    {
        foreach (var item in ReturnItems)
        {
            if (item.SalesOrderDetail != null)
            {
                var returnableQuantity = GetReturnableQuantity(item.SalesOrderDetail);
                item.ReturnQuantity = returnableQuantity;
                item.ValidationError = null;
            }
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 清空所有數量
    /// </summary>
    private async Task ClearAllQuantities()
    {
        foreach (var item in ReturnItems)
        {
            item.ReturnQuantity = 0;
            item.ValidationError = null;
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 退貨數量變更
    /// </summary>
    private async Task OnReturnQuantityChanged(ReturnItem item, string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            item.ReturnQuantity = 0;
            item.ValidationError = null;
        }
        else if (decimal.TryParse(value, out decimal quantity))
        {
            if (quantity < 0)
            {
                item.ReturnQuantity = 0;
                item.ValidationError = "數量不可為負數";
            }
            else
            {
                var returnableQuantity = GetReturnableQuantity(item.SalesOrderDetail);
                if (quantity > returnableQuantity)
                {
                    item.ReturnQuantity = returnableQuantity;
                    item.ValidationError = $"退貨數量不可超過可退貨量 {returnableQuantity:N0}";
                }
                else
                {
                    item.ReturnQuantity = quantity;
                    item.ValidationError = null;
                }
            }
        }
        else
        {
            // 保持原值，但顯示錯誤
            item.ValidationError = "請輸入有效的數字";
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 退貨單價變更
    /// </summary>
    private async Task OnReturnUnitPriceChanged(ReturnItem item, string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            item.ReturnUnitPrice = item.SalesOrderDetail.UnitPrice; // 恢復預設值
        }
        else if (decimal.TryParse(value, out decimal price))
        {
            if (price < 0)
            {
                item.ReturnUnitPrice = 0;
            }
            else
            {
                item.ReturnUnitPrice = price;
            }
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 倉庫位置變更
    /// </summary>
    private async Task OnWarehouseLocationChanged(ReturnItem item, string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            item.WarehouseLocationId = null;
        }
        else if (int.TryParse(value, out int locationId))
        {
            item.WarehouseLocationId = locationId;
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 退貨原因變更
    /// </summary>
    private async Task OnReturnReasonChanged(ReturnItem item, string? value)
    {
        item.ReturnReason = value ?? "";
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 取得指定倉庫的可用位置
    /// </summary>
    private List<WarehouseLocation> GetAvailableLocations(int? warehouseId)
    {
        if (!warehouseId.HasValue)
            return new List<WarehouseLocation>();
            
        return AllWarehouseLocations
            .Where(loc => loc.WarehouseId == warehouseId.Value)
            .OrderBy(loc => loc.Code)
            .ToList();
    }

    // ===== 資料轉換和通知 =====

    /// <summary>
    /// 轉換為退貨明細實體
    /// </summary>
    private List<SalesReturnDetail> ConvertToReturnDetails()
    {
        var details = new List<SalesReturnDetail>();

        foreach (var item in ReturnItems.Where(x => x.ReturnQuantity > 0))
        {
            SalesReturnDetail detail;

            if (item.ExistingReturnDetail != null)
            {
                // 更新現有實體
                detail = item.ExistingReturnDetail;
            }
            else
            {
                // 建立新實體
                detail = new SalesReturnDetail();
            }

            // 設定屬性
            detail.SalesOrderDetailId = item.SalesOrderDetail?.Id;
            detail.ProductId = item.SalesOrderDetail?.ProductId ?? 0;
            detail.ReturnQuantity = item.ReturnQuantity;
            detail.OriginalUnitPrice = item.SalesOrderDetail?.UnitPrice ?? 0;
            detail.ReturnUnitPrice = item.ReturnUnitPrice;
            detail.DetailRemarks = item.ReturnReason;
            detail.QualityCondition = item.QualityCondition;

            details.Add(detail);
        }

        return details;
    }

    /// <summary>
    /// 通知明細變更
    /// </summary>
    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToReturnDetails();
        await OnReturnDetailsChanged.InvokeAsync(details);
    }

    // ===== 統計方法 =====

    private decimal GetTotalReturnQuantity()
    {
        return ReturnItems.Sum(item => item.ReturnQuantity);
    }

    private decimal GetTotalReturnAmount()
    {
        var subtotal = ReturnItems
            .Where(item => item.ReturnQuantity > 0)
            .Sum(item => item.ReturnQuantity * item.ReturnUnitPrice);
        
        // 計算含稅總額
        return subtotal * (1 + _taxRate / 100);
    }

    /// <summary>
    /// 計算已退貨數量
    /// </summary>
    private decimal GetReturnedQuantity(SalesOrderDetail orderDetail)
    {
        // 從快取中獲取已退貨數量，如果沒有則返回 0
        return _returnedQuantityCache.GetValueOrDefault(orderDetail.Id, 0);
    }

    /// <summary>
    /// 計算可退貨數量
    /// </summary>
    private decimal GetReturnableQuantity(SalesOrderDetail orderDetail)
    {
        var returnedQuantity = GetReturnedQuantity(orderDetail);
        return orderDetail.OrderQuantity - returnedQuantity;
    }

    /// <summary>
    /// 驗證所有退貨明細
    /// </summary>
    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        // 檢查是否有退貨項目
        var potentialItems = ReturnItems.Where(item => item.ReturnQuantity > 0).ToList();
        if (!potentialItems.Any())
        {
            errors.Add("至少需要一個退貨項目");
        }
        
        // 檢查必填欄位和基本驗證
        foreach (var item in potentialItems)
        {
            // 檢查 SalesOrderDetail 不為 null
            if (item.SalesOrderDetail == null) continue;
            
            // 自動調整超出範圍的退貨量（與輸入時的邏輯保持一致）
            var returnableQuantity = GetReturnableQuantity(item.SalesOrderDetail);
            if (item.ReturnQuantity > returnableQuantity)
            {
                item.ReturnQuantity = returnableQuantity;
                item.ValidationError = null;
                await NotifyDetailsChanged(); // 通知變更以更新UI
            }
            
            if (item.ReturnUnitPrice < 0)
            {
                errors.Add($"商品 {item.SalesOrderDetail?.Product?.Code} 的退貨單價不可為負數");
            }
        }
        
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }

    /// <summary>
    /// 退貨項目類別
    /// </summary>
    public class ReturnItem
    {
        public SalesOrderDetail SalesOrderDetail { get; set; } = null!;
        public decimal ReturnQuantity { get; set; } = 0;
        public decimal ReturnUnitPrice { get; set; } = 0;
        public int? WarehouseLocationId { get; set; }
        public string? ReturnReason { get; set; }
        public string? QualityCondition { get; set; }
        public string? ValidationError { get; set; }
        public SalesReturnDetail? ExistingReturnDetail { get; set; }
    }
}