@* 銷售退貨商品明細管理元件 - 使用 InteractiveTableComponent 統一UI 並整合自動空行功能 *@

@inject ISalesOrderDetailService SalesOrderDetailService
@inject ISalesReturnDetailService SalesReturnDetailService
@inject INotificationService NotificationService
@inject IWarehouseLocationService WarehouseLocationService
@inject ISystemParameterService SystemParameterService
@inject IProductService ProductService
@inject RelatedDocumentsHelper RelatedDocumentsHelper

@if (!EffectiveCustomerId.HasValue || EffectiveCustomerId.Value <= 0)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="customer-warning">
                <i class="fas fa-user fa-2x mb-3 text-muted"></i>
                <p class="text-muted">選擇客戶後即可查看該客戶可退貨的商品</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <InteractiveTableComponent TItem="ReturnItem" 
                                      Items="@ReturnItems"
                                      ColumnDefinitions="@GetColumnDefinitions()"
                                      IsReadOnly="@IsReadOnly"
                                      ShowRowNumbers="false"
                                      EmptyMessage="@EmptyMessage"
                                      ShowBuiltInActions="true"
                                      ShowBuiltInDeleteButton="false"
                                      CustomActionsTemplate="@GetCustomActionsTemplate"     
                                      ActionsColumnWidth = "60px"/>
        </div>

        <div class="card-footer">
            <div class="d-flex justify-content-between">
                <div class="d-flex gap-2">
                    @if (CanLoadAllReturnable)
                    {
                        <GenericButtonComponent Text="載入全部可退"
                                              Icon="plus-circle"
                                              Variant="ButtonVariant.Primary"
                                              OnClick="@LoadAllReturnableItems" />
                    }
                </div>
                <div class="d-flex gap-2">
                    <GenericButtonComponent Text="退貨量全填"
                                          Icon="fill-drip"
                                          Variant="ButtonVariant.Success"
                                          OnClick="@FillAllQuantities" />
                    <GenericButtonComponent Text="退貨量清空"
                                          Icon="eraser"
                                          Variant="ButtonVariant.Warning"
                                          OnClick="@ClearAllQuantities" />
                    <GenericButtonComponent Text="清除明細"
                                          Icon="trash-alt"
                                          Variant="ButtonVariant.Info"
                                          OnClick="@ClearAllDetails" />
                </div>
            </div>
        </div>
    </div>
}

<!-- 相關單據查看 Modal -->
<RelatedDocumentsModalComponent IsVisible="@showRelatedDocumentsModal"
                               IsVisibleChanged="@((bool visible) => showRelatedDocumentsModal = visible)"
                               ProductName="@selectedProductName"
                               RelatedDocuments="@relatedDocuments"
                               IsLoading="@isLoadingRelatedDocuments"
                               OnDocumentClick="@HandleRelatedDocumentClick" />

@code {
    // ===== 基本參數 =====
    [Parameter] public List<Product> Products { get; set; } = new List<Product>();
    [Parameter] public EventCallback<List<ReturnItem>> OnReturnItemsChanged { get; set; }
    
    // ===== 客戶過濾參數 =====
    [Parameter] public int? CustomerId { get; set; }
    [Parameter] public int? SelectedCustomerId { get; set; }
    
    // ===== 篩選參數 =====
    [Parameter] public int? SelectedSalesOrderId { get; set; }
    [Parameter] public int? FilterSalesOrderId { get; set; }
    [Parameter] public int? FilterProductId { get; set; }
    
    // ===== 現有明細參數 =====
    [Parameter] public List<SalesReturnDetail> ExistingReturnDetails { get; set; } = new List<SalesReturnDetail>();
    [Parameter] public EventCallback<List<SalesReturnDetail>> OnDetailsChanged { get; set; }
    [Parameter] public EventCallback<List<SalesReturnDetail>> OnReturnDetailsChanged { get; set; }
    [Parameter] public EventCallback<List<int>> OnDeletedDetailsChanged { get; set; }
    [Parameter] public EventCallback<ReturnItem> OnItemRemoved { get; set; }
    
    // ===== 編輯模式參數 =====
    [Parameter] public bool IsEditMode { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "退貨明細";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "undo";
    [Parameter] public string ItemDisplayName { get; set; } = "商品";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增退貨商品";
    
    // ===== 唯讀模式參數 =====
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 狀態通知參數 =====
    /// <summary>
    /// 狀態通知參數 - 通知父組件是否有不可刪除的明細
    /// </summary>
    [Parameter] public EventCallback<bool> OnHasUndeletableDetailsChanged { get; set; }
    
    // ===== 相關單據開啟事件 =====
    [Parameter] public EventCallback<(RelatedDocumentType type, int id)> OnOpenRelatedDocument { get; set; }

    private List<ReturnItem> ReturnItems { get; set; } = new List<ReturnItem>();
    private List<Product> AvailableProducts { get; set; } = new List<Product>();
    private List<SalesOrderDetail> AvailableOrderDetails { get; set; } = new List<SalesOrderDetail>();
    private int? _previousSelectedCustomerId = null;
    private int? _previousSelectedSalesOrderId = null;
    private int? _previousFilterProductId = null;
    private List<int> _deletedDetailIds { get; set; } = new List<int>();
    
    // ===== 相關單據查看 =====
    private bool showRelatedDocumentsModal = false;
    private string selectedProductName = string.Empty;
    private List<RelatedDocument>? relatedDocuments = null;
    private bool isLoadingRelatedDocuments = false;

    // ===== 計算屬性 =====
    private int? EffectiveCustomerId => CustomerId ?? SelectedCustomerId;
    private int? EffectiveSalesOrderId => FilterSalesOrderId ?? SelectedSalesOrderId;
    private int? EffectiveFilterProductId => FilterProductId;
    private EventCallback<List<SalesReturnDetail>> EffectiveDetailsChangedCallback => 
        OnReturnDetailsChanged.HasDelegate ? OnReturnDetailsChanged : OnDetailsChanged;
    
    /// <summary>
    /// 判斷是否可以使用「載入全部可退」功能
    /// 規則：
    /// 1. 必須選擇客戶
    /// 2. 必須有可載入的銷售訂單明細
    /// 3. 不可在編輯模式下使用（避免覆蓋現有資料）
    /// </summary>
    private bool CanLoadAllReturnable => 
        EffectiveCustomerId.HasValue && 
        EffectiveCustomerId.Value > 0 && 
        GetAvailableOrderDetails().Any() &&
        !IsEditMode; // 編輯模式下隱藏此按鈕
    
    /// <summary>
    /// 檢查是否有被鎖定的明細（有沖款記錄的明細）
    /// </summary>
    private bool HasLockedDetails()
    {
        return ReturnItems.Any(item => 
            !IsEmptyRow(item) && HasPaymentRecord(item));
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableProductsAsync();
        LoadExistingDetailsAsync();
        EnsureOneEmptyRow();
        
        // 🔑 初始化後通知父組件是否有不可刪除的明細
        await NotifyHasUndeletableDetailsChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        
        // 檢查篩選參數是否變更
        bool customerChanged = _previousSelectedCustomerId != EffectiveCustomerId;
        bool salesOrderChanged = _previousSelectedSalesOrderId != EffectiveSalesOrderId;
        bool productFilterChanged = _previousFilterProductId != EffectiveFilterProductId;
        
        // 如果客戶變更，需要重新載入所有資料
        if (customerChanged)
        {
            _previousSelectedCustomerId = EffectiveCustomerId;
            _previousSelectedSalesOrderId = EffectiveSalesOrderId;
            _previousFilterProductId = EffectiveFilterProductId;
            
            await LoadAvailableProductsAsync();
            
            // 客戶變更時清空現有選項並重新載入
            ReturnItems.Clear();
            LoadExistingDetailsAsync();
            return;
        }
        
        // 如果只是銷售訂單或商品篩選變更，只需要更新篩選狀態並重新渲染
        if (salesOrderChanged || productFilterChanged)
        {
            _previousSelectedSalesOrderId = EffectiveSalesOrderId;
            _previousFilterProductId = EffectiveFilterProductId;
            
            // 觸發重新渲染以套用新的篩選
            StateHasChanged();
            return;
        }
        
        // 總是確保有一行空行可以輸入，不論是否已有資料
        EnsureOneEmptyRow();
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    private bool IsEmptyRow(ReturnItem item)
    {
        return item.SelectedOrderDetail == null && item.SelectedProduct == null;
    }
    
    private ReturnItem CreateEmptyItem()
    {
        return new ReturnItem();
    }
    
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.ForAny<ReturnItem>.EnsureOneEmptyRow(
            ReturnItems, 
            IsEmptyRow, 
            CreateEmptyItem
        );
    }

    // ===== 沖款記錄檢查方法 =====
    
    /// <summary>
    /// 檢查指定的銷貨退回明細項目是否有沖款記錄
    /// 檢查邏輯：
    /// - 資料表：SalesReturnDetail
    /// - 欄位：TotalPaidAmount (累計付款金額)
    /// - 條件：TotalPaidAmount > 0 表示已有沖款記錄，不可刪除
    /// </summary>
    /// <param name="item">要檢查的退貨明細項目</param>
    /// <returns>true 表示有沖款記錄，false 表示沒有</returns>
    private bool HasPaymentRecord(ReturnItem item)
    {
        if (item.ExistingDetailEntity != null && item.ExistingDetailEntity.Id > 0)
        {
            // 檢查 TotalPaidAmount 是否大於 0
            return item.ExistingDetailEntity.TotalPaidAmount > 0;
        }
        return false;
    }
    
    /// <summary>
    /// 取得指定退貨明細項目的已沖款金額
    /// </summary>
    /// <param name="item">要檢查的退貨明細項目</param>
    /// <returns>已沖款金額</returns>
    private decimal GetPaidAmount(ReturnItem item)
    {
        if (item.ExistingDetailEntity != null && item.ExistingDetailEntity.Id > 0)
        {
            return item.ExistingDetailEntity.TotalPaidAmount;
        }
        return 0;
    }
    
    /// <summary>
    /// 檢查項目是否可以刪除
    /// 檢查條件：
    /// 1. 沖款記錄檢查 (HasPaymentRecord)
    ///    - 資料來源：直接讀取 SalesReturnDetail 實體
    ///    - 檢查資料表：SalesReturnDetail (銷貨退回明細)
    ///    - 檢查欄位：TotalPaidAmount (累計付款金額)
    ///    - 限制原因：已沖款的退貨明細不可刪除，避免財務資料錯亂
    /// </summary>
    /// <param name="item">要檢查的項目</param>
    /// <param name="reason">不可刪除的原因（輸出參數）</param>
    /// <returns>true 表示可以刪除，false 表示不可刪除</returns>
    private bool CanDeleteItem(ReturnItem item, out string reason)
    {
        // 檢查：沖款記錄
        if (HasPaymentRecord(item))
        {
            var paidAmount = GetPaidAmount(item);
            reason = $"此商品已有沖款記錄（已沖款 {paidAmount:N0} 元），無法刪除";
            return false;
        }
        
        reason = string.Empty;
        return true;
    }
    
    /// <summary>
    /// 檢查是否有不可刪除的明細（已有沖款記錄）
    /// </summary>
    private bool HasUndeletableDetails()
    {
        return ReturnItems.Any(item => 
            !IsEmptyRow(item) && !CanDeleteItem(item, out _));
    }

    /// <summary>
    /// 通知父組件是否有不可刪除的明細
    /// </summary>
    private async Task NotifyHasUndeletableDetailsChanged()
    {
        if (OnHasUndeletableDetailsChanged.HasDelegate)
        {
            var hasUndeletableDetails = HasUndeletableDetails();
            await OnHasUndeletableDetailsChanged.InvokeAsync(hasUndeletableDetails);
        }
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>();

        // 銷售訂單明細選擇欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "銷售商品", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "300px",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                var hasPaymentRecord = HasPaymentRecord(returnItem);
                var isFieldReadOnly = IsReadOnly || hasPaymentRecord;
                var selectedValue = returnItem.SelectedOrderDetail?.Id.ToString() ?? "";
                
                // 組合 tooltip 訊息
                var title = hasPaymentRecord 
                    ? $"此商品已有沖款記錄（已沖款 {GetPaidAmount(returnItem):N0} 元），無法修改商品選擇" 
                    : "";
                
                return @<div class="position-relative">
                    <select class="form-select form-select-sm" 
                            value="@selectedValue"
                            disabled="@isFieldReadOnly"
                            title="@title"
                            @onchange="@(async (e) => await OnOrderDetailChanged(returnItem, e.Value))">
                        <option value="">請選擇銷售訂單明細</option>
                        @foreach (var detail in GetAvailableOrderDetails())
                        {
                            var displayText = FormatOrderDetailDisplayText(detail);
                            <option value="@detail.Id">@displayText</option>
                        }
                    </select>
                    
                    @if (hasPaymentRecord)
                    {
                        <div class="position-absolute" style="top: 2px; right: 30px; pointer-events: none;">
                            <i title="@title"></i>
                        </div>
                    }
                </div>;
            }
        });

        // 原始銷售數量欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "原始數量", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                if (returnItem.SelectedOrderDetail == null) return @<span class="text-muted">-</span>;
                return @<div class="d-flex align-items-center justify-content-end">
                    <span>@returnItem.OriginalQuantity.ToString("N0")</span>
                </div>;
            }
        });

        // 退貨數量欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "退貨數量", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                var returnableQuantity = returnItem.AvailableQuantity;
                var value = returnItem.ReturnQuantity > 0 ? returnItem.ReturnQuantity.ToString("N0") : "";
                var hasPaymentRecord = HasPaymentRecord(returnItem);
                var isFieldReadOnly = IsReadOnly || hasPaymentRecord;
                
                // 組合 tooltip 訊息
                var title = hasPaymentRecord 
                    ? $"此商品已有沖款記錄（已沖款 {GetPaidAmount(returnItem):N0} 元），無法修改退貨數量" 
                    : "";
                
                // 如果是唯讀狀態（含沖款記錄），直接顯示 span
                if (isFieldReadOnly)
                {
                    return @<div class="position-relative d-flex align-items-center justify-content-end" style="min-height: 31px;">
                        <span class="text-muted small" title="@title">
                            @(returnItem.ReturnQuantity > 0 ? returnItem.ReturnQuantity.ToString("N0") : "0")
                        </span>
                    </div>;
                }
                
                // 可編輯狀態，顯示輸入框
                return @<div>
                    <input type="number" class="form-control form-control-sm text-end" 
                           value="@value"
                           min="0" max="@returnableQuantity"
                           step="1"
                           @oninput="@((e) => OnReturnQuantityInput(returnItem, e.Value?.ToString()))"
                           onkeydown="if(['e','E','+','-'].includes(event.key)) event.preventDefault();"
                           placeholder="0"
                           disabled="@(returnItem.SelectedOrderDetail == null)" />
                    @if (!string.IsNullOrEmpty(returnItem.ValidationError))
                    {
                        <small class="text-danger">@returnItem.ValidationError</small>
                    }
                </div>;
            }
        });

        // 單價欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "退貨單價", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                var value = returnItem.OriginalUnitPrice;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span>@value.ToString("N0")</span>
                </div>;
            }
        });

        // 折扣欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "當初折扣(%)", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "100px",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                var discount = returnItem.SelectedOrderDetail?.DiscountPercentage ?? 0;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span>@discount.ToString("N0")</span>
                </div>;
            }
        });

        // 小計欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "小計", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                
                return @<div class="text-end fw-bold text-success">
                    @returnItem.ReturnSubtotalAmount.ToString("C")
                </div>;
            }
        });

        // 備註欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "備註", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "150px",
            CustomTemplate = item =>
            {
                var returnItem = (ReturnItem)item;
                
                // 如果是唯讀狀態，直接顯示 span
                if (IsReadOnly)
                {
                    var displayText = string.IsNullOrEmpty(returnItem.Remarks) ? "無備註" : returnItem.Remarks;
                    return @<div class="d-flex align-items-center" style="min-height: 31px;">
                        <span class="text-muted">@displayText</span>
                    </div>;
                }
                
                // 可編輯狀態，顯示輸入框
                return @<input type="text" class="form-control form-control-sm" 
                               value="@returnItem.Remarks"
                               @onchange="@(async (e) => await OnRemarksInput(returnItem, e.Value?.ToString()))"
                               placeholder="備註"
                               disabled="@(returnItem.SelectedOrderDetail == null)" />;
            }
        });

        return columns;
    }

    private RenderFragment<ReturnItem> GetCustomActionsTemplate => item => __builder =>
    {
        // 檢查項目是否可以刪除（綜合退貨記錄和沖款記錄檢查）
        var canDelete = CanDeleteItem(item, out _);
        
        if (canDelete)
        {
            // 可以刪除：顯示刪除按鈕
            <GenericButtonComponent Variant="ButtonVariant.Danger"
                                   IconClass="bi bi-trash text-white"
                                   Size="ButtonSize.Large"
                                   IsDisabled="@IsReadOnly"
                                   Title="刪除"
                                   OnClick="async () => await HandleItemDelete(item)"
                                   StopPropagation="true"
                                   CssClass="btn-square" />
        }
        else
        {
            // 不能刪除：顯示查看按鈕
            <GenericButtonComponent Variant="ButtonVariant.Info"
                                   IconClass="bi bi-eye text-white"
                                   Size="ButtonSize.Large"
                                   Title="查看相關單據"
                                   OnClick="async () => await ShowRelatedDocuments(item)"
                                   StopPropagation="true"
                                   CssClass="btn-square" />
        }
    };

    private async Task HandleItemDelete(ReturnItem item)
    {
        // 使用綜合檢查方法，確認是否可以刪除
        if (!CanDeleteItem(item, out string reason))
        {
            await NotificationService.ShowWarningAsync(
                reason, 
                "操作限制"
            );
            return;
        }
        
        var index = ReturnItems.IndexOf(item);
        await RemoveItemAsync(index);
    }

    /// <summary>
    /// 顯示相關單據（退貨單和沖款單）
    /// </summary>
    private async Task ShowRelatedDocuments(ReturnItem item)
    {
        // 檢查是否有現有的明細實體 ID
        if (item.ExistingDetailEntity is not SalesReturnDetail detail || detail.Id <= 0)
        {
            await NotificationService.ShowWarningAsync("此項目尚未儲存，無法查看相關單據", "提示");
            return;
        }

        // 設定商品名稱
        selectedProductName = item.SelectedProduct?.Name ?? "未知商品";

        // 顯示 Modal 並開始載入
        showRelatedDocumentsModal = true;
        isLoadingRelatedDocuments = true;
        relatedDocuments = null;
        StateHasChanged();

        try
        {
            // 查詢相關單據
            relatedDocuments = await RelatedDocumentsHelper.GetRelatedDocumentsForSalesReturnDetailAsync(detail.Id);
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入相關單據失敗：{ex.Message}");
        }
        finally
        {
            isLoadingRelatedDocuments = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 處理點擊相關單據的事件
    /// </summary>
    private async Task HandleRelatedDocumentClick(RelatedDocument document)
    {
        // 觸發事件，讓父組件（EditModal）處理開啟相關單據
        if (OnOpenRelatedDocument.HasDelegate)
        {
            await OnOpenRelatedDocument.InvokeAsync((document.DocumentType, document.DocumentId));
        }
        else
        {
            // 如果父組件沒有處理，顯示提示訊息
            await NotificationService.ShowInfoAsync(
                $"請在主畫面中開啟 {document.TypeDisplayName}: {document.DocumentNumber}", 
                "提示"
            );
        }
    }

    // ===== 內部方法 =====
    private async Task LoadAvailableProductsAsync()
    {
        try
        {
            AvailableProducts = Products?.ToList() ?? new List<Product>();
            
            // 同時載入銷售訂單明細
            await LoadAvailableOrderDetailsAsync();
        }
        catch (Exception)
        {
            AvailableProducts = new List<Product>();
            AvailableOrderDetails = new List<SalesOrderDetail>();
        }
    }

    private async Task LoadAvailableOrderDetailsAsync()
    {
        try
        {
            if (EffectiveCustomerId.HasValue && EffectiveCustomerId.Value > 0)
            {
                // 載入該客戶的可退貨銷售訂單明細
                AvailableOrderDetails = await SalesOrderDetailService.GetReturnableDetailsByCustomerAsync(EffectiveCustomerId.Value);
            }
            else
            {
                AvailableOrderDetails = new List<SalesOrderDetail>();
            }
        }
        catch (Exception)
        {
            AvailableOrderDetails = new List<SalesOrderDetail>();
        }
    }

    private void LoadExistingDetailsAsync()
    {
        if (ExistingReturnDetails?.Any() != true) 
        {
            ReturnItems.Clear();
            EnsureOneEmptyRow();
            return;
        }

        ReturnItems.Clear();
        
        foreach (var detail in ExistingReturnDetails)
        {
            // 直接使用 Navigation Properties - 更可靠的方式
            var orderDetail = detail.SalesOrderDetail;
            
            var item = new ReturnItem
            {
                // 直接使用 Navigation Properties
                SelectedProduct = detail.Product,
                SelectedOrderDetail = orderDetail,
                OriginalQuantity = (int)(orderDetail?.OrderQuantity ?? 0),
                AlreadyReturnedQuantity = GetAlreadyReturnedQuantity(orderDetail?.Id ?? 0),
                ReturnQuantity = (int)detail.ReturnQuantity,
                OriginalUnitPrice = orderDetail?.UnitPrice ?? detail.OriginalUnitPrice,
                DiscountPercentage = orderDetail?.DiscountPercentage ?? detail.DiscountPercentage,
                ReturnReason = string.Empty,
                Remarks = detail.Remarks ?? string.Empty,
                ExistingDetailEntity = detail
            };
            
            ReturnItems.Add(item);
        }
        
        EnsureOneEmptyRow();
    }

    private List<SalesOrderDetail> GetAvailableOrderDetails()
    {
        var filteredDetails = AvailableOrderDetails.AsQueryable();
        
        // 根據銷售訂單篩選
        if (EffectiveSalesOrderId.HasValue && EffectiveSalesOrderId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(od => od.SalesOrderId == EffectiveSalesOrderId.Value);
        }
        
        // 根據商品篩選
        if (EffectiveFilterProductId.HasValue && EffectiveFilterProductId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(od => od.ProductId == EffectiveFilterProductId.Value);
        }
        
        // 只顯示還有可退回數量的明細
        return filteredDetails.Where(od => GetAvailableReturnQuantity(od) > 0).ToList();
    }

    // ===== 事件處理方法 =====
    
    // ===== 銷售訂單明細選擇事件處理 =====
    
    /// <summary>
    /// 格式化銷售訂單明細顯示文字（用於下拉選單）
    /// </summary>
    private string FormatOrderDetailDisplayText(SalesOrderDetail detail)
    {
        if (detail?.Product == null || detail.SalesOrder == null) return "";
        
        var product = detail.Product;
        var orderNumber = detail.SalesOrder.SalesOrderNumber ?? "N/A";
        
        var productDisplay = !string.IsNullOrEmpty(product.Code) && !string.IsNullOrEmpty(product.Name)
            ? $"{product.Code} - {product.Name}"
            : product.Name ?? product.Code ?? "未知商品";
        
        return $"[{orderNumber}] {productDisplay}";
    }

    // ===== 訂單明細選擇事件處理 =====

    private async Task OnOrderDetailChanged(ReturnItem returnItem, object? value)
    {
        var wasEmpty = IsEmptyRow(returnItem);
        
        var orderDetailIdStr = value?.ToString();
        if (string.IsNullOrEmpty(orderDetailIdStr))
        {
            returnItem.SelectedOrderDetail = null;
            returnItem.SelectedProduct = null;
            returnItem.OriginalQuantity = 0;
            returnItem.AlreadyReturnedQuantity = 0;
            returnItem.ReturnQuantity = 0;
            returnItem.OriginalUnitPrice = 0;
            returnItem.DiscountPercentage = 0;
        }
        else if (int.TryParse(orderDetailIdStr, out var orderDetailId))
        {
            var detail = GetAvailableOrderDetails().FirstOrDefault(d => d.Id == orderDetailId);
            if (detail != null)
            {
                returnItem.SelectedOrderDetail = detail;
                returnItem.SelectedProduct = detail.Product;
                returnItem.OriginalQuantity = (int)detail.OrderQuantity;
                returnItem.AlreadyReturnedQuantity = GetAlreadyReturnedQuantity(detail.Id);
                returnItem.ReturnQuantity = 0;
                returnItem.OriginalUnitPrice = detail.UnitPrice;
                returnItem.DiscountPercentage = detail.DiscountPercentage;
            }
        }
        
        // 處理自動空行邏輯
        AutoEmptyRowHelper.ForAny<ReturnItem>.HandleInputChange(
            ReturnItems, returnItem, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(returnItem));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnReturnQuantityInput(ReturnItem returnItem, string? value)
    {
        // 檢查是否可以修改
        if (!CanDeleteItem(returnItem, out string reason))
        {
            await NotificationService.ShowWarningAsync(
                "此商品已有沖款記錄，無法修改退貨數量", 
                "操作限制"
            );
            return;
        }
        
        if (int.TryParse(value, out var quantity) && quantity >= 0)
        {
            var maxQuantity = returnItem.AvailableQuantity;
            returnItem.ReturnQuantity = Math.Min(quantity, maxQuantity);
            returnItem.ValidationError = quantity > maxQuantity ? $"最大可退數量：{maxQuantity}" : null;
        }
        else
        {
            returnItem.ReturnQuantity = 0;
            returnItem.ValidationError = null;
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnReturnReasonInput(ReturnItem returnItem, string? value)
    {
        returnItem.ReturnReason = value ?? string.Empty;
        await NotifyDetailsChanged();
    }

    private async Task OnRemarksInput(ReturnItem returnItem, string? value)
    {
        returnItem.Remarks = value ?? string.Empty;
        await NotifyDetailsChanged();
    }

    private async Task LoadAllReturnableItems()
    {
        try
        {
            var availableDetails = GetAvailableOrderDetails();
            
            foreach (var orderDetail in availableDetails)
            {
                // 檢查是否已經存在相同的明細
                if (ReturnItems.Any(item => item.SelectedOrderDetail?.Id == orderDetail.Id))
                    continue;
                
                // 找到第一個空行或創建新行
                var emptyItem = ReturnItems.FirstOrDefault(IsEmptyRow);
                if (emptyItem == null)
                {
                    emptyItem = CreateEmptyItem();
                    ReturnItems.Add(emptyItem);
                }
                
                // 設置明細資訊
                emptyItem.SelectedOrderDetail = orderDetail;
                emptyItem.SelectedProduct = orderDetail.Product;
                emptyItem.OriginalQuantity = (int)orderDetail.OrderQuantity;
                emptyItem.AlreadyReturnedQuantity = GetAlreadyReturnedQuantity(orderDetail.Id);
                emptyItem.OriginalUnitPrice = orderDetail.UnitPrice;
                emptyItem.DiscountPercentage = orderDetail.DiscountPercentage; // 複製折扣
            }
            
            EnsureOneEmptyRow();
            await NotifyDetailsChanged();
            await NotificationService.ShowSuccessAsync($"已載入 {availableDetails.Count} 項可退貨商品");
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入可退貨商品時發生錯誤：{ex.Message}");
        }
    }

    private async Task RemoveItemAsync(int index)
    {
        if (index >= 0 && index < ReturnItems.Count)
        {
            var item = ReturnItems[index];
            
            // 通知父組件項目即將被移除
            if (OnItemRemoved.HasDelegate)
            {
                await OnItemRemoved.InvokeAsync(item);
            }
            
            // 如果是現有明細，記錄ID以便刪除
            if (item.ExistingDetailEntity?.Id > 0)
            {
                _deletedDetailIds.Add(item.ExistingDetailEntity.Id);
            }
            
            ReturnItems.RemoveAt(index);
            EnsureOneEmptyRow();
            await NotifyDetailsChanged();
        }
    }

    private decimal GetTotalAmount()
    {
        return ReturnItems.Where(item => !IsEmptyRow(item))
                          .Sum(item => item.ReturnSubtotalAmount);
    }

    private async Task NotifyDetailsChanged()
    {
        // 轉換為 SalesReturnDetail 實體（包含所有非空行的明細，即使 ReturnQuantity 為 0）
        // 這樣父組件才能正確計算總金額和稅額
        var details = ReturnItems.Where(item => !IsEmptyRow(item))
                                 .Select(item => ConvertToEntity(item))
                                 .Where(entity => entity != null)
                                 .ToList();
        
        if (EffectiveDetailsChangedCallback.HasDelegate)
        {
            await EffectiveDetailsChangedCallback.InvokeAsync(details!);
        }
        
        // 通知已刪除的明細 ID
        if (OnDeletedDetailsChanged.HasDelegate && _deletedDetailIds.Any())
        {
            await OnDeletedDetailsChanged.InvokeAsync(_deletedDetailIds.ToList());
            _deletedDetailIds.Clear(); // 清空已通知的ID
        }
        
        if (OnReturnItemsChanged.HasDelegate)
        {
            await OnReturnItemsChanged.InvokeAsync(ReturnItems);
        }
        
        // 🔑 通知父組件是否有不可刪除的明細
        await NotifyHasUndeletableDetailsChanged();
    }

    private SalesReturnDetail? ConvertToEntity(ReturnItem item)
    {
        // 只要選擇了商品就轉換，即使 ReturnQuantity 為 0（用於計算）
        if (item.SelectedOrderDetail == null || item.SelectedProduct == null)
        {
            return null;
        }
        
        // 如果已有實體，更新它
        if (item.ExistingDetailEntity != null)
        {
            item.ExistingDetailEntity.SalesOrderDetailId = item.SelectedOrderDetail.Id;
            item.ExistingDetailEntity.ProductId = item.SelectedProduct.Id;
            item.ExistingDetailEntity.ReturnQuantity = item.ReturnQuantity;
            item.ExistingDetailEntity.OriginalUnitPrice = item.OriginalUnitPrice;
            item.ExistingDetailEntity.DiscountPercentage = item.DiscountPercentage;
            item.ExistingDetailEntity.Remarks = item.Remarks;
            
            return item.ExistingDetailEntity;
        }
        
        // 創建新實體
        return new SalesReturnDetail
        {
            SalesOrderDetailId = item.SelectedOrderDetail.Id,
            ProductId = item.SelectedProduct.Id,
            ReturnQuantity = item.ReturnQuantity,
            OriginalUnitPrice = item.OriginalUnitPrice,
            DiscountPercentage = item.DiscountPercentage,
            Remarks = item.Remarks
        };
    }

    // ===== 輔助方法 =====
    private int GetAlreadyReturnedQuantity(int orderDetailId)
    {
        // 這裡應該查詢資料庫獲取已退貨數量，目前暫時回傳0
        // 可能需要呼叫服務來獲取
        return 0;
    }
    
    private int GetAvailableReturnQuantity(SalesOrderDetail orderDetail)
    {
        var alreadyReturned = GetAlreadyReturnedQuantity(orderDetail.Id);
        return (int)(orderDetail.OrderQuantity - alreadyReturned);
    }

    /// <summary>
    /// 退貨量全填（只處理未鎖定的明細）
    /// </summary>
    private async Task FillAllQuantities()
    {
        var nonEmptyItems = ReturnItems.Where(item => !IsEmptyRow(item)).ToList();
        
        if (!nonEmptyItems.Any())
        {
            await NotificationService.ShowWarningAsync("沒有可更新的明細項目", "提示");
            return;
        }
        
        var unlocked = nonEmptyItems.Where(item => CanDeleteItem(item, out _)).ToList();
        var locked = nonEmptyItems.Where(item => !CanDeleteItem(item, out _)).ToList();
        
        if (!unlocked.Any())
        {
            await NotificationService.ShowWarningAsync(
                "所有明細都已有沖款記錄，無法批次填入數量", 
                "操作限制");
            return;
        }
        
        foreach (var item in unlocked)
        {
            if (item.SelectedOrderDetail != null)
            {
                item.ReturnQuantity = item.AvailableQuantity;
                item.ValidationError = null;
            }
        }
        
        var message = $"已填入 {unlocked.Count} 項明細的退貨數量";
        if (locked.Any())
        {
            message += $"\n（已跳過 {locked.Count} 項已鎖定的明細）";
        }
        await NotificationService.ShowSuccessAsync(message);
        
        await NotifyDetailsChanged();
    }

    /// <summary>
    /// 退貨量清空（只處理未鎖定的明細）
    /// </summary>
    private async Task ClearAllQuantities()
    {
        var nonEmptyItems = ReturnItems.Where(item => !IsEmptyRow(item)).ToList();
        
        if (!nonEmptyItems.Any())
        {
            await NotificationService.ShowWarningAsync("沒有可更新的明細項目", "提示");
            return;
        }
        
        var unlocked = nonEmptyItems.Where(item => CanDeleteItem(item, out _)).ToList();
        var locked = nonEmptyItems.Where(item => !CanDeleteItem(item, out _)).ToList();
        
        if (!unlocked.Any())
        {
            await NotificationService.ShowWarningAsync(
                "所有明細都已有沖款記錄，無法批次清空數量", 
                "操作限制");
            return;
        }
        
        foreach (var item in unlocked)
        {
            item.ReturnQuantity = 0;
        }
        
        var message = $"已清空 {unlocked.Count} 項明細的退貨數量";
        if (locked.Any())
        {
            message += $"\n（已跳過 {locked.Count} 項已鎖定的明細）";
        }
        await NotificationService.ShowSuccessAsync(message);
        
        await NotifyDetailsChanged();
    }

    /// <summary>
    /// 清除明細（只移除未鎖定的明細，保留已鎖定的）
    /// </summary>
    private async Task ClearAllDetails()
    {
        var nonEmptyItems = ReturnItems.Where(item => !IsEmptyRow(item)).ToList();
        
        if (!nonEmptyItems.Any())
        {
            await NotificationService.ShowWarningAsync("沒有可移除的明細項目", "提示");
            return;
        }
        
        // 區分可刪除和被鎖定的明細
        var unlocked = nonEmptyItems.Where(item => CanDeleteItem(item, out _)).ToList();
        var locked = nonEmptyItems.Where(item => !CanDeleteItem(item, out _)).ToList();
        
        if (!unlocked.Any())
        {
            await NotificationService.ShowWarningAsync(
                "所有明細都已有沖款記錄，無法移除", 
                "操作限制");
            return;
        }
        
        // 通知父組件項目即將被移除
        if (OnItemRemoved.HasDelegate)
        {
            foreach (var item in unlocked)
            {
                await OnItemRemoved.InvokeAsync(item);
            }
        }
        
        // 記錄所有要刪除的現有明細 ID
        foreach (var item in unlocked.Where(item => item.ExistingDetailEntity?.Id > 0))
        {
            _deletedDetailIds.Add(item.ExistingDetailEntity!.Id);
        }
        
        // 從列表中移除未鎖定的項目，保留已鎖定的項目
        foreach (var item in unlocked)
        {
            ReturnItems.Remove(item);
        }
        
        // 確保有一個空行
        EnsureOneEmptyRow();
        
        await NotifyDetailsChanged();
        
        var message = $"已移除 {unlocked.Count} 項明細";
        if (locked.Any())
        {
            message += $"\n（已保留 {locked.Count} 項已鎖定的明細）";
        }
        await NotificationService.ShowSuccessAsync(message);
    }

    // ===== 公開方法 - 供父組件調用 =====
    public async Task<bool> ValidateAsync()
    {
        try
        {
            var errors = new List<string>();
            
            // 檢查是否有退貨項目
            var potentialItems = ReturnItems.Where(item => !IsEmptyRow(item) && item.ReturnQuantity > 0).ToList();
            if (!potentialItems.Any())
            {
                errors.Add("至少需要一個退貨項目");
            }
            
            // 檢查必填欄位和基本驗證
            foreach (var item in potentialItems)
            {
                if (item.SelectedOrderDetail == null)
                {
                    errors.Add("請選擇有效的銷售訂單明細");
                    continue;
                }
                
                if (item.ReturnQuantity > item.AvailableQuantity)
                {
                    errors.Add($"商品 {item.SelectedProduct?.Code} 的退貨數量超過可退數量");
                }
                
                if (item.OriginalUnitPrice < 0)
                {
                    errors.Add($"商品 {item.SelectedProduct?.Code} 的原始單價不可為負數");
                }
            }
            
            if (errors.Any())
            {
                var errorMessage = string.Join("\n", errors);
                await NotificationService.ShowErrorAsync(errorMessage);
                return false;
            }
            
            return true;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"驗證時發生錯誤：{ex.Message}");
            return false;
        }
    }
    
    // ===== ReturnItem 內部類別 =====
    public class ReturnItem
    {
        public Product? SelectedProduct { get; set; }
        public SalesOrderDetail? SelectedOrderDetail { get; set; }
        
        public int OriginalQuantity { get; set; } = 0;
        public int AlreadyReturnedQuantity { get; set; } = 0;
        public int ReturnQuantity { get; set; } = 0;
        
        public decimal OriginalUnitPrice { get; set; } = 0;
        public decimal DiscountPercentage { get; set; } = 0;
        
        public string ReturnReason { get; set; } = string.Empty;
        public string Remarks { get; set; } = string.Empty;
        
        public SalesReturnDetail? ExistingDetailEntity { get; set; }
        public string? ValidationError { get; set; }
        
        // 計算屬性
        public decimal ReturnSubtotalAmount => Math.Round(ReturnQuantity * OriginalUnitPrice * (1 - DiscountPercentage / 100), 2);
        public int AvailableQuantity => OriginalQuantity - AlreadyReturnedQuantity;
        
        /// <summary>
        /// 取得顯示用的商品名稱（包含銷售訂單號）
        /// </summary>
        public string DisplayName => 
            SelectedProduct != null 
                ? $"[{SelectedOrderDetail?.SalesOrder?.SalesOrderNumber ?? "N/A"}] {SelectedProduct.Code} - {SelectedProduct.Name}"
                : string.Empty;
    }
}