@* 銷售退貨商品明細管理元件 - 使用 InteractiveTableComponent 統一UI 並整合自動空行功能 *@

@inject ISalesOrderDetailService SalesOrderDetailService
@inject ISalesReturnDetailService SalesReturnDetailService
@inject INotificationService NotificationService
@inject IWarehouseLocationService WarehouseLocationService
@inject ISystemParameterService SystemParameterService
@inject IProductService ProductService
@using ERPCore2.Helpers
@using ERPCore2.Data.Entities

@if (!EffectiveCustomerId.HasValue || EffectiveCustomerId.Value <= 0)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="customer-warning">
                <i class="fas fa-user fa-2x mb-3 text-muted"></i>
                <p class="text-muted">選擇客戶後即可查看該客戶可退貨的商品</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <InteractiveTableComponent TItem="ReturnItem" 
                                      Items="@ReturnItems"
                                      ColumnDefinitions="@GetColumnDefinitions()"
                                      IsReadOnly="@IsReadOnly"
                                      ShowRowNumbers="false"
                                      EmptyMessage="@EmptyMessage"
                                      ShowTotalRow="true"
                                      ShowBuiltInActions="true"
                                      ShowBuiltInDeleteButton="true"                                      
                                      TotalRowTemplate="@GetTotalRowTemplate"
                                      OnItemDelete="@HandleItemDelete" />
        </div>

        <div class="card-footer">
            <div class="d-flex justify-content-between">
                <div class="d-flex gap-2">
                    @if (CanLoadAllReturnable)
                    {
                        <GenericButtonComponent Text="載入全部可退"
                                              Icon="plus-circle"
                                              Variant="ButtonVariant.Primary"
                                              OnClick="@LoadAllReturnableItems" />
                    }
                </div>
                <div class="d-flex gap-2">
                    <GenericButtonComponent Text="退貨量全填"
                                          Icon="fill-drip"
                                          Variant="ButtonVariant.Success"
                                          OnClick="@FillAllQuantities" />
                    <GenericButtonComponent Text="退貨量清空"
                                          Icon="eraser"
                                          Variant="ButtonVariant.Warning"
                                          OnClick="@ClearAllQuantities" />
                    <GenericButtonComponent Text="清除明細"
                                          Icon="trash-alt"
                                          Variant="ButtonVariant.Info"
                                          OnClick="@ClearAllDetails" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public List<Product> Products { get; set; } = new List<Product>();
    [Parameter] public EventCallback<List<ReturnItem>> OnReturnItemsChanged { get; set; }
    
    // ===== 客戶過濾參數 =====
    [Parameter] public int? CustomerId { get; set; }
    [Parameter] public int? SelectedCustomerId { get; set; }
    
    // ===== 篩選參數 =====
    [Parameter] public int? SelectedSalesOrderId { get; set; }
    [Parameter] public int? FilterSalesOrderId { get; set; }
    [Parameter] public int? FilterProductId { get; set; }
    
    // ===== 現有明細參數 =====
    [Parameter] public List<SalesReturnDetail> ExistingReturnDetails { get; set; } = new List<SalesReturnDetail>();
    [Parameter] public EventCallback<List<SalesReturnDetail>> OnDetailsChanged { get; set; }
    [Parameter] public EventCallback<List<SalesReturnDetail>> OnReturnDetailsChanged { get; set; }
    [Parameter] public EventCallback<List<int>> OnDeletedDetailsChanged { get; set; }
    [Parameter] public EventCallback<ReturnItem> OnItemRemoved { get; set; }
    
    // ===== 編輯模式參數 =====
    [Parameter] public bool IsEditMode { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "退貨明細";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "undo";
    [Parameter] public string ItemDisplayName { get; set; } = "商品";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增退貨商品";
    
    // ===== 唯讀模式參數 =====
    [Parameter] public bool IsReadOnly { get; set; } = false;

    private List<ReturnItem> ReturnItems { get; set; } = new List<ReturnItem>();
    private List<Product> AvailableProducts { get; set; } = new List<Product>();
    private List<SalesOrderDetail> AvailableOrderDetails { get; set; } = new List<SalesOrderDetail>();
    private int? _previousSelectedCustomerId = null;
    private int? _previousSelectedSalesOrderId = null;
    private int? _previousFilterProductId = null;
    private List<int> _deletedDetailIds { get; set; } = new List<int>();

    // ===== 計算屬性 =====
    private int? EffectiveCustomerId => CustomerId ?? SelectedCustomerId;
    private int? EffectiveSalesOrderId => FilterSalesOrderId ?? SelectedSalesOrderId;
    private int? EffectiveFilterProductId => FilterProductId;
    private EventCallback<List<SalesReturnDetail>> EffectiveDetailsChangedCallback => 
        OnReturnDetailsChanged.HasDelegate ? OnReturnDetailsChanged : OnDetailsChanged;
    
    private bool CanLoadAllReturnable => 
        EffectiveCustomerId.HasValue && 
        EffectiveCustomerId.Value > 0 && 
        GetAvailableOrderDetails().Any();

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableProductsAsync();
        LoadExistingDetailsAsync();
        EnsureOneEmptyRow();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        
        // 檢查篩選參數是否變更
        bool customerChanged = _previousSelectedCustomerId != EffectiveCustomerId;
        bool salesOrderChanged = _previousSelectedSalesOrderId != EffectiveSalesOrderId;
        bool productFilterChanged = _previousFilterProductId != EffectiveFilterProductId;
        
        // 如果客戶變更，需要重新載入所有資料
        if (customerChanged)
        {
            _previousSelectedCustomerId = EffectiveCustomerId;
            _previousSelectedSalesOrderId = EffectiveSalesOrderId;
            _previousFilterProductId = EffectiveFilterProductId;
            
            await LoadAvailableProductsAsync();
            
            // 客戶變更時清空現有選項並重新載入
            ReturnItems.Clear();
            LoadExistingDetailsAsync();
            return;
        }
        
        // 如果只是銷售訂單或商品篩選變更，只需要更新篩選狀態並重新渲染
        if (salesOrderChanged || productFilterChanged)
        {
            _previousSelectedSalesOrderId = EffectiveSalesOrderId;
            _previousFilterProductId = EffectiveFilterProductId;
            
            // 觸發重新渲染以套用新的篩選
            StateHasChanged();
            return;
        }
        
        // 總是確保有一行空行可以輸入，不論是否已有資料
        EnsureOneEmptyRow();
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    private bool IsEmptyRow(ReturnItem item)
    {
        return item.SelectedOrderDetail == null && item.SelectedProduct == null;
    }
    
    private ReturnItem CreateEmptyItem()
    {
        return new ReturnItem();
    }
    
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.ForAny<ReturnItem>.EnsureOneEmptyRow(
            ReturnItems, 
            IsEmptyRow, 
            CreateEmptyItem
        );
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>();

        // 銷售訂單明細選擇欄位 - 使用新的 ProductSelectHelper
        columns.Add(ProductSelectHelper.CreateOrderDetailSelect<ReturnItem>(
            title: "銷售商品",
            width: "25%",
            availableOrderDetailsProvider: () => GetAvailableOrderDetails(),
            onOrderDetailSelected: EventCallback.Factory.Create<(ReturnItem item, SalesOrderDetail? selectedDetail)>(this, async args => {
                await OnOrderDetailSelected(args.item, args.selectedDetail);
            }),
            onSearchInputChanged: EventCallback.Factory.Create<(ReturnItem item, string? searchValue)>(this, args => OnOrderDetailSearchInput(args.item, args.searchValue)),
            onInputFocus: EventCallback.Factory.Create<ReturnItem>(this, item => OnOrderDetailInputFocus(item)),
            onInputBlur: EventCallback.Factory.Create<ReturnItem>(this, async item => await OnOrderDetailInputBlur(item)),
            onItemMouseEnter: EventCallback.Factory.Create<(ReturnItem item, int index)>(this, args => OnOrderDetailItemMouseEnter(args.item, args.index)),
            isReadOnly: IsReadOnly
        ));

        // 原始銷售數量欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "原始數量", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                if (returnItem.SelectedOrderDetail == null) return @<span class="text-muted">-</span>;
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold">@returnItem.OriginalQuantity.ToString("N0")</span>
                </div>;
            }
        });

        // 退貨數量欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "退貨數量", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                var returnableQuantity = returnItem.AvailableQuantity;
                var value = returnItem.ReturnQuantity > 0 ? returnItem.ReturnQuantity.ToString("N0") : "";
                
                return @<div>
                    <input type="number" class="form-control form-control-sm text-end" 
                           value="@value"
                           min="0" max="@returnableQuantity"
                           step="1"
                           @onchange="@(async (e) => await OnReturnQuantityInput(returnItem, e.Value?.ToString()))"
                           placeholder="0"
                           disabled="@(IsReadOnly || returnItem.SelectedOrderDetail == null)" />
                    @if (!string.IsNullOrEmpty(returnItem.ValidationError))
                    {
                        <small class="text-danger">@returnItem.ValidationError</small>
                    }
                </div>;
            }
        });

        // 單價欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "退貨單價", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var returnItem = (ReturnItem)item;
                var value = returnItem.ReturnUnitPrice > 0 ? returnItem.ReturnUnitPrice : returnItem.OriginalUnitPrice;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold">@value.ToString("N0")</span>
                </div>;
            }
        });

        // 備註欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "備註", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item =>
            {
                var returnItem = (ReturnItem)item;
                
                return @<input type="text" class="form-control form-control-sm" 
                               value="@returnItem.Remarks"
                               @onchange="@(async (e) => await OnRemarksInput(returnItem, e.Value?.ToString()))"
                               placeholder="備註"
                               disabled="@(IsReadOnly || returnItem.SelectedOrderDetail == null)" />;
            }
        });

        return columns;
    }

    private RenderFragment<InteractiveColumnDefinition> GetTotalRowTemplate => column => __builder =>
    {
        if (column.Title == "退貨單價")
        {
            <strong class="text-danger">總計: @GetTotalAmount().ToString("C")</strong>
        }
    };

    private async Task HandleItemDelete(ReturnItem item)
    {
        var index = ReturnItems.IndexOf(item);
        await RemoveItemAsync(index);
    }

    // ===== 內部方法 =====
    private async Task LoadAvailableProductsAsync()
    {
        try
        {
            AvailableProducts = Products?.ToList() ?? new List<Product>();
            
            // 同時載入銷售訂單明細
            await LoadAvailableOrderDetailsAsync();
        }
        catch (Exception)
        {
            AvailableProducts = new List<Product>();
            AvailableOrderDetails = new List<SalesOrderDetail>();
        }
    }

    private async Task LoadAvailableOrderDetailsAsync()
    {
        try
        {
            if (EffectiveCustomerId.HasValue && EffectiveCustomerId.Value > 0)
            {
                // 載入該客戶的可退貨銷售訂單明細
                AvailableOrderDetails = await SalesOrderDetailService.GetReturnableDetailsByCustomerAsync(EffectiveCustomerId.Value);
            }
            else
            {
                AvailableOrderDetails = new List<SalesOrderDetail>();
            }
        }
        catch (Exception)
        {
            AvailableOrderDetails = new List<SalesOrderDetail>();
        }
    }

    private void LoadExistingDetailsAsync()
    {
        if (ExistingReturnDetails?.Any() != true) 
        {
            ReturnItems.Clear();
            EnsureOneEmptyRow();
            return;
        }

        ReturnItems.Clear();
        
        foreach (var detail in ExistingReturnDetails)
        {
            // 直接使用 Navigation Properties - 更可靠的方式
            var orderDetail = detail.SalesOrderDetail;
            
            var item = new ReturnItem
            {
                // 直接使用 Navigation Properties
                SelectedProduct = detail.Product,
                SelectedOrderDetail = orderDetail,
                OriginalQuantity = (int)(orderDetail?.OrderQuantity ?? 0),
                AlreadyReturnedQuantity = GetAlreadyReturnedQuantity(orderDetail?.Id ?? 0),
                ReturnQuantity = (int)detail.ReturnQuantity,
                OriginalUnitPrice = orderDetail?.UnitPrice ?? detail.OriginalUnitPrice,
                ReturnUnitPrice = detail.ReturnUnitPrice,
                QualityCondition = detail.QualityCondition ?? string.Empty,
                ReturnReason = string.Empty,
                Remarks = detail.Remarks ?? string.Empty,
                ExistingDetailEntity = detail
            };
            
            // 設置搜尋顯示文字 - 使用 DisplayName 計算屬性，就像 PurchaseReturnDetailManagerComponent
            item.OrderDetailSearch = item.DisplayName;
            
            ReturnItems.Add(item);
        }
        
        EnsureOneEmptyRow();
    }

    private List<SalesOrderDetail> GetAvailableOrderDetails()
    {
        var filteredDetails = AvailableOrderDetails.AsQueryable();
        
        // 根據銷售訂單篩選
        if (EffectiveSalesOrderId.HasValue && EffectiveSalesOrderId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(od => od.SalesOrderId == EffectiveSalesOrderId.Value);
        }
        
        // 根據商品篩選
        if (EffectiveFilterProductId.HasValue && EffectiveFilterProductId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(od => od.ProductId == EffectiveFilterProductId.Value);
        }
        
        // 只顯示還有可退回數量的明細
        return filteredDetails.Where(od => GetAvailableReturnQuantity(od) > 0).ToList();
    }

    // ===== 事件處理方法 =====
    
    // ===== SearchableSelect 相關方法 =====
    private string FormatOrderDetailDisplay(SalesOrderDetail detail)
    {
        if (detail?.Product == null || detail.SalesOrder == null) return "";
        
        var product = detail.Product;
        var orderNumber = detail.SalesOrder.SalesOrderNumber ?? "N/A";
        
        var productDisplay = !string.IsNullOrEmpty(product.Code) && !string.IsNullOrEmpty(product.Name)
            ? $"{product.Code} - {product.Name}"
            : product.Name ?? product.Code ?? "未知商品";
        
        return $"<span class='text-primary'>[{orderNumber}]</span> {productDisplay}";
    }
    
    /// <summary>
    /// 格式化銷售訂單明細顯示文字（純文字版本，用於搜尋輸入框）
    /// </summary>
    private string FormatOrderDetailDisplayText(SalesOrderDetail detail)
    {
        if (detail?.Product == null || detail.SalesOrder == null) return "";
        
        var product = detail.Product;
        var orderNumber = detail.SalesOrder.SalesOrderNumber ?? "N/A";
        
        var productDisplay = !string.IsNullOrEmpty(product.Code) && !string.IsNullOrEmpty(product.Name)
            ? $"{product.Code} - {product.Name}"
            : product.Name ?? product.Code ?? "未知商品";
        
        return $"[{orderNumber}] {productDisplay}";
    }

    private bool FilterOrderDetail(SalesOrderDetail detail, string searchValue)
    {
        if (string.IsNullOrWhiteSpace(searchValue))
            return true;

        var search = searchValue.ToLower();
        return (detail.Product?.Code?.ToLower().Contains(search) == true) ||
               (detail.Product?.Name?.ToLower().Contains(search) == true) ||
               (detail.SalesOrder?.SalesOrderNumber?.ToLower().Contains(search) == true);
    }

    private void OnOrderDetailSearchInput(ReturnItem returnItem, string? searchValue)
    {
        var availableDetails = GetAvailableOrderDetails();
        
        if (string.IsNullOrWhiteSpace(searchValue))
        {
            returnItem.FilteredOrderDetails = availableDetails;
        }
        else
        {
            returnItem.FilteredOrderDetails = availableDetails
                .Where(detail => FilterOrderDetail(detail, searchValue))
                .ToList();
        }
        
        returnItem.ShowDropdown = returnItem.FilteredOrderDetails.Any();
        returnItem.SelectedIndex = -1;
        StateHasChanged();
    }

    private void OnOrderDetailInputFocus(ReturnItem returnItem)
    {
        if (!string.IsNullOrWhiteSpace(returnItem.OrderDetailSearch))
        {
            OnOrderDetailSearchInput(returnItem, returnItem.OrderDetailSearch);
        }
        else
        {
            var availableDetails = GetAvailableOrderDetails();
            returnItem.FilteredOrderDetails = availableDetails;
            returnItem.ShowDropdown = availableDetails.Any();
            returnItem.SelectedIndex = -1;
        }
        StateHasChanged();
    }

    private async Task OnOrderDetailInputBlur(ReturnItem returnItem)
    {
        // 延遲隱藏下拉選單以允許點擊
        await Task.Delay(200);
        returnItem.ShowDropdown = false;
        StateHasChanged();
    }

    private void OnOrderDetailItemMouseEnter(ReturnItem returnItem, int index)
    {
        returnItem.SelectedIndex = index;
        StateHasChanged();
    }

    private async Task OnOrderDetailSelected(ReturnItem returnItem, SalesOrderDetail? selectedDetail)
    {
        if (selectedDetail != null)
        {
            returnItem.SelectedOrderDetail = selectedDetail;
            returnItem.SelectedProduct = selectedDetail.Product;
            returnItem.OrderDetailSearch = FormatOrderDetailDisplayText(selectedDetail);
            returnItem.OriginalQuantity = (int)selectedDetail.OrderQuantity;
            returnItem.AlreadyReturnedQuantity = GetAlreadyReturnedQuantity(selectedDetail.Id);
            returnItem.OriginalUnitPrice = selectedDetail.UnitPrice;
            returnItem.ReturnUnitPrice = selectedDetail.UnitPrice; // 預設使用原始單價
            
            // 清空驗證錯誤
            returnItem.ValidationError = null;
            
            // 確保有空行可以繼續添加
            EnsureOneEmptyRow();
        }
        else
        {
            returnItem.SelectedOrderDetail = null;
            returnItem.SelectedProduct = null;
            returnItem.OrderDetailSearch = "";
            returnItem.OriginalQuantity = 0;
            returnItem.AlreadyReturnedQuantity = 0;
            returnItem.ReturnQuantity = 0;
            returnItem.OriginalUnitPrice = 0;
            returnItem.ReturnUnitPrice = 0;
            returnItem.QualityCondition = "";
            returnItem.ReturnReason = "";
            returnItem.Remarks = "";
            returnItem.ValidationError = null;
        }
        
        returnItem.ShowDropdown = false;
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnReturnQuantityInput(ReturnItem returnItem, string? value)
    {
        if (int.TryParse(value, out var quantity) && quantity >= 0)
        {
            var maxQuantity = returnItem.AvailableQuantity;
            returnItem.ReturnQuantity = Math.Min(quantity, maxQuantity);
            returnItem.ValidationError = quantity > maxQuantity ? $"最大可退數量：{maxQuantity}" : null;
        }
        else
        {
            returnItem.ReturnQuantity = 0;
            returnItem.ValidationError = null;
        }
        
        await NotifyDetailsChanged();
    }

    private async Task OnReturnReasonInput(ReturnItem returnItem, string? value)
    {
        returnItem.ReturnReason = value ?? string.Empty;
        await NotifyDetailsChanged();
    }

    private async Task OnQualityConditionInput(ReturnItem returnItem, string? value)
    {
        returnItem.QualityCondition = value ?? string.Empty;
        await NotifyDetailsChanged();
    }

    private async Task OnRemarksInput(ReturnItem returnItem, string? value)
    {
        returnItem.Remarks = value ?? string.Empty;
        await NotifyDetailsChanged();
    }

    private async Task LoadAllReturnableItems()
    {
        try
        {
            var availableDetails = GetAvailableOrderDetails();
            
            foreach (var orderDetail in availableDetails)
            {
                // 檢查是否已經存在相同的明細
                if (ReturnItems.Any(item => item.SelectedOrderDetail?.Id == orderDetail.Id))
                    continue;
                
                // 找到第一個空行或創建新行
                var emptyItem = ReturnItems.FirstOrDefault(IsEmptyRow);
                if (emptyItem == null)
                {
                    emptyItem = CreateEmptyItem();
                    ReturnItems.Add(emptyItem);
                }
                
                // 設置明細資訊
                emptyItem.SelectedOrderDetail = orderDetail;
                emptyItem.SelectedProduct = orderDetail.Product;
                emptyItem.OrderDetailSearch = FormatOrderDetailDisplayText(orderDetail);
                emptyItem.OriginalQuantity = (int)orderDetail.OrderQuantity;
                emptyItem.AlreadyReturnedQuantity = GetAlreadyReturnedQuantity(orderDetail.Id);
                emptyItem.OriginalUnitPrice = orderDetail.UnitPrice;
                emptyItem.ReturnUnitPrice = orderDetail.UnitPrice;
            }
            
            EnsureOneEmptyRow();
            await NotifyDetailsChanged();
            await NotificationService.ShowSuccessAsync($"已載入 {availableDetails.Count} 項可退貨商品");
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入可退貨商品時發生錯誤：{ex.Message}");
        }
    }

    private async Task RemoveItemAsync(int index)
    {
        if (index >= 0 && index < ReturnItems.Count)
        {
            var item = ReturnItems[index];
            
            // 通知父組件項目即將被移除
            if (OnItemRemoved.HasDelegate)
            {
                await OnItemRemoved.InvokeAsync(item);
            }
            
            // 如果是現有明細，記錄ID以便刪除
            if (item.ExistingDetailEntity?.Id > 0)
            {
                _deletedDetailIds.Add(item.ExistingDetailEntity.Id);
            }
            
            ReturnItems.RemoveAt(index);
            EnsureOneEmptyRow();
            await NotifyDetailsChanged();
        }
    }

    private decimal GetTotalAmount()
    {
        return ReturnItems.Where(item => !IsEmptyRow(item))
                          .Sum(item => item.ReturnSubtotalAmount);
    }

    private async Task NotifyDetailsChanged()
    {
        // 轉換為 SalesReturnDetail 實體
        var details = ReturnItems.Where(item => !IsEmptyRow(item) && item.ReturnQuantity > 0)
                                 .Select(item => ConvertToEntity(item))
                                 .Where(entity => entity != null)
                                 .ToList();
        
        if (EffectiveDetailsChangedCallback.HasDelegate)
        {
            await EffectiveDetailsChangedCallback.InvokeAsync(details!);
        }
        
        // 通知已刪除的明細 ID
        if (OnDeletedDetailsChanged.HasDelegate && _deletedDetailIds.Any())
        {
            await OnDeletedDetailsChanged.InvokeAsync(_deletedDetailIds.ToList());
            _deletedDetailIds.Clear(); // 清空已通知的ID
        }
        
        if (OnReturnItemsChanged.HasDelegate)
        {
            await OnReturnItemsChanged.InvokeAsync(ReturnItems);
        }
    }

    private SalesReturnDetail? ConvertToEntity(ReturnItem item)
    {
        if (item.SelectedOrderDetail == null || item.SelectedProduct == null || item.ReturnQuantity <= 0)
        {
            return null;
        }
        
        // 計算小計金額
        var subtotalAmount = item.ReturnQuantity * item.ReturnUnitPrice;
        
        // 如果已有實體，更新它
        if (item.ExistingDetailEntity != null)
        {
            item.ExistingDetailEntity.SalesOrderDetailId = item.SelectedOrderDetail.Id;
            item.ExistingDetailEntity.ProductId = item.SelectedProduct.Id;
            item.ExistingDetailEntity.ReturnQuantity = item.ReturnQuantity;
            item.ExistingDetailEntity.OriginalUnitPrice = item.OriginalUnitPrice;
            item.ExistingDetailEntity.ReturnUnitPrice = item.ReturnUnitPrice;
            item.ExistingDetailEntity.ReturnSubtotalAmount = subtotalAmount;
            item.ExistingDetailEntity.QualityCondition = item.QualityCondition;
            item.ExistingDetailEntity.Remarks = item.Remarks;
            
            return item.ExistingDetailEntity;
        }
        
        // 創建新實體
        return new SalesReturnDetail
        {
            SalesOrderDetailId = item.SelectedOrderDetail.Id,
            ProductId = item.SelectedProduct.Id,
            ReturnQuantity = item.ReturnQuantity,
            OriginalUnitPrice = item.OriginalUnitPrice,
            ReturnUnitPrice = item.ReturnUnitPrice,
            ReturnSubtotalAmount = subtotalAmount,
            QualityCondition = item.QualityCondition,
            Remarks = item.Remarks
        };
    }

    // ===== 輔助方法 =====
    private int GetAlreadyReturnedQuantity(int orderDetailId)
    {
        // 這裡應該查詢資料庫獲取已退貨數量，目前暫時回傳0
        // 可能需要呼叫服務來獲取
        return 0;
    }
    
    private int GetAvailableReturnQuantity(SalesOrderDetail orderDetail)
    {
        var alreadyReturned = GetAlreadyReturnedQuantity(orderDetail.Id);
        return (int)(orderDetail.OrderQuantity - alreadyReturned);
    }

    private async Task FillAllQuantities()
    {
        foreach (var item in ReturnItems)
        {
            if (item.SelectedOrderDetail != null)
            {
                item.ReturnQuantity = item.AvailableQuantity;
                item.ValidationError = null;
            }
        }
        
        await NotifyDetailsChanged();
    }

    private async Task ClearAllQuantities()
    {
        foreach (var item in ReturnItems)
        {
            item.ReturnQuantity = 0;
        }
        
        await NotifyDetailsChanged();
    }

    private async Task ClearAllDetails()
    {
        // 通知父組件所有項目即將被移除
        if (OnItemRemoved.HasDelegate)
        {
            foreach (var item in ReturnItems.ToList()) // 創建副本避免修改集合時的問題
            {
                if (!IsEmptyRow(item))
                {
                    await OnItemRemoved.InvokeAsync(item);
                }
            }
        }
        
        // 記錄所有現有明細的 ID 以便刪除
        foreach (var item in ReturnItems.Where(item => item.ExistingDetailEntity?.Id > 0))
        {
            _deletedDetailIds.Add(item.ExistingDetailEntity!.Id);
        }
        
        // 清空所有明細，只保留一個空行
        ReturnItems.Clear();
        EnsureOneEmptyRow();
        
        await NotifyDetailsChanged();
        await NotificationService.ShowSuccessAsync("已清空所有退貨明細");
    }

    // ===== 公開方法 - 供父組件調用 =====
    public async Task<bool> ValidateAsync()
    {
        try
        {
            var errors = new List<string>();
            
            // 檢查是否有退貨項目
            var potentialItems = ReturnItems.Where(item => !IsEmptyRow(item) && item.ReturnQuantity > 0).ToList();
            if (!potentialItems.Any())
            {
                errors.Add("至少需要一個退貨項目");
            }
            
            // 檢查必填欄位和基本驗證
            foreach (var item in potentialItems)
            {
                if (item.SelectedOrderDetail == null)
                {
                    errors.Add("請選擇有效的銷售訂單明細");
                    continue;
                }
                
                if (item.ReturnQuantity > item.AvailableQuantity)
                {
                    errors.Add($"商品 {item.SelectedProduct?.Code} 的退貨數量超過可退數量");
                }
                
                if (item.ReturnUnitPrice < 0)
                {
                    errors.Add($"商品 {item.SelectedProduct?.Code} 的退貨單價不可為負數");
                }
            }
            
            if (errors.Any())
            {
                var errorMessage = string.Join("\n", errors);
                await NotificationService.ShowErrorAsync(errorMessage);
                return false;
            }
            
            return true;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"驗證時發生錯誤：{ex.Message}");
            return false;
        }
    }
    
    // ===== ReturnItem 內部類別 =====
    public class ReturnItem
    {
        public Product? SelectedProduct { get; set; }
        public SalesOrderDetail? SelectedOrderDetail { get; set; }
        
        public int OriginalQuantity { get; set; } = 0;
        public int AlreadyReturnedQuantity { get; set; } = 0;
        public int ReturnQuantity { get; set; } = 0;
        
        public decimal OriginalUnitPrice { get; set; } = 0;
        public decimal ReturnUnitPrice { get; set; } = 0;
        
        public string QualityCondition { get; set; } = string.Empty;
        public string ReturnReason { get; set; } = string.Empty;
        public string Remarks { get; set; } = string.Empty;
        
        public SalesReturnDetail? ExistingDetailEntity { get; set; }
        public string? ValidationError { get; set; }
        
        // SearchableSelect 支援屬性
        public string OrderDetailSearch { get; set; } = string.Empty;
        public List<SalesOrderDetail> FilteredOrderDetails { get; set; } = new();
        public bool ShowDropdown { get; set; } = false;
        public int SelectedIndex { get; set; } = -1;
        
        // 計算屬性
        public decimal ReturnSubtotalAmount => ReturnQuantity * ReturnUnitPrice;
        public int AvailableQuantity => OriginalQuantity - AlreadyReturnedQuantity;
        
        /// <summary>
        /// 取得顯示用的商品名稱（包含銷售訂單號）
        /// </summary>
        public string DisplayName => 
            SelectedProduct != null 
                ? $"[{SelectedOrderDetail?.SalesOrder?.SalesOrderNumber ?? "N/A"}] {SelectedProduct.Code} - {SelectedProduct.Name}"
                : string.Empty;
    }
}