@* 產品廠商管理組件 - 管理產品的多個廠商資訊 - 使用 InteractiveTableComponent 統一UI *@
@using ERPCore2.Components.Shared.SubCollections
@using ERPCore2.Components.Shared.Buttons
@inject INotificationService NotificationService
@typeparam TProductSupplierEntity where TProductSupplierEntity : BaseEntity, new()
@typeparam TProductEntity where TProductEntity : BaseEntity
@typeparam TSupplierEntity where TSupplierEntity : BaseEntity

<div class="card border-0 shadow-sm">
    <div class="card-body p-0">
        <InteractiveTableComponent TItem="TProductSupplierEntity" 
                                  Items="@Items"
                                  ColumnDefinitions="@GetColumnDefinitions()"
                                  IsReadOnly="@IsReadOnly"
                                  ShowRowNumbers="false"
                                  EmptyMessage="@EmptyMessage"
                                  ShowBuiltInActions="true"
                                  ShowBuiltInDeleteButton="true"
                                  OnItemDelete="@HandleItemDelete" />

        @* 新增按鈕 - 只在非唯讀模式顯示 *@
        @if (!IsReadOnly)
        {
            <div class="p-3 border-top text-center">
                <GenericButtonComponent Variant="ButtonVariant.OutlinePrimary" 
                                       Text="@($"新增{ItemDisplayName}")" 
                                       IconClass="bi-plus me-1" 
                                       OnClick="AddNewRow" />
            </div>
        }
    </div>
</div>

@code {
    // ===== 基本參數 =====
    [Parameter] public List<TProductSupplierEntity> Items { get; set; } = new();
    [Parameter] public List<TSupplierEntity> Options { get; set; } = new(); // 廠商選項
    [Parameter] public List<Unit> UnitOptions { get; set; } = new(); // 單位選項
    [Parameter] public int ParentEntityId { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "廠商資訊";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "building";
    [Parameter] public string ItemDisplayName { get; set; } = "廠商";
    [Parameter] public string EmptyIcon { get; set; } = "building-x";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增廠商";
    
    // ===== 委派參數 - Getter =====
    [Parameter] public Func<TProductSupplierEntity, int?> GetSupplierId { get; set; } = item => null;
    [Parameter] public Func<TProductSupplierEntity, string?> GetSupplierProductCode { get; set; } = item => null;
    [Parameter] public Func<TProductSupplierEntity, decimal?> GetSupplierPrice { get; set; } = item => null;
    [Parameter] public Func<TProductSupplierEntity, int?> GetLeadTime { get; set; } = item => null;
    [Parameter] public Func<TProductSupplierEntity, int?> GetMinOrderQuantity { get; set; } = item => null;
    [Parameter] public Func<TProductSupplierEntity, int?> GetUnitId { get; set; } = item => null;
    [Parameter] public Func<TSupplierEntity, int> GetOptionId { get; set; } = option => option.Id;
    [Parameter] public Func<TSupplierEntity, string> GetOptionDisplayText { get; set; } = option => 
    {
        // 檢查是否有 CompanyName 屬性並取得其值
        var companyNameProperty = option.GetType().GetProperty("CompanyName");
        if (companyNameProperty != null)
        {
            var companyName = companyNameProperty.GetValue(option) as string;
            return companyName ?? option.ToString() ?? "";
        }
        return option.ToString() ?? "";
    };
    [Parameter] public Func<Unit, int> GetUnitOptionId { get; set; } = unit => unit.Id;
    [Parameter] public Func<Unit, string> GetUnitOptionDisplayText { get; set; } = unit => unit.Name;
    
    // ===== 委派參數 - Setter =====
    [Parameter] public Action<TProductSupplierEntity, int?> SetSupplierId { get; set; } = (item, supplierId) => { };
    [Parameter] public Action<TProductSupplierEntity, string?> SetSupplierProductCode { get; set; } = (item, value) => { };
    [Parameter] public Action<TProductSupplierEntity, decimal?> SetSupplierPrice { get; set; } = (item, value) => { };
    [Parameter] public Action<TProductSupplierEntity, int?> SetLeadTime { get; set; } = (item, value) => { };
    [Parameter] public Action<TProductSupplierEntity, int?> SetMinOrderQuantity { get; set; } = (item, value) => { };
    [Parameter] public Action<TProductSupplierEntity, int?> SetUnitId { get; set; } = (item, value) => { };
    [Parameter] public Action<TProductSupplierEntity, int> SetParentId { get; set; } = (item, parentId) => { };
    
    // ===== 事件參數 =====
    [Parameter] public EventCallback<List<TProductSupplierEntity>> ItemsChanged { get; set; }
    [Parameter] public EventCallback<TProductSupplierEntity> ItemAdded { get; set; }
    [Parameter] public EventCallback<TProductSupplierEntity> ItemRemoved { get; set; }
    [Parameter] public EventCallback<TProductSupplierEntity> PrimaryChanged { get; set; }
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        return new List<InteractiveColumnDefinition>
        {
            // 廠商選擇欄位
            new() 
            { 
                Title = "廠商", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "25%",
                CustomTemplate = item => 
                {
                    var productSupplier = (TProductSupplierEntity)item;
                    var supplierId = GetSupplierId(productSupplier);
                    var selectedValue = supplierId?.ToString() ?? "";
                    
                    return @<select class="form-select form-select-sm" 
                                    value="@selectedValue"
                                    disabled="@IsReadOnly"
                                    @onchange="@(async (e) => await OnSupplierChanged((productSupplier, e.Value)))">
                        @foreach (var option in Options)
                        {
                            <option value="@GetOptionId(option)">@GetOptionDisplayText(option)</option>
                        }
                    </select>;
                }
            },
            
            // 廠商商品代碼 - 文字輸入
            new() 
            { 
                Title = "廠商商品代碼", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "20%",
                CustomTemplate = item => 
                {
                    var productSupplier = (TProductSupplierEntity)item;
                    var value = GetSupplierProductCode(productSupplier) ?? "";
                    
                    return @<input type="text" 
                                   class="form-control form-control-sm" 
                                   value="@value"
                                   placeholder="請輸入代碼"
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnSupplierProductCodeChanged((productSupplier, e.Value?.ToString())))" />;
                }
            },
            
            // 報價 - 數字輸入
            new() 
            { 
                Title = "報價", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "15%",
                CustomTemplate = item => 
                {
                    var productSupplier = (TProductSupplierEntity)item;
                    var value = GetSupplierPrice(productSupplier)?.ToString("F2") ?? "";
                    
                    return @<input type="number" 
                                   class="form-control form-control-sm" 
                                   value="@value"
                                   placeholder="0.00"
                                   step="0.01"
                                   min="0"
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnSupplierPriceChanged((productSupplier, e.Value?.ToString())))" />;
                }
            },
            
            // 交期 - 數字輸入
            new() 
            { 
                Title = "交期(天)", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "15%",
                CustomTemplate = item => 
                {
                    var productSupplier = (TProductSupplierEntity)item;
                    var value = GetLeadTime(productSupplier)?.ToString() ?? "";
                    
                    return @<input type="number" 
                                   class="form-control form-control-sm" 
                                   value="@value"
                                   placeholder="0"
                                   min="0"
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnLeadTimeChanged((productSupplier, e.Value?.ToString())))" />;
                }
            },
            
            // 最小訂購量 - 數字輸入
            new() 
            { 
                Title = "最小訂購量", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "15%",
                CustomTemplate = item => 
                {
                    var productSupplier = (TProductSupplierEntity)item;
                    var value = GetMinOrderQuantity(productSupplier)?.ToString() ?? "";
                    
                    return @<input type="number" 
                                   class="form-control form-control-sm" 
                                   value="@value"
                                   placeholder="0"
                                   min="0"
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnMinOrderQuantityChanged((productSupplier, e.Value?.ToString())))" />;
                }
            },
            
            // 單位選擇欄位
            new() 
            { 
                Title = "單位", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "15%",
                CustomTemplate = item => 
                {
                    var productSupplier = (TProductSupplierEntity)item;
                    var unitId = GetUnitId(productSupplier);
                    var selectedValue = unitId?.ToString() ?? "";
                    
                    return @<select class="form-select form-select-sm" 
                                    value="@selectedValue"
                                    disabled="@IsReadOnly"
                                    @onchange="@(async (e) => await OnUnitChanged((productSupplier, e.Value)))">
                        @foreach (var unit in UnitOptions)
                        {
                            <option value="@GetUnitOptionId(unit)">@GetUnitOptionDisplayText(unit)</option>
                        }
                    </select>;
                }
            }
        };
    }

    private async Task HandleItemDelete(TProductSupplierEntity item)
    {
        var index = Items.IndexOf(item);
        await RemoveItemAsync(index);
    }

    private Task OnValidationFailed((TProductSupplierEntity item, string propertyName, string? errorMessage) args)
    {
        // 不再需要此方法，因為驗證已移至自訂模板中
        return Task.CompletedTask;
    }

    private Task HandleRowClick(TProductSupplierEntity item)
    {
        // 不再需要此方法，因為直接在表格上編輯
        return Task.CompletedTask;
    }
    
    // ===== 內部方法 =====

    private string GetSupplierDisplayText(TProductSupplierEntity item)
    {
        var supplierId = GetSupplierId(item);
        if (supplierId.HasValue)
        {
            var supplier = Options.FirstOrDefault(o => GetOptionId(o) == supplierId.Value);
            if (supplier != null)
            {
                return GetOptionDisplayText(supplier);
            }
        }
        return "未知廠商";
    }

    private string GetUnitDisplayText(TProductSupplierEntity item)
    {
        var unitId = GetUnitId(item);
        if (unitId.HasValue)
        {
            var unit = UnitOptions.FirstOrDefault(u => GetUnitOptionId(u) == unitId.Value);
            if (unit != null)
            {
                return GetUnitOptionDisplayText(unit);
            }
        }
        return "-";
    }

    // ===== 新增行方法 =====
    private void AddNewRow()
    {
        if (IsReadOnly || !Options.Any()) return;
        
        var newItem = new TProductSupplierEntity();
        SetParentId(newItem, ParentEntityId);
        Items.Add(newItem);
        StateHasChanged();
    }

    // ===== InteractiveTableComponent 事件處理 =====
    private async Task OnSupplierChanged((object item, object? value) args)
    {
        var productSupplier = (TProductSupplierEntity)args.item;
        
        if (args.value != null && int.TryParse(args.value.ToString(), out var supplierId))
        {
            // 檢查是否已存在相同廠商
            if (Items.Where(i => i != productSupplier).Any(item => GetSupplierId(item) == supplierId))
            {
                await NotificationService.ShowErrorAsync("此廠商已存在，請選擇其他廠商");
                SetSupplierId(productSupplier, null);
            }
            else
            {
                SetSupplierId(productSupplier, supplierId);
                await ItemsChanged.InvokeAsync(Items);
            }
        }
        else
        {
            SetSupplierId(productSupplier, null);
            await ItemsChanged.InvokeAsync(Items);
        }
        StateHasChanged();
    }

    private async Task OnSupplierProductCodeChanged((object item, string? value) args)
    {
        var productSupplier = (TProductSupplierEntity)args.item;
        SetSupplierProductCode(productSupplier, args.value);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    private async Task OnSupplierPriceChanged((object item, string? value) args)
    {
        var productSupplier = (TProductSupplierEntity)args.item;
        
        if (string.IsNullOrEmpty(args.value))
        {
            SetSupplierPrice(productSupplier, null);
        }
        else if (decimal.TryParse(args.value, out var price))
        {
            SetSupplierPrice(productSupplier, price);
        }
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    private async Task OnLeadTimeChanged((object item, string? value) args)
    {
        var productSupplier = (TProductSupplierEntity)args.item;
        
        if (string.IsNullOrEmpty(args.value))
        {
            SetLeadTime(productSupplier, null);
        }
        else if (int.TryParse(args.value, out var leadTime))
        {
            SetLeadTime(productSupplier, leadTime);
        }
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    private async Task OnMinOrderQuantityChanged((object item, string? value) args)
    {
        var productSupplier = (TProductSupplierEntity)args.item;
        
        if (string.IsNullOrEmpty(args.value))
        {
            SetMinOrderQuantity(productSupplier, null);
        }
        else if (int.TryParse(args.value, out var quantity))
        {
            SetMinOrderQuantity(productSupplier, quantity);
        }
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    private async Task OnUnitChanged((object item, object? value) args)
    {
        var productSupplier = (TProductSupplierEntity)args.item;
        
        if (args.value != null && int.TryParse(args.value.ToString(), out var unitId))
        {
            SetUnitId(productSupplier, unitId);
        }
        else
        {
            SetUnitId(productSupplier, null);
        }
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        var removedItem = Items[index];
        
        Items.RemoveAt(index);
        
        await ItemRemoved.InvokeAsync(removedItem);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        if (!Items.Any())
        {
            errors.Add("至少需要一個廠商");
        }
        else
        {
            // 檢查廠商重複
            var supplierIds = Items.Select(item => GetSupplierId(item)).Where(id => id.HasValue).ToList();
            if (supplierIds.Count != supplierIds.Distinct().Count())
            {
                errors.Add("存在重複的廠商");
            }
        }
          
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }
}
