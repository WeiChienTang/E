@* 多採購單採購入庫明細管理元件 *@
@inject IPurchaseOrderService PurchaseOrderService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime

@if (PendingOrderDetails != null && PendingOrderDetails.Any())
{
    <div class="card">
        <div class="card-header">
            <h6 class="mb-0">
                <i class="fas fa-list"></i> 
                @if (SupplierId.HasValue && SupplierId.Value > 0)
                {
                    <span>供應商未完成進貨商品清單</span>
                }
                else
                {
                    <span>請先選擇供應商</span>
                }
            </h6>
        </div>
        <div class="card-body">
            @if (!SupplierId.HasValue || SupplierId.Value <= 0)
            {
                <div class="text-center text-muted py-5">
                    <i class="fas fa-building fa-3x mb-3"></i>
                    <p class="fs-5">請先選擇供應商</p>
                    <p>選擇供應商後即可查看該供應商的未完成進貨商品</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th width="5%">
                                    <input type="checkbox" 
                                           @onchange="ToggleSelectAll"
                                           checked="@IsAllSelected()" />
                                </th>
                                <th width="15%">採購單號</th>
                                <th width="25%">商品資訊</th>
                                <th width="12%">訂購量</th>
                                <th width="12%">已進貨</th>
                                <th width="12%">剩餘量</th>
                                <th width="12%">入庫量</th>
                                <th width="7%">單價</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in ReceivingItems)
                            {
                                var orderDetail = item.PurchaseOrderDetail;
                                var remainingQty = orderDetail.OrderQuantity - item.AlreadyReceivedQuantity;
                                
                                <tr class="@(item.IsSelected ? "table-warning" : "")">
                                    <td>
                                        <input type="checkbox" 
                                               checked="@item.IsSelected"
                                               @onchange="() => OnItemSelectionChanged(item)" />
                                    </td>
                                    <td>
                                        <small class="text-primary">@orderDetail.PurchaseOrder.PurchaseOrderNumber</small>
                                    </td>
                                    <td>
                                        <div class="product-info">
                                            <strong>@orderDetail.Product.Code</strong>
                                            <br />
                                            <small class="text-muted">@orderDetail.Product.Name</small>
                                            @if (!string.IsNullOrEmpty(orderDetail.DetailRemarks))
                                            {
                                                <br />
                                                <small class="text-info">
                                                    <i class="fas fa-comment"></i> @orderDetail.DetailRemarks
                                                </small>
                                            }
                                        </div>
                                    </td>
                                    <td class="text-end">
                                        <span class="badge bg-secondary">@orderDetail.OrderQuantity</span>
                                    </td>
                                    <td class="text-end">
                                        <span class="badge bg-success">@item.AlreadyReceivedQuantity</span>
                                    </td>
                                    <td class="text-end">
                                        <span class="badge bg-warning">@remainingQty</span>
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm text-end" 
                                               value="@(item.ReceivedQuantity == 0 ? "" : item.ReceivedQuantity.ToString())"
                                               @oninput="(e) => OnReceivedQuantityChanged(item, e.Value?.ToString())"
                                               placeholder="0" 
                                               min="0" 
                                               max="@remainingQty"
                                               step="1"
                                               disabled="@(!item.IsSelected)" />
                                        @if (item.ValidationError != null)
                                        {
                                            <small class="text-danger">@item.ValidationError</small>
                                        }
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm text-end" 
                                               @bind="item.UnitPrice"
                                               @oninput="(e) => OnUnitPriceChanged(item, e.Value?.ToString())"
                                               placeholder="0.00" 
                                               min="0" 
                                               step="0.01"
                                               disabled="@(!item.IsSelected)" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr class="table-info">
                                <th colspan="6">已選擇項目總計</th>
                                <th class="text-center">@GetSelectedTotalQuantity()</th>
                                <th class="text-center">@GetSelectedTotalAmount().ToString("C")</th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                
                <div class="mt-3">
                    <div class="row">
                        <div class="col-md-6">
                            <button type="button" class="btn btn-outline-primary me-2" @onclick="SelectAllPendingItems">
                                <i class="fas fa-check-square"></i> 全選剩餘量
                            </button>
                            <button type="button" class="btn btn-outline-secondary" @onclick="ClearAllSelections">
                                <i class="fas fa-times"></i> 清除選擇
                            </button>
                        </div>
                        <div class="col-md-6 text-end">
                            <span class="text-muted">
                                已選擇 @ReceivingItems.Count(x => x.IsSelected) / @ReceivingItems.Count 項商品
                            </span>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="text-center text-muted py-5">
        <i class="fas fa-clipboard-list fa-3x mb-3"></i>
        <p class="fs-5">尚無未完成進貨的商品</p>
        <p>該供應商的所有採購項目都已完成進貨</p>
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public int? SupplierId { get; set; }
    [Parameter] public List<PurchaseReceivingDetail> ExistingDetails { get; set; } = new List<PurchaseReceivingDetail>();
    [Parameter] public EventCallback<List<PurchaseReceivingDetail>> OnDetailsChanged { get; set; }

    // ===== 內部狀態 =====
    private List<PurchaseOrderDetail> PendingOrderDetails { get; set; } = new List<PurchaseOrderDetail>();
    private List<ReceivingItem> ReceivingItems { get; set; } = new List<ReceivingItem>();
    private int? _previousSupplierId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // 檢查供應商是否變更
        if (_previousSupplierId != SupplierId)
        {
            _previousSupplierId = SupplierId;
            await LoadPendingOrderDetailsAsync();
            LoadExistingDetails();
        }
    }

    /// <summary>
    /// 載入所有必要資料
    /// </summary>
    private async Task LoadDataAsync()
    {
        try
        {
            await LoadPendingOrderDetailsAsync();
            LoadExistingDetails();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入資料時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 載入供應商的未完成進貨明細
    /// </summary>
    private async Task LoadPendingOrderDetailsAsync()
    {
        try
        {
            if (SupplierId.HasValue && SupplierId.Value > 0)
            {
                PendingOrderDetails = await PurchaseOrderService.GetPendingReceivingDetailsBySupplierAsync(SupplierId.Value);
                CreateReceivingItems();
            }
            else
            {
                PendingOrderDetails = new List<PurchaseOrderDetail>();
                ReceivingItems = new List<ReceivingItem>();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入未完成進貨明細時發生錯誤：{ex.Message}");
            PendingOrderDetails = new List<PurchaseOrderDetail>();
            ReceivingItems = new List<ReceivingItem>();
        }
    }

    /// <summary>
    /// 從未完成進貨明細建立入庫項目
    /// </summary>
    private void CreateReceivingItems()
    {
        ReceivingItems = PendingOrderDetails.Select(od => new ReceivingItem
        {
            PurchaseOrderDetail = od,
            AlreadyReceivedQuantity = GetAlreadyReceivedQuantity(od.Id),
            ReceivedQuantity = 0,
            UnitPrice = od.UnitPrice,
            IsSelected = false
        }).ToList();
    }

    /// <summary>
    /// 取得已進貨數量
    /// </summary>
    private int GetAlreadyReceivedQuantity(int purchaseOrderDetailId)
    {
        // 這裡應該從資料庫查詢，暫時返回 0
        // 實際實作時需要查詢 PurchaseReceivingDetail 表
        return 0;
    }

    /// <summary>
    /// 載入現有入庫明細
    /// </summary>
    private void LoadExistingDetails()
    {
        if (ExistingDetails?.Any() != true || !ReceivingItems.Any()) return;

        foreach (var existingDetail in ExistingDetails)
        {
            var item = ReceivingItems.FirstOrDefault(ri => ri.PurchaseOrderDetail.Id == existingDetail.PurchaseOrderDetailId);
            if (item != null)
            {
                item.ReceivedQuantity = existingDetail.ReceivedQuantity;
                item.UnitPrice = existingDetail.UnitPrice;
                item.InspectionRemarks = existingDetail.InspectionRemarks;
                item.BatchNumber = existingDetail.BatchNumber;
                item.ExpiryDate = existingDetail.ExpiryDate;
                item.ExistingDetailEntity = existingDetail;
                item.IsSelected = true; // 已有明細的項目預設選中
            }
        }
    }

    // ===== 事件處理 =====

    /// <summary>
    /// 項目選擇變更
    /// </summary>
    private async Task OnItemSelectionChanged(ReceivingItem item)
    {
        if (!item.IsSelected)
        {
            // 取消選擇時清空數量
            item.ReceivedQuantity = 0;
            item.ValidationError = null;
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 全選/取消全選
    /// </summary>
    private async Task ToggleSelectAll()
    {
        var allSelected = IsAllSelected();
        foreach (var item in ReceivingItems)
        {
            item.IsSelected = !allSelected;
            if (!item.IsSelected)
            {
                item.ReceivedQuantity = 0;
                item.ValidationError = null;
            }
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 檢查是否全選
    /// </summary>
    private bool IsAllSelected()
    {
        return ReceivingItems.Any() && ReceivingItems.All(x => x.IsSelected);
    }

    /// <summary>
    /// 選擇所有有剩餘量的項目，並自動填入剩餘數量
    /// </summary>
    private async Task SelectAllPendingItems()
    {
        foreach (var item in ReceivingItems)
        {
            var remainingQty = item.PurchaseOrderDetail.OrderQuantity - item.AlreadyReceivedQuantity;
            if (remainingQty > 0)
            {
                item.IsSelected = true;
                item.ReceivedQuantity = remainingQty;
                item.ValidationError = null;
            }
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 清除所有選擇
    /// </summary>
    private async Task ClearAllSelections()
    {
        foreach (var item in ReceivingItems)
        {
            item.IsSelected = false;
            item.ReceivedQuantity = 0;
            item.ValidationError = null;
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 入庫數量變更
    /// </summary>
    private async Task OnReceivedQuantityChanged(ReceivingItem item, string? value)
    {
        if (int.TryParse(value, out int quantity))
        {
            var remainingQty = item.PurchaseOrderDetail.OrderQuantity - item.AlreadyReceivedQuantity;
            
            if (quantity < 0)
            {
                item.ReceivedQuantity = 0;
                item.ValidationError = "數量不可為負數";
            }
            else if (quantity > remainingQty)
            {
                item.ReceivedQuantity = remainingQty;
                item.ValidationError = $"超過剩餘數量 {remainingQty}";
            }
            else
            {
                item.ReceivedQuantity = quantity;
                item.ValidationError = null;
            }
        }
        else
        {
            item.ReceivedQuantity = 0;
            item.ValidationError = null;
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 單價變更
    /// </summary>
    private async Task OnUnitPriceChanged(ReceivingItem item, string? value)
    {
        if (decimal.TryParse(value, out decimal price) && price >= 0)
        {
            item.UnitPrice = price;
        }
        else
        {
            item.UnitPrice = 0;
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    // ===== 資料轉換和通知 =====

    /// <summary>
    /// 轉換為入庫明細實體
    /// </summary>
    private List<PurchaseReceivingDetail> ConvertToReceivingDetails()
    {
        var details = new List<PurchaseReceivingDetail>();

        foreach (var item in ReceivingItems.Where(x => x.IsSelected && x.ReceivedQuantity > 0))
        {
            PurchaseReceivingDetail detail;

            if (item.ExistingDetailEntity != null)
            {
                // 更新現有實體
                detail = item.ExistingDetailEntity;
            }
            else
            {
                // 建立新實體
                detail = new PurchaseReceivingDetail();
            }

            // 設定屬性
            detail.PurchaseOrderDetailId = item.PurchaseOrderDetail.Id;
            detail.ProductId = item.PurchaseOrderDetail.ProductId;
            detail.ReceivedQuantity = item.ReceivedQuantity;
            detail.UnitPrice = item.UnitPrice;
            detail.InspectionRemarks = item.InspectionRemarks;
            detail.BatchNumber = item.BatchNumber;
            detail.ExpiryDate = item.ExpiryDate;

            details.Add(detail);
        }

        return details;
    }

    /// <summary>
    /// 通知明細變更
    /// </summary>
    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToReceivingDetails();
        await OnDetailsChanged.InvokeAsync(details);
    }

    // ===== 統計方法 =====

    private int GetSelectedTotalQuantity()
    {
        return ReceivingItems
            .Where(item => item.IsSelected)
            .Sum(item => item.ReceivedQuantity);
    }

    private decimal GetSelectedTotalAmount()
    {
        return ReceivingItems
            .Where(item => item.IsSelected && item.ReceivedQuantity > 0)
            .Sum(item => item.ReceivedQuantity * item.UnitPrice);
    }

    /// <summary>
    /// 入庫項目類別 - 擴展版本
    /// </summary>
    public class ReceivingItem
    {
        public PurchaseOrderDetail PurchaseOrderDetail { get; set; } = null!;
        public int AlreadyReceivedQuantity { get; set; } = 0;  // 已進貨數量
        public int ReceivedQuantity { get; set; } = 0;
        public decimal UnitPrice { get; set; } = 0;
        public string? InspectionRemarks { get; set; }
        public string? BatchNumber { get; set; }
        public DateTime? ExpiryDate { get; set; }
        public string? ValidationError { get; set; }
        public bool IsSelected { get; set; } = false;  // 是否選中
        public PurchaseReceivingDetail? ExistingDetailEntity { get; set; }
    }
}
