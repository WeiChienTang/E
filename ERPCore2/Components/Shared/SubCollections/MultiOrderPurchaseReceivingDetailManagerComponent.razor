@* 多採購單採購入庫明細管理元件 *@
@using ERPCore2.Components.Shared.Buttons
@inject IPurchaseOrderService PurchaseOrderService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime

@if (PendingOrderDetails != null && PendingOrderDetails.Any())
{
    <div class="card">
            @if (!SupplierId.HasValue || SupplierId.Value <= 0)
            {
                <div class="text-center text-muted py-5">
                    <i class="fas fa-building fa-3x mb-3"></i>
                    <p class="fs-5">請先選擇供應商</p>
                    <p>選擇供應商後即可查看該供應商的未完成進貨商品</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th width="20%">採購單號</th>
                                <th width="20%">商品資訊</th>
                                <th width="10%">訂購量</th>
                                <th width="10%">已入庫量</th>
                                <th width="10%">待入庫量</th>
                                <th width="15%">本次入庫量</th>
                                <th width="15%">單價</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in ReceivingItems)
                            {
                                var orderDetail = item.PurchaseOrderDetail;
                                
                                <tr>
                                    <td>
                                        <small class="text-primary">@orderDetail.PurchaseOrder.PurchaseOrderNumber</small>
                                    </td>
                                    <td>
                                        <div class="product-info">
                                            <strong>@orderDetail.Product.Code</strong>
                                            <br />
                                            <small class="text-muted">@orderDetail.Product.Name</small>
                                            @if (!string.IsNullOrEmpty(orderDetail.Remarks))
                                            {
                                                <br />
                                                <small class="text-info">
                                                    <i class="fas fa-comment"></i> @orderDetail.Remarks
                                                </small>
                                            }
                                        </div>
                                    </td>
                                    <td class="text-end">
                                        <span class="badge bg-secondary">@orderDetail.OrderQuantity</span>
                                    </td>
                                    <td class="text-end">
                                        <div class="input-group input-group-sm">
                                            <input type="number" class="form-control text-end @(orderDetail.ReceivedQuantity >= orderDetail.OrderQuantity ? "bg-success-subtle" : "")" 
                                                   value="@orderDetail.ReceivedQuantity"
                                                   readonly />
                                            <span class="input-group-text @(orderDetail.ReceivedQuantity >= orderDetail.OrderQuantity ? "bg-success text-white" : "bg-light text-muted")">
                                                <small>已入庫</small>
                                            </span>
                                        </div>
                                    </td>
                                    <td class="text-end">
                                        <div class="input-group input-group-sm">
                                            <input type="number" class="form-control text-end @(GetPendingQuantity(orderDetail) <= 0 ? "bg-success-subtle" : "bg-warning-subtle")" 
                                                   value="@GetPendingQuantity(orderDetail)"
                                                   readonly />
                                            <span class="input-group-text @(GetPendingQuantity(orderDetail) <= 0 ? "bg-success text-white" : "bg-warning text-dark")">
                                                <small>@(GetPendingQuantity(orderDetail) <= 0 ? "完成" : "待入庫")</small>
                                            </span>
                                        </div>
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm text-end" 
                                               value="@(item.ReceivedQuantity == 0 ? "" : item.ReceivedQuantity.ToString())"
                                               @oninput="(e) => OnReceivedQuantityChanged(item, e.Value?.ToString())"
                                               placeholder="0" 
                                               min="0" 
                                               max="@GetPendingQuantity(orderDetail)"
                                               step="1" />
                                        @if (item.ValidationError != null)
                                        {
                                            <small class="text-danger">@item.ValidationError</small>
                                        }
                                        @if (GetPendingQuantity(orderDetail) <= 0)
                                        {
                                            <small class="text-success">
                                                <i class="fas fa-check-circle"></i> 此商品已完成進貨
                                            </small>
                                        }
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm text-end" 
                                               @bind="item.UnitPrice"
                                               @oninput="(e) => OnUnitPriceChanged(item, e.Value?.ToString())"
                                               placeholder="0.00" 
                                               min="0" 
                                               step="0.01" />
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr class="table-info">
                                <th colspan="6">總計</th>
                                <th class="text-center">@GetTotalAmount().ToString("C")</th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                
                
                <div class="d-flex justify-content-end gap-2 p-3">
                    <GenericButtonComponent Variant="ButtonVariant.Success" 
                                           Text="填入所有待入庫量" 
                                           IconClass="fas fa-fill" 
                                           OnClick="FillAllOrderQuantities" />
                    <GenericButtonComponent Variant="ButtonVariant.Danger" 
                                           Text="清空所有數量" 
                                           IconClass="fas fa-times" 
                                           OnClick="ClearAllQuantities" />
                </div>
            }
    </div>
}
else
{
    <div class="text-center text-muted py-5">
        <i class="fas fa-clipboard-list fa-3x mb-3"></i>
        <p class="fs-5">尚無未完成進貨的商品</p>
        <p>該供應商的所有採購項目都已完成進貨</p>
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public int? SupplierId { get; set; }
    [Parameter] public List<PurchaseReceivingDetail> ExistingDetails { get; set; } = new List<PurchaseReceivingDetail>();
    [Parameter] public EventCallback<List<PurchaseReceivingDetail>> OnDetailsChanged { get; set; }

    // ===== 內部狀態 =====
    private List<PurchaseOrderDetail> PendingOrderDetails { get; set; } = new List<PurchaseOrderDetail>();
    private List<ReceivingItem> ReceivingItems { get; set; } = new List<ReceivingItem>();
    private int? _previousSupplierId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // 檢查供應商是否變更
        if (_previousSupplierId != SupplierId)
        {
            _previousSupplierId = SupplierId;
            await LoadPendingOrderDetailsAsync();
            LoadExistingDetails();
        }
    }

    /// <summary>
    /// 載入所有必要資料
    /// </summary>
    private async Task LoadDataAsync()
    {
        try
        {
            await LoadPendingOrderDetailsAsync();
            LoadExistingDetails();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入資料時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 載入供應商的未完成進貨明細
    /// </summary>
    private async Task LoadPendingOrderDetailsAsync()
    {
        try
        {
            if (SupplierId.HasValue && SupplierId.Value > 0)
            {
                PendingOrderDetails = await PurchaseOrderService.GetPendingReceivingDetailsBySupplierAsync(SupplierId.Value);
                CreateReceivingItems();
            }
            else
            {
                PendingOrderDetails = new List<PurchaseOrderDetail>();
                ReceivingItems = new List<ReceivingItem>();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入未完成進貨明細時發生錯誤：{ex.Message}");
            PendingOrderDetails = new List<PurchaseOrderDetail>();
            ReceivingItems = new List<ReceivingItem>();
        }
    }

    /// <summary>
    /// 從未完成進貨明細建立入庫項目
    /// </summary>
    private void CreateReceivingItems()
    {
        ReceivingItems = PendingOrderDetails.Select(od => new ReceivingItem
        {
            PurchaseOrderDetail = od,
            ReceivedQuantity = 0,
            UnitPrice = od.UnitPrice
        }).ToList();
    }

    /// <summary>
    /// 載入現有入庫明細
    /// </summary>
    private void LoadExistingDetails()
    {
        if (ExistingDetails?.Any() != true || !ReceivingItems.Any()) return;

        foreach (var existingDetail in ExistingDetails)
        {
            var item = ReceivingItems.FirstOrDefault(ri => ri.PurchaseOrderDetail.Id == existingDetail.PurchaseOrderDetailId);
            if (item != null)
            {
                item.ReceivedQuantity = existingDetail.ReceivedQuantity;
                item.UnitPrice = existingDetail.UnitPrice;
                item.InspectionRemarks = existingDetail.InspectionRemarks;
                item.BatchNumber = existingDetail.BatchNumber;
                item.ExpiryDate = existingDetail.ExpiryDate;
                item.ExistingDetailEntity = existingDetail;
            }
        }
    }

    // ===== 事件處理 =====

    /// <summary>
    /// 填入所有待進貨數量
    /// </summary>
    private async Task FillAllOrderQuantities()
    {
        foreach (var item in ReceivingItems)
        {
            var pendingQuantity = GetPendingQuantity(item.PurchaseOrderDetail);
            item.ReceivedQuantity = pendingQuantity;
            item.ValidationError = null;
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 清空所有數量
    /// </summary>
    private async Task ClearAllQuantities()
    {
        foreach (var item in ReceivingItems)
        {
            item.ReceivedQuantity = 0;
            item.ValidationError = null;
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 入庫數量變更
    /// </summary>
    private async Task OnReceivedQuantityChanged(ReceivingItem item, string? value)
    {
        if (int.TryParse(value, out int quantity))
        {
            if (quantity < 0)
            {
                item.ReceivedQuantity = 0;
                item.ValidationError = "數量不可為負數";
            }
            else
            {
                var pendingQuantity = GetPendingQuantity(item.PurchaseOrderDetail);
                if (quantity > pendingQuantity)
                {
                    item.ReceivedQuantity = pendingQuantity;
                    item.ValidationError = $"入庫量不可超過待進貨量 ({pendingQuantity})";
                }
                else
                {
                    item.ReceivedQuantity = quantity;
                    item.ValidationError = null;
                }
            }
        }
        else
        {
            item.ReceivedQuantity = 0;
            item.ValidationError = null;
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 單價變更
    /// </summary>
    private async Task OnUnitPriceChanged(ReceivingItem item, string? value)
    {
        if (decimal.TryParse(value, out decimal price) && price >= 0)
        {
            item.UnitPrice = price;
        }
        else
        {
            item.UnitPrice = 0;
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    // ===== 資料轉換和通知 =====

    /// <summary>
    /// 轉換為入庫明細實體
    /// </summary>
    private List<PurchaseReceivingDetail> ConvertToReceivingDetails()
    {
        var details = new List<PurchaseReceivingDetail>();

        foreach (var item in ReceivingItems.Where(x => x.ReceivedQuantity > 0))
        {
            PurchaseReceivingDetail detail;

            if (item.ExistingDetailEntity != null)
            {
                // 更新現有實體
                detail = item.ExistingDetailEntity;
            }
            else
            {
                // 建立新實體
                detail = new PurchaseReceivingDetail();
            }

            // 設定屬性
            detail.PurchaseOrderDetailId = item.PurchaseOrderDetail.Id;
            detail.ProductId = item.PurchaseOrderDetail.ProductId;
            detail.ReceivedQuantity = item.ReceivedQuantity;
            detail.UnitPrice = item.UnitPrice;
            detail.InspectionRemarks = item.InspectionRemarks;
            detail.BatchNumber = item.BatchNumber;
            detail.ExpiryDate = item.ExpiryDate;

            details.Add(detail);
        }

        return details;
    }

    /// <summary>
    /// 通知明細變更
    /// </summary>
    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToReceivingDetails();
        await OnDetailsChanged.InvokeAsync(details);
    }

    // ===== 統計方法 =====

    private int GetTotalQuantity()
    {
        return ReceivingItems.Sum(item => item.ReceivedQuantity);
    }

    private decimal GetTotalAmount()
    {
        return ReceivingItems
            .Where(item => item.ReceivedQuantity > 0)
            .Sum(item => item.ReceivedQuantity * item.UnitPrice);
    }

    /// <summary>
    /// 計算待進貨數量
    /// </summary>
    private int GetPendingQuantity(PurchaseOrderDetail orderDetail)
    {
        return orderDetail.OrderQuantity - orderDetail.ReceivedQuantity;
    }

    /// <summary>
    /// 入庫項目類別 - 擴展版本
    /// </summary>
    public class ReceivingItem
    {
        public PurchaseOrderDetail PurchaseOrderDetail { get; set; } = null!;
        public int ReceivedQuantity { get; set; } = 0;
        public decimal UnitPrice { get; set; } = 0;
        public string? InspectionRemarks { get; set; }
        public string? BatchNumber { get; set; }
        public DateTime? ExpiryDate { get; set; }
        public string? ValidationError { get; set; }
        public PurchaseReceivingDetail? ExistingDetailEntity { get; set; }
    }
}
