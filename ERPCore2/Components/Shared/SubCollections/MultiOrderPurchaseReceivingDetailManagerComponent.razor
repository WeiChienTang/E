@* 多採購單採購入庫明細管理元件 - 使用 InteractiveTableComponent 統一UI *@

@inject IPurchaseOrderService PurchaseOrderService
@inject INotificationService NotificationService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@using ERPCore2.Helpers
@using ERPCore2.Components.Shared.SubCollections

@if (!SupplierId.HasValue || SupplierId.Value <= 0)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="supplier-warning">
                <i class="fas fa-building text-info fa-3x mb-3"></i>
                <h5 class="text-muted">請先選擇供應商</h5>
                <p class="text-muted">選擇供應商後即可查看該供應商的未完成進貨商品</p>
            </div>
        </div>
    </div>
}
else if ((IsEditMode && ReceivingItems.Any()) || (!IsEditMode && PendingOrderDetails != null && PendingOrderDetails.Any()))
{
    <div class="card border-0 shadow-sm">
        @* 篩選資訊顯示 *@
        @if (PurchaseOrderId.HasValue && PurchaseOrderId.Value > 0 && !IsEditMode)
        {
            var selectedOrder = PendingOrderDetails.FirstOrDefault(pod => pod.PurchaseOrderId == PurchaseOrderId.Value)?.PurchaseOrder;
            @if (selectedOrder != null)
            {
                <div class="card-header bg-info text-white">
                    <i class="fas fa-filter me-2"></i>
                    <span>正在顯示採購單：<strong>@selectedOrder.PurchaseOrderNumber</strong> 的商品明細</span>
                </div>
            }
        }
        
        @if (FilterProductId.HasValue && FilterProductId.Value > 0 && !IsEditMode)
        {
            var selectedProduct = PendingOrderDetails.FirstOrDefault(pod => pod.ProductId == FilterProductId.Value)?.Product;
            @if (selectedProduct != null)
            {
                <div class="card-header bg-warning text-dark">
                    <i class="fas fa-filter me-2"></i>
                    <span>正在篩選產品：<strong>@selectedProduct.Code - @selectedProduct.Name</strong></span>
                </div>
            }
        }

        <div class="card-body p-0">
            <InteractiveTableComponent TItem="ReceivingItem" 
                                      Items="@ReceivingItems"
                                      ColumnDefinitions="@GetColumnDefinitions()"
                                      IsReadOnly="false"
                                      ShowRowNumbers="false"
                                      EmptyMessage="@EmptyMessage"
                                      ShowTotalRow="true"
                                      TotalRowTemplate="@GetTotalRowTemplate" />
        </div>
        
        <div class="card-footer">
            <div class="d-flex justify-content-end gap-2">
                @if (!IsEditMode)
                {
                    <button class="btn btn-success" @onclick="FillAllOrderQuantities">
                        <i class="fas fa-fill me-1"></i>填入所有待入庫量
                    </button>
                }
                <button class="btn btn-outline-danger" @onclick="ClearAllQuantities">
                    <i class="fas fa-times me-1"></i>清空所有數量
                </button>
            </div>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="empty-state">
                <i class="fas fa-clipboard-list fa-3x mb-3 text-muted"></i>
                @if (IsEditMode)
                {
                    <h5 class="text-muted">此入庫單尚無明細資料</h5>
                    <p class="text-muted">請檢查資料載入狀況或聯繫系統管理員</p>
                }
                else if (PurchaseOrderId.HasValue && PurchaseOrderId.Value > 0)
                {
                    <h5 class="text-muted">該採購單尚無未完成進貨的商品</h5>
                    <p class="text-muted">該採購單的所有商品都已完成進貨，或您可以選擇其他採購單</p>
                }
                else
                {
                    <h5 class="text-muted">尚無未完成進貨的商品</h5>
                    <p class="text-muted">該供應商的所有採購項目都已完成進貨</p>
                }
            </div>
        </div>
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public int? SupplierId { get; set; }
    [Parameter] public int? PurchaseOrderId { get; set; }
    [Parameter] public int? FilterProductId { get; set; }
    [Parameter] public List<PurchaseReceivingDetail> ExistingDetails { get; set; } = new List<PurchaseReceivingDetail>();
    [Parameter] public EventCallback<List<PurchaseReceivingDetail>> OnDetailsChanged { get; set; }
    [Parameter] public bool IsEditMode { get; set; } = false;

    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "入庫明細";
    [Parameter] public string EmptyMessage { get; set; } = "尚無入庫明細";
    
    // ===== 內部狀態 =====
    private List<PurchaseOrderDetail> PendingOrderDetails { get; set; } = new List<PurchaseOrderDetail>();
    private List<ReceivingItem> ReceivingItems { get; set; } = new List<ReceivingItem>();
    private List<Warehouse> Warehouses { get; set; } = new List<Warehouse>();
    private List<WarehouseLocation> AllWarehouseLocations { get; set; } = new List<WarehouseLocation>();
    private int? _previousSupplierId = null;
    private int? _previousPurchaseOrderId = null;
    private int? _previousFilterProductId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // 檢查供應商、採購單或產品篩選是否變更
        if (_previousSupplierId != SupplierId || 
            _previousPurchaseOrderId != PurchaseOrderId ||
            _previousFilterProductId != FilterProductId)
        {
            _previousSupplierId = SupplierId;
            _previousPurchaseOrderId = PurchaseOrderId;
            _previousFilterProductId = FilterProductId;
            await LoadPendingOrderDetailsAsync();
            LoadExistingDetails();
        }
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>();

        // 採購單欄位
        columns.Add(new()
        {
            Title = "採購單",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "14%",
            CustomTemplate = item =>
            {
                var receivingItem = (ReceivingItem)item;
                var orderDetail = receivingItem.PurchaseOrderDetail;
                return @<small class="text-primary fw-bold">@orderDetail.PurchaseOrder.PurchaseOrderNumber</small>;
            }
        });

        // 供應商欄位
        columns.Add(new()
        {
            Title = "供應商",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "18%",
            HideOnMobile = true,
            CustomTemplate = item =>
            {
                var receivingItem = (ReceivingItem)item;
                var orderDetail = receivingItem.PurchaseOrderDetail;
                return @<small class="text-success">@orderDetail.PurchaseOrder.Supplier.CompanyName</small>;
            }
        });

        // 商品欄位
        columns.Add(new()
        {
            Title = "商品",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "12%",
            CustomTemplate = item =>
            {
                var receivingItem = (ReceivingItem)item;
                var orderDetail = receivingItem.PurchaseOrderDetail;
                return @<div class="product-info">
                    <strong>@orderDetail.Product.Code</strong>
                    <br />
                    <small class="text-muted">@orderDetail.Product.Name</small>
                    @if (!string.IsNullOrEmpty(orderDetail.Remarks))
                    {
                        <br />
                        <small class="text-info">
                            <i class="fas fa-comment"></i> @orderDetail.Remarks
                        </small>
                    }
                </div>;
            }
        });

        // 訂購量欄位（唯讀）
        columns.Add(new()
        {
            Title = "訂購量",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "8%",
            CustomTemplate = item =>
            {
                var receivingItem = (ReceivingItem)item;
                var orderDetail = receivingItem.PurchaseOrderDetail;
                return @<input type="number" class="form-control form-control-sm text-end" 
                               value="@orderDetail.OrderQuantity"
                               readonly 
                               style="background-color: #f8f9fa; cursor: not-allowed;" />;
            }
        });

        // 已入庫欄位（唯讀）
        columns.Add(new()
        {
            Title = "已入庫",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "8%",
            CustomTemplate = item =>
            {
                var receivingItem = (ReceivingItem)item;
                var orderDetail = receivingItem.PurchaseOrderDetail;
                var isCompleted = orderDetail.ReceivedQuantity >= orderDetail.OrderQuantity;
                return @<div class="input-group input-group-sm">
                    <input type="number" class="form-control text-end @(isCompleted ? "bg-success text-white" : "")" 
                           value="@orderDetail.ReceivedQuantity"
                           readonly 
                           style="cursor: not-allowed;" />
                </div>;
            }
        });

        // 待入庫欄位（唯讀）
        columns.Add(new()
        {
            Title = "待入庫",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "8%",
            CustomTemplate = item =>
            {
                var receivingItem = (ReceivingItem)item;
                var orderDetail = receivingItem.PurchaseOrderDetail;
                var pendingQuantity = GetPendingQuantity(orderDetail);
                var isCompleted = pendingQuantity <= 0;
                return @<div class="input-group input-group-sm">
                    <input type="number" class="form-control text-end @(isCompleted ? "bg-success text-white" : "bg-warning text-dark")" 
                           value="@pendingQuantity"
                           readonly 
                           style="cursor: not-allowed;" />
                </div>;
            }
        });

        // 本次入庫欄位
        columns.Add(new()
        {
            Title = "本次入庫",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "8%",
            CustomTemplate = item =>
            {
                var receivingItem = (ReceivingItem)item;
                var orderDetail = receivingItem.PurchaseOrderDetail;
                var pendingQuantity = GetPendingQuantity(orderDetail);
                var value = receivingItem.ReceivedQuantity > 0 ? receivingItem.ReceivedQuantity.ToString() : "";
                
                return @<div>
                    <input type="number" class="form-control form-control-sm text-end" 
                           value="@value"
                           @oninput="(e) => OnReceivedQuantityChanged(receivingItem, e.Value?.ToString())"
                           placeholder="0" 
                           min="0" 
                           max="@pendingQuantity"
                           step="1" />
                    @if (receivingItem.ValidationError != null)
                    {
                        <small class="text-danger">@receivingItem.ValidationError</small>
                    }
                    @if (pendingQuantity <= 0)
                    {
                        <small class="text-success">
                            <i class="fas fa-check-circle"></i> 已完成進貨
                        </small>
                    }
                </div>;
            }
        });

        // 倉庫欄位
        columns.Add(new()
        {
            Title = "倉庫",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item =>
            {
                var receivingItem = (ReceivingItem)item;
                var selectedWarehouseId = receivingItem.WarehouseId?.ToString() ?? "";
                
                return @<div>
                    <select class="form-select form-select-sm @(receivingItem.WarehouseValidationError != null ? "is-invalid" : "")" 
                            value="@selectedWarehouseId"
                            @onchange="(e) => OnWarehouseChanged(receivingItem, e.Value?.ToString())">
                        <option value="">請選擇倉庫</option>
                        @foreach (var warehouse in Warehouses)
                        {
                            <option value="@warehouse.Id">@warehouse.Code - @warehouse.Name</option>
                        }
                    </select>
                    @if (receivingItem.WarehouseValidationError != null)
                    {
                        <small class="text-danger">@receivingItem.WarehouseValidationError</small>
                    }
                </div>;
            }
        });

        // 倉庫位置欄位
        columns.Add(new()
        {
            Title = "倉庫位置",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item =>
            {
                var receivingItem = (ReceivingItem)item;
                var selectedLocationId = receivingItem.WarehouseLocationId?.ToString() ?? "";
                var availableLocations = GetAvailableLocations(receivingItem.WarehouseId);
                
                return @<select class="form-select form-select-sm" 
                                value="@selectedLocationId"
                                disabled="@(!receivingItem.WarehouseId.HasValue)"
                                @onchange="(e) => OnWarehouseLocationChanged(receivingItem, e.Value?.ToString())">
                    <option value="">請選擇位置</option>
                    @foreach (var location in availableLocations)
                    {
                        <option value="@location.Id">@location.Code - @location.Name</option>
                    }
                </select>;
            }
        });

        // 單價欄位
        columns.Add(new()
        {
            Title = "單價",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "8%",
            CustomTemplate = item =>
            {
                var receivingItem = (ReceivingItem)item;
                var value = receivingItem.UnitPrice > 0 ? receivingItem.UnitPrice.ToString("F0") : "";
                
                return @<input type="number" class="form-control form-control-sm text-end" 
                               value="@value"
                               @oninput="(e) => OnUnitPriceChanged(receivingItem, e.Value?.ToString())"
                               placeholder="0.00" 
                               min="0" />;
            }
        });

        // 完成進貨欄位
        columns.Add(new()
        {
            Title = "完成",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "5%",
            CustomTemplate = item =>
            {
                var receivingItem = (ReceivingItem)item;
                
                return @<div class="text-center">
                    <div class="form-check form-switch d-flex justify-content-center">
                        <input class="form-check-input" 
                               type="checkbox" 
                               checked="@receivingItem.IsReceivingCompleted"
                               @onclick="() => OnIsReceivingCompletedChanged(receivingItem)"
                               title="手動標記為完成進貨" />
                    </div>
                </div>;
            }
        });

        return columns;
    }

    private RenderFragment<InteractiveColumnDefinition> GetTotalRowTemplate => column => __builder =>
    {
        if (column.Title == "單價")
        {
            <strong class="text-success">總計: @GetTotalAmount().ToString("C")</strong>
        }
    };

    /// <summary>
    /// 載入所有必要資料
    /// </summary>
    private async Task LoadDataAsync()
    {
        try
        {
            await LoadWarehousesAsync();
            await LoadWarehouseLocationsAsync();
            await LoadPendingOrderDetailsAsync();
            LoadExistingDetails();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入資料時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 載入倉庫資料
    /// </summary>
    private async Task LoadWarehousesAsync()
    {
        try
        {
            Warehouses = await WarehouseService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫資料時發生錯誤：{ex.Message}");
            Warehouses = new List<Warehouse>();
        }
    }

    /// <summary>
    /// 載入倉庫位置資料
    /// </summary>
    private async Task LoadWarehouseLocationsAsync()
    {
        try
        {
            AllWarehouseLocations = await WarehouseLocationService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫位置資料時發生錯誤：{ex.Message}");
            AllWarehouseLocations = new List<WarehouseLocation>();
        }
    }

    /// <summary>
    /// 載入供應商的未完成進貨明細
    /// </summary>
    private async Task LoadPendingOrderDetailsAsync()
    {
        try
        {
            if (SupplierId.HasValue && SupplierId.Value > 0)
            {
                if (IsEditMode)
                {
                    // 編輯模式：不載入供應商的全部明細，只基於現有明細建立項目
                    PendingOrderDetails = new List<PurchaseOrderDetail>();
                }
                else
                {
                    // 新增模式：載入供應商的未完成進貨明細
                    PendingOrderDetails = await PurchaseOrderService.GetReceivingDetailsBySupplierAsync(SupplierId.Value, false);
                }
                CreateReceivingItems();
            }
            else
            {
                PendingOrderDetails = new List<PurchaseOrderDetail>();
                ReceivingItems = new List<ReceivingItem>();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入未完成進貨明細時發生錯誤：{ex.Message}");
            PendingOrderDetails = new List<PurchaseOrderDetail>();
            ReceivingItems = new List<ReceivingItem>();
        }
    }

    /// <summary>
    /// 從未完成進貨明細建立入庫項目
    /// </summary>
    private void CreateReceivingItems()
    {
        if (IsEditMode)
        {
            // 編輯模式：基於現有明細建立項目，不需要過濾
            ReceivingItems = new List<ReceivingItem>();
            // 在編輯模式下，項目將在 LoadExistingDetails 中建立
        }
        else
        {
            // 新增模式：從未完成進貨明細建立項目
            var filteredOrderDetails = PendingOrderDetails.AsEnumerable();
            
            // 如果有指定採購單ID，只顯示該採購單的明細
            if (PurchaseOrderId.HasValue && PurchaseOrderId.Value > 0)
            {
                filteredOrderDetails = filteredOrderDetails.Where(od => od.PurchaseOrderId == PurchaseOrderId.Value);
            }
            
            // 如果有指定產品篩選，只顯示該產品的明細
            if (FilterProductId.HasValue && FilterProductId.Value > 0)
            {
                filteredOrderDetails = filteredOrderDetails.Where(od => od.ProductId == FilterProductId.Value);
            }
            
            ReceivingItems = filteredOrderDetails.Select(od => new ReceivingItem
            {
                PurchaseOrderDetail = od,
                ReceivedQuantity = 0,
                UnitPrice = od.UnitPrice,
                WarehouseId = null, // 需要使用者手動選擇
                WarehouseLocationId = null
            }).ToList();
        }
    }

    /// <summary>
    /// 載入現有入庫明細
    /// </summary>
    private void LoadExistingDetails()
    {
        if (ExistingDetails?.Any() != true) return;

        if (IsEditMode)
        {
            // 編輯模式：基於現有明細建立入庫項目
            ReceivingItems = ExistingDetails.Select(existingDetail => new ReceivingItem
            {
                PurchaseOrderDetail = existingDetail.PurchaseOrderDetail,
                ReceivedQuantity = existingDetail.ReceivedQuantity,
                UnitPrice = existingDetail.UnitPrice,
                WarehouseId = existingDetail.WarehouseId,
                WarehouseLocationId = existingDetail.WarehouseLocationId,
                InspectionRemarks = existingDetail.InspectionRemarks,
                BatchNumber = existingDetail.BatchNumber,
                ExpiryDate = existingDetail.ExpiryDate,
                IsReceivingCompleted = existingDetail.IsReceivingCompleted,
                ExistingDetailEntity = existingDetail
            }).ToList();
        }
        else
        {
            // 新增模式：將現有明細套用到項目上
            if (!ReceivingItems.Any()) return;

            foreach (var existingDetail in ExistingDetails)
            {
                var item = ReceivingItems.FirstOrDefault(ri => ri.PurchaseOrderDetail.Id == existingDetail.PurchaseOrderDetailId);
                if (item != null)
                {
                    item.ReceivedQuantity = existingDetail.ReceivedQuantity;
                    item.UnitPrice = existingDetail.UnitPrice;
                    item.WarehouseId = existingDetail.WarehouseId;
                    item.WarehouseLocationId = existingDetail.WarehouseLocationId;
                    item.InspectionRemarks = existingDetail.InspectionRemarks;
                    item.BatchNumber = existingDetail.BatchNumber;
                    item.ExpiryDate = existingDetail.ExpiryDate;
                    item.IsReceivingCompleted = existingDetail.IsReceivingCompleted;
                    item.ExistingDetailEntity = existingDetail;
                }
            }
        }
    }

    // ===== 事件處理 =====

    /// <summary>
    /// 填入所有待進貨數量
    /// </summary>
    private async Task FillAllOrderQuantities()
    {
        foreach (var item in ReceivingItems)
        {
            var pendingQuantity = GetPendingQuantity(item.PurchaseOrderDetail);
            item.ReceivedQuantity = pendingQuantity;
            item.ValidationError = null;
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 清空所有數量
    /// </summary>
    private async Task ClearAllQuantities()
    {
        foreach (var item in ReceivingItems)
        {
            item.ReceivedQuantity = 0;
            item.ValidationError = null;
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 入庫數量變更
    /// </summary>
    private async Task OnReceivedQuantityChanged(ReceivingItem item, string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            item.ReceivedQuantity = 0;
            item.ValidationError = null;
        }
        else if (int.TryParse(value, out int quantity))
        {
            if (quantity < 0)
            {
                item.ReceivedQuantity = 0;
                item.ValidationError = "數量不可為負數";
            }
            else
            {
                var pendingQuantity = GetPendingQuantity(item.PurchaseOrderDetail);
                if (quantity > pendingQuantity)
                {
                    item.ReceivedQuantity = pendingQuantity;
                    item.ValidationError = $"入庫量不可超過待進貨量 ({pendingQuantity})";
                }
                else
                {
                    item.ReceivedQuantity = quantity;
                    item.ValidationError = null;
                }
            }
        }
        else
        {
            // 保持原值，但顯示錯誤
            item.ValidationError = "請輸入有效的數字";
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 單價變更
    /// </summary>
    private async Task OnUnitPriceChanged(ReceivingItem item, string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            item.UnitPrice = 0;
        }
        else if (decimal.TryParse(value, out decimal price))
        {
            if (price >= 0)
            {
                item.UnitPrice = price;
            }
            else
            {
                item.UnitPrice = 0;
            }
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 是否完成進貨狀態變更
    /// </summary>
    private async Task OnIsReceivingCompletedChanged(ReceivingItem item)
    {
        item.IsReceivingCompleted = !item.IsReceivingCompleted;
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 倉庫變更
    /// </summary>
    private async Task OnWarehouseChanged(ReceivingItem item, string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            item.WarehouseId = null;
            item.WarehouseLocationId = null;
            item.WarehouseValidationError = null;
        }
        else if (int.TryParse(value, out int warehouseId))
        {
            // 驗證倉庫ID是否存在於倉庫列表中
            var warehouse = Warehouses.FirstOrDefault(w => w.Id == warehouseId);
            if (warehouse != null)
            {
                item.WarehouseId = warehouseId;
                item.WarehouseLocationId = null; // 清空位置選擇
                item.WarehouseValidationError = null;
            }
            else
            {
                item.WarehouseId = null;
                item.WarehouseLocationId = null;
                item.WarehouseValidationError = "選擇的倉庫不存在";
            }
        }
        else
        {
            item.WarehouseValidationError = "請選擇有效的倉庫";
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 倉庫位置變更
    /// </summary>
    private async Task OnWarehouseLocationChanged(ReceivingItem item, string? value)
    {
        if (string.IsNullOrEmpty(value))
        {
            item.WarehouseLocationId = null;
        }
        else if (int.TryParse(value, out int locationId))
        {
            // 驗證位置ID是否存在於可用位置列表中
            var availableLocations = GetAvailableLocations(item.WarehouseId);
            var location = availableLocations.FirstOrDefault(l => l.Id == locationId);
            if (location != null)
            {
                item.WarehouseLocationId = locationId;
            }
            else
            {
                item.WarehouseLocationId = null;
            }
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 取得指定倉庫的可用位置
    /// </summary>
    private List<WarehouseLocation> GetAvailableLocations(int? warehouseId)
    {
        if (!warehouseId.HasValue)
            return new List<WarehouseLocation>();
            
        return AllWarehouseLocations
            .Where(loc => loc.WarehouseId == warehouseId.Value)
            .OrderBy(loc => loc.Code)
            .ToList();
    }

    // ===== 資料轉換和通知 =====

    /// <summary>
    /// 轉換為入庫明細實體
    /// </summary>
    private List<PurchaseReceivingDetail> ConvertToReceivingDetails()
    {
        var details = new List<PurchaseReceivingDetail>();

        foreach (var item in ReceivingItems.Where(x => (x.ReceivedQuantity > 0 || x.IsReceivingCompleted) && x.WarehouseId.HasValue))
        {
            PurchaseReceivingDetail detail;

            if (item.ExistingDetailEntity != null)
            {
                // 更新現有實體
                detail = item.ExistingDetailEntity;
            }
            else
            {
                // 建立新實體
                detail = new PurchaseReceivingDetail();
            }

            // 設定屬性
            detail.PurchaseOrderDetailId = item.PurchaseOrderDetail.Id;
            detail.ProductId = item.PurchaseOrderDetail.ProductId;
            detail.ReceivedQuantity = item.ReceivedQuantity;
            detail.UnitPrice = item.UnitPrice;
            detail.WarehouseId = item.WarehouseId!.Value; // 確保倉庫ID有值，因為已在 Where 條件中檢查過
            detail.WarehouseLocationId = item.WarehouseLocationId;
            detail.InspectionRemarks = item.InspectionRemarks;
            detail.BatchNumber = item.BatchNumber;
            detail.ExpiryDate = item.ExpiryDate;
            detail.IsReceivingCompleted = item.IsReceivingCompleted;

            details.Add(detail);
        }

        return details;
    }

    /// <summary>
    /// 通知明細變更
    /// </summary>
    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToReceivingDetails();
        await OnDetailsChanged.InvokeAsync(details);
    }

    // ===== 統計方法 =====

    private int GetTotalQuantity()
    {
        return ReceivingItems.Sum(item => item.ReceivedQuantity);
    }

    private decimal GetTotalAmount()
    {
        return ReceivingItems
            .Where(item => item.ReceivedQuantity > 0)
            .Sum(item => item.ReceivedQuantity * item.UnitPrice);
    }

    /// <summary>
    /// 計算待進貨數量
    /// </summary>
    private int GetPendingQuantity(PurchaseOrderDetail orderDetail)
    {
        return orderDetail.OrderQuantity - orderDetail.ReceivedQuantity;
    }

    /// <summary>
    /// 驗證所有入庫明細
    /// </summary>
    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        // 檢查是否有入庫項目
        var potentialItems = ReceivingItems.Where(item => item.ReceivedQuantity > 0 || item.IsReceivingCompleted).ToList();
        if (!potentialItems.Any())
        {
            errors.Add("至少需要一個入庫項目");
        }
        
        // 只驗證有效的入庫項目（有數量或標記完成，且有倉庫）
        var validItems = potentialItems.Where(item => item.WarehouseId.HasValue).ToList();
        
        // 檢查是否有項目缺少倉庫
        var itemsWithoutWarehouse = potentialItems.Where(item => !item.WarehouseId.HasValue).ToList();
        if (itemsWithoutWarehouse.Any())
        {
            foreach (var item in itemsWithoutWarehouse)
            {
                errors.Add($"商品 {item.PurchaseOrderDetail.Product.Code} 必須選擇倉庫");
            }
        }
        
        // 檢查數量合理性和必填欄位
        foreach (var item in validItems)
        {
            var pendingQuantity = GetPendingQuantity(item.PurchaseOrderDetail);
            if (item.ReceivedQuantity > pendingQuantity)
            {
                errors.Add($"商品 {item.PurchaseOrderDetail.Product.Code} 的入庫量超過待進貨量");
            }
            
            if (item.UnitPrice < 0)
            {
                errors.Add($"商品 {item.PurchaseOrderDetail.Product.Code} 的單價不可為負數");
            }
        }
        
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }

    /// <summary>
    /// 入庫項目類別 - 擴展版本
    /// </summary>
    public class ReceivingItem
    {
        public PurchaseOrderDetail PurchaseOrderDetail { get; set; } = null!;
        public int ReceivedQuantity { get; set; } = 0;
        public decimal UnitPrice { get; set; } = 0;
        public int? WarehouseId { get; set; }
        public int? WarehouseLocationId { get; set; }
        public string? InspectionRemarks { get; set; }
        public string? BatchNumber { get; set; }
        public DateTime? ExpiryDate { get; set; }
        public bool IsReceivingCompleted { get; set; } = false;
        public string? ValidationError { get; set; }
        public string? WarehouseValidationError { get; set; }
        public PurchaseReceivingDetail? ExistingDetailEntity { get; set; }
    }
}
