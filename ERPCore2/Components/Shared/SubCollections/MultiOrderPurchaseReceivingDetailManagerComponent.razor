@* 多採購單採購入庫明細管理元件 *@
@using ERPCore2.Components.Shared.Buttons
@inject IPurchaseOrderService PurchaseOrderService
@inject INotificationService NotificationService

@if ((IsEditMode && ReceivingItems.Any()) || (!IsEditMode && PendingOrderDetails != null && PendingOrderDetails.Any()))
{
    <div class="card">
            @if (!SupplierId.HasValue || SupplierId.Value <= 0)
            {
                <div class="text-center text-muted py-5">
                    <i class="fas fa-building fa-3x mb-3"></i>
                    <p class="fs-5">請先選擇供應商</p>
                    <p>選擇供應商後即可查看該供應商的未完成進貨商品</p>
                </div>
            }
            else
            {
                @if (PurchaseOrderId.HasValue && PurchaseOrderId.Value > 0 && !IsEditMode)
                {
                    var selectedOrder = PendingOrderDetails.FirstOrDefault(pod => pod.PurchaseOrderId == PurchaseOrderId.Value)?.PurchaseOrder;
                    @if (selectedOrder != null)
                    {
                        <div class="alert alert-info d-flex align-items-center mb-3">
                            <i class="fas fa-filter me-2"></i>
                            <span>正在顯示採購單：<strong>@selectedOrder.PurchaseOrderNumber</strong> 的商品明細</span>
                        </div>
                    }
                }
                
                @if (FilterProductId.HasValue && FilterProductId.Value > 0 && !IsEditMode)
                {
                    var selectedProduct = PendingOrderDetails.FirstOrDefault(pod => pod.ProductId == FilterProductId.Value)?.Product;
                    @if (selectedProduct != null)
                    {
                        <div class="alert alert-warning d-flex align-items-center mb-3">
                            <i class="fas fa-filter me-2"></i>
                            <span>正在篩選產品：<strong>@selectedProduct.Code - @selectedProduct.Name</strong></span>
                        </div>
                    }
                }
                
                <div class="table-responsive">
                    <table class="table table-striped table-hover rounded overflow-hidden">
                        <thead class="table-dark">
                            <tr>
                                <th width="14%">採購單</th>
                                <th width="12%">供應商</th>
                                <th width="18%">商品</th>
                                <th width="8%">訂購量</th>
                                <th width="8%">已入庫</th>
                                <th width="8%">待入庫</th>
                                <th width="8%">本次入庫</th>
                                <th width="10%">單價</th>
                                <th width="10%">完成進貨</th>
                                <th width="4%">操作</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in ReceivingItems)
                            {
                                var orderDetail = item.PurchaseOrderDetail;
                                
                                <tr>
                                    <td>
                                        <small class="text-primary">@orderDetail.PurchaseOrder.PurchaseOrderNumber</small>
                                    </td>
                                    <td>
                                        <small class="text-success">
                                            @orderDetail.PurchaseOrder.Supplier.CompanyName
                                        </small>
                                    </td>
                                    <td>
                                        <div class="product-info">
                                            <strong>@orderDetail.Product.Code</strong>
                                            <br />
                                            <small class="text-muted">@orderDetail.Product.Name</small>
                                            @if (!string.IsNullOrEmpty(orderDetail.Remarks))
                                            {
                                                <br />
                                                <small class="text-info">
                                                    <i class="fas fa-comment"></i> @orderDetail.Remarks
                                                </small>
                                            }
                                        </div>
                                    </td>
                                    <td class="text-end">
                                        <input type="number" class="form-control form-control-sm text-end" 
                                               value="@orderDetail.OrderQuantity"
                                               readonly />
                                    </td>
                                    <td class="text-end">
                                        <div class="input-group input-group-sm">
                                            <input type="number" class="form-control text-end @(orderDetail.ReceivedQuantity >= orderDetail.OrderQuantity ? "bg-success-subtle" : "")" 
                                                   value="@orderDetail.ReceivedQuantity"
                                                   readonly />
                                            <span class="input-group-text @(orderDetail.ReceivedQuantity >= orderDetail.OrderQuantity ? "bg-success text-white" : "bg-light text-muted")">
                                                <small>已入庫</small>
                                            </span>
                                        </div>
                                    </td>
                                    <td class="text-end">
                                        <div class="input-group input-group-sm">
                                            <input type="number" class="form-control text-end @(GetPendingQuantity(orderDetail) <= 0 ? "bg-success-subtle" : "bg-warning-subtle")" 
                                                   value="@GetPendingQuantity(orderDetail)"
                                                   readonly />
                                            <span class="input-group-text @(GetPendingQuantity(orderDetail) <= 0 ? "bg-success text-white" : "bg-warning text-dark")">
                                                <small>@(GetPendingQuantity(orderDetail) <= 0 ? "完成" : "待入庫")</small>
                                            </span>
                                        </div>
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm text-end" 
                                               value="@(item.ReceivedQuantity == 0 ? "" : item.ReceivedQuantity.ToString())"
                                               @oninput="(e) => OnReceivedQuantityChanged(item, e.Value?.ToString())"
                                               placeholder="0" 
                                               min="0" 
                                               max="@GetPendingQuantity(orderDetail)"
                                               step="1" />
                                        @if (item.ValidationError != null)
                                        {
                                            <small class="text-danger">@item.ValidationError</small>
                                        }
                                        @if (GetPendingQuantity(orderDetail) <= 0)
                                        {
                                            <small class="text-success">
                                                <i class="fas fa-check-circle"></i> 已完成進貨
                                            </small>
                                        }
                                    </td>
                                    <td>
                                        <input type="number" class="form-control form-control-sm text-end" 
                                               @bind="item.UnitPrice"
                                               @oninput="(e) => OnUnitPriceChanged(item, e.Value?.ToString())"
                                               placeholder="0.00" 
                                               min="0" 
                                               step="0.01" />
                                    </td>
                                    <td class="text-center">
                                        <div class="form-check form-switch d-flex justify-content-center">
                                            <input class="form-check-input" 
                                                   type="checkbox" 
                                                   checked="@item.IsReceivingCompleted"
                                                   @onclick="(e) => OnIsReceivingCompletedChanged(item)"
                                                   title="手動標記為完成進貨" />
                                        </div>
                                        @if (item.IsReceivingCompleted)
                                        {
                                            <small class="text-success">
                                                <i class="fas fa-check-circle"></i> 已完成
                                            </small>
                                        }
                                        @if (item.IsReceivingCompleted && item.ReceivedQuantity == 0)
                                        {
                                            <small class="text-info d-block">
                                                <i class="fas fa-info-circle"></i> 標記完成
                                            </small>
                                        }
                                    </td>
                                    <td class="text-center">
                                        <!-- 移除操作可能不需要，先註解掉 -->
                                        @* <button type="button" class="btn btn-sm btn-outline-danger" 
                                                @onclick="() => RemoveItem(item)"
                                                title="移除此項目">
                                            <i class="fas fa-times"></i>
                                        </button> *@
                                    </td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr class="table-info">
                                <th colspan="8">總計</th>
                                <th class="text-center">@GetTotalAmount().ToString("C")</th>
                                <th></th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
                
                
                <div class="d-flex justify-content-end gap-2 p-3">
                    @if (!IsEditMode)
                    {
                        <GenericButtonComponent Variant="ButtonVariant.Success" 
                                               Text="填入所有待入庫量" 
                                               IconClass="fas fa-fill" 
                                               OnClick="FillAllOrderQuantities" />
                    }
                    <GenericButtonComponent Variant="ButtonVariant.Danger" 
                                           Text="清空所有數量" 
                                           IconClass="fas fa-times" 
                                           OnClick="ClearAllQuantities" />
                </div>
            }
    </div>
}
else
{
    <div class="text-center text-muted py-5">
        <i class="fas fa-clipboard-list fa-3x mb-3"></i>
        @if (IsEditMode)
        {
            <p class="fs-5">此入庫單尚無明細資料</p>
            <p>請檢查資料載入狀況或聯繫系統管理員</p>
        }
        else if (PurchaseOrderId.HasValue && PurchaseOrderId.Value > 0)
        {
            <p class="fs-5">該採購單尚無未完成進貨的商品</p>
            <p>該採購單的所有商品都已完成進貨，或您可以選擇其他採購單</p>
        }
        else
        {
            <p class="fs-5">尚無未完成進貨的商品</p>
            <p>該供應商的所有採購項目都已完成進貨</p>
        }
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public int? SupplierId { get; set; }
    [Parameter] public int? PurchaseOrderId { get; set; }
    [Parameter] public int? FilterProductId { get; set; }
    [Parameter] public List<PurchaseReceivingDetail> ExistingDetails { get; set; } = new List<PurchaseReceivingDetail>();
    [Parameter] public EventCallback<List<PurchaseReceivingDetail>> OnDetailsChanged { get; set; }
    [Parameter] public bool IsEditMode { get; set; } = false;

    // ===== 內部狀態 =====
    private List<PurchaseOrderDetail> PendingOrderDetails { get; set; } = new List<PurchaseOrderDetail>();
    private List<ReceivingItem> ReceivingItems { get; set; } = new List<ReceivingItem>();
    private int? _previousSupplierId = null;
    private int? _previousPurchaseOrderId = null;
    private int? _previousFilterProductId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // 檢查供應商、採購單或產品篩選是否變更
        if (_previousSupplierId != SupplierId || 
            _previousPurchaseOrderId != PurchaseOrderId ||
            _previousFilterProductId != FilterProductId)
        {
            _previousSupplierId = SupplierId;
            _previousPurchaseOrderId = PurchaseOrderId;
            _previousFilterProductId = FilterProductId;
            await LoadPendingOrderDetailsAsync();
            LoadExistingDetails();
        }
    }

    /// <summary>
    /// 載入所有必要資料
    /// </summary>
    private async Task LoadDataAsync()
    {
        try
        {
            await LoadPendingOrderDetailsAsync();
            LoadExistingDetails();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入資料時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 載入供應商的未完成進貨明細
    /// </summary>
    private async Task LoadPendingOrderDetailsAsync()
    {
        try
        {
            if (SupplierId.HasValue && SupplierId.Value > 0)
            {
                if (IsEditMode)
                {
                    // 編輯模式：不載入供應商的全部明細，只基於現有明細建立項目
                    PendingOrderDetails = new List<PurchaseOrderDetail>();
                }
                else
                {
                    // 新增模式：載入供應商的未完成進貨明細
                    PendingOrderDetails = await PurchaseOrderService.GetReceivingDetailsBySupplierAsync(SupplierId.Value, false);
                }
                CreateReceivingItems();
            }
            else
            {
                PendingOrderDetails = new List<PurchaseOrderDetail>();
                ReceivingItems = new List<ReceivingItem>();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入未完成進貨明細時發生錯誤：{ex.Message}");
            PendingOrderDetails = new List<PurchaseOrderDetail>();
            ReceivingItems = new List<ReceivingItem>();
        }
    }

    /// <summary>
    /// 從未完成進貨明細建立入庫項目
    /// </summary>
    private void CreateReceivingItems()
    {
        if (IsEditMode)
        {
            // 編輯模式：基於現有明細建立項目，不需要過濾
            ReceivingItems = new List<ReceivingItem>();
            // 在編輯模式下，項目將在 LoadExistingDetails 中建立
        }
        else
        {
            // 新增模式：從未完成進貨明細建立項目
            var filteredOrderDetails = PendingOrderDetails.AsEnumerable();
            
            // 如果有指定採購單ID，只顯示該採購單的明細
            if (PurchaseOrderId.HasValue && PurchaseOrderId.Value > 0)
            {
                filteredOrderDetails = filteredOrderDetails.Where(od => od.PurchaseOrderId == PurchaseOrderId.Value);
            }
            
            // 如果有指定產品篩選，只顯示該產品的明細
            if (FilterProductId.HasValue && FilterProductId.Value > 0)
            {
                filteredOrderDetails = filteredOrderDetails.Where(od => od.ProductId == FilterProductId.Value);
            }
            
            ReceivingItems = filteredOrderDetails.Select(od => new ReceivingItem
            {
                PurchaseOrderDetail = od,
                ReceivedQuantity = 0,
                UnitPrice = od.UnitPrice
            }).ToList();
        }
    }

    /// <summary>
    /// 載入現有入庫明細
    /// </summary>
    private void LoadExistingDetails()
    {
        if (ExistingDetails?.Any() != true) return;

        if (IsEditMode)
        {
            // 編輯模式：基於現有明細建立入庫項目
            ReceivingItems = ExistingDetails.Select(existingDetail => new ReceivingItem
            {
                PurchaseOrderDetail = existingDetail.PurchaseOrderDetail,
                ReceivedQuantity = existingDetail.ReceivedQuantity,
                UnitPrice = existingDetail.UnitPrice,
                InspectionRemarks = existingDetail.InspectionRemarks,
                BatchNumber = existingDetail.BatchNumber,
                ExpiryDate = existingDetail.ExpiryDate,
                IsReceivingCompleted = existingDetail.IsReceivingCompleted,
                ExistingDetailEntity = existingDetail
            }).ToList();
        }
        else
        {
            // 新增模式：將現有明細套用到項目上
            if (!ReceivingItems.Any()) return;

            foreach (var existingDetail in ExistingDetails)
            {
                var item = ReceivingItems.FirstOrDefault(ri => ri.PurchaseOrderDetail.Id == existingDetail.PurchaseOrderDetailId);
                if (item != null)
                {
                    item.ReceivedQuantity = existingDetail.ReceivedQuantity;
                    item.UnitPrice = existingDetail.UnitPrice;
                    item.InspectionRemarks = existingDetail.InspectionRemarks;
                    item.BatchNumber = existingDetail.BatchNumber;
                    item.ExpiryDate = existingDetail.ExpiryDate;
                    item.IsReceivingCompleted = existingDetail.IsReceivingCompleted;
                    item.ExistingDetailEntity = existingDetail;
                }
            }
        }
    }

    // ===== 事件處理 =====

    /// <summary>
    /// 填入所有待進貨數量
    /// </summary>
    private async Task FillAllOrderQuantities()
    {
        foreach (var item in ReceivingItems)
        {
            var pendingQuantity = GetPendingQuantity(item.PurchaseOrderDetail);
            item.ReceivedQuantity = pendingQuantity;
            item.ValidationError = null;
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 清空所有數量
    /// </summary>
    private async Task ClearAllQuantities()
    {
        foreach (var item in ReceivingItems)
        {
            item.ReceivedQuantity = 0;
            item.ValidationError = null;
        }
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 入庫數量變更
    /// </summary>
    private async Task OnReceivedQuantityChanged(ReceivingItem item, string? value)
    {
        if (int.TryParse(value, out int quantity))
        {
            if (quantity < 0)
            {
                item.ReceivedQuantity = 0;
                item.ValidationError = "數量不可為負數";
            }
            else
            {
                var pendingQuantity = GetPendingQuantity(item.PurchaseOrderDetail);
                if (quantity > pendingQuantity)
                {
                    item.ReceivedQuantity = pendingQuantity;
                    item.ValidationError = $"入庫量不可超過待進貨量 ({pendingQuantity})";
                }
                else
                {
                    item.ReceivedQuantity = quantity;
                    item.ValidationError = null;
                }
            }
        }
        else
        {
            item.ReceivedQuantity = 0;
            item.ValidationError = null;
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 單價變更
    /// </summary>
    private async Task OnUnitPriceChanged(ReceivingItem item, string? value)
    {
        if (decimal.TryParse(value, out decimal price) && price >= 0)
        {
            item.UnitPrice = price;
        }
        else
        {
            item.UnitPrice = 0;
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 是否完成進貨狀態變更
    /// </summary>
    private async Task OnIsReceivingCompletedChanged(ReceivingItem item)
    {
        item.IsReceivingCompleted = !item.IsReceivingCompleted;
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    // ===== 資料轉換和通知 =====

    /// <summary>
    /// 轉換為入庫明細實體
    /// </summary>
    private List<PurchaseReceivingDetail> ConvertToReceivingDetails()
    {
        var details = new List<PurchaseReceivingDetail>();

        foreach (var item in ReceivingItems.Where(x => x.ReceivedQuantity > 0 || x.IsReceivingCompleted))
        {
            PurchaseReceivingDetail detail;

            if (item.ExistingDetailEntity != null)
            {
                // 更新現有實體
                detail = item.ExistingDetailEntity;
            }
            else
            {
                // 建立新實體
                detail = new PurchaseReceivingDetail();
            }

            // 設定屬性
            detail.PurchaseOrderDetailId = item.PurchaseOrderDetail.Id;
            detail.ProductId = item.PurchaseOrderDetail.ProductId;
            detail.ReceivedQuantity = item.ReceivedQuantity;
            detail.UnitPrice = item.UnitPrice;
            detail.InspectionRemarks = item.InspectionRemarks;
            detail.BatchNumber = item.BatchNumber;
            detail.ExpiryDate = item.ExpiryDate;
            detail.IsReceivingCompleted = item.IsReceivingCompleted;

            details.Add(detail);
        }

        return details;
    }

    /// <summary>
    /// 通知明細變更
    /// </summary>
    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToReceivingDetails();
        await OnDetailsChanged.InvokeAsync(details);
    }

    // ===== 統計方法 =====

    private int GetTotalQuantity()
    {
        return ReceivingItems.Sum(item => item.ReceivedQuantity);
    }

    private decimal GetTotalAmount()
    {
        return ReceivingItems
            .Where(item => item.ReceivedQuantity > 0)
            .Sum(item => item.ReceivedQuantity * item.UnitPrice);
    }

    /// <summary>
    /// 計算待進貨數量
    /// </summary>
    private int GetPendingQuantity(PurchaseOrderDetail orderDetail)
    {
        return orderDetail.OrderQuantity - orderDetail.ReceivedQuantity;
    }

    /// <summary>
    /// 入庫項目類別 - 擴展版本
    /// </summary>
    public class ReceivingItem
    {
        public PurchaseOrderDetail PurchaseOrderDetail { get; set; } = null!;
        public int ReceivedQuantity { get; set; } = 0;
        public decimal UnitPrice { get; set; } = 0;
        public string? InspectionRemarks { get; set; }
        public string? BatchNumber { get; set; }
        public DateTime? ExpiryDate { get; set; }
        public bool IsReceivingCompleted { get; set; } = false;
        public string? ValidationError { get; set; }
        public PurchaseReceivingDetail? ExistingDetailEntity { get; set; }
    }
}
