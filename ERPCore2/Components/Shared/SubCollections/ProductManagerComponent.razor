
@using Microsoft.EntityFrameworkCore
@using System.Linq.Expressions
@using System.Reflection
@typeparam TMainEntity where TMainEntity : BaseEntity
@typeparam TDetailEntity where TDetailEntity : BaseEntity, new()

    @if (ProductItems != null && ProductItems.Any())
    {
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th width="35%">商品</th>
                        <th width="15%">數量</th>
                        <th width="15%">價格</th>
                        <th width="30%">備註</th>
                        <th width="5%">操作</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ProductItems)
                    {
                        var isEmptyRow = IsEmptyRow(item);
                        <tr class="@(isEmptyRow ? "table-light" : "")">
                            <td>
                                <div class="position-relative">
                                    <input type="text" class="form-control form-control-sm @(isEmptyRow ? "empty-row-input" : "")" 
                                           value="@item.ProductSearch"
                                           @oninput="(e) => OnProductSearchInput(item, e.Value?.ToString())"
                                           @onfocus="() => OnInputFocus(item)"
                                           @onkeydown="(e) => OnKeyDown(item, e)"
                                           placeholder="@(isEmptyRow ? "點擊開始輸入商品..." : "輸入商品編號或名稱...")" />
                                    
                                    @if (item.ShowDropdown && FilteredProducts != null && FilteredProducts.Any())
                                    {
                                        <div class="dropdown-menu show position-absolute w-100" style="z-index: 1000; max-height: 200px; overflow-y: auto;">
                                            @for (int i = 0; i < FilteredProducts.Count; i++)
                                            {
                                                var product = FilteredProducts[i];
                                                var index = i;
                                                <a class="dropdown-item @(item.SelectedIndex == index ? "active" : "")" 
                                                   href="#" 
                                                   @onclick="() => SelectProduct(item, product)" 
                                                   @onclick:preventDefault="true">
                                                    <strong>@product.Code</strong> - @product.Name
                                                </a>
                                            }
                                        </div>
                                    }
                                </div>
                            </td>
                            <td>
                                <input type="number" class="form-control form-control-sm" 
                                       value="@item.Quantity"
                                       @onfocus="() => OnInputFocus(item)"
                                       @oninput="(e) => OnQuantityInput(item, e.Value?.ToString())"
                                       placeholder="@(isEmptyRow ? "0" : "數量")" 
                                       min="0" 
                                       step="1" />
                            </td>
                            <td>
                                <input type="number" class="form-control form-control-sm" 
                                       value="@item.Price"
                                       @onfocus="() => OnInputFocus(item)"
                                       @oninput="(e) => OnPriceInput(item, e.Value?.ToString())"
                                       placeholder="@(isEmptyRow ? "0.00" : "價格")" 
                                       min="0" 
                                       step="0.01" />
                            </td>
                            <td>
                                <input type="text" class="form-control form-control-sm" 
                                       value="@item.Remarks"
                                       @onfocus="() => OnInputFocus(item)"
                                       @oninput="(e) => OnRemarksInput(item, e.Value?.ToString())"
                                       placeholder="@(isEmptyRow ? "選填..." : "備註...")" />
                            </td>
                            <td>
                                <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => RemoveItem(item)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
                <tfoot class="table-secondary">
                    <tr>
                        <th colspan="2">總計</th>
                        <th class="text-end">@GetTotalAmount().ToString("C")</th>
                        <th colspan="2"></th>
                    </tr>
                </tfoot>
            </table>
    }
    else
    {
        <div class="text-center text-muted py-4">
            <i class="fas fa-box-open fa-3x mb-3"></i>
            <p>尚無商品資料，點擊上方按鈕新增商品</p>
        </div>
    }

@code {
    // === 基本參數 ===
    [Parameter] public List<Product> Products { get; set; } = new List<Product>();
    [Parameter] public EventCallback<List<ProductItem>> OnProductItemsChanged { get; set; }
    
    // === 泛型參數 ===
    [Parameter] public TMainEntity? MainEntity { get; set; }
    [Parameter] public List<TDetailEntity> ExistingDetails { get; set; } = new List<TDetailEntity>();
    [Parameter] public EventCallback<List<TDetailEntity>> OnDetailsChanged { get; set; }
    
    // === 欄位映射參數 ===
    [Parameter] public string MainEntityIdPropertyName { get; set; } = string.Empty; // 主檔ID欄位名稱，例如 "PurchaseOrderId"
    [Parameter] public string QuantityPropertyName { get; set; } = "Quantity"; // 數量欄位名稱
    [Parameter] public string UnitPricePropertyName { get; set; } = "UnitPrice"; // 單價欄位名稱
    [Parameter] public string RemarksPropertyName { get; set; } = "Remarks"; // 備註欄位名稱
    [Parameter] public string? UnitIdPropertyName { get; set; } // 單位ID欄位名稱（可選）
    
    // === 顯示標籤參數 ===
    [Parameter] public string QuantityLabel { get; set; } = "數量";
    [Parameter] public string PriceLabel { get; set; } = "單價";
    [Parameter] public string RemarksLabel { get; set; } = "備註";

    private List<ProductItem> ProductItems { get; set; } = new List<ProductItem>();
    private List<Product> FilteredProducts { get; set; } = new List<Product>();

    protected override void OnInitialized()
    {
        // 從現有明細載入資料
        LoadExistingDetails();
        // 初始化時確保有1行空白
        EnsureOneEmptyRow();
    }

    protected override void OnParametersSet()
    {
        // 當參數變更時重新載入
        if (ExistingDetails?.Any() == true)
        {
            LoadExistingDetails(); // 這裡面已經會呼叫 EnsureOneEmptyRow()
        }
        else
        {
            // 如果沒有現有明細，也要確保有空白行
            EnsureOneEmptyRow();
        }
    }

    /// <summary>
    /// 從現有明細資料載入到 ProductItems
    /// </summary>
    private void LoadExistingDetails()
    {
        if (ExistingDetails?.Any() != true) return;

        ProductItems.Clear();
        
        foreach (var detail in ExistingDetails)
        {
            var productId = GetPropertyValue<int>(detail, "ProductId");
            var product = Products.FirstOrDefault(p => p.Id == productId);
            
            if (product != null)
            {
                var item = new ProductItem
                {
                    SelectedProduct = product,
                    ProductSearch = $"{product.Code} - {product.Name}",
                    Quantity = Convert.ToInt32(GetPropertyValue<object>(detail, QuantityPropertyName) ?? 0),
                    Price = Convert.ToDecimal(GetPropertyValue<object>(detail, UnitPricePropertyName) ?? 0m),
                    Remarks = GetPropertyValue<string>(detail, RemarksPropertyName) ?? string.Empty,
                    ExistingDetailEntity = detail
                };
                
                ProductItems.Add(item);
            }
        }
        
        // 載入完成後確保有空白行
        EnsureOneEmptyRow();
    }

    /// <summary>
    /// 轉換 ProductItems 為明細實體列表
    /// </summary>
    private List<TDetailEntity> ConvertToDetailEntities()
    {
        var details = new List<TDetailEntity>();
        
        foreach (var item in ProductItems.Where(x => !IsEmptyRow(x) && x.SelectedProduct != null))
        {
            TDetailEntity detail;
            
            // 如果有現有的明細實體，則更新它
            if (item.ExistingDetailEntity != null)
            {
                detail = item.ExistingDetailEntity;
            }
            else
            {
                detail = new TDetailEntity();
                
                // 設定主檔ID
                if (MainEntity != null && !string.IsNullOrEmpty(MainEntityIdPropertyName))
                {
                    SetPropertyValue(detail, MainEntityIdPropertyName, MainEntity.Id);
                }
                
                // 設定商品ID
                if (item.SelectedProduct != null)
                {
                    SetPropertyValue(detail, "ProductId", item.SelectedProduct.Id);
                }
            }
            
            // 更新數量、單價、備註
            SetPropertyValue(detail, QuantityPropertyName, item.Quantity);
            SetPropertyValue(detail, UnitPricePropertyName, item.Price);
            SetPropertyValue(detail, RemarksPropertyName, item.Remarks);
            
            details.Add(detail);
        }
        
        return details;
    }

    /// <summary>
    /// 通知明細變更
    /// </summary>
    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToDetailEntities();
        await OnDetailsChanged.InvokeAsync(details);
        await NotifyItemsChanged(); // 向下相容
    }

    /// <summary>
    /// 使用反射取得屬性值
    /// </summary>
    private T? GetPropertyValue<T>(object obj, string propertyName)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property == null) return default(T);
        
        var value = property.GetValue(obj);
        if (value == null) return default(T);
        
        if (typeof(T) == typeof(object)) return (T)value;
        
        return (T)Convert.ChangeType(value, typeof(T));
    }

    /// <summary>
    /// 使用反射設定屬性值
    /// </summary>
    private void SetPropertyValue(object obj, string propertyName, object? value)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property != null && property.CanWrite)
        {
            if (value != null && property.PropertyType != value.GetType())
            {
                // 處理型別轉換
                if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    var underlyingType = Nullable.GetUnderlyingType(property.PropertyType);
                    value = Convert.ChangeType(value, underlyingType!);
                }
                else
                {
                    value = Convert.ChangeType(value, property.PropertyType);
                }
            }
            property.SetValue(obj, value);
        }
    }

    private void AddNewRow()
    {
        ProductItems.Add(new ProductItem());
        StateHasChanged();
    }

    private void OnInputFocus(ProductItem item)
    {
        // 只負責顯示下拉選單，新增行的邏輯放在實際輸入時處理
        ShowProductDropdown(item);
    }

    private bool IsEmptyRow(ProductItem item)
    {
        var isEmpty = item.SelectedProduct == null && 
               item.Quantity <= 0 && 
               item.Price <= 0 && 
               string.IsNullOrWhiteSpace(item.Remarks) &&
               string.IsNullOrWhiteSpace(item.ProductSearch);
        
        return isEmpty;
    }

    private void EnsureOneEmptyRow()
    {
        var emptyCount = ProductItems.Count(IsEmptyRow);
        
        if (emptyCount < 1)
        {
            ProductItems.Add(new ProductItem());
        }
        
        StateHasChanged();
    }

    private async Task RemoveItem(ProductItem item)
    {
        ProductItems.Remove(item);
        EnsureOneEmptyRow(); // 刪除後確保還有1行空白
        await NotifyDetailsChanged();
    }

    private void OnProductSearchInput(ProductItem item, string? searchValue)
    {
        // 檢查是否在空行輸入，如果是則新增行
        var wasEmpty = IsEmptyRow(item);
        
        item.ProductSearch = searchValue ?? string.Empty;
        
        if (string.IsNullOrWhiteSpace(searchValue))
        {
            item.ShowDropdown = false;
            item.SelectedIndex = -1;
            FilteredProducts.Clear();
        }
        else
        {
            FilteredProducts = Products
                .Where(p => p.Code?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true ||
                           p.Name?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true)
                .Take(10)
                .ToList();
            
            item.ShowDropdown = FilteredProducts.Any();
            item.SelectedIndex = FilteredProducts.Any() ? 0 : -1; // 預設選中第一項
        }
        
        // 如果原本是空行，現在有輸入了，確保有足夠的空行
        if (wasEmpty && !string.IsNullOrWhiteSpace(searchValue))
        {
            EnsureOneEmptyRow();
        }
        
        StateHasChanged();
    }

    private async Task OnQuantityInput(ProductItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        if (int.TryParse(value, out int quantity) && quantity > 0)
        {
            item.Quantity = quantity;
        }
        else
        {
            item.Quantity = 0;  // 空字串或無效值都設為0
        }
        
        if (wasEmpty && !string.IsNullOrWhiteSpace(value) && int.TryParse(value, out var parsedValue) && parsedValue > 0)
        {
            EnsureOneEmptyRow();
        }
        
        StateHasChanged();
        await NotifyDetailsChanged(); // 通知明細變更
    }

    private async Task OnPriceInput(ProductItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        
        if (decimal.TryParse(value, out decimal price) && price > 0)
        {
            item.Price = price;
        }
        else
        {
            item.Price = 0;  // 空字串或無效值都設為0
        }
        
        if (wasEmpty && !string.IsNullOrWhiteSpace(value) && decimal.TryParse(value, out var parsedValue) && parsedValue > 0)
        {
            EnsureOneEmptyRow();
        }
        
        StateHasChanged();
        await NotifyDetailsChanged(); // 通知明細變更
    }

    private async Task OnRemarksInput(ProductItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        item.Remarks = value ?? string.Empty;
        
        if (wasEmpty && !string.IsNullOrWhiteSpace(value))
        {
            EnsureOneEmptyRow();
        }
        
        StateHasChanged();
        await NotifyDetailsChanged(); // 通知明細變更
    }

    private void ShowProductDropdown(ProductItem item)
    {
        if (!string.IsNullOrWhiteSpace(item.ProductSearch))
        {
            OnProductSearchInput(item, item.ProductSearch);
        }
        else
        {
            item.SelectedIndex = -1;
        }
    }

    private async Task SelectProduct(ProductItem item, Product product)
    {
        item.ProductSearch = $"{product.Code} - {product.Name}";
        item.SelectedProduct = product;
        item.ShowDropdown = false;
        item.SelectedIndex = -1; // 重置選中索引
        
        StateHasChanged();
        await NotifyDetailsChanged();
    }

    private async Task OnKeyDown(ProductItem item, KeyboardEventArgs e)
    {
        if (!item.ShowDropdown || FilteredProducts == null || !FilteredProducts.Any())
            return;

        switch (e.Key)
        {
            case "ArrowDown":
                item.SelectedIndex = Math.Min(item.SelectedIndex + 1, FilteredProducts.Count - 1);
                StateHasChanged();
                break;
                
            case "ArrowUp":
                item.SelectedIndex = Math.Max(item.SelectedIndex - 1, 0);
                StateHasChanged();
                break;
                
            case "Enter":
                if (item.SelectedIndex >= 0 && item.SelectedIndex < FilteredProducts.Count)
                {
                    await SelectProduct(item, FilteredProducts[item.SelectedIndex]);
                }
                break;
                
            case "Escape":
                item.ShowDropdown = false;
                item.SelectedIndex = -1;
                StateHasChanged();
                break;
        }
    }

    private async Task NotifyItemsChanged()
    {
        await OnProductItemsChanged.InvokeAsync(ProductItems);
    }

    private decimal GetTotalAmount()
    {
        return ProductItems
            .Where(item => !IsEmptyRow(item) && item.SelectedProduct != null && item.Quantity > 0)
            .Sum(item => item.Quantity * item.Price);
    }

    public class ProductItem
    {
        public string ProductSearch { get; set; } = string.Empty;
        public Product? SelectedProduct { get; set; }
        public int Quantity { get; set; } = 0;  // 改為0，不是1
        public decimal Price { get; set; } = 0;
        public string Remarks { get; set; } = string.Empty;
        public bool ShowDropdown { get; set; } = false;
        public int SelectedIndex { get; set; } = -1; // 新增：記錄當前選中的索引
        public TDetailEntity? ExistingDetailEntity { get; set; } // 新增：關聯的現有明細實體
    }
}
