@typeparam TAssociationEntity where TAssociationEntity : ERPCore2.Data.BaseEntity, new()
@typeparam TParentEntity where TParentEntity : ERPCore2.Data.BaseEntity
@typeparam TRelatedEntity where TRelatedEntity : ERPCore2.Data.BaseEntity
@using ERPCore2.Data
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.Headers
@using Microsoft.JSInterop

<div class="card mb-4">    <GenericHeaderComponent Title="@Title"
                           Subtitle="@GetSubtitle()"
                           IsCardHeader="true">
        <ActionButtons>
            @if (!IsReadOnly)
            {
                <button class="btn btn-primary" @onclick="ShowAddModal">
                    <i class="bi bi-plus me-1"></i>
                    新增@ItemDisplayName
                </button>
            }
        </ActionButtons>
    </GenericHeaderComponent>
    <div class="card-body">
        @if (Items.Any())
        {
            <div class="table-responsive">
                <table class="table table-sm table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>@RelatedEntityDisplayName</th>
                            @if (ShowAdditionalColumns)
                            {
                                @AdditionalColumnsHeader
                            }
                            <th>狀態</th>
                            @if (!IsReadOnly)
                            {
                                <th width="120">操作</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Items.Count; i++)
                        {
                            var index = i;
                            var item = Items[index];
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        @if (GetIsPrimary(item))
                                        {
                                            <span class="badge bg-primary me-2">主要</span>
                                        }
                                        <span>@GetRelatedEntityDisplayText(item)</span>
                                    </div>
                                </td>                                @if (ShowAdditionalColumns && AdditionalColumnsContent != null)
                                {
                                    @AdditionalColumnsContent(item)
                                }
                                <td>
                                    <span class="badge @(GetIsActive(item) ? "bg-success" : "bg-secondary")">
                                        @(GetIsActive(item) ? "啟用" : "停用")
                                    </span>
                                </td>
                                @if (!IsReadOnly)
                                {
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            @if (!GetIsPrimary(item))
                                            {
                                                <button class="btn btn-outline-primary" 
                                                        @onclick="() => SetPrimaryAsync(index)" 
                                                        title="設為主要">
                                                    <i class="bi bi-star"></i>
                                                </button>
                                            }
                                            <button class="btn btn-outline-danger" 
                                                    @onclick="() => RemoveItemAsync(index)" 
                                                    title="移除">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-4 text-muted">
                <i class="bi @EmptyIcon fs-1 mb-3 d-block"></i>
                <p>尚未關聯任何@ItemDisplayName</p>
                @if (!IsReadOnly)
                {
                    <button class="btn btn-outline-primary" @onclick="ShowAddModal">
                        <i class="bi bi-plus me-1"></i>
                        新增第一個@ItemDisplayName
                    </button>
                }
            </div>
        }
    </div>
</div>

@* 新增關聯 Modal *@
@if (showAddModal)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">新增@ItemDisplayName</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">選擇@RelatedEntityDisplayName</label>
                        <select class="form-select" @bind="selectedRelatedEntityId">
                            <option value="">請選擇@RelatedEntityDisplayName</option>                            @foreach (var option in AvailableRelatedEntities)
                            {
                                <option value="@GetRelatedEntityId(option)">@GetRelatedEntityText(option)</option>
                            }
                        </select>
                    </div>
                    @if (ShowPrimaryOption)
                    {
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="newItemIsPrimary" id="isPrimary">
                                <label class="form-check-label" for="isPrimary">
                                    設為主要@ItemDisplayName
                                </label>
                            </div>
                        </div>
                    }
                    @if (AdditionalModalContent != null)
                    {
                        @AdditionalModalContent
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">取消</button>
                    <button type="button" class="btn btn-primary" @onclick="AddItemAsync" disabled="@string.IsNullOrEmpty(selectedRelatedEntityId)">新增</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public List<TAssociationEntity> Items { get; set; } = new();
    [Parameter] public List<TRelatedEntity> AvailableRelatedEntities { get; set; } = new();
    [Parameter] public int ParentEntityId { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "關聯管理";
    [Parameter] public string Icon { get; set; } = "link-45deg";
    [Parameter] public string ItemDisplayName { get; set; } = "關聯";
    [Parameter] public string RelatedEntityDisplayName { get; set; } = "關聯實體";
    [Parameter] public string EmptyIcon { get; set; } = "bi-link-45deg-slash";
    [Parameter] public bool ShowPrimaryOption { get; set; } = true;
    [Parameter] public bool ShowAdditionalColumns { get; set; } = false;
    
    // ===== 委派參數 - Getter =====
    [Parameter] public Func<TAssociationEntity, bool> GetIsPrimary { get; set; } = item => false;
    [Parameter] public Func<TAssociationEntity, bool> GetIsActive { get; set; } = item => true;    [Parameter] public Func<TAssociationEntity, string> GetRelatedEntityDisplayText { get; set; } = item => "";
    [Parameter] public Func<TRelatedEntity, int> GetRelatedEntityId { get; set; } = entity => entity.Id;
    [Parameter] public Func<TRelatedEntity, string> GetRelatedEntityText { get; set; } = entity => entity.ToString() ?? "";
    
    // ===== 委派參數 - Setter =====
    [Parameter] public Action<TAssociationEntity, bool> SetIsPrimary { get; set; } = (item, isPrimary) => { };
    [Parameter] public Action<TAssociationEntity, int> SetParentId { get; set; } = (item, parentId) => { };
    [Parameter] public Action<TAssociationEntity, int> SetRelatedEntityId { get; set; } = (item, relatedId) => { };
    
    // ===== 自訂內容 =====
    [Parameter] public RenderFragment? AdditionalModalContent { get; set; }
    [Parameter] public RenderFragment? AdditionalColumnsHeader { get; set; }
    [Parameter] public RenderFragment<TAssociationEntity>? AdditionalColumnsContent { get; set; }
    
    // ===== 事件參數 =====
    [Parameter] public EventCallback<List<TAssociationEntity>> ItemsChanged { get; set; }
    [Parameter] public EventCallback<TAssociationEntity> ItemAdded { get; set; }
    [Parameter] public EventCallback<TAssociationEntity> ItemRemoved { get; set; }
    [Parameter] public EventCallback<TAssociationEntity> PrimaryChanged { get; set; }
    [Parameter] public Func<TAssociationEntity, Task<bool>>? OnBeforeAdd { get; set; }
    [Parameter] public Func<TAssociationEntity, Task>? OnAfterAdd { get; set; }
    
    // ===== 內部狀態 =====
    private bool showAddModal = false;
    private string selectedRelatedEntityId = string.Empty;
    private bool newItemIsPrimary = false;
    
    // ===== 內部方法 =====
    
    private string GetSubtitle()
    {
        return $"管理{ItemDisplayName}關係 ({Items.Count} 個)";
    }
    
    private void ShowAddModal()
    {
        if (IsReadOnly) return;
        
        UpdateAvailableOptions();
        selectedRelatedEntityId = string.Empty;
        newItemIsPrimary = false;
        showAddModal = true;
    }
    
    private void CloseAddModal()
    {
        showAddModal = false;
        selectedRelatedEntityId = string.Empty;
        newItemIsPrimary = false;
    }
    
    private void UpdateAvailableOptions()
    {
        // 這個方法可以由父組件覆寫來過濾可用選項
        // 例如移除已經關聯的實體
    }
    
    public async Task AddItemAsync()
    {
        if (IsReadOnly || string.IsNullOrEmpty(selectedRelatedEntityId)) return;
        
        if (!int.TryParse(selectedRelatedEntityId, out var relatedEntityId)) return;
        
        var newItem = new TAssociationEntity();
        SetParentId(newItem, ParentEntityId);
        SetRelatedEntityId(newItem, relatedEntityId);
        SetIsPrimary(newItem, newItemIsPrimary);
        newItem.Status = EntityStatus.Active;
        
        // 執行前置檢查
        if (OnBeforeAdd != null)
        {
            var canAdd = await OnBeforeAdd(newItem);
            if (!canAdd) return;
        }
        
        // 如果設為主要，先將其他項目設為非主要
        if (newItemIsPrimary)
        {
            foreach (var item in Items)
            {
                SetIsPrimary(item, false);
            }
        }
        
        Items.Add(newItem);
        
        // 執行後置處理
        if (OnAfterAdd != null)
        {
            await OnAfterAdd(newItem);
        }
        
        await ItemAdded.InvokeAsync(newItem);
        await ItemsChanged.InvokeAsync(Items);
        
        CloseAddModal();
        StateHasChanged();
    }
    
    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        var removedItem = Items[index];
        var wasPrimary = GetIsPrimary(removedItem);
        
        Items.RemoveAt(index);
        
        // 如果移除的是主要項目且還有其他項目，設定第一個為主要
        if (wasPrimary && Items.Any())
        {
            SetIsPrimary(Items[0], true);
            await PrimaryChanged.InvokeAsync(Items[0]);
        }
        
        await ItemRemoved.InvokeAsync(removedItem);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task SetPrimaryAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        // 清除所有主要標記
        foreach (var item in Items)
        {
            SetIsPrimary(item, false);
        }
        
        // 設定指定的為主要
        SetIsPrimary(Items[index], true);
        
        await PrimaryChanged.InvokeAsync(Items[index]);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public Task<bool> ValidateAsync()
    {
        // 關聯通常不需要特別驗證，可以根據需要自訂
        return Task.FromResult(true);
    }
}
