@* 應收帳款沖款明細管理組件 - 使用 InteractiveTableComponent 來管理沖款明細 *@
@inject IAccountsReceivableSetoffDetailService AccountsReceivableSetoffDetailService
@inject INotificationService NotificationService

<div class="setoff-detail-manager">
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center p-3">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">載入中...</span>
            </div>
        </div>
    }
    else if (Details.Any())
    {
        <div class="mb-3">
            <div class="small">
                @if (IsEditMode)
                {
                    <strong>@($"客戶所有明細 ({Details.Count} 筆)")</strong>
                    <span class="text-muted ms-2">
                        編輯模式 - 已結清: @Details.Count(d => IsItemSettled(d)) 筆，
                        未結清: @Details.Count(d => !IsItemSettled(d)) 筆
                    </span>
                }
                else
                {
                    <strong>@($"客戶未結清明細 ({Details.Count} 筆)")</strong>
                }
            </div>
            @if (SelectedDetails.Any())
            {
                <div class="alert alert-info">
                    已選擇 @SelectedDetails.Count 筆，總沖款金額：@SelectedDetails.Sum(d => d.ThisTimeAmount).ToString("N2")
                </div>
            }
        </div>

        <InteractiveTableComponent TItem="SetoffDetailDto"
                                  Items="@Details"
                                  ColumnDefinitions="@GetColumnDefinitions()"
                                  ShowHeader="true"
                                  ShowRowNumbers="false"
                                  ShowActions="false"
                                  ShowBuiltInActions="false"
                                  IsStriped="true"
                                  IsHoverable="true"
                                  IsBordered="true"
                                  IsReadOnly="false"
                                  EmptyMessage="此客戶沒有未結清的明細項目"
                                  CssClass="setoff-detail-table"
                                  ValidationErrors="@ValidationErrors"
                                  OnValidationFailed="@HandleValidationFailed" />

        @if (SelectedDetails.Any())
        {
            <div class="mt-3">
                <div class="small text-muted">
                    <strong>選中項目摘要：</strong>
                    銷貨訂單：@SelectedDetails.Count(d => d.Type == "SalesOrder") 筆，
                    銷貨退回：@SelectedDetails.Count(d => d.Type == "SalesReturn") 筆，
                    總沖款金額：<span class="text-primary fw-bold">@SelectedDetails.Sum(d => d.ThisTimeAmount).ToString("N2")</span>
                </div>
            </div>
        }
    }
    else if (CustomerId.HasValue && CustomerId > 0)
    {
        <div class="alert alert-info">
            此客戶沒有未結清的明細項目
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            請先選擇客戶以顯示相關明細
        </div>
    }
</div>

@code {
    #region 參數定義
    [Parameter] public int? CustomerId { get; set; }
    [Parameter] public EventCallback<List<SetoffDetailDto>> OnSelectedDetailsChanged { get; set; }
    [Parameter] public EventCallback<decimal> OnTotalAmountChanged { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    [Parameter] public bool IsEditMode { get; set; } = false;
    [Parameter] public int? SetoffId { get; set; }
    #endregion

    #region 私有狀態
    private bool IsLoading { get; set; } = false;
    private List<SetoffDetailDto> Details { get; set; } = new();
    private Dictionary<string, string> ValidationErrors { get; set; } = new();
    
    private List<SetoffDetailDto> SelectedDetails => 
        Details.Where(d => d.ThisTimeAmount > 0).ToList();
    #endregion

    #region 私有方法 - 狀態檢查
    /// <summary>
    /// 檢查項目是否已結清（不可編輯）
    /// </summary>
    private bool IsItemSettled(SetoffDetailDto detail)
    {
        return detail.IsSettled || detail.PendingAmount <= 0;
    }
    
    /// <summary>
    /// 檢查項目是否為當前沖款單的記錄
    /// </summary>
    private bool IsCurrentSetoffRecord(SetoffDetailDto detail)
    {
        return detail.ThisTimeAmount > 0;
    }
    #endregion

    #region 生命周期方法
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (CustomerId.HasValue && CustomerId > 0)
            {
                await LoadDetailsAsync();
            }
            else
            {
                Details.Clear();
                ValidationErrors.Clear();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnParametersSetAsync), GetType(), 
                additionalData: $"載入沖款明細失敗 - CustomerId: {CustomerId}");
        }
    }
    #endregion

    #region 私有方法
    /// <summary>
    /// 載入客戶的未結清明細
    /// </summary>
    private async Task LoadDetailsAsync()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            if (!CustomerId.HasValue || CustomerId.Value <= 0)
            {
                Details.Clear();
                return;
            }

            if (IsEditMode && SetoffId.HasValue)
            {
                // 編輯模式：載入所有相關明細（包括已完成的）
                Details = await AccountsReceivableSetoffDetailService.GetCustomerAllDetailsForEditAsync(CustomerId.Value, SetoffId.Value);
            }
            else
            {
                // 新增模式：只載入未結清明細
                Details = await AccountsReceivableSetoffDetailService.GetCustomerPendingDetailsAsync(CustomerId.Value);
            }
            
            ValidationErrors.Clear();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadDetailsAsync), GetType(), 
                additionalData: $"載入明細資料失敗 - CustomerId: {CustomerId}, IsEditMode: {IsEditMode}, SetoffId: {SetoffId}");
            Details = new List<SetoffDetailDto>();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 取得欄位定義
    /// </summary>
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>
        {
            new InteractiveColumnDefinition
            {
                Title = "單據號碼",
                PropertyName = nameof(SetoffDetailDto.DocumentNumber),
                ColumnType = InteractiveColumnType.Display,
                Width = "150px"
            },
            new InteractiveColumnDefinition
            {
                Title = "單據日期",
                PropertyName = nameof(SetoffDetailDto.DocumentDate),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    return @<span>@detail.DocumentDate.ToString("yyyy-MM-dd")</span>;
                }
            },
            new InteractiveColumnDefinition
            {
                Title = "商品",
                PropertyName = nameof(SetoffDetailDto.ProductName),
                ColumnType = InteractiveColumnType.Display,
                Width = "200px"
            },
            new InteractiveColumnDefinition
            {
                Title = "數量",
                PropertyName = nameof(SetoffDetailDto.Quantity),
                ColumnType = InteractiveColumnType.Custom,
                Width = "100px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    return @<span>@detail.Quantity.ToString("N0")</span>;
                }
            },
            new InteractiveColumnDefinition
            {
                Title = "單價",
                PropertyName = nameof(SetoffDetailDto.UnitPrice),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    return @<span>@detail.UnitPrice.ToString("N0")</span>;
                }
            },
            
            new InteractiveColumnDefinition
            {
                Title = "總金額",
                PropertyName = nameof(SetoffDetailDto.TotalAmount),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    return @<span>@detail.TotalAmount.ToString("N0")</span>;
                }
            },
            new InteractiveColumnDefinition
            {
                Title = "已沖款",
                PropertyName = nameof(SetoffDetailDto.SettledAmount),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    return @<span>@detail.SettledAmount.ToString("N0")</span>;
                }
            },
            new InteractiveColumnDefinition
            {
                Title = "待沖款",
                PropertyName = nameof(SetoffDetailDto.PendingAmount),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end text-warning",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    return @<span class="fw-bold">@detail.PendingAmount.ToString("N0")</span>;
                }
            },
            new InteractiveColumnDefinition
            {
                Title = "本次沖款",
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    var isItemSettled = IsItemSettled(detail);
                    var isCurrentRecord = IsCurrentSetoffRecord(detail);
                    var isFieldReadOnly = IsReadOnly || (IsEditMode && isItemSettled && !isCurrentRecord);
                    
                    var title = isItemSettled && !isCurrentRecord ? "此項目已結清，無法修改" :
                               isCurrentRecord ? "此項目為當前沖款單記錄" : "";
                    
                    // 如果是唯讀狀態，顯示 span
                    if (isFieldReadOnly)
                    {
                        var displayValue = detail.ThisTimeAmount > 0 ? detail.ThisTimeAmount.ToString("N0") : "0";
                        var textClass = isItemSettled ? "text-muted" : "text-dark";
                        var iconHtml = "";
                        
                        if (isItemSettled && !isCurrentRecord)
                        {
                            iconHtml = "<i class=\"fas fa-lock text-muted ms-1\" title=\"已結清\"></i>";
                        }
                        else if (isCurrentRecord)
                        {
                            iconHtml = "<i class=\"fas fa-edit text-primary ms-1\" title=\"當前沖款記錄\"></i>";
                        }
                        
                        return @<div class="position-relative d-flex align-items-center justify-content-end" style="min-height: 31px;">
                            <span class="@textClass" title="@title">@displayValue</span>
                            @if (!string.IsNullOrEmpty(iconHtml))
                            {
                                @((MarkupString)iconHtml)
                            }
                        </div>;
                    }
                    
                    // 可編輯狀態，顯示輸入框
                    var cssClass = isCurrentRecord ? "form-control form-control-sm text-end border-primary" : "form-control form-control-sm text-end";
                    
                    return @<div class="position-relative">
                        <input type="number"
                               class="@cssClass"
                               value="@detail.ThisTimeAmount"
                               title="@title"
                               min="0"
                               max="@detail.PendingAmount"
                               step="1"
                               placeholder=""
                               @oninput="@(async (e) => await HandleAmountChanged((detail, e.Value?.ToString())))" />
                        
                        @if (isCurrentRecord)
                        {
                            <div class="position-absolute text-primary" style="top: 2px; right: 8px; pointer-events: none; font-size: 0.75rem;">
                                <i class="fas fa-edit" title="當前沖款記錄"></i>
                            </div>
                        }
                    </div>;
                }
            }
        };

        return columns;
    }

    /// <summary>
    /// 處理金額變更事件
    /// </summary>
    private async Task HandleAmountChanged((SetoffDetailDto detail, string? value) args)
    {
        try
        {
            if (decimal.TryParse(args.value, out var amount))
            {
                args.detail.ThisTimeAmount = Math.Min(amount, args.detail.PendingAmount);
            }
            else
            {
                args.detail.ThisTimeAmount = 0;
            }
            
            // 驗證所有金額
            ValidateAmounts();
            await NotifySelectionChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleAmountChanged), GetType());
        }
    }

    /// <summary>
    /// 驗證金額
    /// </summary>
    private void ValidateAmounts()
    {
        ValidationErrors.Clear();
        
        foreach (var detail in Details.Where(d => d.ThisTimeAmount > 0))
        {
            var validation = detail.ValidateThisTimeAmount();
            if (!validation.IsValid)
            {
                var key = $"{detail.GetHashCode()}_{nameof(SetoffDetailDto.ThisTimeAmount)}";
                ValidationErrors[key] = validation.ErrorMessage!;
            }
        }
    }

    /// <summary>
    /// 處理驗證失敗事件
    /// </summary>
    private async Task HandleValidationFailed((SetoffDetailDto item, string propertyName, string? errorMessage) args)
    {
        try
        {
            if (!string.IsNullOrEmpty(args.errorMessage))
            {
                await NotificationService.ShowErrorAsync("驗證失敗", args.errorMessage);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleValidationFailed), GetType());
        }
    }

    /// <summary>
    /// 通知選擇變更
    /// </summary>
    private async Task NotifySelectionChanged()
    {
        try
        {
            var selectedDetails = SelectedDetails;
            var totalAmount = selectedDetails.Sum(d => d.ThisTimeAmount);

            if (OnSelectedDetailsChanged.HasDelegate)
            {
                await OnSelectedDetailsChanged.InvokeAsync(selectedDetails);
            }

            if (OnTotalAmountChanged.HasDelegate)
            {
                await OnTotalAmountChanged.InvokeAsync(totalAmount);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(NotifySelectionChanged), GetType());
        }
    }
    #endregion

    #region 公開方法
    /// <summary>
    /// 重新整理資料
    /// </summary>
    public async Task RefreshAsync()
    {
        await LoadDetailsAsync();
    }

    /// <summary>
    /// 清除選擇
    /// </summary>
    public void ClearSelection()
    {
        foreach (var detail in Details)
        {
            detail.ThisTimeAmount = 0;
        }
        ValidationErrors.Clear();
        StateHasChanged();
    }

    /// <summary>
    /// 取得選中的明細項目
    /// </summary>
    /// <returns>選中的明細項目列表</returns>
    public List<SetoffDetailDto> GetSelectedDetails()
    {
        return SelectedDetails;
    }

    /// <summary>
    /// 取得總沖款金額
    /// </summary>
    /// <returns>總沖款金額</returns>
    public decimal GetTotalAmount()
    {
        return SelectedDetails.Sum(d => d.ThisTimeAmount);
    }

    /// <summary>
    /// 驗證選中的項目
    /// </summary>
    /// <returns>驗證結果</returns>
    public (bool IsValid, List<string> Errors) ValidateSelection()
    {
        var errors = new List<string>();
        
        if (!SelectedDetails.Any())
        {
            errors.Add("請至少選擇一筆明細項目");
        }

        foreach (var detail in SelectedDetails)
        {
            var validation = detail.ValidateThisTimeAmount();
            if (!validation.IsValid)
            {
                errors.Add($"{detail.DocumentNumber} - {validation.ErrorMessage}");
            }
        }

        return (errors.Count == 0, errors);
    }
    #endregion
}