@* 採購入庫明細管理元件 *@
@inject IPurchaseOrderService PurchaseOrderService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime

@if (OrderDetails != null && OrderDetails.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    @if (!PurchaseOrderId.HasValue || PurchaseOrderId.Value <= 0)
                    {
                        <th width="100%">請先選擇採購單後再處理入庫商品</th>
                    }
                    else
                    {
                        <th width="20%">商品資訊</th>
                        <th width="12%">訂購量</th>
                        <th width="12%">已入庫量</th>
                        <th width="12%">待入庫量</th>
                        <th width="12%">本次入庫量</th>
                        <th width="20%">單價</th>
                        <th width="12%">操作</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ReceivingItems)
                {
                    var orderDetail = item.PurchaseOrderDetail;
                    
                    <tr>
                        @if (!PurchaseOrderId.HasValue || PurchaseOrderId.Value <= 0)
                        {
                            <td class="text-center py-4" colspan="7">
                                <div class="order-warning">
                                    <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                                    <span class="text-muted">請先選擇採購單...</span>
                                </div>
                            </td>
                        }
                        else
                        {
                            <td>
                                <div class="product-info">
                                    <strong>@orderDetail.Product.Code</strong>
                                    <br />
                                    <small class="text-muted">@orderDetail.Product.Name</small>
                                    @if (!string.IsNullOrEmpty(orderDetail.DetailRemarks))
                                    {
                                        <br />
                                        <small class="text-info">
                                            <i class="fas fa-comment"></i> @orderDetail.DetailRemarks
                                        </small>
                                    }
                                </div>
                            </td>
                            <td class="text-end">
                                <input type="number" class="form-control form-control-sm text-end" 
                                       value="@orderDetail.OrderQuantity"
                                       readonly 
                                       @onfocus="SimulateTabKey" />
                            </td>
                            <td class="text-end">
                                <div class="input-group input-group-sm">
                                    <input type="number" class="form-control text-end @(orderDetail.ReceivedQuantity >= orderDetail.OrderQuantity ? "bg-success-subtle" : "")" 
                                           value="@orderDetail.ReceivedQuantity"
                                           readonly 
                                           @onfocus="SimulateTabKey" />
                                    <span class="input-group-text @(orderDetail.ReceivedQuantity >= orderDetail.OrderQuantity ? "bg-success text-white" : "bg-light text-muted")">
                                        <small>已入庫</small>
                                    </span>
                                </div>
                            </td>
                            <td class="text-end">
                                <div class="input-group input-group-sm">
                                    <input type="number" class="form-control text-end @(GetPendingQuantity(orderDetail) <= 0 ? "bg-success-subtle" : "bg-warning-subtle")" 
                                           value="@GetPendingQuantity(orderDetail)"
                                           readonly 
                                           @onfocus="SimulateTabKey" />
                                    <span class="input-group-text @(GetPendingQuantity(orderDetail) <= 0 ? "bg-success text-white" : "bg-warning text-dark")">
                                        <small>@(GetPendingQuantity(orderDetail) <= 0 ? "完成" : "待入庫")</small>
                                    </span>
                                </div>
                            </td>
                            <td>
                                <input type="number" class="form-control form-control-sm text-end" 
                                       value="@(item.ReceivedQuantity == 0 ? "" : item.ReceivedQuantity.ToString())"
                                       @oninput="(e) => OnReceivedQuantityChanged(item, e.Value?.ToString())"
                                       placeholder="請輸入入庫量" 
                                       min="0" 
                                       max="@GetPendingQuantity(item.PurchaseOrderDetail)"
                                       step="1" />
                                @if (item.ValidationError != null)
                                {
                                    <small class="text-danger">@item.ValidationError</small>
                                }
                                @if (GetPendingQuantity(item.PurchaseOrderDetail) <= 0)
                                {
                                    <small class="text-success">
                                        <i class="fas fa-check-circle"></i> 此商品已完成進貨
                                    </small>
                                }
                            </td>
                            <td>
                                <input type="number" class="form-control form-control-sm text-end" 
                                       @bind="item.UnitPrice"
                                       @oninput="(e) => OnUnitPriceChanged(item, e.Value?.ToString())"
                                       @onfocus="SimulateTabKey"
                                       placeholder="0.00" 
                                       min="0" 
                                       step="0.01" />
                            </td>
                            <td>
                                <button type="button" 
                                        class="btn btn-outline-danger btn-sm me-1" 
                                        @onclick="() => DeleteItem(item)"
                                        title="刪除項目">
                                    <i class="fas fa-trash"></i>
                                </button>
                                <button type="button" 
                                        class="btn btn-outline-info btn-sm" 
                                        @onclick="() => ShowDetailModal(item)"
                                        title="詳細設定">
                                    <i class="fas fa-cog"></i>
                                </button>
                            </td>
                        }
                    </tr>
                }
            </tbody>
            @if (PurchaseOrderId.HasValue && PurchaseOrderId.Value > 0)
            {
                <tfoot>
                    <tr class="total-row">
                        <th colspan="5">總計</th>
                        <th class="text-center total-amount">@GetTotalAmount().ToString("C")</th>
                        <th colspan="1"></th>
                    </tr>
                </tfoot>
            }
        </table>
    </div>
    

}
else
{
    <div class="text-center text-muted py-5">
        <i class="fas fa-clipboard-list fa-3x mb-3"></i>
        <p class="fs-5">尚無採購單明細資料</p>
        <p>請先選擇有效的採購單</p>
    </div>
}

@* 詳細設定模態視窗 *@
@if (ShowDetailModalVisible && CurrentDetailItem != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-cog"></i> 商品入庫詳細設定
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseDetailModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-12">
                            <h6 class="text-primary">
                                <i class="fas fa-box"></i> 
                                @CurrentDetailItem.PurchaseOrderDetail.Product.Code - @CurrentDetailItem.PurchaseOrderDetail.Product.Name
                            </h6>
                            <div class="row">
                                <div class="col-md-3">
                                    <small class="text-muted">訂購量：</small>
                                    <span class="fw-bold">@CurrentDetailItem.PurchaseOrderDetail.OrderQuantity</span>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">已入庫量：</small>
                                    <span class="fw-bold">@CurrentDetailItem.PurchaseOrderDetail.ReceivedQuantity</span>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">待入庫量：</small>
                                    <span class="fw-bold text-@(GetPendingQuantity(CurrentDetailItem.PurchaseOrderDetail) <= 0 ? "success" : "info")">
                                        @GetPendingQuantity(CurrentDetailItem.PurchaseOrderDetail)
                                    </span>
                                </div>
                                <div class="col-md-3">
                                    <small class="text-muted">本次入庫：</small>
                                    <span class="fw-bold text-primary">@CurrentDetailItem.ReceivedQuantity</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">批號</label>
                                <input type="text" class="form-control" 
                                       @bind="CurrentDetailItem.BatchNumber"
                                       placeholder="輸入批號..." />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">到期日期</label>
                                <input type="date" class="form-control" 
                                       @bind="CurrentDetailItem.ExpiryDate" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-12">
                            <div class="mb-3">
                                <label class="form-label">驗收備註</label>
                                <textarea class="form-control" rows="2" 
                                          @bind="CurrentDetailItem.InspectionRemarks"
                                          placeholder="輸入驗收相關備註..."></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDetailModal">
                        <i class="fas fa-times"></i> 取消
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="SaveDetailChanges">
                        <i class="fas fa-save"></i> 儲存
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public int? PurchaseOrderId { get; set; }
    [Parameter] public List<PurchaseReceivingDetail> ExistingDetails { get; set; } = new List<PurchaseReceivingDetail>();
    [Parameter] public EventCallback<List<PurchaseReceivingDetail>> OnDetailsChanged { get; set; }

    // ===== 內部狀態 =====
    private List<PurchaseOrderDetail> OrderDetails { get; set; } = new List<PurchaseOrderDetail>();
    private List<ReceivingItem> ReceivingItems { get; set; } = new List<ReceivingItem>();
    private int? _previousPurchaseOrderId = null;

    // ===== 模態視窗狀態 =====
    private bool ShowDetailModalVisible { get; set; } = false;
    private ReceivingItem? CurrentDetailItem { get; set; } = null;

    /// <summary>
    /// 模擬按下 Tab 鍵，用於自動跳過唯讀欄位
    /// </summary>
    private async Task SimulateTabKey()
    {
        try
        {
            // 使用 JavaScript 來模擬 Tab 鍵，將 focus 移到下一個可編輯的元素
            await JSRuntime.InvokeVoidAsync("eval", @"
                setTimeout(() => {
                    const focusableSelector = 'input:not([readonly]):not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled])';
                    const focusableElements = Array.from(document.querySelectorAll(focusableSelector));
                    const currentElement = document.activeElement;
                    const currentIndex = focusableElements.indexOf(currentElement);
                    
                    if (currentIndex > -1 && currentIndex < focusableElements.length - 1) {
                        focusableElements[currentIndex + 1].focus();
                    } else if (focusableElements.length > 0) {
                        focusableElements[0].focus();
                    }
                }, 10);
            ");
        }
        catch (Exception)
        {
            // 如果 JavaScript 執行失敗，忽略錯誤
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // 檢查採購單是否變更
        if (_previousPurchaseOrderId != PurchaseOrderId)
        {
            _previousPurchaseOrderId = PurchaseOrderId;
            await LoadPurchaseOrderDetailsAsync();
            LoadExistingDetails();
        }
    }

    /// <summary>
    /// 載入所有必要資料
    /// </summary>
    private async Task LoadDataAsync()
    {
        try
        {
            // 載入採購單明細
            await LoadPurchaseOrderDetailsAsync();
            LoadExistingDetails();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入資料時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 載入採購單明細
    /// </summary>
    private async Task LoadPurchaseOrderDetailsAsync()
    {
        try
        {
            if (PurchaseOrderId.HasValue && PurchaseOrderId.Value > 0)
            {
                OrderDetails = await PurchaseOrderService.GetOrderDetailsAsync(PurchaseOrderId.Value);
                CreateReceivingItems();
            }
            else
            {
                OrderDetails = new List<PurchaseOrderDetail>();
                ReceivingItems = new List<ReceivingItem>();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入採購單明細時發生錯誤：{ex.Message}");
            OrderDetails = new List<PurchaseOrderDetail>();
            ReceivingItems = new List<ReceivingItem>();
        }
    }

    /// <summary>
    /// 從採購單明細建立入庫項目
    /// </summary>
    private void CreateReceivingItems()
    {
        ReceivingItems = OrderDetails.Select(od => new ReceivingItem
        {
            PurchaseOrderDetail = od,
            ReceivedQuantity = 0,
            UnitPrice = od.UnitPrice
        }).ToList();
    }

    /// <summary>
    /// 載入現有入庫明細
    /// </summary>
    private void LoadExistingDetails()
    {
        if (ExistingDetails?.Any() != true || !ReceivingItems.Any()) return;

        foreach (var existingDetail in ExistingDetails)
        {
            var item = ReceivingItems.FirstOrDefault(ri => ri.PurchaseOrderDetail.Id == existingDetail.PurchaseOrderDetailId);
            if (item != null)
            {
                item.ReceivedQuantity = existingDetail.ReceivedQuantity;
                item.UnitPrice = existingDetail.UnitPrice;
                item.InspectionRemarks = existingDetail.InspectionRemarks;
                item.BatchNumber = existingDetail.BatchNumber;
                item.ExpiryDate = existingDetail.ExpiryDate;
                item.ExistingDetailEntity = existingDetail;
            }
        }
    }

    // ===== 事件處理 =====
    // ===== 事件處理 =====

    /// <summary>
    /// 入庫數量變更
    /// </summary>
    private async Task OnReceivedQuantityChanged(ReceivingItem item, string? value)
    {
        if (int.TryParse(value, out int quantity))
        {
            if (quantity < 0)
            {
                item.ReceivedQuantity = 0;
                item.ValidationError = "數量不可為負數";
            }
            else
            {
                var pendingQuantity = GetPendingQuantity(item.PurchaseOrderDetail);
                if (quantity > pendingQuantity)
                {
                    item.ReceivedQuantity = pendingQuantity;
                    item.ValidationError = $"入庫量不可超過待進貨量 ({pendingQuantity})";
                }
                else
                {
                    item.ReceivedQuantity = quantity;
                    item.ValidationError = null;
                }
            }
        }
        else
        {
            item.ReceivedQuantity = 0;
            item.ValidationError = null;
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 單價變更
    /// </summary>
    private async Task OnUnitPriceChanged(ReceivingItem item, string? value)
    {
        if (decimal.TryParse(value, out decimal price) && price >= 0)
        {
            item.UnitPrice = price;
        }
        else
        {
            item.UnitPrice = 0;
        }

        await NotifyDetailsChanged();
        StateHasChanged();
    }

    // ===== 批次操作 =====

    /// <summary>
    /// 刪除項目
    /// </summary>
    private async Task DeleteItem(ReceivingItem item)
    {
        item.ReceivedQuantity = 0;
        item.UnitPrice = item.PurchaseOrderDetail.UnitPrice; // 重設為原始單價
        item.InspectionRemarks = null;
        item.BatchNumber = null;
        item.ExpiryDate = null;
        item.ValidationError = null;
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    // ===== 模態視窗相關方法 =====

    /// <summary>
    /// 顯示詳細設定模態視窗
    /// </summary>
    private void ShowDetailModal(ReceivingItem item)
    {
        CurrentDetailItem = item;
        ShowDetailModalVisible = true;
        StateHasChanged();
    }

    /// <summary>
    /// 關閉詳細設定模態視窗
    /// </summary>
    private void CloseDetailModal()
    {
        ShowDetailModalVisible = false;
        CurrentDetailItem = null;
        StateHasChanged();
    }

    /// <summary>
    /// 儲存詳細設定的變更
    /// </summary>
    private async Task SaveDetailChanges()
    {
        await NotifyDetailsChanged();
        CloseDetailModal();
    }

    // ===== 資料轉換和通知 =====

    /// <summary>
    /// 轉換為入庫明細實體
    /// </summary>
    private List<PurchaseReceivingDetail> ConvertToReceivingDetails()
    {
        var details = new List<PurchaseReceivingDetail>();

        foreach (var item in ReceivingItems.Where(x => x.ReceivedQuantity > 0))
        {
            PurchaseReceivingDetail detail;

            if (item.ExistingDetailEntity != null)
            {
                // 更新現有實體
                detail = item.ExistingDetailEntity;
            }
            else
            {
                // 建立新實體
                detail = new PurchaseReceivingDetail();
            }

            // 設定屬性
            detail.PurchaseOrderDetailId = item.PurchaseOrderDetail.Id;
            detail.ProductId = item.PurchaseOrderDetail.ProductId;
            detail.ReceivedQuantity = item.ReceivedQuantity;
            detail.UnitPrice = item.UnitPrice;
            detail.InspectionRemarks = item.InspectionRemarks;
            detail.BatchNumber = item.BatchNumber;
            detail.ExpiryDate = item.ExpiryDate;

            details.Add(detail);
        }

        return details;
    }

    /// <summary>
    /// 通知明細變更
    /// </summary>
    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToReceivingDetails();
        await OnDetailsChanged.InvokeAsync(details);
    }

    // ===== 統計方法 =====

    private decimal GetTotalAmount()
    {
        return ReceivingItems
            .Where(item => item.ReceivedQuantity > 0)
            .Sum(item => item.ReceivedQuantity * item.UnitPrice);
    }

    /// <summary>
    /// 計算待進貨數量
    /// </summary>
    private int GetPendingQuantity(PurchaseOrderDetail orderDetail)
    {
        return orderDetail.OrderQuantity - orderDetail.ReceivedQuantity;
    }

    /// <summary>
    /// 入庫項目類別
    /// </summary>
    public class ReceivingItem
    {
        public PurchaseOrderDetail PurchaseOrderDetail { get; set; } = null!;
        public int ReceivedQuantity { get; set; } = 0;
        public decimal UnitPrice { get; set; } = 0;
        public string? InspectionRemarks { get; set; }
        public string? BatchNumber { get; set; }
        public DateTime? ExpiryDate { get; set; }
        public string? ValidationError { get; set; }
        public PurchaseReceivingDetail? ExistingDetailEntity { get; set; }
    }
}
