@* 採購入庫明細管理組件 - 使用 InteractiveTableComponent 統一UI 並整合自動空行功能 *@

@inject IProductService ProductService
@inject IPurchaseOrderService PurchaseOrderService
@inject IPurchaseReceivingDetailService PurchaseReceivingDetailService
@inject IPurchaseReturnDetailService PurchaseReturnDetailService
@inject INotificationService NotificationService

@typeparam TMainEntity where TMainEntity : BaseEntity
@typeparam TDetailEntity where TDetailEntity : BaseEntity, new()

@if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="supplier-warning">
                <p class="text-muted">選擇廠商後即可查看該廠商的入庫商品</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <InteractiveTableComponent TItem="ReceivingItem" 
                                      Items="@ReceivingItems"
                                      ColumnDefinitions="@GetColumnDefinitions()"
                                      IsReadOnly="@IsReadOnly"
                                      ShowRowNumbers="false"
                                      EmptyMessage="@EmptyMessage"
                                      ShowBuiltInActions="true"
                                      ShowBuiltInDeleteButton="true"
                                      OnItemDelete="@HandleItemDelete"
                                      ShowTotalRow="true"
                                      TotalRowTemplate="@GetTotalRowTemplate" />
        </div>

        <div class="card-footer">
            <div class="d-flex justify-content-between">
                <div>
                    <GenericButtonComponent Text="載入所有未入庫"
                                          Variant="ButtonVariant.Info"
                                          OnClick="LoadAllUnreceivedItems"
                                          IsDisabled="@(!CanLoadAllUnreceived)" />
                </div>
                <div class="d-flex gap-2">
                    @* 統一倉庫下拉選單 *@
                    <div class="dropdown">
                        <GenericButtonComponent Text="統一倉庫"
                                              Variant="ButtonVariant.Warning"
                                              IconClass="fas fa-warehouse"
                                              IsDisabled="@(ReceivingItems.Count == 0 || IsReadOnly || !ReceivingItems.Any(x => !IsEmptyRow(x)))"
                                              AdditionalAttributes="@(new Dictionary<string, object> 
                                              { 
                                                  { "data-bs-toggle", "dropdown" },
                                                  { "aria-expanded", "false" }
                                              })" />
                        <ul class="dropdown-menu">
                            <li><h6 class="dropdown-header">選擇要統一設定的倉庫</h6></li>
                            @if (Warehouses.Any())
                            {
                                @foreach (var warehouse in Warehouses)
                                {
                                    <li>
                                        <a class="dropdown-item" href="#" 
                                           @onclick="() => ApplyUnifyWarehouse(warehouse.Id)" 
                                           @onclick:preventDefault="true">
                                            <i class="fas fa-warehouse me-2"></i>@warehouse.Name
                                        </a>
                                    </li>
                                }
                            }
                            else
                            {
                                <li><span class="dropdown-item-text text-muted">沒有可用的倉庫</span></li>
                            }
                        </ul>
                    </div>
                
                    <GenericButtonComponent Text="進貨量全填"
                                          Variant="ButtonVariant.Success"
                                          OnClick="FillAllQuantities" />
                    <GenericButtonComponent Text="進貨量清空"
                                          Variant="ButtonVariant.Danger"
                                          OnClick="ClearAllQuantities" />
                    <GenericButtonComponent Text="清除明細"
                                          Variant="ButtonVariant.Info"
                                          OnClick="ClearAllDetails" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public List<Product> Products { get; set; } = new List<Product>();
    [Parameter] public EventCallback<List<ReceivingItem>> OnReceivingItemsChanged { get; set; }
    
    // ===== 供應商過濾參數 =====
    [Parameter] public int? SelectedSupplierId { get; set; }
    
    // ===== 篩選參數 =====
    [Parameter] public int? SelectedPurchaseOrderId { get; set; }
    [Parameter] public int? FilterProductId { get; set; }
    
    // ===== 泛型參數 =====
    [Parameter] public TMainEntity? MainEntity { get; set; }
    [Parameter] public List<TDetailEntity> ExistingDetails { get; set; } = new List<TDetailEntity>();
    [Parameter] public EventCallback<List<TDetailEntity>> OnDetailsChanged { get; set; }
    [Parameter] public EventCallback<List<int>> OnDeletedDetailsChanged { get; set; }
    [Parameter] public EventCallback<ReceivingItem> OnItemRemoved { get; set; }
    
    // ===== 欄位映射參數 =====
    [Parameter] public string MainEntityIdPropertyName { get; set; } = string.Empty;
    [Parameter] public string QuantityPropertyName { get; set; } = "ReceivedQuantity";
    [Parameter] public string UnitPricePropertyName { get; set; } = "UnitPrice";
    [Parameter] public string RemarksPropertyName { get; set; } = "Remarks";
    [Parameter] public string? UnitIdPropertyName { get; set; }
    [Parameter] public string? WarehouseIdPropertyName { get; set; }
    [Parameter] public string? WarehouseLocationIdPropertyName { get; set; }
    [Parameter] public string? PurchaseOrderDetailIdPropertyName { get; set; }

    // ===== 顯示控制參數 =====
    [Parameter] public bool ShowWarehouse { get; set; } = true;
    [Parameter] public bool ShowWarehouseLocation { get; set; } = true;
    [Parameter] public bool ShowPurchaseOrderReference { get; set; } = false;
    
    // ===== 顯示標籤參數 =====
    [Parameter] public string OrderQuantityLabel { get; set; } = "採購數量";
    [Parameter] public string ReceivedQuantityLabel { get; set; } = "入庫數量";
    [Parameter] public string PriceLabel { get; set; } = "單價";
    [Parameter] public string RemarksLabel { get; set; } = "備註";
    [Parameter] public string WarehouseLabel { get; set; } = "倉庫";
    [Parameter] public string WarehouseLocationLabel { get; set; } = "庫位";
    [Parameter] public string PurchaseOrderLabel { get; set; } = "採購單參考";
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "入庫明細";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "warehouse";
    [Parameter] public string ItemDisplayName { get; set; } = "商品";
    [Parameter] public string EmptyIcon { get; set; } = "box-open";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增入庫商品";
    
    // ===== 唯讀模式參數 =====
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 下拉選項參數 =====
    [Parameter] public List<Warehouse> Warehouses { get; set; } = new List<Warehouse>();
    [Parameter] public List<WarehouseLocation> WarehouseLocations { get; set; } = new List<WarehouseLocation>();

    private List<ReceivingItem> ReceivingItems { get; set; } = new List<ReceivingItem>();
    private List<Product> AvailableProducts { get; set; } = new List<Product>();
    private List<PurchaseOrderDetail> AvailablePurchaseDetails { get; set; } = new List<PurchaseOrderDetail>();
    private int? _previousSelectedSupplierId = null;
    private int? _previousSelectedPurchaseOrderId = null;
    private int? _previousFilterProductId = null;
    private List<int> _deletedDetailIds { get; set; } = new List<int>();
    
    // ===== 退貨數量管理 =====
    private Dictionary<int, int> _returnedQuantities = new(); // Key: PurchaseReceivingDetailId, Value: 已退貨數量

    // ===== 計算屬性 =====
    private bool CanLoadAllUnreceived => 
        SelectedSupplierId.HasValue && 
        SelectedSupplierId.Value > 0 && 
        GetAvailablePurchaseDetails().Any();

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableProductsAsync();
        await LoadExistingDetailsAsync();
        EnsureOneEmptyRow();
    }

    // ===== 退貨數量管理方法 =====
    
    /// <summary>
    /// 載入所有進貨明細的退貨數量
    /// </summary>
    private async Task LoadReturnedQuantitiesAsync()
    {
        _returnedQuantities.Clear();
        
        // 先複製要處理的項目到列表中，避免在迭代時修改集合
        var itemsToProcess = ReceivingItems
            .Where(x => x.ExistingDetailEntity != null)
            .ToList();
        
        foreach (var item in itemsToProcess)
        {
            if (item.ExistingDetailEntity is PurchaseReceivingDetail detail && detail.Id > 0)
            {
                try
                {
                    var returnedQty = await PurchaseReturnDetailService.GetReturnedQuantityByReceivingDetailAsync(detail.Id);
                    if (returnedQty > 0)
                    {
                        _returnedQuantities[detail.Id] = returnedQty;
                    }
                }
                catch (Exception ex)
                {
                    await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadReturnedQuantitiesAsync), GetType());
                }
            }
        }
    }
    
    /// <summary>
    /// 檢查指定的進貨明細項目是否有退貨記錄
    /// </summary>
    private bool HasReturnRecord(ReceivingItem item)
    {
        if (item.ExistingDetailEntity is PurchaseReceivingDetail detail && detail.Id > 0)
        {
            return _returnedQuantities.ContainsKey(detail.Id);
        }
        return false;
    }
    
    /// <summary>
    /// 取得指定進貨明細項目的已退貨數量
    /// </summary>
    private int GetReturnedQuantity(ReceivingItem item)
    {
        if (item.ExistingDetailEntity is PurchaseReceivingDetail detail && detail.Id > 0)
        {
            return _returnedQuantities.GetValueOrDefault(detail.Id, 0);
        }
        return 0;
    }

    private void FillAllQuantities()
    {
        foreach (var item in ReceivingItems)
        {
            if (item.SelectedPurchaseDetail != null)
            {
                item.ReceivedQuantity = item.OrderQuantity;
            }
        }
        
        _ = NotifyDetailsChanged();
    }

    private async Task ClearAllQuantities()
    {
        foreach (var item in ReceivingItems)
        {
            item.ReceivedQuantity = 0;
        }
        
        await NotifyDetailsChanged();
    }

    private async Task ClearAllDetails()
    {
        // 通知父組件所有項目即將被移除
        if (OnItemRemoved.HasDelegate)
        {
            foreach (var item in ReceivingItems.Where(item => !IsEmptyRow(item)))
            {
                await OnItemRemoved.InvokeAsync(item);
            }
        }
        
        // 記錄所有現有明細的 ID 以便刪除
        foreach (var item in ReceivingItems.Where(item => item.ExistingDetailEntity != null))
        {
            var entityId = GetExistingDetailId(item.ExistingDetailEntity!);
            if (entityId > 0)
            {
                _deletedDetailIds.Add(entityId);
            }
        }
        
        // 清空所有明細，只保留一個空行
        ReceivingItems.Clear();
        EnsureOneEmptyRow();
        
        await NotifyDetailsChanged();
        await NotificationService.ShowSuccessAsync("已清空所有入庫明細");
    }

    /// <summary>
    /// 統一設定所有明細項目的倉庫
    /// </summary>
    /// <param name="warehouseId">要設定的倉庫ID</param>
    private async Task ApplyUnifyWarehouse(int warehouseId)
    {
        if (IsReadOnly) return;

        try
        {
            var selectedWarehouse = Warehouses.FirstOrDefault(w => w.Id == warehouseId);
            if (selectedWarehouse == null)
            {
                await NotificationService.ShowErrorAsync("選擇的倉庫不存在", "錯誤");
                return;
            }

            // 取得所有非空行的明細項目
            var nonEmptyItems = ReceivingItems.Where(item => !IsEmptyRow(item)).ToList();
            
            if (!nonEmptyItems.Any())
            {
                await NotificationService.ShowWarningAsync("沒有可更新的明細項目", "提示");
                return;
            }

            // 批量更新所有非空行的倉庫
            foreach (var item in nonEmptyItems)
            {
                item.SelectedWarehouse = selectedWarehouse;
                // 重置庫位選擇，因為倉庫改變了
                item.SelectedWarehouseLocation = null;
            }

            // 通知父組件資料已變更
            await NotifyDetailsChanged();
            
            // 顯示成功通知
            await NotificationService.ShowSuccessAsync($"已統一設定 {nonEmptyItems.Count} 項明細的倉庫為：{selectedWarehouse.Name}", "統一設定完成");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplyUnifyWarehouse), GetType());
            await NotificationService.ShowErrorAsync("統一設定倉庫時發生錯誤", "錯誤");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        
        // 檢查篩選參數是否變更
        bool supplierChanged = _previousSelectedSupplierId != SelectedSupplierId;
        bool purchaseOrderChanged = _previousSelectedPurchaseOrderId != SelectedPurchaseOrderId;
        bool productFilterChanged = _previousFilterProductId != FilterProductId;
        
        // 如果廠商變更，需要重新載入所有資料
        if (supplierChanged)
        {
            _previousSelectedSupplierId = SelectedSupplierId;
            _previousSelectedPurchaseOrderId = SelectedPurchaseOrderId;
            _previousFilterProductId = FilterProductId;
            
            await LoadAvailableProductsAsync();
            
            // 廠商變更時清空現有選項並重新載入
            ReceivingItems.Clear();
            await LoadExistingDetailsAsync();
            return;
        }
        
        // 如果只是採購單或商品篩選變更，只需要更新篩選狀態並重新渲染
        if (purchaseOrderChanged || productFilterChanged)
        {
            _previousSelectedPurchaseOrderId = SelectedPurchaseOrderId;
            _previousFilterProductId = FilterProductId;
            
            // 觸發重新渲染以套用新的篩選
            StateHasChanged();
            return;
        }
        
        // 總是確保有一行空行可以輸入，不論是否已有資料
        EnsureOneEmptyRow();
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    private bool IsEmptyRow(ReceivingItem item)
    {
        return item.SelectedPurchaseDetail == null && item.SelectedProduct == null;
    }
    
    private ReceivingItem CreateEmptyItem()
    {
        return new ReceivingItem();
    }
    
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.ForAny<ReceivingItem>.EnsureOneEmptyRow(
            ReceivingItems, 
            IsEmptyRow, 
            CreateEmptyItem
        );
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>();

        // 採購明細選擇欄位 - 動態判斷是否唯讀
        var dynamicColumns = new List<InteractiveColumnDefinition>();
        
        // 為每個項目創建動態欄位定義（因為 ProductSelectHelper 目前不支援動態 isReadOnly）
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "商品", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "25%",
            CustomTemplate = item => 
            {
                var receivingItem = (ReceivingItem)item;
                var hasReturnRecord = HasReturnRecord(receivingItem);
                var isFieldReadOnly = IsReadOnly || hasReturnRecord;
                var cssClass = hasReturnRecord ? "form-control form-control-sm border-warning bg-light" : "form-control form-control-sm";
                var title = hasReturnRecord ? "此商品已有退貨記錄，無法修改商品選擇" : "";
                
                return @<div class="position-relative">
                    <input type="text" 
                           class="@cssClass" 
                           value="@receivingItem.ProductSearch"
                           title="@title"
                           placeholder="請選擇採購明細..."
                           readonly="@isFieldReadOnly"
                           @onfocus="() => OnPurchaseDetailInputFocus(receivingItem)"
                           @onblur="() => OnPurchaseDetailInputBlur(receivingItem)"
                           @oninput="(e) => OnPurchaseDetailSearchInput(receivingItem, e.Value?.ToString())" />
                    
                    @if (receivingItem.ShowDropdown && receivingItem.FilteredPurchaseDetails.Any() && !isFieldReadOnly)
                    {
                        <div class="dropdown-menu show position-absolute w-100" style="z-index: 1050; max-height: 300px; overflow-y: auto;">
                            @for (int i = 0; i < receivingItem.FilteredPurchaseDetails.Count; i++)
                            {
                                var index = i;
                                var detail = receivingItem.FilteredPurchaseDetails[i];
                                var isSelected = index == receivingItem.SelectedIndex;
                                var itemClass = isSelected ? "dropdown-item active" : "dropdown-item";
                                
                                <a href="#" class="@itemClass" 
                                   @onclick="() => OnPurchaseDetailSelected(receivingItem, detail)"
                                   @onmouseenter="() => OnPurchaseDetailItemMouseEnter(receivingItem, index)"
                                   @onclick:preventDefault="true">
                                    <div class="d-flex flex-column">
                                        <div class="fw-bold">[@detail.Product?.Code] @detail.Product?.Name</div>
                                        @if (!string.IsNullOrEmpty(detail.PurchaseOrder?.PurchaseOrderNumber))
                                        {
                                            <small class="text-muted">採購單：@detail.PurchaseOrder.PurchaseOrderNumber</small>
                                        }
                                        <small class="text-info">
                                            訂購：@detail.OrderQuantity | 已進：@detail.ReceivedQuantity | 待進：@(detail.OrderQuantity - detail.ReceivedQuantity)
                                        </small>
                                    </div>
                                </a>
                            }
                        </div>
                    }
                    
                    @if (hasReturnRecord)
                    {
                        <div class="position-absolute" style="top: 2px; right: 8px; pointer-events: none;">
                            <i class="fas fa-lock text-danger" title="此商品已有退貨記錄"></i>
                        </div>
                    }
                </div>;
            }
        });        

        // 採購數量欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = OrderQuantityLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var receivingItem = (ReceivingItem)item;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold">@receivingItem.OrderQuantity.ToString("N0")</span>
                </div>;
            }
        });

        // 入庫數量欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = ReceivedQuantityLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var receivingItem = (ReceivingItem)item;
                var value = receivingItem.ReceivedQuantity > 0 ? receivingItem.ReceivedQuantity.ToString() : "";
                var returnedQty = GetReturnedQuantity(receivingItem);
                var minValue = returnedQty > 0 ? returnedQty : 0;
                var hasReturnRecord = HasReturnRecord(receivingItem);
                
                var cssClass = hasReturnRecord ? "form-control form-control-sm border-warning" : "form-control form-control-sm";
                var title = hasReturnRecord ? $"此商品已退貨 {returnedQty} 個，數量不可低於此值" : "";
                
                return @<div class="position-relative">
                    <input type="number" class="@cssClass" 
                           value="@value"
                           title="@title"
                           @oninput="(e) => OnReceivedQuantityInput(receivingItem, e.Value?.ToString())"
                           placeholder="" 
                           min="@minValue" 
                           step="1" 
                           readonly="@IsReadOnly" />
                    
                    @if (hasReturnRecord && returnedQty > 0)
                    {
                        <div class="position-absolute text-warning" style="top: 2px; right: 8px; pointer-events: none; font-size: 0.75rem;">
                            <i class="fas fa-exclamation-triangle" title="已退貨 @returnedQty 個"></i>
                        </div>
                    }
                </div>;
            }
        });

        // 單價欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = PriceLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var receivingItem = (ReceivingItem)item;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold">@receivingItem.UnitPrice.ToString("F0")</span>
                </div>;
            }
        });

        // 倉庫欄位 (條件顯示)
        if (ShowWarehouse)
        {
            columns.Add(new InteractiveColumnDefinition
            { 
                Title = WarehouseLabel, 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "12%",
                CustomTemplate = item => 
                {
                    var receivingItem = (ReceivingItem)item;
                    var selectedWarehouseId = receivingItem.SelectedWarehouse?.Id.ToString() ?? "";
                    var hasReturnRecord = HasReturnRecord(receivingItem);
                    var isFieldDisabled = IsReadOnly || hasReturnRecord;
                    var cssClass = hasReturnRecord ? "form-select form-select-sm border-warning bg-light" : "form-select form-select-sm";
                    var title = hasReturnRecord ? "此商品已有退貨記錄，無法修改倉庫" : "";
                    
                    return @<div class="position-relative">
                        <select class="@cssClass"
                               value="@selectedWarehouseId"
                               title="@title"
                               @onchange="(e) => OnWarehouseSelectionChanged(receivingItem, e.Value?.ToString())"
                               disabled="@isFieldDisabled">
                            <option value="">請選擇倉庫</option>
                            @foreach (var warehouse in Warehouses)
                            {
                                <option value="@warehouse.Id">@warehouse.Name</option>
                            }
                        </select>
                        
                        @if (hasReturnRecord)
                        {
                            <div class="position-absolute" style="top: 2px; right: 25px; pointer-events: none;">
                                <i class="fas fa-lock text-danger" title="已有退貨記錄，無法修改"></i>
                            </div>
                        }
                    </div>;
                }
            });
        }

        // 倉庫位置欄位 (條件顯示)
        if (ShowWarehouseLocation)
        {
            columns.Add(new InteractiveColumnDefinition
            { 
                Title = WarehouseLocationLabel, 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "12%",
                CustomTemplate = item => 
                {
                    var receivingItem = (ReceivingItem)item;
                    var selectedWarehouseLocationId = receivingItem.SelectedWarehouseLocation?.Id.ToString() ?? "";
                    var hasReturnRecord = HasReturnRecord(receivingItem);
                    var isFieldDisabled = IsReadOnly || hasReturnRecord;
                    var cssClass = hasReturnRecord ? "form-select form-select-sm border-warning bg-light" : "form-select form-select-sm";
                    var title = hasReturnRecord ? "此商品已有退貨記錄，無法修改庫位" : "";
                    
                    // 根據選擇的倉庫篩選庫位
                    var availableLocations = receivingItem.SelectedWarehouse != null 
                        ? WarehouseLocations.Where(wl => wl.WarehouseId == receivingItem.SelectedWarehouse.Id).ToList()
                        : new List<WarehouseLocation>();
                    
                    return @<div class="position-relative">
                        <select class="@cssClass"
                               value="@selectedWarehouseLocationId"
                               title="@title"
                               @onchange="(e) => OnWarehouseLocationSelectionChanged(receivingItem, e.Value?.ToString())"
                               disabled="@isFieldDisabled">
                            <option value="">請選擇庫位</option>
                            @foreach (var location in availableLocations)
                            {
                                <option value="@location.Id">@location.Name</option>
                            }
                        </select>
                        
                        @if (hasReturnRecord)
                        {
                            <div class="position-absolute" style="top: 2px; right: 25px; pointer-events: none;">
                                <i class="fas fa-lock text-danger" title="已有退貨記錄，無法修改"></i>
                            </div>
                        }
                    </div>;
                }
            });
        }        

        // 備註欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = RemarksLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = ShowWarehouse && ShowWarehouseLocation ? "8%" : ShowWarehouse ? "10%" : "15%",
            HideOnMobile = true,
            CustomTemplate = item => 
            {
                var receivingItem = (ReceivingItem)item;
                
                return @<input type="text" class="form-control form-control-sm" 
                               value="@receivingItem.Remarks"
                               @oninput="(e) => OnRemarksInput(receivingItem, e.Value?.ToString())"
                               placeholder="選填..."
                               readonly="@IsReadOnly" />;
            }
        });

        return columns;
    }

    private RenderFragment<InteractiveColumnDefinition> GetTotalRowTemplate => column => __builder =>
    {
        if (column.Title == PriceLabel)
        {
            <strong class="text-success">總計: @GetTotalAmount().ToString("C")</strong>
        }
    };

    private async Task HandleItemDelete(ReceivingItem item)
    {
        // 檢查是否有退貨記錄，如果有則阻止刪除
        if (HasReturnRecord(item))
        {
            await NotificationService.ShowWarningAsync(
                "此商品已有退貨記錄，無法刪除", 
                "操作限制"
            );
            return;
        }
        
        var index = ReceivingItems.IndexOf(item);
        await RemoveItemAsync(index);
    }

    // ===== 內部方法 =====
    private async Task LoadAvailableProductsAsync()
    {
        try
        {
            if (SelectedSupplierId.HasValue && SelectedSupplierId.Value > 0)
            {
                // 載入該廠商未完成進貨的採購明細
                AvailablePurchaseDetails = await PurchaseOrderService.GetReceivingDetailsBySupplierAsync(
                    SelectedSupplierId.Value, includeCompleted: false);
                
                // 從採購明細中提取商品清單（向下相容）
                AvailableProducts = AvailablePurchaseDetails
                    .Where(pd => pd.Product != null)
                    .Select(pd => pd.Product!)
                    .Distinct()
                    .ToList();
            }
            else
            {
                AvailableProducts = new List<Product>();
                AvailablePurchaseDetails = new List<PurchaseOrderDetail>();
            }
        }
        catch (Exception)
        {
            AvailableProducts = new List<Product>();
            AvailablePurchaseDetails = new List<PurchaseOrderDetail>();
        }
    }

    private async Task LoadExistingDetailsAsync()
    {
        if (ExistingDetails?.Any() != true) 
        {
            EnsureOneEmptyRow();
            return;
        }

        ReceivingItems.Clear();
        
        foreach (var detail in ExistingDetails)
        {
            // 轉換為正確的實體類型
            if (detail is PurchaseReceivingDetail purchaseDetail)
            {
                var item = new ReceivingItem
                {
                    // 直接使用 Navigation Properties - 簡單且可靠！
                    SelectedProduct = purchaseDetail.Product,
                    SelectedWarehouse = purchaseDetail.Warehouse,
                    SelectedWarehouseLocation = purchaseDetail.WarehouseLocation,
                    SelectedPurchaseDetail = purchaseDetail.PurchaseOrderDetail,
                    
                    // 直接使用屬性值，不需要反射
                    ReceivedQuantity = purchaseDetail.ReceivedQuantity,
                    UnitPrice = purchaseDetail.UnitPrice,
                    Remarks = purchaseDetail.InspectionRemarks ?? string.Empty,
                    ExistingDetailEntity = detail
                };
                
                // 設置搜尋顯示文字
                item.ProductSearch = item.DisplayName;
                
                ReceivingItems.Add(item);
            }
            else
            {
                // 對於非 PurchaseReceivingDetail 類型，保留原有的泛型邏輯作為後備
                var productId = GetPropertyValue<int>(detail, "ProductId");
                var product = Products.FirstOrDefault(p => p.Id == productId) ?? 
                             AvailableProducts.FirstOrDefault(p => p.Id == productId);
                
                if (product != null)
                {
                    var item = new ReceivingItem
                    {
                        SelectedProduct = product,
                        ReceivedQuantity = Convert.ToInt32(GetPropertyValue<object>(detail, QuantityPropertyName) ?? 0),
                        UnitPrice = Convert.ToDecimal(GetPropertyValue<object>(detail, UnitPricePropertyName) ?? 0m),
                        Remarks = GetPropertyValue<string>(detail, RemarksPropertyName) ?? string.Empty,
                        ExistingDetailEntity = detail
                    };
                    
                    // 載入倉庫資訊
                    if (!string.IsNullOrEmpty(WarehouseIdPropertyName))
                    {
                        var warehouseId = GetPropertyValue<int?>(detail, WarehouseIdPropertyName);
                        if (warehouseId.HasValue)
                        {
                            item.SelectedWarehouse = Warehouses.FirstOrDefault(w => w.Id == warehouseId.Value);
                        }
                    }
                    
                    // 載入倉庫位置資訊
                    if (!string.IsNullOrEmpty(WarehouseLocationIdPropertyName))
                    {
                        var warehouseLocationId = GetPropertyValue<int?>(detail, WarehouseLocationIdPropertyName);
                        if (warehouseLocationId.HasValue)
                        {
                            item.SelectedWarehouseLocation = WarehouseLocations.FirstOrDefault(wl => wl.Id == warehouseLocationId.Value);
                        }
                    }
                    
                    // 載入採購明細資訊
                    if (!string.IsNullOrEmpty(PurchaseOrderDetailIdPropertyName))
                    {
                        var purchaseOrderDetailId = GetPropertyValue<int?>(detail, PurchaseOrderDetailIdPropertyName);
                        if (purchaseOrderDetailId.HasValue)
                        {
                            var purchaseDetailFromList = AvailablePurchaseDetails.FirstOrDefault(pd => pd.Id == purchaseOrderDetailId.Value);
                            if (purchaseDetailFromList != null)
                            {
                                item.SelectedPurchaseDetail = purchaseDetailFromList;
                                item.ProductSearch = item.DisplayName;
                            }
                            else
                            {
                                item.ProductSearch = $"[{product.Code}] {product.Name}";
                            }
                        }
                        else
                        {
                            item.ProductSearch = $"[{product.Code}] {product.Name}";
                        }
                    }
                    else
                    {
                        item.ProductSearch = $"[{product.Code}] {product.Name}";
                    }
                    
                    ReceivingItems.Add(item);
                }
            }
        }
        
        EnsureOneEmptyRow();
        
        // 載入退貨數量資訊
        await LoadReturnedQuantitiesAsync();
    }

    private List<TDetailEntity> ConvertToDetailEntities()
    {
        var details = new List<TDetailEntity>();
        
        foreach (var item in ReceivingItems.Where(x => !IsEmptyRow(x) && (x.SelectedPurchaseDetail != null || x.SelectedProduct != null)))
        {
            TDetailEntity detail;
            
            if (item.ExistingDetailEntity != null)
            {
                detail = item.ExistingDetailEntity;
                
                // 如果是 PurchaseReceivingDetail 類型，直接設置屬性
                if (detail is PurchaseReceivingDetail purchaseDetail)
                {
                    purchaseDetail.ReceivedQuantity = item.ReceivedQuantity;
                    purchaseDetail.UnitPrice = item.UnitPrice;
                    purchaseDetail.InspectionRemarks = item.Remarks;
                    purchaseDetail.OrderQuantity = item.OrderQuantity > 0 ? item.OrderQuantity : item.ReceivedQuantity;
                    
                    if (item.SelectedWarehouse != null)
                        purchaseDetail.WarehouseId = item.SelectedWarehouse.Id;
                    
                    if (item.SelectedWarehouseLocation != null)
                        purchaseDetail.WarehouseLocationId = item.SelectedWarehouseLocation.Id;
                    
                    if (item.SelectedPurchaseDetail != null)
                        purchaseDetail.PurchaseOrderDetailId = item.SelectedPurchaseDetail.Id;
                    
                    if (item.SelectedProduct != null)
                        purchaseDetail.ProductId = item.SelectedProduct.Id;
                }
                else
                {
                    // 對於其他類型，使用反射
                    SetPropertyValue(detail, QuantityPropertyName, item.ReceivedQuantity);
                    SetPropertyValue(detail, UnitPricePropertyName, item.UnitPrice);
                    SetPropertyValue(detail, RemarksPropertyName, item.Remarks);
                    SetPropertyValue(detail, "OrderQuantity", item.OrderQuantity > 0 ? item.OrderQuantity : item.ReceivedQuantity);
                    
                    if (!string.IsNullOrEmpty(WarehouseIdPropertyName) && item.SelectedWarehouse != null)
                    {
                        SetPropertyValue(detail, WarehouseIdPropertyName, item.SelectedWarehouse.Id);
                    }
                    
                    if (!string.IsNullOrEmpty(WarehouseLocationIdPropertyName) && item.SelectedWarehouseLocation != null)
                    {
                        SetPropertyValue(detail, WarehouseLocationIdPropertyName, item.SelectedWarehouseLocation.Id);
                    }
                    
                    if (!string.IsNullOrEmpty(PurchaseOrderDetailIdPropertyName) && item.SelectedPurchaseDetail != null)
                    {
                        SetPropertyValue(detail, PurchaseOrderDetailIdPropertyName, item.SelectedPurchaseDetail.Id);
                    }
                }
            }
            else
            {
                detail = new TDetailEntity();
                
                if (MainEntity != null && !string.IsNullOrEmpty(MainEntityIdPropertyName))
                {
                    SetPropertyValue(detail, MainEntityIdPropertyName, MainEntity.Id);
                }
                
                // 設定商品ID - 優先使用採購明細中的商品，否則使用直接選擇的商品
                if (item.SelectedPurchaseDetail?.Product != null)
                {
                    SetPropertyValue(detail, "ProductId", item.SelectedPurchaseDetail.Product.Id);
                }
                else if (item.SelectedProduct != null)
                {
                    SetPropertyValue(detail, "ProductId", item.SelectedProduct.Id);
                }
                
                SetPropertyValue(detail, QuantityPropertyName, item.ReceivedQuantity);
                SetPropertyValue(detail, UnitPricePropertyName, item.UnitPrice);
                SetPropertyValue(detail, RemarksPropertyName, item.Remarks);
                SetPropertyValue(detail, "OrderQuantity", item.OrderQuantity > 0 ? item.OrderQuantity : item.ReceivedQuantity);
                
                if (!string.IsNullOrEmpty(WarehouseIdPropertyName) && item.SelectedWarehouse != null)
                {
                    SetPropertyValue(detail, WarehouseIdPropertyName, item.SelectedWarehouse.Id);
                }
                
                if (!string.IsNullOrEmpty(WarehouseLocationIdPropertyName) && item.SelectedWarehouseLocation != null)
                {
                    SetPropertyValue(detail, WarehouseLocationIdPropertyName, item.SelectedWarehouseLocation.Id);
                }
                
                if (!string.IsNullOrEmpty(PurchaseOrderDetailIdPropertyName) && item.SelectedPurchaseDetail != null)
                {
                    SetPropertyValue(detail, PurchaseOrderDetailIdPropertyName, item.SelectedPurchaseDetail.Id);
                }
            }
            
            details.Add(detail);
        }
        
        return details;
    }

    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToDetailEntities();
        await OnDetailsChanged.InvokeAsync(details);
        
        // 通知已刪除的明細 ID
        if (OnDeletedDetailsChanged.HasDelegate && _deletedDetailIds.Any())
        {
            await OnDeletedDetailsChanged.InvokeAsync(_deletedDetailIds.ToList());
            _deletedDetailIds.Clear(); // 清空已通知的刪除ID
        }
    }

    private async Task<(Warehouse? warehouse, WarehouseLocation? location)> GetLastReceivingWarehouseAsync(int productId)
    {
        try
        {
            var receivingDetails = await PurchaseReceivingDetailService.GetByProductIdAsync(productId);
            var latestDetail = receivingDetails.FirstOrDefault();
            
            return (latestDetail?.Warehouse, latestDetail?.WarehouseLocation);
        }
        catch
        {
            return (null, null);
        }
    }

    private T? GetPropertyValue<T>(object obj, string propertyName)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property == null) return default(T);
        
        var value = property.GetValue(obj);
        if (value == null) return default(T);
        
        if (typeof(T) == typeof(object)) return (T)value;
        
        return (T)Convert.ChangeType(value, typeof(T));
    }

    private void SetPropertyValue(object obj, string propertyName, object? value)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property != null && property.CanWrite)
        {
            if (value != null && property.PropertyType != value.GetType())
            {
                if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    var underlyingType = Nullable.GetUnderlyingType(property.PropertyType);
                    value = Convert.ChangeType(value, underlyingType!);
                }
                else
                {
                    value = Convert.ChangeType(value, property.PropertyType);
                }
            }
            property.SetValue(obj, value);
        }
    }

    // ===== SearchableSelect 事件處理 =====
    private void OnPurchaseDetailInputFocus(ReceivingItem item)
    {
        if (!string.IsNullOrWhiteSpace(item.ProductSearch))
        {
            _ = OnPurchaseDetailSearchInput(item, item.ProductSearch);
        }
        else
        {
            item.SelectedIndex = -1;
            var availableDetails = GetAvailablePurchaseDetails();
            item.FilteredPurchaseDetails = availableDetails.Take(20).ToList();
            item.ShowDropdown = item.FilteredPurchaseDetails.Any();
            StateHasChanged();
        }
    }

    private async Task OnPurchaseDetailInputBlur(ReceivingItem item)
    {
        await Task.Delay(100);
        item.ShowDropdown = false;
        StateHasChanged();
    }

    private async Task OnPurchaseDetailSelected(ReceivingItem item, PurchaseOrderDetail detail)
    {
        var wasEmpty = IsEmptyRow(item);
        
        // 設定選中的採購明細
        item.SelectedPurchaseDetail = detail;
        item.SelectedProduct = detail.Product; // 同時更新 SelectedProduct 以保持向下相容
        item.UnitPrice = detail.UnitPrice; // 預填採購單價
        item.ProductSearch = item.DisplayName; // 使用包含採購單號的顯示名稱
        
        // 自動帶出最近進貨的倉庫和庫位（只有在尚未選擇時才自動填入）
        if (item.SelectedWarehouse == null && detail.Product != null)
        {
            var (warehouse, location) = await GetLastReceivingWarehouseAsync(detail.Product.Id);
            if (warehouse != null)
            {
                item.SelectedWarehouse = warehouse;
                if (location != null && item.SelectedWarehouseLocation == null)
                {
                    item.SelectedWarehouseLocation = location;
                }
            }
        }
        
        item.ShowDropdown = false;
        item.SelectedIndex = -1;
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private void OnPurchaseDetailItemMouseEnter(ReceivingItem item, int index)
    {
        item.SelectedIndex = index;
        StateHasChanged();
    }

    private async Task OnPurchaseDetailSearchInput(ReceivingItem item, string? searchValue)
    {
        var wasEmpty = IsEmptyRow(item);
        
        item.ProductSearch = searchValue ?? string.Empty;
        
        if (string.IsNullOrWhiteSpace(searchValue))
        {
            item.SelectedPurchaseDetail = null;
            item.SelectedProduct = null;
            item.SelectedIndex = -1;
            
            var availableDetails = GetAvailablePurchaseDetails();
            item.FilteredPurchaseDetails = availableDetails.Take(20).ToList();
            item.ShowDropdown = item.FilteredPurchaseDetails.Any();
        }
        else
        {
            var availableDetails = GetAvailablePurchaseDetails();
            
            // 搜尋邏輯：支援商品代碼、商品名稱、採購單號
            item.FilteredPurchaseDetails = availableDetails
                .Where(pd => 
                {
                    // 基本商品搜尋
                    var basicMatch = pd.Product?.Code?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true ||
                                   pd.Product?.Name?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true;
                    
                    // 採購單號搜尋
                    var purchaseOrderMatch = pd.PurchaseOrder?.PurchaseOrderNumber?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true;
                    
                    return basicMatch || purchaseOrderMatch;
                })
                .Take(20)
                .ToList();
            
            item.ShowDropdown = item.FilteredPurchaseDetails.Any();
            item.SelectedIndex = item.FilteredPurchaseDetails.Any() ? 0 : -1;
        }
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnReceivedQuantityInput(ReceivingItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(value))
        {
            item.ReceivedQuantity = 0;
        }
        else if (int.TryParse(value, out var quantity))
        {
            var returnedQty = GetReturnedQuantity(item);
            
            // 檢查是否低於已退貨數量
            if (returnedQty > 0 && quantity < returnedQty)
            {
                await NotificationService.ShowWarningAsync(
                    $"進貨數量不可低於已退貨數量 {returnedQty}",
                    "數量限制"
                );
                item.ReceivedQuantity = returnedQty; // 自動調整為最小允許值
            }
            else
            {
                item.ReceivedQuantity = quantity;
            }
        }
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnWarehouseSelectionChanged(ReceivingItem item, string? warehouseIdStr)
    {
        if (IsReadOnly) return;
        
        // 新增：檢查退貨記錄限制
        if (HasReturnRecord(item))
        {
            await NotificationService.ShowWarningAsync(
                "此商品已有退貨記錄，無法修改倉庫設定", 
                "操作限制"
            );
            return;
        }
        
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(warehouseIdStr) || !int.TryParse(warehouseIdStr, out var warehouseId))
        {
            item.SelectedWarehouse = null;
        }
        else
        {
            item.SelectedWarehouse = Warehouses.FirstOrDefault(w => w.Id == warehouseId);
        }
        
        item.SelectedWarehouseLocation = null;
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnWarehouseLocationSelectionChanged(ReceivingItem item, string? warehouseLocationIdStr)
    {
        if (IsReadOnly) return;
        
        // 新增：檢查退貨記錄限制
        if (HasReturnRecord(item))
        {
            await NotificationService.ShowWarningAsync(
                "此商品已有退貨記錄，無法修改庫位設定", 
                "操作限制"
            );
            return;
        }
        
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(warehouseLocationIdStr) || !int.TryParse(warehouseLocationIdStr, out var warehouseLocationId))
        {
            item.SelectedWarehouseLocation = null;
        }
        else
        {
            item.SelectedWarehouseLocation = WarehouseLocations.FirstOrDefault(wl => wl.Id == warehouseLocationId);
        }
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnRemarksInput(ReceivingItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        item.Remarks = value ?? string.Empty;
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= ReceivingItems.Count) return;
        
        var removedItem = ReceivingItems[index];
        
        // 記錄要刪除的資料庫實體ID
        if (removedItem.ExistingDetailEntity != null)
        {
            var entityId = GetExistingDetailId(removedItem.ExistingDetailEntity);
            if (entityId > 0)
            {
                _deletedDetailIds.Add(entityId);
            }
        }
        
        // 通知父組件項目即將被移除
        if (OnItemRemoved.HasDelegate)
        {
            await OnItemRemoved.InvokeAsync(removedItem);
        }
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleItemRemove(
            ReceivingItems, removedItem, IsEmptyRow, CreateEmptyItem);
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 取得現有明細實體的ID
    /// </summary>
    private int GetExistingDetailId(TDetailEntity entity)
    {
        if (entity == null) return 0;
        
        // 假設所有的 BaseEntity 都有 Id 屬性
        var idProperty = entity.GetType().GetProperty("Id");
        if (idProperty != null && idProperty.PropertyType == typeof(int))
        {
            var value = idProperty.GetValue(entity);
            return value != null ? (int)value : 0;
        }
        
        return 0;
    }

    private List<Product> GetAvailableProducts()
    {
        if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
        {
            return new List<Product>();
        }
        
        // 返回去重後的商品清單，但保留採購明細資訊供後續使用
        return AvailableProducts;
    }
    
    /// <summary>
    /// 取得可用的採購明細清單（支援三層篩選：廠商->採購單->商品）
    /// </summary>
    private List<PurchaseOrderDetail> GetAvailablePurchaseDetails()
    {
        if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
        {
            return new List<PurchaseOrderDetail>();
        }
        
        var filteredDetails = AvailablePurchaseDetails.AsEnumerable();
        
        // 第二層篩選：採購單
        if (SelectedPurchaseOrderId.HasValue && SelectedPurchaseOrderId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(pd => pd.PurchaseOrderId == SelectedPurchaseOrderId.Value);
        }
        
        // 第三層篩選：商品
        if (FilterProductId.HasValue && FilterProductId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(pd => pd.ProductId == FilterProductId.Value);
        }
        
        return filteredDetails.ToList();
    }

    // ===== 新增：載入所有未入庫相關方法 =====
    
    /// <summary>
    /// 獲取當前篩選狀態的描述資訊
    /// </summary>
    private string GetCurrentFilterInfo()
    {
        var filters = new List<string>();
        
        if (SelectedPurchaseOrderId.HasValue)
        {
            filters.Add("已篩選採購單");
        }
        
        if (FilterProductId.HasValue)
        {
            var product = AvailableProducts.FirstOrDefault(p => p.Id == FilterProductId.Value);
            if (product != null)
            {
                filters.Add($"已篩選產品：{product.Name}");
            }
        }
        
        return filters.Any() ? $"（{string.Join("，", filters)}）" : "";
    }

    /// <summary>
    /// 獲取預設倉庫（如果有的話）
    /// </summary>
    private Warehouse? GetDefaultWarehouse(PurchaseOrderDetail? purchaseDetail = null)
    {
        // 優先使用採購單指定的倉庫
        if (purchaseDetail?.PurchaseOrder?.Warehouse != null)
        {
            return purchaseDetail.PurchaseOrder.Warehouse;
        }
        
        // 如果只有一個倉庫，自動選擇它
        return Warehouses.Count == 1 ? Warehouses.First() : null;
    }

    /// <summary>
    /// 獲取預設庫位（如果有的話）
    /// </summary>
    private WarehouseLocation? GetDefaultWarehouseLocation(Warehouse? selectedWarehouse = null)
    {
        if (selectedWarehouse != null)
        {
            // 取得該倉庫的庫位
            var warehouseLocations = WarehouseLocations.Where(wl => wl.WarehouseId == selectedWarehouse.Id).ToList();
            
            // 如果該倉庫只有一個庫位，自動選擇它
            if (warehouseLocations.Count == 1)
            {
                return warehouseLocations.First();
            }
        }
        
        // 如果全系統只有一個庫位，自動選擇它
        return WarehouseLocations.Count == 1 ? WarehouseLocations.First() : null;
    }

    /// <summary>
    /// 顯示確認對話框
    /// </summary>
    private async Task<bool> ShowConfirmationAsync(string title, string message)
    {
        // 暫時使用簡單的通知，等待確認後執行
        // 在實際專案中可能會使用更精美的對話框組件
        try 
        {
            // 先顯示警告訊息，讓使用者知道將要進行的操作
            await NotificationService.ShowWarningAsync($"{title}: {message}");
            return true; // 暫時直接返回 true，實際應該實作確認對話框
        }
        catch
        {
            return false;
        }
    }

    /// <summary>
    /// 內部方法：載入未入庫項目
    /// </summary>
    private async Task LoadUnreceivedItemsInternal(List<PurchaseOrderDetail> details)
    {
        try
        {
            // 清空現有項目
            ReceivingItems.Clear();

            // 載入所有未入庫項目
            foreach (var detail in details)
            {
                // 獲取該採購明細的預設倉庫
                var defaultWarehouse = GetDefaultWarehouse(detail);
                
                var receivingItem = new ReceivingItem
                {
                    SelectedPurchaseDetail = detail,
                    SelectedProduct = detail.Product,
                    ReceivedQuantity = detail.OrderQuantity - detail.ReceivedQuantity, // 預填剩餘數量
                    UnitPrice = detail.UnitPrice,
                    
                    // 使用採購單指定的倉庫，或預設倉庫
                    SelectedWarehouse = defaultWarehouse,
                    SelectedWarehouseLocation = GetDefaultWarehouseLocation(defaultWarehouse)
                };

                // 使用與手動選取相同的顯示格式
                receivingItem.ProductSearch = receivingItem.DisplayName;
                
                // 自動載入最近進貨的倉庫和庫位（如果沒有預設倉庫的話）
                if (receivingItem.SelectedWarehouse == null && detail.Product != null)
                {
                    var (warehouse, location) = await GetLastReceivingWarehouseAsync(detail.Product.Id);
                    if (warehouse != null)
                    {
                        receivingItem.SelectedWarehouse = warehouse;
                        if (location != null && receivingItem.SelectedWarehouseLocation == null)
                        {
                            receivingItem.SelectedWarehouseLocation = location;
                        }
                    }
                }

                ReceivingItems.Add(receivingItem);
            }

            // 確保有一個空行
            EnsureOneEmptyRow();
            
            // 通知變更
            await NotifyDetailsChanged();
            
            var filterInfo = GetCurrentFilterInfo();
            await NotificationService.ShowSuccessAsync(
                $"成功載入 {details.Count} 項未入庫商品{filterInfo}"
            );
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入未入庫商品失敗：{ex.Message}");
        }
    }

    /// <summary>
    /// 載入所有未入庫商品的主要方法
    /// </summary>
    private async Task LoadAllUnreceivedItems()
    {
        if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
        {
            await NotificationService.ShowWarningAsync("請先選擇廠商後再載入未入庫商品");
            return;
        }

        var availableDetails = GetAvailablePurchaseDetails();
        
        if (!availableDetails.Any())
        {
            var filterInfo = GetCurrentFilterInfo();
            await NotificationService.ShowInfoAsync($"目前沒有符合條件的未入庫商品{filterInfo}");
            return;
        }

        // 檢查是否有現有資料
        var hasExistingData = ReceivingItems.Any(item => !IsEmptyRow(item));
        
        if (hasExistingData)
        {
            // 使用確認對話框
            var confirmed = await ShowConfirmationAsync(
                "載入確認", 
                $"此操作將清空現有的入庫明細並載入 {availableDetails.Count} 項未入庫商品。\n\n是否繼續？"
            );
            
            if (!confirmed) return;
        }

        await LoadUnreceivedItemsInternal(availableDetails);
    }


    private decimal GetTotalAmount()
    {
        return ReceivingItems
            .Where(item => !IsEmptyRow(item) && item.SelectedPurchaseDetail != null && item.ReceivedQuantity > 0)
            .Sum(item => item.ReceivedQuantity * item.UnitPrice);
    }

    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        if (!AutoEmptyRowHelper.ForAny<ReceivingItem>.HasSufficientItems(ReceivingItems, IsEmptyRow, 1))
        {
            errors.Add("至少需要一個入庫商品");
        }
        else
        {
            var nonEmptyItems = AutoEmptyRowHelper.ForAny<ReceivingItem>.GetNonEmptyItems(ReceivingItems, IsEmptyRow);
            
            // 檢查是否有選擇倉庫（如果啟用倉庫功能）
            if (ShowWarehouse)
            {
                var itemsWithoutWarehouse = nonEmptyItems.Where(item => item.SelectedWarehouse == null).ToList();
                if (itemsWithoutWarehouse.Any())
                {
                    var productNames = itemsWithoutWarehouse
                        .Select(item => item.SelectedProduct?.Name ?? item.DisplayName)
                        .Where(name => !string.IsNullOrEmpty(name))
                        .ToList();
                    
                    if (productNames.Any())
                    {
                        errors.Add($"以下商品必須選擇倉庫：{string.Join("、", productNames)}");
                    }
                    else
                    {
                        errors.Add("所有商品都必須選擇倉庫");
                    }
                }
            }
            
            // 新增：檢查退貨數量限制
            foreach (var item in nonEmptyItems)
            {
                var returnedQty = GetReturnedQuantity(item);
                if (returnedQty > 0 && item.ReceivedQuantity < returnedQty)
                {
                    var productName = item.SelectedProduct?.Name ?? item.DisplayName;
                    errors.Add($"商品「{productName}」的進貨數量 {item.ReceivedQuantity} 不可低於已退貨數量 {returnedQty}");
                }
            }
        }
          
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }

    public class ReceivingItem
    {
        public string ProductSearch { get; set; } = string.Empty;
        public Product? SelectedProduct { get; set; }
        public int ReceivedQuantity { get; set; } = 0;
        public decimal UnitPrice { get; set; } = 0;
        public string Remarks { get; set; } = string.Empty;
        public Warehouse? SelectedWarehouse { get; set; }
        public WarehouseLocation? SelectedWarehouseLocation { get; set; }
        public bool ShowDropdown { get; set; } = false;
        public int SelectedIndex { get; set; } = -1;
        public List<Product> FilteredProducts { get; set; } = new List<Product>();
        public TDetailEntity? ExistingDetailEntity { get; set; }
        
        // === 新增：採購明細相關屬性 ===
        public PurchaseOrderDetail? SelectedPurchaseDetail { get; set; }
        public List<PurchaseOrderDetail> FilteredPurchaseDetails { get; set; } = new List<PurchaseOrderDetail>();
        
        // === 採購單相關資訊（從選中的採購明細中獲取） ===
        public string? PurchaseOrderNumber => SelectedPurchaseDetail?.PurchaseOrder?.PurchaseOrderNumber;
        public int? PurchaseOrderDetailId => SelectedPurchaseDetail?.Id;
        public int? PurchaseOrderId => SelectedPurchaseDetail?.PurchaseOrderId;
        public int OrderQuantity => SelectedPurchaseDetail?.OrderQuantity ?? 0;
        public int PreviousReceivedQuantity => SelectedPurchaseDetail?.ReceivedQuantity ?? 0;
        public int PendingQuantity => OrderQuantity - PreviousReceivedQuantity;
        
        /// <summary>
        /// 取得顯示用的商品名稱（包含採購單號）
        /// </summary>
        public string DisplayName => 
            SelectedPurchaseDetail?.Product != null && !string.IsNullOrEmpty(SelectedPurchaseDetail.PurchaseOrder?.PurchaseOrderNumber)
                ? $"採購單 {SelectedPurchaseDetail.PurchaseOrder.PurchaseOrderNumber} [{SelectedPurchaseDetail.Product.Code}] {SelectedPurchaseDetail.Product.Name}"
                : SelectedProduct != null 
                    ? $"[{SelectedProduct.Code}] {SelectedProduct.Name}" 
                    : ProductSearch;
    }
}