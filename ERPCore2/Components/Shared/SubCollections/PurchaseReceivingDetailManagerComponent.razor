@* 採購入庫明細管理組件 - 使用 InteractiveTableComponent 統一UI 並整合自動空行功能 *@

@inject IProductService ProductService
@inject IPurchaseOrderService PurchaseOrderService
@inject IPurchaseReceivingDetailService PurchaseReceivingDetailService
@inject INotificationService NotificationService
@using ERPCore2.Helpers
@using ERPCore2.Data.Entities
@typeparam TMainEntity where TMainEntity : BaseEntity
@typeparam TDetailEntity where TDetailEntity : BaseEntity, new()

@if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="supplier-warning">
                <p class="text-muted">選擇廠商後即可查看該廠商的入庫商品</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <InteractiveTableComponent TItem="ReceivingItem" 
                                      Items="@ReceivingItems"
                                      ColumnDefinitions="@GetColumnDefinitions()"
                                      IsReadOnly="@IsReadOnly"
                                      ShowRowNumbers="false"
                                      EmptyMessage="@EmptyMessage"
                                      ShowBuiltInActions="true"
                                      ShowBuiltInDeleteButton="true"
                                      OnItemDelete="@HandleItemDelete"
                                      ShowTotalRow="true"
                                      TotalRowTemplate="@GetTotalRowTemplate" />
        </div>
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public List<Product> Products { get; set; } = new List<Product>();
    [Parameter] public EventCallback<List<ReceivingItem>> OnReceivingItemsChanged { get; set; }
    
    // ===== 供應商過濾參數 =====
    [Parameter] public int? SelectedSupplierId { get; set; }
    
    // ===== 篩選參數 =====
    [Parameter] public int? SelectedPurchaseOrderId { get; set; }
    [Parameter] public int? FilterProductId { get; set; }
    
    // ===== 泛型參數 =====
    [Parameter] public TMainEntity? MainEntity { get; set; }
    [Parameter] public List<TDetailEntity> ExistingDetails { get; set; } = new List<TDetailEntity>();
    [Parameter] public EventCallback<List<TDetailEntity>> OnDetailsChanged { get; set; }
    
    // ===== 欄位映射參數 =====
    [Parameter] public string MainEntityIdPropertyName { get; set; } = string.Empty;
    [Parameter] public string QuantityPropertyName { get; set; } = "ReceivedQuantity";
    [Parameter] public string UnitPricePropertyName { get; set; } = "UnitPrice";
    [Parameter] public string RemarksPropertyName { get; set; } = "Remarks";
    [Parameter] public string? UnitIdPropertyName { get; set; }
    [Parameter] public string? WarehouseIdPropertyName { get; set; }
    [Parameter] public string? WarehouseLocationIdPropertyName { get; set; }
    [Parameter] public string? PurchaseOrderDetailIdPropertyName { get; set; }

    // ===== 顯示控制參數 =====
    [Parameter] public bool ShowWarehouse { get; set; } = true;
    [Parameter] public bool ShowWarehouseLocation { get; set; } = true;
    [Parameter] public bool ShowPurchaseOrderReference { get; set; } = false;
    
    // ===== 顯示標籤參數 =====
    [Parameter] public string OrderQuantityLabel { get; set; } = "採購數量";
    [Parameter] public string ReceivedQuantityLabel { get; set; } = "入庫數量";
    [Parameter] public string PriceLabel { get; set; } = "單價";
    [Parameter] public string RemarksLabel { get; set; } = "備註";
    [Parameter] public string WarehouseLabel { get; set; } = "倉庫";
    [Parameter] public string WarehouseLocationLabel { get; set; } = "庫位";
    [Parameter] public string PurchaseOrderLabel { get; set; } = "採購單參考";
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "入庫明細";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "warehouse";
    [Parameter] public string ItemDisplayName { get; set; } = "商品";
    [Parameter] public string EmptyIcon { get; set; } = "box-open";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增入庫商品";
    
    // ===== 唯讀模式參數 =====
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 下拉選項參數 =====
    [Parameter] public List<Warehouse> Warehouses { get; set; } = new List<Warehouse>();
    [Parameter] public List<WarehouseLocation> WarehouseLocations { get; set; } = new List<WarehouseLocation>();

    private List<ReceivingItem> ReceivingItems { get; set; } = new List<ReceivingItem>();
    private List<Product> AvailableProducts { get; set; } = new List<Product>();
    private List<PurchaseOrderDetail> AvailablePurchaseDetails { get; set; } = new List<PurchaseOrderDetail>();
    private int? _previousSelectedSupplierId = null;
    private int? _previousSelectedPurchaseOrderId = null;
    private int? _previousFilterProductId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableProductsAsync();
        LoadExistingDetailsAsync();
        EnsureOneEmptyRow();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        
        // 檢查篩選參數是否變更
        bool supplierChanged = _previousSelectedSupplierId != SelectedSupplierId;
        bool purchaseOrderChanged = _previousSelectedPurchaseOrderId != SelectedPurchaseOrderId;
        bool productFilterChanged = _previousFilterProductId != FilterProductId;
        
        // 如果廠商變更，需要重新載入所有資料
        if (supplierChanged)
        {
            _previousSelectedSupplierId = SelectedSupplierId;
            _previousSelectedPurchaseOrderId = SelectedPurchaseOrderId;
            _previousFilterProductId = FilterProductId;
            
            await LoadAvailableProductsAsync();
            
            // 廠商變更時清空現有選項並重新載入
            ReceivingItems.Clear();
            LoadExistingDetailsAsync();
            return;
        }
        
        // 如果只是採購單或商品篩選變更，只需要更新篩選狀態並重新渲染
        if (purchaseOrderChanged || productFilterChanged)
        {
            _previousSelectedPurchaseOrderId = SelectedPurchaseOrderId;
            _previousFilterProductId = FilterProductId;
            
            // 觸發重新渲染以套用新的篩選
            StateHasChanged();
            return;
        }
        
        // 總是確保有一行空行可以輸入，不論是否已有資料
        EnsureOneEmptyRow();
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    private bool IsEmptyRow(ReceivingItem item)
    {
        return item.SelectedPurchaseDetail == null && item.SelectedProduct == null;
    }
    
    private ReceivingItem CreateEmptyItem()
    {
        return new ReceivingItem();
    }
    
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.ForAny<ReceivingItem>.EnsureOneEmptyRow(
            ReceivingItems, 
            IsEmptyRow, 
            CreateEmptyItem
        );
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>();

        // 採購明細選擇欄位
        columns.Add(PurchaseOrderDetailSelectHelper.CreatePurchaseDetailSearchableSelect<ReceivingItem>(
            title: "商品",
            availablePurchaseDetailsProvider: () => GetAvailablePurchaseDetails(),
            onSearchInputChanged: EventCallback.Factory.Create<(ReceivingItem item, string? searchValue)>(this, async args => await OnPurchaseDetailSearchInput(args.item, args.searchValue)),
            onPurchaseDetailSelected: EventCallback.Factory.Create<(ReceivingItem item, PurchaseOrderDetail? selectedDetail)>(this, async args => {
                if (args.selectedDetail != null)
                    await OnPurchaseDetailSelected(args.item, args.selectedDetail);
            }),
            onInputFocus: EventCallback.Factory.Create<ReceivingItem>(this, item => OnPurchaseDetailInputFocus(item)),
            onInputBlur: EventCallback.Factory.Create<ReceivingItem>(this, async item => await OnPurchaseDetailInputBlur(item)),
            onItemMouseEnter: EventCallback.Factory.Create<(ReceivingItem item, int index)>(this, args => OnPurchaseDetailItemMouseEnter(args.item, args.index)),
            isReadOnly: IsReadOnly
        ));        

        // 採購數量欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = OrderQuantityLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var receivingItem = (ReceivingItem)item;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold">@receivingItem.OrderQuantity.ToString("N0")</span>
                </div>;
            }
        });

        // 入庫數量欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = ReceivedQuantityLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var receivingItem = (ReceivingItem)item;
                var value = receivingItem.ReceivedQuantity > 0 ? receivingItem.ReceivedQuantity.ToString() : "";
                
                return @<input type="number" class="form-control form-control-sm" 
                               value="@value"
                               @oninput="(e) => OnReceivedQuantityInput(receivingItem, e.Value?.ToString())"
                               placeholder="" 
                               min="0" 
                               step="1" 
                               readonly="@IsReadOnly" />;
            }
        });

        // 單價欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = PriceLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "10%",
            CustomTemplate = item => 
            {
                var receivingItem = (ReceivingItem)item;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold">@receivingItem.UnitPrice.ToString("F0")</span>
                </div>;
            }
        });

        // 倉庫欄位 (條件顯示)
        if (ShowWarehouse)
        {
            columns.Add(new InteractiveColumnDefinition
            { 
                Title = WarehouseLabel, 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "12%",
                CustomTemplate = item => 
                {
                    var receivingItem = (ReceivingItem)item;
                    var selectedWarehouseId = receivingItem.SelectedWarehouse?.Id.ToString() ?? "";
                    
                    return @<select class="form-select form-select-sm"
                                   value="@selectedWarehouseId"
                                   @onchange="(e) => OnWarehouseSelectionChanged(receivingItem, e.Value?.ToString())"
                                   disabled="@IsReadOnly">
                        <option value="">請選擇倉庫</option>
                        @foreach (var warehouse in Warehouses)
                        {
                            <option value="@warehouse.Id">@warehouse.Name</option>
                        }
                    </select>;
                }
            });
        }

        // 倉庫位置欄位 (條件顯示)
        if (ShowWarehouseLocation)
        {
            columns.Add(new InteractiveColumnDefinition
            { 
                Title = WarehouseLocationLabel, 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "12%",
                CustomTemplate = item => 
                {
                    var receivingItem = (ReceivingItem)item;
                    var selectedWarehouseLocationId = receivingItem.SelectedWarehouseLocation?.Id.ToString() ?? "";
                    
                    // 根據選擇的倉庫篩選庫位
                    var availableLocations = receivingItem.SelectedWarehouse != null 
                        ? WarehouseLocations.Where(wl => wl.WarehouseId == receivingItem.SelectedWarehouse.Id).ToList()
                        : new List<WarehouseLocation>();
                    
                    return @<select class="form-select form-select-sm"
                                   value="@selectedWarehouseLocationId"
                                   @onchange="(e) => OnWarehouseLocationSelectionChanged(receivingItem, e.Value?.ToString())"
                                   disabled="@IsReadOnly">
                        <option value="">請選擇庫位</option>
                        @foreach (var location in availableLocations)
                        {
                            <option value="@location.Id">@location.Name</option>
                        }
                    </select>;
                }
            });
        }        

        // 備註欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = RemarksLabel, 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = ShowWarehouse && ShowWarehouseLocation ? "8%" : ShowWarehouse ? "10%" : "15%",
            HideOnMobile = true,
            CustomTemplate = item => 
            {
                var receivingItem = (ReceivingItem)item;
                
                return @<input type="text" class="form-control form-control-sm" 
                               value="@receivingItem.Remarks"
                               @oninput="(e) => OnRemarksInput(receivingItem, e.Value?.ToString())"
                               placeholder="選填..."
                               readonly="@IsReadOnly" />;
            }
        });

        return columns;
    }

    private RenderFragment<InteractiveColumnDefinition> GetTotalRowTemplate => column => __builder =>
    {
        if (column.Title == PriceLabel)
        {
            <strong class="text-success">總計: @GetTotalAmount().ToString("C")</strong>
        }
    };

    private async Task HandleItemDelete(ReceivingItem item)
    {
        var index = ReceivingItems.IndexOf(item);
        await RemoveItemAsync(index);
    }

    // ===== 內部方法 =====
    private async Task LoadAvailableProductsAsync()
    {
        try
        {
            if (SelectedSupplierId.HasValue && SelectedSupplierId.Value > 0)
            {
                // 載入該廠商未完成進貨的採購明細
                AvailablePurchaseDetails = await PurchaseOrderService.GetReceivingDetailsBySupplierAsync(
                    SelectedSupplierId.Value, includeCompleted: false);
                
                // 從採購明細中提取商品清單（向下相容）
                AvailableProducts = AvailablePurchaseDetails
                    .Where(pd => pd.Product != null)
                    .Select(pd => pd.Product!)
                    .Distinct()
                    .ToList();
            }
            else
            {
                AvailableProducts = new List<Product>();
                AvailablePurchaseDetails = new List<PurchaseOrderDetail>();
            }
        }
        catch (Exception)
        {
            AvailableProducts = new List<Product>();
            AvailablePurchaseDetails = new List<PurchaseOrderDetail>();
        }
    }

    private void LoadExistingDetailsAsync()
    {
        if (ExistingDetails?.Any() != true) 
        {
            EnsureOneEmptyRow();
            return;
        }

        ReceivingItems.Clear();
        
        foreach (var detail in ExistingDetails)
        {
            // 轉換為正確的實體類型
            if (detail is PurchaseReceivingDetail purchaseDetail)
            {
                var item = new ReceivingItem
                {
                    // 直接使用 Navigation Properties - 簡單且可靠！
                    SelectedProduct = purchaseDetail.Product,
                    SelectedWarehouse = purchaseDetail.Warehouse,
                    SelectedWarehouseLocation = purchaseDetail.WarehouseLocation,
                    SelectedPurchaseDetail = purchaseDetail.PurchaseOrderDetail,
                    
                    // 直接使用屬性值，不需要反射
                    ReceivedQuantity = purchaseDetail.ReceivedQuantity,
                    UnitPrice = purchaseDetail.UnitPrice,
                    Remarks = purchaseDetail.InspectionRemarks ?? string.Empty,
                    ExistingDetailEntity = detail
                };
                
                // 設置搜尋顯示文字
                item.ProductSearch = item.DisplayName;
                
                ReceivingItems.Add(item);
            }
            else
            {
                // 對於非 PurchaseReceivingDetail 類型，保留原有的泛型邏輯作為後備
                var productId = GetPropertyValue<int>(detail, "ProductId");
                var product = Products.FirstOrDefault(p => p.Id == productId) ?? 
                             AvailableProducts.FirstOrDefault(p => p.Id == productId);
                
                if (product != null)
                {
                    var item = new ReceivingItem
                    {
                        SelectedProduct = product,
                        ReceivedQuantity = Convert.ToInt32(GetPropertyValue<object>(detail, QuantityPropertyName) ?? 0),
                        UnitPrice = Convert.ToDecimal(GetPropertyValue<object>(detail, UnitPricePropertyName) ?? 0m),
                        Remarks = GetPropertyValue<string>(detail, RemarksPropertyName) ?? string.Empty,
                        ExistingDetailEntity = detail
                    };
                    
                    // 載入倉庫資訊
                    if (!string.IsNullOrEmpty(WarehouseIdPropertyName))
                    {
                        var warehouseId = GetPropertyValue<int?>(detail, WarehouseIdPropertyName);
                        if (warehouseId.HasValue)
                        {
                            item.SelectedWarehouse = Warehouses.FirstOrDefault(w => w.Id == warehouseId.Value);
                        }
                    }
                    
                    // 載入倉庫位置資訊
                    if (!string.IsNullOrEmpty(WarehouseLocationIdPropertyName))
                    {
                        var warehouseLocationId = GetPropertyValue<int?>(detail, WarehouseLocationIdPropertyName);
                        if (warehouseLocationId.HasValue)
                        {
                            item.SelectedWarehouseLocation = WarehouseLocations.FirstOrDefault(wl => wl.Id == warehouseLocationId.Value);
                        }
                    }
                    
                    // 載入採購明細資訊
                    if (!string.IsNullOrEmpty(PurchaseOrderDetailIdPropertyName))
                    {
                        var purchaseOrderDetailId = GetPropertyValue<int?>(detail, PurchaseOrderDetailIdPropertyName);
                        if (purchaseOrderDetailId.HasValue)
                        {
                            var purchaseDetailFromList = AvailablePurchaseDetails.FirstOrDefault(pd => pd.Id == purchaseOrderDetailId.Value);
                            if (purchaseDetailFromList != null)
                            {
                                item.SelectedPurchaseDetail = purchaseDetailFromList;
                                item.ProductSearch = item.DisplayName;
                            }
                            else
                            {
                                item.ProductSearch = $"[{product.Code}] {product.Name}";
                            }
                        }
                        else
                        {
                            item.ProductSearch = $"[{product.Code}] {product.Name}";
                        }
                    }
                    else
                    {
                        item.ProductSearch = $"[{product.Code}] {product.Name}";
                    }
                    
                    ReceivingItems.Add(item);
                }
            }
        }
        
        EnsureOneEmptyRow();
    }

    private List<TDetailEntity> ConvertToDetailEntities()
    {
        var details = new List<TDetailEntity>();
        
        foreach (var item in ReceivingItems.Where(x => !IsEmptyRow(x) && (x.SelectedPurchaseDetail != null || x.SelectedProduct != null)))
        {
            TDetailEntity detail;
            
            if (item.ExistingDetailEntity != null)
            {
                detail = item.ExistingDetailEntity;
                
                // 如果是 PurchaseReceivingDetail 類型，直接設置屬性
                if (detail is PurchaseReceivingDetail purchaseDetail)
                {
                    purchaseDetail.ReceivedQuantity = item.ReceivedQuantity;
                    purchaseDetail.UnitPrice = item.UnitPrice;
                    purchaseDetail.InspectionRemarks = item.Remarks;
                    purchaseDetail.OrderQuantity = item.OrderQuantity > 0 ? item.OrderQuantity : item.ReceivedQuantity;
                    
                    if (item.SelectedWarehouse != null)
                        purchaseDetail.WarehouseId = item.SelectedWarehouse.Id;
                    
                    if (item.SelectedWarehouseLocation != null)
                        purchaseDetail.WarehouseLocationId = item.SelectedWarehouseLocation.Id;
                    
                    if (item.SelectedPurchaseDetail != null)
                        purchaseDetail.PurchaseOrderDetailId = item.SelectedPurchaseDetail.Id;
                    
                    if (item.SelectedProduct != null)
                        purchaseDetail.ProductId = item.SelectedProduct.Id;
                }
                else
                {
                    // 對於其他類型，使用反射
                    SetPropertyValue(detail, QuantityPropertyName, item.ReceivedQuantity);
                    SetPropertyValue(detail, UnitPricePropertyName, item.UnitPrice);
                    SetPropertyValue(detail, RemarksPropertyName, item.Remarks);
                    SetPropertyValue(detail, "OrderQuantity", item.OrderQuantity > 0 ? item.OrderQuantity : item.ReceivedQuantity);
                    
                    if (!string.IsNullOrEmpty(WarehouseIdPropertyName) && item.SelectedWarehouse != null)
                    {
                        SetPropertyValue(detail, WarehouseIdPropertyName, item.SelectedWarehouse.Id);
                    }
                    
                    if (!string.IsNullOrEmpty(WarehouseLocationIdPropertyName) && item.SelectedWarehouseLocation != null)
                    {
                        SetPropertyValue(detail, WarehouseLocationIdPropertyName, item.SelectedWarehouseLocation.Id);
                    }
                    
                    if (!string.IsNullOrEmpty(PurchaseOrderDetailIdPropertyName) && item.SelectedPurchaseDetail != null)
                    {
                        SetPropertyValue(detail, PurchaseOrderDetailIdPropertyName, item.SelectedPurchaseDetail.Id);
                    }
                }
            }
            else
            {
                detail = new TDetailEntity();
                
                if (MainEntity != null && !string.IsNullOrEmpty(MainEntityIdPropertyName))
                {
                    SetPropertyValue(detail, MainEntityIdPropertyName, MainEntity.Id);
                }
                
                // 設定商品ID - 優先使用採購明細中的商品，否則使用直接選擇的商品
                if (item.SelectedPurchaseDetail?.Product != null)
                {
                    SetPropertyValue(detail, "ProductId", item.SelectedPurchaseDetail.Product.Id);
                }
                else if (item.SelectedProduct != null)
                {
                    SetPropertyValue(detail, "ProductId", item.SelectedProduct.Id);
                }
                
                SetPropertyValue(detail, QuantityPropertyName, item.ReceivedQuantity);
                SetPropertyValue(detail, UnitPricePropertyName, item.UnitPrice);
                SetPropertyValue(detail, RemarksPropertyName, item.Remarks);
                SetPropertyValue(detail, "OrderQuantity", item.OrderQuantity > 0 ? item.OrderQuantity : item.ReceivedQuantity);
                
                if (!string.IsNullOrEmpty(WarehouseIdPropertyName) && item.SelectedWarehouse != null)
                {
                    SetPropertyValue(detail, WarehouseIdPropertyName, item.SelectedWarehouse.Id);
                }
                
                if (!string.IsNullOrEmpty(WarehouseLocationIdPropertyName) && item.SelectedWarehouseLocation != null)
                {
                    SetPropertyValue(detail, WarehouseLocationIdPropertyName, item.SelectedWarehouseLocation.Id);
                }
                
                if (!string.IsNullOrEmpty(PurchaseOrderDetailIdPropertyName) && item.SelectedPurchaseDetail != null)
                {
                    SetPropertyValue(detail, PurchaseOrderDetailIdPropertyName, item.SelectedPurchaseDetail.Id);
                }
            }
            
            details.Add(detail);
        }
        
        return details;
    }

    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToDetailEntities();
        await OnDetailsChanged.InvokeAsync(details);
    }

    private async Task<(Warehouse? warehouse, WarehouseLocation? location)> GetLastReceivingWarehouseAsync(int productId)
    {
        try
        {
            var receivingDetails = await PurchaseReceivingDetailService.GetByProductIdAsync(productId);
            var latestDetail = receivingDetails.FirstOrDefault();
            
            return (latestDetail?.Warehouse, latestDetail?.WarehouseLocation);
        }
        catch
        {
            return (null, null);
        }
    }

    private T? GetPropertyValue<T>(object obj, string propertyName)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property == null) return default(T);
        
        var value = property.GetValue(obj);
        if (value == null) return default(T);
        
        if (typeof(T) == typeof(object)) return (T)value;
        
        return (T)Convert.ChangeType(value, typeof(T));
    }

    private void SetPropertyValue(object obj, string propertyName, object? value)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property != null && property.CanWrite)
        {
            if (value != null && property.PropertyType != value.GetType())
            {
                if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    var underlyingType = Nullable.GetUnderlyingType(property.PropertyType);
                    value = Convert.ChangeType(value, underlyingType!);
                }
                else
                {
                    value = Convert.ChangeType(value, property.PropertyType);
                }
            }
            property.SetValue(obj, value);
        }
    }

    // ===== SearchableSelect 事件處理 =====
    private void OnPurchaseDetailInputFocus(ReceivingItem item)
    {
        if (!string.IsNullOrWhiteSpace(item.ProductSearch))
        {
            _ = OnPurchaseDetailSearchInput(item, item.ProductSearch);
        }
        else
        {
            item.SelectedIndex = -1;
            var availableDetails = GetAvailablePurchaseDetails();
            item.FilteredPurchaseDetails = availableDetails.Take(20).ToList();
            item.ShowDropdown = item.FilteredPurchaseDetails.Any();
            StateHasChanged();
        }
    }

    private async Task OnPurchaseDetailInputBlur(ReceivingItem item)
    {
        await Task.Delay(100);
        item.ShowDropdown = false;
        StateHasChanged();
    }

    private async Task OnPurchaseDetailSelected(ReceivingItem item, PurchaseOrderDetail detail)
    {
        var wasEmpty = IsEmptyRow(item);
        
        // 設定選中的採購明細
        item.SelectedPurchaseDetail = detail;
        item.SelectedProduct = detail.Product; // 同時更新 SelectedProduct 以保持向下相容
        item.UnitPrice = detail.UnitPrice; // 預填採購單價
        item.ProductSearch = item.DisplayName; // 使用包含採購單號的顯示名稱
        
        // 自動帶出最近進貨的倉庫和庫位（只有在尚未選擇時才自動填入）
        if (item.SelectedWarehouse == null && detail.Product != null)
        {
            var (warehouse, location) = await GetLastReceivingWarehouseAsync(detail.Product.Id);
            if (warehouse != null)
            {
                item.SelectedWarehouse = warehouse;
                if (location != null && item.SelectedWarehouseLocation == null)
                {
                    item.SelectedWarehouseLocation = location;
                }
            }
        }
        
        item.ShowDropdown = false;
        item.SelectedIndex = -1;
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private void OnPurchaseDetailItemMouseEnter(ReceivingItem item, int index)
    {
        item.SelectedIndex = index;
        StateHasChanged();
    }

    private async Task OnPurchaseDetailSearchInput(ReceivingItem item, string? searchValue)
    {
        var wasEmpty = IsEmptyRow(item);
        
        item.ProductSearch = searchValue ?? string.Empty;
        
        if (string.IsNullOrWhiteSpace(searchValue))
        {
            item.SelectedPurchaseDetail = null;
            item.SelectedProduct = null;
            item.SelectedIndex = -1;
            
            var availableDetails = GetAvailablePurchaseDetails();
            item.FilteredPurchaseDetails = availableDetails.Take(20).ToList();
            item.ShowDropdown = item.FilteredPurchaseDetails.Any();
        }
        else
        {
            var availableDetails = GetAvailablePurchaseDetails();
            
            // 搜尋邏輯：支援商品代碼、商品名稱、採購單號
            item.FilteredPurchaseDetails = availableDetails
                .Where(pd => 
                {
                    // 基本商品搜尋
                    var basicMatch = pd.Product?.Code?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true ||
                                   pd.Product?.Name?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true;
                    
                    // 採購單號搜尋
                    var purchaseOrderMatch = pd.PurchaseOrder?.PurchaseOrderNumber?.Contains(searchValue, StringComparison.OrdinalIgnoreCase) == true;
                    
                    return basicMatch || purchaseOrderMatch;
                })
                .Take(20)
                .ToList();
            
            item.ShowDropdown = item.FilteredPurchaseDetails.Any();
            item.SelectedIndex = item.FilteredPurchaseDetails.Any() ? 0 : -1;
        }
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnReceivedQuantityInput(ReceivingItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(value))
        {
            item.ReceivedQuantity = 0;
        }
        else if (int.TryParse(value, out var quantity))
        {
            item.ReceivedQuantity = quantity;
        }
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnWarehouseSelectionChanged(ReceivingItem item, string? warehouseIdStr)
    {
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(warehouseIdStr) || !int.TryParse(warehouseIdStr, out var warehouseId))
        {
            item.SelectedWarehouse = null;
        }
        else
        {
            item.SelectedWarehouse = Warehouses.FirstOrDefault(w => w.Id == warehouseId);
        }
        
        item.SelectedWarehouseLocation = null;
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnWarehouseLocationSelectionChanged(ReceivingItem item, string? warehouseLocationIdStr)
    {
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(warehouseLocationIdStr) || !int.TryParse(warehouseLocationIdStr, out var warehouseLocationId))
        {
            item.SelectedWarehouseLocation = null;
        }
        else
        {
            item.SelectedWarehouseLocation = WarehouseLocations.FirstOrDefault(wl => wl.Id == warehouseLocationId);
        }
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnRemarksInput(ReceivingItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        item.Remarks = value ?? string.Empty;
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleInputChange(
            ReceivingItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= ReceivingItems.Count) return;
        
        var removedItem = ReceivingItems[index];
        
        AutoEmptyRowHelper.ForAny<ReceivingItem>.HandleItemRemove(
            ReceivingItems, removedItem, IsEmptyRow, CreateEmptyItem);
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private List<Product> GetAvailableProducts()
    {
        if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
        {
            return new List<Product>();
        }
        
        // 返回去重後的商品清單，但保留採購明細資訊供後續使用
        return AvailableProducts;
    }
    
    /// <summary>
    /// 取得可用的採購明細清單（支援三層篩選：廠商->採購單->商品）
    /// </summary>
    private List<PurchaseOrderDetail> GetAvailablePurchaseDetails()
    {
        if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
        {
            return new List<PurchaseOrderDetail>();
        }
        
        var filteredDetails = AvailablePurchaseDetails.AsEnumerable();
        
        // 第二層篩選：採購單
        if (SelectedPurchaseOrderId.HasValue && SelectedPurchaseOrderId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(pd => pd.PurchaseOrderId == SelectedPurchaseOrderId.Value);
        }
        
        // 第三層篩選：商品
        if (FilterProductId.HasValue && FilterProductId.Value > 0)
        {
            filteredDetails = filteredDetails.Where(pd => pd.ProductId == FilterProductId.Value);
        }
        
        return filteredDetails.ToList();
    }


    private decimal GetTotalAmount()
    {
        return ReceivingItems
            .Where(item => !IsEmptyRow(item) && item.SelectedPurchaseDetail != null && item.ReceivedQuantity > 0)
            .Sum(item => item.ReceivedQuantity * item.UnitPrice);
    }

    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        if (!AutoEmptyRowHelper.ForAny<ReceivingItem>.HasSufficientItems(ReceivingItems, IsEmptyRow, 1))
        {
            errors.Add("至少需要一個入庫商品");
        }
        else
        {
            var nonEmptyItems = AutoEmptyRowHelper.ForAny<ReceivingItem>.GetNonEmptyItems(ReceivingItems, IsEmptyRow);
            
            // 檢查是否有選擇倉庫（如果啟用倉庫功能）
            if (ShowWarehouse)
            {
                var itemsWithoutWarehouse = nonEmptyItems.Where(item => item.SelectedWarehouse == null).ToList();
                if (itemsWithoutWarehouse.Any())
                {
                    var productNames = itemsWithoutWarehouse
                        .Select(item => item.SelectedProduct?.Name ?? item.DisplayName)
                        .Where(name => !string.IsNullOrEmpty(name))
                        .ToList();
                    
                    if (productNames.Any())
                    {
                        errors.Add($"以下商品必須選擇倉庫：{string.Join("、", productNames)}");
                    }
                    else
                    {
                        errors.Add("所有商品都必須選擇倉庫");
                    }
                }
            }
            
            // 檢查相同商品在相同倉庫位置的重複（只有在倉庫都已選擇的情況下才檢查）
            var itemsWithWarehouse = nonEmptyItems.Where(item => item.SelectedProduct != null && item.SelectedWarehouse != null).ToList();
            if (itemsWithWarehouse.Any())
            {
                var itemGroups = itemsWithWarehouse
                    .GroupBy(item => new { 
                        ProductId = item.SelectedProduct!.Id, 
                        WarehouseId = item.SelectedWarehouse!.Id, 
                        WarehouseLocationId = item.SelectedWarehouseLocation?.Id 
                    })
                    .Where(g => g.Count() > 1)
                    .ToList();
                    
                if (itemGroups.Any())
                {
                    errors.Add("存在相同商品在相同倉庫位置的重複記錄");
                }
            }
        }
          
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }

    public class ReceivingItem
    {
        public string ProductSearch { get; set; } = string.Empty;
        public Product? SelectedProduct { get; set; }
        public int ReceivedQuantity { get; set; } = 0;
        public decimal UnitPrice { get; set; } = 0;
        public string Remarks { get; set; } = string.Empty;
        public Warehouse? SelectedWarehouse { get; set; }
        public WarehouseLocation? SelectedWarehouseLocation { get; set; }
        public bool ShowDropdown { get; set; } = false;
        public int SelectedIndex { get; set; } = -1;
        public List<Product> FilteredProducts { get; set; } = new List<Product>();
        public TDetailEntity? ExistingDetailEntity { get; set; }
        
        // === 新增：採購明細相關屬性 ===
        public PurchaseOrderDetail? SelectedPurchaseDetail { get; set; }
        public List<PurchaseOrderDetail> FilteredPurchaseDetails { get; set; } = new List<PurchaseOrderDetail>();
        
        // === 採購單相關資訊（從選中的採購明細中獲取） ===
        public string? PurchaseOrderNumber => SelectedPurchaseDetail?.PurchaseOrder?.PurchaseOrderNumber;
        public int? PurchaseOrderDetailId => SelectedPurchaseDetail?.Id;
        public int? PurchaseOrderId => SelectedPurchaseDetail?.PurchaseOrderId;
        public int OrderQuantity => SelectedPurchaseDetail?.OrderQuantity ?? 0;
        public int PreviousReceivedQuantity => SelectedPurchaseDetail?.ReceivedQuantity ?? 0;
        public int PendingQuantity => OrderQuantity - PreviousReceivedQuantity;
        
        /// <summary>
        /// 取得顯示用的商品名稱（包含採購單號）
        /// </summary>
        public string DisplayName => 
            SelectedPurchaseDetail?.Product != null && !string.IsNullOrEmpty(SelectedPurchaseDetail.PurchaseOrder?.PurchaseOrderNumber)
                ? $"採購單 {SelectedPurchaseDetail.PurchaseOrder.PurchaseOrderNumber} [{SelectedPurchaseDetail.Product.Code}] {SelectedPurchaseDetail.Product.Name}"
                : SelectedProduct != null 
                    ? $"[{SelectedProduct.Code}] {SelectedProduct.Name}" 
                    : ProductSearch;
    }
}