@* 互動式表格組件 - 支援多種輸入控件和統一的UI風格 *@
@using System.Reflection
@using System.Web
@using ERPCore2.Components.Shared.Buttons
@typeparam TItem

<div class="table-responsive table-container-hover interactive-table-container">
    <table class="table @GetTableClass() interactive-table">
        @if (ShowHeader && ColumnDefinitions != null && ColumnDefinitions.Any())
        {
            <thead class="@GetHeaderClass()">
                <tr>
                    @if (ShowRowNumbers)
                    {
                        <th scope="col" class="text-center" style="width: 60px;">#</th>
                    }
                    @foreach (var column in ColumnDefinitions)
                    {
                        <th scope="col" 
                            class="@column.HeaderCssClass @(column.HideOnMobile ? "d-none d-md-table-cell" : "")" 
                            style="@(GetColumnWidthStyle(column))">
                            @if (!string.IsNullOrEmpty(column.IconClass))
                            {
                                <i class="@column.IconClass me-1"></i>
                            }
                            @column.Title
                            @if (column.IsRequired)
                            {
                                <span class="text-danger ms-1">*</span>
                            }
                        </th>
                    }
                    @if (ShowActions && ActionsTemplate != null)
                    {
                        <th scope="col" class="text-center table-actions-column" style="@GetActionsColumnStyle()">@ActionsHeader</th>
                    }
                    @if (ShowBuiltInActions)
                    {
                        <th scope="col" class="text-center table-actions-column" style="@GetActionsColumnStyle()">@ActionsHeader</th>
                    }
                </tr>
            </thead>
        }
        <tbody>
            @if (Items != null && Items.Any())
            {
                var itemIndex = 0;
                @foreach (var item in Items)
                {
                    var currentIndex = itemIndex;
                    <tr class="@GetRowClass(item, currentIndex)" 
                        @onclick="() => HandleRowClick(item)"
                        style="@(EnableRowClick ? $"cursor: {RowClickCursor};" : "")">
                        
                        @if (ShowRowNumbers)
                        {
                            <td class="text-center text-muted">
                                <small>@(currentIndex + 1)</small>
                            </td>
                        }
                        
                        @foreach (var column in ColumnDefinitions ?? new List<InteractiveColumnDefinition>())
                        {
                            <td class="@column.CellCssClass @(column.HideOnMobile ? "d-none d-md-table-cell" : "")"
                                style="@(GetColumnWidthStyle(column))"
                                @onclick:stopPropagation="@(column.ColumnType != InteractiveColumnType.Display)">
                                
                                @* 根據欄位類型渲染不同的控件 *@
                                @if (column.ColumnType == InteractiveColumnType.Display)
                                {
                                    @* 純顯示文字 *@
                                    var value = GetPropertyValue(item, column.PropertyName);
                                    string displayText;
                                    
                                    if (value == null)
                                    {
                                        displayText = column.NullDisplayText ?? "-";
                                    }
                                    else if (column.DisplayFormatter != null)
                                    {
                                        displayText = column.DisplayFormatter(value);
                                    }
                                    else
                                    {
                                        displayText = HttpUtility.HtmlEncode(value.ToString() ?? "");
                                    }

                                    <span>@((MarkupString)displayText)</span>
                                }
                                else if (column.ColumnType == InteractiveColumnType.Input)
                                {
                                    @* 文字輸入框 *@
                                    var value = GetPropertyValue(item, column.PropertyName);
                                    var stringValue = value?.ToString() ?? "";
                                    var isDisabled = IsReadOnly || column.IsDisabled;
                                    var validationClass = GetValidationCssClass(item, column.PropertyName);
                                    
                                    <input type="text" 
                                           class="form-control form-control-sm @validationClass" 
                                           value="@stringValue"
                                           placeholder="@column.Placeholder"
                                           title="@column.Tooltip"
                                           disabled="@isDisabled"
                                           readonly="@column.IsReadOnly"
                                           @oninput="async (e) => await HandleInputChange(column, item, e.Value?.ToString())" />
                                }
                                else if (column.ColumnType == InteractiveColumnType.Number)
                                {
                                    @* 數字輸入框 *@
                                    var value = GetPropertyValue(item, column.PropertyName);
                                    var stringValue = value?.ToString() ?? "";
                                    var isDisabled = IsReadOnly || column.IsDisabled;
                                    var validationClass = GetValidationCssClass(item, column.PropertyName);
                                    
                                    <input type="number" 
                                           class="form-control form-control-sm @validationClass" 
                                           value="@stringValue"
                                           placeholder="@column.Placeholder"
                                           title="@column.Title"
                                           min="@column.MinValue"
                                           max="@column.MaxValue"
                                           step="@column.Step"
                                           disabled="@isDisabled"
                                           readonly="@column.IsReadOnly"
                                           @oninput="async (e) => await HandleInputChange(column, item, e.Value?.ToString())" />
                                }
                                else if (column.ColumnType == InteractiveColumnType.Select)
                                {
                                    @* 下拉選單 *@
                                    var value = GetPropertyValue(item, column.PropertyName);
                                    var selectedValue = value?.ToString() ?? "";
                                    var isDisabled = IsReadOnly || column.IsDisabled;
                                    var validationClass = GetValidationCssClass(item, column.PropertyName);
                                    
                                    <select class="form-select form-select-sm @validationClass"
                                            value="@selectedValue"
                                            title="@column.Title"
                                            disabled="@isDisabled"
                                            @onchange="async (e) => await HandleSelectionChange(column, item, e.Value)">
                                        
                                        @if (!string.IsNullOrEmpty(column.Placeholder))
                                        {
                                            <option value="">@column.Placeholder</option>
                                        }
                                        
                                        @if (column.Options != null)
                                        {
                                            @foreach (var option in column.Options)
                                            {
                                                <option value="@option.Value" disabled="@option.IsDisabled">
                                                    @option.Text
                                                </option>
                                            }
                                        }
                                    </select>
                                }
                                else if (column.ColumnType == InteractiveColumnType.Checkbox)
                                {
                                    @* 勾選框 *@
                                    var value = GetPropertyValue(item, column.PropertyName);
                                    var isChecked = value is bool boolValue && boolValue;
                                    var isDisabled = IsReadOnly || column.IsDisabled;
                                    
                                    <div class="form-check form-switch d-flex justify-content-center">
                                        <input class="form-check-input" 
                                               type="checkbox" 
                                               checked="@isChecked"
                                               title="@column.Title"
                                               disabled="@isDisabled"
                                               @onchange="async (e) => await HandleCheckboxChange(column, item, e.Value)" />
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(column.CheckedText) || !string.IsNullOrEmpty(column.UncheckedText))
                                    {
                                        <small class="@(isChecked ? "text-success" : "text-muted")">
                                            @(isChecked ? column.CheckedText : column.UncheckedText)
                                        </small>
                                    }
                                }
                                else if (column.ColumnType == InteractiveColumnType.Button)
                                {
                                    @* 按鈕 *@
                                    var isDisabled = IsReadOnly || column.IsDisabled;
                                    var buttonDisabled = isDisabled || (column.IsButtonDisabled?.Invoke(item!) ?? false);
                                    
                                    <GenericButtonComponent Text="@column.ButtonText"
                                                           IconClass="@column.ButtonIcon"
                                                           Variant="@column.ButtonVariant"
                                                           Size="@column.ButtonSize"
                                                           IsDisabled="@buttonDisabled"
                                                           Title="@column.Title"
                                                           OnClick="async () => await HandleButtonClick(column, item)" />
                                }
                                else if (column.ColumnType == InteractiveColumnType.Custom && column.CustomTemplate != null)
                                {
                                    @* 自訂模板 - 支援鍵盤導航 *@
                                    @if (column.EnableKeyboardNavigation)
                                    {
                                        <div @onkeydown="async (e) => await HandleKeyboardNavigation(column, item, e)">
                                            @column.CustomTemplate(item!)
                                        </div>
                                    }
                                    else
                                    {
                                        @column.CustomTemplate(item!)
                                    }
                                }
                            </td>
                        }
                        
                        @if (ShowActions && ActionsTemplate != null)
                        {
                            <td class="text-center table-actions-column" style="@GetActionsColumnStyle()" @onclick:stopPropagation="true">
                                @ActionsTemplate(item)
                            </td>
                        }
                        @if (ShowBuiltInActions)
                        {
                            <td class="text-center table-actions-column" style="@GetActionsColumnStyle()" @onclick:stopPropagation="true">
                                @GetBuiltInActionsTemplate()(item)
                            </td>
                        }
                    </tr>
                    itemIndex++;
                }
            }
            else
            {
                <tr>
                    <td colspan="@GetColspan()" class="text-center py-4 text-light-custom">
                        @if (EmptyTemplate != null)
                        {
                            @EmptyTemplate
                        }
                        else
                        {
                            <i class="fas fa-inbox fa-2x mb-2 text-light-custom"></i>
                            <br />
                            @EmptyMessage
                        }
                    </td>
                </tr>
            }
        </tbody>
        @if (ShowTotalRow && Items != null && Items.Any())
        {
            <tfoot>
                <tr class="table-info">
                    @if (ShowRowNumbers)
                    {
                        <th></th>
                    }
                    @foreach (var column in ColumnDefinitions ?? new List<InteractiveColumnDefinition>())
                    {
                        <th class="@(column.HideOnMobile ? "d-none d-md-table-cell" : "")" 
                            style="@(GetColumnWidthStyle(column))">
                            @if (TotalRowTemplate != null)
                            {
                                @TotalRowTemplate(column)
                            }
                        </th>
                    }
                    @if (ShowActions)
                    {
                        <th style="@GetActionsColumnStyle()"></th>
                    }
                    @if (ShowBuiltInActions)
                    {
                        <th style="@GetActionsColumnStyle()"></th>
                    }
                </tr>
            </tfoot>
        }
    </table>
</div>

@code {
    #region 參數定義
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public List<InteractiveColumnDefinition>? ColumnDefinitions { get; set; }
    [Parameter] public RenderFragment<TItem>? ActionsTemplate { get; set; }
    [Parameter] public RenderFragment? EmptyTemplate { get; set; }
    [Parameter] public RenderFragment<InteractiveColumnDefinition>? TotalRowTemplate { get; set; }
    
    // 表格樣式設定
    [Parameter] public bool ShowHeader { get; set; } = true;
    [Parameter] public bool ShowActions { get; set; } = false;
    [Parameter] public bool ShowRowNumbers { get; set; } = false;
    [Parameter] public bool ShowTotalRow { get; set; } = false;
    [Parameter] public bool IsStriped { get; set; } = true;
    [Parameter] public bool IsHoverable { get; set; } = true;
    [Parameter] public bool IsBordered { get; set; } = true;
    [Parameter] public bool IsReadOnly { get; set; } = false;
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public string EmptyMessage { get; set; } = "沒有找到資料";
    [Parameter] public string ActionsHeader { get; set; } = "操作";
    [Parameter] public string ActionsColumnWidth { get; set; } = "auto"; // 操作欄位寬度參數：可設定固定值(如"120px")、百分比(如"10%")，或"auto"自動計算
    
    // 行互動設定
    [Parameter] public Func<TItem, int, string>? GetRowCssClass { get; set; }
    [Parameter] public EventCallback<TItem> OnRowClick { get; set; }
    [Parameter] public bool EnableRowClick { get; set; } = false;
    [Parameter] public string RowClickCursor { get; set; } = "pointer";
    
    // 驗證相關
    [Parameter] public EventCallback<(TItem item, string propertyName, string? errorMessage)> OnValidationFailed { get; set; }
    [Parameter] public Dictionary<string, string>? ValidationErrors { get; set; }
    
    // 內建操作按鈕相關
    [Parameter] public bool ShowBuiltInActions { get; set; } = false;
    [Parameter] public bool ShowBuiltInDeleteButton { get; set; } = true;
    [Parameter] public string DeleteButtonIcon { get; set; } = "bi bi-trash text-white";
    [Parameter] public ButtonVariant DeleteButtonVariant { get; set; } = ButtonVariant.Danger;
    [Parameter] public ButtonSize DeleteButtonSize { get; set; } = ButtonSize.Large;
    [Parameter] public string DeleteButtonTitle { get; set; } = "刪除";
    [Parameter] public Func<TItem, bool>? IsDeleteDisabled { get; set; }
    [Parameter] public EventCallback<TItem> OnItemDelete { get; set; }
    [Parameter] public RenderFragment<TItem>? CustomActionsTemplate { get; set; }
    #endregion

    #region 私有方法
    private string GetTableClass()
    {
        var classes = new List<string>();
        
        if (IsStriped) classes.Add("table-striped");
        if (IsHoverable) classes.Add("table-hover");
        if (IsBordered) classes.Add("table-bordered");
        classes.Add("table-with-column-borders");
        
        if (!string.IsNullOrEmpty(CssClass))
            classes.Add(CssClass);
            
        return string.Join(" ", classes.Where(c => !string.IsNullOrEmpty(c)));
    }

    private string GetHeaderClass()
    {
        return "table-header-primary";
    }

    private string GetRowClass(TItem item, int index)
    {
        var baseClass = "";
        if (GetRowCssClass != null)
            baseClass = GetRowCssClass(item, index) ?? "";
        return baseClass;
    }

    private string? GetColumnWidthStyle(InteractiveColumnDefinition column)
    {
        return !string.IsNullOrEmpty(column.Width) ? $"width: {column.Width};" : null;
    }

    private string? GetActionsColumnStyle()
    {
        // 如果有明確設定寬度，直接使用
        if (!string.IsNullOrEmpty(ActionsColumnWidth) && ActionsColumnWidth != "auto")
        {
            return $"width: {ActionsColumnWidth};";
        }
        
        // 自動計算剩餘寬度
        if (ColumnDefinitions != null && ColumnDefinitions.Any())
        {
            var totalUsedPercentage = 0m;
            var hasPercentageColumns = false;
            
            foreach (var column in ColumnDefinitions)
            {
                if (!string.IsNullOrEmpty(column.Width) && column.Width.EndsWith("%"))
                {
                    hasPercentageColumns = true;
                    var percentageStr = column.Width.Replace("%", "");
                    if (decimal.TryParse(percentageStr, out var percentage))
                    {
                        totalUsedPercentage += percentage;
                    }
                }
            }
            
            // 如果有使用百分比的欄位，計算剩餘空間
            if (hasPercentageColumns)
            {
                var remainingPercentage = 100 - totalUsedPercentage;
                
                // 確保至少有 5% 的空間給操作欄位，最多不超過 15%
                var actionsPercentage = Math.Max(5, Math.Min(15, remainingPercentage));
                
                return $"width: {actionsPercentage}%;";
            }
        }
        
        // 預設情況：使用固定寬度
        return "width: 120px;";
    }

    private int GetColspan()
    {
        var columnCount = ColumnDefinitions?.Count ?? 0;
        if (ShowRowNumbers) columnCount++;
        if (ShowActions) columnCount++;
        if (ShowBuiltInActions) columnCount++;
        return columnCount;
    }

    private async Task HandleRowClick(TItem item)
    {
        if (EnableRowClick && OnRowClick.HasDelegate)
        {
            await OnRowClick.InvokeAsync(item);
        }
    }

    private object? GetPropertyValue(TItem item, string propertyName)
    {
        if (item == null || string.IsNullOrEmpty(propertyName))
            return null;

        // 支援巢狀屬性 例如: "Customer.Name"
        var parts = propertyName.Split('.');
        object? currentValue = item;
        
        foreach (var part in parts)
        {
            if (currentValue == null) return null;
            
            var currentType = currentValue.GetType();
            var property = currentType.GetProperty(part);
            
            if (property == null) return null;
            
            currentValue = property.GetValue(currentValue);
        }
        
        return currentValue;
    }

    private void SetPropertyValue(TItem item, string propertyName, object? value)
    {
        if (item == null || string.IsNullOrEmpty(propertyName))
            return;

        try
        {
            var parts = propertyName.Split('.');
            object? currentObj = item;
            
            // 找到最後一個物件
            for (int i = 0; i < parts.Length - 1; i++)
            {
                if (currentObj == null) return;
                
                var property = currentObj.GetType().GetProperty(parts[i]);
                if (property == null) return;
                
                currentObj = property.GetValue(currentObj);
            }
            
            if (currentObj == null) return;
            
            // 設定最後的屬性值
            var finalProperty = currentObj.GetType().GetProperty(parts.Last());
            if (finalProperty != null && finalProperty.CanWrite)
            {
                // 型別轉換
                var convertedValue = ConvertValue(value, finalProperty.PropertyType);
                finalProperty.SetValue(currentObj, convertedValue);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"設定屬性值失敗: {ex.Message}");
        }
    }

    private object? ConvertValue(object? value, Type targetType)
    {
        if (value == null)
            return targetType.IsValueType ? Activator.CreateInstance(targetType) : null;

        if (targetType.IsAssignableFrom(value.GetType()))
            return value;

        // 處理 Nullable 型別
        var underlyingType = Nullable.GetUnderlyingType(targetType) ?? targetType;

        try
        {
            if (underlyingType == typeof(bool) && value is string strValue)
            {
                return bool.TryParse(strValue, out var boolResult) ? boolResult : false;
            }

            return Convert.ChangeType(value, underlyingType);
        }
        catch
        {
            return targetType.IsValueType ? Activator.CreateInstance(targetType) : null;
        }
    }

    private async Task ValidateField(TItem item, InteractiveColumnDefinition column, string? value)
    {
        if (column.IsRequired && string.IsNullOrWhiteSpace(value))
        {
            await OnValidationFailed.InvokeAsync((item, column.PropertyName, $"{column.Title} 為必填欄位"));
            return;
        }

        if (!string.IsNullOrEmpty(column.ValidationPattern) && !string.IsNullOrWhiteSpace(value))
        {
            var regex = new System.Text.RegularExpressions.Regex(column.ValidationPattern);
            if (!regex.IsMatch(value))
            {
                await OnValidationFailed.InvokeAsync((item, column.PropertyName, $"{column.Title} 格式不正確"));
                return;
            }
        }

        if (column.ColumnType == InteractiveColumnType.Number && !string.IsNullOrWhiteSpace(value))
        {
            if (decimal.TryParse(value, out var numValue))
            {
                if (column.MinValue.HasValue && numValue < column.MinValue.Value)
                {
                    await OnValidationFailed.InvokeAsync((item, column.PropertyName, $"{column.Title} 不能小於 {column.MinValue.Value}"));
                    return;
                }

                if (column.MaxValue.HasValue && numValue > column.MaxValue.Value)
                {
                    await OnValidationFailed.InvokeAsync((item, column.PropertyName, $"{column.Title} 不能大於 {column.MaxValue.Value}"));
                    return;
                }
            }
            else
            {
                await OnValidationFailed.InvokeAsync((item, column.PropertyName, $"{column.Title} 必須為有效數字"));
                return;
            }
        }
    }

    private string GetValidationCssClass(TItem item, string propertyName)
    {
        if (ValidationErrors?.ContainsKey($"{item?.GetHashCode()}_{propertyName}") == true)
        {
            return "is-invalid";
        }
        return "";
    }
    #endregion
    #region 事件處理方法
    private async Task HandleInputChange(InteractiveColumnDefinition column, TItem item, string? value)
    {
        await ValidateField(item, column, value);
        SetPropertyValue(item, column.PropertyName, value);
        
        if (column.OnInputChanged.HasValue)
        {
            await column.OnInputChanged.Value.InvokeAsync((item!, value));
        }
    }

    private async Task HandleSelectionChange(InteractiveColumnDefinition column, TItem item, object? value)
    {
        SetPropertyValue(item, column.PropertyName, value);
        
        if (column.OnSelectionChanged.HasValue)
        {
            await column.OnSelectionChanged.Value.InvokeAsync((item!, value));
        }
    }

    private async Task HandleCheckboxChange(InteractiveColumnDefinition column, TItem item, object? value)
    {
        var isChecked = value is bool boolValue && boolValue;
        SetPropertyValue(item, column.PropertyName, isChecked);
        
        if (column.OnCheckboxChanged.HasValue)
        {
            await column.OnCheckboxChanged.Value.InvokeAsync((item!, isChecked));
        }
    }

    private async Task HandleButtonClick(InteractiveColumnDefinition column, TItem item)
    {
        if (column.OnButtonClick.HasValue)
        {
            await column.OnButtonClick.Value.InvokeAsync(item!);
        }
    }
    
    private RenderFragment<TItem> GetBuiltInActionsTemplate()
    {
        return item => __builder =>
        {
            <div class="d-flex align-items-center justify-content-center h-100">
                @if (CustomActionsTemplate != null)
                {
                    @CustomActionsTemplate(item)
                }
                @if (ShowBuiltInDeleteButton)
                {
                    var isDeleteDisabled = IsReadOnly || (IsDeleteDisabled?.Invoke(item) ?? false);
                    <GenericButtonComponent Variant="@DeleteButtonVariant"
                                           IconClass="@DeleteButtonIcon"
                                           Size="@DeleteButtonSize"
                                           IsDisabled="@isDeleteDisabled"
                                           Title="@DeleteButtonTitle"
                                           OnClick="async () => await HandleBuiltInDelete(item)"
                                           StopPropagation="true"
                                           CssClass="btn-square" />
                }
            </div>
        };
    }
    
    private async Task HandleBuiltInDelete(TItem item)
    {
        if (OnItemDelete.HasDelegate)
        {
            await OnItemDelete.InvokeAsync(item);
        }
    }
    
    #region 鍵盤導航相關方法
    /// <summary>
    /// 處理鍵盤導航事件
    /// </summary>
    private async Task HandleKeyboardNavigation(InteractiveColumnDefinition column, TItem item, KeyboardEventArgs e)
    {
        if (!column.EnableKeyboardNavigation || column.GetDropdownItems == null || 
            column.GetShowDropdown == null || column.SetSelectedIndex == null || 
            column.GetSelectedIndex == null || column.SetShowDropdown == null)
            return;

        var dropdownItems = column.GetDropdownItems(item!).ToList();
        var showDropdown = column.GetShowDropdown(item!);
        var selectedIndex = column.GetSelectedIndex(item!);

        if (!showDropdown || !dropdownItems.Any())
            return;

        switch (e.Key)
        {
            case "ArrowDown":
                var newDownIndex = Math.Min(selectedIndex + 1, dropdownItems.Count - 1);
                column.SetSelectedIndex(item!, newDownIndex);
                await ScrollSelectedItemIntoView(column, item, newDownIndex);
                StateHasChanged();
                break;
                
            case "ArrowUp":
                var newUpIndex = Math.Max(selectedIndex - 1, 0);
                column.SetSelectedIndex(item!, newUpIndex);
                await ScrollSelectedItemIntoView(column, item, newUpIndex);
                StateHasChanged();
                break;
                
            case "Enter":
                if (selectedIndex >= 0 && selectedIndex < dropdownItems.Count)
                {
                    var selectedItem = dropdownItems[selectedIndex];
                    if (column.OnDropdownItemSelected.HasValue)
                    {
                        await column.OnDropdownItemSelected.Value.InvokeAsync((item!, selectedItem));
                    }
                }
                break;
                
            case "Escape":
                column.SetShowDropdown(item!, false);
                column.SetSelectedIndex(item!, -1);
                StateHasChanged();
                break;
        }
    }

    /// <summary>
    /// 判斷是否為導航按鍵（用於 preventDefault）
    /// </summary>
    private bool IsNavigationKey(KeyboardEventArgs e)
    {
        return e.Key is "ArrowDown" or "ArrowUp" or "Enter" or "Escape";
    }

    /// <summary>
    /// 將選中的項目捲動到可視範圍內
    /// </summary>
    private async Task ScrollSelectedItemIntoView(InteractiveColumnDefinition column, TItem item, int selectedIndex)
    {
        if (string.IsNullOrEmpty(column.DropdownContainerIdFormat))
            return;
            
        try
        {
            // 這裡可以添加 JavaScript 互操作來實現捲動
            // 目前先使用簡單的延遲
            await Task.Delay(1);
        }
        catch (Exception)
        {
            // 忽略 JavaScript 錯誤
        }
    }
    #endregion
    #endregion
}