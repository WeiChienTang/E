@* 銷售訂單產品管理組件 - 管理銷售訂單的多個產品資訊 - 使用 InteractiveTableComponent 統一UI *@

@inject INotificationService NotificationService
@using ERPCore2.Helpers
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@typeparam TSalesOrderDetailEntity where TSalesOrderDetailEntity : BaseEntity, new()
@typeparam TProductEntity where TProductEntity : BaseEntity
@typeparam TSalesOrderEntity where TSalesOrderEntity : BaseEntity

<div class="card border-0 shadow-sm">
    <div class="card-body p-0">
        <InteractiveTableComponent TItem="TSalesOrderDetailEntity" 
                                  Items="@Items"
                                  ColumnDefinitions="@GetColumnDefinitions()"
                                  IsReadOnly="@IsReadOnly"
                                  ShowRowNumbers="false"
                                  EmptyMessage="@EmptyMessage"
                                  ShowBuiltInActions="true"
                                  ShowBuiltInDeleteButton="true"
                                  OnItemDelete="@HandleItemDelete"
                                  ShowTotalRow="true"
                                  TotalRowTemplate="@GetTotalRowTemplate()" />
    </div>
</div>

@code {
    // ===== 基本參數 =====
    [Parameter] public List<TSalesOrderDetailEntity> Items { get; set; } = new();
    [Parameter] public List<TProductEntity> ProductOptions { get; set; } = new(); // 產品選項
    [Parameter] public List<Unit> UnitOptions { get; set; } = new(); // 單位選項
    [Parameter] public List<Warehouse> WarehouseOptions { get; set; } = new(); // 倉庫選項
    [Parameter] public int ParentEntityId { get; set; } // 銷售訂單ID
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "產品資訊";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "box-seam";
    [Parameter] public string ItemDisplayName { get; set; } = "產品";
    [Parameter] public string EmptyIcon { get; set; } = "box";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增產品";
    
    // ===== 委派參數 - Getter =====
    [Parameter] public Func<TSalesOrderDetailEntity, int?> GetProductId { get; set; } = item => null;
    [Parameter] public Func<TSalesOrderDetailEntity, decimal?> GetQuantity { get; set; } = item => null;
    [Parameter] public Func<TSalesOrderDetailEntity, decimal?> GetUnitPrice { get; set; } = item => null;
    [Parameter] public Func<TSalesOrderDetailEntity, decimal?> GetDiscount { get; set; } = item => null;
    [Parameter] public Func<TSalesOrderDetailEntity, int?> GetUnitId { get; set; } = item => null;
    [Parameter] public Func<TSalesOrderDetailEntity, int?> GetWarehouseId { get; set; } = item => null;
    [Parameter] public Func<TSalesOrderDetailEntity, string?> GetRemark { get; set; } = item => null;
    [Parameter] public Func<TProductEntity, int> GetProductOptionId { get; set; } = product => product.Id;
    [Parameter] public Func<TProductEntity, string> GetProductOptionDisplayText { get; set; } = product => 
    {
        // 檢查是否有 Name 和 Code 屬性並取得其值
        var nameProperty = product.GetType().GetProperty("Name");
        var codeProperty = product.GetType().GetProperty("Code");
        var priceProperty = product.GetType().GetProperty("Price");
        
        var name = nameProperty?.GetValue(product) as string ?? "";
        var code = codeProperty?.GetValue(product) as string ?? "";
        var price = priceProperty?.GetValue(product);
        
        var displayText = "";
        if (!string.IsNullOrEmpty(code) && !string.IsNullOrEmpty(name))
        {
            displayText = $"{code} - {name}";
        }
        else if (!string.IsNullOrEmpty(name))
        {
            displayText = name;
        }
        else if (!string.IsNullOrEmpty(code))
        {
            displayText = code;
        }
        else
        {
            displayText = product.ToString() ?? "";
        }
        
        // 如果有價格資訊，顯示在後面
        if (price != null && decimal.TryParse(price.ToString(), out var priceValue) && priceValue > 0)
        {
            displayText += $" (NT${priceValue:N0})";
        }
        
        return displayText;
    };
    [Parameter] public Func<Unit, int> GetUnitOptionId { get; set; } = unit => unit.Id;
    [Parameter] public Func<Unit, string> GetUnitOptionDisplayText { get; set; } = unit => unit.Name;
    [Parameter] public Func<Warehouse, int> GetWarehouseOptionId { get; set; } = warehouse => warehouse.Id;
    [Parameter] public Func<Warehouse, string> GetWarehouseOptionDisplayText { get; set; } = warehouse => warehouse.Name;
    
    // ===== 委派參數 - Setter =====
    [Parameter] public Action<TSalesOrderDetailEntity, int?> SetProductId { get; set; } = (item, productId) => { };
    [Parameter] public Action<TSalesOrderDetailEntity, decimal?> SetQuantity { get; set; } = (item, value) => { };
    [Parameter] public Action<TSalesOrderDetailEntity, decimal?> SetUnitPrice { get; set; } = (item, value) => { };
    [Parameter] public Action<TSalesOrderDetailEntity, decimal?> SetDiscount { get; set; } = (item, value) => { };
    [Parameter] public Action<TSalesOrderDetailEntity, int?> SetUnitId { get; set; } = (item, value) => { };
    [Parameter] public Action<TSalesOrderDetailEntity, int?> SetWarehouseId { get; set; } = (item, value) => { };
    [Parameter] public Action<TSalesOrderDetailEntity, string?> SetRemark { get; set; } = (item, value) => { };
    [Parameter] public Action<TSalesOrderDetailEntity, int> SetSalesOrderId { get; set; } = (item, salesOrderId) => { }; // 設定銷售訂單ID
    
    // ===== 事件參數 =====
    [Parameter] public EventCallback<List<TSalesOrderDetailEntity>> ItemsChanged { get; set; }
    [Parameter] public EventCallback<TSalesOrderDetailEntity> ItemAdded { get; set; }
    [Parameter] public EventCallback<TSalesOrderDetailEntity> ItemRemoved { get; set; }
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        var emptyCount = Items.Count(IsEmptyRow);
        
        // 總是確保有一行空行可以輸入
        // 不論是否已有資料，都應該保持有空行供使用者新增
        EnsureOneEmptyRow();
        
        var emptyCountAfter = Items.Count(IsEmptyRow);
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    
    /// <summary>
    /// 檢查是否為空行
    /// 業務邏輯：只要選擇了產品，就算是有效的一行，不再是空行
    /// </summary>
    private bool IsEmptyRow(TSalesOrderDetailEntity item)
    {
        var productId = GetProductId(item);
        // 檢查產品ID是否為空（null 或 0 都算空）
        var isEmpty = !productId.HasValue || productId.Value <= 0;
        
        // 只要產品有值（大於0），就不是空行
        // 產品是核心欄位，其他欄位可以後續填寫
        return isEmpty;
    }
    
    /// <summary>
    /// 創建空的銷售訂單明細項目
    /// </summary>
    private TSalesOrderDetailEntity CreateEmptyItem()
    {
        var newItem = new TSalesOrderDetailEntity();
        SetSalesOrderId(newItem, ParentEntityId); // 設定銷售訂單ID
        return newItem;
    }
    
    /// <summary>
    /// 確保有一行空行
    /// </summary>
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.EnsureOneEmptyRow(
            Items, 
            IsEmptyRow, 
            CreateEmptyItem, 
            SetSalesOrderId, 
            ParentEntityId
        );
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        return new List<InteractiveColumnDefinition>
        {
            // 產品選擇欄位
            new() 
            { 
                Title = "產品", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "20%",
                CustomTemplate = item => 
                {
                    var salesOrderDetail = (TSalesOrderDetailEntity)item;
                    var productId = GetProductId(salesOrderDetail);
                    var selectedValue = productId?.ToString() ?? "";
                    
                    return @<select class="form-select form-select-sm" 
                                    value="@selectedValue"
                                    disabled="@IsReadOnly"
                                    @onchange="@(async (e) => await OnProductChanged((salesOrderDetail, e.Value)))">
                        <option value="">請選擇產品</option>
                        @foreach (var product in ProductOptions)
                        {
                            <option value="@GetProductOptionId(product)">@GetProductOptionDisplayText(product)</option>
                        }
                    </select>;
                }
            },
            
            // 數量 - 數字輸入
            new() 
            { 
                Title = "數量", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "12%",
                CustomTemplate = item => 
                {
                    var salesOrderDetail = (TSalesOrderDetailEntity)item;
                    var quantity = GetQuantity(salesOrderDetail) ?? 0;
                    var value = quantity > 0 ? quantity.ToString("F0") : ""; // 只有大於0才顯示，否則空白
                    
                    return @<input type="number" 
                                   class="form-control form-control-sm text-end" 
                                   value="@value"
                                   min="0"
                                   placeholder=""
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnQuantityChanged((salesOrderDetail, e.Value?.ToString())))" />;
                }
            },
            
            // 單價 - 數字輸入
            new() 
            { 
                Title = "單價", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "12%",
                CustomTemplate = item => 
                {
                    var salesOrderDetail = (TSalesOrderDetailEntity)item;
                    var unitPrice = GetUnitPrice(salesOrderDetail) ?? 0;
                    var value = unitPrice > 0 ? unitPrice.ToString("F0") : "";
                    
                    return @<input type="number" 
                                   class="form-control form-control-sm text-end" 
                                   value="@value"
                                   min="0"
                                   step="1"
                                   placeholder=""
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnUnitPriceChanged((salesOrderDetail, e.Value?.ToString())))" />;
                }
            },
            
            // 折扣 - 數字輸入
            new() 
            { 
                Title = "折扣(%)", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "10%",
                CustomTemplate = item => 
                {
                    var salesOrderDetail = (TSalesOrderDetailEntity)item;
                    var discount = GetDiscount(salesOrderDetail) ?? 0;
                    var value = discount > 0 ? discount.ToString("F0") : "";
                    
                    return @<input type="number" 
                                   class="form-control form-control-sm text-end" 
                                   value="@value"
                                   min="0"
                                   max="100"
                                   placeholder=""
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnDiscountChanged((salesOrderDetail, e.Value?.ToString())))" />;
                }
            },
            
            // 小計 - 計算欄位（唯讀）
            new() 
            { 
                Title = "小計", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "12%",
                CustomTemplate = item => 
                {
                    var salesOrderDetail = (TSalesOrderDetailEntity)item;
                    var subtotal = CalculateSubtotal(salesOrderDetail);
                    var displayValue = subtotal > 0 ? subtotal.ToString("N0") : "";
                    
                    return @<div class="form-control form-control-sm text-end bg-light" style="border: 1px solid #dee2e6;">
                        @displayValue
                    </div>;
                }
            },
            
            // 倉庫選擇欄位
            new() 
            { 
                Title = "倉庫", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "12%",
                CustomTemplate = item => 
                {
                    var salesOrderDetail = (TSalesOrderDetailEntity)item;
                    var warehouseId = GetWarehouseId(salesOrderDetail);
                    var selectedValue = warehouseId?.ToString() ?? "";
                    
                    return @<select class="form-select form-select-sm" 
                                    value="@selectedValue"
                                    disabled="@IsReadOnly"
                                    @onchange="(e) => OnWarehouseSelectionChanged(salesOrderDetail, e.Value?.ToString())">
                        <option value="">請選擇倉庫</option>
                        @if (WarehouseOptions != null)
                        {
                            @foreach (var warehouse in WarehouseOptions)
                            {
                                <option value="@warehouse.Id">@warehouse.Name</option>
                            }
                        }
                    </select>;
                }
            },
            
            // 單位選擇欄位
            new() 
            { 
                Title = "單位", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "8%",
                CustomTemplate = item => 
                {
                    var salesOrderDetail = (TSalesOrderDetailEntity)item;
                    var unitId = GetUnitId(salesOrderDetail);
                    var selectedValue = unitId?.ToString() ?? "";
                    
                    return @<select class="form-select form-select-sm" 
                                    value="@selectedValue"
                                    disabled="@IsReadOnly"
                                    @onchange="@(async (e) => await OnUnitChanged((salesOrderDetail, e.Value)))">
                        <option value="">請選擇單位</option>
                        @foreach (var unit in UnitOptions)
                        {
                            <option value="@GetUnitOptionId(unit)">@GetUnitOptionDisplayText(unit)</option>
                        }
                    </select>;
                }
            },
            
            // 備註 - 文字輸入
            new() 
            { 
                Title = "備註", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "17%",
                CustomTemplate = item => 
                {
                    var salesOrderDetail = (TSalesOrderDetailEntity)item;
                    var value = GetRemark(salesOrderDetail) ?? "";
                    
                    return @<input type="text" 
                                   class="form-control form-control-sm" 
                                   value="@value"
                                   placeholder="備註資訊"
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnRemarkChanged((salesOrderDetail, e.Value?.ToString())))" />;
                }
            }
        };
    }

    /// <summary>
    /// 取得合計行模板
    /// </summary>
    private RenderFragment<InteractiveColumnDefinition> GetTotalRowTemplate()
    {
        return column => __builder =>
        {
            if (column.Title == "產品")
            {
                <td class="fw-bold text-end">合計</td>
            }
            else if (column.Title == "數量")
            {
                var totalQuantity = CalculateTotalQuantity();
                <td class="fw-bold text-end">@(totalQuantity > 0 ? totalQuantity.ToString("N2") : "")</td>
            }
            else if (column.Title == "小計")
            {
                var totalAmount = CalculateTotalAmount();
                <td class="fw-bold text-end">@(totalAmount > 0 ? totalAmount.ToString("N0") : "")</td>
            }
            else
            {
                <td></td>
            }
        };
    }

    private async Task HandleItemDelete(TSalesOrderDetailEntity item)
    {
        var index = Items.IndexOf(item);
        await RemoveItemAsync(index);
    }

    // ===== 計算方法 =====
    
    /// <summary>
    /// 計算單項小計
    /// </summary>
    private decimal CalculateSubtotal(TSalesOrderDetailEntity item)
    {
        var quantity = GetQuantity(item) ?? 0m;
        var unitPrice = GetUnitPrice(item) ?? 0m;
        var discount = GetDiscount(item) ?? 0m;
        
        if (quantity <= 0 || unitPrice <= 0) return 0m;
        
        var subtotal = quantity * unitPrice;
        
        // 計算折扣
        if (discount > 0 && discount <= 100)
        {
            subtotal = subtotal * (1 - discount / 100);
        }
        
        return subtotal;
    }
    
    /// <summary>
    /// 計算總數量
    /// </summary>
    private decimal CalculateTotalQuantity()
    {
        var nonEmptyItems = AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.GetNonEmptyItems(Items, IsEmptyRow);
        return nonEmptyItems.Sum(item => GetQuantity(item) ?? 0m);
    }
    
    /// <summary>
    /// 計算總金額
    /// </summary>
    private decimal CalculateTotalAmount()
    {
        var nonEmptyItems = AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.GetNonEmptyItems(Items, IsEmptyRow);
        return nonEmptyItems.Sum(CalculateSubtotal);
    }

    // ===== 內部方法 =====

    private string GetProductDisplayText(TSalesOrderDetailEntity item)
    {
        var productId = GetProductId(item);
        if (productId.HasValue)
        {
            var product = ProductOptions.FirstOrDefault(p => GetProductOptionId(p) == productId.Value);
            if (product != null)
            {
                return GetProductOptionDisplayText(product);
            }
        }
        return "未知產品";
    }

    private string GetUnitDisplayText(TSalesOrderDetailEntity item)
    {
        var unitId = GetUnitId(item);
        if (unitId.HasValue)
        {
            var unit = UnitOptions.FirstOrDefault(u => GetUnitOptionId(u) == unitId.Value);
            if (unit != null)
            {
                return GetUnitOptionDisplayText(unit);
            }
        }
        return "-";
    }

    private string GetWarehouseDisplayText(TSalesOrderDetailEntity item)
    {
        var warehouseId = GetWarehouseId(item);
        if (warehouseId.HasValue)
        {
            var warehouse = WarehouseOptions.FirstOrDefault(w => GetWarehouseOptionId(w) == warehouseId.Value);
            if (warehouse != null)
            {
                return GetWarehouseOptionDisplayText(warehouse);
            }
        }
        return "-";
    }

    // ===== InteractiveTableComponent 事件處理 =====
    private async Task OnProductChanged((object item, object? value) args)
    {
        var salesOrderDetail = (TSalesOrderDetailEntity)args.item;
        var wasEmpty = IsEmptyRow(salesOrderDetail);
        
        if (args.value != null && !string.IsNullOrEmpty(args.value.ToString()) && int.TryParse(args.value.ToString(), out var productId) && productId > 0)
        {
            // 檢查是否已存在相同產品
            var existingProductIds = Items.Where(i => i != salesOrderDetail).Select(item => GetProductId(item)).Where(id => id.HasValue && id.Value > 0);
            if (existingProductIds.Any(id => id!.Value == productId))
            {
                await NotificationService.ShowErrorAsync("此產品已存在，請選擇其他產品");
                SetProductId(salesOrderDetail, null);
            }
            else
            {
                SetProductId(salesOrderDetail, productId);
                
                // 自動填入產品預設單價和單位（如果產品有相關資訊）
                var selectedProduct = ProductOptions.FirstOrDefault(p => GetProductOptionId(p) == productId);
                if (selectedProduct != null)
                {
                    // 自動填入產品預設單價
                    var priceProperty = selectedProduct.GetType().GetProperty("Price");
                    if (priceProperty != null)
                    {
                        var price = priceProperty.GetValue(selectedProduct);
                        if (price != null && decimal.TryParse(price.ToString(), out var priceValue) && priceValue > 0)
                        {
                            SetUnitPrice(salesOrderDetail, priceValue);
                        }
                    }
                    
                    // 自動填入產品預設單位
                    var unitIdProperty = selectedProduct.GetType().GetProperty("UnitId");
                    if (unitIdProperty != null)
                    {
                        var unitIdValue = unitIdProperty.GetValue(selectedProduct);
                        if (unitIdValue != null && int.TryParse(unitIdValue.ToString(), out var defaultUnitId) && defaultUnitId > 0)
                        {
                            // 確認該單位存在於選項中
                            var unitExists = UnitOptions.Any(u => GetUnitOptionId(u) == defaultUnitId);
                            if (unitExists)
                            {
                                SetUnitId(salesOrderDetail, defaultUnitId);
                            }
                        }
                    }
                }
                
                // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
                var added = AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.HandleInputChangeAdvanced(
                    Items, salesOrderDetail, IsEmptyRow, CreateEmptyItem, wasEmpty, SetSalesOrderId, ParentEntityId);
                
                await ItemsChanged.InvokeAsync(Items);
            }
        }
        else
        {
            SetProductId(salesOrderDetail, null);
            await ItemsChanged.InvokeAsync(Items);
        }
        StateHasChanged();
    }

    private async Task OnQuantityChanged((object item, string? value) args)
    {
        var salesOrderDetail = (TSalesOrderDetailEntity)args.item;
        var wasEmpty = IsEmptyRow(salesOrderDetail);
        
        if (string.IsNullOrEmpty(args.value))
        {
            // 如果沒有輸入數量，預設為 0
            SetQuantity(salesOrderDetail, 0);
        }
        else if (decimal.TryParse(args.value, out var quantity))
        {
            SetQuantity(salesOrderDetail, quantity);
        }
        
        // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
        AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.HandleInputChangeAdvanced(
            Items, salesOrderDetail, IsEmptyRow, CreateEmptyItem, wasEmpty, SetSalesOrderId, ParentEntityId);
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    private async Task OnUnitPriceChanged((object item, string? value) args)
    {
        var salesOrderDetail = (TSalesOrderDetailEntity)args.item;
        var wasEmpty = IsEmptyRow(salesOrderDetail);
        
        if (string.IsNullOrEmpty(args.value))
        {
            SetUnitPrice(salesOrderDetail, null);
        }
        else if (decimal.TryParse(args.value, out var price))
        {
            SetUnitPrice(salesOrderDetail, price);
        }
        
        // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
        AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.HandleInputChangeAdvanced(
            Items, salesOrderDetail, IsEmptyRow, CreateEmptyItem, wasEmpty, SetSalesOrderId, ParentEntityId);
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    private async Task OnDiscountChanged((object item, string? value) args)
    {
        var salesOrderDetail = (TSalesOrderDetailEntity)args.item;
        var wasEmpty = IsEmptyRow(salesOrderDetail);
        
        if (string.IsNullOrEmpty(args.value))
        {
            SetDiscount(salesOrderDetail, null);
        }
        else if (decimal.TryParse(args.value, out var discount))
        {
            // 確保折扣在 0-100 範圍內
            discount = Math.Max(0, Math.Min(100, discount));
            SetDiscount(salesOrderDetail, discount);
        }
        
        // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
        AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.HandleInputChangeAdvanced(
            Items, salesOrderDetail, IsEmptyRow, CreateEmptyItem, wasEmpty, SetSalesOrderId, ParentEntityId);
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    private async Task OnUnitChanged((object item, object? value) args)
    {
        var salesOrderDetail = (TSalesOrderDetailEntity)args.item;
        var wasEmpty = IsEmptyRow(salesOrderDetail);
        
        if (args.value != null && !string.IsNullOrEmpty(args.value.ToString()) && int.TryParse(args.value.ToString(), out var unitId))
        {
            SetUnitId(salesOrderDetail, unitId);
        }
        else
        {
            SetUnitId(salesOrderDetail, null);
        }
        
        // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
        AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.HandleInputChangeAdvanced(
            Items, salesOrderDetail, IsEmptyRow, CreateEmptyItem, wasEmpty, SetSalesOrderId, ParentEntityId);
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    private async Task OnWarehouseChanged((object item, object? value) args)
    {
        var salesOrderDetail = (TSalesOrderDetailEntity)args.item;
        var wasEmpty = IsEmptyRow(salesOrderDetail);
        
        if (args.value != null && !string.IsNullOrEmpty(args.value.ToString()) && int.TryParse(args.value.ToString(), out var warehouseId))
        {
            SetWarehouseId(salesOrderDetail, warehouseId);
        }
        else
        {
            SetWarehouseId(salesOrderDetail, null);
        }
        
        // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
        AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.HandleInputChangeAdvanced(
            Items, salesOrderDetail, IsEmptyRow, CreateEmptyItem, wasEmpty, SetSalesOrderId, ParentEntityId);
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    // 非異步的倉庫選擇事件處理（對應 PurchaseReceivingDetailManagerComponent 的寫法）
    private void OnWarehouseSelectionChanged(TSalesOrderDetailEntity salesOrderDetail, string? warehouseIdStr)
    {
        var wasEmpty = IsEmptyRow(salesOrderDetail);
        
        if (string.IsNullOrEmpty(warehouseIdStr) || !int.TryParse(warehouseIdStr, out var warehouseId))
        {
            SetWarehouseId(salesOrderDetail, null);
        }
        else
        {
            SetWarehouseId(salesOrderDetail, warehouseId);
        }
        
        // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
        AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.HandleInputChangeAdvanced(
            Items, salesOrderDetail, IsEmptyRow, CreateEmptyItem, wasEmpty, SetSalesOrderId, ParentEntityId);
        
        _ = ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    private async Task OnRemarkChanged((object item, string? value) args)
    {
        var salesOrderDetail = (TSalesOrderDetailEntity)args.item;
        var wasEmpty = IsEmptyRow(salesOrderDetail);
        
        SetRemark(salesOrderDetail, args.value);
        
        // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
        AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.HandleInputChangeAdvanced(
            Items, salesOrderDetail, IsEmptyRow, CreateEmptyItem, wasEmpty, SetSalesOrderId, ParentEntityId);
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        var removedItem = Items[index];
        
        // 使用 Helper 處理移除，自動確保空行
        AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.HandleItemRemove(
            Items, removedItem, IsEmptyRow, CreateEmptyItem, SetSalesOrderId, ParentEntityId);
        
        await ItemRemoved.InvokeAsync(removedItem);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        // 使用 Helper 檢查是否有足夠的非空項目
        if (!AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.HasSufficientItems(Items, IsEmptyRow, 1))
        {
            errors.Add("至少需要一個產品");
        }
        else
        {
            // 取得非空的項目進行驗證
            var nonEmptyItems = AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.GetNonEmptyItems(Items, IsEmptyRow);
            
            // 檢查重複產品
            var productIds = nonEmptyItems.Select(item => GetProductId(item)).Where(id => id.HasValue).ToList();
            if (productIds.Count != productIds.Distinct().Count())
            {
                errors.Add("存在重複的產品");
            }
            
            // 檢查必要欄位
            foreach (var item in nonEmptyItems)
            {
                var quantity = GetQuantity(item);
                var unitPrice = GetUnitPrice(item);
                var productId = GetProductId(item);
                
                // 取得產品名稱用於錯誤訊息
                var productName = "未知產品";
                if (productId.HasValue && productId.Value > 0)
                {
                    var product = ProductOptions.FirstOrDefault(p => GetProductOptionId(p) == productId.Value);
                    if (product != null)
                    {
                        // 嘗試取得產品代碼和名稱
                        var codeProperty = product.GetType().GetProperty("Code");
                        var nameProperty = product.GetType().GetProperty("Name");
                        var code = codeProperty?.GetValue(product) as string ?? "";
                        var name = nameProperty?.GetValue(product) as string ?? "";
                        
                        if (!string.IsNullOrEmpty(code) && !string.IsNullOrEmpty(name))
                        {
                            productName = $"{code} - {name}";
                        }
                        else if (!string.IsNullOrEmpty(name))
                        {
                            productName = name;
                        }
                        else if (!string.IsNullOrEmpty(code))
                        {
                            productName = code;
                        }
                    }
                }
                
                if (!quantity.HasValue)
                {
                    // 如果沒有填寫數量，設定預設值為 0
                    SetQuantity(item, 0);
                    quantity = 0;
                }
                
                if (quantity.Value < 0)
                {
                    errors.Add($"產品「{productName}」的數量不可為負數");
                    break;
                }
                
                if (!unitPrice.HasValue)
                {
                    errors.Add($"產品「{productName}」必須填寫單價");
                    break;
                }
                
                if (unitPrice.Value < 0)
                {
                    errors.Add($"產品「{productName}」的單價不可為負數");
                    break;
                }
            }
        }
          
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }
    
    /// <summary>
    /// 取得非空項目（用於外部呼叫）
    /// </summary>
    public List<TSalesOrderDetailEntity> GetValidItems()
    {
        return AutoEmptyRowHelper.For<TSalesOrderDetailEntity>.GetNonEmptyItems(Items, IsEmptyRow);
    }
}
