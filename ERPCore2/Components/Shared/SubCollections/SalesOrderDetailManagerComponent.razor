@* 銷貨訂單明細管理組件 - 使用 InteractiveTableComponent 統一UI 並整合自動空行功能 *@

@inject IProductService ProductService
@inject ISalesOrderDetailService SalesOrderDetailService
@inject ISalesReturnDetailService SalesReturnDetailService
@inject INotificationService NotificationService

@typeparam TMainEntity where TMainEntity : BaseEntity
@typeparam TDetailEntity where TDetailEntity : BaseEntity, new()

@if (!SelectedCustomerId.HasValue || SelectedCustomerId.Value <= 0)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="customer-warning">
                <i class="bi bi-exclamation-triangle text-warning fs-1 mb-3"></i>
                <p class="text-muted">請先選擇客戶才能新增銷貨明細</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <InteractiveTableComponent TItem="SalesItem" 
                                      Items="SalesItems"
                                      ColumnDefinitions="GetColumnDefinitions()"
                                      IsReadOnly="@IsReadOnly"
                                      ShowRowNumbers="false"
                                      EmptyMessage="@EmptyMessage"
                                      ShowBuiltInActions="@(!IsReadOnly)"
                                      ShowBuiltInDeleteButton="false"
                                      CustomActionsTemplate="GetCustomActionsTemplate"
                                      ActionsColumnWidth = "60px"
                                      OnItemDelete="HandleItemDelete"/>
        </div>

        <div class="card-footer">
            <div class="d-flex justify-content-between">
                <div>
                    <GenericButtonComponent Text="智能下單"
                                          Variant="ButtonVariant.Primary"
                                          OnClick="LoadSmartOrderItems"
                                          IsDisabled="@IsReadOnly" />
                </div>
                <div class="d-flex gap-2">
                    @* 統一倉庫下拉選單 *@
                    <div class="dropdown">
                        <GenericButtonComponent Text="統一倉庫"
                                              Variant="ButtonVariant.Warning"
                                              IconClass="fas fa-warehouse"
                                              IsDisabled="@(SalesItems.Count == 0 || IsReadOnly || !SalesItems.Any(x => !IsEmptyRow(x)))"
                                              AdditionalAttributes="@(new Dictionary<string, object> 
                                              { 
                                                  { "data-bs-toggle", "dropdown" },
                                                  { "aria-expanded", "false" }
                                              })" />
                        <ul class="dropdown-menu">
                            <li><h6 class="dropdown-header">選擇要統一設定的倉庫</h6></li>
                            @if (Warehouses.Any())
                            {
                                @foreach (var warehouse in Warehouses)
                                {
                                    <li>
                                        <a class="dropdown-item" href="#" 
                                           @onclick="() => ApplyUnifyWarehouse(warehouse.Id)" 
                                           @onclick:preventDefault="true">
                                            <i class="fas fa-warehouse me-2"></i>@warehouse.Name
                                        </a>
                                    </li>
                                }
                            }
                            else
                            {
                                <li><span class="dropdown-item-text text-muted">沒有可用的倉庫</span></li>
                            }
                        </ul>
                    </div>
                    
                    <GenericButtonComponent Text="明細全移除"
                                          Variant="ButtonVariant.Info"
                                          OnClick="ClearAllDetails"
                                          IsDisabled="@IsReadOnly" />
                </div>
            </div>
        </div>
    </div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public List<Product> Products { get; set; } = new List<Product>();
    [Parameter] public EventCallback<List<SalesItem>> OnSalesItemsChanged { get; set; }
    
    // ===== 客戶過濾參數 =====
    [Parameter] public int? SelectedCustomerId { get; set; }
    
    // ===== 篩選參數 =====
    [Parameter] public int? FilterProductId { get; set; }
    
    // ===== 泛型參數 =====
    [Parameter] public TMainEntity? MainEntity { get; set; }
    [Parameter] public List<TDetailEntity> ExistingDetails { get; set; } = new List<TDetailEntity>();
    [Parameter] public EventCallback<List<TDetailEntity>> OnDetailsChanged { get; set; }
    [Parameter] public EventCallback<List<int>> OnDeletedDetailsChanged { get; set; }
    [Parameter] public EventCallback<SalesItem> OnItemRemoved { get; set; }
    
    // ===== 欄位映射參數 =====
    [Parameter] public string MainEntityIdPropertyName { get; set; } = string.Empty;
    [Parameter] public string QuantityPropertyName { get; set; } = "OrderQuantity";
    [Parameter] public string UnitPricePropertyName { get; set; } = "UnitPrice";
    [Parameter] public string RemarksPropertyName { get; set; } = "DetailRemarks";
    [Parameter] public string? UnitIdPropertyName { get; set; }
    [Parameter] public string? WarehouseIdPropertyName { get; set; }
    [Parameter] public string? DiscountPercentagePropertyName { get; set; } = "DiscountPercentage";
    [Parameter] public string? SubtotalPropertyName { get; set; } = "Subtotal";    

    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "銷貨明細";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "cart-plus";
    [Parameter] public string ItemDisplayName { get; set; } = "商品";
    [Parameter] public string EmptyIcon { get; set; } = "cart";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增銷貨商品";
    
    // ===== 唯讀模式參數 =====
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 下拉選項參數 =====
    [Parameter] public List<Warehouse> Warehouses { get; set; } = new List<Warehouse>();

    private List<SalesItem> SalesItems { get; set; } = new List<SalesItem>();
    private List<Product> AvailableProducts { get; set; } = new List<Product>();
    private int? _previousSelectedCustomerId = null;
    private int? _previousFilterProductId = null;
    private List<int> _deletedDetailIds { get; set; } = new List<int>();
    
    // ===== 退貨數量管理 =====
    private Dictionary<int, decimal> _returnedQuantities = new(); // Key: SalesOrderDetailId, Value: 已退貨數量

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableProductsAsync();
        LoadExistingDetailsAsync();
        await LoadReturnedQuantitiesAsync();
        EnsureOneEmptyRow();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        
        // 檢查篩選參數是否變更
        bool customerChanged = _previousSelectedCustomerId != SelectedCustomerId;
        bool productFilterChanged = _previousFilterProductId != FilterProductId;
        
        // 如果客戶變更，需要重新載入所有資料
        if (customerChanged)
        {
            _previousSelectedCustomerId = SelectedCustomerId;
            _previousFilterProductId = FilterProductId;
            
            await LoadAvailableProductsAsync();
            
            // 客戶變更時清空現有選項並重新載入
            SalesItems.Clear();
            LoadExistingDetailsAsync();
            return;
        }
        
        // 如果只是商品篩選變更，只需要更新篩選狀態並重新渲染
        if (productFilterChanged)
        {
            _previousFilterProductId = FilterProductId;
            StateHasChanged();
            return;
        }
        
        // 總是確保有一行空行可以輸入，不論是否已有資料
        EnsureOneEmptyRow();
    }

    // ===== 退貨數量管理方法 =====
    
    /// <summary>
    /// 載入所有銷貨訂單明細的退貨數量
    /// </summary>
    private async Task LoadReturnedQuantitiesAsync()
    {
        _returnedQuantities.Clear();
        
        // 先複製要處理的項目到列表中，避免在迭代時修改集合
        var itemsToProcess = SalesItems
            .Where(item => item.ExistingDetailEntity is SalesOrderDetail detail && detail.Id > 0)
            .ToList();
        
        foreach (var item in itemsToProcess)
        {
            try
            {
                if (item.ExistingDetailEntity is SalesOrderDetail detail && detail.Id > 0)
                {
                    // 使用服務查詢該銷貨訂單明細的已退貨數量
                    var returnedQty = await SalesReturnDetailService.GetReturnedQuantityByOrderDetailAsync(detail.Id);
                    
                    if (returnedQty > 0)
                    {
                        _returnedQuantities[detail.Id] = returnedQty;
                    }
                }
            }
            catch (Exception ex)
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadReturnedQuantitiesAsync), GetType());
            }
        }
    }
    
    /// <summary>
    /// 檢查指定的銷貨訂單明細項目是否有退貨記錄
    /// </summary>
    private bool HasReturnRecord(SalesItem item)
    {
        if (item.ExistingDetailEntity is SalesOrderDetail detail && detail.Id > 0)
        {
            return _returnedQuantities.ContainsKey(detail.Id);
        }
        return false;
    }
    
    /// <summary>
    /// 取得指定銷貨訂單明細項目的已退貨數量
    /// </summary>
    private decimal GetReturnedQuantity(SalesItem item)
    {
        if (item.ExistingDetailEntity is SalesOrderDetail detail && detail.Id > 0)
        {
            return _returnedQuantities.TryGetValue(detail.Id, out var qty) ? qty : 0;
        }
        return 0;
    }
    
    /// <summary>
    /// 檢查指定的銷貨訂單明細項目是否有沖款記錄
    /// 檢查邏輯：
    /// - 資料表：SalesOrderDetail
    /// - 欄位：TotalReceivedAmount (累計收款金額)
    /// - 條件：TotalReceivedAmount > 0 表示已有沖款記錄，不可刪除
    /// </summary>
    /// <param name="item">要檢查的銷貨訂單明細項目</param>
    /// <returns>true 表示有沖款記錄，false 表示沒有</returns>
    private bool HasPaymentRecord(SalesItem item)
    {
        if (item.ExistingDetailEntity is SalesOrderDetail detail && detail.Id > 0)
        {
            return detail.TotalReceivedAmount > 0;
        }
        return false;
    }
    
    /// <summary>
    /// 取得指定銷貨訂單明細項目的已收款金額
    /// </summary>
    /// <param name="item">要檢查的銷貨訂單明細項目</param>
    /// <returns>已收款金額</returns>
    private decimal GetReceivedAmount(SalesItem item)
    {
        if (item.ExistingDetailEntity is SalesOrderDetail detail && detail.Id > 0)
        {
            return detail.TotalReceivedAmount;
        }
        return 0;
    }
    
    /// <summary>
    /// 檢查項目是否可以刪除
    /// 綜合檢查以下條件：
    /// 1. 退貨記錄檢查 (HasReturnRecord)
    ///    - 資料來源：透過 SalesReturnDetailService.GetReturnedQuantityByOrderDetailAsync() 查詢
    ///    - 檢查資料表：SalesReturnDetail (銷貨退回明細)
    ///    - 檢查欄位：SalesOrderDetailId (關聯的銷貨訂單明細ID)
    ///    - 限制原因：已有退貨記錄的銷貨訂單明細不可刪除，以保持資料一致性
    /// 
    /// 2. 沖款記錄檢查 (HasPaymentRecord)
    ///    - 資料來源：直接讀取 SalesOrderDetail 實體
    ///    - 檢查資料表：SalesOrderDetail (銷貨訂單明細)
    ///    - 檢查欄位：TotalReceivedAmount (累計收款金額)
    ///    - 限制原因：已收款的銷貨訂單明細不可刪除，避免財務資料錯亂
    /// </summary>
    /// <param name="item">要檢查的項目</param>
    /// <param name="reason">不可刪除的原因（輸出參數）</param>
    /// <returns>true 表示可以刪除，false 表示不可刪除</returns>
    private bool CanDeleteItem(SalesItem item, out string reason)
    {
        // 檢查 1：退貨記錄
        if (HasReturnRecord(item))
        {
            var returnedQty = GetReturnedQuantity(item);
            reason = $"此商品已有退貨記錄（已退貨 {returnedQty} 個），無法刪除";
            return false;
        }
        
        // 檢查 2：沉款記錄
        if (HasPaymentRecord(item))
        {
            var receivedAmount = GetReceivedAmount(item);
            reason = $"此商品已有沖款記錄（已收款 {receivedAmount:N0} 元），無法刪除";
            return false;
        }
        
        reason = string.Empty;
        return true;
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    private bool IsEmptyRow(SalesItem item)
    {
        return item.SelectedProduct == null;
    }
    
    private SalesItem CreateEmptyItem()
    {
        return new SalesItem();
    }
    
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.ForAny<SalesItem>.EnsureOneEmptyRow(
            SalesItems, 
            IsEmptyRow, 
            CreateEmptyItem
        );
    }

    private Task LoadAvailableProductsAsync()
    {
        try
        {
            if (SelectedCustomerId.HasValue && SelectedCustomerId.Value > 0)
            {
                // 只顯示產品類別為"成品"的商品 (PC003)
                AvailableProducts = Products
                    .Where(p => p.ProductCategory != null && 
                               p.ProductCategory.Code == "PC001")
                    .ToList();
            }
            else
            {
                AvailableProducts = new List<Product>();
            }
        }
        catch (Exception)
        {
            AvailableProducts = new List<Product>();
        }
        
        return Task.CompletedTask;
    }

    private void LoadExistingDetailsAsync()
    {
        if (ExistingDetails?.Any() != true) 
        {
            EnsureOneEmptyRow();
            return;
        }

        SalesItems.Clear();
        
        foreach (var detail in ExistingDetails)
        {
            // 轉換為正確的實體類型
            if (detail is SalesOrderDetail salesDetail)
            {
                var salesItem = new SalesItem
                {
                    SelectedProduct = salesDetail.Product ?? Products.FirstOrDefault(p => p.Id == salesDetail.ProductId),
                    OrderQuantity = salesDetail.OrderQuantity,
                    UnitPrice = salesDetail.UnitPrice,
                    DiscountPercentage = salesDetail.DiscountPercentage,
                    Subtotal = salesDetail.SubtotalAmount,
                    DetailRemarks = salesDetail.Remarks ?? "",
                    SelectedWarehouse = salesDetail.Warehouse ?? Warehouses.FirstOrDefault(w => w.Id == salesDetail.WarehouseId),
                    ExistingDetailEntity = detail
                };
                
                SalesItems.Add(salesItem);
            }
            else
            {
                // 通用轉換邏輯
                var salesItem = new SalesItem
                {
                    ExistingDetailEntity = detail
                };
                
                // 使用反射設定屬性
                var productId = GetPropertyValue<int>(detail, "ProductId");
                salesItem.SelectedProduct = Products.FirstOrDefault(p => p.Id == productId);
                
                salesItem.OrderQuantity = GetPropertyValue<decimal>(detail, QuantityPropertyName);
                salesItem.UnitPrice = GetPropertyValue<decimal>(detail, UnitPricePropertyName);
                salesItem.DetailRemarks = GetPropertyValue<string>(detail, RemarksPropertyName) ?? "";
                
                if (!string.IsNullOrEmpty(DiscountPercentagePropertyName))
                    salesItem.DiscountPercentage = GetPropertyValue<decimal>(detail, DiscountPercentagePropertyName);
                    
                if (!string.IsNullOrEmpty(SubtotalPropertyName))
                    salesItem.Subtotal = GetPropertyValue<decimal>(detail, SubtotalPropertyName);
                
                if (!string.IsNullOrEmpty(WarehouseIdPropertyName))
                {
                    var warehouseId = GetPropertyValue<int?>(detail, WarehouseIdPropertyName);
                    if (warehouseId.HasValue)
                        salesItem.SelectedWarehouse = Warehouses.FirstOrDefault(w => w.Id == warehouseId.Value);
                }
                
                SalesItems.Add(salesItem);
            }
        }
        
        EnsureOneEmptyRow();
    }

    private List<TDetailEntity> ConvertToDetailEntities()
    {
        var details = new List<TDetailEntity>();
        
        foreach (var item in SalesItems.Where(x => !IsEmptyRow(x) && x.SelectedProduct != null))
        {
            TDetailEntity detail;
            
            if (item.ExistingDetailEntity != null)
            {
                // 更新現有明細
                detail = item.ExistingDetailEntity;
                
                // 更新基本資訊
                SetPropertyValue(detail, "ProductId", item.SelectedProduct!.Id);
                SetPropertyValue(detail, QuantityPropertyName, item.OrderQuantity);
                SetPropertyValue(detail, UnitPricePropertyName, item.UnitPrice);
                SetPropertyValue(detail, RemarksPropertyName, item.DetailRemarks);
                
                // 更新可選屬性
                if (!string.IsNullOrEmpty(DiscountPercentagePropertyName))
                    SetPropertyValue(detail, DiscountPercentagePropertyName, item.DiscountPercentage);
                    
                if (!string.IsNullOrEmpty(SubtotalPropertyName))
                    SetPropertyValue(detail, SubtotalPropertyName, item.Subtotal);
                
                if (!string.IsNullOrEmpty(WarehouseIdPropertyName))
                    SetPropertyValue(detail, WarehouseIdPropertyName, item.SelectedWarehouse?.Id);
            }
            else
            {
                // 新增明細
                detail = new TDetailEntity();
                
                // 設定主實體關聯
                if (MainEntity != null)
                    SetPropertyValue(detail, MainEntityIdPropertyName, GetPropertyValue<int>(MainEntity, "Id"));
                
                // 設定基本資訊
                SetPropertyValue(detail, "ProductId", item.SelectedProduct!.Id);
                SetPropertyValue(detail, QuantityPropertyName, item.OrderQuantity);
                SetPropertyValue(detail, UnitPricePropertyName, item.UnitPrice);
                SetPropertyValue(detail, RemarksPropertyName, item.DetailRemarks);
                
                // 設定可選屬性
                if (!string.IsNullOrEmpty(DiscountPercentagePropertyName))
                    SetPropertyValue(detail, DiscountPercentagePropertyName, item.DiscountPercentage);
                    
                if (!string.IsNullOrEmpty(SubtotalPropertyName))
                    SetPropertyValue(detail, SubtotalPropertyName, item.Subtotal);
                
                if (!string.IsNullOrEmpty(WarehouseIdPropertyName))
                    SetPropertyValue(detail, WarehouseIdPropertyName, item.SelectedWarehouse?.Id);
            }
            
            details.Add(detail);
        }
        
        return details;
    }

    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToDetailEntities();
        await OnDetailsChanged.InvokeAsync(details);
        
        // 通知已刪除的明細 ID
        if (OnDeletedDetailsChanged.HasDelegate && _deletedDetailIds.Any())
        {
            await OnDeletedDetailsChanged.InvokeAsync(_deletedDetailIds.ToList());
            _deletedDetailIds.Clear(); // 清空已通知的刪除ID
        }
    }

    private T? GetPropertyValue<T>(object obj, string propertyName)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property == null) return default(T);
        
        var value = property.GetValue(obj);
        if (value == null) return default(T);
        
        if (typeof(T) == typeof(object)) return (T)value;
        
        return (T)Convert.ChangeType(value, typeof(T));
    }

    private void SetPropertyValue(object obj, string propertyName, object? value)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property != null && property.CanWrite)
        {
            if (value != null && property.PropertyType != value.GetType())
            {
                // 處理類型轉換
                if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    var underlyingType = Nullable.GetUnderlyingType(property.PropertyType);
                    value = underlyingType != null ? Convert.ChangeType(value, underlyingType) : value;
                }
                else
                {
                    value = Convert.ChangeType(value, property.PropertyType);
                }
            }
            property.SetValue(obj, value);
        }
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>();

        // 商品選擇欄位
        columns.Add(new InteractiveColumnDefinition
        {
            Title = "商品",
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "250px",
            CustomTemplate = item =>
            {
                var salesItem = (SalesItem)item;
                var hasReturnRecord = HasReturnRecord(salesItem);
                var hasPaymentRecord = HasPaymentRecord(salesItem);
                var isFieldReadOnly = IsReadOnly || hasReturnRecord || hasPaymentRecord;
                var selectedValue = salesItem.SelectedProduct?.Id.ToString() ?? "";

                // 組合 tooltip 訊息
                var tooltipMessages = new List<string>();
                if (hasReturnRecord)
                {
                    var returnedQty = GetReturnedQuantity(salesItem);
                    tooltipMessages.Add($"此商品已有退貨記錄（已退貨 {returnedQty} 個）");
                }
                if (hasPaymentRecord)
                {
                    var receivedAmount = GetReceivedAmount(salesItem);
                    tooltipMessages.Add($"此商品已有沖款記錄（已收款 {receivedAmount:N0} 元）");
                }
                var title = tooltipMessages.Any()
                    ? string.Join("；", tooltipMessages) + "，無法修改商品選擇"
                    : "";

                return @<div class="position-relative">
                    <select class="form-select form-select-sm" 
                            value="@selectedValue"
                            disabled="@isFieldReadOnly"
                            title="@title"
                            @onchange="@(async (e) => await OnProductChanged(salesItem, e.Value))">
                        <option value="">請選擇商品</option>
                        @foreach (var product in GetAvailableProducts())
                        {
                            <option value="@product.Id">[@product.Code] @product.Name</option>
                        }
                    </select>
                    
                    @if (hasReturnRecord || hasPaymentRecord)
                    {
                        <div class="position-absolute" style="top: 2px; right: 30px; pointer-events: none;">
                            <i class="fas fa-lock text-danger" title="@title"></i>
                        </div>
                    }
                </div>;
            }
        });

        // 倉庫選擇欄位 - 檢查是否有退貨或沖款記錄，如果有則鎖定
        columns.Add(new InteractiveColumnDefinition
            { 
                Title = "倉庫", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "150px",
                HideOnMobile = true,
                CustomTemplate = item => 
                {
                    var salesItem = (SalesItem)item;
                    var hasReturnRecord = HasReturnRecord(salesItem);
                    var hasPaymentRecord = HasPaymentRecord(salesItem);
                    var isFieldReadOnly = IsReadOnly || hasReturnRecord || hasPaymentRecord;
                    var selectedWarehouseId = salesItem.SelectedWarehouse?.Id.ToString() ?? "";
                    
                    // 組合 tooltip 訊息
                    var tooltipMessages = new List<string>();
                    if (hasReturnRecord)
                        tooltipMessages.Add("此商品已有退貨記錄");
                    if (hasPaymentRecord)
                    {
                        var receivedAmount = GetReceivedAmount(salesItem);
                        tooltipMessages.Add($"此商品已有沖款記錄（已收款 {receivedAmount:N0} 元）");
                    }
                    var title = tooltipMessages.Any()
                        ? string.Join("；", tooltipMessages) + "，無法修改倉庫設定"
                        : "";
                    
                    if (isFieldReadOnly && salesItem.SelectedWarehouse != null)
                    {
                        // 唯讀模式：顯示純文字
                        return @<span class="text-muted small" title="@title">
                            @salesItem.SelectedWarehouse.Name
                        </span>;
                    }
                    else
                    {
                        // 可編輯模式：顯示下拉選單
                        return @<select class="form-select form-select-sm"
                                       value="@selectedWarehouseId"
                                       @onchange="(e) => OnWarehouseSelectionChanged(salesItem, e.Value?.ToString())"
                                       disabled="@IsReadOnly">
                            <option value="">選擇倉庫</option>
                            @foreach (var warehouse in Warehouses)
                            {
                                <option value="@warehouse.Id">@warehouse.Name</option>
                            }
                        </select>;
                    }
                }
        });

        // 訂單數量欄位 - 檢查是否有退貨或沖款記錄，如果有則鎖定
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "訂單數量", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            CustomTemplate = item => 
            {
                var salesItem = (SalesItem)item;
                var hasReturnRecord = HasReturnRecord(salesItem);
                var hasPaymentRecord = HasPaymentRecord(salesItem);
                var isFieldReadOnly = IsReadOnly || hasReturnRecord || hasPaymentRecord;
                var value = salesItem.OrderQuantity > 0 ? ((int)salesItem.OrderQuantity).ToString() : "";
                
                // 組合 tooltip 訊息
                var tooltipMessages = new List<string>();
                if (hasReturnRecord)
                    tooltipMessages.Add("此商品已有退貨記錄");
                if (hasPaymentRecord)
                {
                    var receivedAmount = GetReceivedAmount(salesItem);
                    tooltipMessages.Add($"此商品已有沖款記錄（已收款 {receivedAmount:N0} 元）");
                }
                var title = tooltipMessages.Any() 
                    ? string.Join("；", tooltipMessages) + "，無法修改訂單數量" 
                    : "";
                
                // 如果是唯讀狀態（含退貨或沖款記錄），直接顯示 span
                if (isFieldReadOnly)
                {
                    return @<div class="position-relative d-flex align-items-center justify-content-end" style="min-height: 31px;">
                        <span class="text-muted small" title="@title">
                            @(salesItem.OrderQuantity > 0 ? salesItem.OrderQuantity.ToString("N0") : "0")
                        </span>
                    </div>;
                }
                
                // 可編輯狀態，顯示輸入框
                return @<input type="number" class="form-control form-control-sm" 
                               value="@value"
                               @oninput="(e) => OnOrderQuantityInput(salesItem, e.Value?.ToString())"
                               onkeydown="if(['e','E','+','-'].includes(event.key)) event.preventDefault();"
                               placeholder="" 
                               min="0" 
                               step="1" />;
            }
        });

        // 單價欄位 - 檢查是否有退貨或沖款記錄，如果有則鎖定
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "單價", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            CustomTemplate = item => 
            {
                var salesItem = (SalesItem)item;
                var hasReturnRecord = HasReturnRecord(salesItem);
                var hasPaymentRecord = HasPaymentRecord(salesItem);
                var isFieldReadOnly = IsReadOnly || hasReturnRecord || hasPaymentRecord;
                
                // 組合 tooltip 訊息
                var tooltipMessages = new List<string>();
                if (hasReturnRecord)
                    tooltipMessages.Add("此商品已有退貨記錄");
                if (hasPaymentRecord)
                {
                    var receivedAmount = GetReceivedAmount(salesItem);
                    tooltipMessages.Add($"此商品已有沖款記錄（已收款 {receivedAmount:N0} 元）");
                }
                var title = tooltipMessages.Any() 
                    ? string.Join("；", tooltipMessages) + "，無法修改單價" 
                    : "";
                
                // 如果是唯讀狀態（含退貨或沖款記錄），直接顯示 span
                if (isFieldReadOnly)
                {
                    return @<div class="position-relative d-flex align-items-center justify-content-end" style="min-height: 31px;">
                        <span class="text-muted small" title="@title">
                            @(salesItem.UnitPrice > 0 ? salesItem.UnitPrice.ToString("N0") : "0")
                        </span>
                    </div>;
                }
                
                // 可編輯狀態，顯示輸入框
                return @<input type="number" class="form-control form-control-sm"
                                min="0"
                                step="1"
                                value="@((int)salesItem.UnitPrice)"
                                @oninput="(e) => OnUnitPriceInput(salesItem, e.Value?.ToString())"
                                onkeydown="if(['e','E','+','-'].includes(event.key)) event.preventDefault();"
                                placeholder="" />;
            }
        });        

        // 折扣欄位 - 檢查是否有退貨或沖款記錄，如果有則鎖定
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "折扣%", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "100px",
            HideOnMobile = true,
            CustomTemplate = item => 
            {
                var salesItem = (SalesItem)item;
                var hasReturnRecord = HasReturnRecord(salesItem);
                var hasPaymentRecord = HasPaymentRecord(salesItem);
                var isFieldReadOnly = IsReadOnly || hasReturnRecord || hasPaymentRecord;
                
                // 組合 tooltip 訊息
                var tooltipMessages = new List<string>();
                if (hasReturnRecord)
                    tooltipMessages.Add("此商品已有退貨記錄");
                if (hasPaymentRecord)
                {
                    var receivedAmount = GetReceivedAmount(salesItem);
                    tooltipMessages.Add($"此商品已有沖款記錄（已收款 {receivedAmount:N0} 元）");
                }
                var title = tooltipMessages.Any() 
                    ? string.Join("；", tooltipMessages) + "，無法修改折扣" 
                    : "";
                
                // 如果是唯讀狀態（含退貨或沖款記錄），直接顯示 span
                if (isFieldReadOnly)
                {
                    return @<div class="position-relative d-flex align-items-center justify-content-end" style="min-height: 31px;">
                        <span class="text-muted small" title="@title">
                            @(salesItem.DiscountPercentage > 0 ? $"{salesItem.DiscountPercentage:N0}%" : "0%")
                        </span>
                    </div>;
                }
                
                // 可編輯狀態，顯示輸入框
                return @<div class="input-group input-group-sm">
                    <input type="number" class="form-control"
                            min="0"
                            max="100"
                            step="1"
                            value="@((int)salesItem.DiscountPercentage)"
                            @oninput="(e) => OnDiscountPercentageInput(salesItem, e.Value?.ToString())"
                            onkeydown="if(['e','E','+','-'].includes(event.key)) event.preventDefault();"
                            placeholder="%" />
                </div>;
            }
        });
        

        // 小計欄位 (只讀顯示)
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "小計", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            CustomTemplate = item => 
            {
                var salesItem = (SalesItem)item;
                
                return @<div class="text-end fw-bold text-success">
                    @salesItem.Subtotal.ToString("C")
                </div>;
            }
        });

        // 備註欄位
        columns.Add(new InteractiveColumnDefinition
        { 
            Title = "備註", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "150px",
            HideOnMobile = true,
            CustomTemplate = item => 
            {
                var salesItem = (SalesItem)item;
                
                return @<input type="text" class="form-control form-control-sm"
                              value="@salesItem.DetailRemarks"
                              @oninput="(e) => OnRemarksInput(salesItem, e.Value?.ToString())"
                              readonly="@IsReadOnly"
                              placeholder="備註..." />;
            }
        });

        return columns;
    }

    private RenderFragment<SalesItem> GetCustomActionsTemplate => item => __builder =>
    {
        // 檢查項目是否可以刪除（綜合退貨記錄和沖款記錄檢查）
        var canDelete = CanDeleteItem(item, out _);
        
        // 只有當項目可以刪除時才顯示刪除按鈕
        if (canDelete)
        {
            <GenericButtonComponent Variant="ButtonVariant.Danger"
                                   IconClass="bi bi-trash text-white"
                                   Size="ButtonSize.Large"
                                   IsDisabled="@IsReadOnly"
                                   Title="刪除"
                                   OnClick="async () => await HandleItemDelete(item)"
                                   StopPropagation="true"
                                   CssClass="btn-square" />
        }
    };

    private async Task HandleItemDelete(SalesItem item)
    {
        // 使用綜合檢查方法，確認是否可以刪除
        if (!CanDeleteItem(item, out string reason))
        {
            await NotificationService.ShowWarningAsync(reason, "操作限制");
            return;
        }
        
        var index = SalesItems.IndexOf(item);
        await RemoveItemAsync(index);
    }

    private List<Product> GetAvailableProducts()
    {
        if (!SelectedCustomerId.HasValue || SelectedCustomerId.Value <= 0)
        {
            return new List<Product>();
        }
        
        return AvailableProducts;
    }

    private decimal GetTotalAmount()
    {
        return SalesItems
            .Where(item => !IsEmptyRow(item))
            .Sum(item => item.Subtotal);
    }

    public class SalesItem
    {
        public Product? SelectedProduct { get; set; }
        public decimal OrderQuantity { get; set; } = 0;
        public decimal UnitPrice { get; set; } = 0;
        public decimal DiscountPercentage { get; set; } = 0;
        public decimal Subtotal { get; set; } = 0;
        public string DetailRemarks { get; set; } = string.Empty;
        public Warehouse? SelectedWarehouse { get; set; }
        public TDetailEntity? ExistingDetailEntity { get; set; }
        
        /// <summary>
        /// 計算小計
        /// </summary>
        public void CalculateSubtotal()
        {
            // 小計 = 數量 × 單價 × (1 - 折扣% / 100)
            // 例如：50 × 62 × (1 - 1/100) = 50 × 62 × 0.99 = 3069
            Subtotal = Math.Round(OrderQuantity * UnitPrice * (1 - DiscountPercentage / 100), 2);
            
            // 確保小計不為負數
            if (Subtotal < 0) Subtotal = 0;
        }
        
        /// <summary>
        /// 取得顯示用的商品名稱
        /// </summary>
        public string DisplayName => 
            SelectedProduct != null 
                ? $"{SelectedProduct.Code} - {SelectedProduct.Name}" 
                : "";
    }

    // ===== 事件處理方法 =====
    
    // ===== 商品選擇事件處理 =====
    private async Task OnProductChanged(SalesItem item, object? value)
    {
        // 檢查是否可以修改
        if (!CanDeleteItem(item, out string reason))
        {
            await NotificationService.ShowWarningAsync(
                "無法修改商品",
                reason
            );
            StateHasChanged(); // 強制重新渲染以恢復原值
            return;
        }
        
        var wasEmpty = IsEmptyRow(item);
        
        var productIdStr = value?.ToString();
        if (string.IsNullOrEmpty(productIdStr))
        {
            item.SelectedProduct = null;
        }
        else if (int.TryParse(productIdStr, out var productId))
        {
            var product = GetAvailableProducts().FirstOrDefault(p => p.Id == productId);
            item.SelectedProduct = product;
        }
        
        // 處理自動空行邏輯
        AutoEmptyRowHelper.ForAny<SalesItem>.HandleInputChange(
            SalesItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnOrderQuantityInput(SalesItem item, string? value)
    {
        // 檢查是否可以修改
        if (!CanDeleteItem(item, out string reason))
        {
            var friendlyMessage = HasReturnRecord(item)
                ? "此商品已有退貨記錄，無法修改數量"
                : "此商品已有沖款記錄，無法修改數量";
            
            await NotificationService.ShowWarningAsync(friendlyMessage, "操作限制");
            return;
        }
        
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(value))
        {
            item.OrderQuantity = 0;
        }
        else if (decimal.TryParse(value, out var quantity))
        {
            item.OrderQuantity = quantity;
        }
        
        item.CalculateSubtotal();
        
        AutoEmptyRowHelper.ForAny<SalesItem>.HandleInputChange(
            SalesItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnUnitPriceInput(SalesItem item, string? value)
    {
        // 檢查是否可以修改
        if (!CanDeleteItem(item, out string reason))
        {
            var friendlyMessage = HasReturnRecord(item)
                ? "此商品已有退貨記錄，無法修改單價"
                : "此商品已有沖款記錄，無法修改單價";
            
            await NotificationService.ShowWarningAsync(friendlyMessage, "操作限制");
            return;
        }
        
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(value))
        {
            item.UnitPrice = 0;
        }
        else if (decimal.TryParse(value, out var price))
        {
            item.UnitPrice = price;
        }
        
        item.CalculateSubtotal();
        
        AutoEmptyRowHelper.ForAny<SalesItem>.HandleInputChange(
            SalesItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnDiscountPercentageInput(SalesItem item, string? value)
    {
        // 檢查是否可以修改
        if (!CanDeleteItem(item, out string reason))
        {
            var friendlyMessage = HasReturnRecord(item)
                ? "此商品已有退貨記錄，無法修改折扣"
                : "此商品已有沖款記錄，無法修改折扣";
            
            await NotificationService.ShowWarningAsync(friendlyMessage, "操作限制");
            return;
        }
        
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(value))
        {
            item.DiscountPercentage = 0;
        }
        else if (decimal.TryParse(value, out var percentage))
        {
            // 限制折扣百分比在 0-100 之間
            item.DiscountPercentage = Math.Max(0, Math.Min(100, percentage));
        }
        
        // 重新計算小計（會根據折扣百分比計算）
        item.CalculateSubtotal();
        
        AutoEmptyRowHelper.ForAny<SalesItem>.HandleInputChange(
            SalesItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        // 通知父組件資料已變更（這會觸發 HandleDetailsChanged）
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnWarehouseSelectionChanged(SalesItem item, string? warehouseIdStr)
    {
        // 檢查是否可以修改
        if (!CanDeleteItem(item, out string reason))
        {
            var friendlyMessage = HasReturnRecord(item)
                ? "此商品已有退貨記錄，無法修改倉庫設定"
                : "此商品已有沖款記錄，無法修改倉庫設定";
            
            await NotificationService.ShowWarningAsync(friendlyMessage, "操作限制");
            return;
        }
        
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(warehouseIdStr) || !int.TryParse(warehouseIdStr, out var warehouseId))
        {
            item.SelectedWarehouse = null;
        }
        else
        {
            item.SelectedWarehouse = Warehouses.FirstOrDefault(w => w.Id == warehouseId);
        }
        
        AutoEmptyRowHelper.ForAny<SalesItem>.HandleInputChange(
            SalesItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnRemarksInput(SalesItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        item.DetailRemarks = value ?? string.Empty;
        
        AutoEmptyRowHelper.ForAny<SalesItem>.HandleInputChange(
            SalesItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= SalesItems.Count) return;
        
        var removedItem = SalesItems[index];
        
        // 記錄要刪除的資料庫實體ID
        if (removedItem.ExistingDetailEntity != null)
        {
            var entityId = GetExistingDetailId(removedItem.ExistingDetailEntity!);
            if (entityId > 0)
            {
                _deletedDetailIds.Add(entityId);
            }
        }
        
        // 通知父組件項目即將被移除
        if (OnItemRemoved.HasDelegate)
        {
            await OnItemRemoved.InvokeAsync(removedItem);
        }
        
        AutoEmptyRowHelper.ForAny<SalesItem>.HandleItemRemove(
            SalesItems, removedItem, IsEmptyRow, CreateEmptyItem);
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 取得現有明細實體的ID
    /// </summary>
    private int GetExistingDetailId(TDetailEntity entity)
    {
        if (entity == null) return 0;
        
        // 假設所有的 BaseEntity 都有 Id 屬性
        var idProperty = entity.GetType().GetProperty("Id");
        if (idProperty != null && idProperty.PropertyType == typeof(int))
        {
            return (int)(idProperty.GetValue(entity) ?? 0);
        }
        
        return 0;
    }

    // ===== 業務邏輯方法 =====
    
    /// <summary>
    /// 統一設定所有明細項目的倉庫
    /// </summary>
    private async Task ApplyUnifyWarehouse(int warehouseId)
    {
        if (IsReadOnly) return;

        try
        {
            var selectedWarehouse = Warehouses.FirstOrDefault(w => w.Id == warehouseId);
            if (selectedWarehouse == null)
            {
                await NotificationService.ShowWarningAsync("找不到指定的倉庫");
                return;
            }

            // 取得所有非空行的明細項目
            var nonEmptyItems = SalesItems.Where(item => !IsEmptyRow(item)).ToList();
            
            if (!nonEmptyItems.Any())
            {
                await NotificationService.ShowWarningAsync("沒有銷貨明細可設定倉庫");
                return;
            }

            // 批量更新所有非空行的倉庫
            foreach (var item in nonEmptyItems)
            {
                item.SelectedWarehouse = selectedWarehouse;
            }

            // 通知父組件資料已變更
            await NotifyDetailsChanged();
            
            // 顯示成功通知
            await NotificationService.ShowSuccessAsync($"已統一設定 {nonEmptyItems.Count} 項明細的倉庫為：{selectedWarehouse.Name}", "統一設定完成");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplyUnifyWarehouse), GetType());
            await NotificationService.ShowErrorAsync("統一設定倉庫時發生錯誤", "錯誤");
        }
    }

    /// <summary>
    /// 清空所有銷貨明細
    /// </summary>
    private async Task ClearAllDetails()
    {
        if (IsReadOnly) return;
        
        try
        {
            // 通知父組件所有項目即將被移除
            if (OnItemRemoved.HasDelegate)
            {
                foreach (var item in SalesItems.Where(item => !IsEmptyRow(item)))
                {
                    await OnItemRemoved.InvokeAsync(item);
                }
            }
            
            // 記錄所有現有明細的 ID 以便刪除
            foreach (var item in SalesItems.Where(item => item.ExistingDetailEntity != null))
            {
                var entityId = GetExistingDetailId(item.ExistingDetailEntity!);
                if (entityId > 0)
                {
                    _deletedDetailIds.Add(entityId);
                }
            }
            
            // 清空所有明細，只保留一個空行
            SalesItems.Clear();
            EnsureOneEmptyRow();
            
            await NotifyDetailsChanged();
            await NotificationService.ShowSuccessAsync("已清空所有銷貨明細");
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ClearAllDetails), GetType());
            await NotificationService.ShowErrorAsync("清空銷貨明細時發生錯誤", "錯誤");
        }
    }

    /// <summary>
    /// 載入智能下單項目 - 根據客戶最近一次完整的銷貨訂單
    /// </summary>
    private async Task LoadSmartOrderItems()
    {
        if (IsReadOnly || !SelectedCustomerId.HasValue) return;
        
        try
        {
            // 檢查是否有現有資料
            var hasExistingData = SalesItems.Any(item => !IsEmptyRow(item));
            
            if (hasExistingData)
            {
                if (!await ShowConfirmationAsync("載入智能下單", "此操作將覆蓋現有的銷貨明細，是否繼續？"))
                {
                    return;
                }
            }

            // 從服務獲取客戶的最近一次完整銷貨
            var lastSalesDetails = await SalesOrderDetailService.GetLastCompleteSalesAsync(SelectedCustomerId.Value);
            
            if (!lastSalesDetails.Any())
            {
                await NotificationService.ShowInfoAsync("該客戶沒有銷貨歷史紀錄可參考", "智能下單");
                return;
            }

            // 清空現有項目
            SalesItems.Clear();
            _deletedDetailIds.Clear();

            // 將歷史銷貨轉換為新的銷貨項目
            foreach (var detail in lastSalesDetails)
            {
                var salesItem = new SalesItem
                {
                    SelectedProduct = detail.Product,
                    OrderQuantity = detail.OrderQuantity,
                    UnitPrice = detail.UnitPrice,
                    DetailRemarks = detail.Remarks ?? "",
                    // 複製倉庫設定作為參考
                    SelectedWarehouse = detail.Warehouse ?? (detail.WarehouseId.HasValue ? 
                        Warehouses.FirstOrDefault(w => w.Id == detail.WarehouseId.Value) : null)
                };
                
                salesItem.CalculateSubtotal();
                SalesItems.Add(salesItem);
            }

            // 確保有空行
            EnsureOneEmptyRow();
            
            await NotifyDetailsChanged();
            await NotificationService.ShowSuccessAsync($"已載入 {lastSalesDetails.Count} 項商品作為參考", "智能下單完成");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSmartOrderItems), GetType());
            await NotificationService.ShowErrorAsync("載入智能下單時發生錯誤", "錯誤");
        }
    }

    /// <summary>
    /// 顯示確認對話框
    /// </summary>
    private async Task<bool> ShowConfirmationAsync(string title, string message)
    {
        // 暫時使用簡單的通知，等待確認後執行
        // 在實際專案中可能會使用更精美的對話框組件
        try 
        {
            await NotificationService.ShowInfoAsync(message, title);
            return true;
        }
        catch
        {
            return false;
        }
    }

    /// <summary>
    /// 驗證銷貨明細
    /// </summary>
    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        if (!AutoEmptyRowHelper.ForAny<SalesItem>.HasSufficientItems(SalesItems, IsEmptyRow, 1))
        {
            errors.Add("至少需要一項銷貨明細");
        }
        else
        {
            var lineNumber = 1;
            foreach (var item in SalesItems.Where(x => !IsEmptyRow(x)))
            {
                if (item.SelectedProduct == null)
                {
                    errors.Add($"第 {lineNumber} 行：請選擇商品");
                }

                if (item.OrderQuantity <= 0)
                {
                    errors.Add($"第 {lineNumber} 行：訂單數量必須大於 0");
                }

                if (item.UnitPrice < 0)
                {
                    errors.Add($"第 {lineNumber} 行：單價不可為負數");
                }

                if (item.DiscountPercentage < 0 || item.DiscountPercentage > 100)
                {
                    errors.Add($"第 {lineNumber} 行：折扣比例必須介於 0-100 之間");
                }

                lineNumber++;
            }
        }
          
        if (errors.Any())
        {
            await NotificationService.ShowErrorAsync(string.Join("\n", errors), "銷貨明細驗證失敗");
            return false;
        }
        
        return true;
    }
}
