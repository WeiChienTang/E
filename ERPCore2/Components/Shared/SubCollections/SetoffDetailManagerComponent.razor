@* 沖款明細管理組件 (通用) - 支援應收/應付帳款 - 使用 InteractiveTableComponent 來管理沖款明細 *@
@using ERPCore2.Data.Enums
@inject IAccountsReceivableSetoffDetailService AccountsReceivableSetoffDetailService
@inject IAccountsPayableSetoffDetailService AccountsPayableSetoffDetailService
@inject INotificationService NotificationService

<div class="setoff-detail-manager @GetModeClass()">
    @if (IsLoading)
    {
        <div class="d-flex>justify-content-center align-items-center my-3">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">載入中...</span>
            </div>
        </div>
    }

    <InteractiveTableComponent TItem="SetoffDetailDto"
                                Items="@GetDisplayDetails()"
                                ColumnDefinitions="@GetColumnDefinitions()"
                                ShowHeader="true"
                                ShowRowNumbers="false"
                                ShowActions="false"
                                ShowBuiltInActions="true"
                                ShowBuiltInDeleteButton="true"
                                OnItemDelete="RemoveItemFromSelection"
                                IsStriped="true"
                                IsHoverable="true"
                                IsBordered="true"
                                IsReadOnly="@IsReadOnly"
                                EmptyMessage="@GetEmptyMessage()"
                                CssClass="setoff-detail-table"
                                ValidationErrors="@ValidationErrors"
                                OnValidationFailed="@HandleValidationFailed" />
</div>

@code {
    #region 參數定義
    /// <summary>
    /// 沖款模式：應收或應付
    /// </summary>
    [Parameter] public SetoffMode Mode { get; set; } = SetoffMode.Receivable;
    
    /// <summary>
    /// 合作對象 ID (客戶 ID 或供應商 ID) - 建議使用此參數
    /// </summary>
    [Parameter] public int? PartnerId { get; set; }
    
    /// <summary>
    /// 客戶 ID (向後相容，內部會轉換為 PartnerId)
    /// </summary>
    [Parameter] public int? CustomerId { get; set; }
    
    /// <summary>
    /// 供應商 ID (內部會轉換為 PartnerId)
    /// </summary>
    [Parameter] public int? SupplierId { get; set; }
    
    [Parameter] public EventCallback<List<SetoffDetailDto>> OnSelectedDetailsChanged { get; set; }
    [Parameter] public EventCallback<decimal> OnTotalAmountChanged { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    [Parameter] public bool IsEditMode { get; set; } = false;
    [Parameter] public int? SetoffId { get; set; }
    
    /// <summary>
    /// 取得實際使用的合作對象 ID
    /// </summary>
    private int? GetActualPartnerId()
    {
        // 優先使用 PartnerId，如果沒有則根據模式使用 CustomerId 或 SupplierId
        if (PartnerId.HasValue) return PartnerId;
        if (Mode == SetoffMode.Receivable && CustomerId.HasValue) return CustomerId;
        if (Mode == SetoffMode.Payable && SupplierId.HasValue) return SupplierId;
        return null;
    }
    #endregion

    #region 私有狀態
    private bool IsLoading { get; set; } = false;
    private List<SetoffDetailDto> Details { get; set; } = new();
    private Dictionary<string, string> ValidationErrors { get; set; } = new();
    
    // 用於追蹤參數變更，避免不必要的重新渲染
    private int? _previousPartnerId = null;
    private SetoffMode _previousMode = SetoffMode.Receivable;
    private bool _previousIsEditMode = false;
    private int? _previousSetoffId = null;
    private bool _previousIsReadOnly = false;
    private bool _previousIsLoading = false; // 追蹤載入狀態
    private int _previousDetailsCount = 0; // 追蹤資料數量
    
    private List<SetoffDetailDto> SelectedDetails => 
        Details.Where(d => d.ThisTimeAmount != 0 || d.ThisTimeDiscountAmount != 0).ToList();
    
    /// <summary>
    /// 取得要顯示的明細列表（根據編輯模式過濾）
    /// </summary>
    private List<SetoffDetailDto> GetDisplayDetails()
    {
        if (IsEditMode)
        {
            // 編輯模式：顯示原本載入時有沖款或折讓記錄的項目
            // 使用 OriginalThisTimeAmount 和 OriginalThisTimeDiscountAmount 來判斷
            // 這樣即使使用者清空數字，該列仍會保留在畫面上
            return Details.Where(d => d.OriginalThisTimeAmount != 0 || d.OriginalThisTimeDiscountAmount != 0).ToList();
        }
        else
        {
            // 新增模式：只顯示未結清的項目 (IsSettled = false)
            return Details.Where(d => !d.IsSettled).ToList();
        }
    }
    #endregion

    #region 生命周期方法
    /// <summary>
    /// 控制組件是否需要重新渲染
    /// 只有當真正影響此組件的參數或狀態變更時才重新渲染
    /// </summary>
    protected override bool ShouldRender()
    {
        var actualPartnerId = GetActualPartnerId();
        
        // 檢查關鍵參數或狀態是否有變更
        bool hasChanges = _previousPartnerId != actualPartnerId ||
                          _previousMode != Mode ||
                          _previousIsEditMode != IsEditMode ||
                          _previousSetoffId != SetoffId ||
                          _previousIsReadOnly != IsReadOnly ||
                          _previousIsLoading != IsLoading || // 載入狀態變更
                          _previousDetailsCount != Details.Count; // 資料數量變更
        
        // 更新狀態追蹤
        _previousIsLoading = IsLoading;
        _previousDetailsCount = Details.Count;
        
        return hasChanges;
    }
    
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var actualPartnerId = GetActualPartnerId();
            
            // 檢查關鍵參數是否真的有變更
            bool keyParametersChanged = _previousPartnerId != actualPartnerId ||
                                       _previousMode != Mode ||
                                       _previousIsEditMode != IsEditMode ||
                                       _previousSetoffId != SetoffId ||
                                       _previousIsReadOnly != IsReadOnly;
            
            if (keyParametersChanged)
            {
                // 更新追蹤的參數值
                _previousPartnerId = actualPartnerId;
                _previousMode = Mode;
                _previousIsEditMode = IsEditMode;
                _previousSetoffId = SetoffId;
                _previousIsReadOnly = IsReadOnly;
                
                if (actualPartnerId.HasValue && actualPartnerId > 0)
                {
                    await LoadDetailsAsync();
                }
                else
                {
                    Details.Clear();
                    ValidationErrors.Clear();
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            var partnerId = GetActualPartnerId();
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnParametersSetAsync), GetType(), 
                additionalData: $"載入沖款明細失敗 - PartnerId: {partnerId}, Mode: {Mode}");
        }
    }
    #endregion

    #region 私有方法
    /// <summary>
    /// 載入合作對象的未結清明細
    /// </summary>
    private async Task LoadDetailsAsync()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();

            var partnerId = GetActualPartnerId();
            if (!partnerId.HasValue || partnerId.Value <= 0)
            {
                Details.Clear();
                return;
            }

            if (IsEditMode && SetoffId.HasValue)
            {
                // 編輯模式：載入所有相關明細（包括已完成的）
                if (Mode == SetoffMode.Receivable)
                {
                    Details = await AccountsReceivableSetoffDetailService.GetCustomerAllDetailsForEditAsync(partnerId.Value, SetoffId.Value);
                }
                else // SetoffMode.Payable
                {
                    Details = await AccountsPayableSetoffDetailService.GetSupplierAllDetailsForEditAsync(partnerId.Value, SetoffId.Value);
                }
            }
            else
            {
                // 新增模式：只載入未結清明細
                if (Mode == SetoffMode.Receivable)
                {
                    Details = await AccountsReceivableSetoffDetailService.GetCustomerPendingDetailsAsync(partnerId.Value);
                }
                else // SetoffMode.Payable
                {
                    Details = await AccountsPayableSetoffDetailService.GetSupplierPendingDetailsAsync(partnerId.Value);
                }
            }
            
            // 設定 Mode 給每個 DTO
            foreach (var detail in Details)
            {
                detail.Mode = Mode;
            }
            
            ValidationErrors.Clear();
        }
        catch (Exception ex)
        {
            var partnerId = GetActualPartnerId();
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadDetailsAsync), GetType(), 
                additionalData: $"載入明細資料失敗 - PartnerId: {partnerId}, Mode: {Mode}, IsEditMode: {IsEditMode}, SetoffId: {SetoffId}");
            Details = new List<SetoffDetailDto>();
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    #region UI 輔助方法
    /// <summary>
    /// 取得模式對應的 CSS 類別
    /// </summary>
    private string GetModeClass() => Mode == SetoffMode.Receivable ? "receivable" : "payable";
    
    /// <summary>
    /// 取得空白訊息
    /// </summary>
    private string GetEmptyMessage() => Mode == SetoffMode.Receivable 
        ? "此客戶沒有未結清的明細項目" 
        : "此廠商沒有未結清的明細項目";
    #endregion

    /// <summary>
    /// 取得欄位定義
    /// </summary>
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>
        {
            new InteractiveColumnDefinition
            {
                Title = "單據號碼",
                PropertyName = nameof(SetoffDetailDto.DocumentNumber),
                ColumnType = InteractiveColumnType.Display,
                Width = "150px"
            },
            new InteractiveColumnDefinition
            {
                Title = "單據日期",
                PropertyName = nameof(SetoffDetailDto.DocumentDate),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    return @<span>@detail.DocumentDate.ToString("yyyy-MM-dd")</span>;
                }
            },
            new InteractiveColumnDefinition
            {
                Title = "商品",
                PropertyName = nameof(SetoffDetailDto.ProductName),
                ColumnType = InteractiveColumnType.Display,
                Width = "200px"
            },
            new InteractiveColumnDefinition
            {
                Title = "數量",
                PropertyName = nameof(SetoffDetailDto.Quantity),
                ColumnType = InteractiveColumnType.Custom,
                Width = "100px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    return @<span>@detail.Quantity.ToString("N0")</span>;
                }
            },
            new InteractiveColumnDefinition
            {
                Title = "單價",
                PropertyName = nameof(SetoffDetailDto.UnitPrice),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    return @<span>@detail.UnitPrice.ToString("N0")</span>;
                }
            },
            
            new InteractiveColumnDefinition
            {
                Title = "總金額",
                PropertyName = nameof(SetoffDetailDto.TotalAmount),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    var cssClass = detail.TotalAmount < 0 ? "text-danger" : "";
                    var displayValue = detail.TotalAmount < 0 
                        ? $"({Math.Abs(detail.TotalAmount):N0})" 
                        : detail.TotalAmount.ToString("N0");
                    return @<span class="@cssClass">@displayValue</span>;
                }
            },
            
            new InteractiveColumnDefinition
            {
                Title = "已沖款",
                PropertyName = nameof(SetoffDetailDto.SettledAmount),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    // 使用 DynamicSettledAmount 來顯示包含當前編輯的沖款金額
                    var amount = detail.DynamicSettledAmount;
                    var cssClass = amount < 0 ? "text-danger" : "";
                    var displayValue = amount < 0 
                        ? $"({Math.Abs(amount):N0})" 
                        : amount.ToString("N0");
                    return @<span class="@cssClass">@displayValue</span>;
                }
            },
            new InteractiveColumnDefinition
            {
                Title = "已折讓",
                PropertyName = nameof(SetoffDetailDto.DiscountedAmount),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end text-info",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    // 使用 DynamicDiscountedAmount 來顯示包含當前編輯的折讓金額
                    var amount = detail.DynamicDiscountedAmount;
                    var displayValue = amount < 0 
                        ? $"({Math.Abs(amount):N0})" 
                        : amount.ToString("N0");
                    return @<span>@displayValue</span>;
                }
            },

            new InteractiveColumnDefinition
            {
                Title = "待沖款",
                PropertyName = nameof(SetoffDetailDto.PendingAmount),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    // 使用 DynamicPendingAmount 來顯示包含當前編輯的沖款和折讓金額
                    var amount = detail.DynamicPendingAmount;
                    // 負數表示公司應付給客戶（銷貨退回），正數表示客戶應付給公司（銷貨訂單）
                    var cssClass = amount < 0 ? "text-end text-primary fw-bold" : "text-end text-danger";
                    var displayValue = amount < 0 
                        ? $"({Math.Abs(amount):N0})" 
                        : amount.ToString("N0");
                    return @<span class="@cssClass">@displayValue</span>;
                }
            },

            new InteractiveColumnDefinition
            {
                Title = "本次沖款",
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    // 顯示：正數直接顯示，負數用括號顯示，0 為空
                    var displayValue = detail.ThisTimeAmount != 0 
                        ? (detail.ThisTimeAmount < 0 
                            ? $"({Math.Abs(detail.ThisTimeAmount):N0})" 
                            : detail.ThisTimeAmount.ToString("N0"))
                        : "";
                    var inputClass = detail.ThisTimeAmount < 0 
                        ? "form-control form-control-sm text-end text-primary" 
                        : "form-control form-control-sm text-end";
                    
                    return @<input type="text"
                                  class="@inputClass"
                                  value="@displayValue"
                                  @oninput="@(async (e) => await HandleAmountChanged((detail, e.Value?.ToString())))"
                                  readonly="@IsReadOnly"
                                  placeholder="@(detail.TotalAmount < 0 ? "退款金額" : "")" />;
                }
            },
            new InteractiveColumnDefinition
            {
                Title = "本次折讓",
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var detail = (SetoffDetailDto)item;
                    // 顯示：正數直接顯示，負數用括號顯示，0 為空
                    var displayValue = detail.ThisTimeDiscountAmount != 0 
                        ? (detail.ThisTimeDiscountAmount < 0 
                            ? $"({Math.Abs(detail.ThisTimeDiscountAmount):N0})" 
                            : detail.ThisTimeDiscountAmount.ToString("N0"))
                        : "";
                    var inputClass = detail.ThisTimeDiscountAmount < 0 
                        ? "form-control form-control-sm text-end text-primary" 
                        : "form-control form-control-sm text-end";
                    
                    return @<input type="text"
                                  class="@inputClass"
                                  value="@displayValue"
                                  @oninput="@(async (e) => await HandleDiscountAmountChanged((detail, e.Value?.ToString())))"
                                  readonly="@IsReadOnly"
                                  placeholder="@(detail.TotalAmount < 0 ? "折讓金額" : "")" />;
                }
            },
            new ()
            {
                Title ="備註",
                PropertyName = nameof(SetoffDetailDto.Remark),
                
            }
        };

        return columns;
    }

    /// <summary>
    /// 處理金額變更事件
    /// </summary>
    private async Task HandleAmountChanged((SetoffDetailDto detail, string? value) args)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(args.value))
            {
                // 當輸入為空時，設置為 0，但保持可編輯狀態
                args.detail.ThisTimeAmount = 0;
            }
            else
            {
                // 處理括號格式的負數輸入，例如 "(1000)" -> -1000
                var cleanValue = args.value.Trim();
                bool isNegative = false;
                
                if (cleanValue.StartsWith("(") && cleanValue.EndsWith(")"))
                {
                    isNegative = true;
                    cleanValue = cleanValue.Substring(1, cleanValue.Length - 2);
                }
                else if (cleanValue.StartsWith("-"))
                {
                    isNegative = true;
                    cleanValue = cleanValue.Substring(1);
                }
                
                // 移除千分位符號
                cleanValue = cleanValue.Replace(",", "");
                
                if (decimal.TryParse(cleanValue, out var amount))
                {
                    if (isNegative) amount = -amount;
                    
                    // 計算可用於沖款的最大金額（考慮正負號）
                    decimal maxAmount;
                    
                    if (args.detail.IsEditMode)
                    {
                        // 編輯模式：使用原始待沖款金額（排除當前沖款單的影響）
                        var basePending = args.detail.TotalAmount 
                            - (args.detail.SettledAmount - args.detail.OriginalThisTimeAmount) 
                            - (args.detail.DiscountedAmount - args.detail.OriginalThisTimeDiscountAmount);
                        maxAmount = basePending - args.detail.ThisTimeDiscountAmount;
                    }
                    else
                    {
                        // 新增模式：待沖款金額 - 本次折讓金額
                        maxAmount = args.detail.PendingAmount - args.detail.ThisTimeDiscountAmount;
                    }
                    
                    // 根據待沖款的正負號來限制輸入
                    if (maxAmount >= 0)
                    {
                        // 正常應收：限制在 0 到 maxAmount 之間
                        args.detail.ThisTimeAmount = Math.Max(0, Math.Min(amount, maxAmount));
                    }
                    else
                    {
                        // 銷貨退回（應付給客戶）：限制在 maxAmount 到 0 之間
                        args.detail.ThisTimeAmount = Math.Min(0, Math.Max(amount, maxAmount));
                    }
                }
                else
                {
                    // 輸入無效時，保持原值不變
                    return;
                }
            }
            
            // 驗證所有金額
            ValidateAmounts();
            
            // 通知選擇變更 (這裡面會調用 StateHasChanged)
            await NotifySelectionChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleAmountChanged), GetType());
        }
    }

    /// <summary>
    /// 處理折讓金額變更事件
    /// </summary>
    private async Task HandleDiscountAmountChanged((SetoffDetailDto detail, string? value) args)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(args.value))
            {
                // 當輸入為空時，設置為 0，但保持可編輯狀態
                args.detail.ThisTimeDiscountAmount = 0;
            }
            else
            {
                // 處理括號格式的負數輸入，例如 "(1000)" -> -1000
                var cleanValue = args.value.Trim();
                bool isNegative = false;
                
                if (cleanValue.StartsWith("(") && cleanValue.EndsWith(")"))
                {
                    isNegative = true;
                    cleanValue = cleanValue.Substring(1, cleanValue.Length - 2);
                }
                else if (cleanValue.StartsWith("-"))
                {
                    isNegative = true;
                    cleanValue = cleanValue.Substring(1);
                }
                
                // 移除千分位符號
                cleanValue = cleanValue.Replace(",", "");
                
                if (decimal.TryParse(cleanValue, out var amount))
                {
                    if (isNegative) amount = -amount;
                    
                    // 計算可用於折讓的最大金額（考慮正負號）
                    decimal maxDiscountAmount;
                    
                    if (args.detail.IsEditMode)
                    {
                        // 編輯模式：使用原始待沖款金額（排除當前沖款單的影響）
                        var basePending = args.detail.TotalAmount 
                            - (args.detail.SettledAmount - args.detail.OriginalThisTimeAmount) 
                            - (args.detail.DiscountedAmount - args.detail.OriginalThisTimeDiscountAmount);
                        maxDiscountAmount = basePending - args.detail.ThisTimeAmount;
                    }
                    else
                    {
                        // 新增模式：待沖款金額 - 本次沖款金額
                        maxDiscountAmount = args.detail.PendingAmount - args.detail.ThisTimeAmount;
                    }
                    
                    // 根據待沖款的正負號來限制輸入
                    if (maxDiscountAmount >= 0)
                    {
                        // 正常應收：限制在 0 到 maxDiscountAmount 之間
                        args.detail.ThisTimeDiscountAmount = Math.Max(0, Math.Min(amount, maxDiscountAmount));
                    }
                    else
                    {
                        // 銷貨退回（應付給客戶）：限制在 maxDiscountAmount 到 0 之間
                        args.detail.ThisTimeDiscountAmount = Math.Min(0, Math.Max(amount, maxDiscountAmount));
                    }
                }
                else
                {
                    // 輸入無效時，保持原值不變
                    return;
                }
            }
            
            // 驗證所有金額
            ValidateAmounts();
            
            // 通知選擇變更
            await NotifySelectionChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleDiscountAmountChanged), GetType());
        }
    }


    /// <summary>
    /// 驗證金額
    /// </summary>
    private void ValidateAmounts()
    {
        ValidationErrors.Clear();
        
        foreach (var detail in Details.Where(d => d.ThisTimeAmount > 0 || d.ThisTimeDiscountAmount > 0))
        {
            // 驗證本次沖款金額
            var amountValidation = detail.ValidateThisTimeAmount();
            if (!amountValidation.IsValid)
            {
                var key = $"{detail.GetHashCode()}_{nameof(SetoffDetailDto.ThisTimeAmount)}";
                ValidationErrors[key] = amountValidation.ErrorMessage!;
            }
            
            // 驗證本次折讓金額
            var discountValidation = detail.ValidateThisTimeDiscountAmount();
            if (!discountValidation.IsValid)
            {
                var key = $"{detail.GetHashCode()}_{nameof(SetoffDetailDto.ThisTimeDiscountAmount)}";
                ValidationErrors[key] = discountValidation.ErrorMessage!;
            }
            
            // 驗證總金額
            var totalValidation = detail.ValidateTotalThisTimeAmount();
            if (!totalValidation.IsValid)
            {
                var key = $"{detail.GetHashCode()}_Total";
                ValidationErrors[key] = totalValidation.ErrorMessage!;
            }
        }
    }

    /// <summary>
    /// 處理驗證失敗事件
    /// </summary>
    private async Task HandleValidationFailed((SetoffDetailDto item, string propertyName, string? errorMessage) args)
    {
        try
        {
            if (!string.IsNullOrEmpty(args.errorMessage))
            {
                await NotificationService.ShowErrorAsync("驗證失敗", args.errorMessage);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleValidationFailed), GetType());
        }
    }
    
    /// <summary>
    /// 從選擇中移除指定項目（清除沖款金額）
    /// </summary>
    private async Task RemoveItemFromSelection(SetoffDetailDto item)
    {
        try
        {
            item.ThisTimeAmount = 0;
            item.ThisTimeDiscountAmount = 0;
            
            // 驗證所有金額
            ValidateAmounts();
            
            // 通知選擇變更
            await NotifySelectionChanged();
            
            // 在編輯模式下，清空金額後會自動從顯示列表中移除（因為 GetDisplayDetails 會過濾）
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(RemoveItemFromSelection), GetType());
        }
    }


    /// <summary>
    /// 通知選擇變更
    /// </summary>
    private async Task NotifySelectionChanged()
    {
        try
        {
            var selectedDetails = SelectedDetails;
            // 總金額 = 本次沖款 + 本次折讓
            var totalAmount = selectedDetails.Sum(d => d.ThisTimeAmount + d.ThisTimeDiscountAmount);

            if (OnSelectedDetailsChanged.HasDelegate)
            {
                await OnSelectedDetailsChanged.InvokeAsync(selectedDetails);
            }

            if (OnTotalAmountChanged.HasDelegate)
            {
                await OnTotalAmountChanged.InvokeAsync(totalAmount);
            }
            
            // 確保 UI 狀態更新
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(NotifySelectionChanged), GetType());
        }
    }
    #endregion

    #region 公開方法
    /// <summary>
    /// 重新整理資料
    /// </summary>
    public async Task RefreshAsync()
    {
        await LoadDetailsAsync();
    }

    /// <summary>
    /// 清除選擇
    /// </summary>
    public void ClearSelection()
    {
        foreach (var detail in Details)
        {
            detail.ThisTimeAmount = 0;
            detail.ThisTimeDiscountAmount = 0;
        }
        ValidationErrors.Clear();
        StateHasChanged();
    }

    /// <summary>
    /// 取得選中的明細項目
    /// </summary>
    /// <returns>選中的明細項目列表</returns>
    public List<SetoffDetailDto> GetSelectedDetails()
    {
        return SelectedDetails;
    }

    /// <summary>
    /// 取得總沖款金額（包含沖款和折讓）
    /// </summary>
    /// <returns>總沖款金額</returns>
    public decimal GetTotalAmount()
    {
        return SelectedDetails.Sum(d => d.ThisTimeAmount + d.ThisTimeDiscountAmount);
    }
    
    /// <summary>
    /// 取得總沖款金額（僅現金沖款）
    /// </summary>
    /// <returns>總沖款金額</returns>
    public decimal GetTotalCashAmount()
    {
        return SelectedDetails.Sum(d => d.ThisTimeAmount);
    }
    
    /// <summary>
    /// 取得總折讓金額
    /// </summary>
    /// <returns>總折讓金額</returns>
    public decimal GetTotalDiscountAmount()
    {
        return SelectedDetails.Sum(d => d.ThisTimeDiscountAmount);
    }

    /// <summary>
    /// 驗證選中的項目
    /// </summary>
    /// <returns>驗證結果</returns>
    public (bool IsValid, List<string> Errors) ValidateSelection()
    {
        var errors = new List<string>();
        
        if (!SelectedDetails.Any())
        {
            errors.Add("請至少選擇一筆明細項目");
        }

        foreach (var detail in SelectedDetails)
        {
            // 驗證沖款金額
            if (detail.ThisTimeAmount > 0)
            {
                var amountValidation = detail.ValidateThisTimeAmount();
                if (!amountValidation.IsValid)
                {
                    errors.Add($"{detail.DocumentNumber} - 沖款金額: {amountValidation.ErrorMessage}");
                }
            }
            
            // 驗證折讓金額
            if (detail.ThisTimeDiscountAmount > 0)
            {
                var discountValidation = detail.ValidateThisTimeDiscountAmount();
                if (!discountValidation.IsValid)
                {
                    errors.Add($"{detail.DocumentNumber} - 折讓金額: {discountValidation.ErrorMessage}");
                }
            }
            
            // 驗證總金額
            var totalValidation = detail.ValidateTotalThisTimeAmount();
            if (!totalValidation.IsValid)
            {
                errors.Add($"{detail.DocumentNumber} - {totalValidation.ErrorMessage}");
            }
        }

        return (errors.Count == 0, errors);
    }
    #endregion
}