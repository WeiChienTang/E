@inject ERPCore2.Services.INotificationService NotificationService
@inject ERPCore2.Services.IAuthenticationService AuthenticationService

<div class="employee-account-manager">
    @* 密碼設定區塊（僅新增模式） *@
    @if (IsCreateMode)
    {
        <div class="card-body">
            <div class="row">
                <div class="col-md-2">
                    <div class="mb-3">
                        <label for="password" class="form-label">密碼 <span class="text-danger">*</span></label>
                        <input type="password" @bind="password" class="form-control" id="password" />
                        <div class="form-text">密碼長度至少 4 個字元，可包含數字、文字或符號</div>
                        @if (!string.IsNullOrEmpty(passwordValidationMessage))
                        {
                            <div class="text-danger small">@passwordValidationMessage</div>
                        }
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">確認密碼 <span class="text-danger">*</span></label>
                        <input type="password" @bind="confirmPassword" class="form-control" id="confirmPassword" />
                        @if (!string.IsNullOrEmpty(confirmPasswordValidationMessage))
                        {
                            <div class="text-danger small">@confirmPasswordValidationMessage</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @* 帳號設定區塊（僅編輯模式） *@
    @if (!IsCreateMode && Employee != null)
    {
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <!-- IsLocked 功能已移除 -->
                    </div>
                </div>
                
                @if (Employee.FailedLoginAttempts > 0)
                {
                    <div class="row">
                        <div class="col-md-2">
                            <div class="mb-3">
                                <label class="form-label">失敗登入次數</label>
                                <div class="fw-bold @(Employee.FailedLoginAttempts >= 3 ? "text-danger" : "text-warning")">
                                    @Employee.FailedLoginAttempts
                                </div>
                                <button type="button" class="btn btn-outline-secondary btn-sm mt-1" @onclick="ResetFailedAttempts">
                                    重設登入失敗次數
                                </button>
                            </div>
                        </div>
                    </div>
                }

                <div class="row">
                    <div class="col-12">
                        <button type="button" class="btn btn-warning" @onclick="ShowPasswordResetDialog">
                            <i class="bi-key me-1"></i>重設密碼
                        </button>
                    </div>
                </div>
            </div>
    }

    @* 密碼重設模態對話框 *@
    @if (showPasswordResetModal)
    {
        <div class="modal fade show password-reset-modal" style="display: block; background: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi-key me-2"></i>
                            重設密碼 - @Employee?.Account
                        </h5>
                        <button type="button" class="btn-close" @onclick="ClosePasswordResetDialog" aria-label="關閉"></button>
                    </div>
                        <div class="mb-3">
                            <label for="newPassword" class="form-label">新密碼 <span class="text-danger">*</span></label>
                            <input type="password" @bind="newPassword" class="form-control" id="newPassword" 
                                placeholder="請輸入新密碼" />
                            <div class="form-text">密碼長度至少 4 個字元，可包含數字、文字或符號</div>
                            @if (!string.IsNullOrEmpty(newPasswordValidationMessage))
                            {
                                <div class="text-danger small mt-1">@newPasswordValidationMessage</div>
                            }
                        </div>
                        <div class="mb-3">
                            <label for="confirmNewPassword" class="form-label">確認新密碼 <span class="text-danger">*</span></label>
                            <input type="password" @bind="confirmNewPassword" class="form-control" id="confirmNewPassword" 
                                placeholder="請再次輸入新密碼" />
                            @if (!string.IsNullOrEmpty(confirmNewPasswordValidationMessage))
                            {
                                <div class="text-danger small mt-1">@confirmNewPasswordValidationMessage</div>
                            }
                        </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="ClosePasswordResetDialog">取消</button>
                        <button type="button" class="btn btn-warning" @onclick="ConfirmPasswordReset">確定重設</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public ERPCore2.Data.Entities.Employee? Employee { get; set; }
    [Parameter] public bool IsCreateMode { get; set; }
    [Parameter] public EventCallback<ERPCore2.Data.Entities.Employee> OnEmployeeChanged { get; set; }
    [Parameter] public EventCallback<string> OnPasswordChanged { get; set; }
    [Parameter] public Func<string, Task<bool>>? PasswordValidator { get; set; }

    // 密碼欄位
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string passwordValidationMessage = string.Empty;
    private string confirmPasswordValidationMessage = string.Empty;

    // 密碼重設模態對話框
    private bool showPasswordResetModal = false;
    private string newPassword = string.Empty;
    private string confirmNewPassword = string.Empty;
    private string newPasswordValidationMessage = string.Empty;
    private string confirmNewPasswordValidationMessage = string.Empty;

    public string Password => password;
    public string ConfirmPassword => confirmPassword;

    public bool ValidatePassword()
    {
        passwordValidationMessage = string.Empty;
        confirmPasswordValidationMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(password))
        {
            passwordValidationMessage = "請輸入密碼";
            return false;
        }

        if (password.Length < 4)
        {
            passwordValidationMessage = "密碼長度至少需要 4 個字元";
            return false;
        }

        if (string.IsNullOrWhiteSpace(confirmPassword))
        {
            confirmPasswordValidationMessage = "請確認密碼";
            return false;
        }

        if (password != confirmPassword)
        {
            confirmPasswordValidationMessage = "密碼確認不一致";
            return false;
        }

        return true;
    }

    private async Task ResetFailedAttempts()
    {
        try
        {
            if (Employee != null)
            {
                Employee.FailedLoginAttempts = 0;
                
                await OnEmployeeChanged.InvokeAsync(Employee);
                await NotificationService.ShowSuccessAsync("登入失敗次數已重設");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"重設登入失敗次數時發生錯誤：{ex.Message}");
        }
    }

    private async Task ShowPasswordResetDialog()
    {
        try
        {
            if (Employee == null) return;

            // 重置表單狀態
            newPassword = string.Empty;
            confirmNewPassword = string.Empty;
            newPasswordValidationMessage = string.Empty;
            confirmNewPasswordValidationMessage = string.Empty;
            
            // 顯示模態對話框
            showPasswordResetModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"開啟密碼重設對話框時發生錯誤：{ex.Message}");
        }
    }

    private void ClosePasswordResetDialog()
    {
        showPasswordResetModal = false;
        newPassword = string.Empty;
        confirmNewPassword = string.Empty;
        newPasswordValidationMessage = string.Empty;
        confirmNewPasswordValidationMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ConfirmPasswordReset()
    {
        try
        {
            if (Employee == null) return;

            // 驗證新密碼
            if (!ValidateNewPassword())
            {
                StateHasChanged();
                return;
            }

            // 執行密碼重設
            var resetResult = await AuthenticationService.ResetPasswordAsync(Employee.Id, newPassword);
            
            if (resetResult.IsSuccess)
            {
                // 重設登入失敗次數
                Employee.FailedLoginAttempts = 0;
                
                await OnEmployeeChanged.InvokeAsync(Employee);
                
                // 關閉對話框
                ClosePasswordResetDialog();
                
                await NotificationService.ShowSuccessAsync("密碼重設成功！請使用新密碼登入。");
                StateHasChanged();
            }
            else
            {
                await NotificationService.ShowErrorAsync($"重設密碼失敗：{resetResult.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"重設密碼時發生錯誤：{ex.Message}");
        }
    }

    private bool ValidateNewPassword()
    {
        newPasswordValidationMessage = string.Empty;
        confirmNewPasswordValidationMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(newPassword))
        {
            newPasswordValidationMessage = "請輸入新密碼";
            return false;
        }

        if (newPassword.Length < 4)
        {
            newPasswordValidationMessage = "密碼長度至少需要 4 個字元";
            return false;
        }

        if (string.IsNullOrWhiteSpace(confirmNewPassword))
        {
            confirmNewPasswordValidationMessage = "請確認新密碼";
            return false;
        }

        if (newPassword != confirmNewPassword)
        {
            confirmNewPasswordValidationMessage = "密碼確認不一致";
            return false;
        }

        return true;
    }

    private async Task OnStatusChange(ERPCore2.Data.Enums.EntityStatus newStatus)
    {
        if (Employee != null)
        {
            Employee.Status = newStatus;
            await OnEmployeeChanged.InvokeAsync(Employee);
            StateHasChanged();
        }
    }

    public void ClearPassword()
    {
        password = string.Empty;
        confirmPassword = string.Empty;
        passwordValidationMessage = string.Empty;
        confirmPasswordValidationMessage = string.Empty;
        StateHasChanged();
    }
}
