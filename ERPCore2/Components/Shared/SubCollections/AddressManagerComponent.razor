@typeparam TAddressEntity where TAddressEntity : ERPCore2.Data.BaseEntity, new()
@typeparam TParentEntity where TParentEntity : ERPCore2.Data.BaseEntity
@using ERPCore2.Data
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.Headers
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="card mb-4">
    <GenericHeaderComponent Title="@Title"
                           Subtitle="@GetSubtitle()"
                           TitleIcon="@Icon"
                           IsCardHeader="true">
        <ActionButtons>
            @if (!IsReadOnly)
            {
                <button class="btn btn-primary" @onclick="AddItemAsync">
                    <i class="bi bi-plus me-1"></i>
                    新增@ItemDisplayName
                </button>
            }
        </ActionButtons>
    </GenericHeaderComponent>
    <div class="card-body">
        @if (Items.Any())
        {
            <div class="row g-3">
                @for (int i = 0; i < Items.Count; i++)
                {
                    var index = i; // 為了閉包
                    var item = Items[index];
                    <div class="col-lg-6">
                        <div class="card border-secondary">
                            <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                <small class="fw-bold text-muted">@ItemDisplayName #@(index + 1)</small>
                                <div class="btn-group btn-group-sm">
                                    @if (GetIsPrimary(item))
                                    {
                                        <span class="badge bg-primary">主要</span>
                                    }
                                    else if (!IsReadOnly)
                                    {
                                        <button class="btn btn-outline-primary btn-sm" 
                                                @onclick="() => SetPrimaryAsync(index)" 
                                                title="設為主要">
                                            <i class="bi bi-star"></i>
                                        </button>
                                    }
                                    @if (!IsReadOnly)
                                    {
                                        <button class="btn btn-outline-danger btn-sm" 
                                                @onclick="() => RemoveItemAsync(index)" 
                                                title="移除">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    }
                                </div>
                            </div>
                            <div class="card-body p-3">
                                <div class="row g-2">
                                    @* 地址類型 *@
                                    <div class="col-12">
                                        <label class="form-label small">@TypeDisplayName</label>
                                        <select class="form-select form-select-sm" 
                                                @onchange="@(e => UpdateAddressType(index, e.Value?.ToString()))"
                                                value="@GetTypeId(item)"
                                                disabled="@IsReadOnly">
                                            <option value="">請選擇@TypeDisplayName</option>
                                            @foreach (var option in Options)
                                            {
                                                <option value="@GetOptionId(option)">@GetOptionDisplayText(option)</option>
                                            }
                                        </select>
                                    </div>
                                    @* 郵遞區號和城市 *@
                                    <div class="col-6">
                                        <label class="form-label small">郵遞區號</label>
                                        <input type="text" 
                                               class="form-control form-control-sm" 
                                               placeholder="郵遞區號"
                                               value="@GetPostalCode(item)"
                                               @onchange="@(e => UpdatePostalCode(index, e.Value?.ToString()))"
                                               readonly="@IsReadOnly" />
                                    </div>
                                    <div class="col-6">
                                        <label class="form-label small">城市</label>
                                        <input type="text" 
                                               class="form-control form-control-sm" 
                                               placeholder="城市"
                                               value="@GetCity(item)"
                                               @onchange="@(e => UpdateCity(index, e.Value?.ToString()))"
                                               readonly="@IsReadOnly" />
                                    </div>
                                    @* 行政區 *@
                                    <div class="col-12">
                                        <label class="form-label small">行政區</label>
                                        <input type="text" 
                                               class="form-control form-control-sm" 
                                               placeholder="行政區"
                                               value="@GetDistrict(item)"
                                               @onchange="@(e => UpdateDistrict(index, e.Value?.ToString()))"
                                               readonly="@IsReadOnly" />
                                    </div>
                                    @* 詳細地址 *@
                                    <div class="col-12">
                                        <label class="form-label small">詳細地址</label>
                                        <textarea class="form-control form-control-sm" 
                                                  rows="2" 
                                                  placeholder="詳細地址"
                                                  readonly="@IsReadOnly"
                                                  @onchange="@(e => UpdateAddress(index, e.Value?.ToString()))">@GetAddress(item)</textarea>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-4 text-muted">
                <i class="bi @EmptyIcon fs-1 mb-3 d-block"></i>
                <p>尚未建立@ItemDisplayName</p>
                @if (!IsReadOnly)
                {
                    <button class="btn btn-outline-primary" @onclick="AddItemAsync">
                        <i class="bi bi-plus me-1"></i>
                        新增第一個@ItemDisplayName
                    </button>
                }
            </div>
        }
    </div>
</div>

@code {
    // ===== 基本參數 =====
    [Parameter] public List<TAddressEntity> Items { get; set; } = new();
    [Parameter] public List<ERPCore2.Data.BaseEntity> Options { get; set; } = new(); // 地址類型選項
    [Parameter] public int ParentEntityId { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "地址資訊";
    [Parameter] public string Icon { get; set; } = "geo-alt";
    [Parameter] public string ItemDisplayName { get; set; } = "地址";
    [Parameter] public string TypeDisplayName { get; set; } = "地址類型";
    [Parameter] public string EmptyIcon { get; set; } = "bi-geo-alt-slash";
    
    // ===== 委派參數 - Getter =====
    [Parameter] public Func<TAddressEntity, bool> GetIsPrimary { get; set; } = item => false;
    [Parameter] public Func<TAddressEntity, int?> GetTypeId { get; set; } = item => null;
    [Parameter] public Func<TAddressEntity, string?> GetPostalCode { get; set; } = item => null;
    [Parameter] public Func<TAddressEntity, string?> GetCity { get; set; } = item => null;
    [Parameter] public Func<TAddressEntity, string?> GetDistrict { get; set; } = item => null;
    [Parameter] public Func<TAddressEntity, string?> GetAddress { get; set; } = item => null;    [Parameter] public Func<ERPCore2.Data.BaseEntity, int> GetOptionId { get; set; } = option => option.Id;
    [Parameter] public Func<ERPCore2.Data.BaseEntity, string> GetOptionDisplayText { get; set; } = option => option.ToString() ?? "";
    
    // ===== 委派參數 - Setter =====
    [Parameter] public Action<TAddressEntity, bool> SetIsPrimary { get; set; } = (item, isPrimary) => { };
    [Parameter] public Action<TAddressEntity, int?> SetTypeId { get; set; } = (item, typeId) => { };
    [Parameter] public Action<TAddressEntity, string?> SetPostalCode { get; set; } = (item, value) => { };
    [Parameter] public Action<TAddressEntity, string?> SetCity { get; set; } = (item, value) => { };
    [Parameter] public Action<TAddressEntity, string?> SetDistrict { get; set; } = (item, value) => { };
    [Parameter] public Action<TAddressEntity, string?> SetAddress { get; set; } = (item, value) => { };
    [Parameter] public Action<TAddressEntity, int> SetParentId { get; set; } = (item, parentId) => { };
    
    // ===== 事件參數 =====
    [Parameter] public EventCallback<List<TAddressEntity>> ItemsChanged { get; set; }
    [Parameter] public EventCallback<TAddressEntity> ItemAdded { get; set; }
    [Parameter] public EventCallback<TAddressEntity> ItemRemoved { get; set; }
    [Parameter] public EventCallback<TAddressEntity> PrimaryChanged { get; set; }
    
    // ===== 內部方法 =====
    
    private string GetSubtitle()
    {
        return $"管理{ItemDisplayName}資料 ({Items.Count} 筆)";
    }
    
    public async Task AddItemAsync()
    {
        if (IsReadOnly) return;
        
        var newItem = new TAddressEntity();
        SetParentId(newItem, ParentEntityId);
        SetPostalCode(newItem, "");
        SetCity(newItem, "");
        SetDistrict(newItem, "");
        SetAddress(newItem, "");
        SetIsPrimary(newItem, Items.Count == 0); // 第一個自動設為主要
        newItem.Status = EntityStatus.Active;
        
        Items.Add(newItem);
        
        await ItemAdded.InvokeAsync(newItem);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        var removedItem = Items[index];
        var wasPrimary = GetIsPrimary(removedItem);
        
        Items.RemoveAt(index);
        
        // 如果移除的是主要項目且還有其他項目，設定第一個為主要
        if (wasPrimary && Items.Any())
        {
            SetIsPrimary(Items[0], true);
            await PrimaryChanged.InvokeAsync(Items[0]);
        }
        
        await ItemRemoved.InvokeAsync(removedItem);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task SetPrimaryAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        // 清除所有主要標記
        foreach (var item in Items)
        {
            SetIsPrimary(item, false);
        }
        
        // 設定指定的為主要
        SetIsPrimary(Items[index], true);
        
        await PrimaryChanged.InvokeAsync(Items[index]);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    private async Task UpdateAddressType(int index, string? typeIdStr)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        if (int.TryParse(typeIdStr, out var typeId))
        {
            SetTypeId(Items[index], typeId);
        }
        else
        {
            SetTypeId(Items[index], null);
        }
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    private async Task UpdatePostalCode(int index, string? value)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        SetPostalCode(Items[index], value);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    private async Task UpdateCity(int index, string? value)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        SetCity(Items[index], value);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    private async Task UpdateDistrict(int index, string? value)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        SetDistrict(Items[index], value);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    private async Task UpdateAddress(int index, string? value)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        SetAddress(Items[index], value);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
      public Task<bool> ValidateAsync()
    {
        // 地址通常不強制驗證，可以根據需要自訂
        return Task.FromResult(true);
    }
}
