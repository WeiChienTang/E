@typeparam TAddressEntity where TAddressEntity : ERPCore2.Data.BaseEntity, new()
@typeparam TParentEntity where TParentEntity : ERPCore2.Data.BaseEntity
@using ERPCore2.Data
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Buttons
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="card mb-4">    
    @* <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="bi bi-@Icon me-2"></i>
            @Title
        </h5>
        <small class="text-muted">@GetSubtitle()</small>
    </div>     *@
    <div class="card-body">
        @if (Items.Any())
        {
            <div class="row g-3">
                @for (int i = 0; i < Items.Count; i++)
                {
                    var index = i; // 為了閉包
                    var item = Items[index];                    
                    <div class="col-lg-3 col-md-6">
                        <div class="card border h-100">
                            <div class="card-header bg-light d-flex justify-content-between align-items-center py-2">
                                <small class="fw-bold text-muted">#@(index + 1)</small>
                                <div class="btn-group btn-group-sm">
                                    @if (GetIsPrimary(item))
                                    {
                                        <span class="badge bg-primary rounded-pill px-2">
                                            <i class="bi bi-star-fill me-1"></i>主要
                                        </span>                                
                                    }
                                    else if (!IsReadOnly)
                                    {
                                        <GenericButtonComponent Variant="ButtonVariant.OutlinePrimary" 
                                                              Size="ButtonSize.Small"
                                                              IconClass="bi bi-star"
                                                              OnClick="() => SetPrimaryAsync(index)" 
                                                              Title="設為主要" />
                                    }
                                    @if (!IsReadOnly)
                                    {
                                        <GenericButtonComponent Variant="ButtonVariant.OutlineDanger" 
                                                              Size="ButtonSize.Small"
                                                              IconClass="bi bi-trash"
                                                              OnClick="() => RemoveItemAsync(index)" 
                                                              Title="移除" />
                                    }
                                </div>
                            </div>                            
                            <div class="card-body p-3">
                                <div class="row g-2">
                                    @* 地址類型 *@
                                    <div class="col-12">
                                        <label class="form-label">@TypeDisplayName <span class="text-danger">*</span></label>
                                        <select class="form-select" 
                                                @onchange="@(e => UpdateAddressType(index, e.Value?.ToString()))"
                                                value="@GetTypeId(item)"
                                                disabled="@IsReadOnly">
                                            <option value="">請選擇 @TypeDisplayName</option>
                                            @foreach (var option in Options)
                                            {
                                                <option value="@GetOptionId(option)">@GetOptionDisplayText(option)</option>
                                            }
                                        </select>
                                    </div>
                                    @* 郵遞區號和縣市 *@
                                    <div class="col-md-6">
                                        <label class="form-label">郵遞區號</label>
                                        <input type="text" 
                                               class="form-control" 
                                               placeholder="郵遞區號"
                                               value="@GetPostalCode(item)"
                                               @onchange="@(e => UpdatePostalCode(index, e.Value?.ToString()))"
                                               readonly="@IsReadOnly" />
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label">縣市</label>
                                        <input type="text" 
                                               class="form-control" 
                                               placeholder="縣市"
                                               value="@GetCity(item)"
                                               @onchange="@(e => UpdateCity(index, e.Value?.ToString()))"
                                               readonly="@IsReadOnly" />
                                    </div>
                                    @* 詳細地址 *@
                                    <div class="col-12">
                                        <label class="form-label">詳細地址</label>
                                        <textarea class="form-control" 
                                                  rows="2" 
                                                  placeholder="詳細地址"
                                                  readonly="@IsReadOnly"
                                                  @onchange="@(e => UpdateAddress(index, e.Value?.ToString()))">@GetAddress(item)</textarea>
                                        <div class="form-text">請輸入完整的地址資訊</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                
                @* 新增按鈕 - 始終顯示在下一個位置 *@
                @if (!IsReadOnly)
                {                
                    <div class="col-lg-3 col-md-6">
                        <div class="card border-dashed h-100 d-flex align-items-center justify-content-center" 
                             style="border-style: dashed !important; border-color: #dee2e6;">
                            <div class="text-center p-4">
                                <GenericButtonComponent Variant="ButtonVariant.OutlinePrimary" 
                                                      Size="ButtonSize.Large"
                                                      IconClass="bi bi-plus-lg"
                                                      Text="新增"
                                                      OnClick="AddItemAsync" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            @* 空狀態顯示 *@
            <div class="text-center py-5">
                <div class="mb-3">
                    <i class="@EmptyIcon text-muted" style="font-size: 3rem;"></i>
                </div>
                <h6 class="text-muted mb-3">尚無資料</h6>
                @if (!IsReadOnly)
                {
                    <GenericButtonComponent Variant="ButtonVariant.Primary" 
                                          IconClass="bi bi-plus-lg"
                                          Text="新增第一個"
                                          OnClick="AddItemAsync" />
                }
            </div>
        }    
    </div>
</div>

@code {
    // ===== 基本參數 =====
    [Parameter] public List<TAddressEntity> Items { get; set; } = new();
    [Parameter] public List<ERPCore2.Data.BaseEntity> Options { get; set; } = new(); 
        
    // 地址類型選項
    [Parameter] public int ParentEntityId { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "地址資訊";
    [Parameter] public string Icon { get; set; } = "geo-alt";
    [Parameter] public string ItemDisplayName { get; set; } = "地址";
    [Parameter] public string TypeDisplayName { get; set; } = "地址類型";
    [Parameter] public string EmptyIcon { get; set; } = "bi-geo-alt-slash";
    
    // ===== 委派參數 - Getter =====
    [Parameter] public Func<TAddressEntity, bool> GetIsPrimary { get; set; } = item => false;
    [Parameter] public Func<TAddressEntity, int?> GetTypeId { get; set; } = item => null;
    [Parameter] public Func<TAddressEntity, string?> GetPostalCode { get; set; } = item => null;
    [Parameter] public Func<TAddressEntity, string?> GetCity { get; set; } = item => null;
    [Parameter] public Func<TAddressEntity, string?> GetAddress { get; set; } = item => null;    [Parameter] public Func<ERPCore2.Data.BaseEntity, int> GetOptionId { get; set; } = option => option.Id;
    [Parameter] public Func<ERPCore2.Data.BaseEntity, string> GetOptionDisplayText { get; set; } = option => option.ToString() ?? "";
    
    // ===== 委派參數 - Setter =====
    [Parameter] public Action<TAddressEntity, bool> SetIsPrimary { get; set; } = (item, isPrimary) => { };
    [Parameter] public Action<TAddressEntity, int?> SetTypeId { get; set; } = (item, typeId) => { };
    [Parameter] public Action<TAddressEntity, string?> SetPostalCode { get; set; } = (item, value) => { };
    [Parameter] public Action<TAddressEntity, string?> SetCity { get; set; } = (item, value) => { };
    [Parameter] public Action<TAddressEntity, string?> SetAddress { get; set; } = (item, value) => { };
    [Parameter] public Action<TAddressEntity, int> SetParentId { get; set; } = (item, parentId) => { };
    
    // ===== 事件參數 =====
    [Parameter] public EventCallback<List<TAddressEntity>> ItemsChanged { get; set; }
    [Parameter] public EventCallback<TAddressEntity> ItemAdded { get; set; }
    [Parameter] public EventCallback<TAddressEntity> ItemRemoved { get; set; }
    [Parameter] public EventCallback<TAddressEntity> PrimaryChanged { get; set; }
    
    // ===== 內部方法 =====
    
    private string GetSubtitle()
    {
        return $"管理{ItemDisplayName}資料 ({Items.Count} 筆)";
    }    public async Task AddItemAsync()
    {
        if (IsReadOnly) return;
        
        var newItem = new TAddressEntity();
        // 使用臨時負數 ID 來區分新項目（避免與資料庫現有 ID 衝突）
        newItem.Id = -(Items.Count + 1 + DateTime.Now.Millisecond);
        SetParentId(newItem, ParentEntityId);
        SetPostalCode(newItem, "");
        SetCity(newItem, "");
        SetAddress(newItem, "");
        SetIsPrimary(newItem, Items.Count == 0); // 第一個自動設為主要
        newItem.Status = EntityStatus.Active;
        newItem.CreatedAt = DateTime.Now;
        newItem.IsDeleted = false;
        
        Items.Add(newItem);
        
        await ItemAdded.InvokeAsync(newItem);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        var removedItem = Items[index];
        var wasPrimary = GetIsPrimary(removedItem);
        
        Items.RemoveAt(index);
        
        // 如果移除的是主要項目且還有其他項目，設定第一個為主要
        if (wasPrimary && Items.Any())
        {
            SetIsPrimary(Items[0], true);
            await PrimaryChanged.InvokeAsync(Items[0]);
        }
        
        await ItemRemoved.InvokeAsync(removedItem);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task SetPrimaryAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        // 清除所有主要標記
        foreach (var item in Items)
        {
            SetIsPrimary(item, false);
        }
        
        // 設定指定的為主要
        SetIsPrimary(Items[index], true);
        
        await PrimaryChanged.InvokeAsync(Items[index]);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    private async Task UpdateAddressType(int index, string? typeIdStr)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        if (int.TryParse(typeIdStr, out var typeId))
        {
            SetTypeId(Items[index], typeId);
        }
        else
        {
            SetTypeId(Items[index], null);
        }
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    private async Task UpdatePostalCode(int index, string? value)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        SetPostalCode(Items[index], value);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    private async Task UpdateCity(int index, string? value)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        SetCity(Items[index], value);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    private async Task UpdateAddress(int index, string? value)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        SetAddress(Items[index], value);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    public Task<bool> ValidateAsync()
    {
        // 地址通常不強制驗證，可以根據需要自訂
        return Task.FromResult(true);
    }
}
