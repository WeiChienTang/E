@typeparam TAddressEntity where TAddressEntity : ERPCore2.Data.BaseEntity, new()
@typeparam TParentEntity where TParentEntity : ERPCore2.Data.BaseEntity
@using ERPCore2.Services
@inject INotificationService NotificationService

<div class="table-responsive">
    <table class="table table-sm table-hover">
        <thead class="table-light">
            <tr>
                <th>地址資訊</th>
                @if (!IsReadOnly)
                {
                    <th width="60">操作</th>
                }
            </tr>
        </thead>
        <tbody>
                        @for (int i = 0; i < Items.Count; i++)
                        {
                            var index = i;
                            var item = Items[index];
                            <tr @onclick="() => { if (!IsReadOnly) ShowEditModal(index); }" style="@(IsReadOnly ? "cursor: default;" : "cursor: pointer;")" title="@(IsReadOnly ? "" : "點擊編輯")">
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-geo-alt me-2"></i>
                                        <div>
                                            <span>@GetAddressDisplayText(item)</span>
                                        </div>
                                    </div>
                                </td>
                                @if (!IsReadOnly)
                                {
                                    <td @onclick:stopPropagation="true">
                                        <GenericButtonComponent Variant="ButtonVariant.OutlineDanger" Size="ButtonSize.Small"
                                                               IconClass="bi bi-trash" OnClick="() => RemoveItemAsync(index)" 
                                                               Title="移除" />
                                    </td>
                                }
                            </tr>
                        }
                        @* 新增按鈕行 *@
                        @if (!IsReadOnly)
                        {
                            <tr>
                                <td colspan="@(IsReadOnly ? 1 : 2)" class="text-center py-3 border-top">
                                    <GenericButtonComponent Variant="ButtonVariant.OutlinePrimary" 
                                                           Text="@($"新增{ItemDisplayName}")" 
                                                           IconClass="bi-plus me-1" 
                                                           OnClick="ShowAddModal" />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

@* 如果沒有任何資料時的顯示 *@
@if (!Items.Any())
{
    <div class="text-center py-4 text-muted">
        <i class="bi @EmptyIcon fs-3 mb-2 d-block"></i>
        <p class="mb-0">@EmptyMessage</p>
    </div>
}

@* 新增/編輯地址 Modal *@
@if (showAddModal || showEditModal)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(showEditModal ? "編輯" : "新增")地址</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-12">
                            <label class="form-label">@TypeDisplayName <span class="text-danger">*</span></label>
                            @if (Options.Any())
                            {
                                <select class="form-select" @bind="currentAddressTypeId">
                                    @foreach (var option in Options)
                                    {
                                        <option value="@GetOptionId(option)">@GetOptionDisplayText(option)</option>
                                    }
                                </select>
                            }
                            else
                            {
                                <div class="form-control bg-light text-muted">
                                    沒有資料，請新增@TypeDisplayName
                                </div>
                            }
                        </div>
                        <div class="col-12">
                            <label class="form-label">詳細地址 <span class="text-danger">*</span></label>
                            <textarea class="form-control" rows="3" @bind="currentAddress" placeholder="請輸入詳細地址"></textarea>
                        </div>
                        <div class="col-12">
                            <label class="form-label">備註</label>
                            <textarea class="form-control" rows="2" @bind="currentRemarks" placeholder="請輸入備註"></textarea>
                        </div>
                    </div>
                </div>

                @* 元數據區段 - 顯示審計資訊 *@
                @if (showEditModal && editingIndex >= 0 && editingIndex < Items.Count && Items[editingIndex].Id > 0)
                {
                    var editingItem = Items[editingIndex];
                    <div class="modal-metadata border-top bg-light px-3 py-2">
                        <div class="text-muted small d-flex flex-wrap gap-3">
                            <span><strong>建立時間：</strong>@editingItem.CreatedAt.ToString("yyyy/MM/dd HH:mm:ss")</span>
                            <span><strong>創建者：</strong>@(editingItem.CreatedBy ?? "系統")</span>
                            @if (editingItem.UpdatedAt.HasValue)
                            {
                                <span><strong>最後更新時間：</strong>@editingItem.UpdatedAt.Value.ToString("yyyy/MM/dd HH:mm:ss")</span>
                                <span><strong>最後修改者：</strong>@(editingItem.UpdatedBy ?? "系統")</span>
                            }
                        </div>
                    </div>
                }

                <div class="modal-footer">
                    <GenericButtonComponent Variant="ButtonVariant.Secondary" Text="取消" OnClick="CloseModal" />
                    <GenericButtonComponent Variant="ButtonVariant.Primary" Text="@(showEditModal ? "更新" : "新增")" 
                                           OnClick="@(showEditModal ? () => UpdateItemAsync() : () => AddItemAsync())" 
                                           IsDisabled="@(!Options.Any())" />
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public List<TAddressEntity> Items { get; set; } = new();
    [Parameter] public List<ERPCore2.Data.BaseEntity> Options { get; set; } = new(); 
        
    // 地址類型選項
    [Parameter] public int ParentEntityId { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "地址資訊";
    [Parameter] public string Icon { get; set; } = "geo-alt";
    [Parameter] public string ItemDisplayName { get; set; } = "地址";
    [Parameter] public string TypeDisplayName { get; set; } = "地址類型";
    [Parameter] public string EmptyIcon { get; set; } = "bi-geo-alt";
    [Parameter] public string EmptyMessage { get; set; } = "尚無資料";
    
    // ===== 委派參數 - Getter =====
    [Parameter] public Func<TAddressEntity, int?> GetTypeId { get; set; } = item => null;
    [Parameter] public Func<TAddressEntity, string?> GetAddress { get; set; } = item => null;
    [Parameter] public Func<TAddressEntity, string?> GetRemarks { get; set; } = item => null;
    [Parameter] public Func<ERPCore2.Data.BaseEntity, int> GetOptionId { get; set; } = option => option.Id;
    [Parameter] public Func<ERPCore2.Data.BaseEntity, string> GetOptionDisplayText { get; set; } = option => 
    {
        // 檢查是否有 TypeName 屬性並取得其值
        var typeNameProperty = option.GetType().GetProperty("TypeName");
        if (typeNameProperty != null)
        {
            var typeName = typeNameProperty.GetValue(option) as string;
            return typeName ?? option.ToString() ?? "";
        }
        return option.ToString() ?? "";
    };
    
    // ===== 委派參數 - Setter =====
    [Parameter] public Action<TAddressEntity, int?> SetTypeId { get; set; } = (item, typeId) => { };
    [Parameter] public Action<TAddressEntity, string?> SetAddress { get; set; } = (item, value) => { };
    [Parameter] public Action<TAddressEntity, string?> SetRemarks { get; set; } = (item, value) => { };
    [Parameter] public Action<TAddressEntity, int> SetParentId { get; set; } = (item, parentId) => { };
    
    // ===== 事件參數 =====
    [Parameter] public EventCallback<List<TAddressEntity>> ItemsChanged { get; set; }
    [Parameter] public EventCallback<TAddressEntity> ItemAdded { get; set; }
    [Parameter] public EventCallback<TAddressEntity> ItemRemoved { get; set; }
    
    // ===== Modal 狀態 =====
    private bool showAddModal = false;
    private bool showEditModal = false;
    private int editingIndex = -1;
    private string currentAddressTypeId = string.Empty;
    private string currentAddress = string.Empty;
    private string currentRemarks = string.Empty;
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }
    
    // ===== 內部方法 =====

    private string GetAddressDisplayText(TAddressEntity item)
    {
        var address = GetAddress(item);
        
        if (!string.IsNullOrWhiteSpace(address))
        {
            return address.Length > 40 ? address.Substring(0, 40) + "..." : address;
        }
        
        return "未設定地址";
    }
    
    private void ShowAddModal()
    {
        if (IsReadOnly) return;
        
        ClearModalData();
        
        // 自動選擇地址類型
        if (Options.Any())
        {
            // 優先選擇"公司地址"或類似的營業地址類型
            var companyAddressType = Options.FirstOrDefault(o => 
                GetOptionDisplayText(o).Contains("公司") || 
                GetOptionDisplayText(o).Contains("營業") ||
                GetOptionDisplayText(o).Contains("辦公"));
            
            if (companyAddressType != null)
            {
                currentAddressTypeId = GetOptionId(companyAddressType).ToString();
            }
            else
            {
                // 如果沒有公司地址類型，選擇第一個
                var firstOption = Options.First();
                currentAddressTypeId = GetOptionId(firstOption).ToString();
            }
        }
        
        showAddModal = true;
    }
    
    private void ShowEditModal(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        editingIndex = index;
        var item = Items[index];
        
        var typeId = GetTypeId(item);
        currentAddressTypeId = typeId?.ToString() ?? string.Empty;
        currentAddress = GetAddress(item) ?? string.Empty;
        currentRemarks = GetRemarks(item) ?? string.Empty;
        
        showEditModal = true;
    }
    
    private void CloseModal()
    {
        showAddModal = false;
        showEditModal = false;
        editingIndex = -1;
        ClearModalData();
    }
    
    private void ClearModalData()
    {
        currentAddressTypeId = string.Empty;
        currentAddress = string.Empty;
        currentRemarks = string.Empty;
    }
    
    public async Task AddItemAsync()
    {
        if (IsReadOnly || !Options.Any()) return;
        
        // 檢查必要欄位
        if (string.IsNullOrWhiteSpace(currentAddress))
        {
            await NotificationService.ShowErrorAsync("詳細地址為必填欄位");
            return;
        }
        
        // 如果 currentAddressTypeId 為空，使用預設選中的類型
        if (string.IsNullOrEmpty(currentAddressTypeId) && Options.Any())
        {
            var firstOption = Options.First();
            currentAddressTypeId = GetOptionId(firstOption).ToString();
        }
        
        if (!int.TryParse(currentAddressTypeId, out var typeId))
        {
            await NotificationService.ShowErrorAsync($"{TypeDisplayName}選擇錯誤");
            return;
        }
        
        var newItem = new TAddressEntity();
        SetParentId(newItem, ParentEntityId);
        SetTypeId(newItem, typeId);
        SetAddress(newItem, currentAddress);
        SetRemarks(newItem, currentRemarks);
        
        Items.Add(newItem);
        
        await ItemAdded.InvokeAsync(newItem);
        await ItemsChanged.InvokeAsync(Items);
        
        CloseModal();
        StateHasChanged();
    }
    
    public async Task UpdateItemAsync()
    {
        if (IsReadOnly || editingIndex < 0 || editingIndex >= Items.Count) return;
        if (!Options.Any()) return;
        
        // 檢查必要欄位
        if (string.IsNullOrWhiteSpace(currentAddress))
        {
            await NotificationService.ShowErrorAsync("詳細地址為必填欄位");
            return;
        }
        
        // 如果 currentAddressTypeId 為空，使用預設選中的類型
        if (string.IsNullOrEmpty(currentAddressTypeId) && Options.Any())
        {
            var firstOption = Options.First();
            currentAddressTypeId = GetOptionId(firstOption).ToString();
        }
        
        if (!int.TryParse(currentAddressTypeId, out var typeId))
        {
            await NotificationService.ShowErrorAsync($"{TypeDisplayName}選擇錯誤");
            return;
        }
        
        var item = Items[editingIndex];
        
        SetTypeId(item, typeId);
        SetAddress(item, currentAddress);
        SetRemarks(item, currentRemarks);
        
        await ItemsChanged.InvokeAsync(Items);
        
        CloseModal();
        StateHasChanged();
    }
    
    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        var removedItem = Items[index];
        
        Items.RemoveAt(index);
        
        await ItemRemoved.InvokeAsync(removedItem);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public Task<bool> ValidateAsync()
    {
        // 地址通常不強制驗證，可以根據需要自訂
        return Task.FromResult(true);
    }
}
