@* 地址管理組件 - 管理實體的多個地址資訊 - 使用 InteractiveTableComponent 統一UI *@

@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@using ERPCore2.Helpers
@typeparam TAddressEntity where TAddressEntity : ERPCore2.Data.BaseEntity, new()
@typeparam TParentEntity where TParentEntity : ERPCore2.Data.BaseEntity

<div class="card border-0 shadow-sm">
    <div class="card-body p-0">
        <InteractiveTableComponent TItem="TAddressEntity" 
                                  Items="@Items"
                                  ColumnDefinitions="@GetColumnDefinitions()"
                                  IsReadOnly="@IsReadOnly"
                                  ShowRowNumbers="false"
                                  EmptyMessage="@EmptyMessage"
                                  ShowBuiltInActions="true"
                                  ShowBuiltInDeleteButton="true"
                                  OnItemDelete="@HandleItemDelete"
                                  CustomActionsTemplate="@GetCustomActions" />
    </div>
</div>
@code {
    // ===== 私有欄位 =====
    private readonly HashSet<int> _deletedDetailIds = new HashSet<int>();

    // ===== 基本參數 =====
    [Parameter] public List<TAddressEntity> Items { get; set; } = new();
    [Parameter] public List<ERPCore2.Data.BaseEntity> Options { get; set; } = new(); // 地址類型選項
    [Parameter] public int ParentEntityId { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "地址資訊";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "geo-alt";
    [Parameter] public string ItemDisplayName { get; set; } = "地址";
    [Parameter] public string TypeDisplayName { get; set; } = "地址類型";
    [Parameter] public string EmptyIcon { get; set; } = "geo-alt-x";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增地址";
    
    // ===== 委派參數 - Getter =====
    [Parameter] public Func<TAddressEntity, int?> GetTypeId { get; set; } = item => null;
    [Parameter] public Func<TAddressEntity, string?> GetAddress { get; set; } = item => null;
    [Parameter] public Func<TAddressEntity, string?> GetRemarks { get; set; } = item => null;
    [Parameter] public Func<ERPCore2.Data.BaseEntity, int> GetOptionId { get; set; } = option => option.Id;
    [Parameter] public Func<ERPCore2.Data.BaseEntity, string> GetOptionDisplayText { get; set; } = option => 
    {
        // 檢查是否有 TypeName 屬性並取得其值
        var typeNameProperty = option.GetType().GetProperty("TypeName");
        if (typeNameProperty != null)
        {
            var typeName = typeNameProperty.GetValue(option) as string;
            return typeName ?? option.ToString() ?? "";
        }
        return option.ToString() ?? "";
    };
    
    // ===== 委派參數 - Setter =====
    [Parameter] public Action<TAddressEntity, int?> SetTypeId { get; set; } = (item, typeId) => { };
    [Parameter] public Action<TAddressEntity, string?> SetAddress { get; set; } = (item, value) => { };
    [Parameter] public Action<TAddressEntity, string?> SetRemarks { get; set; } = (item, value) => { };
    [Parameter] public Action<TAddressEntity, int> SetParentId { get; set; } = (item, parentId) => { };
    
    // ===== 事件參數 =====
    [Parameter] public EventCallback<List<TAddressEntity>> ItemsChanged { get; set; }
    [Parameter] public EventCallback<TAddressEntity> ItemAdded { get; set; }
    [Parameter] public EventCallback<TAddressEntity> ItemRemoved { get; set; }
    [Parameter] public EventCallback<List<int>> OnDeletedDetailsChanged { get; set; }
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        // 總是確保有一行空行可以輸入
        EnsureOneEmptyRow();
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    
    /// <summary>
    /// 檢查是否為空行
    /// 業務邏輯：只要選擇了地址類型，就算是有效的一行，不再是空行
    /// </summary>
    private bool IsEmptyRow(TAddressEntity item)
    {
        var typeId = GetTypeId(item);
        // 檢查地址類型ID是否為空（null 或 0 都算空）
        var isEmpty = !typeId.HasValue || typeId.Value <= 0;
        
        // 只要地址類型有值（大於0），就不是空行
        // 地址類型是核心欄位，其他欄位可以後續填寫
        return isEmpty;
    }
    
    /// <summary>
    /// 創建空的地址項目
    /// </summary>
    private TAddressEntity CreateEmptyItem()
    {
        var newItem = new TAddressEntity();
        SetParentId(newItem, ParentEntityId);
        return newItem;
    }
    
    /// <summary>
    /// 確保有一行空行
    /// </summary>
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.For<TAddressEntity>.EnsureOneEmptyRow(
            Items, 
            IsEmptyRow, 
            CreateEmptyItem, 
            SetParentId, 
            ParentEntityId
        );
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        return new List<InteractiveColumnDefinition>
        {
            // 地址類型選擇欄位
            new() 
            { 
                Title = TypeDisplayName, 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "25%",
                CustomTemplate = item => 
                {
                    var address = (TAddressEntity)item;
                    var typeId = GetTypeId(address);
                    var selectedValue = typeId?.ToString() ?? "";
                    
                    return @<select class="form-select form-select-sm" 
                                    value="@selectedValue"
                                    disabled="@IsReadOnly"
                                    @onchange="@(async (e) => await OnTypeChanged((address, e.Value)))">
                        <option value="">請選擇地址類型</option>
                        @foreach (var option in Options)
                        {
                            <option value="@GetOptionId(option)">@GetOptionDisplayText(option)</option>
                        }
                    </select>;
                }
            },
            
            // 詳細地址 - 文字輸入
            new() 
            { 
                Title = "詳細地址", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "50%",
                CustomTemplate = item => 
                {
                    var address = (TAddressEntity)item;
                    var value = GetAddress(address) ?? "";
                    
                    return @<input type="text" 
                                   class="form-control form-control-sm" 
                                   value="@value"
                                   placeholder="請輸入詳細地址"
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnAddressChanged((address, e.Value?.ToString())))" />;
                }
            },
            
            // 備註 - 文字輸入
            new() 
            { 
                Title = "備註", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "25%",
                CustomTemplate = item => 
                {
                    var address = (TAddressEntity)item;
                    var value = GetRemarks(address) ?? "";
                    
                    return @<input type="text" 
                                   class="form-control form-control-sm" 
                                   value="@value"
                                   placeholder="備註"
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnRemarksChanged((address, e.Value?.ToString())))" />;
                }
            }
        };
    }

    private async Task HandleItemDelete(TAddressEntity item)
    {
        var index = Items.IndexOf(item);
        await RemoveItemAsync(index);
    }

    // ===== 自定義操作按鈕 - Google 地圖查看 =====
    private RenderFragment<TAddressEntity> GetCustomActions => item => __builder =>
    {
        var address = GetAddress(item);
        var hasAddress = !string.IsNullOrWhiteSpace(address);
        
        <GenericButtonComponent Variant="ButtonVariant.Primary"
                               IconClass="bi bi-geo-alt text-white"
                               Size="ButtonSize.Large"
                               IsDisabled="@(!hasAddress)"
                               Title="在 Google 地圖中查看"
                               OnClick="() => OpenGoogleMaps(item)"
                               StopPropagation="true"
                               CssClass="btn-square" />
    };
    
    // ===== 內部方法 =====

    private string GetAddressDisplayText(TAddressEntity item)
    {
        var address = GetAddress(item);
        
        if (!string.IsNullOrWhiteSpace(address))
        {
            return address.Length > 40 ? address.Substring(0, 40) + "..." : address;
        }
        
        return "未設定地址";
    }

    // ===== InteractiveTableComponent 事件處理 =====
    private async Task OnTypeChanged((object item, object? value) args)
    {
        var address = (TAddressEntity)args.item;
        var wasEmpty = IsEmptyRow(address);
    
        if (args.value != null && !string.IsNullOrEmpty(args.value.ToString()) && int.TryParse(args.value.ToString(), out var typeId) && typeId > 0)
        {
            // 檢查是否已存在相同地址類型
            var existingTypeIds = Items.Where(i => i != address).Select(item => GetTypeId(item)).Where(id => id.HasValue && id.Value > 0);
            if (existingTypeIds.Any(id => id!.Value == typeId))
            {
                await NotificationService.ShowErrorAsync("此地址類型已存在，請選擇其他類型");
                SetTypeId(address, null);
            }
            else
            {
                SetTypeId(address, typeId);                
                
                // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
                var added = AutoEmptyRowHelper.For<TAddressEntity>.HandleInputChangeAdvanced(
                    Items, address, IsEmptyRow, CreateEmptyItem, wasEmpty, SetParentId, ParentEntityId);
                
                await ItemsChanged.InvokeAsync(Items);
            }
        }
        else
        {
            SetTypeId(address, null);
            await ItemsChanged.InvokeAsync(Items);
        }
        StateHasChanged();
    }

    private async Task OnAddressChanged((object item, string? value) args)
    {
        var address = (TAddressEntity)args.item;
        var wasEmpty = IsEmptyRow(address);
        
        SetAddress(address, args.value);
        
        // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
        AutoEmptyRowHelper.For<TAddressEntity>.HandleInputChangeAdvanced(
            Items, address, IsEmptyRow, CreateEmptyItem, wasEmpty, SetParentId, ParentEntityId);
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    private async Task OnRemarksChanged((object item, string? value) args)
    {
        var address = (TAddressEntity)args.item;
        var wasEmpty = IsEmptyRow(address);
        
        SetRemarks(address, args.value);
        
        // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
        AutoEmptyRowHelper.For<TAddressEntity>.HandleInputChangeAdvanced(
            Items, address, IsEmptyRow, CreateEmptyItem, wasEmpty, SetParentId, ParentEntityId);
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        var removedItem = Items[index];
        if (removedItem == null) return;
        
        // 記錄要刪除的資料庫實體ID
        if (removedItem.Id > 0)
        {
            _deletedDetailIds.Add(removedItem.Id);
        }
        
        // 使用 Helper 處理移除，自動確保空行
        AutoEmptyRowHelper.For<TAddressEntity>.HandleItemRemove(
            Items, removedItem, IsEmptyRow, CreateEmptyItem, SetParentId, ParentEntityId);
        
        await ItemRemoved.InvokeAsync(removedItem);
        await ItemsChanged.InvokeAsync(Items);
        
        // 通知已刪除的明細ID
        await NotifyDeletedDetailsChanged();
        
        StateHasChanged();
    }
    
    private async Task OpenGoogleMaps(TAddressEntity item)
    {
        var address = GetAddress(item);
        
        if (string.IsNullOrWhiteSpace(address))
        {
            await NotificationService.ShowWarningAsync("地址資訊為空，無法查詢");
            return;
        }
        
        try
        {
            // 構建 Google Maps 查詢 URL
            var encodedAddress = Uri.EscapeDataString(address);
            var googleMapsUrl = $"https://www.google.com/maps/search/?api=1&query={encodedAddress}";
            
            // 使用 JavaScript 開啟新視窗
            await JSRuntime.InvokeVoidAsync("open", googleMapsUrl, "_blank");
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"開啟 Google 地圖時發生錯誤：{ex.Message}");
        }
    }
    
    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        // 使用 Helper 檢查是否有足夠的非空項目
        if (!AutoEmptyRowHelper.For<TAddressEntity>.HasSufficientItems(Items, IsEmptyRow, 1))
        {
            errors.Add("至少需要一個地址");
        }
        else
        {
            // 取得非空的項目進行重複檢查
            var nonEmptyItems = AutoEmptyRowHelper.For<TAddressEntity>.GetNonEmptyItems(Items, IsEmptyRow);
            var typeIds = nonEmptyItems.Select(item => GetTypeId(item)).Where(id => id.HasValue).ToList();
            if (typeIds.Count != typeIds.Distinct().Count())
            {
                errors.Add("存在重複的地址類型");
            }
        }
          
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }
    
    /// <summary>
    /// 通知已刪除的明細ID
    /// </summary>
    private async Task NotifyDeletedDetailsChanged()
    {
        if (OnDeletedDetailsChanged.HasDelegate && _deletedDetailIds.Any())
        {
            await OnDeletedDetailsChanged.InvokeAsync(_deletedDetailIds.ToList());
            _deletedDetailIds.Clear(); // 清空已通知的刪除ID
        }
    }
}
