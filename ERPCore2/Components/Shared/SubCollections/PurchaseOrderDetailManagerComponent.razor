@* 採購單商品管理組件 - 使用 InteractiveTableComponent 統一UI 並整合自動空行功能 *@

@inject IProductService ProductService
@inject IPurchaseOrderDetailService PurchaseOrderDetailService
@inject INotificationService NotificationService
@inject RelatedDocumentsHelper RelatedDocumentsHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

@typeparam TMainEntity where TMainEntity : BaseEntity
@typeparam TDetailEntity where TDetailEntity : BaseEntity, new()

@if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
{
    <div class="card border-0 shadow-sm">
        <div class="card-body text-center py-5">
            <div class="supplier-warning">
                <p class="text-muted">選擇廠商後即可查看該廠商的未完成進貨商品</p>
            </div>
        </div>
    </div>
}
else
{
    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <InteractiveTableComponent TItem="ProductItem" 
                                      Items="@ProductItems"
                                      ColumnDefinitions="@GetColumnDefinitions()"
                                      IsReadOnly="@IsReadOnly"
                                      ShowRowNumbers="false"
                                      EmptyMessage="@EmptyMessage"
                                      ShowBuiltInActions="true"
                                      ShowBuiltInDeleteButton="false"
                                      ActionsColumnWidth = "60px"
                                      CustomActionsTemplate="@GetCustomActionsTemplate"
                                      OnItemDelete="@HandleItemDelete"/>
        </div>

        
        <div class="card-footer">
            <div class="d-flex justify-content-between">
                <div>
                    <GenericButtonComponent Text="智能下單"
                                          Variant="ButtonVariant.Primary"
                                          Icon="fas fa-magic"
                                          OnClick="SmartPurchaseOrder"
                                          IsDisabled="@(!CanUseSmartPurchase)" />
                </div>
                <div class="d-flex gap-2">
                    <GenericButtonComponent Text="清除明細"
                                          Variant="ButtonVariant.Danger"
                                          OnClick="ClearAllDetails" />
                </div>
            </div>
        </div>
    </div>
}

<!-- 相關單據查看 Modal -->
<RelatedDocumentsModalComponent IsVisible="@showRelatedDocumentsModal"
                               IsVisibleChanged="@((bool visible) => showRelatedDocumentsModal = visible)"
                               ProductName="@selectedProductName"
                               RelatedDocuments="@relatedDocuments"
                               IsLoading="@isLoadingRelatedDocuments"
                               OnDocumentClick="@HandleRelatedDocumentClick" />

@code {
    // ===== 基本參數 =====
    [Parameter] public List<Product> Products { get; set; } = new List<Product>();
    [Parameter] public EventCallback<List<ProductItem>> OnProductItemsChanged { get; set; }
    
    // ===== 新增供應商過濾參數 =====
    [Parameter] public int? SelectedSupplierId { get; set; }
    
    // ===== 泛型參數 =====
    [Parameter] public TMainEntity? MainEntity { get; set; }
    [Parameter] public List<TDetailEntity> ExistingDetails { get; set; } = new List<TDetailEntity>();
    [Parameter] public EventCallback<List<TDetailEntity>> OnDetailsChanged { get; set; }
    
    // ===== 欄位映射參數 =====
    [Parameter] public string MainEntityIdPropertyName { get; set; } = string.Empty;
    [Parameter] public string QuantityPropertyName { get; set; } = "Quantity";
    [Parameter] public string ReceivedQuantityPropertyName { get; set; } = "ReceivedQuantity";
    [Parameter] public string UnitPricePropertyName { get; set; } = "UnitPrice";
    [Parameter] public string RemarksPropertyName { get; set; } = "Remarks";
    [Parameter] public string? UnitIdPropertyName { get; set; }
    [Parameter] public string? IsReceivingCompletedPropertyName { get; set; }    
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "商品資訊";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "box";
    [Parameter] public string ItemDisplayName { get; set; } = "商品";
    [Parameter] public string EmptyIcon { get; set; } = "box-open";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增商品";
    
    // ===== 唯讀模式參數 =====
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 核准狀態參數 =====
    [Parameter] public bool IsApproved { get; set; } = false;
    
    // ===== 不可刪除明細狀態變更事件 =====
    [Parameter] public EventCallback<bool> OnHasUndeletableDetailsChanged { get; set; }
    
    // ===== 相關單據開啟事件 =====
    [Parameter] public EventCallback<(RelatedDocumentType type, int id)> OnOpenRelatedDocument { get; set; }

    private List<ProductItem> ProductItems { get; set; } = new List<ProductItem>();
    private List<Product> AvailableProducts { get; set; } = new List<Product>();
    private int? _previousSelectedSupplierId = null;
    private bool _isInitialized = false; // 新增初始化標記
    
    // ===== 相關單據查看 =====
    private bool showRelatedDocumentsModal = false;
    private string selectedProductName = string.Empty;
    private List<RelatedDocument>? relatedDocuments = null;
    private bool isLoadingRelatedDocuments = false;

    protected override async Task OnInitializedAsync()
    {
        // 初始化時記錄當前供應商ID，避免 OnParametersSetAsync 誤判為變更
        _previousSelectedSupplierId = SelectedSupplierId;
        
        await LoadAvailableProductsAsync();
        await LoadExistingDetailsAsync();
        
        _isInitialized = true; // 標記為已初始化
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        
        // 如果還沒初始化完成，不處理參數變更（避免重複載入）
        if (!_isInitialized)
        {
            return;
        }
        
        // 檢查供應商是否變更
        if (_previousSelectedSupplierId != SelectedSupplierId)
        {
            _previousSelectedSupplierId = SelectedSupplierId;
            await LoadAvailableProductsAsync();
            
            // 如果更換供應商，需要清空現有選項並重新載入
            ProductItems.Clear();
            await LoadExistingDetailsAsync();
            return; // 供應商變更時已經處理完畢，直接返回
        }
        
        // 參考 ProductSupplierManagerComponent - 簡化邏輯，只在初始化時載入
        // 總是確保有一行空行可以輸入，不論是否已有資料
        EnsureOneEmptyRow();
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    
    /// <summary>
    /// 檢查是否為空行
    /// 業務邏輯：只要選擇了商品，就算是有效的一行，不再是空行
    /// </summary>
    private bool IsEmptyRow(ProductItem item)
    {
        // 檢查商品是否為空
        var isEmpty = item.SelectedProduct == null;
        
        // 只要商品有值，就不是空行
        // 商品是核心欄位，其他欄位可以後續填寫
        return isEmpty;
    }
    
    /// <summary>
    /// 創建空的商品項目
    /// </summary>
    private ProductItem CreateEmptyItem()
    {
        return new ProductItem();
    }
    
    /// <summary>
    /// 確保有一行空行
    /// </summary>
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.ForAny<ProductItem>.EnsureOneEmptyRow(
            ProductItems, 
            IsEmptyRow, 
            CreateEmptyItem
        );
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>();

        // 商品選擇欄位
        columns.Add(new() 
        { 
            Title = "商品", 
            PropertyName = "",
            ColumnType = InteractiveColumnType.Custom,
            Width = "150px",
            Tooltip = "選擇要採購的商品。已有進貨記錄的商品將無法變更",
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                var selectedValue = productItem.SelectedProduct?.Id.ToString() ?? "";
                var hasReceiving = productItem.ReceivedQuantity > 0;
                var isFieldReadOnly = IsReadOnly || hasReceiving;
                
                // 如果是唯讀狀態，直接顯示商品名稱
                if (isFieldReadOnly && productItem.SelectedProduct != null)
                {
                    var displayText = $"[{productItem.SelectedProduct.Code}] {productItem.SelectedProduct.Name}";
                    var title = hasReceiving ? "此商品已有進貨記錄，無法修改商品選擇" : "";
                    return @<div class="d-flex align-items-center" style="min-height: 31px;">
                        <span class="text-muted" title="@title">@displayText</span>
                    </div>;
                }
                
                return @<select class="form-select form-select-sm" 
                                value="@selectedValue"
                                disabled="@isFieldReadOnly"
                                @onchange="@(async (e) => await OnProductChanged(productItem, e.Value))">
                    <option value="">請選擇商品</option>
                    @foreach (var product in GetAvailableProducts())
                    {
                        <option value="@product.Id">[@product.Code] @product.Name</option>
                    }
                </select>;
            }
        });
        
        // 數量欄位
        columns.Add(new() 
        { 
            Title = "數量", 
            PropertyName = "Quantity",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            Tooltip = "採購的商品數量。已有進貨記錄的商品將無法修改數量",
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                var isEmptyRow = IsEmptyRow(productItem);
                var value = productItem.Quantity > 0 ? productItem.Quantity.ToString() : "";
                var hasReceiving = productItem.ReceivedQuantity > 0;
                var isFieldReadOnly = IsReadOnly || hasReceiving;
                
                // 如果是唯讀狀態，直接顯示 span
                if (isFieldReadOnly)
                {
                    var displayText = productItem.Quantity > 0 ? productItem.Quantity.ToString("N0") : "";
                    var title = hasReceiving ? "此商品已有進貨記錄，無法修改數量" : "";
                    return @<div class="d-flex align-items-center justify-content-end" style="min-height: 31px;">
                        <span class="text-muted" title="@title">@displayText</span>
                    </div>;
                }
                
                return @<input type="number" class="form-control form-control-sm" 
                               value="@value"
                               @oninput="(e) => OnQuantityInput(productItem, e.Value?.ToString())"
                               onkeydown="if(['e','E','+','-'].includes(event.key)) event.preventDefault();"
                               placeholder="" 
                               min="0" 
                               step="1" />;
            }
        });

        // 入庫量欄位 (只讀)
        columns.Add(new() 
        { 
            Title = "入庫量", 
            PropertyName = "ReceivedQuantity",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            Tooltip = "已入庫的累計數量（唯讀）",
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                
                return @<div class="d-flex align-items-center justify-content-end">
                    <span class="fw-bold">@productItem.ReceivedQuantity.ToString("F0")</span>
                </div>;
            }
        });

        // 單價欄位
        columns.Add(new() 
        { 
            Title = "單價", 
            PropertyName = "Price",
            ColumnType = InteractiveColumnType.Custom,
            Width = "120px",
            Tooltip = "商品的採購單價。已有進貨記錄的商品將無法修改單價",
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                var isEmptyRow = IsEmptyRow(productItem);
                var value = productItem.Price > 0 ? productItem.Price.ToString("F0") : "";
                var hasReceiving = productItem.ReceivedQuantity > 0;
                var isFieldReadOnly = IsReadOnly || hasReceiving;
                
                // 如果是唯讀狀態，直接顯示 span
                if (isFieldReadOnly)
                {
                    var displayText = productItem.Price > 0 ? productItem.Price.ToString("F0") : "";
                    var title = hasReceiving ? "此商品已有進貨記錄，無法修改單價" : "";
                    return @<div class="d-flex align-items-center justify-content-end" style="min-height: 31px;">
                        <span class="text-muted" title="@title">@displayText</span>
                    </div>;
                }
                
                return @<input type="number" class="form-control form-control-sm" 
                               value="@value"
                               @oninput="(e) => OnPriceInput(productItem, e.Value?.ToString())"
                               onkeydown="if(['e','E','+','-'].includes(event.key)) event.preventDefault();"
                               placeholder=""
                               step="1"
                               min="0" />;
            }
        });

        // 只有在已核准的狀態下才顯示「完成進貨」欄位
        if (IsApproved)
        {
            columns.Add(new() 
            { 
                Title = "完成進貨", 
                PropertyName = "IsReceivingCompleted",
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                Tooltip = "手動標記此商品已完成所有進貨作業（即使數量未完全入庫）\n核准後仍可修改此狀態",
                CustomTemplate = item => 
                {
                    var productItem = (ProductItem)item;
                    
                    // 「完成進貨」是執行狀態，不受核准鎖定影響
                    var isFieldReadOnly = IsReadOnly;
                    
                    // 檢查是否已經完全進貨（入庫 >= 採購）
                    var isFullyReceived = productItem.ReceivedQuantity >= productItem.Quantity;
                    
                    // 如果已完全進貨，只能勾選完成，不能取消
                    var canToggle = !isFullyReceived || !productItem.IsReceivingCompleted;                    
                    
                    return @<div class="text-center">
                        <div class="form-check form-switch d-flex justify-content-center">
                            <input class="form-check-input" 
                                   type="checkbox" 
                                   checked="@productItem.IsReceivingCompleted"
                                   disabled="@(!canToggle)"
                                   @onclick="() => OnIsReceivingCompletedChanged(productItem)"
                                   title="@(canToggle ? "標記為完成進貨" : "已完全進貨，無法取消")" />
                        </div>
                    </div>;
                }
            });
        }
        

        // 備註欄位 - 核准後仍可編輯（用於記錄執行狀況）
        columns.Add(new() 
        { 
            Title = "備註", 
            PropertyName = "Remarks",
            ColumnType = InteractiveColumnType.Custom,
            Width = "150px",
            HideOnMobile = true,
            Tooltip = "選填。可記錄採購相關的備註資訊（核准後仍可編輯）",
            CustomTemplate = item => 
            {
                var productItem = (ProductItem)item;
                var isEmptyRow = IsEmptyRow(productItem);
                // 🔑 備註欄位只受 IsReadOnly 影響，核准後仍可編輯
                var isFieldReadOnly = IsReadOnly;
                
                // 如果是唯讀狀態，直接顯示 span
                if (isFieldReadOnly)
                {
                    var displayText = string.IsNullOrEmpty(productItem.Remarks) ? "無備註" : productItem.Remarks;
                    return @<div class="d-flex align-items-center" style="min-height: 31px;">
                        <span class="text-muted">@displayText</span>
                    </div>;
                }
                
                return @<input type="text" class="form-control form-control-sm" 
                               value="@productItem.Remarks"
                               @oninput="(e) => OnRemarksInput(productItem, e.Value?.ToString())"
                               placeholder="選填..." />;
            }
        });

        return columns;
    }

    private RenderFragment<ProductItem> GetCustomActionsTemplate => item => __builder =>
    {
        // 檢查是否已被入庫單使用
        var hasUsage = item.HasUsageRecordCache ?? false;
        
        if (!hasUsage)
        {
            // 可以刪除：顯示刪除按鈕
            <GenericButtonComponent Variant="ButtonVariant.Danger"
                                   IconClass="bi bi-trash text-white"
                                   Size="ButtonSize.Large"
                                   IsDisabled="@IsReadOnly"
                                   Title="刪除"
                                   OnClick="async () => await HandleItemDelete(item)"
                                   StopPropagation="true"
                                   CssClass="btn-square" />
        }
        else
        {
            // 已被使用：顯示查看按鈕
            <GenericButtonComponent Variant="ButtonVariant.Info"
                                   IconClass="bi bi-eye text-white"
                                   Size="ButtonSize.Large"
                                   Title="查看相關單據"
                                   OnClick="async () => await ShowRelatedDocuments(item)"
                                   StopPropagation="true"
                                   CssClass="btn-square" />
        }
    };

    private async Task HandleItemDelete(ProductItem item)
    {
        var index = ProductItems.IndexOf(item);
        await RemoveItemAsync(index);
    }

    // ===== 內部方法 =====

    /// <summary>
    /// 根據選擇的供應商載入可用商品
    /// </summary>
    private async Task LoadAvailableProductsAsync()
    {
        try
        {
            if (SelectedSupplierId.HasValue && SelectedSupplierId.Value > 0)
            {
                AvailableProducts = await ProductService.GetBySupplierAsync(SelectedSupplierId.Value);
            }
            else
            {
                AvailableProducts = new List<Product>();
            }
        }
        catch (Exception)
        {
            AvailableProducts = new List<Product>();
        }
    }
    
    /// <summary>
    /// 公開方法：重新載入可用商品（供父組件呼叫）
    /// 當廠商資料被編輯後，父組件可以呼叫此方法來重新載入該廠商的商品
    /// </summary>
    public async Task RefreshAvailableProductsAsync()
    {
        await LoadAvailableProductsAsync();
        StateHasChanged();
    }

    /// <summary>
    /// 從現有明細資料載入到 ProductItems
    /// </summary>
    private async Task LoadExistingDetailsAsync()
    {
        if (ExistingDetails?.Any() != true) 
        {
            EnsureOneEmptyRow();
            return;
        }

        ProductItems.Clear();
        
        foreach (var detail in ExistingDetails)
        {
            var productId = GetPropertyValue<int>(detail, "ProductId");
            var product = Products.FirstOrDefault(p => p.Id == productId) ?? 
                         AvailableProducts.FirstOrDefault(p => p.Id == productId);
            
            if (product != null)
            {
                var item = new ProductItem
                {
                    SelectedProduct = product,
                    Quantity = Convert.ToInt32(GetPropertyValue<object>(detail, QuantityPropertyName) ?? 0),
                    ReceivedQuantity = Convert.ToInt32(GetPropertyValue<object>(detail, ReceivedQuantityPropertyName) ?? 0),
                    Price = Convert.ToDecimal(GetPropertyValue<object>(detail, UnitPricePropertyName) ?? 0m),
                    Remarks = GetPropertyValue<string>(detail, RemarksPropertyName) ?? string.Empty,
                    IsReceivingCompleted = !string.IsNullOrEmpty(IsReceivingCompletedPropertyName) ? 
                        Convert.ToBoolean(GetPropertyValue<object>(detail, IsReceivingCompletedPropertyName) ?? false) : false,
                    CompletedByEmployeeId = GetPropertyValue<int?>(detail, "CompletedByEmployeeId"),
                    CompletedAt = GetPropertyValue<DateTime?>(detail, "CompletedAt"),
                    ExistingDetailEntity = detail
                };
                
                // 檢查是否已被入庫單使用
                item.HasUsageRecordCache = await HasUsageRecord(item);
                
                ProductItems.Add(item);
            }
        }
        
        EnsureOneEmptyRow();
    }

    /// <summary>
    /// 轉換 ProductItems 為明細實體列表
    /// </summary>
    private List<TDetailEntity> ConvertToDetailEntities()
    {
        var details = new List<TDetailEntity>();
        
        foreach (var item in ProductItems.Where(x => !IsEmptyRow(x) && x.SelectedProduct != null))
        {
            TDetailEntity detail;
            
            if (item.ExistingDetailEntity != null)
            {
                detail = item.ExistingDetailEntity;
            }
            else
            {
                detail = new TDetailEntity();
                
                if (MainEntity != null && !string.IsNullOrEmpty(MainEntityIdPropertyName))
                {
                    SetPropertyValue(detail, MainEntityIdPropertyName, MainEntity.Id);
                }
                
                if (item.SelectedProduct != null)
                {
                    SetPropertyValue(detail, "ProductId", item.SelectedProduct.Id);
                }
            }
            
            SetPropertyValue(detail, QuantityPropertyName, item.Quantity);
            SetPropertyValue(detail, ReceivedQuantityPropertyName, item.ReceivedQuantity);
            SetPropertyValue(detail, UnitPricePropertyName, item.Price);
            SetPropertyValue(detail, RemarksPropertyName, item.Remarks);
            
            if (!string.IsNullOrEmpty(IsReceivingCompletedPropertyName))
            {
                SetPropertyValue(detail, IsReceivingCompletedPropertyName, item.IsReceivingCompleted);
            }
            
            // 儲存完成進貨的追蹤資料
            SetPropertyValue(detail, "CompletedByEmployeeId", item.CompletedByEmployeeId);
            SetPropertyValue(detail, "CompletedAt", item.CompletedAt);
            
            details.Add(detail);
        }
        
        return details;
    }

    /// <summary>
    /// 直接通知詳細資料變更 - 參考 ProductSupplierManagerComponent 的簡潔寫法
    /// </summary>
    private async Task NotifyDetailsChanged()
    {
        var details = ConvertToDetailEntities();
        await OnDetailsChanged.InvokeAsync(details);
        
        // 檢查是否有不可刪除的明細(已有進貨記錄)
        bool hasUndeletableDetails = ProductItems.Any(p => p.ReceivedQuantity > 0);
        await OnHasUndeletableDetailsChanged.InvokeAsync(hasUndeletableDetails);
    }

    /// <summary>
    /// 使用反射取得屬性值
    /// </summary>
    private T? GetPropertyValue<T>(object obj, string propertyName)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property == null) return default(T);
        
        var value = property.GetValue(obj);
        if (value == null) return default(T);
        
        if (typeof(T) == typeof(object)) return (T)value;
        
        return (T)Convert.ChangeType(value, typeof(T));
    }

    /// <summary>
    /// 使用反射設定屬性值
    /// </summary>
    private void SetPropertyValue(object obj, string propertyName, object? value)
    {
        var property = obj.GetType().GetProperty(propertyName);
        if (property != null && property.CanWrite)
        {
            if (value != null && property.PropertyType != value.GetType())
            {
                if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    var underlyingType = Nullable.GetUnderlyingType(property.PropertyType);
                    value = Convert.ChangeType(value, underlyingType!);
                }
                else
                {
                    value = Convert.ChangeType(value, property.PropertyType);
                }
            }
            property.SetValue(obj, value);
        }
    }

    // ===== 商品選擇事件處理 =====

    private async Task OnProductChanged(ProductItem item, object? value)
    {
        var wasEmpty = IsEmptyRow(item);
        
        var productIdStr = value?.ToString();
        if (string.IsNullOrEmpty(productIdStr))
        {
            item.SelectedProduct = null;
        }
        else if (int.TryParse(productIdStr, out var productId))
        {
            var product = GetAvailableProducts().FirstOrDefault(p => p.Id == productId);
            item.SelectedProduct = product;
        }
        
        // 處理自動空行邏輯
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnQuantityInput(ProductItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(value))
        {
            item.Quantity = 0;
        }
        else if (int.TryParse(value, out var quantity))
        {
            item.Quantity = quantity;
        }
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnPriceInput(ProductItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        
        if (string.IsNullOrEmpty(value))
        {
            item.Price = 0;
        }
        else if (decimal.TryParse(value, out var price))
        {
            item.Price = price;
        }
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnRemarksInput(ProductItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        item.Remarks = value ?? string.Empty;
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    private async Task OnIsReceivingCompletedChanged(ProductItem item)
    {
        var wasEmpty = IsEmptyRow(item);
        
        // 檢查是否已經完全進貨
        var isFullyReceived = item.ReceivedQuantity >= item.Quantity;
        
        // 如果已完全進貨且已標記完成，不允許取消
        if (isFullyReceived && item.IsReceivingCompleted)
        {
            await NotificationService.ShowWarningAsync("此商品已全數入庫，無法取消完成狀態");
            return;
        }
        
        // 切換狀態
        var newValue = !item.IsReceivingCompleted;
        item.IsReceivingCompleted = newValue;
        
        // 記錄操作者和時間（只在標記為完成時記錄）
        if (newValue)
        {
            var currentUserId = await GetCurrentUserIdAsync();
            if (currentUserId.HasValue)
            {
                item.CompletedByEmployeeId = currentUserId.Value;
                item.CompletedAt = DateTime.Now;
            }
        }
        else
        {
            // 取消完成時清除記錄
            item.CompletedByEmployeeId = null;
            item.CompletedAt = null;
        }
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleInputChange(
            ProductItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(item));
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= ProductItems.Count) return;
        
        var removedItem = ProductItems[index];
        
        AutoEmptyRowHelper.ForAny<ProductItem>.HandleItemRemove(
            ProductItems, removedItem, IsEmptyRow, CreateEmptyItem);
        
        await NotifyDetailsChanged();
        StateHasChanged();
    }

    /// <summary>
    /// 取得可用商品列表（根據供應商過濾）
    /// </summary>
    private List<Product> GetAvailableProducts()
    {
        if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
        {
            return new List<Product>();
        }
        
        return AvailableProducts;
    }

    private decimal GetTotalAmount()
    {
        return ProductItems
            .Where(item => !IsEmptyRow(item) && item.SelectedProduct != null && item.Quantity > 0)
            .Sum(item => item.Quantity * item.Price);
    }

    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        if (!AutoEmptyRowHelper.ForAny<ProductItem>.HasSufficientItems(ProductItems, IsEmptyRow, 1))
        {
            errors.Add("至少需要一個商品");
        }
          
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }

    // ===== 智能下單功能 =====
    
    /// <summary>
    /// 計算屬性：是否可以使用智能下單
    /// </summary>
    private bool CanUseSmartPurchase => 
        SelectedSupplierId.HasValue && 
        SelectedSupplierId.Value > 0;
    


    /// <summary>
    /// 智能下單主要方法
    /// </summary>
    private async Task SmartPurchaseOrder()
    {
        if (!SelectedSupplierId.HasValue || SelectedSupplierId.Value <= 0)
        {
            await NotificationService.ShowWarningAsync("請先選擇廠商後再使用智能下單");
            return;
        }

        try
        {
            // 獲取該廠商最近一次的採購記錄
            var lastPurchaseDetails = await PurchaseOrderDetailService.GetLastCompletePurchaseAsync(SelectedSupplierId.Value);
            
            if (!lastPurchaseDetails.Any())
            {
                await NotificationService.ShowInfoAsync("該廠商沒有歷史採購記錄，無法使用智能下單");
                return;
            }

            // 檢查是否有現有資料
            var hasExistingData = ProductItems.Any(item => !IsEmptyRow(item));
            
            if (hasExistingData)
            {
                // 使用確認對話框
                var confirmed = await ShowConfirmationAsync(
                    "智能下單確認", 
                    $"此操作將清空現有的商品明細並載入 {lastPurchaseDetails.Count} 項上次採購的商品。\n\n是否繼續？"
                );
                
                if (!confirmed) return;
            }

            await LoadLastPurchaseDetailsInternal(lastPurchaseDetails);
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"智能下單失敗：{ex.Message}");
        }
    }

    /// <summary>
    /// 顯示確認對話框
    /// </summary>
    private async Task<bool> ShowConfirmationAsync(string title, string message)
    {
        // 暫時使用簡單的通知，等待確認後執行
        // 在實際專案中可能會使用更精美的對話框組件
        try 
        {
            // 先顯示警告訊息，讓使用者知道將要進行的操作
            await NotificationService.ShowWarningAsync($"{title}: {message}");
            return true; // 暫時直接返回 true，實際應該實作確認對話框
        }
        catch
        {
            return false;
        }
    }

    /// <summary>
    /// 內部方法：載入上次採購明細
    /// </summary>
    private async Task LoadLastPurchaseDetailsInternal(List<PurchaseOrderDetail> lastPurchaseDetails)
    {
        try
        {
            // 清空現有項目
            ProductItems.Clear();

            // 載入上次採購的所有商品明細
            foreach (var detail in lastPurchaseDetails)
            {
                var productItem = new ProductItem
                {
                    SelectedProduct = detail.Product,
                    Quantity = detail.OrderQuantity,  // 使用上次的採購數量
                    Price = detail.UnitPrice,         // 使用上次的採購單價
                    ReceivedQuantity = 0,             // 新訂單的已收貨數量從0開始
                    IsReceivingCompleted = false,     // 新訂單未完成收貨
                    Remarks = string.Empty           // 備註重新開始
                };

                ProductItems.Add(productItem);
            }

            // 確保有一個空行
            EnsureOneEmptyRow();
            
            // 通知變更 - 重要：需要同時調用兩個通知方法
            await OnProductItemsChanged.InvokeAsync(ProductItems);
            await NotifyDetailsChanged(); // 修復：加入此調用以通知父組件更新明細資料
            
            await NotificationService.ShowSuccessAsync(
                $"成功載入 {lastPurchaseDetails.Count} 項上次採購的商品明細"
            );
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入上次採購明細失敗：{ex.Message}");
        }
    }

    /// <summary>
    /// 清空所有明細
    /// </summary>
    private async Task ClearAllDetails()
    {
        // 清空所有明細，只保留一個空行
        ProductItems.Clear();
        EnsureOneEmptyRow();
        
        // 通知變更 - 重要：需要同時調用兩個通知方法
        await OnProductItemsChanged.InvokeAsync(ProductItems);
        await NotifyDetailsChanged(); // 修復：加入此調用以通知父組件清空明細資料
        
        await NotificationService.ShowSuccessAsync("已清空所有商品明細");
    }

    // ===== 相關單據查看方法 =====
    
    /// <summary>
    /// 顯示相關單據（入庫單）
    /// </summary>
    private async Task ShowRelatedDocuments(ProductItem item)
    {
        if (item.ExistingDetailEntity is not PurchaseOrderDetail detail || detail.Id <= 0)
        {
            await NotificationService.ShowWarningAsync("此項目尚未儲存，無法查看相關單據", "提示");
            return;
        }

        selectedProductName = item.SelectedProduct?.Name ?? "未知商品";
        
        showRelatedDocumentsModal = true;
        isLoadingRelatedDocuments = true;
        relatedDocuments = null;
        StateHasChanged();

        try
        {
            relatedDocuments = await RelatedDocumentsHelper.GetRelatedDocumentsForPurchaseOrderDetailAsync(detail.Id);
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入相關單據失敗：{ex.Message}");
        }
        finally
        {
            isLoadingRelatedDocuments = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 處理點擊相關單據的事件
    /// </summary>
    private async Task HandleRelatedDocumentClick(RelatedDocument document)
    {
        // 觸發事件，讓父組件（EditModal）處理開啟相關單據
        // 注意：不關閉 RelatedDocumentsModal，讓使用者可以繼續查看列表
        if (OnOpenRelatedDocument.HasDelegate)
        {
            await OnOpenRelatedDocument.InvokeAsync((document.DocumentType, document.DocumentId));
        }
        else
        {
            // 如果父組件沒有處理，顯示提示訊息
            await NotificationService.ShowInfoAsync(
                $"請在主畫面中開啟 {document.TypeDisplayName}: {document.DocumentNumber}", 
                "提示"
            );
        }
    }
    
    /// <summary>
    /// 檢查指定的採購訂單明細項目是否已被入庫單使用
    /// </summary>
    private async Task<bool> HasUsageRecord(ProductItem item)
    {
        if (item.ExistingDetailEntity is not PurchaseOrderDetail detail || detail.Id <= 0)
        {
            return false;
        }

        try
        {
            var documents = await RelatedDocumentsHelper.GetRelatedDocumentsForPurchaseOrderDetailAsync(detail.Id);
            var hasUsage = documents?.Any() == true;
            return hasUsage;
        }
        catch
        {
            return false;
        }
    }
    
    /// <summary>
    /// 檢查項目是否可以刪除
    /// </summary>
    private bool CanDeleteItem(ProductItem item, out string reason)
    {
        // 新項目（未儲存）可以刪除
        if (item.ExistingDetailEntity == null || item.ExistingDetailEntity.Id <= 0)
        {
            reason = string.Empty;
            return true;
        }
        
        // 檢查是否已有入庫記錄（這個方法是同步的，無法直接呼叫 async 方法）
        // 因此我們在 CustomActionsTemplate 中會使用不同的策略
        reason = string.Empty;
        return true;
    }
    
    /// <summary>
    /// 取得當前使用者ID
    /// </summary>
    private async Task<int?> GetCurrentUserIdAsync()
    {
        return await CurrentUserHelper.GetCurrentEmployeeIdAsync(AuthenticationStateProvider);
    }

    public class ProductItem
    {
        public Product? SelectedProduct { get; set; }
        public int Quantity { get; set; } = 0;
        public int ReceivedQuantity { get; set; } = 0;
        public decimal Price { get; set; } = 0;
        public string Remarks { get; set; } = string.Empty;
        public bool IsReceivingCompleted { get; set; } = false;
        public int? CompletedByEmployeeId { get; set; }
        public DateTime? CompletedAt { get; set; }
        public TDetailEntity? ExistingDetailEntity { get; set; }
        
        // 標記是否已被入庫單使用（避免重複查詢）
        public bool? HasUsageRecordCache { get; set; } = null;
    }
}
