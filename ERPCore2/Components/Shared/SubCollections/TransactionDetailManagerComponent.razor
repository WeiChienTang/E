@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JS
@typeparam TDetailEntity where TDetailEntity : class, new()
@typeparam TParentEntity where TParentEntity : class
@typeparam TProductEntity where TProductEntity : class

<div class="table-responsive">
    <table class="table table-striped table-hover table-bordered">
        <thead class="table-header-primary">
                    <tr>
                        <th style="width: 250px;">產品代碼/名稱</th>
                        <th style="width: 250px;">產品名稱</th>
                        <th style="width: 100px;">數量</th>
                        <th style="width: 150px;">單價</th>
                        <th style="width: 180px;">小計</th>
                        <th style="width: 200px;">備註</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Details != null && Details.Any())
                    {
                        @for (int i = 0; i < Details.Count; i++)
                        {
                            var detail = Details[i];
                            var index = i;
                            <tr>
                                <td>
                                    <div class="position-relative">
                                        <input type="text" 
                                               class="form-control form-control-sm @(productErrors.ContainsKey(index) && productErrors[index] ? "input-error" : "")" 
                                               placeholder="輸入產品代碼或名稱..."
                                               value="@GetProductSearchText(detail)"
                                               @oninput="@(async (ChangeEventArgs e) => await HandleProductSearch(detail, e.Value?.ToString() ?? "", index))"
                                               @onkeydown="@(async (KeyboardEventArgs e) => await HandleKeyDown(detail, e, index))"
                                               @onfocus="@(() => ShowProductSuggestions(index))"
                                               @onblur:preventDefault="false"
                                               @onblur="@(async () => await HideProductSuggestionsAsync(index))" />
                                        
                                        @if (productSuggestions.ContainsKey(index) && productSuggestions[index].Any())
                                        {
                                            <div id="suggestions-@index" class="position-absolute bg-white border rounded shadow-sm w-100" style="top: 100%; z-index: 1050; max-height: 200px; overflow-y: auto;">
                                                @for (int suggestionIndex = 0; suggestionIndex < productSuggestions[index].Count; suggestionIndex++)
                                                {
                                                    var suggestion = productSuggestions[index][suggestionIndex];
                                                    var currentSuggestionIndex = suggestionIndex;
                                                    var isSelected = selectedSuggestionIndex.ContainsKey(index) && selectedSuggestionIndex[index] == currentSuggestionIndex;
                                                    
                                                    <div id="suggestion-@index-@currentSuggestionIndex" 
                                                         class="dropdown-item-text px-3 py-2 border-bottom cursor-pointer @(isSelected ? "bg-primary text-white" : "hover-bg-light")"
                                                         @onclick="@(async () => await SelectProductSuggestion(detail, suggestion, index))"
                                                         @onmousedown:preventDefault="true"
                                                         @onmouseover="@(() => selectedSuggestionIndex[index] = currentSuggestionIndex)">
                                                        <strong>@GetProductCodeFromProduct(suggestion)</strong>
                                                        <br />
                                                        <small class="@(isSelected ? "text-white-50" : "text-muted")">@GetProductNameFromProduct(suggestion) - NT$ @GetProductPrice(suggestion).ToString("N2")</small>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        
                                        @if (productErrors.ContainsKey(index) && productErrors[index])
                                        {
                                            <div class="product-error">
                                                沒有此商品編號
                                            </div>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <span class="text-muted">@GetDisplayProductName(detail, index)</span>
                                </td>
                                <td>
                                    <input type="number" 
                                           class="form-control form-control-sm text-center" 
                                           placeholder="數量"
                                           value="@(GetQuantity(detail) == 0 ? "" : GetQuantity(detail).ToString())"
                                           @onchange="@((ChangeEventArgs e) => UpdateQuantity(detail, e))"
                                           min="1" 
                                           step="1" />
                                </td>
                                <td>
                                    <input type="number" 
                                           class="form-control form-control-sm text-end" 
                                           placeholder="單價"
                                           value="@(GetUnitPrice(detail) == 0 ? "" : GetUnitPrice(detail).ToString())"
                                           @onchange="@((ChangeEventArgs e) => UpdateUnitPrice(detail, e))"
                                           min="0" 
                                           step="0.01" />
                                </td>
                                <td>
                                    <span class="fw-bold text-success">@(GetSubtotal(detail) == 0 ? "" : "NT$ " + GetSubtotal(detail).ToString("N2"))</span>
                                </td>
                                <td>
                                    <input type="text" 
                                           class="form-control form-control-sm" 
                                           placeholder="備註..."
                                           value="@GetRemarks(detail)"
                                           @onchange="@((ChangeEventArgs e) => UpdateRemarks(detail, e.Value?.ToString() ?? ""))" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>
                @if (Details != null && Details.Any() && HasAnyData())
                {
                    <tfoot class="table-light">
                        <tr>
                            <td colspan="4" class="text-end fw-bold">總計:</td>
                            <td class="fw-bold text-success fs-5">NT$ @CalculateTotal().ToString("N2")</td>
                            <td></td>
                        </tr>
                    </tfoot>
                }
            </table>
        </div>

@code {
    [Parameter] public IList<TDetailEntity>? Details { get; set; }
    [Parameter] public IList<TProductEntity>? Products { get; set; }
    [Parameter] public TransactionDetailConfig Config { get; set; } = new();
    
    // Getter functions - 從 detail entity 取得值
    [Parameter] public Func<TDetailEntity, string> GetProductCode { get; set; } = _ => "";
    [Parameter] public Func<TDetailEntity, string> GetProductName { get; set; } = _ => "";
    [Parameter] public Func<TDetailEntity, decimal> GetQuantity { get; set; } = _ => 0;
    [Parameter] public Func<TDetailEntity, decimal> GetUnitPrice { get; set; } = _ => 0;
    [Parameter] public Func<TDetailEntity, decimal> GetSubtotal { get; set; } = _ => 0;
    [Parameter] public Func<TDetailEntity, string> GetRemarks { get; set; } = _ => "";
    
    // Product getter functions - 從 product entity 取得值
    [Parameter] public Func<TProductEntity, string> GetProductCodeFromProduct { get; set; } = _ => "";
    [Parameter] public Func<TProductEntity, string> GetProductNameFromProduct { get; set; } = _ => "";
    [Parameter] public Func<TProductEntity, decimal> GetProductPrice { get; set; } = _ => 0;
    
    // Setter functions - 設定 detail entity 的值
    [Parameter] public Action<TDetailEntity, decimal> SetQuantity { get; set; } = (_, _) => { };
    [Parameter] public Action<TDetailEntity, decimal> SetUnitPrice { get; set; } = (_, _) => { };
    [Parameter] public Action<TDetailEntity, string> SetRemarks { get; set; } = (_, _) => { };
    [Parameter] public Action<TDetailEntity, TProductEntity> SetProduct { get; set; } = (_, _) => { };
    
    // Actions
    [Parameter] public Action<TDetailEntity> OnDetailRemoved { get; set; } = _ => { };
    [Parameter] public Func<TDetailEntity> CreateNewDetail { get; set; } = () => new TDetailEntity();
    [Parameter] public Action<TDetailEntity> OnDetailAdded { get; set; } = _ => { };
    [Parameter] public Action<TDetailEntity> OnDetailUpdated { get; set; } = _ => { };
    
    // 產品建議和搜尋狀態管理
    private Dictionary<int, List<TProductEntity>> productSuggestions = new();
    private Dictionary<int, string> currentSearchTexts = new();
    private Dictionary<int, bool> showSuggestions = new();
    private Dictionary<int, bool> productErrors = new();
    private Dictionary<int, int> selectedSuggestionIndex = new(); // 當前選中的建議索引
    private bool isAddingNewRow = false; // 防止重複新增列
    
    protected override void OnInitialized()
    {
        // 初始化時確保至少有一個空白列
        EnsureMinimumRows();
    }
    
    // 確保最少有幾個空白列
    private void EnsureMinimumRows(int minRows = 3)
    {
        if (Details == null) return;
        
        while (Details.Count < minRows)
        {
            var newDetail = CreateNewDetail();
            Details.Add(newDetail);
            // 注意：初始化時不呼叫 OnDetailAdded，避免觸發額外邏輯
        }
    }
    
    // 取得顯示用的產品名稱 - 從產品清單中根據ProductId查找
    private string GetDisplayProductName(TDetailEntity detail, int rowIndex)
    {
        // 優先從detail直接取得（如果有設定的話）
        var directName = GetProductName(detail);
        if (!string.IsNullOrEmpty(directName))
            return directName;
        
        // 如果沒有直接設定的名稱，則根據ProductCode從產品清單查找
        var code = GetProductCode(detail);
        if (!string.IsNullOrEmpty(code) && Products != null)
        {
            var product = Products.FirstOrDefault(p => 
                GetProductCodeFromProduct(p).Equals(code, StringComparison.OrdinalIgnoreCase));
            if (product != null)
            {
                return GetProductNameFromProduct(product);
            }
        }
        
        return "";
    }
    
    // 取得產品搜尋顯示文字
    private string GetProductSearchText(TDetailEntity detail)
    {
        var code = GetProductCode(detail);
        if (!string.IsNullOrEmpty(code))
            return code;
        
        var name = GetProductName(detail);
        if (!string.IsNullOrEmpty(name))
            return name;
            
        return "";
    }
    
    // 處理產品搜尋
    private Task HandleProductSearch(TDetailEntity detail, string searchText, int rowIndex)
    {
        currentSearchTexts[rowIndex] = searchText;
        
        // 清除錯誤狀態
        productErrors[rowIndex] = false;
        
        if (string.IsNullOrWhiteSpace(searchText) || Products == null)
        {
            productSuggestions[rowIndex] = new List<TProductEntity>();
            StateHasChanged();
            return Task.CompletedTask;
        }
        
        // 執行搜尋
        var suggestions = Products.Where(p => 
            GetProductCodeFromProduct(p).Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
            GetProductNameFromProduct(p).Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Take(10)
            .ToList();
        
        productSuggestions[rowIndex] = suggestions;
        showSuggestions[rowIndex] = true;
        selectedSuggestionIndex[rowIndex] = -1; // 重置選中索引
        StateHasChanged();
        
        // 不在搜尋時自動新增列，只在實際選擇產品時才新增
        return Task.CompletedTask;
    }
    
    // 處理鍵盤事件
    private async Task HandleKeyDown(TDetailEntity detail, KeyboardEventArgs e, int rowIndex)
    {
        if (e.Key == "Tab")
        {
            await HandleTabKeyPress(detail, rowIndex);
        }
        else if (e.Key == "ArrowDown")
        {
            HandleArrowDownKey(rowIndex);
        }
        else if (e.Key == "ArrowUp")
        {
            HandleArrowUpKey(rowIndex);
        }
        else if (e.Key == "Enter")
        {
            await HandleEnterKey(detail, rowIndex);
        }
        else if (e.Key == "Escape")
        {
            HandleEscapeKey(rowIndex);
        }
    }
    
    // 處理 Tab 鍵按下
    private async Task HandleTabKeyPress(TDetailEntity detail, int rowIndex)
    {
        var searchText = currentSearchTexts.ContainsKey(rowIndex) ? currentSearchTexts[rowIndex] : "";
        
        if (string.IsNullOrWhiteSpace(searchText))
        {
            return;
        }
        
        if (Products == null)
        {
            productErrors[rowIndex] = true;
            StateHasChanged();
            return;
        }
        
        // 尋找完全匹配的產品
        var exactMatches = Products.Where(p => 
            GetProductCodeFromProduct(p).Equals(searchText, StringComparison.OrdinalIgnoreCase) ||
            GetProductNameFromProduct(p).Equals(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
        
        // 如果有完全匹配且只有一個，直接選擇
        if (exactMatches.Count == 1)
        {
            await SelectProductSuggestion(detail, exactMatches.First(), rowIndex);
            return;
        }
        
        // 如果沒有完全匹配，尋找部分匹配
        if (exactMatches.Count == 0)
        {
            var partialMatches = Products.Where(p => 
                GetProductCodeFromProduct(p).Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                GetProductNameFromProduct(p).Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
            
            // 如果部分匹配只有一個，直接選擇
            if (partialMatches.Count == 1)
            {
                await SelectProductSuggestion(detail, partialMatches.First(), rowIndex);
                return;
            }
            
            // 如果沒有任何匹配
            if (partialMatches.Count == 0)
            {
                productErrors[rowIndex] = true;
                StateHasChanged();
                return;
            }
        }
        
        // 如果有多個匹配，不自動選擇，讓使用者手動從下拉選單選擇
        // 這裡可以顯示搜尋建議但不自動選擇
        productErrors[rowIndex] = false;
        StateHasChanged();
    }
    
    // 處理向下箭頭鍵
    private void HandleArrowDownKey(int rowIndex)
    {
        if (!productSuggestions.ContainsKey(rowIndex) || !productSuggestions[rowIndex].Any()) return;
        
        var currentIndex = selectedSuggestionIndex.ContainsKey(rowIndex) ? selectedSuggestionIndex[rowIndex] : -1;
        var maxIndex = productSuggestions[rowIndex].Count - 1;
        
        currentIndex = currentIndex >= maxIndex ? 0 : currentIndex + 1;
        selectedSuggestionIndex[rowIndex] = currentIndex;
        
        StateHasChanged();
        
        // 滾動到選中的項目
        _ = ScrollToSelectedSuggestion(rowIndex, currentIndex);
    }
    
    // 處理向上箭頭鍵
    private void HandleArrowUpKey(int rowIndex)
    {
        if (!productSuggestions.ContainsKey(rowIndex) || !productSuggestions[rowIndex].Any()) return;
        
        var currentIndex = selectedSuggestionIndex.ContainsKey(rowIndex) ? selectedSuggestionIndex[rowIndex] : 0;
        var maxIndex = productSuggestions[rowIndex].Count - 1;
        
        currentIndex = currentIndex <= 0 ? maxIndex : currentIndex - 1;
        selectedSuggestionIndex[rowIndex] = currentIndex;
        
        StateHasChanged();
        
        // 滾動到選中的項目
        _ = ScrollToSelectedSuggestion(rowIndex, currentIndex);
    }
    
    // 處理 Enter 鍵
    private async Task HandleEnterKey(TDetailEntity detail, int rowIndex)
    {
        if (!productSuggestions.ContainsKey(rowIndex) || !productSuggestions[rowIndex].Any()) return;
        if (!selectedSuggestionIndex.ContainsKey(rowIndex)) return;
        
        var selectedIndex = selectedSuggestionIndex[rowIndex];
        if (selectedIndex >= 0 && selectedIndex < productSuggestions[rowIndex].Count)
        {
            var selectedProduct = productSuggestions[rowIndex][selectedIndex];
            await SelectProductSuggestion(detail, selectedProduct, rowIndex);
        }
    }
    
    // 處理 Escape 鍵
    private void HandleEscapeKey(int rowIndex)
    {
        showSuggestions[rowIndex] = false;
        productSuggestions[rowIndex] = new List<TProductEntity>();
        selectedSuggestionIndex[rowIndex] = -1;
        StateHasChanged();
    }
    
    // 滾動到選中的建議項目
    private async Task ScrollToSelectedSuggestion(int rowIndex, int selectedIndex)
    {
        try
        {
            await InvokeAsync(async () =>
            {
                var suggestionElementId = $"suggestion-{rowIndex}-{selectedIndex}";
                var containerElementId = $"suggestions-{rowIndex}";
                
                await JS.InvokeVoidAsync("scrollToElement", containerElementId, suggestionElementId);
            });
        }
        catch (Exception)
        {
            // 忽略 JavaScript 相關錯誤，避免影響使用者體驗
        }
    }
    
    // 檢查並在需要時新增新列
    private void CheckAndAddNewRowIfNeeded(int currentRowIndex)
    {
        if (Details == null || isAddingNewRow) return;
        
        // 只有在最後一列且有實際輸入內容時才新增新列
        if (currentRowIndex == Details.Count - 1)
        {
            var currentDetail = Details[currentRowIndex];
            
            // 檢查當前列是否有產品選擇
            var hasProduct = !string.IsNullOrEmpty(GetProductCode(currentDetail)) &&
                           !string.IsNullOrEmpty(GetProductName(currentDetail));
            
            // 只有當選擇了產品時才新增新列
            if (hasProduct)
            {
                isAddingNewRow = true;
                try
                {
                    var newDetail = CreateNewDetail();
                    Details.Add(newDetail);
                    OnDetailAdded(newDetail);
                    
                    // 使用 InvokeAsync 確保 UI 更新
                    InvokeAsync(StateHasChanged);
                }
                finally
                {
                    // 延遲重置標誌，防止競爭條件
                    Task.Delay(100).ContinueWith(_ => 
                    {
                        isAddingNewRow = false;
                    });
                }
            }
        }
    }
    
    // 顯示產品建議
    private void ShowProductSuggestions(int rowIndex)
    {
        showSuggestions[rowIndex] = true;
        StateHasChanged();
    }
    
    // 隱藏產品建議
    private void HideProductSuggestions(int rowIndex)
    {
        showSuggestions[rowIndex] = false;
        if (productSuggestions.ContainsKey(rowIndex))
        {
            productSuggestions[rowIndex] = new List<TProductEntity>();
        }
        selectedSuggestionIndex[rowIndex] = -1;
        StateHasChanged();
    }
    
    // 非同步隱藏產品建議
    private async Task HideProductSuggestionsAsync(int rowIndex)
    {
        await Task.Delay(200);
        await InvokeAsync(() =>
        {
            showSuggestions[rowIndex] = false;
            if (productSuggestions.ContainsKey(rowIndex))
            {
                productSuggestions[rowIndex] = new List<TProductEntity>();
            }
            selectedSuggestionIndex[rowIndex] = -1;
            StateHasChanged();
        });
    }
    
    // 選擇產品建議
    private async Task SelectProductSuggestion(TDetailEntity detail, TProductEntity product, int rowIndex)
    {
        await InvokeAsync(() =>
        {
            SetProduct(detail, product);
            
            // 預設數量為1（如果當前為0）
            if (GetQuantity(detail) == 0)
            {
                SetQuantity(detail, 1);
            }
            
            // 立即隱藏建議清單和清除錯誤狀態
            showSuggestions[rowIndex] = false;
            productErrors[rowIndex] = false;
            if (productSuggestions.ContainsKey(rowIndex))
            {
                productSuggestions[rowIndex] = new List<TProductEntity>();
            }
            selectedSuggestionIndex[rowIndex] = -1;
            
            OnDetailUpdated(detail);
            StateHasChanged();
        });
        
        // 延遲檢查新增列，避免與選擇產品邏輯衝突
        await Task.Delay(50);
        await InvokeAsync(() => CheckAndAddNewRowIfNeeded(rowIndex));
    }
    
    // 更新數量
    private void UpdateQuantity(TDetailEntity detail, ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out var quantity) && quantity >= 0)
        {
            SetQuantity(detail, quantity);
            OnDetailUpdated(detail);
            StateHasChanged();
        }
    }
    
    // 更新單價
    private void UpdateUnitPrice(TDetailEntity detail, ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out var unitPrice) && unitPrice >= 0)
        {
            SetUnitPrice(detail, unitPrice);
            OnDetailUpdated(detail);
            StateHasChanged();
        }
    }
    
    // 更新備註
    private void UpdateRemarks(TDetailEntity detail, string remarks)
    {
        SetRemarks(detail, remarks);
        OnDetailUpdated(detail);
    }
    
    // 檢查是否有任何資料
    private bool HasAnyData()
    {
        if (Details == null) return false;
        return Details.Any(d => 
            !string.IsNullOrEmpty(GetProductCode(d)) || 
            !string.IsNullOrEmpty(GetProductName(d)) ||
            GetQuantity(d) > 0 ||
            GetUnitPrice(d) > 0 ||
            !string.IsNullOrEmpty(GetRemarks(d)));
    }
    
    // 計算總計
    private decimal CalculateTotal()
    {
        if (Details == null) return 0;
        return Details.Sum(d => GetSubtotal(d));
    }
}

<script>
    window.scrollToElement = function (containerId, elementId) {
        const container = document.getElementById(containerId);
        const element = document.getElementById(elementId);
        
        if (container && element) {
            // 計算元素相對於容器的位置
            const containerRect = container.getBoundingClientRect();
            const elementRect = element.getBoundingClientRect();
            
            // 元素在容器中的相對位置
            const elementTop = element.offsetTop;
            const elementHeight = element.offsetHeight;
            const containerScrollTop = container.scrollTop;
            const containerHeight = container.clientHeight;
            
            // 檢查是否需要滾動
            if (elementTop < containerScrollTop) {
                // 元素在視窗上方，向上滾動
                container.scrollTop = elementTop;
            } else if (elementTop + elementHeight > containerScrollTop + containerHeight) {
                // 元素在視窗下方，向下滾動
                container.scrollTop = elementTop + elementHeight - containerHeight;
            }
        }
    };
</script>
