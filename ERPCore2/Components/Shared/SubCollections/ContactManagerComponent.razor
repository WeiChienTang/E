@* 聯絡方式管理組件 - 管理實體的多個聯絡方式資訊 - 使用 InteractiveTableComponent 統一UI *@

@inject INotificationService NotificationService
@using ERPCore2.Helpers
@using ERPCore2.Components.Shared.SubCollections
@typeparam TContactEntity where TContactEntity : ERPCore2.Data.BaseEntity, new()
@typeparam TParentEntity where TParentEntity : ERPCore2.Data.BaseEntity

<div class="card border-0 shadow-sm">
    <div class="card-body p-0">
        <InteractiveTableComponent TItem="TContactEntity" 
                                  Items="@Items"
                                  ColumnDefinitions="@GetColumnDefinitions()"
                                  IsReadOnly="@IsReadOnly"
                                  ShowRowNumbers="false"
                                  EmptyMessage="@EmptyMessage"
                                  ShowBuiltInActions="true"
                                  ShowBuiltInDeleteButton="true"
                                  OnItemDelete="@HandleItemDelete" />
    </div>
</div>

@code {
    // ===== 私有欄位 =====
    private readonly HashSet<int> _deletedDetailIds = new HashSet<int>();
    
    // ===== 基本參數 =====
    [Parameter] public List<TContactEntity> Items { get; set; } = new();
    [Parameter] public List<ERPCore2.Data.BaseEntity> Options { get; set; } = new(); // 聯絡類型選項
    [Parameter] public int ParentEntityId { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "聯絡方式";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "telephone";
    [Parameter] public string ItemDisplayName { get; set; } = "聯絡方式";
    [Parameter] public string TypeDisplayName { get; set; } = "聯絡類型";
    [Parameter] public string ValueDisplayName { get; set; } = "聯絡內容";
    [Parameter] public string ValuePlaceholder { get; set; } = "請輸入聯絡內容";
    [Parameter] public string EmptyIcon { get; set; } = "telephone-x";
    [Parameter] public string EmptyMessage { get; set; } = "尚未新增聯絡方式";
    
    // ===== 委派參數 - Getter =====
    [Parameter] public Func<TContactEntity, int?> GetTypeId { get; set; } = item => null;
    [Parameter] public Func<TContactEntity, string> GetContactValue { get; set; } = item => string.Empty;
    [Parameter] public Func<TContactEntity, string?> GetRemarks { get; set; } = item => null;
    [Parameter] public Func<ERPCore2.Data.BaseEntity, int> GetOptionId { get; set; } = option => option.Id;
    [Parameter] public Func<ERPCore2.Data.BaseEntity, string> GetOptionDisplayText { get; set; } = option => 
    {
        // 檢查是否有 TypeName 屬性並取得其值
        var typeNameProperty = option.GetType().GetProperty("TypeName");
        if (typeNameProperty != null)
        {
            var typeName = typeNameProperty.GetValue(option) as string;
            return typeName ?? option.ToString() ?? "";
        }
        return option.ToString() ?? "";
    };
    
    // ===== 委派參數 - Setter =====
    [Parameter] public Action<TContactEntity, int?> SetTypeId { get; set; } = (item, typeId) => { };
    [Parameter] public Action<TContactEntity, string> SetContactValue { get; set; } = (item, value) => { };
    [Parameter] public Action<TContactEntity, string?> SetRemarks { get; set; } = (item, value) => { };
    [Parameter] public Action<TContactEntity, int> SetParentId { get; set; } = (item, parentId) => { };
    
    // ===== 事件參數 =====
    [Parameter] public EventCallback<List<TContactEntity>> ItemsChanged { get; set; }
    [Parameter] public EventCallback<TContactEntity> ItemAdded { get; set; }
    [Parameter] public EventCallback<TContactEntity> ItemRemoved { get; set; }
    [Parameter] public EventCallback<TContactEntity> PrimaryChanged { get; set; }
    [Parameter] public EventCallback<List<int>> OnDeletedDetailsChanged { get; set; } // 🆕 新增
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        
        var emptyCount = Items.Count(IsEmptyRow);
        
        // 總是確保有一行空行可以輸入
        // 不論是否已有資料，都應該保持有空行供使用者新增
        EnsureOneEmptyRow();
        
        var emptyCountAfter = Items.Count(IsEmptyRow);
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    
    /// <summary>
    /// 檢查是否為空行
    /// 業務邏輯：只要選擇了聯絡類型或輸入了聯絡內容，就算是有效的一行，不再是空行
    /// </summary>
    private bool IsEmptyRow(TContactEntity item)
    {
        var typeId = GetTypeId(item);
        var contactValue = GetContactValue(item);
        
        // 檢查聯絡類型或聯絡內容是否有值
        var hasType = typeId.HasValue && typeId.Value > 0;
        var hasValue = !string.IsNullOrWhiteSpace(contactValue);
        
        // 只要有其中一個欄位有值，就不是空行
        return !hasType && !hasValue;
    }
    
    /// <summary>
    /// 創建空的聯絡方式項目
    /// </summary>
    private TContactEntity CreateEmptyItem()
    {
        var newItem = new TContactEntity();
        SetParentId(newItem, ParentEntityId);
        return newItem;
    }
    
    /// <summary>
    /// 確保有一行空行
    /// </summary>
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.For<TContactEntity>.EnsureOneEmptyRow(
            Items, 
            IsEmptyRow, 
            CreateEmptyItem, 
            SetParentId, 
            ParentEntityId
        );
    }

    // ===== InteractiveTableComponent 方法 =====
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        return new List<InteractiveColumnDefinition>
        {
            // 聯絡類型選擇欄位
            new() 
            { 
                Title = TypeDisplayName, 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "25%",
                CustomTemplate = item => 
                {
                    var contact = (TContactEntity)item;
                    var typeId = GetTypeId(contact);
                    var selectedValue = typeId?.ToString() ?? "";
                    
                    return @<select class="form-select form-select-sm" 
                                    value="@selectedValue"
                                    disabled="@IsReadOnly"
                                    @onchange="@(async (e) => await OnTypeChanged((contact, e.Value)))">
                        <option value="">請選擇類型</option>
                        @foreach (var option in Options)
                        {
                            <option value="@GetOptionId(option)">@GetOptionDisplayText(option)</option>
                        }
                    </select>;
                }
            },
            
            // 聯絡內容 - 文字輸入
            new() 
            { 
                Title = ValueDisplayName, 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "35%",
                CustomTemplate = item => 
                {
                    var contact = (TContactEntity)item;
                    var value = GetContactValue(contact) ?? "";
                    
                    return @<input type="text" 
                                   class="form-control form-control-sm" 
                                   value="@value"
                                   placeholder="@ValuePlaceholder"
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnContactValueChanged((contact, e.Value?.ToString())))" />;
                }
            },
            
            // 備註 - 文字輸入
            new() 
            { 
                Title = "備註", 
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "40%",
                CustomTemplate = item => 
                {
                    var contact = (TContactEntity)item;
                    var value = GetRemarks(contact) ?? "";
                    
                    return @<input type="text" 
                                   class="form-control form-control-sm" 
                                   value="@value"
                                   placeholder="請輸入備註"
                                   disabled="@IsReadOnly"
                                   @oninput="@(async (e) => await OnRemarksChanged((contact, e.Value?.ToString())))" />;
                }
            }
        };
    }

    private async Task HandleItemDelete(TContactEntity item)
    {
        var index = Items.IndexOf(item);
        await RemoveItemAsync(index);
    }

    private Task OnValidationFailed((TContactEntity item, string propertyName, string? errorMessage) args)
    {
        // 不再需要此方法，因為驗證已移至自訂模板中
        return Task.CompletedTask;
    }

    private Task HandleRowClick(TContactEntity item)
    {
        // 不再需要此方法，因為直接在表格上編輯
        return Task.CompletedTask;
    }
    
    // ===== 內部方法 =====

    private string GetTypeDisplayText(TContactEntity item)
    {
        var typeId = GetTypeId(item);
        if (typeId.HasValue)
        {
            var type = Options.FirstOrDefault(o => GetOptionId(o) == typeId.Value);
            if (type != null)
            {
                return GetOptionDisplayText(type);
            }
        }
        return "未知類型";
    }

    // ===== InteractiveTableComponent 事件處理 =====
    private async Task OnTypeChanged((object item, object? value) args)
    {
        var contact = (TContactEntity)args.item;
        var wasEmpty = IsEmptyRow(contact);
        
        if (args.value != null && !string.IsNullOrEmpty(args.value.ToString()) && int.TryParse(args.value.ToString(), out var typeId) && typeId > 0)
        {
            SetTypeId(contact, typeId);
            
            // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
            var added = AutoEmptyRowHelper.For<TContactEntity>.HandleInputChangeAdvanced(
                Items, contact, IsEmptyRow, CreateEmptyItem, wasEmpty, SetParentId, ParentEntityId);
            
            await ItemsChanged.InvokeAsync(Items);
        }
        else
        {
            SetTypeId(contact, null);
            await ItemsChanged.InvokeAsync(Items);
        }
        StateHasChanged();
    }

    private async Task OnContactValueChanged((object item, string? value) args)
    {
        var contact = (TContactEntity)args.item;
        var wasEmpty = IsEmptyRow(contact);
        
        SetContactValue(contact, args.value ?? "");
        
        // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
        AutoEmptyRowHelper.For<TContactEntity>.HandleInputChangeAdvanced(
            Items, contact, IsEmptyRow, CreateEmptyItem, wasEmpty, SetParentId, ParentEntityId);
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }

    private async Task OnRemarksChanged((object item, string? value) args)
    {
        var contact = (TContactEntity)args.item;
        var wasEmpty = IsEmptyRow(contact);
        
        SetRemarks(contact, args.value);
        
        // 使用更精確的自動空行處理（在設定值後檢查整行狀態）
        AutoEmptyRowHelper.For<TContactEntity>.HandleInputChangeAdvanced(
            Items, contact, IsEmptyRow, CreateEmptyItem, wasEmpty, SetParentId, ParentEntityId);
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        var removedItem = Items[index];
        if (removedItem == null) return;
        
        // 🆕 記錄要刪除的資料庫實體ID
        if (removedItem.Id > 0)
        {
            _deletedDetailIds.Add(removedItem.Id);
        }
        
        // 使用 Helper 處理移除，自動確保空行
        AutoEmptyRowHelper.For<TContactEntity>.HandleItemRemove(
            Items, removedItem, IsEmptyRow, CreateEmptyItem, SetParentId, ParentEntityId);
        
        await ItemRemoved.InvokeAsync(removedItem);
        await ItemsChanged.InvokeAsync(Items);
        
        // 🆕 通知已刪除的明細ID
        await NotifyDeletedDetailsChanged();
        
        StateHasChanged();
    }
    
    /// <summary>
    /// 通知已刪除的明細ID
    /// </summary>
    private async Task NotifyDeletedDetailsChanged()
    {
        if (OnDeletedDetailsChanged.HasDelegate && _deletedDetailIds.Any())
        {
            await OnDeletedDetailsChanged.InvokeAsync(_deletedDetailIds.ToList());
            _deletedDetailIds.Clear(); // 清空已通知的刪除ID
        }
    }
    
    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        // 使用 Helper 檢查是否有足夠的非空項目
        if (!AutoEmptyRowHelper.For<TContactEntity>.HasSufficientItems(Items, IsEmptyRow, 1))
        {
            errors.Add("至少需要一個聯絡方式");
        }
        else
        {
            // 取得非空的項目進行詳細驗證
            var nonEmptyItems = AutoEmptyRowHelper.For<TContactEntity>.GetNonEmptyItems(Items, IsEmptyRow);
            
            for (int i = 0; i < nonEmptyItems.Count; i++)
            {
                var item = nonEmptyItems[i];
                var contactValue = GetContactValue(item);
                var typeId = GetTypeId(item);
                
                if (string.IsNullOrWhiteSpace(contactValue))
                {
                    errors.Add($"{ItemDisplayName} #{i + 1} 的{ValueDisplayName}為必填");
                }
                
                if (!typeId.HasValue || typeId.Value <= 0)
                {
                    errors.Add($"{ItemDisplayName} #{i + 1} 的{TypeDisplayName}為必填");
                }
            }
        }
          
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }
}
