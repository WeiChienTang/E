@typeparam TContactEntity where TContactEntity : ERPCore2.Data.BaseEntity, new()
@typeparam TParentEntity where TParentEntity : ERPCore2.Data.BaseEntity
@using ERPCore2.Data
@using ERPCore2.Data.Enums
@using ERPCore2.Services.Notifications
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Buttons
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject INotificationService NotificationService

<div class="card mb-4">    <GenericHeaderComponent Title="@Title"
                           Subtitle="@GetSubtitle()"
                           IsCardHeader="true">
    </GenericHeaderComponent>    <div class="card-body">
        <div class="row g-3">
            @for (int i = 0; i < Items.Count; i++)
            {
                var index = i; // 為了閉包
                var item = Items[index];                    <div class="col-lg-3">
                    <div class="card border-secondary subcollection-card">
                        <div class="card-header bg-light d-flex justify-content-between align-items-center">
                            <small class="fw-bold subcollection-item-number"> #@(index + 1)</small>
                            <div class="btn-group btn-group-sm subcollection-actions">@if (GetIsPrimary(item))
                                {
                                    <span class="badge-primary-marker">
                                        <i class="bi-star-fill-primary"></i>
                                    </span>                                }
                                else if (!IsReadOnly)
                                {
                                    <GenericButtonComponent Variant="ButtonVariant.OutlinePrimary" Size="ButtonSize.Small"
                                                           IconClass="bi bi-star" OnClick="() => SetPrimaryAsync(index)" 
                                                           Title="設為主要" />
                                }
                                @if (!IsReadOnly)
                                {
                                    <GenericButtonComponent Variant="ButtonVariant.OutlineDanger" Size="ButtonSize.Small"
                                                           IconClass="bi-trash" OnClick="() => RemoveItemAsync(index)" 
                                                           Title="移除" />
                                }
                            </div>
                        </div>
                        <div class="card-body p-3 subcollection-form">
                            @* 聯絡類型選擇 *@
                            <div class="mb-2">
                                <label class="form-label small"></label>
                                <select class="form-select form-select-sm" 
                                        @onchange="@(e => UpdateContactType(index, e.Value?.ToString()))"
                                        value="@GetTypeId(item)"
                                        disabled="@IsReadOnly">
                                    <option value="">請選擇</option>
                                    @foreach (var option in Options)
                                    {
                                        <option value="@GetOptionId(option)">@GetOptionDisplayText(option)</option>
                                    }
                                </select>
                            </div>
                            @* 聯絡內容輸入 *@
                            <div>
                                <label class="form-label small">@ValueDisplayName</label>
                                <input type="text" 
                                       class="form-control form-control-sm" 
                                       placeholder="@ValuePlaceholder"
                                       value="@GetContactValue(item)"
                                       @onchange="@(e => UpdateContactValue(index, e.Value?.ToString()))"
                                       readonly="@IsReadOnly" />
                            </div>
                        </div>
                    </div>
                </div>
            }
            
            @* 新增按鈕 - 始終顯示在下一個位置 *@
            @if (!IsReadOnly)
            {                <div class="col-lg-3">
                    <div class="card border-dashed subcollection-add-card h-100 d-flex align-items-center justify-content-center">
                        <GenericButtonComponent Variant="ButtonVariant.OutlinePrimary" Size="ButtonSize.Large"
                                               Text="新增" IconClass="" OnClick="AddItemAsync" />
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // ===== 基本參數 =====
    [Parameter] public List<TContactEntity> Items { get; set; } = new();
    [Parameter] public List<ERPCore2.Data.BaseEntity> Options { get; set; } = new(); // 聯絡類型選項
    [Parameter] public int ParentEntityId { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "聯絡方式";
    [Parameter] public string Icon { get; set; } = "telephone";
    [Parameter] public string ItemDisplayName { get; set; } = "聯絡方式";
    [Parameter] public string TypeDisplayName { get; set; } = "聯絡類型";
    [Parameter] public string ValueDisplayName { get; set; } = "聯絡內容";
    [Parameter] public string ValuePlaceholder { get; set; } = "請輸入聯絡內容";
    [Parameter] public string EmptyIcon { get; set; } = "bi-telephone-x";
    
    // ===== 委派參數 =====
    [Parameter] public Func<TContactEntity, bool> GetIsPrimary { get; set; } = item => false;
    [Parameter] public Func<TContactEntity, int?> GetTypeId { get; set; } = item => null;
    [Parameter] public Func<TContactEntity, string> GetContactValue { get; set; } = item => string.Empty;    [Parameter] public Func<ERPCore2.Data.BaseEntity, int> GetOptionId { get; set; } = option => option.Id;
    [Parameter] public Func<ERPCore2.Data.BaseEntity, string> GetOptionDisplayText { get; set; } = option => option.ToString() ?? "";
    
    [Parameter] public Action<TContactEntity, bool> SetIsPrimary { get; set; } = (item, isPrimary) => { };
    [Parameter] public Action<TContactEntity, int?> SetTypeId { get; set; } = (item, typeId) => { };
    [Parameter] public Action<TContactEntity, string> SetContactValue { get; set; } = (item, value) => { };
    [Parameter] public Action<TContactEntity, int> SetParentId { get; set; } = (item, parentId) => { };
    
    // ===== 事件參數 =====
    [Parameter] public EventCallback<List<TContactEntity>> ItemsChanged { get; set; }
    [Parameter] public EventCallback<TContactEntity> ItemAdded { get; set; }
    [Parameter] public EventCallback<TContactEntity> ItemRemoved { get; set; }
    [Parameter] public EventCallback<TContactEntity> PrimaryChanged { get; set; }
    
    // ===== 內部方法 =====
    
    private string GetSubtitle()
    {
        return $"管理{ItemDisplayName}資訊 ({Items.Count} 筆)";
    }    public async Task AddItemAsync()
    {
        if (IsReadOnly) return;
        
        var newItem = new TContactEntity();
        // 使用臨時負數 ID 來區分新項目（避免與資料庫現有 ID 衝突）
        newItem.Id = -(Items.Count + 1 + DateTime.Now.Millisecond);
        SetParentId(newItem, ParentEntityId);
        SetContactValue(newItem, "");
        SetIsPrimary(newItem, Items.Count == 0); // 第一個自動設為主要
        newItem.Status = EntityStatus.Active;
        newItem.CreatedAt = DateTime.Now;
        newItem.IsDeleted = false;
        
        Items.Add(newItem);
        
        await ItemAdded.InvokeAsync(newItem);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        var removedItem = Items[index];
        var wasPrimary = GetIsPrimary(removedItem);
        
        Items.RemoveAt(index);
        
        // 如果移除的是主要項目且還有其他項目，設定第一個為主要
        if (wasPrimary && Items.Any())
        {
            SetIsPrimary(Items[0], true);
            await PrimaryChanged.InvokeAsync(Items[0]);
        }
        
        await ItemRemoved.InvokeAsync(removedItem);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task SetPrimaryAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        // 清除所有主要標記
        foreach (var item in Items)
        {
            SetIsPrimary(item, false);
        }
        
        // 設定指定的為主要
        SetIsPrimary(Items[index], true);
        
        await PrimaryChanged.InvokeAsync(Items[index]);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    private async Task UpdateContactType(int index, string? typeIdStr)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        if (int.TryParse(typeIdStr, out var typeId))
        {
            SetTypeId(Items[index], typeId);
        }
        else
        {
            SetTypeId(Items[index], null);
        }
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    private async Task UpdateContactValue(int index, string? value)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        SetContactValue(Items[index], value ?? "");
        
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        for (int i = 0; i < Items.Count; i++)
        {
            var item = Items[i];
            var contactValue = GetContactValue(item);
            
            if (string.IsNullOrWhiteSpace(contactValue))
            {
                errors.Add($"{ItemDisplayName} #{i + 1} 的{ValueDisplayName}為必填");
            }
        }
          if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }
}
