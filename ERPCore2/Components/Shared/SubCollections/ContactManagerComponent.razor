@typeparam TContactEntity where TContactEntity : ERPCore2.Data.BaseEntity, new()
@typeparam TParentEntity where TParentEntity : ERPCore2.Data.BaseEntity
@using ERPCore2.Data
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Services
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject INotificationService NotificationService

<div class="card mb-4">    
    <GenericHeaderComponent Title="@Title"
                           Subtitle="@GetSubtitle()"
                           IsCardHeader="true">        
        <ActionButtons>
            @if (!IsReadOnly)
            {
                <GenericButtonComponent Variant="ButtonVariant.Primary" Text="@($"新增{ItemDisplayName}")" 
                                       IconClass="bi-plus me-1" OnClick="ShowAddModal" />
            }
        </ActionButtons>
    </GenericHeaderComponent>
    <div class="card-body">
        @if (Items.Any())
        {
            <div class="table-responsive">
                <table class="table table-sm table-hover">
                    <thead class="table-light">
                        <tr>
                            <th>聯絡資訊</th>
                            <th>@TypeDisplayName</th>
                            <th>@ValueDisplayName</th>
                            <th>狀態</th>
                            @if (!IsReadOnly)
                            {
                                <th width="120">操作</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Items.Count; i++)
                        {
                            var index = i;
                            var item = Items[index];
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-@Icon me-2"></i>
                                        <div>
                                            @if (GetIsPrimary(item))
                                            {
                                                <span class="badge bg-primary me-2">主要</span>
                                            }
                                            <span>@GetContactDisplayText(item)</span>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @{
                                        var typeId = GetTypeId(item);
                                        var typeOption = typeId.HasValue ? Options.FirstOrDefault(o => GetOptionId(o) == typeId.Value) : null;
                                    }
                                    @(typeOption != null ? GetOptionDisplayText(typeOption) : "-")
                                </td>
                                <td>
                                    <span class="text-break">@GetContactValue(item)</span>
                                </td>
                                <td>
                                    <span class="badge bg-success">啟用</span>
                                </td>
                                @if (!IsReadOnly)
                                {
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            @if (!GetIsPrimary(item))
                                            {
                                                <GenericButtonComponent Variant="ButtonVariant.OutlinePrimary" Size="ButtonSize.Small"
                                                                       IconClass="bi bi-star" OnClick="() => SetPrimaryAsync(index)" 
                                                                       Title="設為主要" />
                                            }
                                            <GenericButtonComponent Variant="ButtonVariant.OutlineWarning" Size="ButtonSize.Small"
                                                                   IconClass="bi bi-pencil" OnClick="() => ShowEditModal(index)" 
                                                                   Title="編輯" />
                                            <GenericButtonComponent Variant="ButtonVariant.OutlineDanger" Size="ButtonSize.Small"
                                                                   IconClass="bi bi-trash" OnClick="() => RemoveItemAsync(index)" 
                                                                   Title="移除" />
                                        </div>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-4 text-muted">
                <i class="bi @EmptyIcon fs-1 mb-3 d-block"></i>
                <p>@EmptyMessage</p>
                @if (!IsReadOnly)
                {                    
                    <GenericButtonComponent Variant="ButtonVariant.OutlinePrimary" Text="@($"新增第一個{ItemDisplayName}")" 
                                           IconClass="bi-plus me-1" OnClick="ShowAddModal" />
                }
            </div>
        }
    </div>
</div>

@* 新增/編輯聯絡方式 Modal *@
@if (showAddModal || showEditModal)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(showEditModal ? "編輯" : "新增")@ItemDisplayName</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-12">
                            <label class="form-label">@TypeDisplayName <span class="text-danger">*</span></label>
                            @if (Options.Any())
                            {
                                <select class="form-select" @bind="currentContactTypeId">
                                    @foreach (var option in Options)
                                    {
                                        <option value="@GetOptionId(option)">@GetOptionDisplayText(option)</option>
                                    }
                                </select>
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    請先新增聯絡類型資料
                                </div>
                            }
                        </div>
                        <div class="col-12">
                            <label class="form-label">@ValueDisplayName <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" @bind="currentContactValue" 
                                   placeholder="@ValuePlaceholder">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <GenericButtonComponent Variant="ButtonVariant.Secondary" Text="取消" OnClick="CloseModal" />
                    <GenericButtonComponent Variant="ButtonVariant.Primary" Text="@(showEditModal ? "更新" : "新增")" 
                                           OnClick="@(showEditModal ? () => UpdateItemAsync() : () => AddItemAsync())" 
                                           IsDisabled="@(!Options.Any() || string.IsNullOrEmpty(currentContactValue))" />
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // ===== 基本參數 =====
    [Parameter] public List<TContactEntity> Items { get; set; } = new();
    [Parameter] public List<ERPCore2.Data.BaseEntity> Options { get; set; } = new(); // 聯絡類型選項
    [Parameter] public int ParentEntityId { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 顯示設定 =====
    [Parameter] public string Title { get; set; } = "聯絡方式";
    [Parameter] public string Icon { get; set; } = "telephone";
    [Parameter] public string ItemDisplayName { get; set; } = "聯絡方式";
    [Parameter] public string TypeDisplayName { get; set; } = "聯絡類型";
    [Parameter] public string ValueDisplayName { get; set; } = "聯絡內容";
    [Parameter] public string ValuePlaceholder { get; set; } = "請輸入聯絡內容";
    [Parameter] public string EmptyIcon { get; set; } = "bi-telephone-x";
    [Parameter] public string EmptyMessage { get; set; } = "尚無資料";
    
    // ===== 委派參數 - Getter =====
    [Parameter] public Func<TContactEntity, bool> GetIsPrimary { get; set; } = item => false;
    [Parameter] public Func<TContactEntity, int?> GetTypeId { get; set; } = item => null;
    [Parameter] public Func<TContactEntity, string> GetContactValue { get; set; } = item => string.Empty;
    [Parameter] public Func<ERPCore2.Data.BaseEntity, int> GetOptionId { get; set; } = option => option.Id;
    [Parameter] public Func<ERPCore2.Data.BaseEntity, string> GetOptionDisplayText { get; set; } = option => 
    {
        // 檢查是否有 TypeName 屬性並取得其值
        var typeNameProperty = option.GetType().GetProperty("TypeName");
        if (typeNameProperty != null)
        {
            var typeName = typeNameProperty.GetValue(option) as string;
            return typeName ?? option.ToString() ?? "";
        }
        return option.ToString() ?? "";
    };
    
    // ===== 委派參數 - Setter =====
    [Parameter] public Action<TContactEntity, bool> SetIsPrimary { get; set; } = (item, isPrimary) => { };
    [Parameter] public Action<TContactEntity, int?> SetTypeId { get; set; } = (item, typeId) => { };
    [Parameter] public Action<TContactEntity, string> SetContactValue { get; set; } = (item, value) => { };
    [Parameter] public Action<TContactEntity, int> SetParentId { get; set; } = (item, parentId) => { };
    
    // ===== 事件參數 =====
    [Parameter] public EventCallback<List<TContactEntity>> ItemsChanged { get; set; }
    [Parameter] public EventCallback<TContactEntity> ItemAdded { get; set; }
    [Parameter] public EventCallback<TContactEntity> ItemRemoved { get; set; }
    [Parameter] public EventCallback<TContactEntity> PrimaryChanged { get; set; }
    
    // ===== Modal 狀態 =====
    private bool showAddModal = false;
    private bool showEditModal = false;
    private int editingIndex = -1;
    private string currentContactTypeId = string.Empty;
    private string currentContactValue = string.Empty;
    private bool currentIsPrimary = false;
    
    // ===== 內部方法 =====
    
    private string GetSubtitle()
    {
        return $"管理{ItemDisplayName}資訊 ({Items.Count} 筆)";
    }

    private string GetContactDisplayText(TContactEntity item)
    {
        var contactValue = GetContactValue(item);
        var typeId = GetTypeId(item);
        
        if (!string.IsNullOrWhiteSpace(contactValue))
        {
            if (typeId.HasValue)
            {
                var typeOption = Options.FirstOrDefault(o => GetOptionId(o) == typeId.Value);
                if (typeOption != null)
                {
                    var typeName = GetOptionDisplayText(typeOption);
                    return $"{typeName}: {contactValue}";
                }
            }
            return contactValue;
        }
        
        return "未設定聯絡資訊";
    }
    
    private void ShowAddModal()
    {
        if (IsReadOnly) return;
        
        ClearModalData();
        currentIsPrimary = Items.Count == 0; // 第一個自動設為主要
        
        // 設定預設聯絡類型：優先選擇電話，否則選第一個
        if (Options.Any())
        {
            var phoneOption = Options.FirstOrDefault(o => 
                GetOptionDisplayText(o).Contains("電話") || 
                GetOptionDisplayText(o).Contains("Phone") ||
                GetOptionDisplayText(o).ToLower().Contains("tel"));
            
            if (phoneOption != null)
            {
                currentContactTypeId = GetOptionId(phoneOption).ToString();
            }
            else
            {
                currentContactTypeId = GetOptionId(Options.First()).ToString();
            }
        }
        
        showAddModal = true;
    }
    
    private void ShowEditModal(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        editingIndex = index;
        var item = Items[index];
        
        var typeId = GetTypeId(item);
        currentContactTypeId = typeId?.ToString() ?? string.Empty;
        currentContactValue = GetContactValue(item) ?? string.Empty;
        currentIsPrimary = GetIsPrimary(item);
        
        showEditModal = true;
    }
    
    private void CloseModal()
    {
        showAddModal = false;
        showEditModal = false;
        editingIndex = -1;
        ClearModalData();
    }
    
    private void ClearModalData()
    {
        currentContactTypeId = string.Empty;
        currentContactValue = string.Empty;
        currentIsPrimary = false;
    }
    
    public async Task AddItemAsync()
    {
        if (IsReadOnly || !Options.Any() || string.IsNullOrEmpty(currentContactValue)) return;
        
        // 如果沒有設定類型ID，使用第一個選項
        if (string.IsNullOrEmpty(currentContactTypeId) && Options.Any())
        {
            currentContactTypeId = GetOptionId(Options.First()).ToString();
        }
        
        if (!int.TryParse(currentContactTypeId, out var typeId)) return;
        
        var newItem = new TContactEntity();
        SetParentId(newItem, ParentEntityId);
        SetTypeId(newItem, typeId);
        SetContactValue(newItem, currentContactValue);
        SetIsPrimary(newItem, currentIsPrimary);
        
        // 如果設為主要，先將其他項目設為非主要
        if (currentIsPrimary)
        {
            foreach (var item in Items)
            {
                SetIsPrimary(item, false);
            }
        }
        
        Items.Add(newItem);
        
        await ItemAdded.InvokeAsync(newItem);
        await ItemsChanged.InvokeAsync(Items);
        
        CloseModal();
        StateHasChanged();
    }
    
    public async Task UpdateItemAsync()
    {
        if (IsReadOnly || editingIndex < 0 || editingIndex >= Items.Count) return;
        if (!Options.Any() || string.IsNullOrEmpty(currentContactValue)) return;
        
        // 如果沒有設定類型ID，使用第一個選項
        if (string.IsNullOrEmpty(currentContactTypeId) && Options.Any())
        {
            currentContactTypeId = GetOptionId(Options.First()).ToString();
        }
        
        if (!int.TryParse(currentContactTypeId, out var typeId)) return;
        
        var item = Items[editingIndex];
        var wasPrimary = GetIsPrimary(item);
        
        SetTypeId(item, typeId);
        SetContactValue(item, currentContactValue);
        SetIsPrimary(item, currentIsPrimary);
        
        // 如果從非主要改為主要，先將其他項目設為非主要
        if (!wasPrimary && currentIsPrimary)
        {
            for (int i = 0; i < Items.Count; i++)
            {
                if (i != editingIndex)
                {
                    SetIsPrimary(Items[i], false);
                }
            }
        }
        
        await ItemsChanged.InvokeAsync(Items);
        
        CloseModal();
        StateHasChanged();
    }
    
    public async Task RemoveItemAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        var removedItem = Items[index];
        var wasPrimary = GetIsPrimary(removedItem);
        
        Items.RemoveAt(index);
        
        // 如果移除的是主要項目且還有其他項目，設定第一個為主要
        if (wasPrimary && Items.Any())
        {
            SetIsPrimary(Items[0], true);
            await PrimaryChanged.InvokeAsync(Items[0]);
        }
        
        await ItemRemoved.InvokeAsync(removedItem);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task SetPrimaryAsync(int index)
    {
        if (IsReadOnly || index < 0 || index >= Items.Count) return;
        
        // 清除所有主要標記
        foreach (var item in Items)
        {
            SetIsPrimary(item, false);
        }
        
        // 設定指定的為主要
        SetIsPrimary(Items[index], true);
        
        await PrimaryChanged.InvokeAsync(Items[index]);
        await ItemsChanged.InvokeAsync(Items);
        StateHasChanged();
    }
    
    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        for (int i = 0; i < Items.Count; i++)
        {
            var item = Items[i];
            var contactValue = GetContactValue(item);
            var typeId = GetTypeId(item);
            
            if (string.IsNullOrWhiteSpace(contactValue))
            {
                errors.Add($"{ItemDisplayName} #{i + 1} 的{ValueDisplayName}為必填");
            }
            
            if (!typeId.HasValue)
            {
                errors.Add($"{ItemDisplayName} #{i + 1} 的{TypeDisplayName}為必填");
            }
        }
          
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }
}
