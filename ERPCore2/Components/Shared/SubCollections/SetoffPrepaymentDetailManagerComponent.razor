@* 沖款預收付款項管理組件 - 管理預收付款項的使用記錄 *@

@inject ISetoffPrepaymentService SetoffPrepaymentService
@inject IPrepaymentTypeService PrepaymentTypeService
@inject INotificationService NotificationService

<div class="card-body p-0">
    <InteractiveTableComponent TItem="SetoffPrepaymentItem" 
                                Items="@PrepaymentItems"
                                ColumnDefinitions="@GetPrepaymentColumnDefinitions()"
                                IsReadOnly="@IsReadOnly"
                                ShowRowNumbers="false"
                                EmptyMessage="尚未新增預收付款項記錄"
                                ShowBuiltInActions="true"
                                ShowBuiltInDeleteButton="true"
                                OnItemDelete="@HandleRemovePrepaymentRecord"
                                ActionsColumnWidth = "60px" />
</div>

@code {
    // ===== 參數定義 =====
    [Parameter] public int? SetoffDocumentId { get; set; }
    [Parameter] public int? CustomerId { get; set; }
    [Parameter] public int? SupplierId { get; set; }
    [Parameter] public SetoffType SetoffType { get; set; } // 新增：沖款類型（應收/應付）
    [Parameter] public string? SetoffDocumentNumber { get; set; } // 沖款單號（用於設定來源單號）
    
    // 資料綁定
    [Parameter] public List<SetoffPrepayment> ExistingPrepayments { get; set; } = new();
    [Parameter] public EventCallback<List<SetoffPrepayment>> OnPrepaymentsChanged { get; set; }
    
    // 顯示控制
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    // ===== 內部狀態 =====
    private List<SetoffPrepaymentItem> PrepaymentItems { get; set; } = new();
    private List<SetoffPrepayment> AvailablePrepayments { get; set; } = new();
    private List<PrepaymentType> AllPrepaymentTypes { get; set; } = new();
    private List<PrepaymentType> FilteredPrepaymentTypes { get; set; } = new();

    // ===== 計算屬性 =====
    /// <summary>
    /// 取得總金額（預收/預付類型的 Amount + 轉沖款類型的 UsedAmount）
    /// </summary>
    private decimal TotalUsedAmount => PrepaymentItems
        .Where(p => !IsEmptyRow(p))
        .Sum(p =>
        {
            // 判斷是否為轉沖款類型
            if (p.PrepaymentTypeId.HasValue)
            {
                var selectedType = FilteredPrepaymentTypes.FirstOrDefault(pt => pt.Id == p.PrepaymentTypeId.Value);
                if (selectedType != null && IsTransferType(selectedType.Name))
                {
                    // 轉沖款類型：計算 UsedAmount
                    return p.UsedAmount;
                }
            }
            // 預收/預付類型：計算 Amount
            return p.Amount;
        });

    // ===== 生命週期方法 =====
    protected override async Task OnInitializedAsync()
    {
        await LoadPrepaymentTypesAsync();
        // 此時不篩選類型，因為 SetoffType 參數可能還未設定
        // FilterPrepaymentTypes() 會在 OnParametersSetAsync() 中執行
        await LoadAvailablePrepaymentsAsync();
        LoadExistingPrepayments();
    }

    protected override async Task OnParametersSetAsync()
    {
        // 優先篩選預收付類型（確保 SetoffType 已正確設定）
        FilterPrepaymentTypes();
        
        // 當 CustomerId 或 SupplierId 變更時，重新載入可用的預收付款項
        await LoadAvailablePrepaymentsAsync();
        
        // 當 ExistingPrepayments 參數變更時，重新載入資料
        LoadExistingPrepayments();
        
        // 總是確保有一行空行可以輸入
        EnsureOneEmptyRow();
        
        await base.OnParametersSetAsync();
    }

    // ===== AutoEmptyRowHelper 相關方法 =====
    
    /// <summary>
    /// 檢查是否為空行
    /// 業務邏輯：只要選擇了預收付類型，就算是有效的一行，不再是空行
    /// </summary>
    private bool IsEmptyRow(SetoffPrepaymentItem item)
    {
        // 檢查預收付類型是否為空（null 或 0 都算空）
        var isEmpty = !item.PrepaymentTypeId.HasValue || item.PrepaymentTypeId.Value <= 0;
        
        // 只要預收付類型有值（大於0），就不是空行
        // 預收付類型是核心欄位，其他欄位可以後續填寫
        return isEmpty;
    }
    
    /// <summary>
    /// 創建空的預收付款項記錄項目
    /// </summary>
    private SetoffPrepaymentItem CreateEmptyItem()
    {
        return new SetoffPrepaymentItem
        {
            Id = 0,
            PrepaymentTypeId = null,
            SourcePrepaymentId = null,
            SourceDocumentCode = string.Empty,
            Amount = 0,
            UsedAmount = 0,
            ExistingPrepayment = null
        };
    }
    
    /// <summary>
    /// 確保有一行空行
    /// </summary>
    private void EnsureOneEmptyRow()
    {
        AutoEmptyRowHelper.For<SetoffPrepaymentItem>.EnsureOneEmptyRow(
            PrepaymentItems, 
            IsEmptyRow, 
            CreateEmptyItem, 
            null, 
            SetoffDocumentId ?? 0
        );
    }

    // ===== 資料載入方法 =====
    
    /// <summary>
    /// 載入所有預收付類型
    /// </summary>
    private async Task LoadPrepaymentTypesAsync()
    {
        try
        {
            AllPrepaymentTypes = await PrepaymentTypeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入預收付類型失敗：{ex.Message}");
            AllPrepaymentTypes = new List<PrepaymentType>();
            FilteredPrepaymentTypes = new List<PrepaymentType>();
        }
    }
    
    /// <summary>
    /// 根據沖款類型篩選預收付類型
    /// 應收：顯示「預收」、「預收轉沖款」
    /// 應付：顯示「預付」、「預付轉沖款」
    /// </summary>
    private void FilterPrepaymentTypes()
    {
        if (AllPrepaymentTypes == null || !AllPrepaymentTypes.Any())
        {
            FilteredPrepaymentTypes = new List<PrepaymentType>();
            return;
        }
        
        if (SetoffType == SetoffType.AccountsReceivable)
        {
            // 應收帳款：顯示預收相關類型
            FilteredPrepaymentTypes = AllPrepaymentTypes
                .Where(pt => pt.Name.Contains("預收"))
                .ToList();
        }
        else if (SetoffType == SetoffType.AccountsPayable)
        {
            // 應付帳款：顯示預付相關類型
            FilteredPrepaymentTypes = AllPrepaymentTypes
                .Where(pt => pt.Name.Contains("預付"))
                .ToList();
        }
        else
        {
            FilteredPrepaymentTypes = new List<PrepaymentType>();
        }
    }
    
    private async Task LoadAvailablePrepaymentsAsync()
    {
        try
        {
            // 根據客戶或供應商載入可用的預收付款項
            if (CustomerId.HasValue && CustomerId.Value > 0)
            {
                AvailablePrepayments = await SetoffPrepaymentService.GetAvailableByCustomerIdAsync(CustomerId.Value);
            }
            else if (SupplierId.HasValue && SupplierId.Value > 0)
            {
                AvailablePrepayments = await SetoffPrepaymentService.GetAvailableBySupplierIdAsync(SupplierId.Value);
            }
            else
            {
                AvailablePrepayments = new List<SetoffPrepayment>();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入可用預收付款項失敗：{ex.Message}");
            AvailablePrepayments = new List<SetoffPrepayment>();
        }
    }

    private void LoadExistingPrepayments()
    {
        if (ExistingPrepayments?.Any() == true)
        {
            // 編輯模式：載入已存在的預收付款項記錄
            PrepaymentItems = ExistingPrepayments.Select(prepayment => new SetoffPrepaymentItem
            {
                Id = prepayment.Id,
                PrepaymentTypeId = prepayment.PrepaymentTypeId,
                SourcePrepaymentId = null, 
                SourceDocumentCode = prepayment.SourceDocumentCode,
                Amount = prepayment.Amount,
                UsedAmount = prepayment.UsedAmount,
                ExistingPrepayment = prepayment
            }).ToList();
        }
        else
        {
            // 新增模式：初始化為空列表
            PrepaymentItems = new List<SetoffPrepaymentItem>();
        }
    }

    // ===== InteractiveTable 欄位定義 =====
    private List<InteractiveColumnDefinition> GetPrepaymentColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>
        {
            new()
            {
                Title = "預收付類型",
                PropertyName = nameof(SetoffPrepaymentItem.PrepaymentTypeId),
                ColumnType = InteractiveColumnType.Select,
                Width = "180px",
                IsRequired = true,
                Options = new List<InteractiveSelectOption> 
                { 
                    new InteractiveSelectOption { Value = 0, Text = "請選擇類型.." } 
                }
                .Concat((FilteredPrepaymentTypes ?? new List<PrepaymentType>()).Select(pt => new InteractiveSelectOption
                { 
                    Value = pt.Id, 
                    Text = pt.Name 
                })).ToList(),
                OnSelectionChanged = EventCallback.Factory.Create<(object, object?)>(this, async args =>
                {
                    var (itemObj, value) = args;
                    var item = (SetoffPrepaymentItem)itemObj;
                    var wasEmpty = IsEmptyRow(item);
                    
                    if (value != null && int.TryParse(value.ToString(), out int typeId) && typeId > 0)
                    {
                        item.PrepaymentTypeId = typeId;
                        
                        // 判斷是否需要顯示來源單號欄位
                        var selectedType = FilteredPrepaymentTypes!.FirstOrDefault(pt => pt.Id == typeId);
                        if (selectedType != null && !IsTransferType(selectedType.Name))
                        {
                            // 非轉沖款類型：清空來源相關欄位，設定來源單號為沖款單號
                            item.SourcePrepaymentId = null;
                            item.SourceDocumentCode = SetoffDocumentNumber ?? string.Empty;
                            item.Amount = 0;
                        }
                    }
                    else
                    {
                        item.PrepaymentTypeId = null;
                        item.SourcePrepaymentId = null;
                        item.SourceDocumentCode = string.Empty;
                        item.Amount = 0;
                        item.UsedAmount = 0;
                    }
                    
                    // 使用 AutoEmptyRowHelper 處理自動空行
                    AutoEmptyRowHelper.For<SetoffPrepaymentItem>.HandleInputChangeAdvanced(
                        PrepaymentItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, null, SetoffDocumentId ?? 0);
                    
                    await NotifyPrepaymentsChanged();
                    StateHasChanged();
                })
            },

            new()
            {
                Title = "來源單號",
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "250px",
                CustomTemplate = item =>
                {
                    var prepaymentItem = (SetoffPrepaymentItem)item;
                    
                    // 檢查是否為轉沖款類型
                    if (!prepaymentItem.PrepaymentTypeId.HasValue)
                        return @<span class="text-muted">-</span>;
                    
                    var selectedType = FilteredPrepaymentTypes!.FirstOrDefault(pt => pt.Id == prepaymentItem.PrepaymentTypeId.Value);
                    if (selectedType == null || !IsTransferType(selectedType.Name))
                        return @<span class="text-muted">-</span>;
                    
                    // 只有轉沖款類型才顯示下拉選單
                    var options = new List<InteractiveSelectOption> 
                    { 
                        new InteractiveSelectOption { Value = 0, Text = "請選擇預收付款項.." } 
                    }
                    .Concat(AvailablePrepayments.Select(p => new InteractiveSelectOption
                    { 
                        Value = p.Id, 
                        Text = $"{p.SourceDocumentCode} (可用餘額: {p.AvailableBalance:N2})" 
                    })).ToList();
                    
                    var selectedValue = prepaymentItem.SourcePrepaymentId ?? 0;
                    
                    return @<select class="form-select form-select-sm" 
                                    value="@selectedValue"
                                    disabled="@IsReadOnly"
                                    @onchange="@(async e => await OnSourcePrepaymentChanged(prepaymentItem, e.Value?.ToString()))">
                        @foreach (var option in options)
                        {
                            <option value="@option.Value" selected="@(option.Value.Equals(selectedValue))">@option.Text</option>
                        }
                    </select>;
                }
            },
            new()
            {
                Title = "總金額",
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CustomTemplate = item =>
                {
                    var prepaymentItem = (SetoffPrepaymentItem)item;
                    
                    // 檢查是否為轉沖款類型
                    if (!prepaymentItem.PrepaymentTypeId.HasValue)
                        return @<span class="text-muted">-</span>;
                    
                    var selectedType = FilteredPrepaymentTypes!.FirstOrDefault(pt => pt.Id == prepaymentItem.PrepaymentTypeId.Value);
                    if (selectedType == null || !IsTransferType(selectedType.Name))
                        return @<span class="text-muted">-</span>;
                    
                    // 只有轉沖款類型才顯示來源的總金額
                    var sourcePrepayment = AvailablePrepayments.FirstOrDefault(p => p.Id == prepaymentItem.SourcePrepaymentId);
                    var amount = sourcePrepayment?.Amount ?? 0;
                    
                    return @<span class="text-muted">@amount.ToString("N2")</span>;
                }
            },
            new()
            {
                Title = "可用餘額",
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CustomTemplate = item =>
                {
                    var prepaymentItem = (SetoffPrepaymentItem)item;
                    
                    // 檢查是否為轉沖款類型
                    if (!prepaymentItem.PrepaymentTypeId.HasValue)
                        return @<span class="text-muted">-</span>;
                    
                    var selectedType = FilteredPrepaymentTypes!.FirstOrDefault(pt => pt.Id == prepaymentItem.PrepaymentTypeId.Value);
                    if (selectedType == null || !IsTransferType(selectedType.Name))
                        return @<span class="text-muted">-</span>;
                    
                    var sourcePrepayment = AvailablePrepayments.FirstOrDefault(p => p.Id == prepaymentItem.SourcePrepaymentId);
                    var availableBalance = sourcePrepayment?.AvailableBalance ?? 0;
                    
                    return @<span class="text-primary fw-bold">@availableBalance.ToString("N2")</span>;
                }
            },
            new()
            {
                Title = "金額",
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "150px",
                CustomTemplate = item =>
                {
                    var prepaymentItem = (SetoffPrepaymentItem)item;
                    
                    // 檢查是否為轉沖款類型
                    bool isTransferType = false;
                    if (prepaymentItem.PrepaymentTypeId.HasValue)
                    {
                        var selectedType = FilteredPrepaymentTypes!.FirstOrDefault(pt => pt.Id == prepaymentItem.PrepaymentTypeId.Value);
                        isTransferType = selectedType != null && IsTransferType(selectedType.Name);
                    }
                    
                    // 根據類型決定顯示的值
                    var displayValue = isTransferType ? prepaymentItem.UsedAmount : prepaymentItem.Amount;
                    
                    return @<input type="number" 
                                   class="form-control form-control-sm text-end" 
                                   value="@(displayValue == 0 ? "" : displayValue.ToString("F0"))" 
                                   onkeydown="if(['e','E','+','-'].includes(event.key)) event.preventDefault();"
                                   disabled="@IsReadOnly"
                                   step="1"
                                   min="0"
                                   placeholder=""
                                   @oninput="@(e => OnAmountInput(prepaymentItem, e.Value?.ToString()))" />;
                }
            }
        };

        return columns;
    }
    
    /// <summary>
    /// 判斷是否為轉沖款類型（預收轉沖款、預付轉沖款）
    /// </summary>
    private bool IsTransferType(string typeName)
    {
        return typeName.Contains("轉沖款");
    }
    
    /// <summary>
    /// 處理來源預收付款項變更
    /// </summary>
    private async Task OnSourcePrepaymentChanged(SetoffPrepaymentItem item, string? value)
    {
        if (value != null && int.TryParse(value, out int prepaymentId) && prepaymentId > 0)
        {
            item.SourcePrepaymentId = prepaymentId;
            
            // 自動帶入來源預收付款項的資訊
            var selectedPrepayment = AvailablePrepayments.FirstOrDefault(p => p.Id == prepaymentId);
            if (selectedPrepayment != null)
            {
                item.SourceDocumentCode = selectedPrepayment.SourceDocumentCode;
                // ✅ 轉沖款類型：不需要設定 Amount，只需要設定 UsedAmount
                item.UsedAmount = selectedPrepayment.AvailableBalance;
            }
        }
        else
        {
            item.SourcePrepaymentId = null;
            item.SourceDocumentCode = string.Empty;
            item.Amount = 0;
            item.UsedAmount = 0;
        }
        
        await NotifyPrepaymentsChanged();
        StateHasChanged();
    }

    // ===== 事件處理方法 =====
    private async Task HandleRemovePrepaymentRecord(SetoffPrepaymentItem item)
    {
        if (IsReadOnly) return;
        
        // 使用 AutoEmptyRowHelper 處理移除，自動確保空行
        AutoEmptyRowHelper.For<SetoffPrepaymentItem>.HandleItemRemove(
            PrepaymentItems, item, IsEmptyRow, CreateEmptyItem, null, SetoffDocumentId ?? 0);
        
        await NotificationService.ShowInfoAsync("已移除預收付款項記錄");
        await NotifyPrepaymentsChanged();
        StateHasChanged();
    }

    private async Task OnAmountInput(SetoffPrepaymentItem item, string? value)
    {
        var wasEmpty = IsEmptyRow(item);
        
        // 判斷是否為轉沖款類型
        bool isTransferType = false;
        if (item.PrepaymentTypeId.HasValue)
        {
            var selectedType = FilteredPrepaymentTypes.FirstOrDefault(pt => pt.Id == item.PrepaymentTypeId.Value);
            isTransferType = selectedType != null && IsTransferType(selectedType.Name);
        }
        
        if (decimal.TryParse(value, out var amount))
        {
            if (isTransferType)
            {
                // 轉沖款類型：輸入的是 UsedAmount，需檢查不能超過可用餘額
                var sourcePrepayment = AvailablePrepayments.FirstOrDefault(p => p.Id == item.SourcePrepaymentId);
                if (sourcePrepayment != null)
                {
                    if (amount > sourcePrepayment.AvailableBalance)
                    {
                        await NotificationService.ShowWarningAsync($"使用金額不能超過可用餘額 {sourcePrepayment.AvailableBalance:N2}");
                        item.UsedAmount = sourcePrepayment.AvailableBalance;
                    }
                    else if (amount < 0)
                    {
                        await NotificationService.ShowWarningAsync("使用金額不能小於 0");
                        item.UsedAmount = 0;
                    }
                    else
                    {
                        item.UsedAmount = amount;
                    }
                }
                else
                {
                    item.UsedAmount = amount;
                }
            }
            else
            {
                // 預收/預付類型：輸入的是 Amount
                if (amount < 0)
                {
                    await NotificationService.ShowWarningAsync("金額不能小於 0");
                    item.Amount = 0;
                }
                else
                {
                    item.Amount = amount;
                }
            }
        }
        else if (string.IsNullOrWhiteSpace(value))
        {
            // 如果輸入為空白，設為0
            if (isTransferType)
            {
                item.UsedAmount = 0;
            }
            else
            {
                item.Amount = 0;
            }
        }
        
        // 使用 AutoEmptyRowHelper 處理自動空行
        AutoEmptyRowHelper.For<SetoffPrepaymentItem>.HandleInputChangeAdvanced(
            PrepaymentItems, item, IsEmptyRow, CreateEmptyItem, wasEmpty, null, SetoffDocumentId ?? 0);
        
        await NotifyPrepaymentsChanged();
        StateHasChanged();
    }

    private async Task NotifyPrepaymentsChanged()
    {
        // 只傳遞非空行的預收付款項記錄
        var prepayments = PrepaymentItems
            .Where(item => !IsEmptyRow(item))
            .Select(item =>
            {
                // 如果是轉沖款類型，從 AvailablePrepayments 取得資料
                if (item.SourcePrepaymentId.HasValue && item.SourcePrepaymentId.Value > 0)
                {
                    var sourcePrepayment = AvailablePrepayments.FirstOrDefault(p => p.Id == item.SourcePrepaymentId);
                    if (sourcePrepayment == null)
                        return null;
                    
                    // ✅ 轉沖款類型：只增加 UsedAmount，Amount 設為 0
                    return new SetoffPrepayment
                    {
                        Id = item.ExistingPrepayment?.Id ?? 0,
                        SetoffDocumentId = SetoffDocumentId ?? 0,
                        PrepaymentTypeId = item.PrepaymentTypeId ?? 0,
                        SourceDocumentCode = sourcePrepayment.SourceDocumentCode,
                        Amount = 0,  // 轉沖款類型：Amount 為 0
                        UsedAmount = item.UsedAmount,  // 只記錄使用金額
                        CustomerId = sourcePrepayment.CustomerId,
                        SupplierId = sourcePrepayment.SupplierId
                    };
                }
                else
                {
                    // ✅ 預收/預付類型：只增加 Amount，UsedAmount 設為 0
                    return new SetoffPrepayment
                    {
                        Id = item.ExistingPrepayment?.Id ?? 0,
                        SetoffDocumentId = SetoffDocumentId ?? 0,
                        PrepaymentTypeId = item.PrepaymentTypeId ?? 0,
                        SourceDocumentCode = item.SourceDocumentCode,
                        Amount = item.Amount,  // 預收/預付類型：只記錄 Amount
                        UsedAmount = 0,  // UsedAmount 為 0
                        CustomerId = CustomerId,
                        SupplierId = SupplierId
                    };
                }
            })
            .Where(p => p != null)
            .Cast<SetoffPrepayment>()
            .ToList();

        await OnPrepaymentsChanged.InvokeAsync(prepayments);
    }

    // ===== 公開方法（供父組件調用）=====
    
    /// <summary>
    /// 取得總使用金額
    /// </summary>
    public decimal GetTotalUsedAmount() => TotalUsedAmount;

    /// <summary>
    /// 驗證預收付款項記錄
    /// </summary>
    public async Task<bool> ValidateAsync()
    {
        var errors = new List<string>();
        
        var nonEmptyItems = PrepaymentItems.Where(item => !IsEmptyRow(item)).ToList();
        
        foreach (var item in nonEmptyItems)
        {
            // 檢查是否選擇了預收付類型
            if (!item.PrepaymentTypeId.HasValue || item.PrepaymentTypeId.Value <= 0)
            {
                errors.Add("請選擇預收付類型");
                continue;
            }
            
            var selectedType = FilteredPrepaymentTypes.FirstOrDefault(pt => pt.Id == item.PrepaymentTypeId.Value);
            if (selectedType != null && IsTransferType(selectedType.Name))
            {
                // 轉沖款類型：必須選擇來源預收付款項
                if (!item.SourcePrepaymentId.HasValue || item.SourcePrepaymentId.Value <= 0)
                {
                    errors.Add("轉沖款類型必須選擇來源預收付款項");
                    continue;
                }
                
                // 檢查使用金額是否超過可用餘額
                var sourcePrepayment = AvailablePrepayments.FirstOrDefault(p => p.Id == item.SourcePrepaymentId);
                if (sourcePrepayment != null && item.UsedAmount > sourcePrepayment.AvailableBalance)
                {
                    errors.Add($"來源單號 {sourcePrepayment.SourceDocumentCode} 的使用金額超過可用餘額");
                }
                
                // 轉沖款類型：檢查 UsedAmount 必須大於 0
                if (item.UsedAmount <= 0)
                {
                    errors.Add("使用金額必須大於 0");
                }
            }
            else if (selectedType != null)
            {
                // ✅ 預收/預付類型：檢查 Amount 必須大於 0
                if (item.Amount <= 0)
                {
                    errors.Add("金額必須大於 0");
                }
            }
        }
        
        if (errors.Any())
        {
            var errorMessage = string.Join("\n", errors);
            await NotificationService.ShowErrorAsync(errorMessage);
            return false;
        }
        
        return true;
    }

    // ===== 內部資料類別 =====
    private class SetoffPrepaymentItem : BaseEntity
    {
        public int? PrepaymentTypeId { get; set; }
        public int? SourcePrepaymentId { get; set; }
        public string SourceDocumentCode { get; set; } = string.Empty;
        public decimal Amount { get; set; }
        public decimal UsedAmount { get; set; }
        public SetoffPrepayment? ExistingPrepayment { get; set; }
    }
}
