@* Enhanced Detail 頁面動作按鈕組件 - 提供統一的編輯、啟用/停用、刪除和返回按鈕 *@
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="btn-group">
    @if (ShowEditButton)
    {
        <button class="btn btn-primary" @onclick="HandleEditClick" disabled="@IsLoading">
            <i class="@EditButtonIcon me-1"></i>
            @EditButtonText
        </button>
    }    @if (ShowToggleStatusButton && EntityStatus != null)
    {
        @if (EntityStatus.ToString() == "Active")
        {
            <button class="btn btn-warning" @onclick="HandleToggleStatusClick" disabled="@IsLoading">
                <i class="@DeactivateButtonIcon me-1"></i>
                @DeactivateButtonText
            </button>
        }
        else
        {
            <button class="btn btn-success" @onclick="HandleToggleStatusClick" disabled="@IsLoading">
                <i class="@ActivateButtonIcon me-1"></i>
                @ActivateButtonText
            </button>
        }
    }

    @if (ShowDeleteButton)
    {
        <button class="btn btn-danger" @onclick="HandleDeleteClick" disabled="@IsLoading">
            <i class="@DeleteButtonIcon me-1"></i>
            @DeleteButtonText
        </button>
    }

    @if (ShowPrintButton)
    {
        <button class="btn btn-info" @onclick="HandlePrintClick" disabled="@IsLoading">
            <i class="@PrintButtonIcon me-1"></i>
            @PrintButtonText
        </button>
    }

    @if (ShowBackButton)
    {
        <button class="btn btn-outline-primary" @onclick="HandleBackClick" disabled="@IsLoading">
            <i class="@BackButtonIcon me-1"></i>
            @BackButtonText
        </button>
    }

    @if (CustomButtons != null)
    {
        @CustomButtons
    }
</div>

@code {
    // 按鈕顯示控制
    [Parameter] public bool ShowEditButton { get; set; } = true;
    [Parameter] public bool ShowToggleStatusButton { get; set; } = true;
    [Parameter] public bool ShowDeleteButton { get; set; } = true;
    [Parameter] public bool ShowPrintButton { get; set; } = true;
    [Parameter] public bool ShowBackButton { get; set; } = true;

    // 按鈕文字自定義
    [Parameter] public string EditButtonText { get; set; } = "編輯";
    [Parameter] public string ActivateButtonText { get; set; } = "啟用";
    [Parameter] public string DeactivateButtonText { get; set; } = "停用";
    [Parameter] public string DeleteButtonText { get; set; } = "刪除";
    [Parameter] public string PrintButtonText { get; set; } = "列印";
    [Parameter] public string BackButtonText { get; set; } = "返回";

    // 按鈕圖示自定義
    [Parameter] public string EditButtonIcon { get; set; } = "bi bi-pencil";
    [Parameter] public string ActivateButtonIcon { get; set; } = "bi bi-power";
    [Parameter] public string DeactivateButtonIcon { get; set; } = "bi bi-power";
    [Parameter] public string DeleteButtonIcon { get; set; } = "bi bi-trash";
    [Parameter] public string PrintButtonIcon { get; set; } = "bi bi-printer";
    [Parameter] public string BackButtonIcon { get; set; } = "bi bi-arrow-left";    
    
    // 實體狀態
    [Parameter] public object? EntityStatus { get; set; }

    // 載入狀態
    [Parameter] public bool IsLoading { get; set; } = false;    
    
    // 新增：通用參數化操作
    [Parameter] public string? EntityName { get; set; }
    [Parameter] public string? EntityId { get; set; }
    [Parameter] public string? EntityDisplayName { get; set; }
    [Parameter] public string? ListRoute { get; set; }
    [Parameter] public string? EditRoute { get; set; }
    [Parameter] public string? DeleteConfirmMessage { get; set; }
    [Parameter] public object? EntityService { get; set; }
    
    // 新增：服務方法類型
    [Parameter] public Type? ServiceType { get; set; }

    // 事件處理器（用於Alert顯示和重新載入）
    [Parameter] public EventCallback<(string message, string type)> OnShowAlert { get; set; }
    [Parameter] public EventCallback OnReloadData { get; set; }

    // 原有的事件回調（向下相容）
    [Parameter] public EventCallback OnEditClick { get; set; }
    [Parameter] public EventCallback OnToggleStatusClick { get; set; }
    [Parameter] public EventCallback OnDeleteClick { get; set; }
    [Parameter] public EventCallback OnPrintClick { get; set; }
    [Parameter] public EventCallback OnBackClick { get; set; }

    // 自定義按鈕
    [Parameter] public RenderFragment? CustomButtons { get; set; }

    // 事件處理方法
    private async Task HandleEditClick()
    {
        // 新增：如果提供了路由參數，使用通用邏輯
        if (!string.IsNullOrEmpty(EditRoute) && !string.IsNullOrEmpty(EntityId))
        {
            Navigation.NavigateTo($"{EditRoute}/{EntityId}");
        }
        // 否則使用原有的回調方式（向下相容）
        else if (OnEditClick.HasDelegate)
        {
            await OnEditClick.InvokeAsync();
        }
    }    private async Task HandleToggleStatusClick()
    {
        // 新增：通用狀態切換邏輯
        if (!string.IsNullOrEmpty(EntityId) && EntityService != null)
        {
            try
            {
                // 使用反射調用服務的 ToggleStatusAsync 方法
                var toggleMethod = EntityService.GetType().GetMethod("ToggleStatusAsync");
                if (toggleMethod != null)
                {
                    var entityId = int.Parse(EntityId);
                    var task = (Task)toggleMethod.Invoke(EntityService, new object[] { entityId })!;
                    await task;
                    
                    // 獲取結果
                    var resultProperty = task.GetType().GetProperty("Result");
                    if (resultProperty != null)
                    {
                        var result = resultProperty.GetValue(task);
                        var isSuccessProperty = result?.GetType().GetProperty("IsSuccess");
                        var errorMessageProperty = result?.GetType().GetProperty("ErrorMessage");
                        
                        if (isSuccessProperty != null && (bool)isSuccessProperty.GetValue(result)!)
                        {
                            var statusText = EntityStatus?.ToString() == "Active" ? "停用" : "啟用";
                            if (OnShowAlert.HasDelegate)
                            {
                                await OnShowAlert.InvokeAsync(($"{EntityName}已{statusText}", "success"));
                            }
                            
                            // 重新載入數據
                            if (OnReloadData.HasDelegate)
                            {
                                await OnReloadData.InvokeAsync();
                            }
                        }
                        else
                        {
                            var errorMessage = errorMessageProperty?.GetValue(result)?.ToString() ?? "未知錯誤";
                            if (OnShowAlert.HasDelegate)
                            {
                                await OnShowAlert.InvokeAsync(($"狀態更新失敗：{errorMessage}", "danger"));
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (OnShowAlert.HasDelegate)
                {
                    await OnShowAlert.InvokeAsync(($"狀態更新失敗：{ex.Message}", "danger"));
                }
            }
        }
        // 否則使用原有的回調方式（向下相容）
        else if (OnToggleStatusClick.HasDelegate)
        {
            await OnToggleStatusClick.InvokeAsync();
        }
    }    private async Task HandleDeleteClick()
    {
        // 新增：通用刪除邏輯
        if (!string.IsNullOrEmpty(EntityName) && !string.IsNullOrEmpty(EntityDisplayName))
        {
            var message = !string.IsNullOrEmpty(DeleteConfirmMessage) 
                ? DeleteConfirmMessage 
                : $"確定要刪除{EntityName}「{EntityDisplayName}」嗎？這個操作無法復原。";
            
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", message);
            
            if (confirmed && !string.IsNullOrEmpty(EntityId) && EntityService != null)
            {
                try
                {
                    // 使用反射調用服務的 DeleteAsync 方法
                    var deleteMethod = EntityService.GetType().GetMethod("DeleteAsync");
                    if (deleteMethod != null)
                    {
                        var entityId = int.Parse(EntityId);
                        var task = (Task)deleteMethod.Invoke(EntityService, new object[] { entityId })!;
                        await task;
                        
                        // 獲取結果
                        var resultProperty = task.GetType().GetProperty("Result");
                        if (resultProperty != null)
                        {
                            var result = resultProperty.GetValue(task);
                            var isSuccessProperty = result?.GetType().GetProperty("IsSuccess");
                            var errorMessageProperty = result?.GetType().GetProperty("ErrorMessage");
                            
                            if (isSuccessProperty != null && (bool)isSuccessProperty.GetValue(result)!)
                            {
                                if (OnShowAlert.HasDelegate)
                                {
                                    await OnShowAlert.InvokeAsync(($"{EntityName}已刪除", "success"));
                                }
                                
                                // 延遲後導航到列表頁面
                                await Task.Delay(1000);
                                if (!string.IsNullOrEmpty(ListRoute))
                                {
                                    Navigation.NavigateTo(ListRoute);
                                }
                            }
                            else
                            {
                                var errorMessage = errorMessageProperty?.GetValue(result)?.ToString() ?? "未知錯誤";
                                if (OnShowAlert.HasDelegate)
                                {
                                    await OnShowAlert.InvokeAsync(($"刪除失敗：{errorMessage}", "danger"));
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    if (OnShowAlert.HasDelegate)
                    {
                        await OnShowAlert.InvokeAsync(($"刪除失敗：{ex.Message}", "danger"));
                    }
                }
            }
        }
        // 否則使用原有的回調方式（向下相容）
        else if (OnDeleteClick.HasDelegate)
        {
            await OnDeleteClick.InvokeAsync();
        }
    }

    private async Task HandlePrintClick()
    {
        if (OnPrintClick.HasDelegate)
        {
            await OnPrintClick.InvokeAsync();
        }
    }

    private async Task HandleBackClick()
    {
        // 新增：如果提供了列表路由，直接導航
        if (!string.IsNullOrEmpty(ListRoute))
        {
            Navigation.NavigateTo(ListRoute);
        }
        // 否則使用原有的回調方式（向下相容）
        else if (OnBackClick.HasDelegate)
        {
            await OnBackClick.InvokeAsync();
        }
    }
}
