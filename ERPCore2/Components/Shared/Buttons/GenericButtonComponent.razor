@* 基礎按鈕組件 - 遵循設計原則使用深藍色主色調 *@
@using ERPCore2.Components.Shared.Buttons

<button class="btn @GetButtonClass()" 
        type="@(IsSubmit ? "submit" : Type)"
        title="@Title"
        disabled="@IsDisabled"
        @onclick="HandleClick">
    @if (!string.IsNullOrEmpty(IconClass))
    {
        <i class="@IconClass @(string.IsNullOrEmpty(Text) ? "" : "me-2")"></i>
    }
    @if (IsLoading)
    {
        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
    }
    @Text
    @ChildContent
</button>

@code {    
    [Parameter] public string Text { get; set; } = string.Empty;
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public ButtonVariant Variant { get; set; } = ButtonVariant.Primary;
    [Parameter] public ButtonSize Size { get; set; } = ButtonSize.Normal;
    [Parameter] public string Type { get; set; } = "button";
    [Parameter] public bool IsDisabled { get; set; } = false;
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public bool IsSubmit { get; set; } = false;
    [Parameter] public string IconClass { get; set; } = string.Empty;
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    private async Task HandleClick()
    {        
        try
        {
            if (OnClick.HasDelegate)
            {
                await OnClick.InvokeAsync();
            }
            else
            {
                Console.WriteLine("警告：OnClick 事件未設定");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ButtonComponent.HandleClick 發生錯誤: {ex.Message}");
            Console.WriteLine($"錯誤堆疊: {ex.StackTrace}");
        }
    }

    private string GetButtonClass()
    {
        var classes = new List<string>();
        
        // 基礎樣式
        switch (Variant)
        {
            case ButtonVariant.Primary:
                classes.Add("btn-primary");
                break;            
                case ButtonVariant.Secondary:
                classes.Add("btn-secondary");
                break;
            case ButtonVariant.Success:
                classes.Add("btn-success");
                break;
            case ButtonVariant.Warning:
                classes.Add("btn-warning");
                break;
            case ButtonVariant.Danger:
                classes.Add("btn-danger");
                break;
            case ButtonVariant.Info:
                classes.Add("btn-info");
                break;            
                case ButtonVariant.OutlinePrimary:
                classes.Add("btn-outline-primary");
                break;
                case ButtonVariant.OutlineSecondary:
                classes.Add("btn-outline-secondary");
                break;
            case ButtonVariant.OutlineWarning:
                classes.Add("btn-outline-warning");
                break;
            case ButtonVariant.OutlineDanger:
                classes.Add("btn-outline-danger");
                break;
            case ButtonVariant.OutlineInfo:
                classes.Add("btn-outline-info");
                break;
        }
        
        // 尺寸
        switch (Size)
        {
            case ButtonSize.Small:
                classes.Add("btn-sm");
                break;
            case ButtonSize.Large:
                classes.Add("btn-lg");
                break;
        }
          // 自定義樣式
        if (!string.IsNullOrEmpty(CssClass))
        {
            classes.Add(CssClass);
        }
        
        return string.Join(" ", classes);
    }
}
