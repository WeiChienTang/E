@* 基本資料顯示組件 - 通用且美觀的基本信息展示 *@
@using Microsoft.AspNetCore.Components.Rendering

@if (Fields?.Any() == true)
{
    <div class="card border-0 shadow-sm">
        @if (!string.IsNullOrEmpty(Title))
        {
            <div class="card-header bg-gradient bg-light border-0">
                <h6 class="mb-0 d-flex align-items-center">
                    @if (!string.IsNullOrEmpty(IconClass))
                    {
                        <i class="@IconClass @IconColor me-2"></i>
                    }
                    @Title
                    @if (ShowFieldCount)
                    {
                        <span class="badge bg-secondary ms-auto">@Fields.Count() 個欄位</span>
                    }
                </h6>
            </div>
        }
        <div class="card-body p-4">            
            <div class="row g-4">
                @foreach (var field in Fields.Where(f => ShouldShowField(f)))
                {
                    <div class="col-md-@(field.ColSize ?? DefaultColSize)">
                        <div class="d-flex align-items-start">
                            @if (!string.IsNullOrEmpty(field.IconClass))
                            {
                                <div class="flex-shrink-0">
                                    <div class="icon-box @(field.IconBgClass ?? "bg-primary bg-opacity-10") @(field.IconTextClass ?? "text-primary") rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                        <i class="@field.IconClass"></i>
                                    </div>
                                </div>
                            }
                            <div class="@(string.IsNullOrEmpty(field.IconClass) ? "" : "flex-grow-1 ms-3")">
                                <h6 class="@(field.IsPrimary ? "text-primary" : (field.IsSecondary ? "text-secondary" : "text-dark")) mb-1 @(field.LabelBold ? "fw-bold" : "")">
                                    @field.Label
                                    @if (field.IsRequired)
                                    {
                                        <span class="text-danger">*</span>
                                    }
                                </h6>                                <div class="@GetFieldValueClass(field)">
                                    @if (field.CustomContent != null)
                                    {
                                        @field.CustomContent
                                    }
                                    else
                                    {
                                        @RenderFieldValue(field)
                                    }
                                </div>
                                @if (!string.IsNullOrEmpty(field.Description))
                                {
                                    <div class="text-muted small mt-1">
                                        <i class="fas fa-info-circle me-1"></i>
                                        @field.Description
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            @* 額外內容區域 *@
            @if (AdditionalContent != null)
            {
                <hr class="my-4">
                <div class="row">
                    <div class="col-12">
                        @AdditionalContent
                    </div>
                </div>
            }

            @* 統計信息 *@
            @if (ShowStatistics)
            {
                <hr class="my-4">
                <div class="row">
                    <div class="col-12">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <i class="fas fa-chart-bar text-info me-2"></i>
                                <span class="text-muted">統計信息</span>
                            </div>
                            <div class="text-end">
                                <small class="text-muted">
                                    總欄位數：@Fields.Count() |
                                    已填入：@Fields.Count(f => !IsFieldEmpty(f)) |
                                    空值：@Fields.Count(f => IsFieldEmpty(f))
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="text-muted p-5 text-center">
        <i class="fas fa-exclamation-circle fa-3x mb-3 d-block text-secondary"></i>
        <h5>無資料可顯示</h5>
        <p class="mb-0">@(EmptyMessage ?? "目前沒有任何資料可以顯示")</p>
    </div>
}

@code {
    // 基本參數
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? IconClass { get; set; }
    [Parameter] public string IconColor { get; set; } = "text-primary";
    [Parameter] public IEnumerable<BasicInfoField>? Fields { get; set; }
    [Parameter] public RenderFragment? AdditionalContent { get; set; }

    // 顯示選項
    [Parameter] public bool ShowFieldCount { get; set; } = false;
    [Parameter] public bool ShowStatistics { get; set; } = false;
    [Parameter] public int DefaultColSize { get; set; } = 3;
    [Parameter] public string? EmptyMessage { get; set; }

    // 樣式選項
    [Parameter] public string CardClass { get; set; } = "";
    [Parameter] public string HeaderClass { get; set; } = "";
    [Parameter] public string BodyClass { get; set; } = "";    // 輔助方法
    private bool ShouldShowField(BasicInfoField field)
    {
        if (!field.IsVisible) return false;
        if (field.VisibilityCondition != null) return field.VisibilityCondition();
        return true;
    }    private RenderFragment RenderFieldValue(BasicInfoField field) => __builder =>
    {
        switch (field.Type)
        {
            case FieldType.Badge:
                RenderBadge(field, __builder);
                break;
            case FieldType.Status:
                RenderStatusBadge(field, __builder);
                break;
            case FieldType.Link:
                RenderLink(field, __builder);
                break;
            case FieldType.Progress:
                RenderProgress(field, __builder);
                break;
            case FieldType.Rating:
                RenderRating(field, __builder);
                break;
            case FieldType.ColorSwatch:
                RenderColorSwatch(field, __builder);
                break;
            case FieldType.Image:
                RenderImage(field, __builder);
                break;
            case FieldType.List:
                RenderList(field, __builder);
                break;
            case FieldType.Custom:
                if (field.CustomContent != null)
                    __builder.AddContent(0, field.CustomContent);
                break;
            default:
                RenderSimpleValue(field, __builder);
                break;
        }
    };

    private void RenderSimpleValue(BasicInfoField field, RenderTreeBuilder builder)
    {
        if (field.Format == FieldFormat.Code)
        {
            builder.OpenElement(0, "code");
            builder.AddAttribute(1, "class", "text-muted");
            builder.AddContent(2, GetFormattedValue(field));
            builder.CloseElement();
        }
        else if (field.Format == FieldFormat.MultiLine)
        {
            var lines = GetFormattedValue(field).Split('\n');
            for (int i = 0; i < lines.Length; i++)
            {
                if (i > 0)
                {
                    builder.OpenElement(i * 2, "br");
                    builder.CloseElement();
                }
                builder.AddContent(i * 2 + 1, lines[i]);
            }
        }
        else if (field.Format == FieldFormat.Email)
        {
            var email = GetFormattedValue(field);
            if (!string.IsNullOrEmpty(email) && email != "-")
            {
                builder.OpenElement(0, "a");
                builder.AddAttribute(1, "href", $"mailto:{email}");
                builder.AddAttribute(2, "class", "text-decoration-none");
                builder.AddContent(3, email);
                builder.CloseElement();
            }
            else
            {
                builder.AddContent(0, email);
            }
        }
        else if (field.Format == FieldFormat.Phone)
        {
            var phone = GetFormattedValue(field);
            if (!string.IsNullOrEmpty(phone) && phone != "-")
            {
                builder.OpenElement(0, "a");
                builder.AddAttribute(1, "href", $"tel:{phone}");
                builder.AddAttribute(2, "class", "text-decoration-none");
                builder.AddContent(3, phone);
                builder.CloseElement();
            }
            else
            {
                builder.AddContent(0, phone);
            }
        }
        else if (field.Format == FieldFormat.Url)
        {
            var url = GetFormattedValue(field);
            if (!string.IsNullOrEmpty(url) && url != "-")
            {
                builder.OpenElement(0, "a");
                builder.AddAttribute(1, "href", url);
                builder.AddAttribute(2, "target", "_blank");
                builder.AddAttribute(3, "class", "text-decoration-none");
                builder.AddContent(4, url);
                builder.CloseElement();
            }
            else
            {
                builder.AddContent(0, url);
            }
        }
        else
        {
            builder.AddContent(0, GetFormattedValue(field));
        }
    }

    private void RenderBadge(BasicInfoField field, RenderTreeBuilder builder)
    {
        var badgeText = field.BadgeText ?? GetFormattedValue(field);
        
        builder.OpenElement(0, "span");
        builder.AddAttribute(1, "class", $"badge {field.BadgeClass}");
        
        if (!string.IsNullOrEmpty(field.BadgeIcon))
        {
            builder.OpenElement(2, "i");
            builder.AddAttribute(3, "class", $"{field.BadgeIcon} me-1");
            builder.CloseElement();
        }
        
        builder.AddContent(4, badgeText);
        builder.CloseElement();
    }

    private void RenderStatusBadge(BasicInfoField field, RenderTreeBuilder builder)
    {
        // 這裡需要根據實際的 StatusBadgeComponent 來實作
        // 暫時用簡單的 badge 代替
        if (field.Value != null)
        {
            builder.OpenElement(0, "span");
            builder.AddAttribute(1, "class", "badge bg-success");
            builder.AddContent(2, field.Value.ToString());
            builder.CloseElement();
        }
    }

    private void RenderLink(BasicInfoField field, RenderTreeBuilder builder)
    {
        var linkText = GetFormattedValue(field);
        var linkUrl = field.LinkUrl ?? linkText;
        
        if (!string.IsNullOrEmpty(linkUrl) && linkUrl != "-")
        {
            builder.OpenElement(0, "a");
            builder.AddAttribute(1, "href", linkUrl);
            builder.AddAttribute(2, "target", field.LinkTarget);
            builder.AddAttribute(3, "class", "text-decoration-none");
            builder.AddContent(4, linkText);
            builder.CloseElement();
        }
        else
        {
            builder.AddContent(0, linkText);
        }
    }

    private string GetFieldValueClass(BasicInfoField field)
    {
        var classes = new List<string>();
        
        if (field.IsPrimary)
            classes.Add("fw-bold text-primary");
        else if (field.IsSecondary)
            classes.Add("text-secondary");
            
        if (field.ValueBold)
            classes.Add("fw-bold");
            
        if (field.ValueLarge)
            classes.Add("fs-5");
        else if (field.ValueSmall)
            classes.Add("small");
            
        if (!string.IsNullOrEmpty(field.ValueClass))
            classes.Add(field.ValueClass);
        
        return string.Join(" ", classes);
    }    private string GetFieldDisplayValue(BasicInfoField field)
    {
        // 如果有自訂格式化函數，優先使用
        if (field.CustomFormatter != null)
            return field.CustomFormatter(field.Value) ?? (field.EmptyText ?? "-");
        
        if (field.Value == null || (field.Value is string str && string.IsNullOrEmpty(str)))
            return field.EmptyText ?? "-";
          // 處理特殊格式
        return field.Format switch
        {
            FieldFormat.Currency when field.Value is decimal currencyValue => $"NT$ {currencyValue:N2}",
            FieldFormat.CurrencyShort when field.Value is decimal currencyShortValue => $"${currencyShortValue:N0}",
            FieldFormat.Percentage when field.Value is decimal percentValue => $"{percentValue:P2}",
            FieldFormat.Date when field.Value is DateTime dateValue => dateValue.ToString("yyyy/MM/dd"),
            FieldFormat.DateTime when field.Value is DateTime dateTimeValue => dateTimeValue.ToString("yyyy/MM/dd HH:mm:ss"),
            FieldFormat.DateTimeShort when field.Value is DateTime dateTimeShortValue => dateTimeShortValue.ToString("yyyy/MM/dd HH:mm"),
            FieldFormat.DateOnly when field.Value is DateTime dateOnlyValue => dateOnlyValue.ToString("MM/dd"),
            FieldFormat.TimeOnly when field.Value is DateTime timeOnlyValue => timeOnlyValue.ToString("HH:mm"),
            FieldFormat.Boolean when field.Value is bool boolValue => boolValue ? "是" : "否",
            FieldFormat.BooleanIcon when field.Value is bool iconBoolValue => iconBoolValue ? "✓" : "✗",
            FieldFormat.Number when field.Value is decimal numberValue => numberValue.ToString("N2"),
            FieldFormat.Number when field.Value is int intValue => intValue.ToString("N0"),
            FieldFormat.NumberShort when field.Value is decimal shortNumberValue => FormatShortNumber(shortNumberValue),
            FieldFormat.Integer when field.Value is decimal integerValue => integerValue.ToString("N0"),
            FieldFormat.Integer when field.Value is int integerIntValue => integerIntValue.ToString("N0"),
            FieldFormat.FileSize when field.Value is long fileSizeValue => FormatFileSize(fileSizeValue),
            FieldFormat.Temperature when field.Value is decimal tempValue => $"{tempValue}°C",
            FieldFormat.Weight when field.Value is decimal weightValue => $"{weightValue} {field.Unit ?? "kg"}",
            FieldFormat.Density when field.Value is decimal densityValue => $"{densityValue} {field.Unit ?? "g/cm³"}",
            FieldFormat.JsonPretty when field.Value != null => FormatJson(field.Value.ToString()),
            _ => FormatWithPrefixSuffix(field.Value?.ToString() ?? "-", field.Prefix, field.Suffix)
        };
    }

    // 別名方法，保持向後相容
    private string GetFormattedValue(BasicInfoField field) => GetFieldDisplayValue(field);    private bool IsFieldEmpty(BasicInfoField field)
    {
        return field.Value == null || (field.Value is string str && string.IsNullOrEmpty(str));
    }

    // 新增的渲染方法
    private void RenderProgress(BasicInfoField field, RenderTreeBuilder builder)
    {
        var progressValue = field.ProgressValue ?? (field.Value as decimal?) ?? 0;
        var progressMax = field.ProgressMax ?? 100;
        var percentage = Math.Min(100, Math.Max(0, (progressValue / progressMax) * 100));
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "progress");
        builder.AddAttribute(2, "style", "height: 20px;");
        
        builder.OpenElement(3, "div");
        builder.AddAttribute(4, "class", $"progress-bar {field.ProgressClass}");
        builder.AddAttribute(5, "role", "progressbar");
        builder.AddAttribute(6, "style", $"width: {percentage}%");
        builder.AddAttribute(7, "aria-valuenow", progressValue.ToString());
        builder.AddAttribute(8, "aria-valuemin", "0");
        builder.AddAttribute(9, "aria-valuemax", progressMax.ToString());
        
        if (field.ShowProgressText)
        {
            builder.AddContent(10, $"{progressValue}/{progressMax}");
        }
        
        builder.CloseElement(); // progress-bar
        builder.CloseElement(); // progress
    }

    private void RenderRating(BasicInfoField field, RenderTreeBuilder builder)
    {
        var rating = field.RatingValue ?? (field.Value as int?) ?? 0;
        var maxRating = field.RatingMax ?? 5;
        
        for (int i = 1; i <= maxRating; i++)
        {
            builder.OpenElement(i, "i");
            builder.AddAttribute(i + 1, "class", i <= rating ? field.RatingStarClass : field.RatingEmptyClass);
            builder.AddAttribute(i + 2, "style", "color: #ffc107;");
            builder.CloseElement();
            
            if (i < maxRating)
            {
                builder.AddContent(i + 3, " ");
            }
        }
        
        builder.AddContent(maxRating + 1, $" ({rating}/{maxRating})");
    }

    private void RenderColorSwatch(BasicInfoField field, RenderTreeBuilder builder)
    {
        var color = field.ColorValue ?? field.Value?.ToString() ?? "#000000";
        
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "class", "d-flex align-items-center");
        
        // 顏色方塊
        builder.OpenElement(2, "div");
        builder.AddAttribute(3, "style", $"width: 30px; height: 20px; background-color: {color}; border: 1px solid #ccc; margin-right: 8px;");
        builder.CloseElement();
        
        // 顏色文字
        if (field.ShowColorText)
        {
            builder.AddContent(4, color);
        }
        
        builder.CloseElement();
    }

    private void RenderImage(BasicInfoField field, RenderTreeBuilder builder)
    {
        var imageUrl = field.ImageUrl ?? field.Value?.ToString();
        
        if (!string.IsNullOrEmpty(imageUrl))
        {
            builder.OpenElement(0, "img");
            builder.AddAttribute(1, "src", imageUrl);
            builder.AddAttribute(2, "alt", field.ImageAlt ?? field.Label);
            builder.AddAttribute(3, "class", field.ImageClass);
            
            var style = "";
            if (field.ImageMaxWidth.HasValue)
                style += $"max-width: {field.ImageMaxWidth}px; ";
            if (field.ImageMaxHeight.HasValue)
                style += $"max-height: {field.ImageMaxHeight}px; ";
                
            if (!string.IsNullOrEmpty(style))
                builder.AddAttribute(4, "style", style);
                
            builder.CloseElement();
        }
        else
        {
            builder.AddContent(0, field.EmptyText ?? "-");
        }
    }

    private void RenderList(BasicInfoField field, RenderTreeBuilder builder)
    {
        var items = field.ListItems ?? (field.Value as IEnumerable<string>);
        
        if (items?.Any() == true)
        {
            var tagName = field.NumberedList ? "ol" : "ul";
            
            builder.OpenElement(0, tagName);
            builder.AddAttribute(1, "class", field.ListClass);
            
            int index = 2;
            foreach (var item in items)
            {
                builder.OpenElement(index++, "li");
                if (!string.IsNullOrEmpty(field.ListItemClass))
                    builder.AddAttribute(index++, "class", field.ListItemClass);
                builder.AddContent(index++, item);
                builder.CloseElement();
            }
            
            builder.CloseElement();
        }
        else
        {
            builder.AddContent(0, field.EmptyText ?? "-");
        }
    }

    // 輔助格式化方法
    private string FormatShortNumber(decimal value)
    {
        if (value >= 1_000_000_000)
            return $"{value / 1_000_000_000:0.#}B";
        if (value >= 1_000_000)
            return $"{value / 1_000_000:0.#}M";
        if (value >= 1_000)
            return $"{value / 1_000:0.#}K";
        return value.ToString("0.#");
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private string FormatJson(string? json)
    {
        if (string.IsNullOrEmpty(json)) return "-";
        try
        {
            var obj = System.Text.Json.JsonSerializer.Deserialize<object>(json);
            return System.Text.Json.JsonSerializer.Serialize(obj, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            return json;
        }
    }

    private string FormatWithPrefixSuffix(string value, string? prefix, string? suffix)
    {
        var result = value;
        if (!string.IsNullOrEmpty(prefix))
            result = prefix + result;
        if (!string.IsNullOrEmpty(suffix))
            result = result + suffix;
        return result;
    }// 基本資料欄位類別
    public class BasicInfoField
    {
        public string Label { get; set; } = string.Empty;
        public object? Value { get; set; }
        public RenderFragment? CustomContent { get; set; }
        
        // 欄位設定
        public int? ColSize { get; set; }
        public string? EmptyText { get; set; } = "-";
        public string? Description { get; set; }
        public FieldFormat Format { get; set; } = FieldFormat.Text;
        public FieldType Type { get; set; } = FieldType.Simple;
        
        // 標籤樣式
        public bool IsPrimary { get; set; } = false;
        public bool IsSecondary { get; set; } = false;
        public bool IsRequired { get; set; } = false;
        public bool LabelBold { get; set; } = false;
        
        // 值樣式
        public bool ValueBold { get; set; } = false;
        public bool ValueLarge { get; set; } = false;
        public bool ValueSmall { get; set; } = false;
        public string? ValueClass { get; set; }
        
        // 圖示設定
        public string? IconClass { get; set; }
        public string? IconBgClass { get; set; }
        public string? IconTextClass { get; set; }
        
        // 徽章設定 (用於 Badge 類型)
        public string? BadgeText { get; set; }
        public string? BadgeClass { get; set; } = "bg-secondary";
        public string? BadgeIcon { get; set; }
        
        // 連結設定 (用於 Link 類型)
        public string? LinkUrl { get; set; }
        public string? LinkTarget { get; set; } = "_self";
        
        // 條件顯示
        public bool IsVisible { get; set; } = true;
        public Func<bool>? VisibilityCondition { get; set; }
          // 格式化函數
        public Func<object?, string>? CustomFormatter { get; set; }
        
        // 進度條設定 (用於 Progress 類型)
        public decimal? ProgressValue { get; set; }
        public decimal? ProgressMax { get; set; } = 100;
        public string? ProgressClass { get; set; } = "bg-primary";
        public bool ShowProgressText { get; set; } = true;
        
        // 評分設定 (用於 Rating 類型)
        public int? RatingValue { get; set; }
        public int? RatingMax { get; set; } = 5;
        public string? RatingStarClass { get; set; } = "fas fa-star";
        public string? RatingEmptyClass { get; set; } = "far fa-star";
        
        // 顏色設定 (用於 ColorSwatch 類型)
        public string? ColorValue { get; set; }
        public bool ShowColorText { get; set; } = true;
        
        // 圖片設定 (用於 Image 類型)
        public string? ImageUrl { get; set; }
        public string? ImageAlt { get; set; }
        public string? ImageClass { get; set; } = "img-thumbnail";
        public int? ImageMaxWidth { get; set; } = 100;
        public int? ImageMaxHeight { get; set; } = 100;
        
        // 清單設定 (用於 List 類型)
        public IEnumerable<string>? ListItems { get; set; }
        public string? ListClass { get; set; } = "list-unstyled";
        public string? ListItemClass { get; set; }
        public bool NumberedList { get; set; } = false;
        
        // 數值單位
        public string? Unit { get; set; }
        public string? Prefix { get; set; }
        public string? Suffix { get; set; }
    }    public enum FieldFormat
    {
        Text,           // 一般文字
        Currency,       // 貨幣格式 (NT$ 1,234.56)
        CurrencyShort,  // 簡短貨幣格式 ($1,234)
        Percentage,     // 百分比格式 (12.34%)
        Date,           // 日期格式 (yyyy/MM/dd)
        DateTime,       // 日期時間格式 (yyyy/MM/dd HH:mm:ss)
        DateTimeShort,  // 短日期時間格式 (yyyy/MM/dd HH:mm)
        DateOnly,       // 僅日期格式 (MM/dd)
        TimeOnly,       // 僅時間格式 (HH:mm)
        Code,           // 程式碼格式
        Number,         // 數字格式 (1,234.56)
        NumberShort,    // 簡短數字格式 (1.2K, 1.5M)
        Integer,        // 整數格式 (1,234)
        Boolean,        // 布林值 (是/否)
        BooleanIcon,    // 布林值圖示 (✓/✗)
        Email,          // 電子郵件
        Phone,          // 電話號碼
        Url,            // 網址
        MultiLine,      // 多行文字
        FileSize,       // 檔案大小 (1.2 MB)
        Temperature,    // 溫度 (25°C)
        Weight,         // 重量 (1.5 kg)
        Density,        // 密度 (1.2 g/cm³)
        JsonPretty      // 格式化JSON
    }

    public enum FieldType
    {
        Simple,         // 簡單欄位
        Badge,          // 徽章顯示
        Status,         // 狀態徽章 (使用 StatusBadgeComponent)
        Custom,         // 自訂內容
        Link,           // 連結
        Image,          // 圖片
        List,           // 清單
        Progress,       // 進度條
        Rating,         // 評分
        ColorSwatch,    // 顏色樣本
        QRCode,         // QR碼
        Barcode         // 條碼
    }
}
