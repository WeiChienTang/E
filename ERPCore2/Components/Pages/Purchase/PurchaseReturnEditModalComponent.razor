@* 進貨退出編輯模態組件 *@
@using Microsoft.AspNetCore.Components.Rendering
@inject IPurchaseReturnService PurchaseReturnService
@inject IPurchaseReturnDetailService PurchaseReturnDetailService
@inject ISupplierService SupplierService
@inject IPurchaseReceivingService PurchaseReceivingService
@inject IProductService ProductService
@inject INotificationService NotificationService
@inject ActionButtonHelper ActionButtonHelper
@inject ISystemParameterService SystemParameterService

<GenericEditModalComponent TEntity="PurchaseReturn" 
                          TService="IPurchaseReturnService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@PurchaseReturnId"
                          Service="@PurchaseReturnService"
                          EntityName="進貨退出"
                          EntityNamePlural="進貨退出"
                          ModalTitle="@(PurchaseReturnId.HasValue ? "編輯進貨退出" : "新增進貨退出")"
                          Size="GenericEditModalComponent<PurchaseReturn, IPurchaseReturnService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadPurchaseReturnData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="false"
                          CustomValidator="@ValidatePurchaseReturnDetailsAsync"
                          SaveHandler="@SavePurchaseReturnWithDetails"
                          SaveSuccessMessage="@(PurchaseReturnId.HasValue ? "進貨退出更新成功" : "進貨退出新增成功")"
                          SaveFailureMessage="進貨退出儲存失敗"
                          RequiredPermission="PurchaseReturn.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          CustomModules="@GetCustomModules()" />

@* 廠商編輯 Modal *@
<SupplierEditModalComponent @ref="supplierEditModal"
                           IsVisible="@supplierModalManager.IsModalVisible"
                           IsVisibleChanged="@supplierModalManager.HandleModalVisibilityChangedAsync"
                           SupplierId="@supplierModalManager.SelectedEntityId"
                           PrefilledValues="@supplierModalManager.PrefilledValues"
                           OnSupplierSaved="@OnSupplierSavedWrapper"
                           OnCancel="@supplierModalManager.HandleModalCancelAsync" />

@code {
    // 參數
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? PurchaseReturnId { get; set; }
    [Parameter] public EventCallback<PurchaseReturn> OnPurchaseReturnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // 組件參考
    private GenericEditModalComponent<PurchaseReturn, IPurchaseReturnService>? editModalComponent;

    // 表單欄位和區塊
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();

    // 相關資料
    private List<Supplier> suppliers = new();
    private List<PurchaseReceiving> purchaseReceivings = new();
    private List<Product> products = new();
    
    // ===== 篩選狀態 =====
    private int? filterProductId = null;
    private int? filterPurchaseReceivingId = null;
    
    // ===== 退貨明細 =====
    private List<PurchaseReturnDetail> purchaseReturnDetails = new();
    private PurchaseReturnDetailManagerComponent? purchaseReturnDetailManager;
    
    // Modal 管理器
    private SupplierEditModalComponent? supplierEditModal;
    private RelatedEntityModalManager<Supplier> supplierModalManager = default!;
    
    // ===== 系統參數 - 稅率快取（避免重複查詢資料庫） =====
    private decimal currentTaxRate = 5.0m; // 預設 5%，實際值會在初始化時從資料庫載入

    // ===== 生命週期 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeSupplierModalManager();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"初始化進貨退出編輯組件時發生錯誤：{ex.Message}");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (IsVisible)
            {
                await LoadAdditionalDataAsync();
                await InitializeFormFieldsAsync();
            }
            
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入進貨退出資料時發生錯誤：{ex.Message}");
        }
    }

    // ===== 事件處理 =====
    private async Task HandleSaveSuccess()
    {
        try
        {
            // 如果父組件需要知道進貨退出已儲存
            if (OnPurchaseReturnSaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnPurchaseReturnSaved.InvokeAsync(editModalComponent.Entity);
            }
            // 不需要手動關閉 Modal，GenericEditModalComponent 會處理
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理取消事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task CloseModal()
    {
        await IsVisibleChanged.InvokeAsync(false);
    }

    // ===== 資料載入 =====
    private async Task<PurchaseReturn?> LoadPurchaseReturnData()
    {
        try
        {
            if (!PurchaseReturnId.HasValue)
            {
                purchaseReturnDetails = new List<PurchaseReturnDetail>(); // 清空明細
                
                try
                {
                    var number = await GeneratePurchaseReturnNumberAsync();                    
                    return new PurchaseReturn
                    {
                        PurchaseReturnNumber = number,
                        ReturnDate = DateTime.Today,
                        Status = EntityStatus.Active
                    };
                }
                catch (Exception)
                {
                    throw;
                }
            }
            else
            {                
                if (PurchaseReturnService == null)
                {
                    return null;
                }
                
                var purchaseReturn = await PurchaseReturnService.GetWithDetailsAsync(PurchaseReturnId.Value);
                
                if (purchaseReturn != null)
                {
                    // 檢查明細
                    if (purchaseReturn.PurchaseReturnDetails == null)
                    {
                        purchaseReturnDetails = new List<PurchaseReturnDetail>();
                    }
                    else
                    {
                        // 使用硬刪除後不需要篩選 IsDeleted，因為已刪除的記錄不會存在於資料庫中
                        purchaseReturnDetails = purchaseReturn.PurchaseReturnDetails.ToList();
                    }
                    

                    // 檢查並設定預設值
                    if (purchaseReturn.ReturnDate == default(DateTime))
                    {
                        purchaseReturn.ReturnDate = DateTime.Today;
                    }
                    
                    if (purchaseReturn.Status == default(EntityStatus))
                    {
                        purchaseReturn.Status = EntityStatus.Active;
                    }
                    
                }
                else
                {
                    purchaseReturnDetails = new List<PurchaseReturnDetail>();
                }
                
                return purchaseReturn;
            }
        }
        catch (Exception)
        {            
            // 確保即使發生錯誤也要初始化明細列表
            purchaseReturnDetails = new List<PurchaseReturnDetail>();
            return null;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            
            await Task.WhenAll(
                LoadSuppliersAsync(),
                LoadPurchaseReceivingsAsync(),
                LoadProductsAsync()
            );
            
            // 一次性載入系統稅率（避免每次計算都查詢資料庫）
            try
            {
                currentTaxRate = await SystemParameterService.GetTaxRateAsync();
            }
            catch (Exception)
            {
                // 如果載入失敗，使用預設值 5%
                currentTaxRate = 5.0m;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入附加資料時發生錯誤：{ex.Message}");
        }
    }

    private async Task LoadSuppliersAsync()
    {
        try
        {
            suppliers = await SupplierService.GetAllAsync();
        }
        catch (Exception)
        {
            suppliers = new List<Supplier>();
        }
    }

    private async Task LoadPurchaseReceivingsAsync()
    {
        try
        {
            purchaseReceivings = await PurchaseReceivingService.GetAllAsync();
        }
        catch (Exception)
        {
            purchaseReceivings = new List<PurchaseReceiving>();
        }
    }

    private async Task LoadProductsAsync()
    {
        try
        {
            products = await ProductService.GetAllAsync();
        }
        catch (Exception)
        {
            products = new List<Product>();
        }
    }

    // ===== 表單設定 =====
    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(PurchaseReturn.PurchaseReturnNumber),
                    Label = "退回單號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入退回單號",
                    IsRequired = true,
                    MaxLength = 30,
                    Order = 1,
                    HelpText = "系統自動生成的唯一退回單號，也可手動修改"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.SupplierId),
                    Label = "篩選廠商",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇廠商",
                    IsRequired = true,
                    MinSearchLength = 0,
                    Order = 2,
                    HelpText = "輸入廠商名稱進行搜尋，或直接選擇",
                    ActionButtons = await GetSupplierActionButtonsAsync()
                },
                new()
                {
                    PropertyName = "FilterProductId", // 篩選用的虛擬欄位
                    Label = "篩選商品",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Order = 3,
                    Options = await GetFilterProductOptions(),
                    HelpText = "選擇特定商品進行篩選，或留空顯示所有商品"
                },
                new()
                {
                    PropertyName = "FilterPurchaseReceivingId", // 篩選用的虛擬欄位
                    Label = "篩選進貨單",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Order = 4,
                    Options = await GetFilterPurchaseReceivingOptions(),
                    HelpText = "選擇特定進貨單進行篩選，或留空顯示所有進貨單"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ReturnDate),
                    Label = "退回日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    Order = 5,
                    HelpText = "請選擇退回日期"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.TotalReturnAmount),
                    Label = "退回總金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    IsReadOnly = true,
                    Order = 7,
                    HelpText = "系統自動計算的退回總金額"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ReturnTaxAmount),
                    Label = $"退回稅額({currentTaxRate:F2}%)",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    IsReadOnly = true,
                    Order = 8,
                    HelpText = $"退回單的稅額，根據明細自動計算（稅率：{currentTaxRate:F2}%）"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.TotalReturnAmountWithTax),
                    Label = "退回含稅總金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    IsReadOnly = true,
                    Order = 9,
                    HelpText = "系統自動計算的退回含稅總金額"
                },
                FormFieldConfigurationHelper.CreateRemarksField<PurchaseReturn>(),
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(PurchaseReturn.PurchaseReturnNumber), "基本資訊" },
                { nameof(PurchaseReturn.SupplierId), "基本資訊" },
                { "FilterProductId", "基本資訊" },
                { "FilterPurchaseReceivingId", "基本資訊" },
                { nameof(PurchaseReturn.ReturnDate), "基本資訊" },
                { nameof(PurchaseReturn.TotalReturnAmount), "金額資訊(系統自動計算)" },
                { nameof(PurchaseReturn.ReturnTaxAmount), "金額資訊(系統自動計算)" },
                { nameof(PurchaseReturn.TotalReturnAmountWithTax), "金額資訊(系統自動計算)" },
                { nameof(PurchaseReturn.Remarks), "額外資訊" }
            };
            
        }
        catch (Exception)
        {            
            // 確保即使發生錯誤也有基本的表單結構
            formFields = new List<FormFieldDefinition>();
            formSections = new Dictionary<string, string>();
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        if (formFields == null)
        {
            return new List<FormFieldDefinition>();
        }
        return formFields;
    }

    /// <summary>
    /// 取得商品篩選選項 - 根據選擇的廠商篩選
    /// </summary>
    private async Task<List<SelectOption>> GetFilterProductOptions()
    {
        try
        {
            var options = new List<SelectOption> {};
            
            // 如果有選擇廠商，只顯示該廠商的產品
            if (editModalComponent?.Entity?.SupplierId > 0)
            {
                var supplierProducts = await ProductService.GetBySupplierAsync(editModalComponent.Entity.SupplierId);
                options.AddRange(supplierProducts.Select(p => new SelectOption
                {
                    Value = p.Id.ToString(),
                    Text = $"{p.Code} - {p.Name}"
                }));
            }
            
            return options;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入商品選項時發生錯誤：{ex.Message}");
            return new List<SelectOption> {};
        }
    }

    /// <summary>
    /// 取得進貨單篩選選項 - 根據選擇的廠商篩選
    /// </summary>
    private async Task<List<SelectOption>> GetFilterPurchaseReceivingOptions()
    {
        try
        {
            var options = new List<SelectOption> {};
            
            // 如果有選擇廠商，只顯示該廠商的進貨單
            if (editModalComponent?.Entity?.SupplierId > 0)
            {
                var supplierReceivings = purchaseReceivings
                    .Where(pr => pr.SupplierId == editModalComponent.Entity.SupplierId)
                    .ToList();
                    
                options.AddRange(supplierReceivings.Select(pr => new SelectOption
                {
                    Value = pr.Id.ToString(),
                    Text = $"{pr.ReceiptNumber} - {pr.ReceiptDate:yyyy/MM/dd}"
                }));
            }
            
            return options;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入進貨單選項時發生錯誤：{ex.Message}");
            return new List<SelectOption> {};
        }
    }

    /// <summary>
    /// 更新商品篩選選項 - 當廠商變更時調用
    /// </summary>
    private async Task UpdateFilterProductOptions(int? supplierId = null)
    {
        try
        {
            // 找到商品篩選欄位並更新其選項
            var filterProductField = formFields.FirstOrDefault(f => f.PropertyName == "FilterProductId");
            if (filterProductField != null)
            {
                var options = new List<SelectOption> {};
                
                if (supplierId.HasValue && supplierId.Value > 0)
                {
                    var supplierProducts = await ProductService.GetBySupplierAsync(supplierId.Value);
                    options.AddRange(supplierProducts.Select(p => new SelectOption
                    {
                        Value = p.Id.ToString(),
                        Text = $"{p.Code} - {p.Name}"
                    }));
                }
                
                filterProductField.Options = options;
                
                // 清空目前的商品篩選選擇
                filterProductId = null;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"更新商品篩選選項時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 更新進貨單篩選選項 - 當廠商變更時調用
    /// </summary>
    private async Task UpdateFilterPurchaseReceivingOptions(int? supplierId = null)
    {
        try
        {
            // 找到進貨單篩選欄位並更新其選項
            var filterReceivingField = formFields.FirstOrDefault(f => f.PropertyName == "FilterPurchaseReceivingId");
            if (filterReceivingField != null)
            {
                var options = new List<SelectOption> {};
                
                if (supplierId.HasValue && supplierId.Value > 0)
                {
                    var supplierReceivings = purchaseReceivings
                        .Where(pr => pr.SupplierId == supplierId.Value)
                        .ToList();
                        
                    options.AddRange(supplierReceivings.Select(pr => new SelectOption
                    {
                        Value = pr.Id.ToString(),
                        Text = $"{pr.ReceiptNumber} - {pr.ReceiptDate:yyyy/MM/dd}"
                    }));
                }
                
                filterReceivingField.Options = options;
                
                // 清空目前的進貨單篩選選擇
                filterPurchaseReceivingId = null;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"更新進貨單篩選選項時發生錯誤：{ex.Message}");
        }
    }

    // ===== AutoComplete 設定 =====
    
    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(PurchaseReturn.SupplierId), searchTerm => new Dictionary<string, object?>
                {
                    { "CompanyName", searchTerm }
                }
            },
            {
                nameof(PurchaseReturn.PurchaseReceivingId), searchTerm => new Dictionary<string, object?>
                {
                    { "ReceiptNumber", searchTerm }
                }
            }
        };
    }
    
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {        
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(PurchaseReturn.SupplierId), suppliers?.Cast<object>() ?? new List<object>() },
            { nameof(PurchaseReturn.PurchaseReceivingId), purchaseReceivings?.Cast<object>() ?? new List<object>() }
        };
    }

    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {

        return new Dictionary<string, string>
        {
            { nameof(PurchaseReturn.SupplierId), nameof(Supplier.CompanyName) },
            { nameof(PurchaseReturn.PurchaseReceivingId), nameof(PurchaseReceiving.ReceiptNumber) }
        };
    }

    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {

        return new Dictionary<string, string>
        {
            { nameof(PurchaseReturn.SupplierId), nameof(Supplier.Id) },
            { nameof(PurchaseReturn.PurchaseReceivingId), nameof(PurchaseReceiving.Id) }
        };
    }

    // ===== Modal 管理器配置方法 =====
    
    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {

        return new Dictionary<string, object>
        {
            { nameof(PurchaseReturn.SupplierId), supplierModalManager ?? new object() }
        };
    }
    
    // ===== Modal 管理器初始化方法 =====
    
    /// <summary>
    /// 初始化廠商 Modal 管理器
    /// </summary>
    private void InitializeSupplierModalManager()
    {
        supplierModalManager = new RelatedEntityManagerBuilder<Supplier>(NotificationService, "廠商")
            .WithPropertyName(nameof(PurchaseReturn.SupplierId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(supplierId => 
            {
                // 自動選擇廠商時的回調邏輯
            })
            .WithCustomPostProcess(async supplier => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }
    
    // ===== ActionButton 產生方法 =====
    
    /// <summary>
    /// 產生廠商操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetSupplierActionButtonsAsync()
    {
        var buttons = await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            supplierModalManager, 
            nameof(PurchaseReturn.SupplierId)
        );
        
        return buttons;
    }
    
    // ===== Modal 事件包裝器方法 =====
    
    /// <summary>
    /// 包裝廠商儲存事件
    /// </summary>
    private async Task OnSupplierSavedWrapper(Supplier savedSupplier)
    {
        await supplierModalManager.HandleEntitySavedAsync(savedSupplier, shouldAutoSelect: true);
    }
    
    /// <summary>
    /// 處理欄位值變更事件 - 使用統一 Helper
    /// </summary>
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 當廠商變更時，更新篩選選項
            if (fieldChange.PropertyName == nameof(PurchaseReturn.SupplierId))
            {
                int? supplierId = null;
                if (fieldChange.Value != null && 
                    int.TryParse(fieldChange.Value.ToString(), out int parsedSupplierId) && 
                    parsedSupplierId > 0)
                {
                    supplierId = parsedSupplierId;
                }
                
                // 更新商品和進貨單篩選選項
                await UpdateFilterProductOptions(supplierId);
                await UpdateFilterPurchaseReceivingOptions(supplierId);
                
                StateHasChanged();
            }
            
            // 當商品篩選變更時，更新篩選狀態並觸發重新渲染
            if (fieldChange.PropertyName == "FilterProductId")
            {
                if (fieldChange.Value != null && 
                    int.TryParse(fieldChange.Value.ToString(), out int productId) && 
                    productId > 0)
                {
                    filterProductId = productId;
                }
                else
                {
                    filterProductId = null;
                }
                StateHasChanged();
            }
            
            // 當進貨單篩選變更時，更新篩選狀態並觸發重新渲染
            if (fieldChange.PropertyName == "FilterPurchaseReceivingId")
            {
                if (fieldChange.Value != null && 
                    int.TryParse(fieldChange.Value.ToString(), out int receivingId) && 
                    receivingId > 0)
                {
                    filterPurchaseReceivingId = receivingId;
                }
                else
                {
                    filterPurchaseReceivingId = null;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理欄位變更時發生錯誤：{ex.Message}");
        }
    }

    // ===== 輔助方法 =====
    private async Task<string> GeneratePurchaseReturnNumberAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            PurchaseReturnService,
            "PR",
            (service, code, excludeId) => service.IsPurchaseReturnNumberExistsAsync(code, excludeId)
        );
    }

    /// <summary>
    /// 配置自訂模組
    /// </summary>
    private List<GenericEditModalComponent<PurchaseReturn, IPurchaseReturnService>.CustomModule> GetCustomModules()
    {
        try
        {

            if (editModalComponent == null)
            {

                return new List<GenericEditModalComponent<PurchaseReturn, IPurchaseReturnService>.CustomModule>();
            }

            var content = CreateReturnDetailManagerContent();

            return new List<GenericEditModalComponent<PurchaseReturn, IPurchaseReturnService>.CustomModule>
            {
                new GenericEditModalComponent<PurchaseReturn, IPurchaseReturnService>.CustomModule
                {
                    Title = "",
                    Order = 1,
                    CssClass = "mt-4",
                    IsVisible = true,
                    Content = content
                }
            };
        }
        catch
        {
            // 如果創建模組時發生錯誤，返回空列表
            return new List<GenericEditModalComponent<PurchaseReturn, IPurchaseReturnService>.CustomModule>();
        }
    }

    /// <summary>
    /// 創建退貨明細管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreateReturnDetailManagerContent() => __builder =>
    {
        try
        {

            @if (editModalComponent?.Entity != null)
            {

                @if (editModalComponent.Entity.SupplierId > 0)
                {
                    try
                    {

                        <PurchaseReturnDetailManagerComponent @ref="purchaseReturnDetailManager"
                            SupplierId="@editModalComponent.Entity.SupplierId"
                            FilterPurchaseReceivingId="@filterPurchaseReceivingId"
                            FilterProductId="@filterProductId"
                            IsEditMode="@(PurchaseReturnId.HasValue)"
                            ExistingReturnDetails="@(purchaseReturnDetails ?? new List<PurchaseReturnDetail>())"
                            OnReturnDetailsChanged="@HandleReturnDetailsChanged"
                            OnDeletedDetailsChanged="@HandleDeletedDetailsChanged" />
                    }
                    catch (Exception ex)
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>載入退貨明細管理器時發生錯誤</strong>
                            <br/>錯誤類型：@ex.GetType().Name
                            <br/>錯誤訊息：@ex.Message
                            <br/>請檢查資料完整性或聯繫系統管理員
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info text-center" role="alert">
                        <i class="fas fa-info-circle me-2"></i>
                        請先選擇廠商後再進行退貨明細管理
                    </div>
                }
            }
            else
            {
                var componentStatus = editModalComponent == null ? "null" : "not null";
                var entityStatus = editModalComponent?.Entity == null ? "null" : "not null";
                <div class="text-center py-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">載入中...</span>
                    </div>
                    <p class="text-muted mt-2">正在載入退貨明細管理器...</p>
                </div>
            }
        }
        catch (Exception ex)
        {
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong>載入退貨明細管理器時發生嚴重錯誤</strong>
                <br/>錯誤類型：@ex.GetType().Name
                <br/>錯誤訊息：@ex.Message
                <br/>請重新整理頁面，如問題持續請聯繫系統管理員
                <details class="mt-2">
                    <summary>技術詳情</summary>
                    <pre class="mt-1 small">@ex.StackTrace</pre>
                </details>
            </div>
        }
    };

    /// <summary>
    /// 處理退貨明細變更
    /// </summary>
    private async Task HandleReturnDetailsChanged(List<PurchaseReturnDetail> returnDetails)
    {
        try
        { 
            // 儲存退貨明細到內部狀態
            purchaseReturnDetails = returnDetails ?? new List<PurchaseReturnDetail>();
            
            // 更新主檔的總金額和稅額
            if (editModalComponent?.Entity != null)
            {
                // 1. 計算總金額（未稅）= Σ(退回數量 × 單價)
                editModalComponent.Entity.TotalReturnAmount = purchaseReturnDetails
                    .Where(d => d.ProductId > 0 && d.ReturnQuantity > 0)
                    .Sum(d => d.ReturnQuantity * d.OriginalUnitPrice);
                
                // 2. 計算稅額 = 總金額 × 稅率（使用快取的稅率，避免每次都查詢資料庫）
                editModalComponent.Entity.ReturnTaxAmount = Math.Round(
                    editModalComponent.Entity.TotalReturnAmount * (currentTaxRate / 100), 
                    2  // 四捨五入到小數點後2位
                );
                
                // 3. 含稅總金額會自動計算（TotalReturnAmountWithTax 是計算屬性）
                //    = TotalReturnAmount + ReturnTaxAmount
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理退貨明細變更時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理已刪除的退貨明細ID
    /// </summary>
    private async Task HandleDeletedDetailsChanged(List<int> deletedDetailIds)
    {
        try
        {
            if (deletedDetailIds?.Any() == true)
            {
                // 如果是編輯模式，實際從資料庫永久刪除
                if (PurchaseReturnId.HasValue)
                {
                    foreach (var detailId in deletedDetailIds)
                    {
                        var result = await PurchaseReturnDetailService.PermanentDeleteAsync(detailId);
                        if (!result.IsSuccess)
                        {
                            await NotificationService.ShowErrorAsync($"刪除明細ID {detailId} 失敗: {result.ErrorMessage}");
                            return;
                        }
                    }
                    await NotificationService.ShowSuccessAsync($"已永久刪除 {deletedDetailIds.Count} 筆退貨明細");
                }
                
                // 從本地狀態中移除已刪除的明細
                if (purchaseReturnDetails != null)
                {
                    purchaseReturnDetails = purchaseReturnDetails
                        .Where(detail => !deletedDetailIds.Contains(detail.Id))
                        .ToList();
                }
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"永久刪除退貨明細時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 驗證進貨退出明細 - 在儲存主檔之前執行
    /// </summary>
    private async Task<bool> ValidatePurchaseReturnDetailsAsync(PurchaseReturn purchaseReturn)
    {
        try
        {
            // 首先呼叫明細管理器的驗證方法
            if (purchaseReturnDetailManager != null)
            {
                bool isValidDetails = await purchaseReturnDetailManager.ValidateAsync();
                if (!isValidDetails)
                {
                    return false;
                }
            }
            
            // 檢查是否有有效的明細
            var validDetails = purchaseReturnDetails.Where(d => d.ProductId > 0 && d.ReturnQuantity > 0).ToList();
            if (!validDetails.Any())
            {
                await NotificationService.ShowErrorAsync("至少需要一筆退貨明細");
                return false;
            }
            
            return true;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"驗證退貨明細時發生錯誤：{ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// 自訂儲存邏輯 - 同時儲存主檔和明細
    /// </summary>
    private async Task<bool> SavePurchaseReturnWithDetails(PurchaseReturn purchaseReturn)
    {
        try
        {
            if (purchaseReturn == null)
            {
                return false;
            }
            
            // 先執行自訂驗證
            if (!await ValidatePurchaseReturnDetailsAsync(purchaseReturn))
            {
                return false;
            }
            
            if (PurchaseReturnService == null)
            {
                return false;
            }
            
            if (purchaseReturnDetails == null)
            {
                purchaseReturnDetails = new List<PurchaseReturnDetail>();
            }
                        
            // 呼叫服務的 SaveWithDetailsAsync 方法
            var result = await PurchaseReturnService.SaveWithDetailsAsync(purchaseReturn, purchaseReturnDetails);
            
            if (result == null)
            {
                return false;
            }
            
            if (result.IsSuccess)
            {
                return true;
            }
            else
            {
                await NotificationService.ShowErrorAsync($"儲存失敗：{result.ErrorMessage}");
                return false;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"儲存採購退貨時發生錯誤：{ex.Message}");
            return false;
        }
    }
}
