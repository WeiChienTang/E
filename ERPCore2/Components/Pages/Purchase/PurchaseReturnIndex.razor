@page "/purchase-returns"
@inject IPurchaseReturnService PurchaseReturnService
@inject ISupplierService SupplierService
@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="PurchaseReturn" 
                          TService="IPurchaseReturnService"
                          Service="@PurchaseReturnService"
                          EntityBasePath="/purchase-returns"
                          PageTitle="採購退回管理"
                          PageSubtitle="管理所有採購退回與退款資料"
                          EntityName="採購退回"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadPurchaseReturnsAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplyPurchaseReturnFilters"
                          GetEntityDisplayName="@(purchaseReturn => purchaseReturn.PurchaseReturnNumber)"
                          RequiredPermission="PurchaseReturn.Read"
                          @ref="indexPageRef" />

@code {
    // 組件參考
    private GenericIndexPageComponent<PurchaseReturn, IPurchaseReturnService> indexPageRef = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 選項清單
    private List<SelectOption> supplierOptions = new();
    private List<SelectOption> employeeOptions = new();
    private List<SelectOption> statusOptions = new();
    private List<SelectOption> reasonOptions = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeBasicFilters();
            InitializeColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitialized),
                GetType(),
                additionalData: "初始化採購退回頁面失敗"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("採購管理", "/"),
                new("採購退回", "/purchase-returns")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化麵包屑失敗"
            );
        }
    }

    private void InitializeBasicFilters()
    {
        try
        {
            // 建立基本篩選定義（不包含下拉選單選項，這些將在 LoadBasicDataAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SearchTerm", "搜尋", "請輸入退貨單號、供應商名稱...")
                .AddSelect("SupplierId", "供應商", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("EmployeeId", "處理人員", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("ReturnStatus", "退貨狀態", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("ReturnReason", "退貨原因", new List<SelectOption>()) // 空的選項，稍後載入
                .AddDateRange("ReturnDateRange", "退貨日期")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBasicFilters),
                GetType(),
                additionalData: "初始化基本篩選器失敗"
            );
            
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 載入供應商選項
            var suppliers = await SupplierService.GetAllAsync();
            supplierOptions = suppliers
                .Where(s => !s.IsDeleted)
                .OrderBy(s => s.CompanyName)
                .Select(s => new SelectOption 
                { 
                    Value = s.Id.ToString(),
                    Text = s.CompanyName
                })
                .ToList();

            // 載入員工選項
            var employees = await EmployeeService.GetAllAsync();
            employeeOptions = employees
                .Where(e => !e.IsDeleted && e.Status == EntityStatus.Active)
                .OrderBy(e => e.Name)
                .Select(e => new SelectOption 
                { 
                    Value = e.Id.ToString(),
                    Text = e.Name ?? ""
                })
                .ToList();

            // 準備退貨狀態選項
            statusOptions = Enum.GetValues<PurchaseReturnStatus>()
                .Select(status => new SelectOption
                {
                    Value = status.ToString(),
                    Text = GetReturnStatusDisplayName(status)
                })
                .ToList();

            // 準備退貨原因選項
            reasonOptions = Enum.GetValues<PurchaseReturnReason>()
                .Select(reason => new SelectOption
                {
                    Value = reason.ToString(),
                    Text = GetReturnReasonDisplayName(reason)
                })
                .ToList();

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SearchTerm", "搜尋", "請輸入退貨單號、供應商名稱...")
                .AddSelect("SupplierId", "供應商", supplierOptions)
                .AddSelect("EmployeeId", "處理人員", employeeOptions)
                .AddSelect("ReturnStatus", "退貨狀態", statusOptions)
                .AddSelect("ReturnReason", "退貨原因", reasonOptions)
                .AddDateRange("ReturnDateRange", "退貨日期")
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，刷新組件以更新篩選器
            if (indexPageRef != null)
            {
                await indexPageRef.Refresh();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadBasicDataAsync),
                GetType(),
                additionalData: "載入基礎資料失敗"
            );
        }
    }

    private async Task<List<PurchaseReturn>> LoadPurchaseReturnsAsync()
    {
        try
        {
            return await PurchaseReturnService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadPurchaseReturnsAsync), 
                GetType(),
                additionalData: new { PageName = "PurchaseReturnIndex", Action = "LoadPurchaseReturnsAsync" });
            
            StateHasChanged();
            return new List<PurchaseReturn>();
        }
    }

    private IQueryable<PurchaseReturn> ApplyPurchaseReturnFilters(SearchFilterModel searchModel, IQueryable<PurchaseReturn> query)
    {
        try
        {
            // 文字搜尋篩選
            var searchTerm = searchModel.GetFilterValue("SearchTerm")?.ToString();
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var lowerSearchTerm = searchTerm.ToLower();
                query = query.Where(pr => 
                    pr.PurchaseReturnNumber.ToLower().Contains(lowerSearchTerm) ||
                    pr.Supplier.CompanyName.ToLower().Contains(lowerSearchTerm) ||
                    (pr.ReturnDescription != null && pr.ReturnDescription.ToLower().Contains(lowerSearchTerm)) ||
                    (pr.ProcessPersonnel != null && pr.ProcessPersonnel.ToLower().Contains(lowerSearchTerm)));
            }

            // 供應商篩選
            var supplierIdFilter = searchModel.GetFilterValue("SupplierId")?.ToString();
            if (!string.IsNullOrWhiteSpace(supplierIdFilter) && int.TryParse(supplierIdFilter, out var supplierId))
            {
                query = query.Where(pr => pr.SupplierId == supplierId);
            }

            // 處理人員篩選
            var employeeIdFilter = searchModel.GetFilterValue("EmployeeId")?.ToString();
            if (!string.IsNullOrWhiteSpace(employeeIdFilter) && int.TryParse(employeeIdFilter, out var employeeId))
            {
                query = query.Where(pr => pr.EmployeeId == employeeId);
            }

            // 退貨狀態篩選
            var statusFilter = searchModel.GetFilterValue("ReturnStatus")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<PurchaseReturnStatus>(statusFilter, out var status))
            {
                query = query.Where(pr => pr.ReturnStatus == status);
            }

            // 退貨原因篩選
            var reasonFilter = searchModel.GetFilterValue("ReturnReason")?.ToString();
            if (!string.IsNullOrWhiteSpace(reasonFilter) && Enum.TryParse<PurchaseReturnReason>(reasonFilter, out var reason))
            {
                query = query.Where(pr => pr.ReturnReason == reason);
            }

            // 日期範圍篩選
            var dateRange = searchModel.GetFilterValue("ReturnDateRange") as DateRange;
            if (dateRange != null)
            {
                if (dateRange.StartDate.HasValue)
                {
                    query = query.Where(pr => pr.ReturnDate >= dateRange.StartDate.Value);
                }
                if (dateRange.EndDate.HasValue)
                {
                    query = query.Where(pr => pr.ReturnDate <= dateRange.EndDate.Value);
                }
            }

            return query.OrderByDescending(pr => pr.ReturnDate)
                        .ThenBy(pr => pr.PurchaseReturnNumber);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplyPurchaseReturnFilters),
                GetType(),
                additionalData: new { 
                    SearchModel = searchModel, 
                    PageName = "PurchaseReturnIndex", 
                    Action = "ApplyPurchaseReturnFilters" 
                });
            return query; // 回傳原始查詢作為後備
        }
    }

    private void InitializeColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                new()
                {
                    PropertyName = nameof(PurchaseReturn.PurchaseReturnNumber),
                    Title = "退貨單號",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 120px"
                },
                new()
                {
                    PropertyName = "Supplier.CompanyName",
                    Title = "供應商名稱",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 150px"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ReturnDate),
                    Title = "退貨日期",
                    DataType = ColumnDataType.Date,
                    IsSortable = true,
                    HeaderStyle = "width: 100px"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ReturnStatus),
                    Title = "退貨狀態",
                    DataType = ColumnDataType.Status,
                    IsSortable = true,
                    HeaderStyle = "width: 100px",
                    StatusBadgeMap = new Dictionary<object, string>
                    {
                        { PurchaseReturnStatus.Draft, "badge-secondary" },
                        { PurchaseReturnStatus.Submitted, "badge-info" },
                        { PurchaseReturnStatus.Confirmed, "badge-primary" },
                        { PurchaseReturnStatus.Processing, "badge-warning" },
                        { PurchaseReturnStatus.Completed, "badge-success" },
                        { PurchaseReturnStatus.Cancelled, "badge-danger" },
                        { PurchaseReturnStatus.Closed, "badge-dark" }
                    }
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ReturnReason),
                    Title = "退貨原因",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 120px"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.TotalReturnAmountWithTax),
                    Title = "退貨總金額",
                    DataType = ColumnDataType.Currency,
                    IsSortable = true,
                    HeaderStyle = "width: 120px; text-align: right",
                    CellStyle = "text-align: right"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ProcessPersonnel),
                    Title = "處理人員",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 100px"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.IsRefunded),
                    Title = "退款狀態",
                    DataType = ColumnDataType.Boolean,
                    IsSortable = true,
                    HeaderStyle = "width: 80px"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ReturnDescription),
                    Title = "退貨說明",
                    DataType = ColumnDataType.Text,
                    IsSortable = false,
                    HeaderStyle = "width: 200px"
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
            
            // 設定安全的預設值
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }

    private string GetReturnStatusDisplayName(PurchaseReturnStatus status)
    {
        return status switch
        {
            PurchaseReturnStatus.Draft => "草稿",
            PurchaseReturnStatus.Submitted => "已送出",
            PurchaseReturnStatus.Confirmed => "已確認",
            PurchaseReturnStatus.Processing => "處理中",
            PurchaseReturnStatus.Completed => "已完成",
            PurchaseReturnStatus.Cancelled => "已取消",
            PurchaseReturnStatus.Closed => "已關閉",
            _ => status.ToString()
        };
    }

    private string GetReturnReasonDisplayName(PurchaseReturnReason reason)
    {
        return reason switch
        {
            PurchaseReturnReason.QualityIssue => "品質不良",
            PurchaseReturnReason.SpecificationMismatch => "規格不符",
            PurchaseReturnReason.QuantityError => "數量錯誤",
            PurchaseReturnReason.ExpiredProduct => "過期商品",
            PurchaseReturnReason.ShippingDamage => "運送損壞",
            PurchaseReturnReason.SupplierRequest => "廠商要求",
            PurchaseReturnReason.Other => "其他",
            _ => reason.ToString()
        };
    }
}
