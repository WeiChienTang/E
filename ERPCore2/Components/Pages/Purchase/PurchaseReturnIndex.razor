@page "/purchase/returns"
@using ERPCore2.Components.Shared.Report
@using ERPCore2.Models
@inject IPurchaseReturnService PurchaseReturnService
@inject ISupplierService SupplierService
@inject IPurchaseOrderService PurchaseOrderService
@inject IPurchaseReceivingService PurchaseReceivingService
@inject IWarehouseService WarehouseService
@inject IEmployeeService EmployeeService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="PurchaseReturn" 
                          TService="IPurchaseReturnService"
                          Service="@PurchaseReturnService"
                          EntityBasePath="/purchase/returns"
                          PageTitle="進貨退出管理"
                          PageSubtitle="管理所有進貨退出單資料與退款狀態"
                          EntityName="進貨退出單"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadPurchaseReturnsAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplyPurchaseReturnFilters"
                          GetEntityDisplayName="@(returnItem => returnItem.PurchaseReturnNumber)"
                          RequiredPermission="PurchaseReturn.Read"
                          ShowBatchPrintButton="true"
                          OnBatchPrintClick="@HandleBatchPrintAsync"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 進貨退出編輯 Modal *@
<PurchaseReturnEditModalComponent IsVisible="@showEditModal"
                                 IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                                 PurchaseReturnId="@editingPurchaseReturnId"
                                 OnPurchaseReturnSaved="@modalHandler.OnEntitySavedAsync"
                                 OnCancel="@modalHandler.OnModalCancelAsync" />

@* 批次列印篩選 Modal - 使用新架構 *@
<BatchPrintFilterModalComponent IsVisible="@showBatchPrintModal"
                               IsVisibleChanged="@((bool visible) => showBatchPrintModal = visible)"
                               Title="進貨退出單批次列印條件"
                               OnConfirm="@HandleBatchPrintConfirmAsync"
                               OnCancel="@HandleBatchPrintCancelAsync">
    @* 區塊 1: 廠商多選篩選 *@
    <FilterSectionComponent Title="廠商篩選 (可多選)" 
                           Badge="@($"{selectedSuppliers.Count} / {suppliers.Count}")">
        <MultiSelectFilterComponent TItem="Supplier"
                                   Items="@suppliers"
                                   @bind-SelectedItems="@selectedSuppliers"
                                   DisplayProperty="CompanyName"
                                   ValueProperty="Id"
                                   Placeholder="請輸入廠商名稱搜尋..."
                                   EmptyMessage="尚未選擇廠商，留空表示列印所有廠商的進貨退出單"
                                   ShowCard="false" />
    </FilterSectionComponent>
    
    @* 區塊 2: 退貨日期範圍 - 使用日期範圍元件 *@
    <FilterSectionComponent Title="退貨日期" 
                           IconClass="bi bi-calendar-range">
        <DateRangeFilterComponent @bind-StartDate="@batchPrintStartDate"
                                 @bind-EndDate="@batchPrintEndDate"
                                 StartDateLabel="起始日期"
                                 EndDateLabel="結束日期"
                                 ShowQuickSelectors="true"
                                 AutoValidate="true"
                                 ShowValidationMessage="true" />
    </FilterSectionComponent>
</BatchPrintFilterModalComponent>

@code {
    // 組件參考
    private GenericIndexPageComponent<PurchaseReturn, IPurchaseReturnService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingPurchaseReturnId = null;
    
    // 批次列印 Modal 相關狀態
    private bool showBatchPrintModal = false;
    private List<Supplier> selectedSuppliers = new();
    private DateTime? batchPrintStartDate = null;
    private DateTime? batchPrintEndDate = null;
    
    // Modal 處理器
    private ModalHandler<PurchaseReturn, GenericIndexPageComponent<PurchaseReturn, IPurchaseReturnService>> modalHandler = default!;
    
    // 欄位配置
    private PurchaseReturnFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // 相關資料
    private List<Supplier> suppliers = new();
    private List<PurchaseOrder> purchaseOrders = new();
    private List<PurchaseReceiving> purchaseReceivings = new();
    private List<Warehouse> warehouses = new();
    private List<Employee> employees = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<PurchaseReturn, GenericIndexPageComponent<PurchaseReturn, IPurchaseReturnService>>(
                id => editingPurchaseReturnId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入相關資料
            await LoadSuppliersAsync();
            await LoadPurchaseOrdersAsync();
            await LoadPurchaseReceivingsAsync();
            await LoadWarehousesAsync();
            await LoadEmployeesAsync();
            
            // 建立欄位配置
            fieldConfiguration = new PurchaseReturnFieldConfiguration(
                suppliers, 
                purchaseOrders, 
                purchaseReceivings, 
                warehouses, 
                employees, 
                NotificationService);
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化進貨退出頁面失敗");
            await NotificationService.ShowErrorAsync("初始化進貨退出頁面失敗");
        }
    }

    /// <summary>
    /// 初始化麵包屑導航
    /// </summary>
    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("採購管理", "#"),
                new("進貨退出管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    /// <summary>
    /// 載入進貨退出資料
    /// </summary>
    private async Task<List<PurchaseReturn>> LoadPurchaseReturnsAsync()
    {
        try
        {
            return await PurchaseReturnService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPurchaseReturnsAsync), GetType(), additionalData: "載入進貨退出資料失敗");
            await NotificationService.ShowErrorAsync("載入進貨退出資料失敗");
            return new List<PurchaseReturn>();
        }
    }

    /// <summary>
    /// 載入基礎資料
    /// </summary>
    private async Task LoadBasicDataAsync()
    {
        try
        {
            await LoadSuppliersAsync();
            await LoadPurchaseOrdersAsync();
            await LoadPurchaseReceivingsAsync();
            await LoadWarehousesAsync();
            await LoadEmployeesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadBasicDataAsync), GetType(), additionalData: "載入基礎資料失敗");
            await NotificationService.ShowErrorAsync("載入基礎資料失敗");
        }
    }

    /// <summary>
    /// 載入廠商資料
    /// </summary>
    private async Task LoadSuppliersAsync()
    {
        try
        {
            suppliers = await SupplierService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSuppliersAsync), GetType(), additionalData: "載入廠商資料失敗");
            await NotificationService.ShowErrorAsync("載入廠商資料失敗");
            suppliers = new List<Supplier>();
        }
    }

    /// <summary>
    /// 載入採購訂單資料
    /// </summary>
    private async Task LoadPurchaseOrdersAsync()
    {
        try
        {
            // 載入已核准的採購訂單
            var allOrders = await PurchaseOrderService.GetAllAsync();
            purchaseOrders = allOrders.Where(po => po.IsApproved).ToList();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPurchaseOrdersAsync), GetType(), additionalData: "載入採購訂單資料失敗");
            await NotificationService.ShowErrorAsync("載入採購訂單資料失敗");
            purchaseOrders = new List<PurchaseOrder>();
        }
    }

    /// <summary>
    /// 載入採購進貨資料
    /// </summary>
    private async Task LoadPurchaseReceivingsAsync()
    {
        try
        {
            purchaseReceivings = await PurchaseReceivingService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPurchaseReceivingsAsync), GetType(), additionalData: "載入採購進貨資料失敗");
            await NotificationService.ShowErrorAsync("載入採購進貨資料失敗");
            purchaseReceivings = new List<PurchaseReceiving>();
        }
    }

    /// <summary>
    /// 載入倉庫資料
    /// </summary>
    private async Task LoadWarehousesAsync()
    {
        try
        {
            warehouses = await WarehouseService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadWarehousesAsync), GetType(), additionalData: "載入倉庫資料失敗");
            await NotificationService.ShowErrorAsync("載入倉庫資料失敗");
            warehouses = new List<Warehouse>();
        }
    }

    /// <summary>
    /// 載入員工資料
    /// </summary>
    private async Task LoadEmployeesAsync()
    {
        try
        {
            employees = await EmployeeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadEmployeesAsync), GetType(), additionalData: "載入員工資料失敗");
            await NotificationService.ShowErrorAsync("載入員工資料失敗");
            employees = new List<Employee>();
        }
    }

    /// <summary>
    /// 應用進貨退出篩選器
    /// </summary>
    private IQueryable<PurchaseReturn> ApplyPurchaseReturnFilters(SearchFilterModel searchModel, IQueryable<PurchaseReturn> query)
    {
        // 確保 fieldConfiguration 已初始化（避免與 GenericIndexPageComponent 初始化的競爭條件）
        if (fieldConfiguration == null)
        {
            // 如果配置未初始化，回傳基本排序的查詢
            return query.OrderByDescending(pr => pr.ReturnDate)
                       .ThenByDescending(pr => pr.PurchaseReturnNumber);
        }

        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyPurchaseReturnFilters), GetType());
    }

    // 多筆列印處理方法
    private async Task HandleBatchPrintAsync()
    {
        try
        {
            // 顯示批次列印篩選 Modal
            showBatchPrintModal = true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintAsync), GetType(), additionalData: "開啟多筆列印視窗失敗");
            await NotificationService.ShowErrorAsync("開啟多筆列印視窗失敗");
        }
    }

    // 處理批次列印確認
    private async Task HandleBatchPrintConfirmAsync()
    {
        try
        {
            // 組裝批次列印條件
            var criteria = new BatchPrintCriteria
            {
                StartDate = batchPrintStartDate,
                EndDate = batchPrintEndDate,
                RelatedEntityIds = selectedSuppliers.Select(s => s.Id).ToList(),
                ReportType = "PurchaseReturn",
                MaxResults = 100,
                IncludeCancelled = false
            };

            // 驗證篩選條件
            var validation = criteria.Validate();
            if (!validation.IsValid)
            {
                await NotificationService.ShowErrorAsync($"篩選條件錯誤：{validation.GetAllErrors()}");
                return;
            }

            // 序列化條件為 JSON
            var jsonPayload = System.Text.Json.JsonSerializer.Serialize(criteria);

            // 開啟新視窗顯示批次報表（使用新路由）
            var apiUrl = "/api/purchase-report/return/batch?autoprint=true";
            await JSRuntime.InvokeVoidAsync("openBatchPrintWindow", apiUrl, jsonPayload);

            // 顯示成功訊息
            await NotificationService.ShowSuccessAsync($"已開啟批次列印視窗 ({criteria.GetSummary()})");
            
            // 關閉 Modal
            showBatchPrintModal = false;
            
            // 清空選擇
            selectedSuppliers.Clear();
            batchPrintStartDate = null;
            batchPrintEndDate = null;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintConfirmAsync), GetType(), additionalData: "執行批次列印失敗");
            await NotificationService.ShowErrorAsync("執行批次列印失敗");
        }
    }

    // 處理批次列印取消
    private async Task HandleBatchPrintCancelAsync()
    {
        try
        {
            showBatchPrintModal = false;
            
            // 清空所有篩選條件
            selectedSuppliers.Clear();
            batchPrintStartDate = null;
            batchPrintEndDate = null;
            
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintCancelAsync), GetType(), additionalData: "取消批次列印失敗");
        }
    }
}
