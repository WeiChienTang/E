@page "/purchase/orders/detail/{purchaseOrderId:int}"

@inject IPurchaseOrderService PurchaseOrderService
@inject INotificationService NotificationService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<GenericDetailPageComponent TEntity="PurchaseOrder" 
                           TService="IPurchaseOrderService"
                           EntityId="@PurchaseOrderId"
                           Entity="@purchaseOrder"
                           Service="@PurchaseOrderService"
                           EntityName="採購訂單"
                           EntityNamePlural="採購訂單"
                           PageTitle="採購訂單詳細資料"
                           IndexRoute="/purchase/orders"
                           EditRoute="@($"/purchase/orders/edit/{PurchaseOrderId}")"
                           RequiredPermission="Purchase.Read"
                           BreadcrumbItems="@breadcrumbItems"
                           DataLoader="@LoadPurchaseOrderData"
                           AdditionalDataLoader="@LoadAdditionalData"
                           EntityTitleSelector="@(po => $"採購單號：{po.PurchaseOrderNumber}")"
                           EntitySubtitleSelector="@(po => $"供應商：{po.Supplier?.CompanyName} | 訂單日期：{po.OrderDate:yyyy/MM/dd}")"
                           EntityDisplayNameSelector="@(po => po.PurchaseOrderNumber)"
                           TabSections="@tabSections"
                           UseTabLayout="true"
                           OnDataLoaded="@OnPurchaseOrderDataLoaded"
                           @ref="detailComponent">
</GenericDetailPageComponent>

@code {
    [Parameter] public int PurchaseOrderId { get; set; }
    
    // 組件參考
    private GenericDetailPageComponent<PurchaseOrder, IPurchaseOrderService> detailComponent = default!;
    
    // 資料模型
    private PurchaseOrder? purchaseOrder;
    private List<ERPCore2.Data.Entities.PurchaseOrderDetail> purchaseOrderDetails = new();
    private bool _isLoading = false; // 防止重複載入
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 標籤頁配置
    private List<GenericDetailPageComponent<PurchaseOrder, IPurchaseOrderService>.TabSection> tabSections = new();
    
    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeTabSections();
    }
    
    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("採購管理", "/purchase"),
            new("採購訂單", "/purchase/orders"),
            new("採購訂單詳細")
        };
    }
    
    private void InitializeTabSections()
    {
        try
        {
            tabSections = new List<GenericDetailPageComponent<PurchaseOrder, IPurchaseOrderService>.TabSection>
            {
                new()
                {
                    Id = "basic",
                    Title = "基本資料",
                    Content = BuildBasicInfoContent()
                },
                new()
                {
                    Id = "details",
                    Title = "採購明細",
                    Content = BuildDetailsContent()
                },
                new()
                {
                    Id = "summary",
                    Title = "金額摘要",
                    Content = BuildSummaryContent()
                },
                new()
                {
                    Id = "system",
                    Title = "系統資訊",
                    Content = BuildSystemInfoContent()
                }
            };
        }
        catch (Exception ex)
        {
            // 標籤頁設定失敗，記錄錯誤但返回基本結構
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeTabSections),
                GetType(),
                additionalData: new { PurchaseOrderId = PurchaseOrderId }
            );
            
            // 返回基本標籤頁結構
            tabSections = new List<GenericDetailPageComponent<PurchaseOrder, IPurchaseOrderService>.TabSection>
            {
                new()
                {
                    Id = "basic",
                    Title = "基本資料",
                    Content = @<div><p>載入錯誤，請重新整理頁面</p></div>
                }
            };
        }
    }
    
    private async Task<PurchaseOrder?> LoadPurchaseOrderData()
    {
        // 防止重複載入
        if (_isLoading)
        {
            return purchaseOrder;
        }
        
        try
        {
            _isLoading = true;
            
            if (PurchaseOrderId <= 0) return null;
            
            var po = await PurchaseOrderService.GetByIdAsync(PurchaseOrderId);
            if (po == null)
            {
                await NotificationService.ShowErrorAsync("找不到指定的採購訂單");
                Navigation.NavigateTo("/purchase/orders");
                return null;
            }
            
            purchaseOrder = po; // 保持本地變數同步
            purchaseOrderDetails = po.PurchaseOrderDetails?.ToList() ?? new List<ERPCore2.Data.Entities.PurchaseOrderDetail>();
            
            return po;
        }
        catch (Exception ex)
        {
            // 統一錯誤處理
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadPurchaseOrderData),
                GetType(),
                additionalData: new { PurchaseOrderId = PurchaseOrderId }
            );
            
            // 設置預設值避免頁面崩潰
            purchaseOrder = null;
            purchaseOrderDetails = new List<ERPCore2.Data.Entities.PurchaseOrderDetail>();
            
            await NotificationService.ShowErrorAsync($"載入採購訂單資料時發生錯誤：{ex.Message}");
            
            // 重新拋出異常讓 GenericDetailPageComponent 處理
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task LoadAdditionalData()
    {
        try
        {
            // 由於GetByIdAsync已經Include所有關聯資料，這裡不需要額外查詢
            // 所有資料已在LoadPurchaseOrderData中處理完成
            
            // 如果有額外的資料載入需求，可以在此處理
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            // 額外資料載入失敗不應該影響主要功能
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadAdditionalData),
                GetType(),
                additionalData: new { PurchaseOrderId = PurchaseOrderId }
            );
        }
    }
    
    private Task OnPurchaseOrderDataLoaded()
    {
        try
        {
            // 資料載入完成後的處理
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            // 資料載入後處理失敗不應該影響主要功能
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnPurchaseOrderDataLoaded),
                GetType(),
                additionalData: new { PurchaseOrderId = PurchaseOrderId }
            );
            return Task.CompletedTask;
        }
    }
    
    private RenderFragment BuildBasicInfoContent()
    {
        return @<div class="row">
            @if (purchaseOrder != null)
            {
                <BasicInfoDisplayComponent 
                    Title="採購訂單基本資料"
                    IconClass="fas fa-file-invoice"
                    Fields="@GetBasicInfoFields()" />
            }
        </div>;
    }
    
    private RenderFragment BuildDetailsContent()
    {
        return @<div>
            @if (purchaseOrderDetails?.Any() == true)
            {
                <div class="card">
                    <div class="card-header bg-light">
                        <h6 class="mb-0 d-flex align-items-center">
                            <i class="fas fa-list me-2"></i>
                            採購明細
                            <span class="badge bg-primary ms-auto">@purchaseOrderDetails.Count 項商品</span>
                        </h6>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>商品代碼</th>
                                        <th>商品名稱</th>
                                        <th>規格</th>
                                        <th>單位</th>
                                        <th class="text-end">訂購數量</th>
                                        <th class="text-end">已進貨數量</th>
                                        <th class="text-end">待進貨數量</th>
                                        <th class="text-end">單價</th>
                                        <th class="text-end">小計</th>
                                        <th>預計到貨日</th>
                                        <th>備註</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var detail in purchaseOrderDetails)
                                    {
                                        <tr>
                                            <td>
                                                <code class="text-primary">@detail.Product?.ProductCode</code>
                                            </td>
                                            <td>
                                                <div class="fw-medium">@detail.Product?.ProductName</div>
                                            </td>
                                            <td>
                                                <span class="text-muted">@(detail.Product?.Specification ?? "-")</span>
                                            </td>
                                            <td>
                                                <span class="badge bg-light text-dark">@(detail.Product?.Unit?.UnitName ?? "-")</span>
                                            </td>
                                            <td class="text-end">
                                                <span class="fw-medium">@detail.OrderQuantity.ToString("N0")</span>
                                            </td>
                                            <td class="text-end">
                                                <span class="@(detail.ReceivedQuantity > 0 ? "text-success fw-medium" : "text-muted")">
                                                    @detail.ReceivedQuantity.ToString("N0")
                                                </span>
                                            </td>
                                            <td class="text-end">
                                                @{
                                                    var pendingQty = detail.PendingQuantity;
                                                    var badgeClass = pendingQty == 0 ? "bg-success" : "bg-warning";
                                                }
                                                <span class="badge @badgeClass">@pendingQty.ToString("N0")</span>
                                            </td>
                                            <td class="text-end">
                                                <span class="fw-medium">@detail.UnitPrice.ToString("C")</span>
                                            </td>
                                            <td class="text-end">
                                                <span class="fw-bold text-primary">@detail.SubtotalAmount.ToString("C")</span>
                                            </td>
                                            <td>
                                                @if (detail.ExpectedDeliveryDate.HasValue)
                                                {
                                                    <span class="text-info">@detail.ExpectedDeliveryDate.Value.ToString("MM/dd")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(detail.DetailRemarks))
                                                {
                                                    <span class="text-secondary" title="@detail.DetailRemarks">
                                                        <i class="fas fa-comment-alt"></i>
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    此採購訂單尚未設定採購明細。
                </div>
            }
        </div>;
    }
    
    private RenderFragment BuildSummaryContent()
    {
        return @<div class="row">
            @if (purchaseOrder != null)
            {
                <div class="col-12">
                    <div class="card border-success">
                        <div class="card-header bg-success text-white">
                            <h6 class="mb-0 d-flex align-items-center">
                                <i class="fas fa-calculator me-2"></i>
                                金額摘要
                            </h6>
                        </div>
                        <div class="card-body">
                            <div class="row g-3">
                                <div class="col-md-3">
                                    <div class="text-center p-3 bg-light rounded">
                                        <div class="text-muted small">訂單總金額</div>
                                        <div class="h4 text-primary mb-0">@purchaseOrder.TotalAmount.ToString("C")</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center p-3 bg-light rounded">
                                        <div class="text-muted small">稅額</div>
                                        <div class="h4 text-info mb-0">@purchaseOrder.TaxAmount.ToString("C")</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center p-3 bg-light rounded">
                                        <div class="text-muted small">已進貨金額</div>
                                        <div class="h4 text-success mb-0">@purchaseOrder.ReceivedAmount.ToString("C")</div>
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="text-center p-3 bg-light rounded">
                                        <div class="text-muted small">待進貨金額</div>
                                        @{
                                            var pendingAmount = purchaseOrder.TotalAmount - purchaseOrder.ReceivedAmount;
                                            var pendingClass = pendingAmount == 0 ? "text-success" : "text-warning";
                                        }
                                        <div class="h4 @pendingClass mb-0">@pendingAmount.ToString("C")</div>
                                    </div>
                                </div>
                            </div>
                            
                            @if (purchaseOrderDetails?.Any() == true)
                            {
                                <hr class="my-4">
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-3">進貨進度統計</h6>
                                        @{
                                            var totalItems = purchaseOrderDetails.Count;
                                            var completedItems = purchaseOrderDetails.Count(d => d.PendingQuantity == 0);
                                            var progressPercentage = totalItems > 0 ? (completedItems * 100.0 / totalItems) : 0;
                                        }
                                        <div class="mb-2 d-flex justify-content-between">
                                            <span>已完成項目</span>
                                            <span class="fw-medium">@completedItems / @totalItems</span>
                                        </div>
                                        <div class="progress mb-3" style="height: 10px;">
                                            <div class="progress-bar bg-success" 
                                                 role="progressbar" 
                                                 style="width: @(progressPercentage)%"
                                                 aria-valuenow="@progressPercentage" 
                                                 aria-valuemin="0" 
                                                 aria-valuemax="100">
                                            </div>
                                        </div>
                                        <small class="text-muted">完成度：@(progressPercentage.ToString("F1"))%</small>
                                    </div>
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-3">數量統計</h6>
                                        @{
                                            var totalOrderQty = purchaseOrderDetails.Sum(d => d.OrderQuantity);
                                            var totalReceivedQty = purchaseOrderDetails.Sum(d => d.ReceivedQuantity);
                                            var totalPendingQty = purchaseOrderDetails.Sum(d => d.PendingQuantity);
                                        }
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>總訂購數量</span>
                                            <span class="fw-medium">@totalOrderQty.ToString("N0")</span>
                                        </div>
                                        <div class="d-flex justify-content-between mb-2">
                                            <span>已進貨數量</span>
                                            <span class="fw-medium text-success">@totalReceivedQty.ToString("N0")</span>
                                        </div>
                                        <div class="d-flex justify-content-between">
                                            <span>待進貨數量</span>
                                            <span class="fw-medium text-warning">@totalPendingQty.ToString("N0")</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>;
    }
    
    private RenderFragment BuildSystemInfoContent()
    {
        return @<div>
            <SystemInfoDisplayComponent 
                CreatedAt="@(purchaseOrder?.CreatedAt ?? DateTime.MinValue)"
                UpdatedAt="@purchaseOrder?.UpdatedAt"
                CreatedBy="@purchaseOrder?.CreatedBy"
                UpdatedBy="@purchaseOrder?.UpdatedBy"
                Remarks="@purchaseOrder?.OrderRemarks"
                ShowTimeline="true"
                ShowRemarks="true" />
        </div>;
    }
    
    private List<BasicInfoDisplayComponent.BasicInfoField> GetBasicInfoFields()
    {
        if (purchaseOrder == null) return new List<BasicInfoDisplayComponent.BasicInfoField>();
        
        return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "採購單號",
                Value = purchaseOrder.PurchaseOrderNumber,
                IconClass = "fas fa-file-invoice-dollar",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary",
                IsPrimary = true,
                ColSize = 6
            },
            new()
            {
                Label = "供應商",
                Value = purchaseOrder.Supplier?.CompanyName,
                IconClass = "fas fa-building",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success",
                ColSize = 6
            },
            new()
            {
                Label = "訂單日期",
                Value = purchaseOrder.OrderDate.ToString("yyyy年MM月dd日"),
                Format = BasicInfoDisplayComponent.FieldFormat.Date,
                IconClass = "fas fa-calendar-alt",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning",
                ColSize = 6
            },
            new()
            {
                Label = "預計到貨日期",
                Value = purchaseOrder.ExpectedDeliveryDate?.ToString("yyyy年MM月dd日"),
                EmptyText = "未設定",
                Format = BasicInfoDisplayComponent.FieldFormat.Date,
                IconClass = "fas fa-truck",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 6
            },
            new()
            {
                Label = "倉庫",
                Value = purchaseOrder.Warehouse?.WarehouseName,
                EmptyText = "未指定",
                IconClass = "fas fa-warehouse",
                IconBgClass = "bg-dark bg-opacity-10",
                IconTextClass = "text-dark",
                ColSize = 6
            },
            new()
            {
                Label = "採購人員",
                Value = purchaseOrder.PurchasePersonnel,
                EmptyText = "未設定",
                IconClass = "fas fa-user",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary",
                ColSize = 6
            },
            new()
            {
                Label = "核准人員",
                Value = purchaseOrder.ApprovedByUser != null 
                    ? $"{purchaseOrder.ApprovedByUser.FirstName} {purchaseOrder.ApprovedByUser.LastName}".Trim()
                    : null,
                EmptyText = "尚未核准",
                IconClass = "fas fa-user-check",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success",
                ColSize = 6
            },
            new()
            {
                Label = "核准時間",
                Value = purchaseOrder.ApprovedAt?.ToString("yyyy年MM月dd日 HH:mm"),
                EmptyText = "尚未核准",
                Format = BasicInfoDisplayComponent.FieldFormat.DateTime,
                IconClass = "fas fa-clock",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success",
                ColSize = 6
            },
            new()
            {
                Label = "訂單備註",
                Value = purchaseOrder.OrderRemarks,
                EmptyText = "無",
                IconClass = "fas fa-comment",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning",
                ColSize = 12
            }
        };
    }
    
}
