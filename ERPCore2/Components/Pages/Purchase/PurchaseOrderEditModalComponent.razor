@* 可重用的採購單編輯組件 - 可在任何頁面中嵌入 *@
@using ERPCore2.Components.Shared.Buttons
@inject IPurchaseOrderService PurchaseOrderService
@inject ISupplierService SupplierService
@inject ICompanyService CompanyService
@inject IProductService ProductService
@inject INotificationService NotificationService
@inject IReportPrintConfigurationService ReportPrintConfigurationService
@inject ISystemParameterService SystemParameterService
@inject NavigationManager NavigationManager
@inject ActionButtonHelper ActionButtonHelper
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<GenericEditModalComponent TEntity="PurchaseOrder" 
                          TService="IPurchaseOrderService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@PurchaseOrderId"
                          Service="@PurchaseOrderService"
                          EntityName="採購單"
                          EntityNamePlural="採購單"
                          ModalTitle="@(PurchaseOrderId.HasValue ? "編輯採購單" : "新增採購單")"
                          Size="GenericEditModalComponent<PurchaseOrder, IPurchaseOrderService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadPurchaseOrderData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          SaveHandler="@SavePurchaseOrderWrapper"
                          SaveSuccessMessage="@(PurchaseOrderId.HasValue ? "採購單更新成功" : "採購單新增成功")"
                          SaveFailureMessage="採購單儲存失敗"
                          RequiredPermission="PurchaseOrder.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          CustomValidator="@ValidatePurchaseOrderDetailsAsync"
                          CustomModules="@GetCustomModules()"
                          ShowPrintButton = "true"
                          OnPrint="@HandlePrint"
                          ShowApprovalSection="@ShouldShowApprovalSection()"
                          ApprovalPermission="PurchaseOrder.Approve"
                          OnApprove="@HandlePurchaseOrderApprove"
                          OnReject="@HandlePurchaseOrderReject"
                          FormHeaderContent="@GetWarningMessage()"
                          CustomActionButtons="@GetCustomActionButtons()">
</GenericEditModalComponent>

@* 廠商編輯 Modal *@
<SupplierEditModalComponent @ref="supplierEditModal"
                           IsVisible="@supplierModalManager.IsModalVisible"
                           IsVisibleChanged="@supplierModalManager.HandleModalVisibilityChangedAsync"
                           SupplierId="@supplierModalManager.SelectedEntityId"
                           PrefilledValues="@supplierModalManager.PrefilledValues"
                           OnSupplierSaved="@OnSupplierSavedWrapper"
                           OnCancel="@supplierModalManager.HandleModalCancelAsync" />

@* 進貨單編輯 Modal *@
<PurchaseReceivingEditModalComponent @ref="purchaseReceivingEditModal"
                                     IsVisible="@showPurchaseReceivingModal"
                                     IsVisibleChanged="@((bool visible) => showPurchaseReceivingModal = visible)"
                                     PurchaseReceivingId="@selectedPurchaseReceivingId"
                                     OnPurchaseReceivingSaved="@HandlePurchaseReceivingSaved"
                                     OnCancel="@(() => showPurchaseReceivingModal = false)" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? PurchaseOrderId { get; set; }
    [Parameter] public EventCallback<PurchaseOrder> OnPurchaseOrderSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<PurchaseOrder, IPurchaseOrderService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 原始資料集合（用於 AutoComplete）
    private List<Supplier> availableSuppliers = new();
    private List<Company> availableCompanies = new();
    private List<Product> availableProducts = new();
    private List<Product> filteredProductsBySupplier = new(); // 根據廠商過濾的商品
    
    // 採購訂單明細
    private List<PurchaseOrderDetail> purchaseOrderDetails = new();
    private PurchaseOrderDetailManagerComponent<PurchaseOrder, PurchaseOrderDetail>? purchaseOrderDetailManager;
    
    // Modal 管理器
    private SupplierEditModalComponent? supplierEditModal;
    private RelatedEntityModalManager<Supplier> supplierModalManager = default!;
    
    // ===== 相關單據 Modal =====
    private PurchaseReceivingEditModalComponent? purchaseReceivingEditModal;
    private bool showPurchaseReceivingModal = false;
    private int? selectedPurchaseReceivingId = null;
    
    // 下拉選單選項（向下相容）
    private List<Supplier> suppliers = new();
    private List<Company> companies = new();
    private List<SelectOption> supplierOptions = new();
    private List<SelectOption> companyOptions = new();
    private List<SelectOption> statusOptions = new();
    
    // 系統參數 - 稅率快取（避免重複查詢資料庫）
    private decimal currentTaxRate = 5.0m; // 預設 5%，實際值會在初始化時從資料庫載入
    
    // ===== 鎖定狀態 =====
    private bool hasUndeletableDetails = false; // 是否有不可刪除的明細（已有進貨記錄）

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeSupplierModalManager();
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化採購單編輯組件時發生錯誤");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            // 打開時,如果是新增模式,重置鎖定狀態
            if (!PurchaseOrderId.HasValue)
            {
                hasUndeletableDetails = false;
            }
            
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
    }

    private async Task HandleSaveSuccess()
    {
        try
        {
            if (OnPurchaseOrderSaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnPurchaseOrderSaved.InvokeAsync(editModalComponent.Entity);
            }

            await CloseModal();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleSaveSuccess), GetType(), 
                additionalData: "採購單編輯Modal儲存成功處理失敗");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
            // 不要直接調用 CloseModal，讓 GenericEditModalComponent 處理
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleCancel), GetType(), 
                additionalData: "採購單編輯Modal取消處理失敗");
        }
    }

    private async Task HandlePrint()
    {
        try
        {
            // 使用通用 Helper 進行完整驗證（實體、ID、核准狀態）
            var (isValid, errorMessage) = ReportPrintHelper.ValidateForPrint(
                entity: editModalComponent?.Entity,
                entityId: PurchaseOrderId,
                isApproved: editModalComponent?.Entity?.IsApproved ?? false,
                entityName: "採購單",
                requireApproval: true
            );
            
            if (!isValid)
            {
                await NotificationService.ShowWarningAsync(errorMessage);
                return;
            }
            
            // 直接執行列印，使用預設設定
            await HandleDirectPrint(null);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandlePrint), GetType(), 
                additionalData: $"採購單列印處理失敗 - ID: {PurchaseOrderId}");
            await NotificationService.ShowErrorAsync("列印處理時發生錯誤");
        }
    }

    /// <summary>
    /// 直接執行列印 - 可以使用指定的列印配置或預設配置
    /// </summary>
    private async Task HandleDirectPrint(ReportPrintConfiguration? printConfig)
    {
        try
        {
            if (!PurchaseOrderId.HasValue)
            {
                await NotificationService.ShowWarningAsync("無法列印：採購單ID不存在");
                return;
            }

            // 驗證列印配置
            var (isValid, errorMessage) = ReportPrintHelper.ValidateConfiguration(printConfig);
            if (!isValid)
            {
                await NotificationService.ShowWarningAsync($"列印配置無效：{errorMessage}");
                return;
            }

            // 使用通用 Helper 建立列印 URL（新版路由）
            var printUrl = ReportPrintHelper.BuildPrintUrl(
                baseUrl: NavigationManager.BaseUri,
                reportType: "purchase-report/order",
                documentId: PurchaseOrderId.Value,
                configuration: printConfig,
                autoprint: true
            );

            // 使用通用 Helper 執行列印（隱藏 iframe 方式）
            var success = await ReportPrintHelper.ExecutePrintWithHiddenIframeAsync(
                printUrl: printUrl,
                jsRuntime: JSRuntime,
                iframeId: "printFrame"
            );
            
            if (success)
            {
                var configName = ReportPrintHelper.GetDisplayName(printConfig);
                await NotificationService.ShowSuccessAsync($"已使用 {configName} 送出列印");
            }
            else
            {
                await NotificationService.ShowErrorAsync("列印執行失敗");
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleDirectPrint), GetType(), 
                additionalData: $"採購單直接列印失敗 - ID: {PurchaseOrderId}, Config: {printConfig?.ReportName}");
            await NotificationService.ShowErrorAsync("列印執行時發生錯誤");
        }
    }

    private async Task CloseModal()
    {
        try
        {
            if (IsVisibleChanged.HasDelegate)
            {
                await IsVisibleChanged.InvokeAsync(false);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(CloseModal), GetType(), 
                additionalData: "採購單編輯Modal關閉失敗");
        }
    }

    private async Task<PurchaseOrder?> LoadPurchaseOrderData()
    {
        try
        {
            if (!PurchaseOrderId.HasValue)
            {
                // 新增模式 - 自動產生採購單號並設定預設公司
                var generatedCode = await GeneratePurchaseOrderNumberAsync();
                
                // 取得預設公司
                var primaryCompany = await CompanyService.GetPrimaryCompanyAsync();
                
                var newOrder = new PurchaseOrder
                {
                    OrderDate = DateTime.Today,
                    ExpectedDeliveryDate = DateTime.Today.AddDays(7),
                    Status = EntityStatus.Active,
                    TotalAmount = 0,
                    PurchaseOrderNumber = generatedCode,
                    CompanyId = primaryCompany?.Id ?? 1 // 設定預設公司，如果沒有主要公司則為1
                };
                
                // 清空明細
                purchaseOrderDetails.Clear();
                
                // 🔑 新增模式時,重置鎖定狀態為 false
                hasUndeletableDetails = false;
                
                return newOrder;
            }

            // 編輯模式 - 載入採購單和明細
            var purchaseOrder = await PurchaseOrderService.GetByIdAsync(PurchaseOrderId.Value);
            
            if (purchaseOrder != null)
            {
                // 載入採購單明細
                await LoadPurchaseOrderDetails(PurchaseOrderId.Value);
                
                // 在實體載入後重新初始化表單欄位以反映正確的唯讀狀態
                await Task.Delay(10); // 短暫延遲確保實體已設定
                _ = Task.Run(async () =>
                {
                    await InvokeAsync(async () =>
                    {
                        await InitializeFormFieldsAsync();
                        StateHasChanged();
                    });
                });
                
                // 觸發重新渲染以更新 ProductManagerComponent
                StateHasChanged();
            }
            
            return purchaseOrder;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPurchaseOrderData), GetType(), 
                additionalData: $"載入採購單資料失敗 - ID: {PurchaseOrderId}");
            await NotificationService.ShowErrorAsync($"載入採購單資料時發生錯誤：{ex.Message}");
            return null;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入廠商選項
            suppliers = await SupplierService.GetAllAsync();
            availableSuppliers = suppliers; // 用於 AutoComplete
            supplierOptions = suppliers.Where(s => s.Status == EntityStatus.Active)
                .Select(s => new SelectOption
                {
                    Text = s.CompanyName,
                    Value = s.Id.ToString()
                }).ToList();

            // 載入公司選項
            companies = await CompanyService.GetAllAsync();
            availableCompanies = companies; // 用於 AutoComplete
            companyOptions = companies.Where(c => c.Status == EntityStatus.Active)
                .Select(c => new SelectOption
                {
                    Text = c.CompanyName,
                    Value = c.Id.ToString()
                }).ToList();

            // 載入商品資料
            availableProducts = await ProductService.GetAllAsync();
            
            // 🔑 一次性載入系統稅率（避免每次計算都查詢資料庫）
            try
            {
                currentTaxRate = await SystemParameterService.GetTaxRateAsync();
            }
            catch (Exception)
            {
                // 如果載入失敗，使用預設值 5%
                currentTaxRate = 5.0m;
            }

            // 初始化狀態選項
            statusOptions = new List<SelectOption>
            {
                new SelectOption { Text = "啟用", Value = "Active" },
                new SelectOption { Text = "停用", Value = "Inactive" }
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalDataAsync), GetType(), 
                additionalData: "採購單編輯Modal載入額外資料失敗");
            
            // 設定安全的預設值
            supplierOptions = new List<SelectOption>();
            companyOptions = new List<SelectOption>();
            statusOptions = new List<SelectOption>();
            availableProducts = new List<Product>();
        }
    }

    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            // 🔑 不再使用 IsApproved 鎖定，改用 hasUndeletableDetails
            // 只有當明細有「下一步動作」時才鎖定
            
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(PurchaseOrder.PurchaseOrderNumber),
                    Label = "採購單號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入採購單號",
                    IsRequired = true,
                    MaxLength = 30,
                    HelpText = "採購單的唯一編號，新增時系統會自動產生，也可手動修改",
                    IsReadOnly = hasUndeletableDetails
                },
                new()
                {
                    PropertyName = nameof(PurchaseOrder.SupplierId),
                    Label = "篩選廠商",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇廠商",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "輸入廠商名稱進行搜尋，或直接選擇",
                    ActionButtons = await GetSupplierActionButtonsAsync(),
                    IsReadOnly = hasUndeletableDetails
                },
                new()
                {
                    PropertyName = nameof(PurchaseOrder.CompanyId),
                    Label = "採購公司",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請選擇採購公司",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "選擇進行此次採購的公司",
                    IsReadOnly = hasUndeletableDetails
                },
                new()
                {
                    PropertyName = nameof(PurchaseOrder.OrderDate),
                    Label = "採購日",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    HelpText = "採購單建立日期",
                    IsReadOnly = hasUndeletableDetails
                },
                new()
                {
                    PropertyName = nameof(PurchaseOrder.ExpectedDeliveryDate),
                    Label = "交貨日",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    HelpText = "預計廠商交貨的日期",
                    IsReadOnly = hasUndeletableDetails
                },
                new FormFieldDefinition()
                {
                    PropertyName = nameof(PurchaseOrder.TotalAmount),
                    Label = "採購總金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    HelpText = "採購單的總金額，根據明細自動計算",
                    IsReadOnly = true // 總金額欄位始終為唯讀
                },
                new FormFieldDefinition()
                {
                    PropertyName = nameof(PurchaseOrder.PurchaseTaxAmount),
                    Label = $"採購稅額({currentTaxRate:F2}%)",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    HelpText = $"採購單的稅額，根據明細自動計算（稅率：{currentTaxRate:F2}%）",
                    IsReadOnly = true // 稅額欄位始終為唯讀
                },
                new FormFieldDefinition()
                {
                    PropertyName = nameof(PurchaseOrder.PurchaseTotalAmountIncludingTax),
                    Label = "含稅總金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    HelpText = "採購單的含稅總金額，根據明細自動計算",
                    IsReadOnly = true // 含稅總金額欄位始終為唯讀
                },

                new FormFieldDefinition()
                {
                    PropertyName = nameof(PurchaseOrder.RejectReason),
                    Label = "駁回原因",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入駁回原因",
                    IsRequired = false,
                    MaxLength = 50,
                    HelpText = "其他需要記錄的駁回原因",
                    ContainerCssClass = "col-6",
                    IsReadOnly = false // 駁回原因不需鎖定
                },

                FormFieldConfigurationHelper.CreateRemarksField<PurchaseOrder>(containerCssClass:"col-6"),
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(PurchaseOrder.PurchaseOrderNumber), "基本資訊" },                
                { nameof(PurchaseOrder.SupplierId), "基本資訊" },
                { nameof(PurchaseOrder.CompanyId), "基本資訊" },
                { nameof(PurchaseOrder.OrderDate), "基本資訊" },
                { nameof(PurchaseOrder.ExpectedDeliveryDate), "基本資訊" },
                { nameof(PurchaseOrder.TotalAmount), "金額資訊(系統自動計算)" },
                { nameof(PurchaseOrder.PurchaseTaxAmount), "金額資訊(系統自動計算)" },
                { nameof(PurchaseOrder.PurchaseTotalAmountIncludingTax), "金額資訊(系統自動計算)" },
                { nameof(PurchaseOrder.RejectReason), "額外資訊" },
                { nameof(PurchaseOrder.Remarks), "額外資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFieldsAsync), GetType(), 
                additionalData: "採購單編輯Modal表單欄位初始化失敗");
            
            // 設定安全的預設值
            formFields = new List<FormFieldDefinition>();
            formSections = new Dictionary<string, string>();
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 生成採購單號
    /// </summary>
    private async Task<string> GeneratePurchaseOrderNumberAsync()
    {
        try
        {
            return await PurchaseOrderService.GenerateOrderNumberAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GeneratePurchaseOrderNumberAsync), GetType(), 
                additionalData: "生成採購單號失敗");
            
            // 如果服務方法失敗，使用 CodeGenerationHelper 作為後備
            return CodeGenerationHelper.GenerateSimpleEntityCode("PO", usePreciseTimestamp: true);
        }
    }
    
    // ===== AutoComplete 配置方法 =====
    
    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(PurchaseOrder.CompanyId), searchTerm => new Dictionary<string, object?>
                {
                    { "CompanyName", searchTerm }
                }
            },
            {
                nameof(PurchaseOrder.SupplierId), searchTerm => new Dictionary<string, object?>
                {
                    { "CompanyName", searchTerm }
                }
            }
        };
    }
    
    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(PurchaseOrder.CompanyId), availableCompanies.Cast<object>() },
            { nameof(PurchaseOrder.SupplierId), availableSuppliers.Cast<object>() }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(PurchaseOrder.CompanyId), "CompanyName" },
            { nameof(PurchaseOrder.SupplierId), "CompanyName" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(PurchaseOrder.CompanyId), "Id" },
            { nameof(PurchaseOrder.SupplierId), "Id" }
        };
    }
    
    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(PurchaseOrder.SupplierId), supplierModalManager }
        };
    }
    
    /// <summary>
    /// 配置自訂模組
    /// </summary>
    private List<GenericEditModalComponent<PurchaseOrder, IPurchaseOrderService>.CustomModule> GetCustomModules()
    {
        // 確保只在需要時才返回模組，並且檢查所有必要的條件
        if (editModalComponent == null)
        {
            return new List<GenericEditModalComponent<PurchaseOrder, IPurchaseOrderService>.CustomModule>();
        }

        return new List<GenericEditModalComponent<PurchaseOrder, IPurchaseOrderService>.CustomModule>
        {
            new GenericEditModalComponent<PurchaseOrder, IPurchaseOrderService>.CustomModule
            {
                @* Title = "採購明細", *@
                Order = 1,
                @* CssClass = "mt-4", *@
                IsVisible = true,
                Content = CreateProductManagerContent()
            }
        };
    }

    /// <summary>
    /// 創建商品管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreateProductManagerContent() => __builder =>
    {
        try
        {
            @if (editModalComponent?.Entity != null)
            {
                // 檢查是否有可用的商品資料
                @if (availableProducts != null && availableProducts.Any())
                {
                    // 檢查是否已選擇廠商
                    @if (editModalComponent.Entity.SupplierId > 0)
                    {
                        <PurchaseOrderDetailManagerComponent @ref="purchaseOrderDetailManager"
                                                   TMainEntity="PurchaseOrder" 
                                                   TDetailEntity="PurchaseOrderDetail"
                                                   Products="@availableProducts"
                                                   SelectedSupplierId="@editModalComponent.Entity.SupplierId"
                                                   MainEntity="@editModalComponent.Entity"
                                                   ExistingDetails="@purchaseOrderDetails"
                                                   OnDetailsChanged="@HandleDetailsChanged"
                                                   MainEntityIdPropertyName="PurchaseOrderId"
                                                   QuantityPropertyName="OrderQuantity"
                                                   ReceivedQuantityPropertyName="ReceivedQuantity"
                                                   UnitPricePropertyName="UnitPrice"
                                                   RemarksPropertyName="Remarks"
                                                   IsReadOnly="false"
                                                   IsApproved="@(editModalComponent.Entity.IsApproved)"
                                                   OnHasUndeletableDetailsChanged="@HandleHasUndeletableDetailsChanged"
                                                   OnOpenRelatedDocument="@HandleOpenRelatedDocument" />
                    }
                    else
                    {
                        <div class="alert alert-info text-center" role="alert">
                            <i class="fas fa-info-circle me-2"></i>
                            請先選擇廠商後再進行採購明細管理
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-warning text-center" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        無可用的商品資料，請聯繫系統管理員
                    </div>
                }
            }
            else
            {
                <div class="text-center py-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">載入中...</span>
                    </div>
                </div>
            }
        }
        catch
        {
            <div class="alert alert-warning" role="alert">
                載入明細管理器時發生錯誤，請重新整理頁面。
            </div>
        }
    };
    
    // ===== Modal 管理器初始化方法 =====
    
    /// <summary>
    /// 初始化廠商 Modal 管理器
    /// </summary>
    private void InitializeSupplierModalManager()
    {
        supplierModalManager = new RelatedEntityManagerBuilder<Supplier>(NotificationService, "廠商")
            .WithPropertyName(nameof(PurchaseOrder.SupplierId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(supplierId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.SupplierId = supplierId;
                }
            })
            .WithCustomPostProcess(async supplier => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }
    
    // ===== ActionButton 產生方法 =====
    
    /// <summary>
    /// 產生廠商操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetSupplierActionButtonsAsync()
    {
        // 🔑 改用 hasUndeletableDetails 判斷，而非 IsApproved
        if (hasUndeletableDetails)
        {
            return new List<FieldActionButton>();
        }
        
        var buttons = await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            supplierModalManager, 
            nameof(PurchaseOrder.SupplierId)
        );
        
        return buttons;
    }
    
    /// <summary>
    /// 更新欄位的唯讀狀態 - 根據是否有不可刪除的明細
    /// </summary>
    private async void UpdateFieldsReadOnlyState()
    {
        // 廠商欄位
        var supplierField = formFields.FirstOrDefault(f => f.PropertyName == nameof(PurchaseOrder.SupplierId));
        if (supplierField != null)
        {
            supplierField.IsReadOnly = hasUndeletableDetails;
            
            // 如果有不可刪除的明細，移除操作按鈕；否則恢復操作按鈕
            if (hasUndeletableDetails)
            {
                supplierField.ActionButtons = new List<FieldActionButton>();
            }
            else
            {
                supplierField.ActionButtons = await GetSupplierActionButtonsAsync();
            }
        }
        
        // 公司欄位
        var companyField = formFields.FirstOrDefault(f => f.PropertyName == nameof(PurchaseOrder.CompanyId));
        if (companyField != null)
        {
            companyField.IsReadOnly = hasUndeletableDetails;
        }
        
        // 採購單號欄位
        var orderNumberField = formFields.FirstOrDefault(f => f.PropertyName == nameof(PurchaseOrder.PurchaseOrderNumber));
        if (orderNumberField != null)
        {
            orderNumberField.IsReadOnly = hasUndeletableDetails;
        }
        
        // 採購日欄位
        var orderDateField = formFields.FirstOrDefault(f => f.PropertyName == nameof(PurchaseOrder.OrderDate));
        if (orderDateField != null)
        {
            orderDateField.IsReadOnly = hasUndeletableDetails;
        }
        
        // 交貨日欄位
        var deliveryDateField = formFields.FirstOrDefault(f => f.PropertyName == nameof(PurchaseOrder.ExpectedDeliveryDate));
        if (deliveryDateField != null)
        {
            deliveryDateField.IsReadOnly = hasUndeletableDetails;
        }
        
        // 重新初始化表單欄位以強制更新 UI
        await InvokeAsync(async () =>
        {
            await InitializeFormFieldsAsync();
            StateHasChanged();
        });
    }
    
    // ===== Modal 事件包裝器方法 =====
    
    /// <summary>
    /// 包裝廠商儲存事件
    /// </summary>
    private async Task OnSupplierSavedWrapper(Supplier savedSupplier)
    {
        await supplierModalManager.HandleEntitySavedAsync(savedSupplier, shouldAutoSelect: true);
    }
    
    /// <summary>
    /// 處理欄位值變更事件 - 使用統一 Helper
    /// </summary>
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 使用統一 Helper 處理廠商欄位變更
            if (fieldChange.PropertyName == nameof(PurchaseOrder.SupplierId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    supplierModalManager, 
                    formFields, 
                    nameof(PurchaseOrder.SupplierId), 
                    fieldChange.Value
                );
                
                // 廠商變更時，觸發商品管理器重新渲染
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("欄位變更處理時發生錯誤");
        }
    }

    // ===== 採購明細管理方法 =====
    
    /// <summary>
    /// 處理有不可刪除明細的狀態變更
    /// 當明細動態變化時（新增進貨、刪除進貨記錄等），這個方法會被調用
    /// </summary>
    private async Task HandleHasUndeletableDetailsChanged(bool hasUndeletable)
    {
        try
        {
            hasUndeletableDetails = hasUndeletable;
            
            // 更新欄位的唯讀狀態
            UpdateFieldsReadOnlyState();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理明細鎖定狀態時發生錯誤：{ex.Message}");
        }
    }
    
    /// <summary>
    /// 載入採購單明細
    /// </summary>
    private async Task LoadPurchaseOrderDetails(int purchaseOrderId)
    {
        try
        {
            // 從服務載入採購單明細
            purchaseOrderDetails = await PurchaseOrderService.GetOrderDetailsAsync(purchaseOrderId);
            
            // 確保不是 null
            if (purchaseOrderDetails == null)
            {
                purchaseOrderDetails = new List<PurchaseOrderDetail>();
            }
            
            // 🔑 載入明細後,檢查是否有不可刪除的明細(有進貨記錄)
            var hasReceiving = purchaseOrderDetails.Any(d => d.ReceivedQuantity > 0);
            await HandleHasUndeletableDetailsChanged(hasReceiving);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPurchaseOrderDetails), GetType(), 
                additionalData: $"載入採購單明細失敗 - OrderId: {purchaseOrderId}");
            purchaseOrderDetails = new List<PurchaseOrderDetail>();
        }
    }

    /// <summary>
    /// 處理採購明細變更
    /// </summary>
    private async Task HandleDetailsChanged(List<PurchaseOrderDetail> details)
    {
        try
        {
            purchaseOrderDetails = details ?? new List<PurchaseOrderDetail>();            
            
            // 更新主檔的總金額、稅額、含稅總額
            if (editModalComponent?.Entity != null)
            {
                // 1. 計算總金額（未稅）
                editModalComponent.Entity.TotalAmount = purchaseOrderDetails.Sum(d => d.SubtotalAmount);
                
                // 2. 計算稅額 = 總金額 × 稅率（使用快取的稅率，避免每次都查詢資料庫）
                editModalComponent.Entity.PurchaseTaxAmount = Math.Round(
                    editModalComponent.Entity.TotalAmount * (currentTaxRate / 100), 
                    2  // 四捨五入到小數點後2位
                );
                
                // 3. 含稅總額會自動計算（PurchaseTotalAmountIncludingTax 是計算屬性）
                //    = TotalAmount + PurchaseTaxAmount
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleDetailsChanged), GetType(), 
                additionalData: "處理採購明細變更失敗");
        }
    }

    /// <summary>
    /// 驗證採購單明細 - 確保至少有一筆明細
    /// </summary>
    private async Task<bool> ValidatePurchaseOrderDetailsAsync(PurchaseOrder purchaseOrder)
    {
        try
        {
            // 如果明細管理組件存在，執行驗證
            if (purchaseOrderDetailManager != null)
            {
                return await purchaseOrderDetailManager.ValidateAsync();
            }
            
            // 如果組件不存在，檢查是否有有效的明細（至少選擇了商品）
            var validDetails = purchaseOrderDetails.Where(d => d.ProductId > 0).ToList();
            
            if (!validDetails.Any())
            {
                await NotificationService.ShowErrorAsync("採購單必須至少包含一筆明細資料");
                return false;
            }
            
            return true;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"驗證明細時發生錯誤：{ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// 包裝方法 - 提供給 GenericEditModalComponent 使用的儲存處理器
    /// </summary>
    private async Task<bool> SavePurchaseOrderWrapper(PurchaseOrder purchaseOrder)
    {
        // 先執行自訂驗證
        if (!await ValidatePurchaseOrderDetailsAsync(purchaseOrder))
        {
            return false;
        }
        
        return await SavePurchaseOrderWithDetails(purchaseOrder, isPreApprovalSave: false);
    }

    /// <summary>
    /// 自訂儲存邏輯 - 同時儲存主檔和明細
    /// </summary>
    private async Task<bool> SavePurchaseOrderWithDetails(PurchaseOrder purchaseOrder, bool isPreApprovalSave = false)
    {
        try
        {
            if (purchaseOrder == null)
            {
                await NotificationService.ShowErrorAsync("沒有要儲存的採購單資料");
                return false;
            }

            // 檢查採購單是否已核准，已核准則不能修改（除非是審核前儲存）
            if (purchaseOrder.IsApproved && !isPreApprovalSave)
            {
                await NotificationService.ShowWarningAsync("採購單已核准，無法修改");
                return false;
            }

            // 更新總金額和稅額
            purchaseOrder.TotalAmount = purchaseOrderDetails.Sum(d => d.SubtotalAmount);
            purchaseOrder.PurchaseTaxAmount = Math.Round(
                purchaseOrder.TotalAmount * (currentTaxRate / 100), 
                2
            );

            // 儲存主檔
            ServiceResult<PurchaseOrder> result;
            if (PurchaseOrderId.HasValue)
            {
                result = await PurchaseOrderService.UpdateAsync(purchaseOrder);
            }
            else
            {
                result = await PurchaseOrderService.CreateAsync(purchaseOrder);
            }

            if (!result.IsSuccess || result.Data == null)
            {
                await NotificationService.ShowErrorAsync(result.ErrorMessage ?? "儲存採購單失敗");
                return false;
            }

            // 儲存明細
            await SavePurchaseOrderDetails(result.Data.Id);

            return true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SavePurchaseOrderWithDetails), GetType(), 
                additionalData: "儲存採購單和明細失敗");
            await NotificationService.ShowErrorAsync($"儲存時發生錯誤：{ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// 儲存採購單明細
    /// </summary>
    private async Task SavePurchaseOrderDetails(int purchaseOrderId)
    {
        try
        {
            // 設定主檔ID
            foreach (var detail in purchaseOrderDetails)
            {
                detail.PurchaseOrderId = purchaseOrderId;
                if (detail.Id == 0)
                {
                    detail.Status = EntityStatus.Active;
                    detail.CreatedAt = DateTime.Now;
                }
                else
                {
                    detail.UpdatedAt = DateTime.Now;
                }
            }

            // 先獲取現有的明細
            var existingDetails = await PurchaseOrderService.GetOrderDetailsAsync(purchaseOrderId);
            
            // 處理新增和更新的明細
            foreach (var detail in purchaseOrderDetails.Where(d => d.ProductId > 0))
            {
                if (detail.Id == 0)
                {
                    // 新增明細
                    await PurchaseOrderService.AddOrderDetailAsync(detail);
                }
                else
                {
                    // 更新明細
                    await PurchaseOrderService.UpdateOrderDetailAsync(detail);
                }
            }

            // 處理刪除的明細（現有的但不在當前列表中的）
            var currentDetailIds = purchaseOrderDetails.Where(d => d.Id > 0).Select(d => d.Id).ToList();
            var detailsToDelete = existingDetails.Where(e => !currentDetailIds.Contains(e.Id)).ToList();
            
            foreach (var detailToDelete in detailsToDelete)
            {
                await PurchaseOrderService.DeleteOrderDetailAsync(detailToDelete.Id);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SavePurchaseOrderDetails), GetType(), 
                additionalData: $"儲存採購單明細失敗 - OrderId: {purchaseOrderId}");
            throw; // 重新拋出例外，讓上層處理
        }
    }
    
    // ===== 審核相關方法 =====
    
    /// <summary>
    /// 判斷是否應該顯示審核區域
    /// </summary>
    private bool ShouldShowApprovalSection()
    {
        // 只有編輯現有採購單時才顯示審核區域
        return PurchaseOrderId.HasValue && PurchaseOrderId.Value > 0;
    }
    
    /// <summary>
    /// 處理採購單審核通過
    /// </summary>
    private async Task<bool> HandlePurchaseOrderApprove()
    {
        try
        {
            if (!PurchaseOrderId.HasValue)
            {
                await NotificationService.ShowErrorAsync("無法審核：採購單ID不存在");
                return false;
            }
            
            // 確認對話框
            var confirmed = await NotificationService.ShowConfirmAsync(
                "確定要審核通過此採購單嗎？系統將先儲存當前資料，然後進行審核。審核通過後將無法再修改。", 
                "審核確認");
            
            if (!confirmed)
                return false;
            
            // **方案一實施：審核前先自動儲存**
            if (editModalComponent?.Entity != null)
            {
                // 暫時允許儲存（即使已核准狀態也要能儲存，因為可能有未儲存的變更）
                var saveResult = await SavePurchaseOrderWithDetails(editModalComponent.Entity, isPreApprovalSave: true);
                if (!saveResult)
                {
                    await NotificationService.ShowErrorAsync("儲存失敗，無法進行審核");
                    return false;
                }                
            }
            
            // 呼叫服務進行審核
            var currentUserId = await GetCurrentUserIdAsync();
            if (!currentUserId.HasValue)
            {
                await NotificationService.ShowErrorAsync("無法取得當前使用者資訊");
                return false;
            }
            
            var result = await PurchaseOrderService.ApproveOrderAsync(PurchaseOrderId.Value, currentUserId.Value);
            
            if (result.IsSuccess)
            {
                return true;
            }
            else
            {
                await NotificationService.ShowErrorAsync(result.ErrorMessage ?? "審核通過失敗");
                return false;
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandlePurchaseOrderApprove), GetType(), 
                additionalData: $"採購單審核通過失敗 - OrderId: {PurchaseOrderId}");
            await NotificationService.ShowErrorAsync($"審核通過時發生錯誤：{ex.Message}");
            return false;
        }
    }
    
    /// <summary>
    /// 處理採購單審核駁回
    /// </summary>
    private async Task<bool> HandlePurchaseOrderReject()
    {
        try
        {
            if (!PurchaseOrderId.HasValue)
            {
                await NotificationService.ShowErrorAsync("無法審核：採購單ID不存在");
                return false;
            }
            
            // 使用 JavaScript prompt 來取得駁回原因
            var rejectReason = await JSRuntime.InvokeAsync<string>("prompt", "請輸入駁回原因：", "");
            
            if (string.IsNullOrWhiteSpace(rejectReason))
            {
                await NotificationService.ShowWarningAsync("駁回原因不能為空");
                return false;
            }
            
            // 確認對話框
            var confirmed = await NotificationService.ShowConfirmAsync(
                $"確定要駁回此採購單嗎？\n駁回原因：{rejectReason}\n\n駁回後採購單將退回修改。", 
                "審核確認");
            
            if (!confirmed)
                return false;
            
            // 取得當前使用者ID
            var currentUserId = await GetCurrentUserIdAsync();
            if (!currentUserId.HasValue)
            {
                await NotificationService.ShowErrorAsync("無法取得當前使用者資訊");
                return false;
            }
            
            // 呼叫服務進行駁回
            var result = await PurchaseOrderService.RejectOrderAsync(PurchaseOrderId.Value, currentUserId.Value, rejectReason);
            
            if (result.IsSuccess)
            {
                await NotificationService.ShowSuccessAsync("採購單已駁回");
                // 重新載入資料以更新界面
                if (editModalComponent != null)
                {
                    await editModalComponent.RefreshEntityAsync();
                }
                return true;
            }
            else
            {
                await NotificationService.ShowErrorAsync(result.ErrorMessage ?? "駁回失敗");
                return false;
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandlePurchaseOrderReject), GetType(), 
                additionalData: $"採購單審核駁回失敗 - OrderId: {PurchaseOrderId}");
            await NotificationService.ShowErrorAsync($"審核駁回時發生錯誤：{ex.Message}");
            return false;
        }
    }
    
    /// <summary>
    /// 取得警告訊息（顯示在表單欄位上方）
    /// 當採購單明細有進貨記錄時，顯示鎖定警告訊息
    /// </summary>
    private RenderFragment? GetWarningMessage() => __builder =>
    {
        @if (hasUndeletableDetails)
        {
            <div class="alert alert-warning mb-2 py-2" role="alert">
                <i class="fas fa-lock me-2"></i>因部分明細已有進貨記錄，為保護資料完整性主檔欄位已設唯讀。
            </div>
        }
    };
    
    /// <summary>
    /// 取得自訂操作按鈕（顯示在 Modal 頂部左側）
    /// </summary>
    private RenderFragment? GetCustomActionButtons() => __builder =>
    {
        @* 轉進貨單按鈕 - 只在採購單已儲存且已核准時顯示 *@
        @if (editModalComponent?.Entity != null && 
            PurchaseOrderId.HasValue && 
            editModalComponent.Entity.IsApproved)
        {
            <GenericButtonComponent Text="轉進貨" 
                                  Variant="ButtonVariant.Success" 
                                  OnClick="HandleCreateReceivingFromOrder" />
        }
    };
    
    /// <summary>
    /// 取得當前使用者ID
    /// </summary>
    private async Task<int?> GetCurrentUserIdAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (!user.Identity?.IsAuthenticated ?? true)
                return null;

            // 從Claims中取得使用者ID (通常存在NameIdentifier中)
            var employeeIdClaim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (int.TryParse(employeeIdClaim, out int employeeId))
                return employeeId;

            return null;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetCurrentUserIdAsync), GetType(), 
                additionalData: "取得當前使用者ID失敗");
            return null;
        }
    }
    
    // ===== 相關單據開啟處理方法 =====
    
    /// <summary>
    /// 處理開啟相關單據的事件
    /// </summary>
    private async Task HandleOpenRelatedDocument((RelatedDocumentType type, int id) args)
    {
        try
        {
            switch (args.type)
            {
                case RelatedDocumentType.ReceivingDocument:
                    // 開啟進貨單 Modal
                    selectedPurchaseReceivingId = args.id;
                    showPurchaseReceivingModal = true;
                    StateHasChanged();
                    break;
                    
                default:
                    await NotificationService.ShowWarningAsync($"不支援的單據類型：{args.type}");
                    break;
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleOpenRelatedDocument), GetType(), 
                additionalData: $"開啟相關單據失敗 - Type: {args.type}, Id: {args.id}");
            await NotificationService.ShowErrorAsync("開啟單據時發生錯誤");
        }
    }
    
    /// <summary>
    /// 處理進貨單儲存後的事件
    /// </summary>
    private async Task HandlePurchaseReceivingSaved(PurchaseReceiving savedReceiving)
    {
        try
        {
            // 關閉 Modal
            showPurchaseReceivingModal = false;
            selectedPurchaseReceivingId = null;
            
            // 重新載入採購單明細以更新已收貨數量
            if (PurchaseOrderId.HasValue)
            {
                await LoadPurchaseOrderDetails(PurchaseOrderId.Value);
                
                // 通知使用者
                await NotificationService.ShowSuccessAsync($"進貨單 {savedReceiving.ReceiptNumber} 已更新");
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandlePurchaseReceivingSaved), GetType(), 
                additionalData: $"處理進貨單儲存事件失敗 - ReceivingId: {savedReceiving?.Id}");
        }
    }
    
    /// <summary>
    /// 從採購單轉進貨單
    /// </summary>
    private async Task HandleCreateReceivingFromOrder()
    {
        try
        {
            if (!PurchaseOrderId.HasValue || editModalComponent?.Entity == null)
            {
                await NotificationService.ShowWarningAsync("無法轉進貨單：採購單資料不存在");
                return;
            }
            
            if (!editModalComponent.Entity.IsApproved)
            {
                await NotificationService.ShowWarningAsync("只有已核准的採購單才能轉進貨單");
                return;
            }
            
            // 檢查是否有廠商資料
            if (editModalComponent.Entity.SupplierId <= 0)
            {
                await NotificationService.ShowWarningAsync("採購單缺少廠商資訊，無法轉進貨單");
                return;
            }
            
            // 🔑 檢查是否還有未完成的明細（還需要入庫的商品）
            if (!purchaseOrderDetails.Any())
            {
                await NotificationService.ShowWarningAsync("採購單沒有明細資料，無法轉進貨單");
                return;
            }
            
            // 檢查是否所有明細都已完成進貨
            var hasIncompleteDetails = purchaseOrderDetails.Any(detail => 
                detail.ReceivedQuantity < detail.OrderQuantity
            );
            
            if (!hasIncompleteDetails)
            {
                await NotificationService.ShowWarningAsync("採購單所有明細皆已完成進貨，無需再轉進貨單");
                return;
            }
            
            // 使用公開方法開啟進貨單 Modal（新增模式，但預填廠商和採購單資訊）
            if (purchaseReceivingEditModal != null)
            {
                await purchaseReceivingEditModal.ShowAddModalWithPrefilledOrder(
                    editModalComponent.Entity.SupplierId,
                    PurchaseOrderId.Value
                );
            }
            else
            {
                await NotificationService.ShowWarningAsync("進貨單組件未初始化，請重新整理頁面");
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleCreateReceivingFromOrder), GetType(), 
                additionalData: $"轉進貨單失敗 - OrderId: {PurchaseOrderId}");
            await NotificationService.ShowErrorAsync("轉進貨單時發生錯誤");
        }
    }
}
