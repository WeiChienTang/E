@page "/purchase/orders/edit"
@page "/purchase/orders/edit/{id:int?}"

@inject IPurchaseOrderService PurchaseOrderService
@inject ISupplierService SupplierService
@inject IWarehouseService WarehouseService
@inject IProductService ProductService
@inject INotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="PurchaseOrder" 
                         TService="IPurchaseOrderService"
                         Id="@Id"
                         Entity="@purchaseOrder"
                         Service="@PurchaseOrderService"
                         EntityName="採購訂單"
                         EntityNamePlural="採購訂單"
                         PageTitle="@(Id.HasValue ? "編輯採購訂單" : "新增採購訂單")"
                         FormTitle="基本資料"
                         FormSubtitle="採購訂單的基本資訊"
                         RequiredPermission="@(Id.HasValue ? "Purchase.Update" : "Purchase.Create")"
                             IndexRoute="/purchase/orders"
                             UseGenericForm="true"
                             FormFields="@formFields"
                             FormSections="@formSections"
                             BreadcrumbItems="@breadcrumbItems"
                             DataLoader="@LoadPurchaseOrderData"
                             SaveHandler="@SavePurchaseOrder"
                             AdditionalDataLoader="@LoadAdditionalData"
                             @ref="editComponent">
        
        <AdditionalSections>
            <!-- 使用通用明細管理組件 -->
            <TransactionDetailManagerComponent 
                TDetailEntity="ERPCore2.Data.Entities.PurchaseOrderDetail"
                TParentEntity="ERPCore2.Data.Entities.PurchaseOrder"
                TProductEntity="ERPCore2.Data.Entities.Product"
                Details="purchaseOrderDetails"
                Products="allProducts"
                Config="ERPCore2.Models.TransactionDetailConfig.GetDefaultConfig(ERPCore2.Data.Enums.TransactionDetailType.Purchase)"
                
                GetProductCode="@((ERPCore2.Data.Entities.PurchaseOrderDetail d) => GetProductCodeById(d.ProductId))"
                GetProductName="@((ERPCore2.Data.Entities.PurchaseOrderDetail d) => GetProductNameById(d.ProductId))"
                GetQuantity="@((ERPCore2.Data.Entities.PurchaseOrderDetail d) => (decimal)d.OrderQuantity)"
                GetUnitPrice="@((ERPCore2.Data.Entities.PurchaseOrderDetail d) => d.UnitPrice)"
                GetSubtotal="@((ERPCore2.Data.Entities.PurchaseOrderDetail d) => d.UnitPrice * (decimal)d.OrderQuantity)"
                GetRemarks="@((ERPCore2.Data.Entities.PurchaseOrderDetail d) => d.DetailRemarks ?? "")"
                
                GetProductCodeFromProduct="@((ERPCore2.Data.Entities.Product p) => p.ProductCode)"
                GetProductNameFromProduct="@((ERPCore2.Data.Entities.Product p) => p.ProductName)"
                GetProductPrice="@((ERPCore2.Data.Entities.Product p) => p.UnitPrice ?? 0)"
                
                SetQuantity="@((ERPCore2.Data.Entities.PurchaseOrderDetail d, decimal q) => d.OrderQuantity = (int)q)"
                SetUnitPrice="@((ERPCore2.Data.Entities.PurchaseOrderDetail d, decimal p) => d.UnitPrice = p)"
                SetRemarks="@((ERPCore2.Data.Entities.PurchaseOrderDetail d, string r) => d.DetailRemarks = r)"
                SetProduct="@((ERPCore2.Data.Entities.PurchaseOrderDetail d, ERPCore2.Data.Entities.Product p) => { d.ProductId = p.Id; d.Product = null; d.UnitPrice = p.UnitPrice ?? 0; })"
                
                OnDetailRemoved="@((ERPCore2.Data.Entities.PurchaseOrderDetail detail) => { Console.WriteLine($"移除明細 - 產品ID: {detail.ProductId}"); purchaseOrderDetails.Remove(detail); StateHasChanged(); })"
                OnDetailAdded="@((ERPCore2.Data.Entities.PurchaseOrderDetail detail) => { Console.WriteLine($"新增明細 - 產品ID: {detail.ProductId}"); StateHasChanged(); })"
                OnDetailUpdated="@((ERPCore2.Data.Entities.PurchaseOrderDetail detail) => { Console.WriteLine($"更新明細 - 產品ID: {detail.ProductId}, 數量: {detail.OrderQuantity}, 單價: {detail.UnitPrice}, 小計: {detail.SubtotalAmount}"); StateHasChanged(); })"
                CreateNewDetail="@CreateNewDetail" />
        </AdditionalSections>
    </GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<PurchaseOrder, IPurchaseOrderService> editComponent = default!;
    
    // 資料模型
    private PurchaseOrder purchaseOrder = new();
    private List<Data.Entities.PurchaseOrderDetail> purchaseOrderDetails = new();
    
    // 選項清單
    private List<Supplier> suppliers = new();
    private List<Warehouse> warehouses = new();
    private List<Product> allProducts = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 計算屬性 - 只計算有效明細的金額
    private decimal totalAmount => purchaseOrderDetails
        .Where(d => d.Status == EntityStatus.Active && d.ProductId > 0 && d.OrderQuantity > 0)
        .Sum(d => d.SubtotalAmount);
    
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("=== PurchaseOrderEdit 初始化開始 ===");
        Console.WriteLine($"是否為編輯模式: {Id.HasValue}");
        try
        {
            InitializeBreadcrumbs();
            await InitializeDefaultValues();
            InitializeBasicFormFields(); // 先初始化基本表單欄位
            Console.WriteLine("=== PurchaseOrderEdit 初始化完成 ===");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"初始化發生例外: {ex.Message}");
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnInitializedAsync), 
                GetType()
            );
            
            // 確保基本初始化完成，避免程式崩潰
            try
            {
                breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
                {
                    new() { Text = "首頁", Href = "/" },
                    new() { Text = "採購管理", Href = "/purchase" },
                    new() { Text = "採購訂單", Href = "/purchase/orders" },
                    new() { Text = Id.HasValue ? "編輯採購訂單" : "新增採購訂單" }
                };
                formFields = new List<FormFieldDefinition>();
                formSections = new Dictionary<string, string>();
            }
            catch
            {
                // 如果連預設值都設定失敗，至少確保不是 null
                breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
                formFields ??= new List<FormFieldDefinition>();
                formSections ??= new Dictionary<string, string>();
            }
        }
    }
    
    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new() { Text = "首頁", Href = "/" },
                new() { Text = "採購管理", Href = "/purchase" },
                new() { Text = "採購訂單", Href = "/purchase/orders" },
                new() { Text = Id.HasValue ? "編輯採購訂單" : "新增採購訂單" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeBreadcrumbs), 
                GetType()
            );
            
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }
    
    private async Task InitializeDefaultValues()
    {
        try
        {
            if (!Id.HasValue)
            {
                purchaseOrder.OrderDate = DateTime.Today;
                purchaseOrder.OrderStatus = PurchaseOrderStatus.Draft;
                purchaseOrder.PurchaseType = PurchaseType.Normal;
                
                // 設定採購人員為當前登入使用者
                await SetCurrentUserAsPurchasePersonnel();
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeDefaultValues), 
                GetType()
            );
        }
    }
    
    private async Task SetCurrentUserAsPurchasePersonnel(PurchaseOrder? order = null)
    {
        try
        {
            var targetOrder = order ?? purchaseOrder;
            var personnelName = await CurrentUserHelper.GetCurrentUserFullNameAsync(AuthenticationStateProvider);
            targetOrder.PurchasePersonnel = personnelName;
            
            Console.WriteLine($"Debug - Set PurchasePersonnel to: '{personnelName}'");
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(SetCurrentUserAsPurchasePersonnel), 
                GetType()
            );
            
            // 如果發生錯誤，至少設定一個預設值
            var targetOrder = order ?? purchaseOrder;
            targetOrder.PurchasePersonnel = "系統使用者";
            Console.WriteLine("Debug - Error occurred, set to '系統使用者'");
        }
    }
    
    private void InitializeBasicFormFields()
    {
        try
        {
            // 先初始化不需要選項的基本欄位
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(PurchaseOrder.PurchaseOrderNumber),
                    Label = "採購單號",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "系統自動產生或手動輸入",
                    
                },
                new()
                {
                    PropertyName = nameof(PurchaseOrder.OrderDate),
                    Label = "訂單日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    
                },
                new()
                {
                    PropertyName = nameof(PurchaseOrder.ExpectedDeliveryDate),
                    Label = "預計到貨日期",
                    FieldType = FormFieldType.Date,
                    
                },
                new()
                {
                    PropertyName = nameof(PurchaseOrder.PurchasePersonnel),
                    Label = "採購人員",
                    FieldType = FormFieldType.Text,
                    IsReadOnly = true,
                    
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(PurchaseOrder.PurchaseOrderNumber), "基本資訊" },
                { nameof(PurchaseOrder.OrderDate), "基本資訊" },
                { nameof(PurchaseOrder.ExpectedDeliveryDate), "採購設定" },
                { nameof(PurchaseOrder.PurchasePersonnel), "採購設定" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeBasicFormFields), 
                GetType()
            );
            
            // 設定安全的預設值
            formFields = new List<FormFieldDefinition>();
            formSections = new Dictionary<string, string>();
        }
    }
    
    private async Task LoadAdditionalData()
    {
        try
        {
            // 載入供應商
            suppliers = await SupplierService.GetAllAsync();
            
            // 載入倉庫
            warehouses = await WarehouseService.GetAllAsync();
            
            // 載入商品
            allProducts = await ProductService.GetAllAsync();
            
            // 初始化需要選項資料的表單欄位
            InitializeFormFieldsWithOptions();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadAdditionalData),
                GetType(),
                additionalData: new { 
                    PageName = "PurchaseOrderEdit",
                    Action = "LoadAdditionalData",
                    PurchaseOrderId = Id,
                    ExpectedData = "Suppliers, Warehouses, Products"
                }
            );
            
            // 設定安全的預設值，確保程式不會崩潰
            suppliers = new List<Supplier>();
            warehouses = new List<Warehouse>();
            allProducts = new List<Product>();
            
            // 即使失敗也要初始化表單欄位
            try
            {
                InitializeFormFieldsWithOptions();
            }
            catch
            {
                // 如果初始化表單欄位也失敗，至少確保基本結構存在
                formFields ??= new List<FormFieldDefinition>();
                formSections ??= new Dictionary<string, string>();
            }
        }
    }
    
    private void InitializeFormFieldsWithOptions()
    {
        try
        {
            // 供應商選項
            var supplierOptions = suppliers.Select(s => new SelectOption
            {
                Text = $"{s.SupplierCode} - {s.CompanyName}",
                Value = s.Id.ToString()
            }).Prepend(new SelectOption { Value = "", Text = "請選擇供應商" }).ToList();
            
            // 倉庫選項
            var warehouseOptions = warehouses.Select(w => new SelectOption
            {
                Text = $"{w.WarehouseCode} - {w.WarehouseName}",
                Value = w.Id.ToString()
            }).ToList();
            
            // 採購類型選項
            var purchaseTypeOptions = Enum.GetValues<PurchaseType>()
                .Select(t => new SelectOption
                {
                    Text = GetPurchaseTypeDisplayName(t),
                    Value = ((int)t).ToString()
                }).ToList();
            
            // 添加需要選項資料的欄位到現有的formFields
            formFields.AddRange(new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(PurchaseOrder.SupplierId),
                    Label = "供應商",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = supplierOptions,
                    
                },
                new()
                {
                    PropertyName = nameof(PurchaseOrder.WarehouseId),
                    Label = "倉庫",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = warehouseOptions,
                    
                },
                new()
                {
                    PropertyName = nameof(PurchaseOrder.PurchaseType),
                    Label = "採購類型",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = purchaseTypeOptions,
                    
                },
                new()
                {
                    PropertyName = nameof(PurchaseOrder.OrderRemarks),
                    Label = "訂單備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入訂單相關備註",
                    Rows = 3,
                    ContainerCssClass = "col-12"
                }
            });
            
            // 更新表單區段
            formSections[nameof(PurchaseOrder.SupplierId)] = "基本資訊";
            formSections[nameof(PurchaseOrder.WarehouseId)] = "基本資訊";
            formSections[nameof(PurchaseOrder.PurchaseType)] = "採購設定";
            formSections[nameof(PurchaseOrder.OrderRemarks)] = "備註資訊";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFormFieldsWithOptions),
                GetType(),
                additionalData: new { 
                    PageName = "PurchaseOrderEdit",
                    Action = "InitializeFormFieldsWithOptions",
                    PurchaseOrderId = Id
                }
            );
            
            // 如果失敗，至少確保基本結構存在
            formFields ??= new List<FormFieldDefinition>();
            formSections ??= new Dictionary<string, string>();
        }
    }
    
    private async Task<PurchaseOrder?> LoadPurchaseOrderData()
    {
        Console.WriteLine("=== LoadPurchaseOrderData 開始 ===");
        try
        {
            if (Id.HasValue)
            {
                Console.WriteLine($"載入編輯模式資料 - ID: {Id.Value}");
                var order = await PurchaseOrderService.GetByIdAsync(Id.Value);
                if (order != null)
                {
                    Console.WriteLine($"成功載入訂單 - 單號: {order.PurchaseOrderNumber}, 供應商ID: {order.SupplierId}");
                    purchaseOrder = order;
                    purchaseOrderDetails = order.PurchaseOrderDetails?.Where(d => d.Status == EntityStatus.Active).ToList() ?? new List<Data.Entities.PurchaseOrderDetail>();
                    Console.WriteLine($"載入明細數量: {purchaseOrderDetails.Count}");
                    return order;
                }
                else
                {
                    Console.WriteLine($"找不到 ID 為 {Id.Value} 的訂單");
                }
            }
            else
            {
                Console.WriteLine("新增模式 - 建立新訂單");
                // 新增模式 - 產生採購單號
                var newOrder = new PurchaseOrder
                {
                    PurchaseOrderNumber = await PurchaseOrderService.GenerateOrderNumberAsync(),
                    OrderDate = DateTime.Today,
                    OrderStatus = PurchaseOrderStatus.Draft,
                    PurchaseType = PurchaseType.Normal,
                    Status = EntityStatus.Active
                };
                
                Console.WriteLine($"新訂單建立 - 單號: {newOrder.PurchaseOrderNumber}");
                
                // 設定採購人員為當前登入使用者
                await SetCurrentUserAsPurchasePersonnel(newOrder);
                
                purchaseOrder = newOrder;
                purchaseOrderDetails = new List<Data.Entities.PurchaseOrderDetail>();
                Console.WriteLine($"初始化明細清單 - 數量: {purchaseOrderDetails.Count}");
                return newOrder;
            }
            
            Console.WriteLine($"回傳現有 purchaseOrder - 單號: {purchaseOrder.PurchaseOrderNumber}");
            return purchaseOrder;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadPurchaseOrderData 發生例外: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadPurchaseOrderData),
                GetType(),
                additionalData: new { 
                    PageName = "PurchaseOrderEdit",
                    Action = "LoadPurchaseOrderData",
                    PurchaseOrderId = Id
                }
            );
            
            // 設定安全的預設值，確保程式不會崩潰
            purchaseOrder = new PurchaseOrder
            {
                PurchaseOrderNumber = "ERROR",
                OrderDate = DateTime.Today,
                OrderStatus = PurchaseOrderStatus.Draft,
                PurchaseType = PurchaseType.Normal,
                Status = EntityStatus.Active
            };
            purchaseOrderDetails = new List<Data.Entities.PurchaseOrderDetail>();
            Console.WriteLine("回傳錯誤處理後的預設訂單");
            
            return purchaseOrder;
        }
        finally
        {
            Console.WriteLine("=== LoadPurchaseOrderData 結束 ===");
        }
    }
    
    private async Task<bool> SavePurchaseOrder(PurchaseOrder entity)
    {
        try
        {
            Console.WriteLine("=== 開始儲存採購訂單 ===");
            Console.WriteLine($"是否為編輯模式: {Id.HasValue}");
            Console.WriteLine($"採購單號: {entity.PurchaseOrderNumber}");
            Console.WriteLine($"訂單日期: {entity.OrderDate}");
            Console.WriteLine($"供應商ID: {entity.SupplierId}");
            Console.WriteLine($"倉庫ID: {entity.WarehouseId}");
            Console.WriteLine($"明細數量: {purchaseOrderDetails.Count}");
            
            // 計算有效明細數量
            var validDetailsCount = purchaseOrderDetails.Where(d => 
                d.Status == EntityStatus.Active && 
                d.ProductId > 0 && 
                d.OrderQuantity > 0).Count();
            Console.WriteLine($"有效明細數量: {validDetailsCount}");
            
            // 更新訂單總金額
            entity.TotalAmount = totalAmount;
            Console.WriteLine($"計算總金額: {entity.TotalAmount}");
            
            // 設定明細的採購訂單ID (只處理有效明細)
            var activeDetails = purchaseOrderDetails.Where(d => 
                d.Status == EntityStatus.Active && 
                d.ProductId > 0 && 
                d.OrderQuantity > 0).ToList();
                
            foreach (var detail in activeDetails)
            {
                detail.PurchaseOrderId = entity.Id;
                Console.WriteLine($"有效明細 - 產品ID: {detail.ProductId}, 數量: {detail.OrderQuantity}, 單價: {detail.UnitPrice}, 小計: {detail.SubtotalAmount}");
            }
            
            // 先儲存主檔
            ServiceResult result;
            if (Id.HasValue)
            {
                Console.WriteLine($"執行更新操作 - ID: {Id.Value}");
                result = await PurchaseOrderService.UpdateAsync(entity);
            }
            else
            {
                Console.WriteLine("執行新增操作");
                var createResult = await PurchaseOrderService.CreateAsync(entity);
                result = new ServiceResult 
                { 
                    IsSuccess = createResult.IsSuccess, 
                    ErrorMessage = createResult.ErrorMessage 
                };
                
                if (createResult.IsSuccess && createResult.Data != null)
                {
                    purchaseOrder = createResult.Data;
                    Id = purchaseOrder.Id;
                    Console.WriteLine($"主檔創建成功 - 新 ID: {purchaseOrder.Id}");
                }
                else
                {
                    Console.WriteLine($"主檔創建失敗 - 錯誤: {result.ErrorMessage}");
                }
            }
            
            Console.WriteLine($"主檔儲存結果: {result.IsSuccess}");
            if (!string.IsNullOrEmpty(result.ErrorMessage))
            {
                Console.WriteLine($"錯誤訊息: {result.ErrorMessage}");
            }
            
            if (result.IsSuccess && purchaseOrder.Id > 0)
            {
                Console.WriteLine($"開始儲存明細 - 主檔 ID: {purchaseOrder.Id}");
                // 儲存明細
                await SaveOrderDetails();
                Console.WriteLine("=== 採購訂單儲存完成 ===");
                return true;
            }
            else
            {
                Console.WriteLine($"主檔儲存失敗或 ID 無效 - ID: {purchaseOrder.Id}");
            }
            
            return false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SavePurchaseOrder 發生例外: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(SavePurchaseOrder),
                GetType()
            );
            return false;
        }
    }
    
    private async Task SaveOrderDetails()
    {
        try
        {
            Console.WriteLine("=== 開始儲存明細資料 ===");
            Console.WriteLine($"明細總數: {purchaseOrderDetails.Count}");
            
            // 過濾出有效的明細 - 必須有產品ID且數量大於0
            var validDetails = purchaseOrderDetails.Where(detail => 
                detail.Status == EntityStatus.Active && 
                detail.ProductId > 0 && 
                detail.OrderQuantity > 0).ToList();
                
            Console.WriteLine($"有效明細數量: {validDetails.Count}");
            
            foreach (var detail in validDetails)
            {
                detail.PurchaseOrderId = purchaseOrder.Id;
                Console.WriteLine($"處理有效明細 - ID: {detail.Id}, 產品ID: {detail.ProductId}, 數量: {detail.OrderQuantity}, 單價: {detail.UnitPrice}");
                
                if (detail.Id == 0)
                {
                    Console.WriteLine($"新增明細 - 產品ID: {detail.ProductId}, 數量: {detail.OrderQuantity}, 單價: {detail.UnitPrice}");
                    // 新增明細
                    var addResult = await PurchaseOrderService.AddOrderDetailAsync(detail);
                    Console.WriteLine($"新增結果: {addResult?.IsSuccess ?? false}");
                    if (addResult != null && !addResult.IsSuccess)
                    {
                        Console.WriteLine($"新增明細失敗: {addResult.ErrorMessage}");
                    }
                }
                else if (detail.Id > 0)
                {
                    Console.WriteLine($"更新明細 - ID: {detail.Id}, 產品ID: {detail.ProductId}, 數量: {detail.OrderQuantity}, 單價: {detail.UnitPrice}");
                    // 更新明細
                    var updateResult = await PurchaseOrderService.UpdateOrderDetailAsync(detail);
                    Console.WriteLine($"更新結果: {updateResult?.IsSuccess ?? false}");
                    if (updateResult != null && !updateResult.IsSuccess)
                    {
                        Console.WriteLine($"更新明細失敗: {updateResult.ErrorMessage}");
                    }
                }
            }
            
            // 處理需要刪除的明細 (原本存在但現在被標記為刪除或無效)
            var deletedDetails = purchaseOrderDetails.Where(detail => 
                detail.Id > 0 && 
                (detail.Status == EntityStatus.Deleted || detail.ProductId <= 0 || detail.OrderQuantity <= 0)).ToList();
                
            Console.WriteLine($"需要刪除的明細數量: {deletedDetails.Count}");
            
            foreach (var detail in deletedDetails)
            {
                Console.WriteLine($"刪除明細 - ID: {detail.Id}");
                var deleteResult = await PurchaseOrderService.DeleteOrderDetailAsync(detail.Id);
                Console.WriteLine($"刪除結果: {deleteResult?.IsSuccess ?? false}");
                if (deleteResult != null && !deleteResult.IsSuccess)
                {
                    Console.WriteLine($"刪除明細失敗: {deleteResult.ErrorMessage}");
                }
            }
            
            Console.WriteLine("=== 明細資料儲存完成 ===");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SaveOrderDetails 發生例外: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(SaveOrderDetails),
                GetType()
            );
        }
    }
    
    // 通用組件事件處理
    private async Task OnDetailsChanged(List<ERPCore2.Data.Entities.PurchaseOrderDetail> details)
    {
        purchaseOrderDetails = details;
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task OnDetailsChanged()
    {
        await InvokeAsync(StateHasChanged);
    }
    
    // 創建明細實體的方法
    private ERPCore2.Data.Entities.PurchaseOrderDetail CreateNewDetail()
    {
        Console.WriteLine("創建新明細實體");
        var newDetail = new ERPCore2.Data.Entities.PurchaseOrderDetail
        {
            OrderQuantity = 1,
            UnitPrice = 0,
            DetailRemarks = "",
            ExpectedDeliveryDate = DateTime.Today.AddDays(7), // 默認7天後交貨
            Status = EntityStatus.Active,
            CreatedAt = DateTime.Now,
            UpdatedAt = DateTime.Now
        };
        Console.WriteLine($"新明細實體已創建 - 數量: {newDetail.OrderQuantity}, 單價: {newDetail.UnitPrice}");
        return newDetail;
    }
    
    // 根據ProductId取得產品代碼
    private string GetProductCodeById(int productId)
    {
        if (productId <= 0 || allProducts == null) return "";
        var product = allProducts.FirstOrDefault(p => p.Id == productId);
        return product?.ProductCode ?? "";
    }
    
    // 根據ProductId取得產品名稱
    private string GetProductNameById(int productId)
    {
        if (productId <= 0 || allProducts == null) return "";
        var product = allProducts.FirstOrDefault(p => p.Id == productId);
        return product?.ProductName ?? "";
    }
    
    // 更新明細小計（因為SubtotalAmount是計算屬性，實際上不需要設定）
    private void UpdateDetailSubtotal(ERPCore2.Data.Entities.PurchaseOrderDetail detail)
    {
        // SubtotalAmount 是計算屬性，會自動計算
        detail.UpdatedAt = DateTime.Now;
    }
    
    // 輔助方法
    private static string GetPurchaseTypeDisplayName(PurchaseType type)
    {
        return type switch
        {
            PurchaseType.Normal => "一般採購",
            PurchaseType.Urgent => "緊急採購",
            PurchaseType.Replenishment => "補貨採購",
            PurchaseType.Project => "專案採購",
            _ => type.ToString()
        };
    }
}
