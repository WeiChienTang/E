@page "/purchase-receivings/detail/{id:int}"
@inject IPurchaseReceivingService PurchaseReceivingService
@inject IPurchaseReturnService PurchaseReturnService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<GenericDetailPageComponent TEntity="PurchaseReceiving" 
                            TService="IPurchaseReceivingService"
                            EntityId="@Id"
                            Entity="@purchaseReceiving"
                            Service="@PurchaseReceivingService"
                            EntityName="採購入庫"
                            EntityNamePlural="採購入庫"
                            IndexRoute="/purchase-receivings"
                            EditRoute="/purchase-receivings/edit"
                            LoadingText="載入採購入庫資料中..."
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadPurchaseReceivingDataAsync"
                            AdditionalDataLoader="@LoadAdditionalDataAsync"
                            EntityTitleSelector="@(pr => pr.ReceiptNumber)"
                            EntitySubtitleSelector="@(pr => $"進貨日期：{pr.ReceiptDate:yyyy/MM/dd}")"
                            EntityDisplayNameSelector="@(pr => pr.ReceiptNumber)"
                            OnDataLoaded="@OnPurchaseReceivingDataLoaded"
                            UseTabLayout="true"
                            TabSections="@GetTabSections()"
                            RequiredPermission="PurchaseReceiving.Read"
                            @ref="detailComponent" />

@code {
    [Parameter] public int Id { get; set; }
    
    private GenericDetailPageComponent<PurchaseReceiving, IPurchaseReceivingService> detailComponent = default!;
    private PurchaseReceiving? purchaseReceiving;
    private List<PurchaseReturn> relatedReturns = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("採購管理", "/"),
                new("採購入庫", "/purchase-receivings"),
                new("採購入庫詳細", "")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType(),
                additionalData: new { Id }
            );
        }
    }

    private async Task<PurchaseReceiving?> LoadPurchaseReceivingDataAsync()
    {
        try
        {
            purchaseReceiving = await PurchaseReceivingService.GetByIdAsync(Id);
            return purchaseReceiving;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadPurchaseReceivingDataAsync),
                GetType(),
                additionalData: new { Id }
            );
            throw;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            if (purchaseReceiving != null)
            {
                // 載入相關退貨資料
                relatedReturns = await PurchaseReturnService.GetByPurchaseReceivingIdAsync(Id);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadAdditionalDataAsync),
                GetType(),
                additionalData: new { Id }
            );
        }
    }

    private void OnPurchaseReceivingDataLoaded()
    {
        StateHasChanged();
    }

    private List<GenericDetailPageComponent<PurchaseReceiving, IPurchaseReceivingService>.TabSection> GetTabSections()
    {
        var sections = new List<GenericDetailPageComponent<PurchaseReceiving, IPurchaseReceivingService>.TabSection>();

        if (purchaseReceiving == null) return sections;

        // 基本資訊頁籤
        sections.Add(new GenericDetailPageComponent<PurchaseReceiving, IPurchaseReceivingService>.TabSection
        {
            Id = "basic",
            Title = "基本資訊",
            Content = @<div>
                <BasicInfoDisplayComponent
                    Title="進貨基本資訊"
                    IconClass="fas fa-truck"
                    IconColor="text-primary"
                    Fields="@GetBasicFields()"
                    ShowFieldCount="false" />
            </div>
        });

        // 進貨明細頁籤
        sections.Add(new GenericDetailPageComponent<PurchaseReceiving, IPurchaseReceivingService>.TabSection
        {
            Id = "details",
            Title = $"進貨明細 ({(purchaseReceiving?.PurchaseReceivingDetails?.Count ?? 0)})",
            Content = @<div>
                @if (purchaseReceiving?.PurchaseReceivingDetails?.Any() == true)
                {
                    <div class="card">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="fas fa-list me-2"></i>
                                進貨明細列表
                            </h6>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>商品</th>
                                            <th class="text-end">進貨數量</th>
                                            <th class="text-end">單價</th>
                                            <th class="text-end">小計</th>
                                            <th>倉庫位置</th>
                                            <th>品質檢驗</th>
                                            <th>批號</th>
                                            <th>到期日期</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var detail in purchaseReceiving.PurchaseReceivingDetails)
                                        {
                                            <tr>
                                                <td>
                                                    <div>
                                                        <div class="fw-medium">@detail.Product?.ProductName</div>
                                                        <small class="text-muted">@detail.Product?.ProductCode</small>
                                                    </div>
                                                </td>
                                                <td class="text-end">@detail.ReceivedQuantity.ToString("N0")</td>
                                                <td class="text-end">@detail.UnitPrice.ToString("C2")</td>
                                                <td class="text-end">@detail.SubtotalAmount.ToString("C2")</td>
                                                <td>@(detail.WarehouseLocation?.LocationName ?? "-")</td>
                                                <td>
                                                    @if (detail.QualityInspectionPassed.HasValue)
                                                    {
                                                        <span class="badge bg-@(detail.QualityInspectionPassed.Value ? "success" : "danger")">
                                                            @(detail.QualityInspectionPassed.Value ? "通過" : "不通過")
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">未檢驗</span>
                                                    }
                                                </td>
                                                <td>@(detail.BatchNumber ?? "-")</td>
                                                <td>@(detail.ExpiryDate?.ToString("yyyy/MM/dd") ?? "-")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <div class="mb-3">
                            <i class="fas fa-list fa-3x text-muted"></i>
                        </div>
                        <h6 class="text-muted">此進貨單尚未有明細資料</h6>
                    </div>
                }
            </div>
        });

        // 相關退貨頁籤
        sections.Add(new GenericDetailPageComponent<PurchaseReceiving, IPurchaseReceivingService>.TabSection
        {
            Id = "returns",
            Title = $"相關退貨 ({relatedReturns.Count})",
            Content = @<div>
                @if (relatedReturns.Any())
                {
                    <div class="card">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="fas fa-undo me-2"></i>
                                相關退貨單
                            </h6>
                        </div>
                        <div class="card-body p-0">
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-light">
                                        <tr>
                                            <th>退貨單號</th>
                                            <th>退貨日期</th>
                                            <th>退貨狀態</th>
                                            <th>退貨原因</th>
                                            <th class="text-end">退貨金額</th>
                                            <th>操作</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var returnOrder in relatedReturns)
                                        {
                                            <tr>
                                                <td>
                                                    <a href="/purchase-returns/detail/@returnOrder.Id" class="text-decoration-none">
                                                        @returnOrder.PurchaseReturnNumber
                                                    </a>
                                                </td>
                                                <td>@returnOrder.ReturnDate.ToString("yyyy/MM/dd")</td>
                                                <td>
                                                    <span class="badge bg-@GetReturnStatusColor(returnOrder.ReturnStatus)">
                                                        @GetReturnStatusDisplayName(returnOrder.ReturnStatus)
                                                    </span>
                                                </td>
                                                <td>@GetReturnReasonDisplayName(returnOrder.ReturnReason)</td>
                                                <td class="text-end">@returnOrder.TotalReturnAmount.ToString("C2")</td>
                                                <td>
                                                    <a href="/purchase-returns/detail/@returnOrder.Id" class="btn btn-sm btn-outline-info me-1" title="檢視詳細">
                                                        <i class="bi bi-eye"></i>
                                                    </a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <div class="mb-3">
                            <i class="fas fa-undo fa-3x text-muted"></i>
                        </div>
                        <h6 class="text-muted">此進貨單尚未有相關退貨資料</h6>
                    </div>
                }
            </div>
        });

        return sections;
    }

    private List<BasicInfoDisplayComponent.BasicInfoField> GetBasicFields()
    {
        if (purchaseReceiving == null) return new List<BasicInfoDisplayComponent.BasicInfoField>();

        return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "進貨單號",
                Value = purchaseReceiving.ReceiptNumber,
                IconClass = "fas fa-hashtag",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary"
            },
            new()
            {
                Label = "進貨日期",
                Value = purchaseReceiving.ReceiptDate.ToString("yyyy年MM月dd日"),
                IconClass = "fas fa-calendar",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info"
            },
            new()
            {
                Label = "採購訂單",
                Value = purchaseReceiving.PurchaseOrder?.PurchaseOrderNumber,
                IconClass = "fas fa-file-invoice",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary"
            },
            new()
            {
                Label = "供應商",
                Value = purchaseReceiving.PurchaseOrder?.Supplier?.CompanyName,
                IconClass = "fas fa-building",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning"
            },
            new()
            {
                Label = "倉庫",
                Value = purchaseReceiving.Warehouse?.WarehouseName,
                IconClass = "fas fa-warehouse",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success"
            },
            new()
            {
                Label = "進貨狀態",
                Type = BasicInfoDisplayComponent.FieldType.Badge,
                Value = GetReceiptStatusDisplayName(purchaseReceiving.ReceiptStatus),
                BadgeClass = $"bg-{GetReceiptStatusColor(purchaseReceiving.ReceiptStatus)}",
                IconClass = "fas fa-flag",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary"
            },
            new()
            {
                Label = "進貨總金額",
                Value = purchaseReceiving.TotalAmount.ToString("C2"),
                IconClass = "fas fa-dollar-sign",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success"
            },
            new()
            {
                Label = "稅額",
                Value = purchaseReceiving.TaxAmount.ToString("C2"),
                IconClass = "fas fa-percentage",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info"
            },
            new()
            {
                Label = "驗收人員",
                Value = purchaseReceiving.InspectionPersonnel,
                EmptyText = "未指定",
                IconClass = "fas fa-user-check",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary"
            },
            new()
            {
                Label = "確認人員",
                Value = purchaseReceiving.ConfirmedByUser != null ? 
                       $"{purchaseReceiving.ConfirmedByUser.LastName}{purchaseReceiving.ConfirmedByUser.FirstName}".Trim() : null,
                EmptyText = "未確認",
                IconClass = "fas fa-user-shield",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary"
            },
            new()
            {
                Label = "確認時間",
                Value = purchaseReceiving.ConfirmedAt?.ToString("yyyy/MM/dd HH:mm"),
                EmptyText = "未確認",
                IconClass = "fas fa-clock",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning"
            },
            new()
            {
                Label = "備註",
                Value = purchaseReceiving.ReceiptRemarks,
                EmptyText = "無備註",
                IconClass = "fas fa-sticky-note",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary"
            }
        };
    }

    private string GetReceiptStatusDisplayName(PurchaseReceivingStatus status)
    {
        return status switch
        {
            PurchaseReceivingStatus.Draft => "草稿",
            PurchaseReceivingStatus.Confirmed => "已確認",
            PurchaseReceivingStatus.Received => "已入庫",
            PurchaseReceivingStatus.Cancelled => "已取消",
            _ => status.ToString()
        };
    }

    private string GetReceiptStatusColor(PurchaseReceivingStatus status)
    {
        return status switch
        {
            PurchaseReceivingStatus.Draft => "secondary",
            PurchaseReceivingStatus.Confirmed => "primary",
            PurchaseReceivingStatus.Received => "success",
            PurchaseReceivingStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }

    private string GetReturnStatusDisplayName(PurchaseReturnStatus status)
    {
        return status switch
        {
            PurchaseReturnStatus.Draft => "草稿",
            PurchaseReturnStatus.Submitted => "已送出",
            PurchaseReturnStatus.Confirmed => "已確認",
            PurchaseReturnStatus.Processing => "處理中",
            PurchaseReturnStatus.Completed => "已完成",
            PurchaseReturnStatus.Cancelled => "已取消",
            PurchaseReturnStatus.Closed => "已關閉",
            _ => status.ToString()
        };
    }

    private string GetReturnStatusColor(PurchaseReturnStatus status)
    {
        return status switch
        {
            PurchaseReturnStatus.Draft => "secondary",
            PurchaseReturnStatus.Submitted => "info",
            PurchaseReturnStatus.Confirmed => "primary",
            PurchaseReturnStatus.Processing => "warning",
            PurchaseReturnStatus.Completed => "success",
            PurchaseReturnStatus.Cancelled => "danger",
            PurchaseReturnStatus.Closed => "dark",
            _ => "secondary"
        };
    }

    private string GetReturnReasonDisplayName(PurchaseReturnReason reason)
    {
        return reason switch
        {
            PurchaseReturnReason.QualityIssue => "品質不良",
            PurchaseReturnReason.SpecificationMismatch => "規格不符",
            PurchaseReturnReason.QuantityError => "數量錯誤",
            PurchaseReturnReason.ExpiredProduct => "過期商品",
            PurchaseReturnReason.ShippingDamage => "運送損壞",
            PurchaseReturnReason.SupplierRequest => "廠商要求",
            PurchaseReturnReason.Other => "其他",
            _ => reason.ToString()
        };
    }
}
