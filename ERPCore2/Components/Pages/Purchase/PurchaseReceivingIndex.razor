@page "/purchase-receivings"
@inject IPurchaseReceivingService PurchaseReceivingService
@inject IPurchaseOrderService PurchaseOrderService
@inject ISupplierService SupplierService
@inject IWarehouseService WarehouseService
@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="PurchaseReceiving" 
                          TService="IPurchaseReceivingService"
                          Service="@PurchaseReceivingService"
                          EntityBasePath="/purchase-receivings"
                          PageTitle="採購入庫管理"
                          PageSubtitle="管理所有採購入庫與入庫資料"
                          EntityName="採購入庫"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadPurchaseReceivingsAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplyPurchaseReceivingFilters"
                          GetEntityDisplayName="@(purchaseReceiving => purchaseReceiving.ReceiptNumber)"
                          RequiredPermission="PurchaseReceiving.Read"
                          @ref="indexPageRef" />

@code {
    // 組件參考
    private GenericIndexPageComponent<PurchaseReceiving, IPurchaseReceivingService> indexPageRef = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 選項清單
    private List<SelectOption> purchaseOrderOptions = new();
    private List<SelectOption> supplierOptions = new();
    private List<SelectOption> warehouseOptions = new();
    private List<SelectOption> employeeOptions = new();
    private List<SelectOption> statusOptions = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeBasicFilters();
            InitializeColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitialized),
                GetType(),
                additionalData: "初始化採購入庫頁面失敗"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("採購管理", "/"),
                new("採購入庫", "/purchase-receivings")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化麵包屑失敗"
            );
        }
    }

    private void InitializeBasicFilters()
    {
        try
        {
            // 建立基本篩選定義（不包含下拉選單選項，這些將在 LoadBasicDataAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SearchTerm", "搜尋", "請輸入進貨單號、採購訂單號...")
                .AddSelect("PurchaseOrderId", "採購訂單", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("SupplierId", "供應商", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("WarehouseId", "倉庫", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("ReceiptStatus", "進貨狀態", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("ConfirmedBy", "確認人員", new List<SelectOption>()) // 空的選項，稍後載入
                .AddDateRange("ReceiptDateRange", "進貨日期")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBasicFilters),
                GetType(),
                additionalData: "初始化基本篩選器失敗"
            );
            
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 載入採購訂單選項
            var purchaseOrders = await PurchaseOrderService.GetAllAsync();
            purchaseOrderOptions = purchaseOrders
                .Select(po => new SelectOption 
                { 
                    Text = $"{po.PurchaseOrderNumber} - {po.Supplier?.CompanyName}", 
                    Value = po.Id.ToString() 
                })
                .ToList();

            // 載入供應商選項
            var suppliers = await SupplierService.GetAllAsync();
            supplierOptions = suppliers
                .Select(s => new SelectOption 
                { 
                    Text = s.CompanyName, 
                    Value = s.Id.ToString() 
                })
                .ToList();

            // 載入倉庫選項
            var warehouses = await WarehouseService.GetAllAsync();
            warehouseOptions = warehouses
                .Select(w => new SelectOption 
                { 
                    Text = w.WarehouseName, 
                    Value = w.Id.ToString() 
                })
                .ToList();

            // 載入員工選項
            var employees = await EmployeeService.GetAllAsync();
            employeeOptions = employees
                .Select(e => new SelectOption 
                { 
                    Text = e.Name?.Trim() ?? "", 
                    Value = e.Id.ToString() 
                })
                .ToList();

            // 準備進貨狀態選項
            statusOptions = Enum.GetValues<PurchaseReceivingStatus>()
                .Select(status => new SelectOption 
                { 
                    Text = GetReceiptStatusDisplayName(status), 
                    Value = ((int)status).ToString() 
                })
                .ToList();

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SearchTerm", "搜尋", "請輸入進貨單號、採購訂單號...")
                .AddSelect("PurchaseOrderId", "採購訂單", purchaseOrderOptions)
                .AddSelect("SupplierId", "供應商", supplierOptions)
                .AddSelect("WarehouseId", "倉庫", warehouseOptions)
                .AddSelect("ReceiptStatus", "進貨狀態", statusOptions)
                .AddSelect("ConfirmedBy", "確認人員", employeeOptions)
                .AddDateRange("ReceiptDateRange", "進貨日期")
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，通知它更新篩選器
            if (indexPageRef != null)
            {
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadBasicDataAsync),
                GetType(),
                additionalData: "載入基礎資料失敗"
            );
        }
    }

    private async Task<List<PurchaseReceiving>> LoadPurchaseReceivingsAsync()
    {
        try
        {
            return await PurchaseReceivingService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadPurchaseReceivingsAsync),
                GetType(),
                additionalData: "載入採購入庫資料失敗"
            );
            
            StateHasChanged();
            return new List<PurchaseReceiving>();
        }
    }

    private IQueryable<PurchaseReceiving> ApplyPurchaseReceivingFilters(SearchFilterModel searchModel, IQueryable<PurchaseReceiving> query)
    {
        try
        {
            // 文字搜尋篩選
            var searchTerm = searchModel.GetFilterValue("SearchTerm")?.ToString();
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                query = query.Where(pr => 
                    pr.ReceiptNumber.Contains(searchTerm) ||
                    pr.PurchaseOrder.PurchaseOrderNumber.Contains(searchTerm) ||
                    pr.PurchaseOrder.Supplier.CompanyName.Contains(searchTerm) ||
                    (pr.ReceiptRemarks != null && pr.ReceiptRemarks.Contains(searchTerm)) ||
                    (pr.InspectionPersonnel != null && pr.InspectionPersonnel.Contains(searchTerm)));
            }

            // 採購訂單篩選
            var purchaseOrderIdFilter = searchModel.GetFilterValue("PurchaseOrderId")?.ToString();
            if (!string.IsNullOrWhiteSpace(purchaseOrderIdFilter) && int.TryParse(purchaseOrderIdFilter, out var purchaseOrderId) && purchaseOrderId > 0)
            {
                query = query.Where(pr => pr.PurchaseOrderId == purchaseOrderId);
            }

            // 供應商篩選
            var supplierIdFilter = searchModel.GetFilterValue("SupplierId")?.ToString();
            if (!string.IsNullOrWhiteSpace(supplierIdFilter) && int.TryParse(supplierIdFilter, out var supplierId) && supplierId > 0)
            {
                query = query.Where(pr => pr.PurchaseOrder.SupplierId == supplierId);
            }

            // 倉庫篩選
            var warehouseIdFilter = searchModel.GetFilterValue("WarehouseId")?.ToString();
            if (!string.IsNullOrWhiteSpace(warehouseIdFilter) && int.TryParse(warehouseIdFilter, out var warehouseId) && warehouseId > 0)
            {
                query = query.Where(pr => pr.WarehouseId == warehouseId);
            }

            // 進貨狀態篩選
            var statusFilter = searchModel.GetFilterValue("ReceiptStatus")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && int.TryParse(statusFilter, out var statusValue) && statusValue > 0)
            {
                var status = (PurchaseReceivingStatus)statusValue;
                query = query.Where(pr => pr.ReceiptStatus == status);
            }

            // 確認人員篩選
            var employeeIdFilter = searchModel.GetFilterValue("ConfirmedBy")?.ToString();
            if (!string.IsNullOrWhiteSpace(employeeIdFilter) && int.TryParse(employeeIdFilter, out var employeeId) && employeeId > 0)
            {
                query = query.Where(pr => pr.ConfirmedBy == employeeId);
            }

            // 日期範圍篩選
            var dateRange = searchModel.GetFilterValue("ReceiptDateRange") as DateRange;
            if (dateRange != null)
            {
                if (dateRange.StartDate.HasValue)
                {
                    query = query.Where(pr => pr.ReceiptDate >= dateRange.StartDate.Value);
                }
                if (dateRange.EndDate.HasValue)
                {
                    query = query.Where(pr => pr.ReceiptDate <= dateRange.EndDate.Value);
                }
            }

            return query.OrderByDescending(pr => pr.ReceiptDate)
                       .ThenByDescending(pr => pr.ReceiptNumber);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplyPurchaseReceivingFilters),
                GetType(),
                additionalData: "套用篩選條件失敗"
            );
            return query; // 回傳原始查詢作為後備
        }
    }

    private void InitializeColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                new TableColumnDefinition
                {
                    Title = "進貨單號",
                    PropertyName = "ReceiptNumber",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 150px;",
                    NullDisplayText = "-",
                    IsSortable = true
                },
                new TableColumnDefinition
                {
                    Title = "進貨日期",
                    PropertyName = "ReceiptDate",
                    DataType = ColumnDataType.Date,
                    Format = "yyyy/MM/dd",
                    HeaderStyle = "width: 120px;",
                    IsSortable = true
                },
                new TableColumnDefinition
                {
                    Title = "採購訂單",
                    PropertyName = "PurchaseOrder.PurchaseOrderNumber",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 150px;",
                    NullDisplayText = "-",
                    IsSortable = true
                },
                new TableColumnDefinition
                {
                    Title = "供應商",
                    PropertyName = "PurchaseOrder.Supplier.CompanyName",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 200px;",
                    NullDisplayText = "-",
                    IsSortable = true
                },
                new TableColumnDefinition
                {
                    Title = "倉庫",
                    PropertyName = "Warehouse.WarehouseName",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 120px;",
                    NullDisplayText = "-",
                    IsSortable = true
                },
                new TableColumnDefinition
                {
                    Title = "進貨狀態",
                    PropertyName = "ReceiptStatus",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 120px;",
                    CustomTemplate = item => builder =>
                    {
                        var entity = (PurchaseReceiving)item;
                        builder.OpenElement(0, "span");
                        builder.AddAttribute(1, "class", $"badge bg-{GetStatusColor(entity.ReceiptStatus)}");
                        builder.AddContent(2, GetReceiptStatusDisplayName(entity.ReceiptStatus));
                        builder.CloseElement();
                    }
                },
                new TableColumnDefinition
                {
                    Title = "進貨總金額",
                    PropertyName = "TotalAmount",
                    DataType = ColumnDataType.Currency,
                    Format = "N2",
                    HeaderCssClass = "text-end",
                    CellCssClass = "text-end",
                    HeaderStyle = "width: 130px;",
                    IsSortable = true
                },
                new TableColumnDefinition
                {
                    Title = "驗收人員",
                    PropertyName = "InspectionPersonnel",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 120px;",
                    NullDisplayText = "-"
                },
                new TableColumnDefinition
                {
                    Title = "確認人員",
                    PropertyName = "ConfirmedByUser.Name",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 120px;",
                    NullDisplayText = "-",
                    CustomTemplate = item => builder =>
                    {
                        var entity = (PurchaseReceiving)item;
                        if (entity.ConfirmedByUser != null)
                        {
                            var name = entity.ConfirmedByUser.Name?.Trim() ?? "";
                            builder.AddContent(0, name);
                        }
                        else
                        {
                            builder.AddContent(0, "-");
                        }
                    }
                },
                new TableColumnDefinition
                {
                    Title = "確認時間",
                    PropertyName = "ConfirmedAt",
                    DataType = ColumnDataType.DateTime,
                    Format = "yyyy/MM/dd HH:mm",
                    HeaderStyle = "width: 150px;",
                    NullDisplayText = "-",
                    IsSortable = true
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeColumns),
                GetType(),
                additionalData: "初始化欄位定義失敗"
            );
            
            // 設定安全的預設值
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }

    private string GetReceiptStatusDisplayName(PurchaseReceivingStatus status)
    {
        return status switch
        {
            PurchaseReceivingStatus.Draft => "草稿",
            PurchaseReceivingStatus.Confirmed => "已確認",
            PurchaseReceivingStatus.Received => "已入庫",
            PurchaseReceivingStatus.Cancelled => "已取消",
            _ => status.ToString()
        };
    }

    private string GetStatusColor(PurchaseReceivingStatus status)
    {
        return status switch
        {
            PurchaseReceivingStatus.Draft => "secondary",
            PurchaseReceivingStatus.Confirmed => "primary",
            PurchaseReceivingStatus.Received => "success",
            PurchaseReceivingStatus.Cancelled => "danger",
            _ => "secondary"
        };
    }
}
