@page "/purchase/receiving"
@inject IPurchaseReceivingService PurchaseReceivingService
@inject IPurchaseOrderService PurchaseOrderService
@inject IWarehouseService WarehouseService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="PurchaseReceiving" 
                          TService="IPurchaseReceivingService"
                          Service="@PurchaseReceivingService"
                          EntityBasePath="/purchase/receiving"
                          PageTitle="採購進貨管理"
                          PageSubtitle="管理所有採購進貨單資料與進貨狀態"
                          EntityName="採購進貨單"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadPurchaseReceivingsAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplyPurchaseReceivingFilters"
                          GetEntityDisplayName="@(receipt => receipt.ReceiptNumber)"
                          RequiredPermission="PurchaseReceiving.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 採購進貨單編輯 Modal *@
<PurchaseReceivingEditModalComponent IsVisible="@showEditModal"
                                    IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                                    PurchaseReceivingId="@editingPurchaseReceivingId"
                                    OnPurchaseReceivingSaved="@modalHandler.OnEntitySavedAsync"
                                    OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<PurchaseReceiving, IPurchaseReceivingService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingPurchaseReceivingId = null;
    
    // Modal 處理器
    private ModalHandler<PurchaseReceiving, GenericIndexPageComponent<PurchaseReceiving, IPurchaseReceivingService>> modalHandler = default!;
    
    // 欄位配置
    private PurchaseReceivingFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // 相關資料
    private List<PurchaseOrder> purchaseOrders = new();
    private List<Warehouse> warehouses = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<PurchaseReceiving, GenericIndexPageComponent<PurchaseReceiving, IPurchaseReceivingService>>(
                id => editingPurchaseReceivingId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入相關資料
            await LoadPurchaseOrdersAsync();
            await LoadWarehousesAsync();
            
            // 建立欄位配置
            fieldConfiguration = new PurchaseReceivingFieldConfiguration(purchaseOrders, warehouses, NotificationService);
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化採購進貨頁面失敗");
            await NotificationService.ShowErrorAsync("初始化採購進貨頁面失敗");
        }
    }

    /// <summary>
    /// 初始化麵包屑導航
    /// </summary>
    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("採購管理", "#"),
                new("採購進貨管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    /// <summary>
    /// 載入採購進貨單資料
    /// </summary>
    private async Task<List<PurchaseReceiving>> LoadPurchaseReceivingsAsync()
    {
        try
        {
            return await PurchaseReceivingService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPurchaseReceivingsAsync), GetType(), additionalData: "載入採購進貨單資料失敗");
            await NotificationService.ShowErrorAsync("載入採購進貨單資料失敗");
            return new List<PurchaseReceiving>();
        }
    }

    /// <summary>
    /// 載入基礎資料
    /// </summary>
    private async Task LoadBasicDataAsync()
    {
        try
        {
            await LoadPurchaseOrdersAsync();
            await LoadWarehousesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadBasicDataAsync), GetType(), additionalData: "載入基礎資料失敗");
            await NotificationService.ShowErrorAsync("載入基礎資料失敗");
        }
    }

    /// <summary>
    /// 載入採購訂單資料
    /// </summary>
    private async Task LoadPurchaseOrdersAsync()
    {
        try
        {
            // 只載入已核准的採購訂單
            var allOrders = await PurchaseOrderService.GetAllAsync();
            purchaseOrders = allOrders.Where(po => po.IsApproved).ToList();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPurchaseOrdersAsync), GetType(), additionalData: "載入採購訂單資料失敗");
            await NotificationService.ShowErrorAsync("載入採購訂單資料失敗");
            purchaseOrders = new List<PurchaseOrder>();
        }
    }

    /// <summary>
    /// 載入倉庫資料
    /// </summary>
    private async Task LoadWarehousesAsync()
    {
        try
        {
            warehouses = await WarehouseService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadWarehousesAsync), GetType(), additionalData: "載入倉庫資料失敗");
            await NotificationService.ShowErrorAsync("載入倉庫資料失敗");
            warehouses = new List<Warehouse>();
        }
    }

    /// <summary>
    /// 應用採購進貨單篩選器
    /// </summary>
    private IQueryable<PurchaseReceiving> ApplyPurchaseReceivingFilters(SearchFilterModel searchModel, IQueryable<PurchaseReceiving> query)
    {
        // 確保 fieldConfiguration 已初始化（避免與 GenericIndexPageComponent 初始化的競爭條件）
        if (fieldConfiguration == null)
        {
            // 如果配置未初始化，回傳基本排序的查詢
            return query.OrderByDescending(pr => pr.ReceiptDate)
                       .ThenByDescending(pr => pr.ReceiptNumber);
        }

        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyPurchaseReceivingFilters), GetType());
    }
}
