@page "/purchase-receivings/edit"
@page "/purchase-receivings/edit/{id:int?}"
@inject IPurchaseReceivingService PurchaseReceivingService
@inject IPurchaseOrderService PurchaseOrderService
@inject ISupplierService SupplierService
@inject IWarehouseService WarehouseService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="PurchaseReceiving" 
                        TService="IPurchaseReceivingService"
                        Id="@Id"
                        Entity="@purchaseReceiving"
                        Service="@PurchaseReceivingService"
                        EntityName="採購進貨"
                        EntityNamePlural="採購進貨"
                        PageTitle="@(Id.HasValue ? "編輯採購進貨" : "新增採購進貨")"
                        FormTitle="基本資料"
                        FormSubtitle="採購進貨的基本資訊"
                        RequiredPermission="@(Id.HasValue ? "PurchaseReceiving.Update" : "PurchaseReceiving.Create")"
                        IndexRoute="/purchase-receivings"
                        FormFields="@formFields"
                        FormSections="@formSections"
                        BreadcrumbItems="@breadcrumbItems"
                        DataLoader="@LoadPurchaseReceivingData"
                        AdditionalDataLoader="@LoadAdditionalData"
                        SaveHandler="@SavePurchaseReceiving"
                        @ref="editComponent">
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<PurchaseReceiving, IPurchaseReceivingService> editComponent = default!;
    
    // 資料模型
    private PurchaseReceiving purchaseReceiving = new();
    
    // 選項清單
    private List<PurchaseOrder> purchaseOrders = new();
    private List<Supplier> suppliers = new();
    private List<Warehouse> warehouses = new();
    private List<Employee> employees = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            await InitializeDefaultValues();
            InitializeBasicFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType(),
                additionalData: "初始化採購進貨編輯頁面失敗"
            );
            
            // 確保基本初始化完成，避免程式崩潰
            breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
            formFields ??= new List<FormFieldDefinition>();
            formSections ??= new Dictionary<string, string>();
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("採購管理", "/"),
                new("採購進貨", "/purchase-receivings"),
                new(Id.HasValue ? "編輯採購進貨" : "新增採購進貨", "")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化麵包屑失敗"
            );
        }
    }

    private async Task InitializeDefaultValues()
    {
        try
        {
            if (!Id.HasValue)
            {
                purchaseReceiving = new PurchaseReceiving
                {
                    ReceiptNumber = await GenerateNewReceiptNumberAsync(),
                    ReceiptDate = DateTime.Today,
                    ReceiptStatus = PurchaseReceivingStatus.Draft,
                    TotalAmount = 0,
                    TaxAmount = 0
                };
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeDefaultValues),
                GetType(),
                additionalData: "初始化預設值失敗"
            );
        }
    }

    private async Task<string> GenerateNewReceiptNumberAsync()
    {
        try
        {
            return await PurchaseReceivingService.GenerateReceiptNumberAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GenerateNewReceiptNumberAsync),
                GetType(),
                additionalData: "生成進貨單號失敗"
            );
            
            // 返回基本格式作為後備
            return $"RCV{DateTime.Today:yyyyMMdd}001";
        }
    }

    private void InitializeBasicFormFields()
    {
        try
        {
            // 基本表單欄位定義
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.ReceiptNumber),
                    Label = "進貨單號",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "系統自動產生",
                    IsReadOnly = true
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.ReceiptDate),
                    Label = "進貨日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.PurchaseOrderId),
                    Label = "採購訂單",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = new List<SelectOption>() // 稍後載入
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.WarehouseId),
                    Label = "倉庫",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = new List<SelectOption>() // 稍後載入
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.ReceiptStatus),
                    Label = "進貨狀態",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = GetReceiptStatusOptions()
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.InspectionPersonnel),
                    Label = "驗收人員",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入驗收人員姓名",
                    MaxLength = 100
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.ReceiptRemarks),
                    Label = "進貨備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入進貨備註",
                    MaxLength = 500,
                    Rows = 3
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.TotalAmount),
                    Label = "進貨總金額",
                    FieldType = FormFieldType.Number,
                    Placeholder = "0.00",
                    Step = 0.01m,
                    Min = 0m
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.TaxAmount),
                    Label = "稅額",
                    FieldType = FormFieldType.Number,
                    Placeholder = "0.00",
                    Step = 0.01m,
                    Min = 0m
                }
            };

            // 設定表單區段
            formSections = new Dictionary<string, string>
            {
                { nameof(PurchaseReceiving.ReceiptNumber), "基本資訊" },
                { nameof(PurchaseReceiving.ReceiptDate), "基本資訊" },
                { nameof(PurchaseReceiving.PurchaseOrderId), "基本資訊" },
                { nameof(PurchaseReceiving.WarehouseId), "基本資訊" },
                { nameof(PurchaseReceiving.ReceiptStatus), "基本資訊" },
                { nameof(PurchaseReceiving.InspectionPersonnel), "驗收資訊" },
                { nameof(PurchaseReceiving.ReceiptRemarks), "驗收資訊" },
                { nameof(PurchaseReceiving.TotalAmount), "金額資訊" },
                { nameof(PurchaseReceiving.TaxAmount), "金額資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBasicFormFields),
                GetType(),
                additionalData: "初始化表單欄位失敗"
            );
            
            // 設定安全的預設值
            formFields = new List<FormFieldDefinition>();
            formSections = new Dictionary<string, string>();
        }
    }

    private async Task<PurchaseReceiving?> LoadPurchaseReceivingData()
    {
        try
        {
            if (Id.HasValue)
            {
                var result = await PurchaseReceivingService.GetByIdAsync(Id.Value);
                if (result != null)
                {
                    purchaseReceiving = result;
                    return result;
                }
            }
            return purchaseReceiving;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadPurchaseReceivingData),
                GetType(),
                additionalData: new { Id }
            );
            throw;
        }
    }

    private async Task LoadAdditionalData()
    {
        try
        {
            // 載入採購訂單清單
            purchaseOrders = await PurchaseOrderService.GetAllAsync();
            var purchaseOrderOptions = new List<SelectOption> 
            { 
                new SelectOption { Text = "請選擇採購訂單", Value = "0" } 
            };
            purchaseOrderOptions.AddRange(purchaseOrders
                .Select(po => new SelectOption 
                { 
                    Text = $"{po.PurchaseOrderNumber} - {po.Supplier?.CompanyName}", 
                    Value = po.Id.ToString() 
                })
                .ToList());

            // 載入倉庫清單
            warehouses = await WarehouseService.GetAllAsync();
            var warehouseOptions = new List<SelectOption>
            {
                new SelectOption { Text = "請選擇倉庫", Value = "0" }
            };
            warehouseOptions.AddRange(warehouses
                .Select(w => new SelectOption
                {
                    Text = w.WarehouseName,
                    Value = w.Id.ToString()
                })
                .ToList());

            // 更新表單欄位選項
            UpdateFormFieldOptions(nameof(PurchaseReceiving.PurchaseOrderId), purchaseOrderOptions);
            UpdateFormFieldOptions(nameof(PurchaseReceiving.WarehouseId), warehouseOptions);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadAdditionalData),
                GetType(),
                additionalData: "載入額外資料失敗"
            );
        }
    }

    private void UpdateFormFieldOptions(string fieldName, List<SelectOption> options)
    {
        var field = formFields.FirstOrDefault(f => f.PropertyName == fieldName);
        if (field != null)
        {
            field.Options = options;
        }
    }

    private List<SelectOption> GetReceiptStatusOptions()
    {
        return Enum.GetValues<PurchaseReceivingStatus>()
            .Select(status => new SelectOption 
            { 
                Text = GetReceiptStatusDisplayName(status), 
                Value = ((int)status).ToString() 
            })
            .ToList();
    }

    private string GetReceiptStatusDisplayName(PurchaseReceivingStatus status)
    {
        return status switch
        {
            PurchaseReceivingStatus.Draft => "草稿",
            PurchaseReceivingStatus.Confirmed => "已確認",
            PurchaseReceivingStatus.Received => "已入庫",
            PurchaseReceivingStatus.Cancelled => "已取消",
            _ => status.ToString()
        };
    }

    private async Task<bool> SavePurchaseReceiving(PurchaseReceiving entity)
    {
        try
        {
            ServiceResult result;
            
            if (entity.Id == 0)
            {
                // 新增
                result = await PurchaseReceivingService.CreateAsync(entity);
            }
            else
            {
                // 更新
                result = await PurchaseReceivingService.UpdateAsync(entity);
            }

            if (result.IsSuccess)
            {
                await NotificationService.ShowSuccessAsync($"採購進貨{(entity.Id == 0 ? "新增" : "更新")}成功");
                return true;
            }
            else
            {
                await NotificationService.ShowErrorAsync($"採購進貨{(entity.Id == 0 ? "新增" : "更新")}失敗：{result.ErrorMessage}");
                return false;
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(SavePurchaseReceiving),
                GetType(),
                additionalData: new { EntityId = entity.Id }
            );
            
            await NotificationService.ShowErrorAsync("儲存過程中發生錯誤，請稍後再試");
            return false;
        }
    }
}
