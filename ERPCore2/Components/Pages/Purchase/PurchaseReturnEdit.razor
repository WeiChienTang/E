@page "/purchase-returns/edit"
@page "/purchase-returns/edit/{id:int?}"
@inject IPurchaseReturnService PurchaseReturnService
@inject ISupplierService SupplierService
@inject IEmployeeService EmployeeService
@inject IPurchaseOrderService PurchaseOrderService
@inject IPurchaseReceivingService PurchaseReceivingService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="PurchaseReturn" 
                        TService="IPurchaseReturnService"
                        Id="@Id"
                        Entity="@purchaseReturn"
                        Service="@PurchaseReturnService"
                        EntityName="採購退回"
                        EntityNamePlural="採購退回"
                        PageTitle="@(Id.HasValue ? "編輯採購退回" : "新增採購退回")"
                        FormTitle="基本資料"
                        FormSubtitle="採購退回的基本資訊"
                        RequiredPermission="PurchaseReturn.Read"
                        IndexRoute="/purchase-returns"
                        FormFields="@formFields"
                        FormSections="@formSections"
                        BreadcrumbItems="@breadcrumbItems"
                        DataLoader="@LoadPurchaseReturnData"
                        AdditionalDataLoader="@LoadAdditionalData"
                        SaveHandler="@SavePurchaseReturn"
                        @ref="editComponent">
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<PurchaseReturn, IPurchaseReturnService> editComponent = default!;
    
    // 資料模型
    private PurchaseReturn purchaseReturn = new();
    
    // 選項清單
    private List<Supplier> suppliers = new();
    private List<Employee> employees = new();
    private List<PurchaseOrder> purchaseOrders = new();
    private List<PurchaseReceiving> purchaseReceivings = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            await InitializeDefaultValues();
            InitializeBasicFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnInitializedAsync), 
                GetType()
            );
            
            // 確保基本初始化完成，避免程式崩潰
            breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
            formFields ??= new List<FormFieldDefinition>();
            formSections ??= new Dictionary<string, string>();
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new() { Text = "首頁", Href = "/" },
                new() { Text = "採購管理", Href = "/purchase" },
                new() { Text = "採購退回", Href = "/purchase-returns" },
                new() { Text = Id.HasValue ? "編輯採購退回" : "新增採購退回" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType()
            );
        }
    }

    private async Task InitializeDefaultValues()
    {
        try
        {
            if (!Id.HasValue)
            {
                // 新增模式：設定預設值
                purchaseReturn = new PurchaseReturn
                {
                    ReturnDate = DateTime.Today,
                    ReturnStatus = PurchaseReturnStatus.Draft,
                    ReturnReason = PurchaseReturnReason.QualityIssue,
                    TotalReturnAmount = 0,
                    ReturnTaxAmount = 0,
                    TotalReturnAmountWithTax = 0,
                    IsRefunded = false,
                    RefundAmount = 0
                };

                // 產生新的退貨單號
                var maxReturnNumber = await GenerateNewReturnNumberAsync();
                purchaseReturn.PurchaseReturnNumber = maxReturnNumber;
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeDefaultValues),
                GetType(),
                additionalData: "初始化預設值失敗"
            );
        }
    }

    private async Task<string> GenerateNewReturnNumberAsync()
    {
        try
        {
            var today = DateTime.Today;
            var prefix = $"PR{today:yyyyMMdd}";
            
            var existingReturns = await PurchaseReturnService.GetAllAsync();
            var todayReturns = existingReturns
                .Where(pr => pr.PurchaseReturnNumber.StartsWith(prefix))
                .ToList();

            var maxNumber = 1;
            if (todayReturns.Any())
            {
                maxNumber = todayReturns
                    .Select(pr => pr.PurchaseReturnNumber)
                    .Where(number => number.Length >= prefix.Length + 3)
                    .Select(number => 
                    {
                        var suffix = number.Substring(prefix.Length);
                        return int.TryParse(suffix, out var num) ? num : 0;
                    })
                    .Max() + 1;
            }

            return $"{prefix}{maxNumber:D3}";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GenerateNewReturnNumberAsync),
                GetType()
            );
            
            // 返回基本格式作為後備
            return $"PR{DateTime.Today:yyyyMMdd}001";
        }
    }

    private void InitializeBasicFormFields()
    {
        try
        {
            // 基本表單欄位定義
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(PurchaseReturn.PurchaseReturnNumber),
                    Label = "退貨單號",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "退貨單號",
                    IsReadOnly = true
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ReturnDate),
                    Label = "退貨日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.SupplierId),
                    Label = "供應商",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = new List<SelectOption>()
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.PurchaseOrderId),
                    Label = "原始採購訂單",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = new List<SelectOption>()
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.PurchaseReceivingId),
                    Label = "原始採購進貨單",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = new List<SelectOption>()
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ReturnReason),
                    Label = "退貨原因",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = GetReturnReasonOptions()
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ReturnDescription),
                    Label = "退貨說明",
                    FieldType = FormFieldType.TextArea,
                    IsRequired = false,
                    Placeholder = "請輸入退貨說明...",
                    Rows = 4
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ExpectedProcessDate),
                    Label = "預計處理日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = false
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.TotalReturnAmount),
                    Label = "退貨總金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    IsReadOnly = true
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ReturnTaxAmount),
                    Label = "退貨稅額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    IsReadOnly = true
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.TotalReturnAmountWithTax),
                    Label = "退貨含稅總金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    IsReadOnly = true
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ReturnStatus),
                    Label = "退貨狀態",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = GetReturnStatusOptions()
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.EmployeeId),
                    Label = "處理人員",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = new List<SelectOption>()
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ProcessPersonnel),
                    Label = "處理人員(外部)",
                    FieldType = FormFieldType.Text,
                    IsRequired = false,
                    Placeholder = "請輸入外部處理人員名稱"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ProcessRemarks),
                    Label = "處理備註",
                    FieldType = FormFieldType.TextArea,
                    IsRequired = false,
                    Placeholder = "請輸入處理備註...",
                    Rows = 3
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.ActualProcessDate),
                    Label = "實際處理日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = false
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.IsRefunded),
                    Label = "是否已收到退款",
                    FieldType = FormFieldType.Checkbox,
                    IsRequired = false
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.RefundDate),
                    Label = "退款日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = false
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.RefundAmount),
                    Label = "退款金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false
                },
                new()
                {
                    PropertyName = nameof(PurchaseReturn.RefundRemarks),
                    Label = "退款備註",
                    FieldType = FormFieldType.TextArea,
                    IsRequired = false,
                    Placeholder = "請輸入退款備註...",
                    Rows = 2
                }
            };

            // 設定表單區段 - 參考 CustomerEdit.razor 的寫法
            formSections = new Dictionary<string, string>
            {
                { nameof(PurchaseReturn.PurchaseReturnNumber), "基本資料" },
                { nameof(PurchaseReturn.ReturnDate), "基本資料" },
                { nameof(PurchaseReturn.SupplierId), "基本資料" },
                { nameof(PurchaseReturn.PurchaseOrderId), "相關單據" },
                { nameof(PurchaseReturn.PurchaseReceivingId), "相關單據" },
                { nameof(PurchaseReturn.ReturnReason), "退貨詳情" },
                { nameof(PurchaseReturn.ReturnDescription), "退貨詳情" },
                { nameof(PurchaseReturn.ExpectedProcessDate), "退貨詳情" },
                { nameof(PurchaseReturn.TotalReturnAmount), "金額資訊" },
                { nameof(PurchaseReturn.ReturnTaxAmount), "金額資訊" },
                { nameof(PurchaseReturn.TotalReturnAmountWithTax), "金額資訊" },
                { nameof(PurchaseReturn.ReturnStatus), "處理資訊" },
                { nameof(PurchaseReturn.EmployeeId), "處理資訊" },
                { nameof(PurchaseReturn.ProcessPersonnel), "處理資訊" },
                { nameof(PurchaseReturn.ProcessRemarks), "處理資訊" },
                { nameof(PurchaseReturn.ActualProcessDate), "處理資訊" },
                { nameof(PurchaseReturn.IsRefunded), "退款資訊" },
                { nameof(PurchaseReturn.RefundDate), "退款資訊" },
                { nameof(PurchaseReturn.RefundAmount), "退款資訊" },
                { nameof(PurchaseReturn.RefundRemarks), "退款資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBasicFormFields),
                GetType(),
                additionalData: "初始化基本表單欄位失敗"
            );
            
            // 設定安全的預設值
            formFields = new List<FormFieldDefinition>();
            formSections = new Dictionary<string, string>();
        }
    }

    private async Task<PurchaseReturn?> LoadPurchaseReturnData()
    {
        try
        {
            if (Id.HasValue)
            {
                return await PurchaseReturnService.GetByIdAsync(Id.Value);
            }
            return purchaseReturn;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadPurchaseReturnData),
                GetType(),
                additionalData: new { Id }
            );
            throw;
        }
    }

    private async Task LoadAdditionalData()
    {
        try
        {
            // 載入供應商清單
            suppliers = await SupplierService.GetAllAsync();
            var supplierOptions = new List<SelectOption>
            {
                new SelectOption { Value = "", Text = "請選擇..." }
            };
            
            supplierOptions.AddRange(suppliers
                .Where(s => !s.IsDeleted)
                .OrderBy(s => s.CompanyName)
                .Select(s => new SelectOption
                {
                    Value = s.Id.ToString(),
                    Text = s.CompanyName
                }));

            // 載入員工清單
            employees = await EmployeeService.GetAllAsync();
            var employeeOptions = employees
                .Where(e => !e.IsDeleted && e.Status == EntityStatus.Active)
                .OrderBy(e => e.FirstName)
                .ThenBy(e => e.LastName)
                .Select(e => new SelectOption
                {
                    Value = e.Id.ToString(),
                    Text = $"{e.FirstName} {e.LastName}"
                })
                .ToList();

            // 載入採購訂單清單 - 根據供應商篩選
            purchaseOrders = await PurchaseOrderService.GetAllAsync();
            List<SelectOption> purchaseOrderOptions;
            
            // 如果已選擇供應商，則只顯示該供應商的採購訂單
            if (purchaseReturn.SupplierId > 0)
            {
                purchaseOrderOptions = purchaseOrders
                    .Where(po => !po.IsDeleted && po.SupplierId == purchaseReturn.SupplierId)
                    .OrderByDescending(po => po.OrderDate)
                    .Select(po => new SelectOption
                    {
                        Value = po.Id.ToString(),
                        Text = $"{po.PurchaseOrderNumber} - {po.Supplier?.CompanyName ?? "未知供應商"}"
                    })
                    .ToList();
            }
            else
            {
                // 沒有選擇供應商時顯示全部
                purchaseOrderOptions = purchaseOrders
                    .Where(po => !po.IsDeleted)
                    .OrderByDescending(po => po.OrderDate)
                    .Select(po => new SelectOption
                    {
                        Value = po.Id.ToString(),
                        Text = $"{po.PurchaseOrderNumber} - {po.Supplier?.CompanyName ?? "未知供應商"}"
                    })
                    .ToList();
            }

            // 載入採購進貨清單 - 根據供應商篩選
            purchaseReceivings = await PurchaseReceivingService.GetAllAsync();
            List<SelectOption> purchaseReceivingOptions;
            
            // 如果已選擇供應商，則只顯示該供應商的採購進貨單
            if (purchaseReturn.SupplierId > 0)
            {
                purchaseReceivingOptions = purchaseReceivings
                    .Where(pr => !pr.IsDeleted && pr.PurchaseOrder?.SupplierId == purchaseReturn.SupplierId)
                    .OrderByDescending(pr => pr.CreatedAt)
                    .Select(pr => new SelectOption
                    {
                        Value = pr.Id.ToString(),
                        Text = $"{pr.ReceiptNumber} - {pr.PurchaseOrder?.Supplier?.CompanyName ?? "未知供應商"}"
                    })
                    .ToList();
            }
            else
            {
                // 沒有選擇供應商時顯示全部
                purchaseReceivingOptions = purchaseReceivings
                    .Where(pr => !pr.IsDeleted)
                    .OrderByDescending(pr => pr.CreatedAt)
                    .Select(pr => new SelectOption
                    {
                        Value = pr.Id.ToString(),
                        Text = $"{pr.ReceiptNumber} - {pr.PurchaseOrder?.Supplier?.CompanyName ?? "未知供應商"}"
                    })
                    .ToList();
            }

            // 更新表單欄位的選項
            UpdateFormFieldOptions(nameof(PurchaseReturn.SupplierId), supplierOptions);
            UpdateFormFieldOptions(nameof(PurchaseReturn.EmployeeId), employeeOptions);
            UpdateFormFieldOptions(nameof(PurchaseReturn.PurchaseReceivingId), purchaseReceivingOptions);

            // 根據當前選擇的供應商更新採購訂單選項
            await UpdatePurchaseOrderOptionsBySupplierId(purchaseReturn?.SupplierId ?? 0);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadAdditionalData),
                GetType(),
                additionalData: "載入額外資料失敗"
            );
        }
    }

    private void UpdateFormFieldOptions(string fieldName, List<SelectOption> options)
    {
        var field = formFields.FirstOrDefault(f => f.PropertyName == fieldName);
        if (field != null)
        {
            field.Options = options;
        }
    }

    private List<SelectOption> GetReturnStatusOptions()
    {
        return Enum.GetValues<PurchaseReturnStatus>()
            .Select(status => new SelectOption
            {
                Value = status.ToString(),
                Text = GetReturnStatusDisplayName(status)
            })
            .ToList();
    }

    private List<SelectOption> GetReturnReasonOptions()
    {
        return Enum.GetValues<PurchaseReturnReason>()
            .Select(reason => new SelectOption
            {
                Value = reason.ToString(),
                Text = GetReturnReasonDisplayName(reason)
            })
            .ToList();
    }

    private string GetReturnStatusDisplayName(PurchaseReturnStatus status)
    {
        return status switch
        {
            PurchaseReturnStatus.Draft => "草稿",
            PurchaseReturnStatus.Submitted => "已送出",
            PurchaseReturnStatus.Confirmed => "已確認",
            PurchaseReturnStatus.Processing => "處理中",
            PurchaseReturnStatus.Completed => "已完成",
            PurchaseReturnStatus.Cancelled => "已取消",
            PurchaseReturnStatus.Closed => "已關閉",
            _ => status.ToString()
        };
    }

    private string GetReturnReasonDisplayName(PurchaseReturnReason reason)
    {
        return reason switch
        {
            PurchaseReturnReason.QualityIssue => "品質不良",
            PurchaseReturnReason.SpecificationMismatch => "規格不符",
            PurchaseReturnReason.QuantityError => "數量錯誤",
            PurchaseReturnReason.ExpiredProduct => "過期商品",
            PurchaseReturnReason.ShippingDamage => "運送損壞",
            PurchaseReturnReason.SupplierRequest => "廠商要求",
            PurchaseReturnReason.Other => "其他",
            _ => reason.ToString()
        };
    }

    private async Task<bool> SavePurchaseReturn(PurchaseReturn entity)
    {
        try
        {
            // 調試訊息：開始儲存
            await NotificationService.ShowInfoAsync($"開始儲存採購退回，ID: {Id?.ToString() ?? "新增"}");
            
            // 首先執行必填欄位的客戶端驗證
            var isRequiredFieldsValid = await NotificationService.ValidateRequiredFieldsAsync();
            if (!isRequiredFieldsValid)
            {
                await NotificationService.ShowErrorAsync("必填欄位驗證失敗");
                return false;
            }

            // 調試訊息：驗證實體資料
            await NotificationService.ShowInfoAsync($"驗證實體資料 - 退貨單號: {entity.PurchaseReturnNumber}, 供應商ID: {entity.SupplierId}, 退貨日期: {entity.ReturnDate:yyyy-MM-dd}");

            // 基本驗證 - 使用通知服務
            if (string.IsNullOrWhiteSpace(entity.PurchaseReturnNumber))
            {
                await NotificationService.ShowErrorAsync("退貨單號為必填");
                return false;
            }

            if (entity.SupplierId <= 0)
            {
                await NotificationService.ShowErrorAsync("請選擇供應商");
                return false;
            }

            if (entity.ReturnDate == default)
            {
                await NotificationService.ShowErrorAsync("請選擇退貨日期");
                return false;
            }

            // 調試訊息：基本驗證通過
            await NotificationService.ShowInfoAsync("基本驗證通過，準備呼叫服務");

            ServiceResult<PurchaseReturn> result;
            
            if (Id.HasValue)
            {
                // 更新現有採購退回
                await NotificationService.ShowInfoAsync($"呼叫更新服務，ID: {Id.Value}");
                result = await PurchaseReturnService.UpdateAsync(entity);
            }
            else
            {
                // 新增採購退回
                await NotificationService.ShowInfoAsync("呼叫新增服務");
                result = await PurchaseReturnService.CreateAsync(entity);
            }

            // 調試訊息：服務呼叫結果
            await NotificationService.ShowInfoAsync($"服務呼叫完成 - 成功: {result.IsSuccess}, 錯誤訊息: {result.ErrorMessage}");

            // 檢查服務結果並顯示詳細錯誤
            if (!result.IsSuccess)
            {
                var errorDetails = $"儲存失敗：{result.ErrorMessage}";
                if (result.ValidationErrors?.Any() == true)
                {
                    errorDetails += $"\n驗證錯誤：{string.Join(", ", result.ValidationErrors)}";
                }
                await NotificationService.ShowErrorAsync(errorDetails);
                return false;
            }

            // 如果是新增且成功，更新實體和 ID
            if (!Id.HasValue && result.Data != null)
            {
                purchaseReturn = result.Data;
                Id = purchaseReturn.Id;
                await NotificationService.ShowInfoAsync($"新增成功，新的 ID: {Id}");
            }

            // 使用通知服務顯示結果，但不重複顯示
            // GenericEditPageComponent 會處理通用的成功/失敗訊息
            await NotificationService.ShowInfoAsync("儲存成功");
            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            // 詳細的錯誤訊息
            var errorMessage = $"儲存時發生例外錯誤：\n" +
                              $"錯誤類型：{ex.GetType().Name}\n" +
                              $"錯誤訊息：{ex.Message}\n" +
                              $"堆疊追蹤：{ex.StackTrace}";
            
            if (ex.InnerException != null)
            {
                errorMessage += $"\n內部例外：{ex.InnerException.Message}";
            }
            
            await NotificationService.ShowErrorAsync(errorMessage);
            
            // 同時記錄到錯誤處理系統
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(SavePurchaseReturn), 
                GetType(),
                additionalData: new { 
                    PageName = "PurchaseReturnEdit",
                    Action = "SavePurchaseReturn",
                    PurchaseReturnId = Id,
                    EntityData = new {
                        entity.PurchaseReturnNumber,
                        entity.SupplierId,
                        entity.ReturnDate,
                        entity.ReturnStatus,
                        entity.ReturnReason
                    }
                });
            
            return false;
        }
    }

    /// <summary>
    /// 根據供應商ID更新採購訂單選項（公開方法，供外部組件調用）
    /// </summary>
    /// <param name="supplierId">供應商ID，0表示未選擇</param>
    public async Task UpdatePurchaseOrderOptionsBySupplierId(int supplierId)
    {
        try
        {
            if (purchaseOrders == null || !purchaseOrders.Any())
            {
                // 如果還沒有載入採購訂單資料，先載入
                purchaseOrders = await PurchaseOrderService.GetAllAsync();
            }

            List<SelectOption> purchaseOrderOptions;
            
            // 如果已選擇供應商，則只顯示該供應商的採購訂單
            if (supplierId > 0)
            {
                purchaseOrderOptions = purchaseOrders
                    .Where(po => !po.IsDeleted && po.SupplierId == supplierId)
                    .OrderByDescending(po => po.OrderDate)
                    .Select(po => new SelectOption
                    {
                        Value = po.Id.ToString(),
                        Text = $"{po.PurchaseOrderNumber} - {po.Supplier?.CompanyName ?? "未知供應商"}"
                    })
                    .ToList();
            }
            else
            {
                // 沒有選擇供應商時顯示全部
                purchaseOrderOptions = purchaseOrders
                    .Where(po => !po.IsDeleted)
                    .OrderByDescending(po => po.OrderDate)
                    .Select(po => new SelectOption
                    {
                        Value = po.Id.ToString(),
                        Text = $"{po.PurchaseOrderNumber} - {po.Supplier?.CompanyName ?? "未知供應商"}"
                    })
                    .ToList();
            }

            // 更新採購訂單欄位的選項
            UpdateFormFieldOptions(nameof(PurchaseReturn.PurchaseOrderId), purchaseOrderOptions);
            
            // 同時更新採購進貨選項
            await UpdatePurchaseReceivingOptionsBySupplierId(supplierId);
            
            // 如果當前選擇的採購訂單不在新的選項中，清除選擇
            if (purchaseReturn.PurchaseOrderId.HasValue)
            {
                var isCurrentOrderValid = purchaseOrderOptions.Any(option => 
                    int.TryParse(option.Value, out var optionId) && optionId == purchaseReturn.PurchaseOrderId.Value);
                
                if (!isCurrentOrderValid)
                {
                    purchaseReturn.PurchaseOrderId = null;
                }
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(UpdatePurchaseOrderOptionsBySupplierId),
                GetType(),
                additionalData: new { supplierId }
            );
        }
    }

    /// <summary>
    /// 根據供應商ID更新採購進貨選項
    /// </summary>
    /// <param name="supplierId">供應商ID，0表示未選擇</param>
    public async Task UpdatePurchaseReceivingOptionsBySupplierId(int supplierId)
    {
        try
        {
            if (purchaseReceivings == null || !purchaseReceivings.Any())
            {
                // 如果還沒有載入採購進貨資料，先載入
                purchaseReceivings = await PurchaseReceivingService.GetAllAsync();
            }

            List<SelectOption> purchaseReceivingOptions;
            
            // 如果已選擇供應商，則只顯示該供應商的採購進貨單
            if (supplierId > 0)
            {
                purchaseReceivingOptions = purchaseReceivings
                    .Where(pr => !pr.IsDeleted && pr.PurchaseOrder?.SupplierId == supplierId)
                    .OrderByDescending(pr => pr.CreatedAt)
                    .Select(pr => new SelectOption
                    {
                        Value = pr.Id.ToString(),
                        Text = $"{pr.ReceiptNumber} - {pr.PurchaseOrder?.Supplier?.CompanyName ?? "未知供應商"}"
                    })
                    .ToList();
            }
            else
            {
                // 沒有選擇供應商時顯示全部
                purchaseReceivingOptions = purchaseReceivings
                    .Where(pr => !pr.IsDeleted)
                    .OrderByDescending(pr => pr.CreatedAt)
                    .Select(pr => new SelectOption
                    {
                        Value = pr.Id.ToString(),
                        Text = $"{pr.ReceiptNumber} - {pr.PurchaseOrder?.Supplier?.CompanyName ?? "未知供應商"}"
                    })
                    .ToList();
            }

            // 更新採購進貨欄位的選項
            UpdateFormFieldOptions(nameof(PurchaseReturn.PurchaseReceivingId), purchaseReceivingOptions);
            
            // 如果當前選擇的採購進貨不在新的選項中，清除選擇
            if (purchaseReturn.PurchaseReceivingId.HasValue)
            {
                var isCurrentReceivingValid = purchaseReceivingOptions.Any(option => 
                    int.TryParse(option.Value, out var optionId) && optionId == purchaseReturn.PurchaseReceivingId.Value);
                
                if (!isCurrentReceivingValid)
                {
                    purchaseReturn.PurchaseReceivingId = null;
                }
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(UpdatePurchaseReceivingOptionsBySupplierId),
                GetType(),
                additionalData: new { supplierId }
            );
        }
    }
}
