@* 進貨編輯模態組件 *@
@inject IPurchaseReceivingService PurchaseReceivingService
@inject IPurchaseReceivingDetailService PurchaseReceivingDetailService
@inject IPurchaseOrderService PurchaseOrderService
@inject IPurchaseOrderDetailService PurchaseOrderDetailService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@inject INotificationService NotificationService
@inject ISupplierService SupplierService
@inject IEmployeeService EmployeeService
@inject IProductService ProductService
@inject ISystemParameterService SystemParameterService
@inject IPurchaseReturnService PurchaseReturnService
@inject IPurchaseReturnDetailService PurchaseReturnDetailService
@inject ISetoffDocumentService SetoffDocumentService
@inject IReportPrintConfigurationService ReportPrintConfigurationService
@inject ActionButtonHelper ActionButtonHelper
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<GenericEditModalComponent TEntity="PurchaseReceiving" 
                          TService="IPurchaseReceivingService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@PurchaseReceivingId"
                          Service="@PurchaseReceivingService"
                          EntityName="進貨"
                          EntityNamePlural="進貨"
                          ModalTitle="@(PurchaseReceivingId.HasValue ? "編輯進貨" : "新增進貨單")"
                          Size="GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadPurchaseReceivingData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          CustomValidator="@ValidatePurchaseReceivingDetailsAsync"
                          AfterSave="@SavePurchaseReceivingDetailsAsync"
                          SaveSuccessMessage="@(PurchaseReceivingId.HasValue ? "進貨更新成功" : "進貨新增成功")"
                          SaveFailureMessage="進貨儲存失敗"
                          RequiredPermission="PurchaseReceiving.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          GetStatusMessage="@GetPurchaseReceivingStatusMessage"
                          FormHeaderContent="@GetWarningMessage()"
                          CustomModules="@GetCustomModules()"
                          ShowPrintButton="true"
                          OnPrint="@HandlePrint" />

@* 廠商編輯 Modal *@
<SupplierEditModalComponent @ref="supplierEditModal"
                           IsVisible="@supplierModalManager.IsModalVisible"
                           IsVisibleChanged="@supplierModalManager.HandleModalVisibilityChangedAsync"
                           SupplierId="@supplierModalManager.SelectedEntityId"
                           PrefilledValues="@supplierModalManager.PrefilledValues"
                           OnSupplierSaved="@OnSupplierSavedWrapper"
                           OnCancel="@supplierModalManager.HandleModalCancelAsync" />

@* 進貨退出編輯 Modal *@
<PurchaseReturnEditModalComponent @ref="purchaseReturnEditModal"
                                 IsVisible="@showPurchaseReturnModal"
                                 IsVisibleChanged="@((bool visible) => showPurchaseReturnModal = visible)"
                                 PurchaseReturnId="@selectedPurchaseReturnId"
                                 OnPurchaseReturnSaved="@HandlePurchaseReturnSaved"
                                 OnCancel="@(() => showPurchaseReturnModal = false)" />

@* 沖款單編輯 Modal *@
<SetoffDocumentEditModalComponent @ref="setoffDocumentEditModal"
                                 IsVisible="@showSetoffDocumentModal"
                                 IsVisibleChanged="@((bool visible) => showSetoffDocumentModal = visible)"
                                 SetoffDocumentId="@selectedSetoffDocumentId"
                                 OnSetoffDocumentSaved="@HandleSetoffDocumentSaved"
                                 OnCancel="@(() => showSetoffDocumentModal = false)" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? PurchaseReceivingId { get; set; }
    [Parameter] public EventCallback<PurchaseReceiving> OnPurchaseReceivingSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<PurchaseOrder> purchaseOrders = new();
    private List<Warehouse> warehouses = new();
    private List<WarehouseLocation> warehouseLocations = new();
    private List<Supplier> suppliers = new();
    private List<Employee> employees = new();
    private List<Product> products = new();
    
    // ===== 進貨明細 =====
    private List<PurchaseReceivingDetail> purchaseReceivingDetails = new();
    private PurchaseReceivingDetailManagerComponent<PurchaseReceiving, PurchaseReceivingDetail>? purchaseReceivingDetailManager;
    
    // ===== 篩選狀態 =====
    private int? filterProductId = null;
    
    // ===== 鎖定狀態 =====
    private bool hasUndeletableDetails = false;
    
    // ===== 明細載入狀態 =====
    private bool isDetailDataReady = false;  // 標記明細相關資料是否已完整載入（包括退貨數量）
    
    // ===== Modal 管理器 =====
    private SupplierEditModalComponent? supplierEditModal;
    private RelatedEntityModalManager<Supplier> supplierModalManager = default!;
    
    // ===== 相關單據 Modal =====
    private PurchaseReturnEditModalComponent? purchaseReturnEditModal;
    private SetoffDocumentEditModalComponent? setoffDocumentEditModal;
    private bool showPurchaseReturnModal = false;
    private bool showSetoffDocumentModal = false;
    private int? selectedPurchaseReturnId = null;
    private int? selectedSetoffDocumentId = null;
    
    // ===== 系統參數 - 稅率快取（避免重複查詢資料庫） =====
    private decimal currentTaxRate = 5.0m; // 預設 5%，實際值會在初始化時從資料庫載入

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeSupplierModalManager();
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (IsVisible)
            {
                await LoadAdditionalDataAsync();
                await InitializeFormFieldsAsync();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"參數設置時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理儲存成功事件
    /// </summary>
    private async Task HandleSaveSuccess()
    {
        try
        {
            // 如果父組件需要知道進貨已儲存
            if (OnPurchaseReceivingSaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnPurchaseReceivingSaved.InvokeAsync(editModalComponent.Entity);
            }
            // 不需要手動關閉 Modal，GenericEditModalComponent 會處理
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理成功事件時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理取消事件
    /// </summary>
    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
            // 不要直接調用 CloseModal，讓 GenericEditModalComponent 處理
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"關閉視窗時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理列印事件
    /// </summary>
    private async Task HandlePrint()
    {
        try
        {
            // 使用通用 Helper 進行完整驗證（實體、ID）
            // 進貨單不需要核准即可列印
            var (isValid, errorMessage) = ReportPrintHelper.ValidateForPrint(
                entity: editModalComponent?.Entity,
                entityId: PurchaseReceivingId,
                isApproved: true, // 進貨單不需要核准狀態
                entityName: "進貨單",
                requireApproval: false // 不需要核准
            );
            
            if (!isValid)
            {
                await NotificationService.ShowWarningAsync(errorMessage);
                return;
            }
            
            // 直接執行列印，使用預設設定
            await HandleDirectPrint(null);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandlePrint), GetType(), 
                additionalData: $"進貨單列印處理失敗 - ID: {PurchaseReceivingId}");
            await NotificationService.ShowErrorAsync("列印處理時發生錯誤");
        }
    }

    /// <summary>
    /// 直接執行列印 - 可以使用指定的列印配置或預設配置
    /// </summary>
    private async Task HandleDirectPrint(ReportPrintConfiguration? printConfig)
    {
        try
        {
            if (!PurchaseReceivingId.HasValue)
            {
                await NotificationService.ShowWarningAsync("無法列印：進貨單ID不存在");
                return;
            }

            // 驗證列印配置
            var (isValid, errorMessage) = ReportPrintHelper.ValidateConfiguration(printConfig);
            if (!isValid)
            {
                await NotificationService.ShowWarningAsync($"列印配置無效：{errorMessage}");
                return;
            }

            // 使用通用 Helper 建立列印 URL
            var printUrl = ReportPrintHelper.BuildPrintUrl(
                baseUrl: NavigationManager.BaseUri,
                reportType: "purchase-receiving",
                documentId: PurchaseReceivingId.Value,
                configuration: printConfig,
                autoprint: true
            );

            // 使用通用 Helper 執行列印（隱藏 iframe 方式）
            var success = await ReportPrintHelper.ExecutePrintWithHiddenIframeAsync(
                printUrl: printUrl,
                jsRuntime: JSRuntime,
                iframeId: "printFrame"
            );
            
            if (success)
            {
                var configName = ReportPrintHelper.GetDisplayName(printConfig);
                await NotificationService.ShowSuccessAsync($"已使用 {configName} 送出列印");
            }
            else
            {
                await NotificationService.ShowErrorAsync("列印執行失敗");
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleDirectPrint), GetType(), 
                additionalData: $"進貨單直接列印失敗 - ID: {PurchaseReceivingId}, Config: {printConfig?.ReportName}");
            await NotificationService.ShowErrorAsync("列印執行時發生錯誤");
        }
    }

    /// <summary>
    /// 取得進貨單狀態訊息（顯示鎖定狀態）
    /// </summary>
    private async Task<(string Message, GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.BadgeVariant Variant, string IconClass)?> GetPurchaseReceivingStatusMessage()
    {
        try
        {
            // 如果資料還沒準備好，不顯示訊息
            if (!isDetailDataReady || editModalComponent?.Entity == null)
                return null;
            
            // 只有在有不可刪除的明細時才顯示鎖定訊息
            if (hasUndeletableDetails)
            {
                return (
                    "明細有其他動作，主檔欄位已鎖定",
                    GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.BadgeVariant.Warning,
                    "fas fa-lock"
                );
            }
            
            // 正常狀態不顯示訊息
            return null;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetPurchaseReceivingStatusMessage), GetType());
            return null;
        }
    }

    /// <summary>
    /// 取得警告訊息（顯示在表單最上方）
    /// </summary>
    private RenderFragment? GetWarningMessage() => __builder =>
    {
        @if (isDetailDataReady && hasUndeletableDetails)
        {
            <div class="alert alert-warning mb-2 py-2" role="alert">
                <i class="fas fa-lock me-2"></i>因部分明細有其他動作，為保護資料完整性主檔欄位已設唯讀。
            </div>
        }
    };

    /// <summary>
    /// 載入進貨資料
    /// </summary>
    private async Task<PurchaseReceiving?> LoadPurchaseReceivingData()
    {
        try
        {
            // 🔑 重置明細資料準備狀態
            isDetailDataReady = false;
            hasUndeletableDetails = false;
            
            if (!PurchaseReceivingId.HasValue)
            {
                // 新增模式
                var newReceiving = new PurchaseReceiving
                {
                    ReceiptNumber = await GenerateReceiptNumberAsync(),
                    ReceiptDate = DateTime.Now
                };
                
                // 清空明細
                purchaseReceivingDetails.Clear();
                
                // 新增模式下直接標記為準備就緒（沒有明細需要載入）
                isDetailDataReady = true;
                
                return newReceiving;
            }

            // 編輯模式
            var purchaseReceiving = await PurchaseReceivingService.GetByIdAsync(PurchaseReceivingId.Value);
            
            if (purchaseReceiving != null)
            {
                // 載入進貨明細
                await LoadPurchaseReceivingDetails(PurchaseReceivingId.Value);
                
                // 🔑 關鍵：載入退貨數量和沖款資料，並更新 hasUndeletableDetails
                await LoadDetailRelatedDataAsync();
                
                // 🔑 標記明細資料已準備就緒（包括退貨數量等資訊）
                isDetailDataReady = true;
                
                // 如果有廠商ID，更新採購單選項和產品篩選選項
                if (purchaseReceiving.SupplierId > 0)
                {
                    await UpdatePurchaseOrderOptions(purchaseReceiving.SupplierId);
                    await UpdateFilterProductOptions(purchaseReceiving.SupplierId);
                }
                
                // 載入對應的採購單明細
                if (purchaseReceiving.PurchaseOrderId.HasValue && purchaseReceiving.PurchaseOrderId.Value > 0)
                {
                    // 注意：舊的單一採購單模式已移除，此處保留程式碼結構但不執行實際載入
                }
                
                // 觸發重新渲染
                StateHasChanged();
            }
            
            return purchaseReceiving;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入進貨資料時發生錯誤：{ex.Message}");
            isDetailDataReady = true; // 即使錯誤也要允許渲染，避免卡住
            return null;
        }
    }

    /// <summary>
    /// 載入額外資料
    /// </summary>
    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            var tasks = new List<Task>
            {
                LoadPurchaseOrdersAsync(),
                LoadWarehousesAsync(),
                LoadWarehouseLocationsAsync(),
                LoadSuppliersAsync(),
                LoadEmployeesAsync(),
                LoadProductsAsync()
            };
            
            await Task.WhenAll(tasks);
            
            // 🔑 一次性載入系統稅率（避免每次計算都查詢資料庫）
            try
            {
                currentTaxRate = await SystemParameterService.GetTaxRateAsync();
            }
            catch (Exception)
            {
                // 如果載入失敗，使用預設值 5%
                currentTaxRate = 5.0m;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入額外資料時發生錯誤：{ex.Message}");
        }
    }

    private async Task LoadPurchaseOrdersAsync()
    {
        try
        {
            // 使用服務的方法來獲取包含完整關聯資料的採購單
            // 這樣我們可以正確判斷採購單的完成狀態
            purchaseOrders = await PurchaseOrderService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入採購單資料時發生錯誤：{ex.Message}");
            purchaseOrders = new List<PurchaseOrder>();
        }
    }

    private async Task LoadWarehousesAsync()
    {
        try
        {
            warehouses = await WarehouseService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫資料時發生錯誤：{ex.Message}");
            warehouses = new List<Warehouse>();
        }
    }

    private async Task LoadWarehouseLocationsAsync()
    {
        try
        {
            warehouseLocations = await WarehouseLocationService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫位置資料時發生錯誤：{ex.Message}");
            warehouseLocations = new List<WarehouseLocation>();
        }
    }

    private async Task LoadSuppliersAsync()
    {
        try
        {
            suppliers = await SupplierService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入廠商資料時發生錯誤：{ex.Message}");
            suppliers = new List<Supplier>();
        }
    }

    private async Task LoadEmployeesAsync()
    {
        try
        {
            var result = await EmployeeService.GetActiveEmployeesAsync();
            if (result.IsSuccess && result.Data != null)
            {
                employees = result.Data;
            }
            else
            {
                employees = new List<Employee>();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入員工資料時發生錯誤：{ex.Message}");
            employees = new List<Employee>();
        }
    }

    private async Task LoadProductsAsync()
    {
        try
        {
            products = await ProductService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入產品資料時發生錯誤：{ex.Message}");
            products = new List<Product>();
        }
    }

    /// <summary>
    /// 更新採購單選項 - 根據廠商ID過濾，並排除已完成的採購單
    /// </summary>
    private async Task UpdatePurchaseOrderOptions(int? supplierId = null)
    {
        try
        {
            // 找到採購單欄位並更新其選項
            var purchaseOrderField = formFields.FirstOrDefault(f => f.PropertyName == nameof(PurchaseReceiving.PurchaseOrderId));
            if (purchaseOrderField != null)
            {
                var options = new List<SelectOption> {};
                
                if (supplierId.HasValue && supplierId.Value > 0)
                {
                    // 使用新的服務方法獲取包含完整關聯資料的採購單
                    var supplierOrders = await PurchaseOrderService.GetIncompleteOrdersBySupplierAsync(supplierId.Value);
                    
                    // 過濾掉已完成的採購單
                    var filteredPurchaseOrders = supplierOrders
                        .Where(po => !IsOrderFullyCompleted(po))
                        .ToList();
                    
                    options.AddRange(filteredPurchaseOrders.Select(po => new SelectOption
                    {
                        Value = po.Id.ToString(),
                        Text = $"{po.PurchaseOrderNumber} - {po.Supplier?.CompanyName ?? "未知廠商"}"
                    }));
                }
                // 如果沒有選擇廠商或選擇了無效的廠商，只顯示"請選擇..."選項
                
                purchaseOrderField.Options = options;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"更新採購單選項時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 判斷採購單是否已完全完成
    /// 完成條件：所有明細都已完成進貨（進貨數量 == 採購數量 或 標記為已完成）
    /// </summary>
    private bool IsOrderFullyCompleted(PurchaseOrder purchaseOrder)
    {
        try
        {
            // 如果沒有明細，視為未完成
            if (purchaseOrder.PurchaseOrderDetails?.Any() != true)
            {
                return false;
            }
            
            // 檢查是否所有明細都已完成
            return purchaseOrder.PurchaseOrderDetails.All(pod => 
            {
                // 檢查該明細是否有對應的進貨記錄且標記為完成
                var hasCompletedReceiving = pod.PurchaseReceivingDetails?.Any(prd => prd.IsReceivingCompleted) == true;
                // 或者已經完全進貨（進貨數量 >= 訂購數量）
                var isQuantityFullyReceived = pod.ReceivedQuantity >= pod.OrderQuantity;
                
                return hasCompletedReceiving || isQuantityFullyReceived;
            });
        }
        catch
        {
            // 如果判斷過程中發生錯誤，預設為未完成以避免遺漏
            return false;
        }
    }

    /// <summary>
    /// 初始化表單欄位
    /// </summary>
    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.ReceiptNumber),
                    Label = "進貨單號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "系統自動產生",
                    IsRequired = true,
                    IsReadOnly = true,
                    MaxLength = 50,
                    HelpText = "系統自動產生的進貨單號"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.SupplierId),
                    Label = "篩選廠商",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇廠商",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "輸入廠商名稱進行篩選，或直接選擇",
                    ActionButtons = await GetSupplierActionButtonsAsync()
                },
                new()
                {
                    PropertyName = "FilterProductId", // 篩選用的虛擬欄位
                    Label = "篩選產品",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = await GetFilterProductOptions(),
                    HelpText = "選擇特定產品進行篩選，或留空顯示所有產品"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.PurchaseOrderId),
                    Label = "篩選採購單",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,  // 改為非必填，支援多採購單模式
                    HelpText = "可選擇特定採購單進行篩選，或留空使用多採購單模式"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.ReceiptDate),
                    Label = "進貨日",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    HelpText = "貨品實際進貨日"
                },
                
                new FormFieldDefinition()
                {
                    PropertyName = nameof(PurchaseReceiving.TotalAmount),
                    Label = "入庫總金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    HelpText = "入庫單的總金額，根據明細自動計算",
                    IsReadOnly = true // 總金額欄位始終為唯讀
                },
                new FormFieldDefinition()
                {
                    PropertyName = nameof(PurchaseReceiving.PurchaseReceivingTaxAmount),
                    Label = $"採購稅額({currentTaxRate:F2}%)",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    HelpText = $"採購單的稅額，根據明細自動計算（稅率：{currentTaxRate:F2}%）",
                    IsReadOnly = true // 稅額欄位始終為唯讀
                },
                new FormFieldDefinition()
                {
                    PropertyName = nameof(PurchaseReceiving.PurchaseReceivingTotalAmountIncludingTax),
                    Label = "含稅總金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    HelpText = "採購單的含稅總金額，根據明細自動計算",
                    IsReadOnly = true // 含稅總金額欄位始終為唯讀
                },


                FormFieldConfigurationHelper.CreateRemarksField<PurchaseReceiving>()
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(PurchaseReceiving.ReceiptNumber), "基本資訊" },
                { nameof(PurchaseReceiving.SupplierId), "基本資訊" },
                { "FilterProductId", "基本資訊" },
                { nameof(PurchaseReceiving.PurchaseOrderId), "基本資訊" },
                { nameof(PurchaseReceiving.ReceiptDate), "基本資訊" },
                { nameof(PurchaseReceiving.TotalAmount), "金額資訊(系統自動計算)" },
                { nameof(PurchaseReceiving.PurchaseReceivingTaxAmount), "金額資訊(系統自動計算)" },
                { nameof(PurchaseReceiving.PurchaseReceivingTotalAmountIncludingTax), "金額資訊(系統自動計算)" },
                { nameof(BaseEntity.Remarks), "其他資訊" }
            };
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"初始化表單欄位時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 取得產品篩選選項 - 根據選擇的廠商篩選
    /// </summary>
    private async Task<List<SelectOption>> GetFilterProductOptions()
    {
        try
        {
            var options = new List<SelectOption> {};
            
            // 如果有選擇廠商，只顯示該廠商的產品
            if (editModalComponent?.Entity?.SupplierId > 0)
            {
                var supplierProducts = await ProductService.GetBySupplierAsync(editModalComponent.Entity.SupplierId);
                options.AddRange(supplierProducts.Select(p => new SelectOption
                {
                    Value = p.Id.ToString(),
                    Text = $"{p.Code} - {p.Name}"
                }));
            }
            
            return options;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入產品選項時發生錯誤：{ex.Message}");
            return new List<SelectOption> {};
        }
    }

    /// <summary>
    /// 更新產品篩選選項 - 當廠商變更時調用
    /// </summary>
    private async Task UpdateFilterProductOptions(int? supplierId = null)
    {
        try
        {
            // 找到產品篩選欄位並更新其選項
            var filterProductField = formFields.FirstOrDefault(f => f.PropertyName == "FilterProductId");
            if (filterProductField != null)
            {
                var options = new List<SelectOption> {};
                
                if (supplierId.HasValue && supplierId.Value > 0)
                {
                    var supplierProducts = await ProductService.GetBySupplierAsync(supplierId.Value);
                    options.AddRange(supplierProducts.Select(p => new SelectOption
                    {
                        Value = p.Id.ToString(),
                        Text = $"{p.Code} - {p.Name}"
                    }));
                }
                
                filterProductField.Options = options;
                
                // 清空目前的產品篩選選擇
                filterProductId = null;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"更新產品篩選選項時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 取得表單欄位清單
    /// </summary>
    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(PurchaseReceiving.SupplierId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["CompanyName"] = searchTerm
                }
            }
        };
    }

    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(PurchaseReceiving.SupplierId), supplierModalManager }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(PurchaseReceiving.SupplierId), suppliers.Cast<object>() }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(PurchaseReceiving.SupplierId), "CompanyName" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(PurchaseReceiving.SupplierId), "Id" }
        };
    }

    /// <summary>
    /// 生成進貨單號
    /// </summary>
    private async Task<string> GenerateReceiptNumberAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            PurchaseReceivingService,
            "RCV",
            (service, code, excludeId) => service.IsReceiptNumberExistsAsync(code, excludeId)
        );
    }

    // ===== 進貨明細管理方法 =====
    
    /// <summary>
    /// 載入進貨明細
    /// </summary>
    private async Task LoadPurchaseReceivingDetails(int purchaseReceivingId)
    {
        try
        {
            // 從服務載入進貨明細
            var receiving = await PurchaseReceivingService.GetByIdAsync(purchaseReceivingId);
            purchaseReceivingDetails = receiving?.PurchaseReceivingDetails?.ToList() ?? new List<PurchaseReceivingDetail>();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入進貨明細失敗：{ex.Message}");
            purchaseReceivingDetails = new List<PurchaseReceivingDetail>();
        }
    }

    /// <summary>
    /// 載入明細相關資料（退貨數量、沖款記錄等）
    /// 這個方法在主檔載入時就同步執行，確保 hasUndeletableDetails 狀態在渲染前就正確
    /// </summary>
    private async Task LoadDetailRelatedDataAsync()
    {
        try
        {
            if (!purchaseReceivingDetails.Any())
            {
                hasUndeletableDetails = false;
                return;
            }

            // 檢查是否有不可刪除的明細
            bool hasUndeletable = false;
            
            foreach (var detail in purchaseReceivingDetails.Where(d => d.Id > 0))
            {
                // 檢查 1：退貨記錄
                var returnedQty = await PurchaseReturnDetailService.GetReturnedQuantityByReceivingDetailAsync(detail.Id);
                if (returnedQty > 0)
                {
                    hasUndeletable = true;
                    break;
                }
                
                // 檢查 2：沖款記錄（直接讀取 TotalPaidAmount 欄位）
                if (detail.TotalPaidAmount > 0)
                {
                    hasUndeletable = true;
                    break;
                }
            }
            
            hasUndeletableDetails = hasUndeletable;
            
            // 如果有不可刪除的明細，立即更新欄位狀態
            if (hasUndeletableDetails)
            {
                UpdateFieldsReadOnlyState();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadDetailRelatedDataAsync), GetType());
            hasUndeletableDetails = false; // 錯誤時保守處理，不鎖定
        }
    }

    /// <summary>
    /// 處理進貨明細變更 - 自動計算稅額
    /// </summary>
    private async Task HandleReceivingDetailsChanged(List<PurchaseReceivingDetail> details)
    {
        try
        {
            purchaseReceivingDetails = details ?? new List<PurchaseReceivingDetail>();
            
            // 更新主檔的總金額和稅額（參考 README_稅額自動計算.md）
            if (editModalComponent?.Entity != null)
            {
                // 1. 計算總金額（未稅）= Σ(進貨數量 × 單價)
                editModalComponent.Entity.TotalAmount = purchaseReceivingDetails.Sum(d => d.SubtotalAmount);
                
                // 2. 計算稅額 = 總金額 × 稅率（使用快取的稅率，避免每次都查詢資料庫）
                editModalComponent.Entity.PurchaseReceivingTaxAmount = Math.Round(
                    editModalComponent.Entity.TotalAmount * (currentTaxRate / 100), 
                    2  // 四捨五入到小數點後2位
                );
                
                // 3. 含稅總金額會自動計算（PurchaseReceivingTotalAmountIncludingTax 是計算屬性）
                //    = TotalAmount + PurchaseReceivingTaxAmount
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理明細變更時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理已刪除的進貨明細ID
    /// </summary>
    private async Task HandleDeletedDetailsChanged(List<int> deletedDetailIds)
    {
        try
        {
            if (deletedDetailIds?.Any() == true)
            {
                // 如果是編輯模式，實際從資料庫永久刪除
                if (PurchaseReceivingId.HasValue)
                {
                    foreach (var detailId in deletedDetailIds)
                    {
                        var result = await PurchaseReceivingDetailService.PermanentDeleteAsync(detailId);
                        if (!result.IsSuccess)
                        {
                            await NotificationService.ShowErrorAsync($"刪除明細ID {detailId} 失敗: {result.ErrorMessage}");
                            return;
                        }
                    }
                    await NotificationService.ShowSuccessAsync($"已永久刪除 {deletedDetailIds.Count} 筆進貨明細");
                }
                
                // 從本地狀態中移除已刪除的明細
                if (purchaseReceivingDetails != null)
                {
                    purchaseReceivingDetails = purchaseReceivingDetails
                        .Where(detail => !deletedDetailIds.Contains(detail.Id))
                        .ToList();
                }
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"永久刪除進貨明細時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理有不可刪除明細的狀態變更
    /// 當有不可刪除的明細時(已退貨或已沖款),鎖定主檔的廠商和採購單欄位
    /// </summary>
    private async Task HandleHasUndeletableDetailsChanged(bool hasUndeletable)
    {
        try
        {
            hasUndeletableDetails = hasUndeletable;
            
            // 更新欄位的唯讀狀態
            UpdateFieldsReadOnlyState();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理明細鎖定狀態時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 更新欄位的唯讀狀態
    /// 當有不可刪除的明細時,所有使用者可輸入的欄位都應設為唯讀:
    /// - 廠商 (SupplierId) - 同時禁用新增/編輯按鈕
    /// - 採購單 (PurchaseOrderId)
    /// - 產品篩選 (FilterProductId)
    /// - 進貨日 (ReceiptDate)
    /// - 備註 (Remarks)
    /// 
    /// 不鎖定的欄位（系統自動計算/生成）:
    /// - 進貨單號 (ReceiptNumber) - 已經是唯讀
    /// - 總金額 (TotalAmount) - 已經是唯讀
    /// - 稅額 (PurchaseReceivingTaxAmount) - 已經是唯讀
    /// - 含稅總金額 (PurchaseReceivingTotalAmountIncludingTax) - 已經是唯讀
    /// </summary>
    private void UpdateFieldsReadOnlyState()
    {
        // 廠商欄位 - 設為唯讀並清空 ActionButtons
        var supplierField = formFields.FirstOrDefault(f => f.PropertyName == nameof(PurchaseReceiving.SupplierId));
        if (supplierField != null)
        {
            supplierField.IsReadOnly = hasUndeletableDetails;
            
            // 如果有不可刪除的明細，移除操作按鈕；否則恢復操作按鈕
            if (hasUndeletableDetails)
            {
                supplierField.ActionButtons = new List<FieldActionButton>();
            }
            else
            {
                supplierField.ActionButtons = GetSupplierActionButtonsAsync().Result;
            }
        }
        
        // 採購單欄位
        var purchaseOrderField = formFields.FirstOrDefault(f => f.PropertyName == nameof(PurchaseReceiving.PurchaseOrderId));
        if (purchaseOrderField != null)
        {
            purchaseOrderField.IsReadOnly = hasUndeletableDetails;
        }
        
        // 產品篩選欄位
        var filterProductField = formFields.FirstOrDefault(f => f.PropertyName == "FilterProductId");
        if (filterProductField != null)
        {
            filterProductField.IsReadOnly = hasUndeletableDetails;
        }
        
        // 進貨日欄位
        var receiptDateField = formFields.FirstOrDefault(f => f.PropertyName == nameof(PurchaseReceiving.ReceiptDate));
        if (receiptDateField != null)
        {
            receiptDateField.IsReadOnly = hasUndeletableDetails;
        }
        
        // 備註欄位
        var remarksField = formFields.FirstOrDefault(f => f.PropertyName == nameof(BaseEntity.Remarks));
        if (remarksField != null)
        {
            remarksField.IsReadOnly = hasUndeletableDetails;
        }
    }

    /// <summary>
    /// 處理欄位值變更事件
    /// </summary>
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 當廠商變更時，更新採購單選項並清空採購單選擇
            if (fieldChange.PropertyName == nameof(PurchaseReceiving.SupplierId))
            {
                // 清空採購單選擇
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.PurchaseOrderId = null;
                }
                
                // 更新採購單選項
                int? supplierId = null;
                if (fieldChange.Value != null && 
                    int.TryParse(fieldChange.Value.ToString(), out int parsedSupplierId) && 
                    parsedSupplierId > 0)
                {
                    supplierId = parsedSupplierId;
                }
                
                await UpdatePurchaseOrderOptions(supplierId);
                
                // 更新產品篩選選項
                await UpdateFilterProductOptions(supplierId);
                
                // 更新廠商欄位的操作按鈕 - 只有在沒有不可刪除明細時才更新
                if (!hasUndeletableDetails)
                {
                    await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                        supplierModalManager, 
                        formFields, 
                        nameof(PurchaseReceiving.SupplierId), 
                        fieldChange.Value
                    );
                }
                
                StateHasChanged();
            }
            
            // 當採購單ID變更時，觸發重新渲染以篩選對應的採購明細
            if (fieldChange.PropertyName == nameof(PurchaseReceiving.PurchaseOrderId))
            {
                // 無論選擇了特定採購單還是清空選擇，都需要重新渲染
                StateHasChanged();
            }
            
            // 當產品篩選變更時，更新篩選狀態並觸發重新渲染
            if (fieldChange.PropertyName == "FilterProductId")
            {
                if (fieldChange.Value != null && 
                    int.TryParse(fieldChange.Value.ToString(), out int productId) && 
                    productId > 0)
                {
                    filterProductId = productId;
                }
                else
                {
                    filterProductId = null;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理欄位變更時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 驗證進貨明細 - 在儲存主檔之前執行
    /// </summary>
    private async Task<bool> ValidatePurchaseReceivingDetailsAsync(PurchaseReceiving purchaseReceiving)
    {
        try
        {
            // 如果明細管理組件存在，執行驗證
            if (purchaseReceivingDetailManager != null)
            {
                return await purchaseReceivingDetailManager.ValidateAsync();
            }
            
            // 如果組件不存在，預設通過驗證
            return true;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"驗證明細時發生錯誤：{ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// AfterSave 回調方法 - 在主檔儲存後處理明細並使用差異比較更新庫存
    /// 處理流程：
    /// 1. 儲存有效的明細資料（有選擇商品和倉庫的記錄）
    /// 2. 更新主檔總金額
    /// 3. 使用新的 UpdateInventoryByDifferenceAsync 方法進行庫存差異更新
    /// 4. 差異更新邏輯：
    ///    - 比較編輯前後明細的變化
    ///    - 只針對變更的部分進行庫存調整
    ///    - 新增：直接增加庫存
    ///    - 修改：調整庫存差異（增加或減少）
    ///    - 刪除：回退庫存
    ///    - 產品替換：從原產品減去庫存，向新產品增加庫存
    /// </summary>
    private async Task SavePurchaseReceivingDetailsAsync(PurchaseReceiving purchaseReceiving)
    {
        try
        {
            // 只有在進貨單ID存在時才處理明細（新增進貨單時可能ID還是0）
            if (purchaseReceiving.Id <= 0)
            {
                return; // 新增的進貨單，ID可能還沒設定，跳過明細儲存
            }

            // 過濾有效的明細（有選擇商品和倉庫的）
            var validDetails = purchaseReceivingDetails
                .Where(detail => detail.ProductId > 0 && detail.WarehouseId > 0)
                .ToList();

            if (validDetails.Any())
            {
                // 更新明細資訊 - 使用獨立的服務調用，避免嵌套交易
                foreach (var detail in validDetails)
                {
                    detail.PurchaseReceivingId = purchaseReceiving.Id;
                    
                    // 同步主檔的批號到明細
                    if (!string.IsNullOrWhiteSpace(purchaseReceiving.BatchNumber))
                    {
                        detail.BatchNumber = purchaseReceiving.BatchNumber;
                    }
                    
                    if (detail.Id == 0)
                    {
                        // 新記錄 - 使用基本的 Create 方法
                        var createResult = await PurchaseReceivingDetailService.CreateAsync(detail);
                        if (!createResult.IsSuccess)
                        {
                            await NotificationService.ShowWarningAsync($"明細儲存警告：{createResult.ErrorMessage}");
                        }
                    }
                    else
                    {
                        // 更新現有記錄 - 使用基本的 Update 方法
                        var updateResult = await PurchaseReceivingDetailService.UpdateAsync(detail);
                        if (!updateResult.IsSuccess)
                        {
                            await NotificationService.ShowWarningAsync($"明細更新警告：{updateResult.ErrorMessage}");
                        }
                    }
                }

                // 重新載入明細資料以更新UI顯示
                purchaseReceivingDetails = await PurchaseReceivingDetailService.GetByPurchaseReceivingIdAsync(purchaseReceiving.Id);
            }

            // 更新主檔的總金額和稅額
            purchaseReceiving.TotalAmount = purchaseReceivingDetails.Sum(d => d.SubtotalAmount);
            purchaseReceiving.PurchaseReceivingTaxAmount = Math.Round(
                purchaseReceiving.TotalAmount * (currentTaxRate / 100), 
                2  // 四捨五入到小數點後2位
            );
            
            if (purchaseReceiving.TotalAmount > 0)
            {
                var updateResult = await PurchaseReceivingService.UpdateAsync(purchaseReceiving);
                if (!updateResult.IsSuccess)
                {
                    await NotificationService.ShowWarningAsync($"總金額更新警告：{updateResult.ErrorMessage}");
                }
            }

            // 更新相關採購單明細的已進貨量
            if (validDetails.Any())
            {
                var uniquePurchaseOrderDetailIds = validDetails
                    .Where(d => d.PurchaseOrderDetailId > 0)
                    .Select(d => d.PurchaseOrderDetailId)
                    .Distinct();

                foreach (var purchaseOrderDetailId in uniquePurchaseOrderDetailIds)
                {
                    var recalculateResult = await PurchaseOrderDetailService.RecalculateReceivedQuantityAsync(purchaseOrderDetailId);
                    if (!recalculateResult.IsSuccess)
                    {
                        await NotificationService.ShowWarningAsync($"採購單明細已進貨量更新失敗：{recalculateResult.ErrorMessage}");
                    }
                }
            }

            // 使用差異比較進行庫存更新 - 避免重複累加和產品替換問題
            if (validDetails.Any())
            {
                try
                {
                    // 判斷是新增還是編輯模式
                    bool isEditMode = PurchaseReceivingId.HasValue && PurchaseReceivingId.Value > 0;
                    
                    if (isEditMode)
                    {
                        // 編輯模式：使用差異比較更新庫存
                        var differenceResult = await PurchaseReceivingService.UpdateInventoryByDifferenceAsync(purchaseReceiving.Id, 0);
                        if (differenceResult.IsSuccess)
                        {
                            await NotificationService.ShowSuccessAsync("進貨明細儲存成功，庫存已差異更新");
                        }
                        else
                        {
                            await NotificationService.ShowWarningAsync($"明細儲存成功，但庫存差異更新失敗：{differenceResult.ErrorMessage}");
                        }
                    }
                    else
                    {
                        // 新增模式：只在第一次新增時使用確認流程，避免重複更新庫存
                        // 檢查是否已經有庫存交易記錄，避免重複確認
                        var hasExistingTransactions = await HasExistingInventoryTransactions(purchaseReceiving.ReceiptNumber);
                        
                        if (!hasExistingTransactions)
                        {
                            var confirmResult = await PurchaseReceivingService.ConfirmReceiptAsync(purchaseReceiving.Id, 0);
                            if (confirmResult.IsSuccess)
                            {
                                await NotificationService.ShowSuccessAsync("進貨明細儲存成功，庫存已自動更新");
                            }
                            else
                            {
                                await NotificationService.ShowWarningAsync($"明細儲存成功，但庫存更新失敗：{confirmResult.ErrorMessage}");
                            }
                        }
                        else
                        {
                            await NotificationService.ShowInfoAsync("進貨明細儲存成功，庫存已存在無需重複更新");
                        }
                    }
                }
                catch (Exception ex)
                {
                    await NotificationService.ShowWarningAsync($"明細儲存成功，但庫存更新發生錯誤：{ex.Message}");
                }
            }

            StateHasChanged(); // 通知UI更新
        }
        catch (Exception ex)
        {
            // 記錄錯誤但不中斷流程，因為主要實體已經儲存成功
            await NotificationService.ShowWarningAsync($"明細處理時發生警告：{ex.Message}");
        }
    }

    /// <summary>
    /// 檢查是否已經存在庫存交易記錄
    /// </summary>
    private Task<bool> HasExistingInventoryTransactions(string receiptNumber)
    {
        try
        {
            // 這裡可以通過庫存服務檢查是否已存在相關交易記錄
            // 暫時返回 false，表示總是允許進行庫存更新
            // 如果需要更嚴格的檢查，可以注入 IInventoryTransactionService 進行查詢
            return Task.FromResult(false);
        }
        catch
        {
            // 發生錯誤時返回 false，允許庫存更新
            return Task.FromResult(false);
        }
    }

    /// <summary>
    /// 配置自訂模組
    /// </summary>
    private List<GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.CustomModule> GetCustomModules()
    {
        try
        {
            if (editModalComponent == null)
            {
                return new List<GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.CustomModule>();
            }

            return new List<GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.CustomModule>
            {
                new GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.CustomModule
                {
                    Title = "",
                    Order = 1,
                    CssClass = "",  // 移除 mt-4，讓警告訊息緊貼上方
                    IsVisible = true,
                    Content = CreateReceivingDetailManagerContent()
                }
            };
        }
        catch
        {
            // 如果創建模組時發生錯誤，返回空列表
            return new List<GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.CustomModule>();
        }
    }

    /// <summary>
    /// 創建進貨明細管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreateReceivingDetailManagerContent() => __builder =>
    {
        try
        {
            @if (editModalComponent?.Entity != null)
            {
                // 🔑 關鍵改變：等待明細資料完全準備好（包括退貨數量等）後才渲染
                @if (!isDetailDataReady)
                {
                    <div class="d-flex justify-content-center align-items-center py-4">
                        <div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div>
                        <span class="text-muted">載入明細資料中...</span>
                    </div>
                }
                // 使用多採購單模式
                else if (editModalComponent.Entity.SupplierId > 0)
                {
                    // 多採購單模式
                    try
                    {
                        <PurchaseReceivingDetailManagerComponent @ref="purchaseReceivingDetailManager"
                                                               TMainEntity="PurchaseReceiving" 
                                                               TDetailEntity="PurchaseReceivingDetail"
                                                               SelectedSupplierId="@editModalComponent.Entity.SupplierId"
                                                               SelectedPurchaseOrderId="@editModalComponent.Entity.PurchaseOrderId"
                                                               FilterProductId="@filterProductId"
                                                               MainEntity="@editModalComponent.Entity"
                                                               ExistingDetails="@purchaseReceivingDetails"
                                                               OnDetailsChanged="@HandleReceivingDetailsChanged"
                                                               OnDeletedDetailsChanged="@HandleDeletedDetailsChanged"
                                                               OnHasUndeletableDetailsChanged="@HandleHasUndeletableDetailsChanged"
                                                               OnOpenRelatedDocument="@HandleOpenRelatedDocument"
                                                               MainEntityIdPropertyName="PurchaseReceivingId"
                                                               QuantityPropertyName="ReceivedQuantity"
                                                               UnitPricePropertyName="UnitPrice"
                                                               RemarksPropertyName="InspectionRemarks"
                                                               PurchaseOrderDetailIdPropertyName="PurchaseOrderDetailId"
                                                               ReceivedQuantityLabel="進貨數量"
                                                               PriceLabel="單價"
                                                               RemarksLabel="備註"
                                                               ShowWarehouse="true"
                                                               ShowWarehouseLocation="true"
                                                               WarehouseIdPropertyName="WarehouseId"
                                                               WarehouseLocationIdPropertyName="WarehouseLocationId"
                                                               Warehouses="@warehouses"
                                                               WarehouseLocations="@warehouseLocations"
                                                               IsReadOnly="false" />
                    }
                    catch
                    {
                        <div class="alert alert-warning" role="alert">
                            載入明細管理器時發生錯誤，請重新整理頁面。
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info text-center" role="alert">
                        <i class="fas fa-info-circle me-2"></i>
                        請先選擇廠商後再進行採購明細管理
                    </div>
                }
            }
            else
            {
                <div class="text-center py-3">
                    <span class="text-muted">請先選擇廠商後再管理進貨明細</span>
                </div>
            }
        }
        catch
        {
            <div class="alert alert-warning" role="alert">
                載入明細管理器時發生錯誤，請重新整理頁面。
            </div>
        }
    };
    
    // ===== Modal 管理器初始化方法 =====
    
    /// <summary>
    /// 初始化廠商 Modal 管理器
    /// </summary>
    private void InitializeSupplierModalManager()
    {
        supplierModalManager = new RelatedEntityManagerBuilder<Supplier>(NotificationService, "廠商")
            .WithPropertyName(nameof(PurchaseReceiving.SupplierId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(supplierId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.SupplierId = supplierId;
                }
            })
            .WithCustomPostProcess(async supplier => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 產生廠商操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetSupplierActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            supplierModalManager, 
            nameof(PurchaseReceiving.SupplierId)
        );
    }

    /// <summary>
    /// 包裝廠商儲存事件
    /// </summary>
    private async Task OnSupplierSavedWrapper(Supplier savedSupplier)
    {
        await supplierModalManager.HandleEntitySavedAsync(savedSupplier, shouldAutoSelect: true);
    }

    /// <summary>
    /// 處理開啟相關單據的事件
    /// </summary>
    private async Task HandleOpenRelatedDocument((RelatedDocumentType type, int id) args)
    {
        try
        {
            if (args.type == RelatedDocumentType.ReturnDocument)
            {
                // 開啟進貨退出 Modal
                selectedPurchaseReturnId = args.id;
                showPurchaseReturnModal = true;
            }
            else if (args.type == RelatedDocumentType.SetoffDocument)
            {
                // 開啟沖款單 Modal
                selectedSetoffDocumentId = args.id;
                showSetoffDocumentModal = true;
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"開啟單據失敗：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理進貨退出儲存後的事件
    /// </summary>
    private async Task HandlePurchaseReturnSaved(PurchaseReturn savedReturn)
    {
        // 關閉 Modal
        showPurchaseReturnModal = false;
        selectedPurchaseReturnId = null;
        
        // 重新載入進貨明細的退貨數量資訊
        if (purchaseReceivingDetailManager != null)
        {
            await purchaseReceivingDetailManager.LoadReturnedQuantitiesAsync();
        }
        
        StateHasChanged();
    }

    /// <summary>
    /// 處理沖款單儲存後的事件
    /// </summary>
    private void HandleSetoffDocumentSaved(SetoffDocument savedDocument)
    {
        // 關閉 Modal
        showSetoffDocumentModal = false;
        selectedSetoffDocumentId = null;
        
        // 如果需要，可以重新載入相關資料
        // 目前沒有特別需要重新載入的資料
        
        StateHasChanged();
    }

    /// <summary>
    /// 釋放資源
    /// </summary>
    public void Dispose()
    {
        try
        {
            // 清理任何需要清理的資源
            purchaseReceivingDetails?.Clear();
            formFields?.Clear();
            formSections?.Clear();
            purchaseOrders?.Clear();
            warehouses?.Clear();
            warehouseLocations?.Clear();
            suppliers?.Clear();
            employees?.Clear();
            products?.Clear();
        }
        catch
        {
            // 忽略清理過程中的錯誤
        }
    }
}
