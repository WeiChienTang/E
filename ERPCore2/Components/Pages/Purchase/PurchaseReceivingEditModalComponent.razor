@* 採購入庫編輯模態組件 *@
@inject IPurchaseReceivingService PurchaseReceivingService
@inject IPurchaseOrderService PurchaseOrderService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@inject INotificationService NotificationService
@inject ISupplierService SupplierService
@inject IEmployeeService EmployeeService
@inject IProductService ProductService
@inject ActionButtonHelper ActionButtonHelper
@implements IDisposable

<GenericEditModalComponent TEntity="PurchaseReceiving" 
                          TService="IPurchaseReceivingService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@PurchaseReceivingId"
                          Service="@PurchaseReceivingService"
                          EntityName="採購入庫"
                          EntityNamePlural="採購入庫"
                          ModalTitle="@(PurchaseReceivingId.HasValue ? "編輯採購入庫" : "新增採購入庫")"
                          Size="GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadPurchaseReceivingData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="false"
                          SaveHandler="@SavePurchaseReceivingWithDetails"
                          SaveSuccessMessage="@(PurchaseReceivingId.HasValue ? "採購入庫更新成功" : "採購入庫新增成功")"
                          SaveFailureMessage="採購入庫儲存失敗"
                          RequiredPermission="PurchaseReceiving.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          CustomModules="@GetCustomModules()" />

@* 廠商編輯 Modal *@
<SupplierEditModalComponent @ref="supplierEditModal"
                           IsVisible="@supplierModalManager.IsModalVisible"
                           IsVisibleChanged="@supplierModalManager.HandleModalVisibilityChangedAsync"
                           SupplierId="@supplierModalManager.SelectedEntityId"
                           PrefilledValues="@supplierModalManager.PrefilledValues"
                           OnSupplierSaved="@OnSupplierSavedWrapper"
                           OnCancel="@supplierModalManager.HandleModalCancelAsync" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? PurchaseReceivingId { get; set; }
    [Parameter] public EventCallback<PurchaseReceiving> OnPurchaseReceivingSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<PurchaseOrder> purchaseOrders = new();
    private List<Warehouse> warehouses = new();
    private List<WarehouseLocation> warehouseLocations = new();
    private List<Supplier> suppliers = new();
    private List<Employee> employees = new();
    private List<Product> products = new();
    
    // ===== 採購入庫明細 =====
    private List<PurchaseReceivingDetail> purchaseReceivingDetails = new();
    
    // ===== 篩選狀態 =====
    private int? filterProductId = null;
    
    // ===== Modal 管理器 =====
    private SupplierEditModalComponent? supplierEditModal;
    private RelatedEntityModalManager<Supplier> supplierModalManager = default!;

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeSupplierModalManager();
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (IsVisible)
            {
                await LoadAdditionalDataAsync();
                await InitializeFormFieldsAsync();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"參數設置時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理儲存成功事件
    /// </summary>
    private async Task HandleSaveSuccess()
    {
        try
        {
            // 如果父組件需要知道採購入庫已儲存
            if (OnPurchaseReceivingSaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnPurchaseReceivingSaved.InvokeAsync(editModalComponent.Entity);
            }
            // 不需要手動關閉 Modal，GenericEditModalComponent 會處理
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理成功事件時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理取消事件
    /// </summary>
    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
            // 不要直接調用 CloseModal，讓 GenericEditModalComponent 處理
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"關閉視窗時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 載入採購入庫資料
    /// </summary>
    private async Task<PurchaseReceiving?> LoadPurchaseReceivingData()
    {
        try
        {
            if (!PurchaseReceivingId.HasValue)
            {
                // 新增模式
                var newReceiving = new PurchaseReceiving
                {
                    ReceiptNumber = await GenerateReceiptNumberAsync(),
                    ReceiptDate = DateTime.Now
                };
                
                // 清空明細
                purchaseReceivingDetails.Clear();
                
                return newReceiving;
            }

            // 編輯模式
            var purchaseReceiving = await PurchaseReceivingService.GetByIdAsync(PurchaseReceivingId.Value);
            
            if (purchaseReceiving != null)
            {
                // 載入採購入庫明細
                await LoadPurchaseReceivingDetails(PurchaseReceivingId.Value);
                
                // 如果有廠商ID，更新採購單選項和產品篩選選項
                if (purchaseReceiving.SupplierId > 0)
                {
                    await UpdatePurchaseOrderOptions(purchaseReceiving.SupplierId);
                    await UpdateFilterProductOptions(purchaseReceiving.SupplierId);
                }
                
                // 載入對應的採購單明細
                if (purchaseReceiving.PurchaseOrderId.HasValue && purchaseReceiving.PurchaseOrderId.Value > 0)
                {
                    // 注意：舊的單一採購單模式已移除，此處保留程式碼結構但不執行實際載入
                }
                
                // 觸發重新渲染
                StateHasChanged();
            }
            
            return purchaseReceiving;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入採購入庫資料時發生錯誤：{ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// 載入額外資料
    /// </summary>
    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            var tasks = new List<Task>
            {
                LoadPurchaseOrdersAsync(),
                LoadWarehousesAsync(),
                LoadWarehouseLocationsAsync(),
                LoadSuppliersAsync(),
                LoadEmployeesAsync(),
                LoadProductsAsync()
            };
            
            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入額外資料時發生錯誤：{ex.Message}");
        }
    }

    private async Task LoadPurchaseOrdersAsync()
    {
        try
        {
            // 使用服務的方法來獲取包含完整關聯資料的採購單
            // 這樣我們可以正確判斷採購單的完成狀態
            purchaseOrders = await PurchaseOrderService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入採購單資料時發生錯誤：{ex.Message}");
            purchaseOrders = new List<PurchaseOrder>();
        }
    }

    private async Task LoadWarehousesAsync()
    {
        try
        {
            warehouses = await WarehouseService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫資料時發生錯誤：{ex.Message}");
            warehouses = new List<Warehouse>();
        }
    }

    private async Task LoadWarehouseLocationsAsync()
    {
        try
        {
            warehouseLocations = await WarehouseLocationService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫位置資料時發生錯誤：{ex.Message}");
            warehouseLocations = new List<WarehouseLocation>();
        }
    }

    private async Task LoadSuppliersAsync()
    {
        try
        {
            suppliers = await SupplierService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入廠商資料時發生錯誤：{ex.Message}");
            suppliers = new List<Supplier>();
        }
    }

    private async Task LoadEmployeesAsync()
    {
        try
        {
            var result = await EmployeeService.GetActiveEmployeesAsync();
            if (result.IsSuccess && result.Data != null)
            {
                employees = result.Data;
            }
            else
            {
                employees = new List<Employee>();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入員工資料時發生錯誤：{ex.Message}");
            employees = new List<Employee>();
        }
    }

    private async Task LoadProductsAsync()
    {
        try
        {
            products = await ProductService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入產品資料時發生錯誤：{ex.Message}");
            products = new List<Product>();
        }
    }

    /// <summary>
    /// 更新採購單選項 - 根據廠商ID過濾，並排除已完成的採購單
    /// </summary>
    private async Task UpdatePurchaseOrderOptions(int? supplierId = null)
    {
        try
        {
            // 找到採購單欄位並更新其選項
            var purchaseOrderField = formFields.FirstOrDefault(f => f.PropertyName == nameof(PurchaseReceiving.PurchaseOrderId));
            if (purchaseOrderField != null)
            {
                var options = new List<SelectOption> {};
                
                if (supplierId.HasValue && supplierId.Value > 0)
                {
                    // 使用新的服務方法獲取包含完整關聯資料的採購單
                    var supplierOrders = await PurchaseOrderService.GetIncompleteOrdersBySupplierAsync(supplierId.Value);
                    
                    // 過濾掉已完成的採購單
                    var filteredPurchaseOrders = supplierOrders
                        .Where(po => !IsOrderFullyCompleted(po))
                        .ToList();
                    
                    options.AddRange(filteredPurchaseOrders.Select(po => new SelectOption
                    {
                        Value = po.Id.ToString(),
                        Text = $"{po.PurchaseOrderNumber} - {po.Supplier?.CompanyName ?? "未知廠商"}"
                    }));
                }
                // 如果沒有選擇廠商或選擇了無效的廠商，只顯示"請選擇..."選項
                
                purchaseOrderField.Options = options;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"更新採購單選項時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 判斷採購單是否已完全完成
    /// 完成條件：所有明細都已完成進貨（進貨數量 == 採購數量 或 標記為已完成）
    /// </summary>
    private bool IsOrderFullyCompleted(PurchaseOrder purchaseOrder)
    {
        try
        {
            // 如果沒有明細，視為未完成
            if (purchaseOrder.PurchaseOrderDetails?.Any() != true)
            {
                return false;
            }
            
            // 檢查是否所有明細都已完成
            return purchaseOrder.PurchaseOrderDetails.All(pod => 
            {
                // 檢查該明細是否有對應的進貨記錄且標記為完成
                var hasCompletedReceiving = pod.PurchaseReceivingDetails?.Any(prd => prd.IsReceivingCompleted) == true;
                // 或者已經完全進貨（進貨數量 >= 訂購數量）
                var isQuantityFullyReceived = pod.ReceivedQuantity >= pod.OrderQuantity;
                
                return hasCompletedReceiving || isQuantityFullyReceived;
            });
        }
        catch
        {
            // 如果判斷過程中發生錯誤，預設為未完成以避免遺漏
            return false;
        }
    }

    /// <summary>
    /// 初始化表單欄位
    /// </summary>
    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.ReceiptNumber),
                    Label = "入庫單號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "系統自動產生",
                    IsRequired = true,
                    IsReadOnly = true,
                    MaxLength = 50,
                    HelpText = "系統自動產生的入庫單號"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.SupplierId),
                    Label = "廠商",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇廠商",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "輸入廠商名稱進行搜尋，或直接選擇",
                    ActionButtons = GetSupplierActionButtonsAsync()
                },
                new()
                {
                    PropertyName = "FilterProductId", // 篩選用的虛擬欄位
                    Label = "篩選產品",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = await GetFilterProductOptions(),
                    HelpText = "選擇特定產品進行篩選，或留空顯示所有產品"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.PurchaseOrderId),
                    Label = "採購單",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,  // 改為非必填，支援多採購單模式
                    HelpText = "可選擇特定採購單，或留空使用多採購單模式"
                },
                new()
                {
                    PropertyName = nameof(PurchaseReceiving.ReceiptDate),
                    Label = "入庫日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    HelpText = "貨品實際入庫日期"
                },
                FormFieldConfigurationHelper.CreateRemarksField<PurchaseReceiving>()
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(PurchaseReceiving.ReceiptNumber), "基本資訊" },
                { nameof(PurchaseReceiving.SupplierId), "基本資訊" },
                { "FilterProductId", "基本資訊" },
                { nameof(PurchaseReceiving.PurchaseOrderId), "基本資訊" },
                { nameof(PurchaseReceiving.ReceiptDate), "基本資訊" },
                { nameof(BaseEntity.Remarks), "其他資訊" }
            };
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"初始化表單欄位時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 取得產品篩選選項 - 根據選擇的廠商篩選
    /// </summary>
    private async Task<List<SelectOption>> GetFilterProductOptions()
    {
        try
        {
            var options = new List<SelectOption> {};
            
            // 如果有選擇廠商，只顯示該廠商的產品
            if (editModalComponent?.Entity?.SupplierId > 0)
            {
                var supplierProducts = await ProductService.GetBySupplierAsync(editModalComponent.Entity.SupplierId);
                options.AddRange(supplierProducts.Select(p => new SelectOption
                {
                    Value = p.Id.ToString(),
                    Text = $"{p.Code} - {p.Name}"
                }));
            }
            
            return options;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入產品選項時發生錯誤：{ex.Message}");
            return new List<SelectOption> {};
        }
    }

    /// <summary>
    /// 更新產品篩選選項 - 當廠商變更時調用
    /// </summary>
    private async Task UpdateFilterProductOptions(int? supplierId = null)
    {
        try
        {
            // 找到產品篩選欄位並更新其選項
            var filterProductField = formFields.FirstOrDefault(f => f.PropertyName == "FilterProductId");
            if (filterProductField != null)
            {
                var options = new List<SelectOption> {};
                
                if (supplierId.HasValue && supplierId.Value > 0)
                {
                    var supplierProducts = await ProductService.GetBySupplierAsync(supplierId.Value);
                    options.AddRange(supplierProducts.Select(p => new SelectOption
                    {
                        Value = p.Id.ToString(),
                        Text = $"{p.Code} - {p.Name}"
                    }));
                }
                
                filterProductField.Options = options;
                
                // 清空目前的產品篩選選擇
                filterProductId = null;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"更新產品篩選選項時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 取得表單欄位清單
    /// </summary>
    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(PurchaseReceiving.SupplierId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["CompanyName"] = searchTerm
                }
            }
        };
    }

    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(PurchaseReceiving.SupplierId), supplierModalManager }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(PurchaseReceiving.SupplierId), suppliers.Cast<object>() }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(PurchaseReceiving.SupplierId), "CompanyName" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(PurchaseReceiving.SupplierId), "Id" }
        };
    }

    /// <summary>
    /// 生成採購入庫單號
    /// </summary>
    private async Task<string> GenerateReceiptNumberAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            PurchaseReceivingService,
            "RCV",
            (service, code, excludeId) => service.IsReceiptNumberExistsAsync(code, excludeId)
        );
    }

    // ===== 採購入庫明細管理方法 =====
    
    /// <summary>
    /// 載入採購入庫明細
    /// </summary>
    private async Task LoadPurchaseReceivingDetails(int purchaseReceivingId)
    {
        try
        {
            // 從服務載入採購入庫明細
            var receiving = await PurchaseReceivingService.GetByIdAsync(purchaseReceivingId);
            purchaseReceivingDetails = receiving?.PurchaseReceivingDetails?.ToList() ?? new List<PurchaseReceivingDetail>();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入採購入庫明細失敗：{ex.Message}");
            purchaseReceivingDetails = new List<PurchaseReceivingDetail>();
        }
    }

    /// <summary>
    /// 處理入庫明細變更
    /// </summary>
    private async Task HandleReceivingDetailsChanged(List<PurchaseReceivingDetail> details)
    {
        try
        {
            purchaseReceivingDetails = details ?? new List<PurchaseReceivingDetail>();
            
            // 更新主檔的總金額
            if (editModalComponent?.Entity != null)
            {
                editModalComponent.Entity.TotalAmount = purchaseReceivingDetails.Sum(d => d.SubtotalAmount);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理明細變更時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理欄位值變更事件
    /// </summary>
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 當廠商變更時，更新採購單選項並清空採購單選擇
            if (fieldChange.PropertyName == nameof(PurchaseReceiving.SupplierId))
            {
                // 清空採購單選擇
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.PurchaseOrderId = null;
                }
                
                // 更新採購單選項
                int? supplierId = null;
                if (fieldChange.Value != null && 
                    int.TryParse(fieldChange.Value.ToString(), out int parsedSupplierId) && 
                    parsedSupplierId > 0)
                {
                    supplierId = parsedSupplierId;
                }
                
                await UpdatePurchaseOrderOptions(supplierId);
                
                // 更新產品篩選選項
                await UpdateFilterProductOptions(supplierId);
                
                // 更新廠商欄位的操作按鈕
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    supplierModalManager, 
                    formFields, 
                    nameof(PurchaseReceiving.SupplierId), 
                    fieldChange.Value
                );
                
                StateHasChanged();
            }
            
            // 當採購單ID變更時，觸發重新渲染以篩選對應的採購明細
            if (fieldChange.PropertyName == nameof(PurchaseReceiving.PurchaseOrderId))
            {
                // 無論選擇了特定採購單還是清空選擇，都需要重新渲染
                StateHasChanged();
            }
            
            // 當產品篩選變更時，更新篩選狀態並觸發重新渲染
            if (fieldChange.PropertyName == "FilterProductId")
            {
                if (fieldChange.Value != null && 
                    int.TryParse(fieldChange.Value.ToString(), out int productId) && 
                    productId > 0)
                {
                    filterProductId = productId;
                }
                else
                {
                    filterProductId = null;
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理欄位變更時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 自訂儲存邏輯 - 同時儲存主檔和明細
    /// </summary>
    private async Task<bool> SavePurchaseReceivingWithDetails(PurchaseReceiving purchaseReceiving)
    {
        try
        {
            if (purchaseReceiving == null)
            {
                await NotificationService.ShowErrorAsync("採購入庫資料不能為空");
                return false;
            }

            // 更新總金額
            purchaseReceiving.TotalAmount = purchaseReceivingDetails.Sum(d => d.SubtotalAmount);

            // 過濾有效的明細（有進貨數量的或標記為已完成進貨的）
            var validDetails = purchaseReceivingDetails
                .Where(detail => detail.ReceivedQuantity > 0 || detail.IsReceivingCompleted)
                .ToList();

            if (!validDetails.Any())
            {
                await NotificationService.ShowErrorAsync("請至少輸入一筆進貨明細 (包括本次入庫、倉庫或已完成進貨的)");
                return false;
            }

            // 使用服務層一次性儲存主檔和明細
            var result = await PurchaseReceivingService.SaveWithDetailsAsync(purchaseReceiving, validDetails);

            if (result.IsSuccess && result.Data != null)
            {
                await NotificationService.ShowSuccessAsync("採購入庫儲存成功");
                return true;
            }
            else
            {
                await NotificationService.ShowErrorAsync($"儲存採購入庫失敗：{result.ErrorMessage}");
                return false;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"儲存時發生錯誤：{ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// 配置自訂模組
    /// </summary>
    private List<GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.CustomModule> GetCustomModules()
    {
        try
        {
            if (editModalComponent == null)
            {
                return new List<GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.CustomModule>();
            }

            return new List<GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.CustomModule>
            {
                new GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.CustomModule
                {
                    Title = "",
                    Order = 1,
                    CssClass = "mt-4",
                    IsVisible = true,
                    Content = CreateReceivingDetailManagerContent()
                }
            };
        }
        catch
        {
            // 如果創建模組時發生錯誤，返回空列表
            return new List<GenericEditModalComponent<PurchaseReceiving, IPurchaseReceivingService>.CustomModule>();
        }
    }

    /// <summary>
    /// 創建入庫明細管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreateReceivingDetailManagerContent() => __builder =>
    {
        try
        {
            @if (editModalComponent?.Entity != null)
            {
                // 使用多採購單模式
                @if (editModalComponent.Entity.SupplierId > 0)
                {
                    // 多採購單模式
                    try
                    {
                        <PurchaseReceivingDetailManagerComponent 
                            SupplierId="@editModalComponent.Entity.SupplierId"
                            PurchaseOrderId="@editModalComponent.Entity.PurchaseOrderId"
                            FilterProductId="@filterProductId"
                            ExistingDetails="@purchaseReceivingDetails"
                            OnDetailsChanged="@HandleReceivingDetailsChanged"
                            IsEditMode="@(PurchaseReceivingId.HasValue)" />
                    }
                    catch
                    {
                        <div class="alert alert-warning" role="alert">
                            載入明細管理器時發生錯誤，請重新整理頁面。
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info text-center" role="alert">
                        <i class="fas fa-info-circle me-2"></i>
                        請先選擇廠商後再進行採購明細管理
                    </div>
                }
            }
            else
            {
                <div class="text-center py-3">
                    <span class="text-muted">請先選擇廠商後再管理入庫明細</span>
                </div>
            }
        }
        catch
        {
            <div class="alert alert-warning" role="alert">
                載入明細管理器時發生錯誤，請重新整理頁面。
            </div>
        }
    };
    
    // ===== Modal 管理器初始化方法 =====
    
    /// <summary>
    /// 初始化廠商 Modal 管理器
    /// </summary>
    private void InitializeSupplierModalManager()
    {
        supplierModalManager = new RelatedEntityManagerBuilder<Supplier>(NotificationService, "廠商")
            .WithPropertyName(nameof(PurchaseReceiving.SupplierId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(supplierId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.SupplierId = supplierId;
                }
            })
            .WithCustomPostProcess(async supplier => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 產生廠商操作按鈕
    /// </summary>
    private List<FieldActionButton> GetSupplierActionButtonsAsync()
    {
        var buttons = new List<FieldActionButton>
        {
            new()
            {
                Text = "新增",
                IconClass = "fas fa-plus",
                Variant = "OutlineSuccess",
                Size = "Small",
                Title = "新增廠商",
                OnClick = async () => await supplierModalManager.OpenModalAsync(null)
            }
        };

        // 如果有選中的廠商，添加編輯按鈕
        if (editModalComponent?.Entity?.SupplierId > 0)
        {
            buttons.Add(new()
            {
                Text = "編輯",
                IconClass = "fas fa-edit",
                Variant = "OutlinePrimary",
                Size = "Small",
                Title = "編輯廠商",
                OnClick = async () => await supplierModalManager.OpenModalAsync(editModalComponent.Entity.SupplierId)
            });
        }

        return buttons;
    }

    /// <summary>
    /// 包裝廠商儲存事件
    /// </summary>
    private async Task OnSupplierSavedWrapper(Supplier savedSupplier)
    {
        await supplierModalManager.HandleEntitySavedAsync(savedSupplier, shouldAutoSelect: true);
    }

    /// <summary>
    /// 釋放資源
    /// </summary>
    public void Dispose()
    {
        try
        {
            // 清理任何需要清理的資源
            purchaseReceivingDetails?.Clear();
            formFields?.Clear();
            formSections?.Clear();
            purchaseOrders?.Clear();
            warehouses?.Clear();
            warehouseLocations?.Clear();
            suppliers?.Clear();
            employees?.Clear();
            products?.Clear();
        }
        catch
        {
            // 忽略清理過程中的錯誤
        }
    }
}
