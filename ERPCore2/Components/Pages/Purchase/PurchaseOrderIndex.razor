@page "/purchase/orders"
@inject IPurchaseOrderService PurchaseOrderService
@inject ISupplierService SupplierService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="PurchaseOrder" 
                          TService="IPurchaseOrderService"
                          Service="@PurchaseOrderService"
                          EntityBasePath="/purchase/orders"
                          PageTitle="採購單維護"                          
                          PageSubtitle="管理所有採購單資料"
                          EntityName="採購單"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadPurchaseOrdersAsync"
                          FilterApplier="@ApplyPurchaseOrderFilters"
                          GetEntityDisplayName="@(order => order.PurchaseOrderNumber)"
                          RequiredPermission="PurchaseOrder.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 採購單編輯 Modal *@
<PurchaseOrderEditModalComponent IsVisible="@showEditModal"
                                IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                                PurchaseOrderId="@editingPurchaseOrderId"
                                OnPurchaseOrderSaved="@modalHandler.OnEntitySavedAsync"
                                OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<PurchaseOrder, IPurchaseOrderService> indexComponent = default!;
    
    // 選項清單
    private List<Supplier> suppliers = new();
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingPurchaseOrderId = null;
    
    // Modal 處理器
    private ModalHandler<PurchaseOrder, GenericIndexPageComponent<PurchaseOrder, IPurchaseOrderService>> modalHandler = default!;

    // 👇 新增欄位配置變數
    private PurchaseOrderFieldConfiguration fieldConfiguration = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<PurchaseOrder, GenericIndexPageComponent<PurchaseOrder, IPurchaseOrderService>>(
                id => editingPurchaseOrderId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入相關資料
            await LoadSuppliersAsync();
            
            // 👇 使用欄位配置替代原本的方法調用
            fieldConfiguration = new PurchaseOrderFieldConfiguration(suppliers, NotificationService);
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化採購單頁面失敗");
            await NotificationService.ShowErrorAsync("初始化採購單頁面失敗");
        }
    }    

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("採購管理", "/purchase"),
                new("採購單管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    private async Task LoadSuppliersAsync()
    {
        try
        {
            suppliers = await SupplierService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSuppliersAsync), GetType(), additionalData: "載入供應商資料失敗");
            await NotificationService.ShowErrorAsync("載入供應商資料失敗");
            // 設定安全的預設值
            suppliers = new List<Supplier>();
        }
    }

    // 載入採購單資料
    private async Task<List<PurchaseOrder>> LoadPurchaseOrdersAsync()
    {
        try
        {
            return await PurchaseOrderService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPurchaseOrdersAsync), GetType(), additionalData: "載入採購單資料失敗");
            await NotificationService.ShowErrorAsync("載入採購單資料失敗");
            // 設定安全的預設值
            return new List<PurchaseOrder>();
        }
    }

    // 👇 大幅簡化篩選方法
    private IQueryable<PurchaseOrder> ApplyPurchaseOrderFilters(SearchFilterModel searchModel, IQueryable<PurchaseOrder> query)
    {
        try
        {
            return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyPurchaseOrderFilters), GetType());
        }
        catch (Exception ex)
        {
            // 記錄錯誤並回傳安全的預設查詢
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplyPurchaseOrderFilters), GetType(), additionalData: "採購單篩選器應用失敗");
            _ = NotificationService.ShowErrorAsync("篩選條件應用失敗，已顯示全部資料");
            
            // 回傳基本排序的查詢，確保頁面仍能正常運作
            return query.OrderByDescending(po => po.OrderDate).ThenByDescending(po => po.Id);
        }
    }
}
