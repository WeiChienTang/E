@page "/purchase/orders"
@using Microsoft.AspNetCore.Authorization
@using ERPCore2.Components.Shared.Forms
@using ERPCore2.Components.Shared.Tables
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Auth
@using ERPCore2.Services
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Helpers
@using ERPCore2.Models
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@attribute [Authorize]
@inject IPurchaseOrderService PurchaseOrderService
@inject ISupplierService SupplierService
@inject IWarehouseService WarehouseService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>採購訂單管理</PageTitle>

<PagePermissionCheck RequiredPermission="Purchase.Read">
    <GenericHeaderComponent 
        Title="採購訂單管理" 
        Subtitle="管理採購訂單與供應商進貨作業"
        HeadingLevel="h1"
        BreadcrumbItems="@breadcrumbItems"
        ShowDivider="true"
        IsLoading="@isLoading"
        LoadingText="載入採購訂單資料中...">
        
        <ActionButtons>
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-primary" @onclick="NavigateToCreate">
                    <i class="fas fa-plus me-2"></i>新增採購訂單
                </button>
                <button type="button" class="btn btn-outline-info" @onclick="RefreshData">
                    <i class="fas fa-sync me-2"></i>重新整理
                </button>
                <button type="button" class="btn btn-outline-success" @onclick="ExportData">
                    <i class="fas fa-file-excel me-2"></i>匯出資料
                </button>
            </div>
        </ActionButtons>
    </GenericHeaderComponent>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">載入中...</span>
            </div>
            <p class="mt-3 text-muted">載入採購訂單資料中...</p>
        </div>
    }
    else
    {
        <div class="container-fluid">
            <!-- 篩選器 -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card shadow">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-primary">
                                <i class="fas fa-filter me-2"></i>篩選條件
                            </h6>
                        </div>
                        <div class="card-body">
                            <GenericSearchFilterComponent TModel="PurchaseOrderSearchModel"
                                FilterModel="@filterModel"
                                FilterDefinitions="@filterDefinitions"
                                OnFilterChanged="@HandleFilterChanged" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- 統計卡片 -->
            <div class="row mb-4">
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-primary shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                        總訂單數
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">@filteredItems.Count</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-file-invoice fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-warning shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                        待進貨訂單
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">
                                        @filteredItems.Count(o => o.OrderStatus == PurchaseOrderStatus.Approved || 
                                                                   o.OrderStatus == PurchaseOrderStatus.PartialReceived)
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-clock fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-success shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                        已完成訂單
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">
                                        @filteredItems.Count(o => o.OrderStatus == PurchaseOrderStatus.Completed)
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-info shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                        訂單總金額
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800">
                                        @FormatCurrency(filteredItems.Sum(o => o.TotalAmount))
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 資料表格 -->
            <div class="row">
                <div class="col-12">
                    <div class="card shadow">
                        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                            <h6 class="m-0 font-weight-bold text-primary">
                                <i class="fas fa-table me-2"></i>採購訂單清單 (共 @pagedItems.Count 筆)
                            </h6>
                            <div class="d-flex align-items-center">
                                <label class="me-2 mb-0">每頁顯示：</label>
                                <select class="form-select form-select-sm" style="width: auto;" @onchange="OnPageSizeChanged">
                                    @foreach (var size in pageSizeOptions)
                                    {
                                        <option value="@size" selected="@(size == pageSize)">@size</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            <GenericTableComponent TItem="PurchaseOrder"
                                                  Items="@pagedItems"
                                                  ColumnDefinitions="@columnDefinitions"
                                                  ShowActions="true"
                                                  IsStriped="true"
                                                  IsHoverable="true"
                                                  EnableSorting="false"
                                                  EmptyMessage="沒有找到採購訂單資料">
                                <ActionsTemplate Context="item">
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button type="button" class="btn btn-outline-primary btn-sm" 
                                                @onclick="() => HandleView(item)" title="檢視">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary btn-sm" 
                                                @onclick="() => HandleEdit(item)" title="編輯">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger btn-sm" 
                                                @onclick="() => HandleDelete(item)" title="刪除">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </ActionsTemplate>
                            </GenericTableComponent>
                        </div>
                        
                        @if (filteredItems.Count > pageSize)
                        {
                            <div class="card-footer">
                                <nav aria-label="分頁導航">
                                    <ul class="pagination justify-content-center mb-0">
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                                                <i class="fas fa-chevron-left"></i>
                                            </button>
                                        </li>
                                        
                                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                        {
                                            var page = i;
                                            <li class="page-item @(page == currentPage ? "active" : "")">
                                                <button class="page-link" @onclick="() => GoToPage(page)">@((page))</button>
                                            </li>
                                        }
                                        
                                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                                <i class="fas fa-chevron-right"></i>
                                            </button>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</PagePermissionCheck>

@code {
    // 資料模型
    private List<PurchaseOrder> items = new();
    private List<PurchaseOrder> filteredItems = new();
    private List<PurchaseOrder> pagedItems = new();

    // 選項清單
    private List<SelectOption> supplierOptions = new();
    private List<SelectOption> warehouseOptions = new();
    private List<SelectOption> statusOptions = new();
    private List<SelectOption> typeOptions = new();

    // 篩選相關
    private PurchaseOrderSearchModel searchModel = new();
    private SearchFilterModel filterModel = new();
    private List<SearchFilterDefinition> filterDefinitions = new();

    // 表格相關
    private List<TableColumnDefinition> columnDefinitions = new();

    // 分頁相關
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages => (int)Math.Ceiling((double)filteredItems.Count / pageSize);
    private List<int> pageSizeOptions = new() { 10, 20, 50, 100 };

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // 狀態管理
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 設定麵包屑
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new() { Text = "首頁", Href = "/" },
                new() { Text = "採購管理", Href = "/purchase" },
                new() { Text = "採購訂單", Href = "/purchase/orders" }
            };

            // 載入選項資料
            await LoadOptionsAsync();
            
            // 初始化篩選器
            InitializeFilters();
            
            // 初始化表格欄位
            InitializeColumns();
            
            // 載入主要資料
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                "頁面初始化", 
                GetType(), 
                Navigation
            );
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadOptionsAsync()
    {
        try
        {
            // 載入供應商選項
            var suppliers = await SupplierService.GetAllAsync();
            supplierOptions = suppliers.Select(s => new SelectOption
            {
                Text = $"{s.SupplierCode} - {s.CompanyName}",
                Value = s.Id.ToString()
            }).ToList();

            // 載入倉庫選項
            var warehouses = await WarehouseService.GetAllAsync();
            warehouseOptions = warehouses.Select(w => new SelectOption
            {
                Text = $"{w.WarehouseCode} - {w.WarehouseName}",
                Value = w.Id.ToString()
            }).ToList();

            // 載入狀態選項
            statusOptions = Enum.GetValues<PurchaseOrderStatus>()
                .Select(s => new SelectOption
                {
                    Text = GetStatusDisplayName(s),
                    Value = ((int)s).ToString()
                }).ToList();

            // 載入類型選項
            typeOptions = Enum.GetValues<PurchaseType>()
                .Select(t => new SelectOption
                {
                    Text = GetTypeDisplayName(t),
                    Value = ((int)t).ToString()
                }).ToList();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadOptionsAsync),
                GetType()
            );
        }
    }

    private void InitializeFilters()
    {
        try
        {
            filterDefinitions = new List<SearchFilterDefinition>
            {
                new SearchFilterDefinition
                {
                    Name = "SearchTerm",
                    Label = "搜尋",
                    FilterType = SearchFilterType.Text,
                    Placeholder = "請輸入採購單號、供應商名稱..."
                },
                new SearchFilterDefinition
                {
                    Name = "SupplierId",
                    Label = "供應商",
                    FilterType = SearchFilterType.Select,
                    Options = supplierOptions
                },
                new SearchFilterDefinition
                {
                    Name = "WarehouseId",
                    Label = "倉庫",
                    FilterType = SearchFilterType.Select,
                    Options = warehouseOptions
                },
                new SearchFilterDefinition
                {
                    Name = "OrderStatus",
                    Label = "訂單狀態",
                    FilterType = SearchFilterType.Select,
                    Options = statusOptions
                },
                new SearchFilterDefinition
                {
                    Name = "PurchaseType",
                    Label = "採購類型",
                    FilterType = SearchFilterType.Select,
                    Options = typeOptions
                },
                new SearchFilterDefinition
                {
                    Name = "OrderDateRange",
                    Label = "訂單日期",
                    FilterType = SearchFilterType.DateRange
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    private void InitializeColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                new TableColumnDefinition
                {
                    Title = "採購單號",
                    PropertyName = "PurchaseOrderNumber",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 120px;",
                    IsSortable = true
                },
                new TableColumnDefinition
                {
                    Title = "訂單日期",
                    PropertyName = "OrderDate",
                    DataType = ColumnDataType.Date,
                    HeaderStyle = "width: 100px;",
                    IsSortable = true
                },
                new TableColumnDefinition
                {
                    Title = "供應商",
                    PropertyName = "Supplier.CompanyName",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 150px;"
                },
                new TableColumnDefinition
                {
                    Title = "倉庫",
                    PropertyName = "Warehouse.WarehouseName",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 100px;",
                    NullDisplayText = "-"
                },
                new TableColumnDefinition
                {
                    Title = "採購類型",
                    PropertyName = "PurchaseType",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 100px;",
                    CustomTemplate = item => builder =>
                    {
                        var order = (PurchaseOrder)item;
                        var typeClass = GetTypeClass(order.PurchaseType);
                        builder.OpenElement(0, "span");
                        builder.AddAttribute(1, "class", $"badge {typeClass}");
                        builder.AddContent(2, GetTypeDisplayName(order.PurchaseType));
                        builder.CloseElement();
                    }
                },
                new TableColumnDefinition
                {
                    Title = "訂單狀態",
                    PropertyName = "OrderStatus",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 100px;",
                    CustomTemplate = item => builder =>
                    {
                        var order = (PurchaseOrder)item;
                        var statusClass = GetStatusClass(order.OrderStatus);
                        builder.OpenElement(0, "span");
                        builder.AddAttribute(1, "class", $"badge {statusClass}");
                        builder.AddContent(2, GetStatusDisplayName(order.OrderStatus));
                        builder.CloseElement();
                    }
                },
                new TableColumnDefinition
                {
                    Title = "預計到貨日",
                    PropertyName = "ExpectedDeliveryDate",
                    DataType = ColumnDataType.Date,
                    HeaderStyle = "width: 100px;",
                    NullDisplayText = "-"
                },
                new TableColumnDefinition
                {
                    Title = "訂單金額",
                    PropertyName = "TotalAmount",
                    DataType = ColumnDataType.Currency,
                    HeaderStyle = "width: 120px;",
                    HeaderCssClass = "text-end",
                    CellCssClass = "text-end"
                },
                new TableColumnDefinition
                {
                    Title = "已進貨金額",
                    PropertyName = "ReceivedAmount",
                    DataType = ColumnDataType.Currency,
                    HeaderStyle = "width: 120px;",
                    HeaderCssClass = "text-end",
                    CellCssClass = "text-end"
                },
                new TableColumnDefinition
                {
                    Title = "採購人員",
                    PropertyName = "PurchasePersonnel",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 100px;",
                    NullDisplayText = "-"
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeColumns),
                GetType(),
                additionalData: "初始化欄位定義失敗"
            );
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            items = await PurchaseOrderService.GetAllAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadDataAsync),
                GetType()
            );
        }
    }

    private void HandleFilterChanged(SearchFilterModel filterModel)
    {
        try
        {
            // 將 SearchFilterModel 轉換為 PurchaseOrderSearchModel
            searchModel = new PurchaseOrderSearchModel
            {
                SearchTerm = filterModel.GetFilterValue("SearchTerm") as string,
                SupplierId = int.TryParse(filterModel.GetFilterValue("SupplierId")?.ToString(), out var supplierId) ? (int?)supplierId : null,
                WarehouseId = int.TryParse(filterModel.GetFilterValue("WarehouseId")?.ToString(), out var warehouseId) ? (int?)warehouseId : null,
                OrderStatus = Enum.TryParse<PurchaseOrderStatus>(filterModel.GetFilterValue("OrderStatus")?.ToString(), out var status) ? (PurchaseOrderStatus?)status : null,
                PurchaseType = Enum.TryParse<PurchaseType>(filterModel.GetFilterValue("PurchaseType")?.ToString(), out var type) ? (PurchaseType?)type : null
            };

            // 處理日期範圍
            var dateRange = filterModel.GetFilterValue("OrderDateRange") as DateRange;
            if (dateRange != null)
            {
                searchModel.OrderDateFrom = dateRange.StartDate;
                searchModel.OrderDateTo = dateRange.EndDate;
            }
            
            currentPage = 1; // 重設為第一頁
            ApplyFilters();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(HandleFilterChanged),
                GetType(),
                additionalData: "處理篩選變更失敗"
            );
        }
    }

    private void ApplyFilters()
    {
        try
        {
            filteredItems = items.AsQueryable().ToList();

            // 文字搜尋
            if (!string.IsNullOrWhiteSpace(searchModel.SearchTerm))
            {
                var searchTerm = searchModel.SearchTerm.ToLower();
                filteredItems = filteredItems.Where(o =>
                    o.PurchaseOrderNumber.ToLower().Contains(searchTerm) ||
                    o.Supplier.CompanyName.ToLower().Contains(searchTerm) ||
                    (o.PurchasePersonnel?.ToLower().Contains(searchTerm) ?? false) ||
                    (o.OrderRemarks?.ToLower().Contains(searchTerm) ?? false)
                ).ToList();
            }

            // 供應商篩選
            if (searchModel.SupplierId.HasValue)
            {
                filteredItems = filteredItems.Where(o => o.SupplierId == searchModel.SupplierId.Value).ToList();
            }

            // 倉庫篩選
            if (searchModel.WarehouseId.HasValue)
            {
                filteredItems = filteredItems.Where(o => o.WarehouseId == searchModel.WarehouseId.Value).ToList();
            }

            // 狀態篩選
            if (searchModel.OrderStatus.HasValue)
            {
                filteredItems = filteredItems.Where(o => o.OrderStatus == searchModel.OrderStatus.Value).ToList();
            }

            // 類型篩選
            if (searchModel.PurchaseType.HasValue)
            {
                filteredItems = filteredItems.Where(o => o.PurchaseType == searchModel.PurchaseType.Value).ToList();
            }

            // 日期範圍篩選
            if (searchModel.OrderDateFrom.HasValue)
            {
                filteredItems = filteredItems.Where(o => o.OrderDate >= searchModel.OrderDateFrom.Value).ToList();
            }
            if (searchModel.OrderDateTo.HasValue)
            {
                filteredItems = filteredItems.Where(o => o.OrderDate <= searchModel.OrderDateTo.Value).ToList();
            }

            UpdatePagination();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplyFilters),
                GetType(),
                additionalData: "套用篩選失敗"
            );
        }
    }

    private void UpdatePagination()
    {
        try
        {
            var totalCount = filteredItems.Count;
            var maxPage = totalCount == 0 ? 1 : (int)Math.Ceiling((double)totalCount / pageSize);
            currentPage = Math.Min(currentPage, Math.Max(1, maxPage));

            pagedItems = filteredItems
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(UpdatePagination),
                GetType(),
                additionalData: "更新分頁失敗"
            );
        }
    }

    // 事件處理
    private void NavigateToCreate()
    {
        try
        {
            Navigation.NavigateTo("/purchase/orders/create");
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(NavigateToCreate),
                GetType()
            );
        }
    }

    private async Task RefreshData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(RefreshData),
                GetType()
            );
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ExportData()
    {
        try
        {
            // TODO: 實作匯出功能
            await JSRuntime.InvokeVoidAsync("alert", "匯出功能開發中...");
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ExportData),
                GetType()
            );
        }
    }

    private void HandleView(object item)
    {
        try
        {
            var order = (PurchaseOrder)item;
            Navigation.NavigateTo($"/purchase/orders/{order.Id}");
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(HandleView),
                GetType()
            );
        }
    }

    private void HandleEdit(object item)
    {
        try
        {
            var order = (PurchaseOrder)item;
            Navigation.NavigateTo($"/purchase/orders/{order.Id}/edit");
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(HandleEdit),
                GetType()
            );
        }
    }

    private async Task HandleDelete(object item)
    {
        try
        {
            var order = (PurchaseOrder)item;
            
            // 檢查是否可以刪除
            var canDelete = await PurchaseOrderService.CanDeleteAsync(order.Id);
            if (!canDelete)
            {
                await JSRuntime.InvokeVoidAsync("alert", "此採購訂單已有進貨記錄或已核准，無法刪除！");
                return;
            }
            
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"確定要刪除採購訂單 {order.PurchaseOrderNumber} 嗎？");
            if (confirmed)
            {
                var result = await PurchaseOrderService.DeleteAsync(order.Id);
                if (result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "刪除成功！");
                    await RefreshData();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(HandleDelete),
                GetType()
            );
        }
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        try
        {
            if (int.TryParse(e.Value?.ToString(), out var newSize))
            {
                pageSize = newSize;
                currentPage = 1;
                UpdatePagination();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnPageSizeChanged),
                GetType()
            );
        }
    }

    private void GoToPage(int page)
    {
        try
        {
            if (page >= 1 && page <= totalPages)
            {
                currentPage = page;
                UpdatePagination();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GoToPage),
                GetType()
            );
        }
    }

    // 輔助方法
    private static string FormatCurrency(decimal amount)
    {
        return amount.ToString("C0");
    }

    private static string GetStatusDisplayName(PurchaseOrderStatus status)
    {
        return status switch
        {
            PurchaseOrderStatus.Draft => "草稿",
            PurchaseOrderStatus.Submitted => "已送出",
            PurchaseOrderStatus.Approved => "已核准",
            PurchaseOrderStatus.PartialReceived => "部分進貨",
            PurchaseOrderStatus.Completed => "已完成",
            PurchaseOrderStatus.Cancelled => "已取消",
            PurchaseOrderStatus.Closed => "已關閉",
            _ => status.ToString()
        };
    }

    private static string GetStatusClass(PurchaseOrderStatus status)
    {
        return status switch
        {
            PurchaseOrderStatus.Draft => "bg-secondary",
            PurchaseOrderStatus.Submitted => "bg-info",
            PurchaseOrderStatus.Approved => "bg-primary",
            PurchaseOrderStatus.PartialReceived => "bg-warning",
            PurchaseOrderStatus.Completed => "bg-success",
            PurchaseOrderStatus.Cancelled => "bg-danger",
            PurchaseOrderStatus.Closed => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private static string GetTypeDisplayName(PurchaseType type)
    {
        return type switch
        {
            PurchaseType.Normal => "一般採購",
            PurchaseType.Urgent => "緊急採購",
            PurchaseType.Replenishment => "補貨採購",
            PurchaseType.Project => "專案採購",
            _ => type.ToString()
        };
    }

    private static string GetTypeClass(PurchaseType type)
    {
        return type switch
        {
            PurchaseType.Normal => "bg-primary",
            PurchaseType.Urgent => "bg-danger",
            PurchaseType.Replenishment => "bg-warning",
            PurchaseType.Project => "bg-info",
            _ => "bg-secondary"
        };
    }
}
