@page "/purchase/orders"
@using ERPCore2.Components.Shared.Report
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.Approval
@using ERPCore2.Models
@inject IPurchaseOrderService PurchaseOrderService
@inject ISupplierService SupplierService
@inject ICompanyService CompanyService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="PurchaseOrder" 
                          TService="IPurchaseOrderService"
                          Service="@PurchaseOrderService"
                          EntityBasePath="/purchase/orders"
                          PageTitle="採購單維護"                          
                          PageSubtitle="管理所有採購單資料"
                          EntityName="採購單"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadPurchaseOrdersAsync"
                          FilterApplier="@ApplyPurchaseOrderFilters"
                          GetEntityDisplayName="@(order => order.PurchaseOrderNumber)"
                          RequiredPermission="PurchaseOrder.Read"
                          ShowDefaultActions="false"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent">
    <CustomActionButtons>
        @* 批次審核按鈕 *@
        <GenericButtonComponent Variant="ButtonVariant.Warning" 
                               Text="批次審核" 
                               OnClick="@HandleBatchApprovalAsync" 
                               IsDisabled="@indexComponent.IsLoading" 
                               Title="批次審核採購單"
                               CssClass="index-action-btn" 
                               IconClass="fas fa-check-double" />
        
        @* 批次列印按鈕 *@
        <GenericButtonComponent Variant="ButtonVariant.Info" 
                               Text="多筆列印" 
                               OnClick="@HandleBatchPrintAsync" 
                               IsDisabled="@indexComponent.IsLoading" 
                               Title="批次列印採購單"
                               CssClass="index-action-btn" 
                               IconClass="fas fa-print" />
        
        @* 新增按鈕 *@
        <GenericButtonComponent Variant="ButtonVariant.Primary" 
                               Text="新增採購單" 
                               OnClick="@modalHandler.ShowAddModalAsync" 
                               IsDisabled="@indexComponent.IsLoading" 
                               Title="新增採購單資料"
                               CssClass="index-action-btn" 
                               IconClass="fas fa-plus" />
        
        @* 重新整理按鈕 *@
        <GenericButtonComponent Variant="ButtonVariant.Success" 
                               Text="重新整理" 
                               OnClick="@indexComponent.Refresh" 
                               IsDisabled="@indexComponent.IsLoading" 
                               Title="重新整理資料"
                               CssClass="index-action-btn" 
                               IconClass="fas fa-sync" />
    </CustomActionButtons>
</GenericIndexPageComponent>

@* 採購單編輯 Modal *@
<PurchaseOrderEditModalComponent IsVisible="@showEditModal"
                                IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                                PurchaseOrderId="@editingPurchaseOrderId"
                                OnPurchaseOrderSaved="@modalHandler.OnEntitySavedAsync"
                                OnCancel="@modalHandler.OnModalCancelAsync" />

@* 批次審核 Modal - 使用新組件 *@
<BatchApprovalModalComponent TEntity="PurchaseOrder"
                            IsVisible="@showBatchApprovalModal"
                            IsVisibleChanged="@((bool visible) => showBatchApprovalModal = visible)"
                            Title="採購單批次審核"
                            EntityName="採購單"
                            LoadPendingItems="@LoadPendingPurchaseOrdersAsync"
                            OnApproveItem="@ApproveSinglePurchaseOrderAsync"
                            OnApproveAll="@ApproveAllPurchaseOrdersAsync"
                            OnViewClick="@HandleApprovalViewClick"
                            ColumnDefinitions="@GetApprovalColumnDefinitions()"
                            OnApprovalCompleted="@HandleApprovalCompleted" />

@* 批次列印篩選 Modal - 使用新架構 *@
<BatchPrintFilterModalComponent IsVisible="@showBatchPrintModal"
                               IsVisibleChanged="@((bool visible) => showBatchPrintModal = visible)"
                               Title="採購單批次列印條件"
                               OnConfirm="@HandleBatchPrintConfirmAsync"
                               OnCancel="@HandleBatchPrintCancelAsync">
    @* 區塊 1: 廠商多選篩選 *@
    <FilterSectionComponent Title="廠商篩選 (可多選)" 
                           Badge="@($"{selectedSuppliers.Count} / {suppliers.Count}")">
        <MultiSelectFilterComponent TItem="Supplier"
                                   Items="@suppliers"
                                   @bind-SelectedItems="@selectedSuppliers"
                                   DisplayProperty="CompanyName"
                                   ValueProperty="Id"
                                   Placeholder="請輸入廠商名稱搜尋..."
                                   EmptyMessage="尚未選擇廠商，留空表示列印所有廠商的採購單"
                                   ShowCard="false" />
    </FilterSectionComponent>
    
    @* 區塊 2: 採購日期範圍 - 使用日期範圍元件 *@
    <FilterSectionComponent Title="採購日期" 
                           IconClass="bi bi-calendar-range">
        <DateRangeFilterComponent @bind-StartDate="@batchPrintStartDate"
                                 @bind-EndDate="@batchPrintEndDate"
                                 StartDateLabel="起始日期"
                                 EndDateLabel="結束日期"
                                 ShowQuickSelectors="true"
                                 AutoValidate="true"
                                 ShowValidationMessage="true" />
    </FilterSectionComponent>
</BatchPrintFilterModalComponent>

@code {
    // 組件參考
    private GenericIndexPageComponent<PurchaseOrder, IPurchaseOrderService> indexComponent = default!;
    
    // 選項清單
    private List<Supplier> suppliers = new();
    private List<Company> companies = new();
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingPurchaseOrderId = null;
    
    // 批次審核 Modal 相關狀態
    private bool showBatchApprovalModal = false;
    
    // 批次列印 Modal 相關狀態
    private bool showBatchPrintModal = false;
    private List<Supplier> selectedSuppliers = new();
    private DateTime? batchPrintStartDate = null;
    private DateTime? batchPrintEndDate = null;
    
    // Modal 處理器
    private ModalHandler<PurchaseOrder, GenericIndexPageComponent<PurchaseOrder, IPurchaseOrderService>> modalHandler = default!;

    // 👇 新增欄位配置變數
    private PurchaseOrderFieldConfiguration fieldConfiguration = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<PurchaseOrder, GenericIndexPageComponent<PurchaseOrder, IPurchaseOrderService>>(
                id => editingPurchaseOrderId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入相關資料
            await LoadSuppliersAsync();
            await LoadCompaniesAsync();
            
            // 👇 使用欄位配置替代原本的方法調用
            fieldConfiguration = new PurchaseOrderFieldConfiguration(suppliers, companies, NotificationService);
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化採購單頁面失敗");
            await NotificationService.ShowErrorAsync("初始化採購單頁面失敗");
        }
    }    

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("採購管理", "/purchase"),
                new("採購單管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    private async Task LoadSuppliersAsync()
    {
        try
        {
            suppliers = await SupplierService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSuppliersAsync), GetType(), additionalData: "載入廠商資料失敗");
            await NotificationService.ShowErrorAsync("載入廠商資料失敗");
            // 設定安全的預設值
            suppliers = new List<Supplier>();
        }
    }

    private async Task LoadCompaniesAsync()
    {
        try
        {
            companies = await CompanyService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCompaniesAsync), GetType(), additionalData: "載入公司資料失敗");
            await NotificationService.ShowErrorAsync("載入公司資料失敗");
            // 設定安全的預設值
            companies = new List<Company>();
        }
    }

    // 載入採購單資料
    private async Task<List<PurchaseOrder>> LoadPurchaseOrdersAsync()
    {
        try
        {
            return await PurchaseOrderService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPurchaseOrdersAsync), GetType(), additionalData: "載入採購單資料失敗");
            await NotificationService.ShowErrorAsync("載入採購單資料失敗");
            // 設定安全的預設值
            return new List<PurchaseOrder>();
        }
    }

    // 篩選方法 - 現在已由 FilterHelper 處理所有錯誤情況
    private IQueryable<PurchaseOrder> ApplyPurchaseOrderFilters(SearchFilterModel searchModel, IQueryable<PurchaseOrder> query)
    {
        // 確保 fieldConfiguration 已初始化（避免與 GenericIndexPageComponent 初始化的競爭條件）
        if (fieldConfiguration == null)
        {
            // 如果配置未初始化，回傳基本排序的查詢（ID 降序，最新的在上面）
            return query.OrderByDescending(e => e.Id);
        }

        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyPurchaseOrderFilters), GetType());
    }

    // ===== 批次審核相關方法 =====
    
    /// <summary>
    /// 處理批次審核按鈕點擊事件
    /// </summary>
    private async Task HandleBatchApprovalAsync()
    {
        try
        {
            // 直接顯示批次審核 Modal
            showBatchApprovalModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchApprovalAsync), GetType(), additionalData: "開啟批次審核視窗失敗");
            await NotificationService.ShowErrorAsync("開啟批次審核視窗失敗");
        }
    }

    /// <summary>
    /// 載入待審核的採購單
    /// </summary>
    private async Task<List<PurchaseOrder>> LoadPendingPurchaseOrdersAsync()
    {
        try
        {
            var allOrders = await PurchaseOrderService.GetAllAsync();
            return allOrders.Where(o => !o.IsApproved).ToList();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPendingPurchaseOrdersAsync), GetType(), additionalData: "載入待審核採購單失敗");
            await NotificationService.ShowErrorAsync("載入待審核採購單失敗");
            return new List<PurchaseOrder>();
        }
    }

    /// <summary>
    /// 審核單筆採購單
    /// </summary>
    private async Task<bool> ApproveSinglePurchaseOrderAsync(PurchaseOrder order)
    {
        try
        {
            order.IsApproved = true;
            order.ApprovedAt = DateTime.Now;
            // TODO: 設定 ApprovedBy 為當前使用者
            
            await PurchaseOrderService.UpdateAsync(order);
            return true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApproveSinglePurchaseOrderAsync), GetType(), 
                additionalData: new { OrderId = order.Id, OrderNumber = order.PurchaseOrderNumber });
            return false;
        }
    }

    /// <summary>
    /// 批次審核所有採購單
    /// </summary>
    private async Task<(int successCount, int failCount)> ApproveAllPurchaseOrdersAsync(List<PurchaseOrder> orders)
    {
        int successCount = 0;
        int failCount = 0;

        foreach (var order in orders)
        {
            try
            {
                if (!order.IsApproved)
                {
                    order.IsApproved = true;
                    order.ApprovedAt = DateTime.Now;
                    // TODO: 設定 ApprovedBy 為當前使用者
                    
                    await PurchaseOrderService.UpdateAsync(order);
                    successCount++;
                }
            }
            catch (Exception ex)
            {
                failCount++;
                await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApproveAllPurchaseOrdersAsync), GetType(), 
                    additionalData: new { OrderId = order.Id, OrderNumber = order.PurchaseOrderNumber });
            }
        }

        return (successCount, failCount);
    }

    /// <summary>
    /// 處理審核 Modal 中的查看按鈕點擊
    /// </summary>
    private async Task HandleApprovalViewClick(PurchaseOrder order)
    {
        try
        {
            // 不關閉批次審核 Modal，直接開啟編輯 Modal
            await modalHandler.ShowEditModalAsync(order);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleApprovalViewClick), GetType(), 
                additionalData: new { OrderId = order.Id });
            await NotificationService.ShowErrorAsync("開啟查看視窗失敗");
        }
    }

    /// <summary>
    /// 審核完成後的處理
    /// </summary>
    private async Task HandleApprovalCompleted()
    {
        try
        {
            // 刷新主列表
            await indexComponent.Refresh();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleApprovalCompleted), GetType(), 
                additionalData: "刷新列表失敗");
        }
    }

    /// <summary>
    /// 取得批次審核 Modal 的表格欄位定義
    /// </summary>
    private List<InteractiveColumnDefinition> GetApprovalColumnDefinitions()
    {
        return new List<InteractiveColumnDefinition>
        {
            new()
            {
                Title = "採購單號",
                PropertyName = nameof(PurchaseOrder.PurchaseOrderNumber),
                ColumnType = InteractiveColumnType.Display,
                Width = "150px"
            },
            new()
            {
                Title = "廠商",
                PropertyName = "Supplier.CompanyName",
                ColumnType = InteractiveColumnType.Display,
                Width = "200px"
            },
            new()
            {
                Title = "訂單日期",
                PropertyName = nameof(PurchaseOrder.OrderDate),
                ColumnType = InteractiveColumnType.Display,
                Width = "120px",
                DisplayFormatter = value => 
                {
                    if (value is DateTime date)
                        return $"<span style='font-size: 0.875rem;'>{date:yyyy/MM/dd}</span>";
                    return "-";
                }
            },
            new()
            {
                Title = "預計到貨日",
                PropertyName = nameof(PurchaseOrder.ExpectedDeliveryDate),
                ColumnType = InteractiveColumnType.Display,
                Width = "120px",
                DisplayFormatter = value => 
                {
                    if (value is DateTime date)
                        return $"<span style='font-size: 0.875rem;'>{date:yyyy/MM/dd}</span>";
                    return "<span style='font-size: 0.875rem;'>-</span>";
                }
            },
            new()
            {
                Title = "總金額",
                PropertyName = nameof(PurchaseOrder.TotalAmount),
                ColumnType = InteractiveColumnType.Display,
                Width = "120px",
                CellCssClass = "text-end",
                DisplayFormatter = value => 
                {
                    if (value is decimal amount)
                        return $"<span style='font-size: 0.875rem;' class='fw-bold'>{amount:N0}</span>";
                    return "0";
                }
            },
            new()
            {
                Title = "建立日期",
                PropertyName = nameof(PurchaseOrder.CreatedAt),
                ColumnType = InteractiveColumnType.Display,
                Width = "150px",
                DisplayFormatter = value => 
                {
                    if (value is DateTime date)
                        return $"<span style='font-size: 0.875rem;'>{date:yyyy/MM/dd HH:mm}</span>";
                    return "-";
                }
            }
        };
    }

    // ===== 批次列印相關方法 =====
    
    /// <summary>
    /// 多筆列印處理方法
    /// </summary>
    private async Task HandleBatchPrintAsync()
    {
        try
        {
            // 顯示批次列印篩選 Modal
            showBatchPrintModal = true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintAsync), GetType(), additionalData: "開啟多筆列印視窗失敗");
            await NotificationService.ShowErrorAsync("開啟多筆列印視窗失敗");
        }
    }

    // 處理批次列印確認
    private async Task HandleBatchPrintConfirmAsync()
    {
        try
        {
            // 組裝批次列印條件
            var criteria = new BatchPrintCriteria
            {
                StartDate = batchPrintStartDate,
                EndDate = batchPrintEndDate,
                RelatedEntityIds = selectedSuppliers.Select(s => s.Id).ToList(),
                ReportType = "PurchaseOrder",
                MaxResults = 100,
                IncludeCancelled = false
            };

            // 驗證篩選條件
            var validation = criteria.Validate();
            if (!validation.IsValid)
            {
                await NotificationService.ShowErrorAsync($"篩選條件錯誤：{validation.GetAllErrors()}");
                return;
            }

            // 序列化條件為 JSON
            var jsonPayload = System.Text.Json.JsonSerializer.Serialize(criteria);

            // 開啟新視窗顯示批次報表（使用新路由）
            var apiUrl = "/api/purchase-report/order/batch?autoprint=true";
            await JSRuntime.InvokeVoidAsync("openBatchPrintWindow", apiUrl, jsonPayload);

            // 顯示成功訊息
            await NotificationService.ShowSuccessAsync($"已開啟批次列印視窗 ({criteria.GetSummary()})");
            
            // 關閉 Modal
            showBatchPrintModal = false;
            
            // 清空選擇
            selectedSuppliers.Clear();
            batchPrintStartDate = null;
            batchPrintEndDate = null;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintConfirmAsync), GetType(), additionalData: "執行批次列印失敗");
            await NotificationService.ShowErrorAsync("執行批次列印失敗");
        }
    }

    // 處理批次列印取消
    private async Task HandleBatchPrintCancelAsync()
    {
        try
        {
            showBatchPrintModal = false;
            
            // 清空所有篩選條件
            selectedSuppliers.Clear();
            batchPrintStartDate = null;
            batchPrintEndDate = null;
            
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintCancelAsync), GetType(), additionalData: "取消批次列印失敗");
        }
    }
}
