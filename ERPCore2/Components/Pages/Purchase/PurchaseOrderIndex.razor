@page "/purchase/orders"
@inject IPurchaseOrderService PurchaseOrderService
@inject ISupplierService SupplierService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="PurchaseOrder" 
                          TService="IPurchaseOrderService"
                          Service="@PurchaseOrderService"
                          EntityBasePath="/purchase-orders"
                          PageTitle="採購單主檔"                          
                          PageSubtitle="管理所有採購單資料"
                          EntityName="採購單"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadPurchaseOrdersAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplyPurchaseOrderFilters"
                          GetEntityDisplayName="@(order => order.PurchaseOrderNumber)"
                          RequiredPermission="PurchaseOrder.Read"
                          @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<PurchaseOrder, IPurchaseOrderService> indexComponent = default!;
    
    // 選項清單
    private List<Supplier> suppliers = new();
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnInitialized), 
                GetType(),
                additionalData: "PurchaseOrderIndex頁面初始化");
        }
    }    

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("採購管理", "/purchase"),
                new("採購單管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeBreadcrumbs), 
                GetType(),
                additionalData: "PurchaseOrderIndex麵包屑初始化");
            
            // 設定預設值以防頁面無法正常運作
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 重新初始化篩選器以載入下拉選單選項
            await InitializeFiltersAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadBasicDataAsync), 
                GetType(),
                additionalData: "PurchaseOrderIndex基礎資料載入");
        }
    }

    // 載入採購單資料
    private async Task<List<PurchaseOrder>> LoadPurchaseOrdersAsync()
    {
        try
        {
            return await PurchaseOrderService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadPurchaseOrdersAsync), 
                GetType(),
                additionalData: "PurchaseOrderIndex採購單資料載入");
            
            StateHasChanged();
            return new List<PurchaseOrder>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 建立基本篩選定義（不包含下拉選單選項，這些將在 InitializeFiltersAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("PurchaseOrderNumber", "採購單號", "輸入採購單號搜尋")
                .AddSelect("SupplierId", "供應商", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("Status", "狀態", new List<SelectOption>
                {
                    new SelectOption { Text = "草稿", Value = "Draft" },
                    new SelectOption { Text = "已送出", Value = "Submitted" },
                    new SelectOption { Text = "已核准", Value = "Approved" },
                    new SelectOption { Text = "部分進貨", Value = "PartialReceived" },
                    new SelectOption { Text = "已完成", Value = "Completed" },
                    new SelectOption { Text = "已取消", Value = "Cancelled" },
                    new SelectOption { Text = "已關閉", Value = "Closed" }
                })
                .AddDateRange("PurchaseOrderDate", "採購日期")
                .AddDateRange("ExpectedDeliveryDate", "預定交貨日期")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeFilters), 
                GetType(),
                additionalData: "PurchaseOrderIndex篩選器初始化");
            
            // 設定預設值以防頁面無法正常運作
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("採購單號", nameof(PurchaseOrder.PurchaseOrderNumber)),
                TableColumnDefinition.Text("供應商", "Supplier.CompanyName"),
                TableColumnDefinition.Date("採購日期", nameof(PurchaseOrder.OrderDate)),
                TableColumnDefinition.Date("預定交貨日期", nameof(PurchaseOrder.ExpectedDeliveryDate)),
                TableColumnDefinition.Currency("總金額", nameof(PurchaseOrder.TotalAmount)),
                TableColumnDefinition.Text("備註", nameof(PurchaseOrder.OrderRemarks))
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeTableColumns), 
                GetType(),
                additionalData: "PurchaseOrderIndex表格欄位初始化");
            
            // 設定預設值以防頁面無法正常運作
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }    

    // 自定義篩選邏輯
    private IQueryable<PurchaseOrder> ApplyPurchaseOrderFilters(SearchFilterModel searchModel, IQueryable<PurchaseOrder> query)
    {
        try
        {
            // 採購單號篩選
            var orderNumberFilter = searchModel.GetFilterValue("PurchaseOrderNumber")?.ToString();
            if (!string.IsNullOrWhiteSpace(orderNumberFilter))
            {
                query = query.Where(po => 
                    po.PurchaseOrderNumber.Contains(orderNumberFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 供應商篩選
            var supplierIdFilter = searchModel.GetFilterValue("SupplierId")?.ToString();
            if (!string.IsNullOrWhiteSpace(supplierIdFilter) && int.TryParse(supplierIdFilter, out var supplierId))
            {
                query = query.Where(po => po.SupplierId == supplierId);
            }

            // 採購日期篩選
            var startDate = searchModel.GetFilterValue("PurchaseOrderDate_Start") as DateTime?;
            var endDate = searchModel.GetFilterValue("PurchaseOrderDate_End") as DateTime?;
            
            if (startDate.HasValue)
            {
                query = query.Where(po => po.OrderDate >= startDate.Value);
            }
            
            if (endDate.HasValue)
            {
                query = query.Where(po => po.OrderDate <= endDate.Value);
            }

            // 預定交貨日期篩選
            var expectedStartDate = searchModel.GetFilterValue("ExpectedDeliveryDate_Start") as DateTime?;
            var expectedEndDate = searchModel.GetFilterValue("ExpectedDeliveryDate_End") as DateTime?;
            
            if (expectedStartDate.HasValue)
            {
                query = query.Where(po => po.ExpectedDeliveryDate >= expectedStartDate.Value);
            }
            
            if (expectedEndDate.HasValue)
            {
                query = query.Where(po => po.ExpectedDeliveryDate <= expectedEndDate.Value);
            }

            return query.OrderByDescending(po => po.OrderDate)
                       .ThenByDescending(po => po.Id);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(ApplyPurchaseOrderFilters), 
                GetType(),
                additionalData: "PurchaseOrderIndex篩選器套用");
            
            // 發生錯誤時回傳原始查詢
            return query;
        }
    }

    private async Task InitializeFiltersAsync()
    {
        try
        {
            // 載入供應商選項
            suppliers = await SupplierService.GetAllAsync();
            var supplierOptions = suppliers.Where(s => s.Status == EntityStatus.Active)
                .Select(s => new SelectOption
                {
                    Text = s.CompanyName,
                    Value = s.Id.ToString()
                }).ToList();

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("PurchaseOrderNumber", "採購單號", "輸入採購單號搜尋")
                .AddSelect("SupplierId", "供應商", supplierOptions)
                .AddSelect("Status", "狀態", new List<SelectOption>
                {
                    new SelectOption { Text = "草稿", Value = "Draft" },
                    new SelectOption { Text = "已送出", Value = "Submitted" },
                    new SelectOption { Text = "已核准", Value = "Approved" },
                    new SelectOption { Text = "部分進貨", Value = "PartialReceived" },
                    new SelectOption { Text = "已完成", Value = "Completed" },
                    new SelectOption { Text = "已取消", Value = "Cancelled" },
                    new SelectOption { Text = "已關閉", Value = "Closed" }
                })
                .AddDateRange("PurchaseOrderDate", "採購日期")
                .AddDateRange("ExpectedDeliveryDate", "預定交貨日期")
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，刷新組件以更新篩選器
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFiltersAsync), GetType(),
                additionalData: new { PageName = "PurchaseOrderIndex", Action = "InitializeFiltersAsync" });
        }
    }
}
