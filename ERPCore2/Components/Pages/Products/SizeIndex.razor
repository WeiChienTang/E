@page "/sizes"
@inject ISizeService SizeService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Size" 
                          TService="ISizeService"
                          Service="@SizeService"
                          EntityBasePath="/sizes"
                          PageTitle="尺寸維護"
                          PageSubtitle="管理商品尺寸規格資料"
                          EntityName="尺寸"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSizesAsync"
                          FilterApplier="@ApplySizeFilters"
                          GetEntityDisplayName="@(size => size.Name)"
                          RequiredPermission="Size.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 使用 ModalHelper 處理事件 *@
<SizeEditModalComponent IsVisible="@showEditModal"
                        IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                        SizeId="@editingSizeId"
                        OnSizeSaved="@modalHandler.OnEntitySavedAsync"
                        OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Size, ISizeService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingSizeId = null;
    
    // Modal 處理器
    private ModalHandler<Size, GenericIndexPageComponent<Size, ISizeService>> modalHandler = default!;
    
    // 欄位配置
    private SizeFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Size, GenericIndexPageComponent<Size, ISizeService>>(
                id => editingSizeId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 建立欄位配置（傳遞 NotificationService）
            fieldConfiguration = new SizeFieldConfiguration(NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化尺寸頁面失敗");
            await NotificationService.ShowErrorAsync("初始化尺寸頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("尺寸維護")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入尺寸資料
    private async Task<List<Size>> LoadSizesAsync()
    {
        try
        {
            return await SizeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSizesAsync), GetType(), additionalData: "載入尺寸資料失敗");
            await NotificationService.ShowErrorAsync("載入尺寸資料失敗");
            // 設定安全的預設值
            return new List<Size>();
        }
    }

    private IQueryable<Size> ApplySizeFilters(SearchFilterModel searchModel, IQueryable<Size> query)
    {
        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplySizeFilters), GetType());
    }
}
