@page "/sizes"

@inject ISizeService SizeService
@inject INotificationService NotificationService

@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Size" 
                          TService="ISizeService"
                          Service="@SizeService"
                          EntityBasePath="/sizes"
                          PageTitle="尺寸維護"
                          PageSubtitle="管理商品尺寸規格資料"
                          EntityName="尺寸"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSizesAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplySizeFilters"
                          GetEntityDisplayName="@(size => size.SizeName)"
                          RequiredPermission="Size.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 使用 ModalHelper 處理事件 *@
<SizeEditModalComponent IsVisible="@showEditModal"
                        IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                        SizeId="@editingSizeId"
                        OnSizeSaved="@modalHandler.OnEntitySavedAsync"
                        OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Size, ISizeService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingSizeId = null;
    
    // Modal 處理器 - 使用 ModalHelper 統一處理
    private ModalHandler<Size, GenericIndexPageComponent<Size, ISizeService>> modalHandler = default!;

    protected override void OnInitialized()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Size, GenericIndexPageComponent<Size, ISizeService>>(
                id => editingSizeId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnInitialized), 
                GetType(),
                additionalData: new { PageName = "SizeIndex" });
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("尺寸維護")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeBreadcrumbs), 
                GetType(),
                additionalData: new { PageName = "SizeIndex" });
        }
    }

    // 載入基礎資料（此頁面不需要選項清單）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 這裡不需要載入額外的選項資料，因為Size實體比較簡單
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _ = await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadBasicDataAsync), 
                GetType(),
                additionalData: new { PageName = "SizeIndex" });
            StateHasChanged();
        }
    }

    // 載入尺寸資料
    private async Task<List<Size>> LoadSizesAsync()
    {
        try
        {
            return await SizeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadSizesAsync), 
                GetType(),
                additionalData: new { PageName = "SizeIndex" });
            
            StateHasChanged();
            return new List<Size>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Code", "尺寸代碼", "輸入尺寸代碼搜尋")
                .AddText("SizeName", "尺寸名稱", "輸入尺寸名稱搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeFilters), 
                GetType(),
                additionalData: new { PageName = "SizeIndex" });
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("尺寸代碼", nameof(Size.Code)),
                TableColumnDefinition.Text("尺寸名稱", nameof(Size.SizeName)),
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeTableColumns), 
                GetType(),
                additionalData: new { PageName = "SizeIndex" });
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Size> ApplySizeFilters(SearchFilterModel searchModel, IQueryable<Size> query)
    {
        try
        {
            // 尺寸代碼篩選
            var CodeFilter = searchModel.GetFilterValue("Code")?.ToString();
            if (!string.IsNullOrWhiteSpace(CodeFilter))
            {
                query = query.Where(s => 
                    s.Code != null && s.Code.Contains(CodeFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 尺寸名稱篩選
            var sizeNameFilter = searchModel.GetFilterValue("SizeName")?.ToString();
            if (!string.IsNullOrWhiteSpace(sizeNameFilter))
            {
                query = query.Where(s => 
                    s.SizeName.Contains(sizeNameFilter, StringComparison.OrdinalIgnoreCase));
            }

            return query.OrderBy(s => s.SizeName);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(ApplySizeFilters), 
                GetType(),
                additionalData: new { PageName = "SizeIndex" });
            return query; // 發生錯誤時返回原始查詢
        }
    }
}
