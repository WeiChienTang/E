@page "/products"
@inject IProductService ProductService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>產品管理</PageTitle>

@* 頁面標題 *@
<GenericHeaderComponent Title="產品管理"
                       Subtitle="管理所有產品資料與庫存資訊"
                       TitleIcon="box-fill"
                       HeadingLevel="h1"
                       BreadcrumbItems="@breadcrumbItems"
                       IsLoading="@isLoading"
                       LoadingText="載入中..."
                       ShowDivider="true">    <ActionButtons>
        <IndexActionButtonsComponent 
            AddButtonText="新增產品"
            AddButtonIcon="bi-plus-circle"
            OnAddClick="ShowCreateProduct"
            OnRefreshClick="RefreshData"
            IsLoading="@isLoading" />
    </ActionButtons>
</GenericHeaderComponent>

@* 產品管理主要內容區域 *@
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-search me-2"></i>
                    產品搜尋與管理
                </h5>
            </div>
            <div class="card-body">                @* 搜尋篩選區域 *@
                <GenericSearchFilterComponent TModel="SearchFilterModel"
                                             FilterDefinitions="@filterDefinitions"
                                             FilterModel="@searchModel"
                                             OnSearch="HandleSearch"
                                             OnFilterChanged="HandleFilterChanged"
                                             AutoSearch="true"
                                             ShowSearchButton="true"
                                             ShowAdvancedToggle="true"
                                             SearchDelayMs="500" />

                @* 產品列表表格 *@
                <div class="mt-4">
                    <GenericTableComponent TItem="Product"
                                          Items="@pagedProducts"
                                          ColumnDefinitions="@columnDefinitions"
                                          ShowActions="true"
                                          ActionsTemplate="@ActionsTemplate"
                                          EnableRowClick="true"
                                          OnRowClick="HandleRowClick"
                                          EnableSorting="false"
                                          IsStriped="true"
                                          IsHoverable="true"
                                          IsBordered="false"
                                          Size="TableSize.Normal"
                                          EmptyMessage="沒有找到符合條件的產品資料"
                                          ActionsHeader="操作"
                                          EnablePagination="true"
                                          CurrentPage="@currentPage"
                                          PageSize="@pageSize"
                                          TotalItems="@totalItems"
                                          OnPageChanged="HandlePageChanged"
                                          OnPageSizeChanged="HandlePageSizeChanged"
                                          ShowPageSizeSelector="true">
                    </GenericTableComponent>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // 資料來源
    private List<Product> products = new();
    private List<Product> allProducts = new();
    
    // 篩選相關
    private SearchFilterModel searchModel = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    
    // 表格相關
    private List<TableColumnDefinition> columnDefinitions = new();
    
    // 分頁相關
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalItems = 0;
    private List<Product> pagedProducts = new();
    
    // 選項清單
    private List<ProductCategory> productCategories = new();
    private List<Supplier> suppliers = new();
    
    // 狀態管理
    private bool isLoading = true;
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await InitializePageAsync();
    }

    private async Task InitializePageAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // 初始化麵包屑
            InitializeBreadcrumbs();
            
            // 載入基礎資料
            await LoadBasicDataAsync();
            
            // 初始化篩選器
            InitializeFilters();
            
            // 初始化表格欄位
            InitializeTableColumns();
            
            // 載入產品資料
            await LoadProductsAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤（這裡可以加入日誌記錄）
            await JSRuntime.InvokeVoidAsync("console.error", "載入產品資料時發生錯誤：", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("產品管理")
        };
    }

    private async Task LoadBasicDataAsync()
    {
        // 載入產品分類和供應商選項
        productCategories = await ProductService.GetProductCategoriesAsync();
        suppliers = await ProductService.GetSuppliersAsync();
    }

    private void InitializeFilters()
    {
        // 準備產品分類選項
        var categoryOptions = productCategories.Select(pc => new SelectOption
        {
            Text = pc.CategoryName,
            Value = pc.Id.ToString()
        }).ToList();

        // 準備供應商選項
        var supplierOptions = suppliers.Select(s => new SelectOption
        {
            Text = s.CompanyName,
            Value = s.Id.ToString()
        }).ToList();

        // 準備啟用狀態選項
        var activeStatusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = "true" },
            new() { Text = "停用", Value = "false" }
        };

        // 準備實體狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
            new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
        };        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("ProductCode", "產品代碼", "輸入產品代碼搜尋")
            .AddText("ProductName", "產品名稱", "輸入產品名稱搜尋")
            .AddSelect("ProductCategoryId", "產品分類", categoryOptions, isAdvanced: true)
            .AddSelect("PrimarySupplierId", "主要供應商", supplierOptions, isAdvanced: true)
            .AddSelect("IsActive", "啟用狀態", activeStatusOptions, isAdvanced: true)
            .AddSelect("Status", "實體狀態", statusOptions, isAdvanced: true)
            .AddText("Unit", "單位", "輸入單位搜尋", isAdvanced: true)
            .Build();
    }

    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("產品代碼", nameof(Product.ProductCode)),
            TableColumnDefinition.Text("產品名稱", nameof(Product.ProductName)),
            TableColumnDefinition.Text("產品分類", "ProductCategory.CategoryName"),
            TableColumnDefinition.Text("單位", "Unit.UnitName"),
            TableColumnDefinition.Number("單價", nameof(Product.UnitPrice), "N2"),
            TableColumnDefinition.Number("庫存", nameof(Product.CurrentStock), "N0"),
            TableColumnDefinition.Status("啟用", nameof(Product.IsActive), new Dictionary<object, string>
            {
                { true, "bg-success" },
                { false, "bg-secondary" }
            }),
            TableColumnDefinition.Status("狀態", nameof(Product.Status), new Dictionary<object, string>
            {
                { EntityStatus.Active, "bg-success" },
                { EntityStatus.Inactive, "bg-secondary" }
            }),
            TableColumnDefinition.Date("建立日期", nameof(Product.CreatedAt), "yyyy/MM/dd")
        };
    }

    private async Task LoadProductsAsync()
    {
        try
        {
            allProducts = await ProductService.GetAllAsync();
            await ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入產品資料失敗：", ex.Message);
            products = new List<Product>();
            pagedProducts = new List<Product>();
        }
    }

    private async Task ApplyFilters()
    {
        var filteredProducts = allProducts.AsQueryable();

        // 產品代碼篩選
        var productCodeFilter = searchModel.GetFilterValue("ProductCode")?.ToString();
        if (!string.IsNullOrWhiteSpace(productCodeFilter))
        {
            filteredProducts = filteredProducts.Where(p => 
                p.ProductCode.Contains(productCodeFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 產品名稱篩選
        var productNameFilter = searchModel.GetFilterValue("ProductName")?.ToString();
        if (!string.IsNullOrWhiteSpace(productNameFilter))
        {
            filteredProducts = filteredProducts.Where(p => 
                p.ProductName.Contains(productNameFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 產品分類篩選
        var categoryIdFilter = searchModel.GetFilterValue("ProductCategoryId")?.ToString();
        if (!string.IsNullOrWhiteSpace(categoryIdFilter) && int.TryParse(categoryIdFilter, out var categoryId))
        {
            filteredProducts = filteredProducts.Where(p => p.ProductCategoryId == categoryId);
        }

        // 主要供應商篩選
        var supplierIdFilter = searchModel.GetFilterValue("PrimarySupplierId")?.ToString();
        if (!string.IsNullOrWhiteSpace(supplierIdFilter) && int.TryParse(supplierIdFilter, out var supplierId))
        {
            filteredProducts = filteredProducts.Where(p => p.PrimarySupplierId == supplierId);
        }

        // 啟用狀態篩選
        var isActiveFilter = searchModel.GetFilterValue("IsActive")?.ToString();
        if (!string.IsNullOrWhiteSpace(isActiveFilter) && bool.TryParse(isActiveFilter, out var isActive))
        {
            filteredProducts = filteredProducts.Where(p => p.IsActive == isActive);
        }

        // 實體狀態篩選
        var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
        if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
        {
            filteredProducts = filteredProducts.Where(p => p.Status == status);
        }        // 單位篩選
        var unitFilter = searchModel.GetFilterValue("Unit")?.ToString();
        if (!string.IsNullOrWhiteSpace(unitFilter))
        {
            filteredProducts = filteredProducts.Where(p => 
                p.Unit != null && p.Unit.UnitName != null && 
                p.Unit.UnitName.Contains(unitFilter, StringComparison.OrdinalIgnoreCase));
        }

        products = filteredProducts.OrderBy(p => p.ProductCode).ToList();
        totalItems = products.Count;
        
        // 重置分頁到第一頁（如果是搜尋操作）
        currentPage = 1;
        
        // 應用分頁
        ApplyPagination();
        
        await Task.CompletedTask;
    }

    private void ApplyPagination()
    {
        // 確保當前頁面有效
        var maxPage = totalItems > 0 ? (int)Math.Ceiling((double)totalItems / pageSize) : 1;
        if (currentPage > maxPage)
        {
            currentPage = Math.Max(1, maxPage);
        }
        
        // 計算分頁資料
        pagedProducts = products
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task HandlePageChanged(int newPage)
    {
        currentPage = newPage;
        ApplyPagination();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandlePageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1; // 重置到第一頁
        ApplyPagination();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleSearch(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        await ApplyFilters();
        StateHasChanged();
    }

    private async Task HandleFilterChanged(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        // 自動搜尋功能已啟用，這裡不需要立即執行搜尋
        await Task.CompletedTask;
    }

    private async Task HandleRowClick(Product product)
    {
        Navigation.NavigateTo($"/products/detail/{product.Id}");
        await Task.CompletedTask;
    }

    private async Task RefreshData()
    {
        await LoadProductsAsync();
        StateHasChanged();
    }

    private async Task ShowCreateProduct()
    {
        Navigation.NavigateTo("/products/edit");
        await Task.CompletedTask;
    }

    private async Task EditProduct(Product product)
    {
        Navigation.NavigateTo($"/products/edit/{product.Id}");
        await Task.CompletedTask;
    }

    private async Task DeleteProduct(Product product)
    {
        // TODO: 實作刪除產品功能
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"確定要刪除產品「{product.ProductName}」嗎？");
        
        if (confirmed)
        {
            try
            {
                var result = await ProductService.DeleteAsync(product.Id);
                if (result.IsSuccess)
                {
                    await RefreshData();
                    await JSRuntime.InvokeVoidAsync("alert", "產品刪除成功");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除時發生錯誤：{ex.Message}");
            }
        }
    }

    private async Task ViewProduct(Product product)
    {
        Navigation.NavigateTo($"/products/detail/{product.Id}");
        await Task.CompletedTask;
    }

    // 表格操作範本
    private RenderFragment<Product> ActionsTemplate => product => 
        @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary" @onclick="() => ViewProduct(product)" title="檢視">
                <i class="bi bi-eye"></i>
            </button>
            <button class="btn btn-outline-warning" @onclick="() => EditProduct(product)" title="編輯">
                <i class="bi bi-pencil"></i>
            </button>
            <button class="btn btn-outline-danger" @onclick="() => DeleteProduct(product)" title="刪除">
                <i class="bi bi-trash"></i>
            </button>
        </div>;
}
