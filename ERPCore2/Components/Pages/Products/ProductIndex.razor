@page "/products"
@inject IProductService ProductService
@inject ISizeService SizeService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Product" 
                          TService="IProductService"
                          Service="@ProductService"
                          EntityBasePath="/products"
                          PageTitle="產品維護"                          
                          PageSubtitle="管理所有產品資料與庫存資訊"
                          EntityName="產品"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadProductsAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplyProductFilters"
                          GetEntityDisplayName="@(product => product.ProductName)"
                          RequiredPermission="Product.Read"
                          @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Product, IProductService> indexComponent = default!;
    
    // 選項清單
    private List<ProductCategory> productCategories = new();
    private List<Supplier> suppliers = new();
    private List<Unit> units = new();
    private List<Size> sizes = new();
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnInitialized), 
                GetType(),
                additionalData: "ProductIndex頁面初始化");
        }
    }    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("產品管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeBreadcrumbs), 
                GetType(),
                additionalData: "ProductIndex麵包屑初始化");
            
            // 設定預設值以防頁面無法正常運作
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 重新初始化篩選器以載入下拉選單選項
            await InitializeFiltersAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadBasicDataAsync), 
                GetType(),
                additionalData: "ProductIndex基礎資料載入");
        }
    }

    // 載入產品資料
    private async Task<List<Product>> LoadProductsAsync()
    {
        try
        {
            return await ProductService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadProductsAsync), 
                GetType(),
                additionalData: "ProductIndex產品資料載入");
            
            StateHasChanged();
            return new List<Product>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備啟用狀態選項
            var activeStatusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = "true" },
                new() { Text = "停用", Value = "false" }
            };

            // 準備實體狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 建立基本篩選定義（不包含下拉選單選項，這些將在 InitializeFiltersAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("ProductCode", "產品代碼", "輸入產品代碼搜尋")
                .AddText("ProductName", "產品名稱", "輸入產品名稱搜尋")
                .AddSelect("SizeId", "尺寸", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("ProductCategoryId", "產品分類", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("PrimarySupplierId", "主要供應商", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("IsActive", "啟用狀態", activeStatusOptions)
                .AddSelect("Status", "實體狀態", statusOptions)
                .AddSelect("UnitId", "單位", new List<SelectOption>()) // 空的選項，稍後載入
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeFilters), 
                GetType(),
                additionalData: "ProductIndex篩選器初始化");
            
            // 設定預設值以防頁面無法正常運作
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("產品代碼", nameof(Product.ProductCode)),
                TableColumnDefinition.Text("產品名稱", nameof(Product.ProductName)),
                TableColumnDefinition.Text("尺寸", "Size.SizeName"),
                TableColumnDefinition.Text("產品分類", "ProductCategory.CategoryName"),
                TableColumnDefinition.Text("單位", "Unit.UnitName"),
                TableColumnDefinition.Number("單價", nameof(Product.UnitPrice), "N2"),
                TableColumnDefinition.Status("啟用", nameof(Product.IsActive), new Dictionary<object, string>
                {
                    { true, "bg-success" },
                    { false, "bg-secondary" }
                }),
                TableColumnDefinition.Status("狀態", nameof(Product.Status), new Dictionary<object, string>
                {
                    { EntityStatus.Active, "bg-success" },
                    { EntityStatus.Inactive, "bg-secondary" }
                }),
                TableColumnDefinition.Date("建立日期", nameof(Product.CreatedAt), "yyyy/MM/dd")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(InitializeTableColumns), 
                GetType(),
                additionalData: "ProductIndex表格欄位初始化");
            
            // 設定預設值以防頁面無法正常運作
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }    // 自定義篩選邏輯
    private IQueryable<Product> ApplyProductFilters(SearchFilterModel searchModel, IQueryable<Product> query)
    {
        try
        {
            // 產品代碼篩選
            var productCodeFilter = searchModel.GetFilterValue("ProductCode")?.ToString();
            if (!string.IsNullOrWhiteSpace(productCodeFilter))
            {
                query = query.Where(p => 
                    p.ProductCode.Contains(productCodeFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 產品名稱篩選
            var productNameFilter = searchModel.GetFilterValue("ProductName")?.ToString();
            if (!string.IsNullOrWhiteSpace(productNameFilter))
            {
                query = query.Where(p => 
                    p.ProductName.Contains(productNameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 尺寸篩選
            var sizeIdFilter = searchModel.GetFilterValue("SizeId")?.ToString();
            if (!string.IsNullOrWhiteSpace(sizeIdFilter) && int.TryParse(sizeIdFilter, out var sizeId))
            {
                query = query.Where(p => p.SizeId == sizeId);
            }

            // 產品分類篩選
            var categoryIdFilter = searchModel.GetFilterValue("ProductCategoryId")?.ToString();
            if (!string.IsNullOrWhiteSpace(categoryIdFilter) && int.TryParse(categoryIdFilter, out var categoryId))
            {
                query = query.Where(p => p.ProductCategoryId == categoryId);
            }

            // 主要供應商篩選
            var supplierIdFilter = searchModel.GetFilterValue("PrimarySupplierId")?.ToString();
            if (!string.IsNullOrWhiteSpace(supplierIdFilter) && int.TryParse(supplierIdFilter, out var supplierId))
            {
                query = query.Where(p => p.PrimarySupplierId == supplierId);
            }

            // 啟用狀態篩選
            var isActiveFilter = searchModel.GetFilterValue("IsActive")?.ToString();
            if (!string.IsNullOrWhiteSpace(isActiveFilter) && bool.TryParse(isActiveFilter, out var isActive))
            {
                query = query.Where(p => p.IsActive == isActive);
            }

            // 實體狀態篩選
            var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
            {
                query = query.Where(p => p.Status == status);
            }

            // 單位篩選
            var unitIdFilter = searchModel.GetFilterValue("UnitId")?.ToString();
            if (!string.IsNullOrWhiteSpace(unitIdFilter) && int.TryParse(unitIdFilter, out var unitId))
            {
                query = query.Where(p => p.UnitId == unitId);        
            }        
            return query.OrderBy(p => p.ProductCode);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(ApplyProductFilters), 
                GetType(),
                additionalData: "ProductIndex篩選器套用");
            
            // 發生錯誤時回傳原始查詢
            return query;
        }
    }

    private async Task InitializeFiltersAsync()
    {
        try
        {
            // 載入產品分類選項
            productCategories = await ProductService.GetProductCategoriesAsync();
            var categoryOptions = productCategories.Select(pc => new SelectOption
            {
                Text = pc.CategoryName,
                Value = pc.Id.ToString()
            }).ToList();

            // 載入供應商選項
            suppliers = await ProductService.GetSuppliersAsync();
            var supplierOptions = suppliers.Select(s => new SelectOption
            {
                Text = s.CompanyName,
                Value = s.Id.ToString()
            }).ToList();

            // 載入單位選項
            units = await ProductService.GetUnitsAsync();
            var unitOptions = units.Select(u => new SelectOption
            {
                Text = u.UnitName,
                Value = u.Id.ToString()
            }).ToList();

            // 載入尺寸選項
            sizes = await SizeService.GetActiveSizesAsync();
            var sizeOptions = sizes.Select(s => new SelectOption
            {
                Text = s.SizeName,
                Value = s.Id.ToString()
            }).ToList();

            // 準備啟用狀態選項
            var activeStatusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = "true" },
                new() { Text = "停用", Value = "false" }
            };

            // 準備實體狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("ProductCode", "產品代碼", "輸入產品代碼搜尋")
                .AddText("ProductName", "產品名稱", "輸入產品名稱搜尋")
                .AddSelect("SizeId", "尺寸", sizeOptions)
                .AddSelect("ProductCategoryId", "產品分類", categoryOptions)
                .AddSelect("PrimarySupplierId", "主要供應商", supplierOptions)
                .AddSelect("IsActive", "啟用狀態", activeStatusOptions)
                .AddSelect("Status", "實體狀態", statusOptions)
                .AddSelect("UnitId", "單位", unitOptions)
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，刷新組件以更新篩選器
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFiltersAsync), GetType(),
                additionalData: new { PageName = "ProductIndex", Action = "InitializeFiltersAsync" });
        }
    }
}
