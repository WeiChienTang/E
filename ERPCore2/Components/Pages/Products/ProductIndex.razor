@page "/products"
@using ERPCore2.Components.Shared
@inject IProductService ProductService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>產品管理</PageTitle>

<GenericIndexPageComponent TEntity="Product" 
                          TService="IProductService"
                          Service="@ProductService"
                          EntityBasePath="/products"
                          PageTitle="產品管理"
                          PageSubtitle="管理所有產品資料與庫存資訊"
                          PageIcon="box-fill"
                          AddButtonText="新增產品"
                          AddButtonIcon="bi bi-plus-circle"
                          AddButtonTitle="新增產品資料"
                          SearchSectionTitle="產品搜尋與管理"
                          EmptyMessage="沒有找到符合條件的產品資料"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadProductsAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplyProductFilters"
                          ActionsTemplate="@ActionsTemplate"
                          AutoSearch="true"
                          ShowSearchButton="true"
                          ShowAdvancedToggle="true"
                          SearchDelayMs="500"
                          @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Product, IProductService> indexComponent = default!;
    
    // 選項清單
    private List<ProductCategory> productCategories = new();
    private List<Supplier> suppliers = new();
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeFilters();
        InitializeTableColumns();
    }    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("產品管理")
        };
    }

    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            productCategories = await ProductService.GetProductCategoriesAsync();
            suppliers = await ProductService.GetSuppliersAsync();
            // 重新初始化篩選器（因為需要選項資料）
            InitializeFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入基礎資料失敗：", ex.Message);
            productCategories = new List<ProductCategory>();
            suppliers = new List<Supplier>();
        }
    }

    // 載入產品資料
    private async Task<List<Product>> LoadProductsAsync()
    {
        try
        {
            return await ProductService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入產品資料失敗：", ex.Message);
            return new List<Product>();
        }
    }

    private void InitializeFilters()
    {
        // 準備產品分類選項
        var categoryOptions = productCategories.Select(pc => new SelectOption
        {
            Text = pc.CategoryName,
            Value = pc.Id.ToString()
        }).ToList();

        // 準備供應商選項
        var supplierOptions = suppliers.Select(s => new SelectOption
        {
            Text = s.CompanyName,
            Value = s.Id.ToString()
        }).ToList();

        // 準備啟用狀態選項
        var activeStatusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = "true" },
            new() { Text = "停用", Value = "false" }
        };

        // 準備實體狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
            new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
        };        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("ProductCode", "產品代碼", "輸入產品代碼搜尋")
            .AddText("ProductName", "產品名稱", "輸入產品名稱搜尋")
            .AddSelect("ProductCategoryId", "產品分類", categoryOptions, isAdvanced: true)
            .AddSelect("PrimarySupplierId", "主要供應商", supplierOptions, isAdvanced: true)
            .AddSelect("IsActive", "啟用狀態", activeStatusOptions, isAdvanced: true)
            .AddSelect("Status", "實體狀態", statusOptions, isAdvanced: true)
            .AddText("Unit", "單位", "輸入單位搜尋", isAdvanced: true)
            .Build();
    }

    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("產品代碼", nameof(Product.ProductCode)),
            TableColumnDefinition.Text("產品名稱", nameof(Product.ProductName)),
            TableColumnDefinition.Text("產品分類", "ProductCategory.CategoryName"),
            TableColumnDefinition.Text("單位", "Unit.UnitName"),
            TableColumnDefinition.Number("單價", nameof(Product.UnitPrice), "N2"),
            TableColumnDefinition.Number("庫存", nameof(Product.CurrentStock), "N0"),
            TableColumnDefinition.Status("啟用", nameof(Product.IsActive), new Dictionary<object, string>
            {
                { true, "bg-success" },
                { false, "bg-secondary" }
            }),
            TableColumnDefinition.Status("狀態", nameof(Product.Status), new Dictionary<object, string>
            {
                { EntityStatus.Active, "bg-success" },
                { EntityStatus.Inactive, "bg-secondary" }
            }),
            TableColumnDefinition.Date("建立日期", nameof(Product.CreatedAt), "yyyy/MM/dd")
        };
    }    // 自定義篩選邏輯
    private IQueryable<Product> ApplyProductFilters(SearchFilterModel searchModel, IQueryable<Product> query)
    {
        // 產品代碼篩選
        var productCodeFilter = searchModel.GetFilterValue("ProductCode")?.ToString();
        if (!string.IsNullOrWhiteSpace(productCodeFilter))
        {
            query = query.Where(p => 
                p.ProductCode.Contains(productCodeFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 產品名稱篩選
        var productNameFilter = searchModel.GetFilterValue("ProductName")?.ToString();
        if (!string.IsNullOrWhiteSpace(productNameFilter))
        {
            query = query.Where(p => 
                p.ProductName.Contains(productNameFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 產品分類篩選
        var categoryIdFilter = searchModel.GetFilterValue("ProductCategoryId")?.ToString();
        if (!string.IsNullOrWhiteSpace(categoryIdFilter) && int.TryParse(categoryIdFilter, out var categoryId))
        {
            query = query.Where(p => p.ProductCategoryId == categoryId);
        }

        // 主要供應商篩選
        var supplierIdFilter = searchModel.GetFilterValue("PrimarySupplierId")?.ToString();
        if (!string.IsNullOrWhiteSpace(supplierIdFilter) && int.TryParse(supplierIdFilter, out var supplierId))
        {
            query = query.Where(p => p.PrimarySupplierId == supplierId);
        }

        // 啟用狀態篩選
        var isActiveFilter = searchModel.GetFilterValue("IsActive")?.ToString();
        if (!string.IsNullOrWhiteSpace(isActiveFilter) && bool.TryParse(isActiveFilter, out var isActive))
        {
            query = query.Where(p => p.IsActive == isActive);
        }

        // 實體狀態篩選
        var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
        if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
        {
            query = query.Where(p => p.Status == status);
        }

        // 單位篩選
        var unitFilter = searchModel.GetFilterValue("Unit")?.ToString();
        if (!string.IsNullOrWhiteSpace(unitFilter))
        {
            query = query.Where(p => 
                p.Unit != null && p.Unit.UnitName != null && 
                p.Unit.UnitName.Contains(unitFilter, StringComparison.OrdinalIgnoreCase));        }

        return query.OrderBy(p => p.ProductCode);
    }

    // 刪除操作方法
    private async Task DeleteProduct(Product product)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"確定要刪除產品「{product.ProductName}」嗎？");
        
        if (confirmed)
        {
            try
            {
                var result = await ProductService.DeleteAsync(product.Id);
                if (result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "產品刪除成功");
                    // 觸發基底組件重新載入
                    await indexComponent.Refresh();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除時發生錯誤：{ex.Message}");
            }
        }
    }

    // 表格操作範本
    private RenderFragment<Product> ActionsTemplate => product => 
        @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary" @onclick="() => indexComponent.NavigateToDetail(product)" title="檢視">
                <i class="bi bi-eye"></i>
            </button>
            <button class="btn btn-outline-warning" @onclick="() => indexComponent.NavigateToEdit(product)" title="編輯">
                <i class="bi bi-pencil"></i>
            </button>
            <button class="btn btn-outline-danger" @onclick="() => DeleteProduct(product)" title="刪除">
                <i class="bi bi-trash"></i>
            </button>
        </div>;
}
