@page "/products"
@inject IProductService ProductService
@inject ISizeService SizeService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@rendermode InteractiveServer
@inject INotificationService NotificationService

<GenericIndexPageComponent TEntity="Product" 
                          TService="IProductService"
                          Service="@ProductService"
                          EntityBasePath="/products"
                          PageTitle="產品維護"                          
                          PageSubtitle="管理所有產品資料與庫存資訊"
                          EntityName="產品"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadProductsAsync"
                          FilterApplier="@ApplyProductFilters"
                          GetEntityDisplayName="@(product => product.Name)"
                          RequiredPermission="Product.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 使用 ProductEditModalComponent 處理新增/編輯 *@
<ProductEditModalComponent IsVisible="@showEditModal"
                          IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                          ProductId="@editingProductId"
                          OnProductSaved="@modalHandler.OnEntitySavedAsync"
                          OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Product, IProductService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingProductId = null;
    
    // Modal 處理器
    private ModalHandler<Product, GenericIndexPageComponent<Product, IProductService>> modalHandler = default!;
    
    // 選項清單
    private List<ProductCategory> productCategories = new();
    private List<Supplier> suppliers = new();
    private List<Unit> units = new();
    private List<Size> sizes = new();
    private List<Warehouse> warehouses = new();
    private List<WarehouseLocation> warehouseLocations = new();
    
    // 欄位配置
    private ProductFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Product, GenericIndexPageComponent<Product, IProductService>>(
                id => editingProductId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入相關資料（即使某些失敗也要繼續）
            await LoadProductCategoriesAsync();
            await LoadSuppliersAsync();
            await LoadUnitsAsync();
            await LoadSizesAsync();
            await LoadWarehousesAsync();
            await LoadWarehouseLocationsAsync();
            
            // 建立欄位配置（確保即使載入失敗也能創建配置）
            try
            {
                fieldConfiguration = new ProductFieldConfiguration(productCategories, suppliers, units, sizes, warehouses, warehouseLocations, NotificationService);
                
                // 使用欄位配置建立篩選器和表格欄位
                filterDefinitions = fieldConfiguration.BuildFilters();
                columnDefinitions = fieldConfiguration.BuildColumns();
            }
            catch (Exception configEx)
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(configEx, $"{nameof(OnInitializedAsync)}_FieldConfiguration", GetType(), additionalData: "欄位配置初始化失敗");
                await NotificationService.ShowErrorAsync("欄位配置初始化失敗，使用預設配置");
                
                // 設定安全的預設配置
                filterDefinitions = new List<SearchFilterDefinition>();
                columnDefinitions = new List<TableColumnDefinition>();
                
                // 創建一個最小的欄位配置以避免 null 引用
                fieldConfiguration = new ProductFieldConfiguration(
                    new List<ProductCategory>(), 
                    new List<Supplier>(), 
                    new List<Unit>(), 
                    new List<Size>(), 
                    new List<Warehouse>(),
                    new List<WarehouseLocation>(),
                    NotificationService);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化產品頁面失敗");
            await NotificationService.ShowErrorAsync("初始化產品頁面失敗");
            
            // 確保關鍵變數不會是 null
            filterDefinitions ??= new List<SearchFilterDefinition>();
            columnDefinitions ??= new List<TableColumnDefinition>();
            breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }    
    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("產品管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入產品資料
    private async Task<List<Product>> LoadProductsAsync()
    {
        try
        {
            return await ProductService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadProductsAsync), GetType(), additionalData: "載入產品資料失敗");
            await NotificationService.ShowErrorAsync("載入產品資料失敗");
            // 設定安全的預設值
            return new List<Product>();
        }
    }

    // 載入產品分類資料
    private async Task LoadProductCategoriesAsync()
    {
        try
        {
            productCategories = await ProductService.GetProductCategoriesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadProductCategoriesAsync), GetType(), additionalData: "載入產品分類資料失敗");
            await NotificationService.ShowErrorAsync("載入產品分類資料失敗");
            // 設定安全的預設值
            productCategories = new List<ProductCategory>();
        }
    }

    // 載入供應商資料
    private async Task LoadSuppliersAsync()
    {
        try
        {
            suppliers = await ProductService.GetSuppliersAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSuppliersAsync), GetType(), additionalData: "載入供應商資料失敗");
            await NotificationService.ShowErrorAsync("載入供應商資料失敗");
            // 設定安全的預設值
            suppliers = new List<Supplier>();
        }
    }

    // 載入單位資料
    private async Task LoadUnitsAsync()
    {
        try
        {
            units = await ProductService.GetUnitsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadUnitsAsync), GetType(), additionalData: "載入單位資料失敗");
            await NotificationService.ShowErrorAsync("載入單位資料失敗");
            // 設定安全的預設值
            units = new List<Unit>();
        }
    }

    // 載入尺寸資料
    private async Task LoadSizesAsync()
    {
        try
        {
            sizes = await SizeService.GetActiveSizesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSizesAsync), GetType(), additionalData: "載入尺寸資料失敗");
            await NotificationService.ShowErrorAsync("載入尺寸資料失敗");
            // 設定安全的預設值
            sizes = new List<Size>();
        }
    }

    // 載入倉庫資料
    private async Task LoadWarehousesAsync()
    {
        try
        {
            warehouses = await WarehouseService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadWarehousesAsync), GetType(), additionalData: "載入倉庫資料失敗");
            await NotificationService.ShowErrorAsync("載入倉庫資料失敗");
            // 設定安全的預設值
            warehouses = new List<Warehouse>();
        }
    }

    // 載入倉庫位置資料
    private async Task LoadWarehouseLocationsAsync()
    {
        try
        {
            warehouseLocations = await WarehouseLocationService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadWarehouseLocationsAsync), GetType(), additionalData: "載入倉庫位置資料失敗");
            await NotificationService.ShowErrorAsync("載入倉庫位置資料失敗");
            // 設定安全的預設值
            warehouseLocations = new List<WarehouseLocation>();
        }
    }    
    private IQueryable<Product> ApplyProductFilters(SearchFilterModel searchModel, IQueryable<Product> query)
    {
        // 確保 fieldConfiguration 已初始化
        if (fieldConfiguration == null)
        {
            // 如果配置未初始化，回傳基本排序的查詢
            return query.OrderBy(p => p.Name);
        }

        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyProductFilters), GetType());
    }
}
