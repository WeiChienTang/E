@page "/products/detail/{productId:int}"
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Badges
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Components.Shared.Headers
@inject IProductService ProductService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject INotificationService NotificationService
@inject IErrorLogService ErrorLogService
@rendermode InteractiveServer

<PageTitle>商品詳細資料</PageTitle>

<GenericDetailPageComponent TEntity="Product" 
                           TService="IProductService"
                           EntityId="@ProductId"
                           Entity="@product"
                           Service="@ProductService"
                           EntityName="商品"
                           EntityNamePlural="商品"
                           IndexRoute="/products"
                           EditRoute="/products/edit"
                           LoadingText="載入商品資料中..."
                           BreadcrumbItems="@breadcrumbItems"
                           DataLoader="@LoadProductDataAsync"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           EntityTitleSelector="@(p => p.ProductName)"
                           EntitySubtitleSelector="@(p => $"商品代碼：{p.ProductCode}")"
                           EntityDisplayNameSelector="@(p => p.ProductName)"
                           OnDataLoaded="@OnProductDataLoaded"
                           UseTabLayout="true"
                           TabSections="@GetTabSections()">
</GenericDetailPageComponent>
@code {
    [Parameter] public int ProductId { get; set; }

    private Product? product;
    private List<ProductSupplier> productSuppliers = new();
    private bool _isLoading = false; // 防止重複載入

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("商品管理", "/products"),
        new("商品詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Product?> LoadProductDataAsync()
    {
        // 防止重複載入
        if (_isLoading)
        {
            Console.WriteLine("[ProductDetail] 載入中，跳過重複調用");
            return product;
        }
        
        try
        {
            _isLoading = true;
            if (ProductId <= 0) return null;
            
            var result = await ProductService.GetByIdAsync(ProductId);
            product = result; // 保持本地變數同步
            
            return result;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[ProductDetail] 載入商品資料失敗：{ex.Message}");
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            if (product?.Id > 0)
            {
                // 載入商品供應商關聯資料
                productSuppliers = await ProductService.GetProductSuppliersAsync(product.Id);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[ProductDetail] 載入額外資料失敗：{ex.Message}");
            // 不拋出異常，讓頁面繼續顯示
        }
    }

    private Task OnProductDataLoaded()
    {
        // 資料載入完成後的處理
        StateHasChanged();
        return Task.CompletedTask;
    }

    // 輔助方法
    private string FormatPrice(decimal? price)
    {
        return price.HasValue ? $"NT$ {price.Value:N2}" : "未設定";
    }

    private string FormatPercentage(decimal? percentage)
    {
        return percentage.HasValue ? $"{percentage.Value:P2}" : "無法計算";
    }

    private decimal? CalculateMarginRate(decimal unitPrice, decimal costPrice)
    {
        if (unitPrice <= 0) return null;
        return (unitPrice - costPrice) / unitPrice;
    }

    private string GetStockStatus()
    {
        if (product == null) return "未知";

        if (product.MinStockLevel.HasValue && product.CurrentStock <= product.MinStockLevel.Value)
        {
            return "庫存不足";
        }

        if (product.MaxStockLevel.HasValue && product.CurrentStock >= product.MaxStockLevel.Value)
        {
            return "庫存過量";
        }

        return "正常";
    }

    private string GetStockStatusBadgeClass(string status)
    {
        return status switch
        {
            "庫存不足" => "bg-danger",
            "庫存過量" => "bg-warning",
            "正常" => "bg-success",
            _ => "bg-secondary"
        };
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Product, IProductService>.TabSection> GetTabSections()
    {
        return new List<GenericDetailPageComponent<Product, IProductService>.TabSection>
        {            new GenericDetailPageComponent<Product, IProductService>.TabSection
            {
                Id = "basic",
                Title = "基本資料",
                Content = @<div>
                    <BasicInfoDisplayComponent 
                        Title="商品基本資訊"
                        IconClass="fas fa-box"
                        IconColor="text-primary"
                        Fields="@GetProductBasicFields()" />
                </div>
            },
            
            new GenericDetailPageComponent<Product, IProductService>.TabSection
            {
                Id = "pricing",
                Title = "價格資訊",
                Content = @<div class="row">
                    <DetailFieldComponent Label="單價" Value="@FormatPrice(product?.UnitPrice)" />
                    <DetailFieldComponent Label="成本價" Value="@FormatPrice(product?.CostPrice)" />
                    @if (product?.UnitPrice.HasValue == true && product?.CostPrice.HasValue == true)
                    {
                        <DetailFieldComponent Label="毛利" Value="@FormatPrice(product.UnitPrice!.Value - product.CostPrice!.Value)" />
                        <DetailFieldComponent Label="毛利率" Value="@FormatPercentage(CalculateMarginRate(product.UnitPrice!.Value, product.CostPrice!.Value))" />
                    }
                </div>
            },
            
            new GenericDetailPageComponent<Product, IProductService>.TabSection
            {
                Id = "inventory",
                Title = "庫存資訊",
                Content = @<div class="row">
                    <DetailFieldComponent Label="現有庫存" Value="@product?.CurrentStock.ToString()" IsBold="true" />
                    <DetailFieldComponent Label="庫存狀態">
                        @if (product != null)
                        {
                            var stockStatus = GetStockStatus();
                            <span class="badge @GetStockStatusBadgeClass(stockStatus)">
                                @stockStatus
                            </span>
                        }
                    </DetailFieldComponent>
                    <DetailFieldComponent Label="最低庫存量" Value="@(product?.MinStockLevel?.ToString() ?? "未設定")" />
                    <DetailFieldComponent Label="最高庫存量" Value="@(product?.MaxStockLevel?.ToString() ?? "未設定")" />
                </div>
            },
            
            new GenericDetailPageComponent<Product, IProductService>.TabSection
            {
                Id = "suppliers",
                Title = "供應商資訊",
                Content = @<div>
                    @if (productSuppliers.Any())
                    {
                        <div class="mt-2">
                            @foreach (var productSupplier in productSuppliers.OrderByDescending(ps => ps.IsPrimarySupplier))
                            {
                                <div class="card mb-2">
                                    <div class="card-body p-3">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <h6 class="card-title mb-1">
                                                    @productSupplier.Supplier?.CompanyName
                                                    @if (productSupplier.IsPrimarySupplier || productSupplier.SupplierId == product?.PrimarySupplierId)
                                                    {
                                                        <span class="badge bg-primary ms-1">主要</span>
                                                    }
                                                </h6>
                                                @if (!string.IsNullOrEmpty(productSupplier.SupplierProductCode))
                                                {
                                                    <small class="text-muted">供應商代碼：@productSupplier.SupplierProductCode</small>
                                                }
                                            </div>
                                        </div>
                                        <div class="row mt-2">
                                            @if (productSupplier.SupplierPrice.HasValue)
                                            {
                                                <div class="col-6 col-md-3">
                                                    <small class="text-muted">報價</small><br>
                                                    <strong>NT$ @productSupplier.SupplierPrice.Value.ToString("N2")</strong>
                                                </div>
                                            }
                                            @if (productSupplier.LeadTime.HasValue)
                                            {
                                                <div class="col-6 col-md-3">
                                                    <small class="text-muted">交期</small><br>
                                                    <span>@productSupplier.LeadTime 天</span>
                                                </div>
                                            }
                                            @if (productSupplier.MinOrderQuantity.HasValue)
                                            {
                                                <div class="col-6 col-md-3">
                                                    <small class="text-muted">最小訂購量</small><br>
                                                    <span>@productSupplier.MinOrderQuantity</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-muted p-3 text-center">
                            <i class="fas fa-truck fa-2x mb-2 d-block"></i>
                            尚未設定供應商
                        </div>
                    }
                </div>
            },            
            new GenericDetailPageComponent<Product, IProductService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div>
                    <SystemInfoDisplayComponent 
                        CreatedAt="@(product?.CreatedAt ?? DateTime.MinValue)"
                        UpdatedAt="@product?.UpdatedAt"
                        CreatedBy="@product?.CreatedBy"
                        UpdatedBy="@product?.UpdatedBy"
                        Remarks="@product?.Remarks"
                        ShowTimeline="true"
                        ShowRemarks="true" />
                </div>
            }        };
    }

    // 取得商品基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetProductBasicFields()
    {
        return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "商品代碼",
                Value = product?.ProductCode,
                IsPrimary = true,
                ValueBold = true,
                IconClass = "fas fa-barcode",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary",
                ColSize = 6
            },
            new()
            {
                Label = "商品名稱",
                Value = product?.ProductName,
                ValueBold = true,
                IconClass = "fas fa-box",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 6
            },
            new()
            {
                Label = "商品分類",
                Value = product?.ProductCategory?.CategoryName,
                IconClass = "fas fa-tags",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning",
                ColSize = 6
            },
            new()
            {
                Label = "單位",
                Value = product?.Unit?.UnitName,
                IconClass = "fas fa-weight",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary",
                ColSize = 6
            },
            new()
            {
                Label = "狀態",
                CustomContent = @<div>
                    @if (product?.Status != null)
                    {
                        <StatusBadgeComponent Status="@product.Status" />
                    }
                </div>,
                IconClass = "fas fa-toggle-on",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success",
                ColSize = 6
            },
            new()
            {
                Label = "啟用狀態",
                CustomContent = @<div>
                    @if (product != null)
                    {
                        <span class="badge @(product.IsActive ? "bg-success" : "bg-secondary")">
                            @(product.IsActive ? "啟用" : "停用")
                        </span>
                    }
                </div>,
                IconClass = "fas fa-power-off",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 6
            },
            new()
            {
                Label = "商品描述",
                Value = product?.Description,
                Format = BasicInfoDisplayComponent.FieldFormat.MultiLine,
                IconClass = "fas fa-align-left",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 12,
                VisibilityCondition = () => !string.IsNullOrEmpty(product?.Description)
            },
            new()
            {
                Label = "規格說明",
                Value = product?.Specification,
                Format = BasicInfoDisplayComponent.FieldFormat.MultiLine,
                IconClass = "fas fa-list-alt",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary",
                ColSize = 12,
                VisibilityCondition = () => !string.IsNullOrEmpty(product?.Specification)
            },
            new()
            {
                Label = "備註",
                Value = product?.Remarks,
                Format = BasicInfoDisplayComponent.FieldFormat.MultiLine,
                IconClass = "fas fa-sticky-note",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning",
                ColSize = 12,
                VisibilityCondition = () => !string.IsNullOrEmpty(product?.Remarks)
            }
        };
    }
}