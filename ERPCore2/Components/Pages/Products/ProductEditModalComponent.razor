@* 可重用的產品編輯組件 - 可在任何頁面中嵌入 *@
@inject IProductService ProductService
@inject ISizeService SizeService
@inject IProductCategoryService ProductCategoryService
@inject IUnitService UnitService
@inject ISupplierService SupplierService
@inject INotificationService NotificationService
@inject ActionButtonHelper ActionButtonHelper

<GenericEditModalComponent TEntity="Product" 
                          TService="IProductService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@ProductId"
                          Service="@ProductService"
                          EntityName="產品"
                          EntityNamePlural="產品"
                          ModalTitle="@(ProductId.HasValue ? "編輯產品" : "新增產品")"
                          Size="GenericEditModalComponent<Product, IProductService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadProductData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(ProductId.HasValue ? "產品更新成功" : "產品新增成功")"
                          SaveFailureMessage="產品儲存失敗"
                          RequiredPermission="Product.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged" />

@* 產品分類編輯 Modal *@
<ProductCategoryEditModalComponent @ref="productCategoryEditModal"
                                  IsVisible="@productCategoryModalManager.IsModalVisible"
                                  IsVisibleChanged="@productCategoryModalManager.HandleModalVisibilityChangedAsync"
                                  ProductCategoryId="@productCategoryModalManager.SelectedEntityId"
                                  PrefilledValues="@productCategoryModalManager.PrefilledValues"
                                  OnProductCategorySaved="@OnProductCategorySavedWrapper"
                                  OnCancel="@productCategoryModalManager.HandleModalCancelAsync" />

@* 供應商編輯 Modal *@
<SupplierEditModalComponent @ref="supplierEditModal"
                           IsVisible="@supplierModalManager.IsModalVisible"
                           IsVisibleChanged="@supplierModalManager.HandleModalVisibilityChangedAsync"
                           SupplierId="@supplierModalManager.SelectedEntityId"
                           PrefilledValues="@supplierModalManager.PrefilledValues"
                           OnSupplierSaved="@OnSupplierSavedWrapper"
                           OnCancel="@supplierModalManager.HandleModalCancelAsync" />

@* 單位編輯 Modal *@
<UnitEditModalComponent @ref="unitEditModal"
                       IsVisible="@unitModalManager.IsModalVisible"
                       IsVisibleChanged="@unitModalManager.HandleModalVisibilityChangedAsync"
                       UnitId="@unitModalManager.SelectedEntityId"
                       PrefilledValues="@unitModalManager.PrefilledValues"
                       OnUnitSaved="@OnUnitSavedWrapper"
                       OnCancel="@unitModalManager.HandleModalCancelAsync" />

@* 尺寸編輯 Modal *@
<SizeEditModalComponent @ref="sizeEditModal"
                       IsVisible="@sizeModalManager.IsModalVisible"
                       IsVisibleChanged="@sizeModalManager.HandleModalVisibilityChangedAsync"
                       SizeId="@sizeModalManager.SelectedEntityId"
                       PrefilledValues="@sizeModalManager.PrefilledValues"
                       OnSizeSaved="@OnSizeSavedWrapper"
                       OnCancel="@sizeModalManager.HandleModalCancelAsync" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? ProductId { get; set; }
    [Parameter] public EventCallback<Product> OnProductSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<Product, IProductService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 原始資料集合（用於 AutoComplete）
    private List<ProductCategory> availableProductCategories = new();
    private List<Supplier> availableSuppliers = new();
    private List<Unit> availableUnits = new();
    private List<Size> availableSizes = new();
    
    // Modal 管理器
    private ProductCategoryEditModalComponent? productCategoryEditModal;
    private RelatedEntityModalManager<ProductCategory> productCategoryModalManager = default!;
    
    private SupplierEditModalComponent? supplierEditModal;
    private RelatedEntityModalManager<Supplier> supplierModalManager = default!;
    
    private UnitEditModalComponent? unitEditModal;
    private RelatedEntityModalManager<Unit> unitModalManager = default!;
    
    private SizeEditModalComponent? sizeEditModal;
    private RelatedEntityModalManager<Size> sizeModalManager = default!;
    
    // 選項清單（向下相容）
    private List<SelectOption> productCategoryOptions = new();
    private List<SelectOption> supplierOptions = new();
    private List<SelectOption> unitOptions = new();
    private List<SelectOption> sizeOptions = new();

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeProductCategoryModalManager();
            InitializeSupplierModalManager();
            InitializeUnitModalManager();
            InitializeSizeModalManager();
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化產品編輯組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
    }

    private async Task HandleSaveSuccess()
    {
        try
        {
            if (OnProductSaved.HasDelegate)
            {
                await OnProductSaved.InvokeAsync();
            }
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"儲存成功後處理失敗：{ex.Message}");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"取消操作失敗：{ex.Message}");
        }
    }

    private async Task CloseModal()
    {
        try
        {
            if (IsVisibleChanged.HasDelegate)
            {
                await IsVisibleChanged.InvokeAsync(false);
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"關閉視窗失敗：{ex.Message}");
        }
    }

    private async Task<Product?> LoadProductData()
    {
        try
        {
            if (!ProductId.HasValue)
            {
                // 新增模式
                return new Product
                {
                    Status = EntityStatus.Active
                };
            }
            
            // 編輯模式
            return await ProductService.GetByIdAsync(ProductId.Value);
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入產品資料時發生錯誤：{ex.Message}");
            return null;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入產品分類
            var productCategories = await ProductService.GetProductCategoriesAsync();
            availableProductCategories = productCategories;
            productCategoryOptions = productCategories.Select(pc => new SelectOption
            {
                Text = pc.Name,
                Value = pc.Id.ToString()
            }).ToList();

            // 載入供應商
            var suppliers = await ProductService.GetSuppliersAsync();
            availableSuppliers = suppliers;
            supplierOptions = suppliers.Select(s => new SelectOption
            {
                Text = s.CompanyName,
                Value = s.Id.ToString()
            }).ToList();

            // 載入單位
            var units = await ProductService.GetUnitsAsync();
            availableUnits = units;
            unitOptions = units.Select(u => new SelectOption
            {
                Text = u.Name,
                Value = u.Id.ToString()
            }).ToList();

            // 載入尺寸
            var sizes = await SizeService.GetActiveSizesAsync();
            availableSizes = sizes;
            sizeOptions = sizes.Select(s => new SelectOption
            {
                Text = s.Name,
                Value = s.Id.ToString()
            }).ToList();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入額外資料時發生錯誤：{ex.Message}");
        }
    }

    private async Task InitializeFormFieldsAsync()
    {
        formFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = nameof(Product.Code),
                Label = "產品代碼",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入產品代碼",
                IsRequired = true,
                MaxLength = 50,
                HelpText = "產品的唯一識別碼"
            },
            new()
            {
                PropertyName = nameof(Product.Name),
                Label = "產品名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入產品名稱",
                IsRequired = true,
                MaxLength = 100,
                HelpText = "產品的完整名稱"
            },
            new()
            {
                PropertyName = nameof(Product.ProductCategoryId),
                Label = "產品分類",
                FieldType = FormFieldType.AutoComplete,
                Placeholder = "請輸入或選擇產品分類",
                IsRequired = false,
                MinSearchLength = 0,
                HelpText = "輸入分類名稱進行搜尋，或直接選擇",
                ActionButtons = await GetProductCategoryActionButtonsAsync()
            },
            new()
            {
                PropertyName = nameof(Product.SizeId),
                Label = "尺寸",
                FieldType = FormFieldType.AutoComplete,
                Placeholder = "請輸入或選擇尺寸",
                IsRequired = false,
                MinSearchLength = 0,
                HelpText = "輸入尺寸名稱進行搜尋，或直接選擇",
                ActionButtons = await GetSizeActionButtonsAsync()
            },
            new()
            {
                PropertyName = nameof(Product.UnitId),
                Label = "單位",
                FieldType = FormFieldType.AutoComplete,
                Placeholder = "請輸入或選擇計量單位",
                IsRequired = false,
                MinSearchLength = 0,
                HelpText = "輸入單位名稱進行搜尋，或直接選擇",
                ActionButtons = await GetUnitActionButtonsAsync()
            },
            new()
            {
                PropertyName = nameof(Product.PrimarySupplierId),
                Label = "供應商",
                FieldType = FormFieldType.AutoComplete,
                Placeholder = "請輸入或選擇供應商",
                IsRequired = true,
                MinSearchLength = 0,
                HelpText = "輸入供應商名稱進行搜尋，或直接選擇",
                ActionButtons = await GetSupplierActionButtonsAsync()
            },
            new()
            {
                PropertyName = nameof(Product.Remarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入備註",
                IsRequired = false,
                MaxLength = 500,
                Rows = 2,
                HelpText = "產品的額外說明或注意事項",
                ContainerCssClass = "col-12"
            }
        };

        formSections = new Dictionary<string, string>
        {
            { nameof(Product.Code), "基本資訊" },
            { nameof(Product.Name), "基本資訊" },
            { nameof(Product.SizeId), "基本資訊" },
            { nameof(Product.ProductCategoryId), "基本資訊" },
            { nameof(Product.UnitId), "基本資訊" },
            { nameof(Product.PrimarySupplierId), "基本資訊" },
            { nameof(Product.Remarks), "額外資訊" }
        };
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(Product.ProductCategoryId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["Name"] = searchTerm
                }
            },
            {
                nameof(Product.PrimarySupplierId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["CompanyName"] = searchTerm,
                }
            },
            {
                nameof(Product.UnitId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["Name"] = searchTerm
                }
            },
            {
                nameof(Product.SizeId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["Name"] = searchTerm
                }
            }
        };
    }

    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(Product.ProductCategoryId), productCategoryModalManager },
            { nameof(Product.PrimarySupplierId), supplierModalManager },
            { nameof(Product.UnitId), unitModalManager },
            { nameof(Product.SizeId), sizeModalManager }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(Product.ProductCategoryId), availableProductCategories.Cast<object>() },
            { nameof(Product.SizeId), availableSizes.Cast<object>() },
            { nameof(Product.UnitId), availableUnits.Cast<object>() },
            { nameof(Product.PrimarySupplierId), availableSuppliers.Cast<object>() }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Product.ProductCategoryId), "Name" },
            { nameof(Product.SizeId), "Name" },
            { nameof(Product.UnitId), "Name" },
            { nameof(Product.PrimarySupplierId), "CompanyName" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Product.ProductCategoryId), "Id" },
            { nameof(Product.SizeId), "Id" },
            { nameof(Product.UnitId), "Id" },
            { nameof(Product.PrimarySupplierId), "Id" }
        };
    }

    // ===== Modal 管理器初始化方法 =====
    
    /// <summary>
    /// 初始化產品分類 Modal 管理器
    /// </summary>
    private void InitializeProductCategoryModalManager()
    {
        productCategoryModalManager = new RelatedEntityManagerBuilder<ProductCategory>(NotificationService, "產品分類")
            .WithPropertyName(nameof(Product.ProductCategoryId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(categoryId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.ProductCategoryId = categoryId;
                }
            })
            .WithCustomPostProcess(async category => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 初始化供應商 Modal 管理器
    /// </summary>
    private void InitializeSupplierModalManager()
    {
        supplierModalManager = new RelatedEntityManagerBuilder<Supplier>(NotificationService, "供應商")
            .WithPropertyName(nameof(Product.PrimarySupplierId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(supplierId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.PrimarySupplierId = supplierId;
                }
            })
            .WithCustomPostProcess(async supplier => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 初始化單位 Modal 管理器
    /// </summary>
    private void InitializeUnitModalManager()
    {
        unitModalManager = new RelatedEntityManagerBuilder<Unit>(NotificationService, "單位")
            .WithPropertyName(nameof(Product.UnitId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(unitId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.UnitId = unitId;
                }
            })
            .WithCustomPostProcess(async unit => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 初始化尺寸 Modal 管理器
    /// </summary>
    private void InitializeSizeModalManager()
    {
        sizeModalManager = new RelatedEntityManagerBuilder<Size>(NotificationService, "尺寸")
            .WithPropertyName(nameof(Product.SizeId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(sizeId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.SizeId = sizeId;
                }
            })
            .WithCustomPostProcess(async size => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    // ===== ActionButton 產生方法 =====
    
    /// <summary>
    /// 產生產品分類操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetProductCategoryActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            productCategoryModalManager, 
            nameof(Product.ProductCategoryId)
        );
    }

    /// <summary>
    /// 產生供應商操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetSupplierActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            supplierModalManager, 
            nameof(Product.PrimarySupplierId)
        );
    }

    /// <summary>
    /// 產生單位操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetUnitActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            unitModalManager, 
            nameof(Product.UnitId)
        );
    }

    /// <summary>
    /// 產生尺寸操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetSizeActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            sizeModalManager, 
            nameof(Product.SizeId)
        );
    }

    // ===== Modal 事件包裝器方法 =====
    
    /// <summary>
    /// 包裝產品分類儲存事件
    /// </summary>
    private async Task OnProductCategorySavedWrapper(ProductCategory savedCategory)
    {
        await productCategoryModalManager.HandleEntitySavedAsync(savedCategory, shouldAutoSelect: true);
    }

    /// <summary>
    /// 包裝供應商儲存事件
    /// </summary>
    private async Task OnSupplierSavedWrapper(Supplier savedSupplier)
    {
        await supplierModalManager.HandleEntitySavedAsync(savedSupplier, shouldAutoSelect: true);
    }

    /// <summary>
    /// 包裝單位儲存事件
    /// </summary>
    private async Task OnUnitSavedWrapper(Unit savedUnit)
    {
        await unitModalManager.HandleEntitySavedAsync(savedUnit, shouldAutoSelect: true);
    }

    /// <summary>
    /// 包裝尺寸儲存事件
    /// </summary>
    private async Task OnSizeSavedWrapper(Size savedSize)
    {
        await sizeModalManager.HandleEntitySavedAsync(savedSize, shouldAutoSelect: true);
    }

    /// <summary>
    /// 處理欄位值變更事件 - 使用統一 Helper
    /// </summary>
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 使用統一 Helper 處理產品分類欄位變更
            if (fieldChange.PropertyName == nameof(Product.ProductCategoryId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    productCategoryModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
            // 使用統一 Helper 處理供應商欄位變更
            else if (fieldChange.PropertyName == nameof(Product.PrimarySupplierId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    supplierModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
            // 使用統一 Helper 處理單位欄位變更
            else if (fieldChange.PropertyName == nameof(Product.UnitId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    unitModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
            // 使用統一 Helper 處理尺寸欄位變更
            else if (fieldChange.PropertyName == nameof(Product.SizeId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    sizeModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("欄位變更處理時發生錯誤");
        }
    }
}
