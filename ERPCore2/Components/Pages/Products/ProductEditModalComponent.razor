@* 可重用的產品編輯組件 - 可在任何頁面中嵌入 *@
@inject IProductService ProductService
@inject ISizeService SizeService
@inject IProductCategoryService ProductCategoryService
@inject IUnitService UnitService
@inject ISupplierService SupplierService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@inject IInventoryStockService InventoryStockService
@inject INotificationService NotificationService
@inject ActionButtonHelper ActionButtonHelper

<GenericEditModalComponent TEntity="Product" 
                          TService="IProductService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@ProductId"
                          Service="@ProductService"
                          EntityName="產品"
                          EntityNamePlural="產品"
                          ModalTitle="@(ProductId.HasValue ? "編輯產品" : "新增產品")"
                          Size="GenericEditModalComponent<Product, IProductService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadProductData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          AfterSave="@SaveSubCollectionsAsync"
                          SaveSuccessMessage="@(ProductId.HasValue ? "產品更新成功" : "產品新增成功")"
                          SaveFailureMessage="產品儲存失敗"
                          RequiredPermission="Product.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          AdditionalSections="@GetAdditionalSections()" />

@* 產品分類編輯 Modal *@
<ProductCategoryEditModalComponent @ref="productCategoryEditModal"
                                  IsVisible="@productCategoryModalManager.IsModalVisible"
                                  IsVisibleChanged="@productCategoryModalManager.HandleModalVisibilityChangedAsync"
                                  ProductCategoryId="@productCategoryModalManager.SelectedEntityId"
                                  PrefilledValues="@productCategoryModalManager.PrefilledValues"
                                  OnProductCategorySaved="@OnProductCategorySavedWrapper"
                                  OnCancel="@productCategoryModalManager.HandleModalCancelAsync" />

@* 單位編輯 Modal *@
<UnitEditModalComponent @ref="unitEditModal"
                       IsVisible="@unitModalManager.IsModalVisible"
                       IsVisibleChanged="@unitModalManager.HandleModalVisibilityChangedAsync"
                       UnitId="@unitModalManager.SelectedEntityId"
                       PrefilledValues="@unitModalManager.PrefilledValues"
                       OnUnitSaved="@OnUnitSavedWrapper"
                       OnCancel="@unitModalManager.HandleModalCancelAsync" />

@* 尺寸編輯 Modal *@
<SizeEditModalComponent @ref="sizeEditModal"
                       IsVisible="@sizeModalManager.IsModalVisible"
                       IsVisibleChanged="@sizeModalManager.HandleModalVisibilityChangedAsync"
                       SizeId="@sizeModalManager.SelectedEntityId"
                       PrefilledValues="@sizeModalManager.PrefilledValues"
                       OnSizeSaved="@OnSizeSavedWrapper"
                       OnCancel="@sizeModalManager.HandleModalCancelAsync" />

@* 倉庫編輯 Modal *@
<WarehouseEditModalComponent @ref="warehouseEditModal"
                            IsVisible="@warehouseModalManager.IsModalVisible"
                            IsVisibleChanged="@warehouseModalManager.HandleModalVisibilityChangedAsync"
                            WarehouseId="@warehouseModalManager.SelectedEntityId"
                            OnWarehouseSaved="@OnWarehouseSavedWrapper"
                            OnCancel="@warehouseModalManager.HandleModalCancelAsync" />

@* 倉庫位置編輯 Modal *@
<WarehouseLocationEditModalComponent @ref="warehouseLocationEditModal"
                                    IsVisible="@warehouseLocationModalManager.IsModalVisible"
                                    IsVisibleChanged="@warehouseLocationModalManager.HandleModalVisibilityChangedAsync"
                                    WarehouseLocationId="@warehouseLocationModalManager.SelectedEntityId"
                                    OnWarehouseLocationSaved="@OnWarehouseLocationSavedWrapper"
                                    OnCancel="@warehouseLocationModalManager.HandleModalCancelAsync" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? ProductId { get; set; }
    [Parameter] public EventCallback<Product> OnProductSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<Product, IProductService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 標誌變數，用於追蹤是否需要在實體載入後刷新欄位
    private bool _entityLoadedButFieldsNotRefreshed = false;
    private bool _hasCheckedEntityLoad = false;
    
    // 原始資料集合（用於 AutoComplete）
    private List<ProductCategory> availableProductCategories = new();
    private List<Supplier> availableSuppliers = new();
    private List<Unit> availableUnits = new();
    private List<Size> availableSizes = new();
    private List<Warehouse> availableWarehouses = new();
    private List<WarehouseLocation> availableWarehouseLocations = new();
    
    // 產品供應商集合
    private List<ProductSupplier> productSuppliers = new();
    
    // Modal 管理器
    private ProductCategoryEditModalComponent? productCategoryEditModal;
    private RelatedEntityModalManager<ProductCategory> productCategoryModalManager = default!;
    
    private UnitEditModalComponent? unitEditModal;
    private RelatedEntityModalManager<Unit> unitModalManager = default!;
    
    private SizeEditModalComponent? sizeEditModal;
    private RelatedEntityModalManager<Size> sizeModalManager = default!;
    
    private WarehouseEditModalComponent? warehouseEditModal;
    private RelatedEntityModalManager<Warehouse> warehouseModalManager = default!;
    
    private WarehouseLocationEditModalComponent? warehouseLocationEditModal;
    private RelatedEntityModalManager<WarehouseLocation> warehouseLocationModalManager = default!;
    
    // 選項清單（向下相容）
    private List<SelectOption> productCategoryOptions = new();
    private List<SelectOption> supplierOptions = new();
    private List<SelectOption> unitOptions = new();
    private List<SelectOption> sizeOptions = new();
    private List<SelectOption> warehouseOptions = new();
    private List<SelectOption> warehouseLocationOptions = new();

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeProductCategoryModalManager();
            InitializeUnitModalManager();
            InitializeSizeModalManager();
            InitializeWarehouseModalManager();
            InitializeWarehouseLocationModalManager();
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化產品編輯組件時發生錯誤");
        }
    }

    /// <summary>
    /// 載入倉庫位置 - 載入所有可用的倉庫位置
    /// </summary>
    private async Task LoadWarehouseLocationsAsync()
    {
        try
        {
            // 載入所有可用的倉庫位置
            availableWarehouseLocations = await WarehouseLocationService.GetAllAsync();

            // 更新選項清單
            warehouseLocationOptions = availableWarehouseLocations.Select(wl => new SelectOption
            {
                Text = wl.Name,
                Value = wl.Id.ToString()
            }).ToList();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫位置時發生錯誤：{ex.Message}");
            availableWarehouseLocations = new List<WarehouseLocation>();
            warehouseLocationOptions = new List<SelectOption>();
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            // 重置標誌，確保每次打開Modal時都會檢查
            _entityLoadedButFieldsNotRefreshed = false;
            _hasCheckedEntityLoad = false;
            
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
    }

    /// <summary>
    /// 在組件渲染後檢查實體是否已載入，如果是則刷新倉庫位置
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // 只在編輯模式下且實體已載入但還沒檢查過時執行
        if (IsVisible && ProductId.HasValue && !_hasCheckedEntityLoad && 
            editModalComponent?.Entity != null && editModalComponent.Entity.Id > 0)
        {
            _hasCheckedEntityLoad = true;
            await RefreshFormFieldsAfterEntityLoadAsync();
        }
    }

    /// <summary>
    /// 在實體載入後重新初始化表單欄位
    /// </summary>
    public async Task RefreshFormFieldsAfterEntityLoadAsync()
    {
        // 載入倉庫位置
        await LoadWarehouseLocationsAsync();
        
        // 重新初始化表單欄位
        await InitializeFormFieldsAsync();
        
        StateHasChanged();
    }

    private async Task HandleSaveSuccess()
    {
        try
        {
            if (OnProductSaved.HasDelegate)
            {
                await OnProductSaved.InvokeAsync();
            }
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"儲存成功後處理失敗：{ex.Message}");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"取消操作失敗：{ex.Message}");
        }
    }

    private async Task CloseModal()
    {
        try
        {
            if (IsVisibleChanged.HasDelegate)
            {
                await IsVisibleChanged.InvokeAsync(false);
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"關閉視窗失敗：{ex.Message}");
        }
    }

    private async Task<Product?> LoadProductData()
    {
        try
        {
            if (!ProductId.HasValue)
            {
                // 新增模式
                productSuppliers = new List<ProductSupplier>();
                return new Product
                {
                    Status = EntityStatus.Active,
                    MinStockLevel = 0,
                    MaxStockLevel = 0
                };
            }
            
            // 編輯模式
            var product = await ProductService.GetByIdAsync(ProductId.Value);
            if (product != null)
            {
                // 載入產品供應商資料
                productSuppliers = await ProductService.GetProductSuppliersAsync(ProductId.Value);
            }
            else
            {
                productSuppliers = new List<ProductSupplier>();
            }
            
            return product;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入產品資料時發生錯誤：{ex.Message}");
            productSuppliers = new List<ProductSupplier>();
            return null;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入產品分類
            var productCategories = await ProductService.GetProductCategoriesAsync();
            availableProductCategories = productCategories;
            productCategoryOptions = productCategories.Select(pc => new SelectOption
            {
                Text = pc.Name,
                Value = pc.Id.ToString()
            }).ToList();

            // 載入供應商
            var suppliers = await ProductService.GetSuppliersAsync();
            availableSuppliers = suppliers;
            supplierOptions = suppliers.Select(s => new SelectOption
            {
                Text = s.CompanyName,
                Value = s.Id.ToString()
            }).ToList();

            // 載入單位
            var units = await ProductService.GetUnitsAsync();
            availableUnits = units;
            unitOptions = units.Select(u => new SelectOption
            {
                Text = u.Name,
                Value = u.Id.ToString()
            }).ToList();

            // 載入尺寸
            var sizes = await SizeService.GetActiveSizesAsync();
            availableSizes = sizes;
            sizeOptions = sizes.Select(s => new SelectOption
            {
                Text = s.Name,
                Value = s.Id.ToString()
            }).ToList();

            // 載入倉庫
            var warehouses = await WarehouseService.GetActiveAsync();
            availableWarehouses = warehouses.ToList();
            warehouseOptions = availableWarehouses.Select(w => new SelectOption
            {
                Text = w.Name,
                Value = w.Id.ToString()
            }).ToList();

            // 載入倉庫位置
            await LoadWarehouseLocationsAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入額外資料時發生錯誤：{ex.Message}");
        }
    }

    private async Task InitializeFormFieldsAsync()
    {
        formFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = nameof(Product.Code),
                Label = "產品代碼",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入產品代碼",
                IsRequired = true,
                MaxLength = 50,
                HelpText = "產品的唯一識別碼"
            },
            new()
            {
                PropertyName = nameof(Product.Name),
                Label = "產品名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入產品名稱",
                IsRequired = true,
                MaxLength = 100,
                HelpText = "產品的完整名稱"
            },
            new()
            {
                PropertyName = nameof(Product.ProductCategoryId),
                Label = "產品分類",
                FieldType = FormFieldType.AutoComplete,
                Placeholder = "請輸入或選擇產品分類",
                IsRequired = false,
                MinSearchLength = 0,
                HelpText = "輸入分類名稱進行搜尋，或直接選擇",
                ActionButtons = await GetProductCategoryActionButtonsAsync()
            },
            new()
            {
                PropertyName = nameof(Product.SizeId),
                Label = "尺寸",
                FieldType = FormFieldType.AutoComplete,
                Placeholder = "請輸入或選擇尺寸",
                IsRequired = false,
                MinSearchLength = 0,
                HelpText = "輸入尺寸名稱進行搜尋，或直接選擇",
                ActionButtons = await GetSizeActionButtonsAsync()
            },
            new()
            {
                PropertyName = nameof(Product.UnitId),
                Label = "單位",
                FieldType = FormFieldType.AutoComplete,
                Placeholder = "請輸入或選擇計量單位",
                IsRequired = false,
                MinSearchLength = 0,
                HelpText = "輸入單位名稱進行搜尋，或直接選擇",
                ActionButtons = await GetUnitActionButtonsAsync()
            },
            new()
            {
                PropertyName = nameof(Product.MinStockLevel),
                Label = "最低庫存警戒線",
                FieldType = FormFieldType.Number,
                Placeholder = "請輸入最低庫存警戒線",
                IsRequired = false,
                HelpText = "當庫存低於此數量時會發出警告"
            },
            new()
            {
                PropertyName = nameof(Product.MaxStockLevel),
                Label = "最高庫存警戒線",
                FieldType = FormFieldType.Number,
                Placeholder = "請輸入最高庫存警戒線",
                IsRequired = false,
                HelpText = "當庫存高於此數量時會發出警告"
            },
            new()
            {
                PropertyName = nameof(Product.WarehouseId),
                Label = "倉庫",
                FieldType = FormFieldType.AutoComplete,
                Placeholder = "請輸入或選擇倉庫",
                IsRequired = false,
                MinSearchLength = 0,
                HelpText = "輸入倉庫名稱進行搜尋，或直接選擇",
                ActionButtons = await GetWarehouseActionButtonsAsync()
            },
            new()
            {
                PropertyName = nameof(Product.WarehouseLocationId),
                Label = "倉庫位置",
                FieldType = FormFieldType.AutoComplete,
                Placeholder = "請輸入或選擇倉庫位置",
                IsRequired = false,
                MinSearchLength = 0,
                HelpText = "選擇產品的倉庫位置",
                ActionButtons = await GetWarehouseLocationActionButtonsAsync(),
                IsDisabled = false
            },
            new()
            {
                PropertyName = nameof(Product.Remarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入備註",
                IsRequired = false,
                MaxLength = 500,
                Rows = 2,
                HelpText = "產品的額外說明或注意事項",
                ContainerCssClass = "col-12"
            }
        };

        formSections = new Dictionary<string, string>
        {
            { nameof(Product.Code), "基本資訊" },
            { nameof(Product.Name), "基本資訊" },
            { nameof(Product.SizeId), "基本資訊" },
            { nameof(Product.ProductCategoryId), "基本資訊" },
            { nameof(Product.UnitId), "基本資訊" },
            { nameof(Product.MinStockLevel), "庫存設定" },
            { nameof(Product.MaxStockLevel), "庫存設定" },
            { nameof(Product.WarehouseId), "庫存設定" },
            { nameof(Product.WarehouseLocationId), "庫存設定" },
            { nameof(Product.Remarks), "額外資訊" }
        };
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(Product.ProductCategoryId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["Name"] = searchTerm
                }
            },
            {
                nameof(Product.UnitId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["Name"] = searchTerm
                }
            },
            {
                nameof(Product.SizeId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["Name"] = searchTerm
                }
            },
            {
                nameof(Product.WarehouseId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["Name"] = searchTerm
                }
            },
            {
                nameof(Product.WarehouseLocationId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["Name"] = searchTerm
                }
            }
        };
    }

    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(Product.ProductCategoryId), productCategoryModalManager },
            { nameof(Product.UnitId), unitModalManager },
            { nameof(Product.SizeId), sizeModalManager },
            { nameof(Product.WarehouseId), warehouseModalManager },
            { nameof(Product.WarehouseLocationId), warehouseLocationModalManager }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(Product.ProductCategoryId), availableProductCategories.Cast<object>() },
            { nameof(Product.SizeId), availableSizes.Cast<object>() },
            { nameof(Product.UnitId), availableUnits.Cast<object>() },
            { nameof(Product.WarehouseId), availableWarehouses.Cast<object>() },
            { nameof(Product.WarehouseLocationId), GetFilteredWarehouseLocations().Cast<object>() }
        };
    }

    /// <summary>
    /// 取得所有可用的倉庫位置清單
    /// </summary>
    private IEnumerable<WarehouseLocation> GetFilteredWarehouseLocations()
    {
        return availableWarehouseLocations;
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Product.ProductCategoryId), "Name" },
            { nameof(Product.SizeId), "Name" },
            { nameof(Product.UnitId), "Name" },
            { nameof(Product.WarehouseId), "Name" },
            { nameof(Product.WarehouseLocationId), "Name" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Product.ProductCategoryId), "Id" },
            { nameof(Product.SizeId), "Id" },
            { nameof(Product.UnitId), "Id" },
            { nameof(Product.WarehouseId), "Id" },
            { nameof(Product.WarehouseLocationId), "Id" }
        };
    }

    // ===== Modal 管理器初始化方法 =====
    
    /// <summary>
    /// 取得額外區段 - 產品供應商管理
    /// </summary>
    private RenderFragment? GetAdditionalSections()
    {
        return @<div class="mt-4">
            <ProductSupplierManagerComponent TProductSupplierEntity="ProductSupplier"
                                           TProductEntity="Product"
                                           TSupplierEntity="Supplier"
                                           Items="@productSuppliers"
                                           Options="@availableSuppliers"
                                           UnitOptions="@availableUnits"
                                           ParentEntityId="@(ProductId ?? 0)"
                                           IsReadOnly="@false"
                                           GetSupplierId="@GetSupplierIdDelegate"
                                           GetSupplierProductCode="@GetSupplierProductCodeDelegate"
                                           GetSupplierPrice="@GetSupplierPriceDelegate"
                                           GetLeadTime="@GetLeadTimeDelegate"
                                           GetMinOrderQuantity="@GetMinOrderQuantityDelegate"
                                           GetUnitId="@GetUnitIdDelegate"
                                           SetSupplierId="@SetSupplierIdDelegate"
                                           SetSupplierProductCode="@SetSupplierProductCodeDelegate"
                                           SetSupplierPrice="@SetSupplierPriceDelegate"
                                           SetLeadTime="@SetLeadTimeDelegate"
                                           SetMinOrderQuantity="@SetMinOrderQuantityDelegate"
                                           SetUnitId="@SetUnitIdDelegate"
                                           SetParentId="@SetParentIdDelegate"
                                           ItemsChanged="@OnProductSuppliersChanged"
                                           ItemAdded="@OnProductSupplierAdded"
                                           ItemRemoved="@OnProductSupplierRemoved" />
        </div>;
    }

    // ===== 產品供應商委派屬性 =====
    
    // Getter 委派
    private Func<ProductSupplier, int?> GetSupplierIdDelegate => item => item.SupplierId;
    private Func<ProductSupplier, string?> GetSupplierProductCodeDelegate => item => item.SupplierProductCode;
    private Func<ProductSupplier, decimal?> GetSupplierPriceDelegate => item => item.SupplierPrice;
    private Func<ProductSupplier, int?> GetLeadTimeDelegate => item => item.LeadTime;
    private Func<ProductSupplier, int?> GetMinOrderQuantityDelegate => item => item.MinOrderQuantity;
    private Func<ProductSupplier, int?> GetUnitIdDelegate => item => item.UnitId;
    
    // Setter 委派
    private Action<ProductSupplier, int?> SetSupplierIdDelegate => (item, value) => { if (value.HasValue) item.SupplierId = value.Value; };
    private Action<ProductSupplier, string?> SetSupplierProductCodeDelegate => (item, value) => item.SupplierProductCode = value;
    private Action<ProductSupplier, decimal?> SetSupplierPriceDelegate => (item, value) => item.SupplierPrice = value;
    private Action<ProductSupplier, int?> SetLeadTimeDelegate => (item, value) => item.LeadTime = value;
    private Action<ProductSupplier, int?> SetMinOrderQuantityDelegate => (item, value) => item.MinOrderQuantity = value;
    private Action<ProductSupplier, int?> SetUnitIdDelegate => (item, value) => item.UnitId = value;
    private Action<ProductSupplier, int> SetParentIdDelegate => (item, parentId) => item.ProductId = parentId;

    // ===== 產品供應商事件處理 =====
    
    /// <summary>
    /// 處理產品供應商變更事件
    /// </summary>
    private Task OnProductSuppliersChanged(List<ProductSupplier> updatedSuppliers)
    {
        try
        {
            productSuppliers = updatedSuppliers;
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("更新供應商資料時發生錯誤");
            return Task.CompletedTask;
        }
    }

    /// <summary>
    /// 處理產品供應商新增事件
    /// </summary>
    private Task OnProductSupplierAdded(ProductSupplier addedSupplier)
    {
        try
        {
            // 可以在這裡添加額外的邏輯
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("新增供應商時發生錯誤");
            return Task.CompletedTask;
        }
    }

    /// <summary>
    /// 處理產品供應商移除事件
    /// </summary>
    private Task OnProductSupplierRemoved(ProductSupplier removedSupplier)
    {
        try
        {
            // 可以在這裡添加額外的邏輯
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("移除供應商時發生錯誤");
            return Task.CompletedTask;
        }
    }
    
    /// <summary>
    /// 儲存子集合資料 - 產品供應商關聯
    /// </summary>
    private async Task SaveSubCollectionsAsync(Product product)
    {
        try
        {            
            // 確保我們有最新的產品資料
            var latestProduct = await ProductService.GetByIdAsync(product.Id);
            if (latestProduct == null)
            {
                await NotificationService.ShowErrorAsync("無法獲取最新的產品資料");
                return;
            }            
            
            // 先同步庫存警戒線（使用最新的產品資料）
            await SyncProductStockLevelsAsync(latestProduct);
            
            // 只有在產品ID存在時才處理產品供應商關聯
            if (latestProduct.Id <= 0)
            {
                await NotificationService.ShowWarningAsync("產品ID無效，跳過供應商關聯儲存");
                return; 
            }

            // 使用 ProductService 的更新供應商關聯方法
            if (productSuppliers.Any())
            {
                // 設定每個供應商關聯的 ProductId
                foreach (var productSupplier in productSuppliers)
                {
                    productSupplier.ProductId = latestProduct.Id;
                }
                
                // 更新產品供應商關聯
                var result = await ProductService.UpdateProductSuppliersAsync(latestProduct.Id, productSuppliers);
                if (!result.IsSuccess)
                {
                    await NotificationService.ShowErrorAsync($"儲存供應商資料時發生錯誤：{result.ErrorMessage}");
                }
            }

            // 重新載入供應商資料以更新UI顯示
            productSuppliers = await ProductService.GetProductSuppliersAsync(latestProduct.Id);
            
            StateHasChanged(); // 通知UI更新
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"儲存供應商資料時發生錯誤：{ex.Message}");
            // 記錄錯誤但不中斷流程，因為主要實體已經儲存成功
        }
    }
    
    /// <summary>
    /// 同步產品庫存警戒線到 InventoryStock
    /// </summary>
    private async Task SyncProductStockLevelsAsync(Product product)
    {
        try
        {       
            // 確保產品ID有效（產品是唯一必須的值）
            if (product.Id <= 0)
            {
                return;
            }

            // 查詢現有的庫存記錄（根據產品ID、倉庫ID和倉庫位置ID查詢）
            var existingStock = await InventoryStockService.GetByProductWarehouseAsync(
                product.Id, 
                product.WarehouseId, 
                product.WarehouseLocationId);

            // 將 Product 的庫存警戒線值轉換為 nullable int
            int? minLevel = product.MinStockLevel >= 0 ? product.MinStockLevel : null;
            int? maxLevel = product.MaxStockLevel >= 0 ? product.MaxStockLevel : null;

            if (existingStock != null)
            {
                // 更新現有記錄
                bool hasChanges = false;
                
                if (existingStock.MinStockLevel != minLevel)
                {
                    existingStock.MinStockLevel = minLevel;
                    hasChanges = true;
                }
                
                if (existingStock.MaxStockLevel != maxLevel)
                {
                    existingStock.MaxStockLevel = maxLevel;
                    hasChanges = true;
                }
                
                // 同步倉庫和倉庫位置資訊（可能產品的倉庫設定有變更）
                if (existingStock.WarehouseId != product.WarehouseId)
                {
                    existingStock.WarehouseId = product.WarehouseId;
                    hasChanges = true;
                }
                
                if (existingStock.WarehouseLocationId != product.WarehouseLocationId)
                {
                    existingStock.WarehouseLocationId = product.WarehouseLocationId;
                    hasChanges = true;
                }
                
                if (hasChanges)
                {
                    await InventoryStockService.UpdateAsync(existingStock);
                }
            }
            else
            {
                // 創建新的庫存記錄（商品是必須的，倉庫和倉庫位置是可選的）
                var newStock = new InventoryStock
                {
                    ProductId = product.Id,
                    WarehouseId = product.WarehouseId,
                    WarehouseLocationId = product.WarehouseLocationId,
                    MinStockLevel = minLevel,
                    MaxStockLevel = maxLevel,
                    CurrentStock = 0,
                    ReservedStock = 0,
                    InTransitStock = 0
                };
                
                await InventoryStockService.CreateAsync(newStock);
                await NotificationService.ShowSuccessAsync("新庫存記錄創建成功");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"儲存庫存警戒線時發生錯誤：{ex.Message}");
        }
    }
    
    /// <summary>
    /// 同步庫存警戒線到 InventoryStock (即時同步)
    /// </summary>
    private async Task SyncStockLevelToInventoryAsync(Product product, string propertyName, object? value)
    {
        try
        {
            if (!product.WarehouseId.HasValue) return;

            // 查詢現有的庫存記錄
            var existingStock = await InventoryStockService.GetByProductWarehouseAsync(
                product.Id,
                product.WarehouseId.Value,
                product.WarehouseLocationId);

            if (existingStock != null)
            {
                // 更新現有記錄
                bool hasChanges = false;

                if (propertyName == nameof(Product.MinStockLevel))
                {
                    var newValue = value != null && int.TryParse(value.ToString(), out int intValue) && intValue >= 0 ? intValue : (int?)null;
                    if (existingStock.MinStockLevel != newValue)
                    {
                        existingStock.MinStockLevel = newValue;
                        hasChanges = true;
                    }
                }
                else if (propertyName == nameof(Product.MaxStockLevel))
                {
                    var newValue = value != null && int.TryParse(value.ToString(), out int intValue) && intValue >= 0 ? intValue : (int?)null;
                    if (existingStock.MaxStockLevel != newValue)
                    {
                        existingStock.MaxStockLevel = newValue;
                        hasChanges = true;
                    }
                }

                if (hasChanges)
                {
                    await InventoryStockService.UpdateAsync(existingStock);
                }
            }
            else
            {
                // 檢查是否需要創建新記錄（允許0值）
                int? minLevel = propertyName == nameof(Product.MinStockLevel) && value != null && int.TryParse(value.ToString(), out int minVal) && minVal >= 0 ? minVal : (int?)null;
                int? maxLevel = propertyName == nameof(Product.MaxStockLevel) && value != null && int.TryParse(value.ToString(), out int maxVal) && maxVal >= 0 ? maxVal : (int?)null;

                // 只要有設定任何警戒線值就創建記錄
                if (minLevel.HasValue || maxLevel.HasValue)
                {
                    var newStock = new InventoryStock
                    {
                        ProductId = product.Id,
                        WarehouseId = product.WarehouseId.Value,
                        WarehouseLocationId = product.WarehouseLocationId,
                        MinStockLevel = minLevel,
                        MaxStockLevel = maxLevel,
                        CurrentStock = 0,
                        ReservedStock = 0,
                        InTransitStock = 0
                    };

                    await InventoryStockService.CreateAsync(newStock);
                }
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"同步庫存警戒線時發生錯誤：{ex.Message}");
        }
    }
    
    /// <summary>
    /// 初始化產品分類 Modal 管理器
    /// </summary>
    private void InitializeProductCategoryModalManager()
    {
        productCategoryModalManager = new RelatedEntityManagerBuilder<ProductCategory>(NotificationService, "產品分類")
            .WithPropertyName(nameof(Product.ProductCategoryId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(categoryId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.ProductCategoryId = categoryId;
                }
            })
            .WithCustomPostProcess(async category => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 初始化單位 Modal 管理器
    /// </summary>
    private void InitializeUnitModalManager()
    {
        unitModalManager = new RelatedEntityManagerBuilder<Unit>(NotificationService, "單位")
            .WithPropertyName(nameof(Product.UnitId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(unitId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.UnitId = unitId;
                }
            })
            .WithCustomPostProcess(async unit => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 初始化尺寸 Modal 管理器
    /// </summary>
    private void InitializeSizeModalManager()
    {
        sizeModalManager = new RelatedEntityManagerBuilder<Size>(NotificationService, "尺寸")
            .WithPropertyName(nameof(Product.SizeId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(sizeId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.SizeId = sizeId;
                }
            })
            .WithCustomPostProcess(async size => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 初始化倉庫 Modal 管理器
    /// </summary>
    private void InitializeWarehouseModalManager()
    {
        warehouseModalManager = new RelatedEntityManagerBuilder<Warehouse>(NotificationService, "倉庫")
            .WithPropertyName(nameof(Product.WarehouseId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(warehouseId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.WarehouseId = warehouseId;
                }
            })
            .WithCustomPostProcess(async warehouse => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 初始化倉庫位置 Modal 管理器
    /// </summary>
    private void InitializeWarehouseLocationModalManager()
    {
        warehouseLocationModalManager = new RelatedEntityManagerBuilder<WarehouseLocation>(NotificationService, "倉庫位置")
            .WithPropertyName(nameof(Product.WarehouseLocationId))
            .WithReloadCallback(LoadWarehouseLocationsAsync) // 改為載入倉庫位置的方法
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(warehouseLocationId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.WarehouseLocationId = warehouseLocationId;
                }
            })
            .WithCustomPostProcess(async warehouseLocation => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    // ===== ActionButton 產生方法 =====
    
    /// <summary>
    /// 產生產品分類操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetProductCategoryActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            productCategoryModalManager, 
            nameof(Product.ProductCategoryId)
        );
    }

    /// <summary>
    /// 產生單位操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetUnitActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            unitModalManager, 
            nameof(Product.UnitId)
        );
    }

    /// <summary>
    /// 產生尺寸操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetSizeActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            sizeModalManager, 
            nameof(Product.SizeId)
        );
    }

    /// <summary>
    /// 產生倉庫操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetWarehouseActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            warehouseModalManager, 
            nameof(Product.WarehouseId)
        );
    }

    /// <summary>
    /// 產生倉庫位置操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetWarehouseLocationActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            warehouseLocationModalManager, 
            nameof(Product.WarehouseLocationId)
        );
    }

    // ===== Modal 事件包裝器方法 =====
    
    /// <summary>
    /// 包裝產品分類儲存事件
    /// </summary>
    private async Task OnProductCategorySavedWrapper(ProductCategory savedCategory)
    {
        await productCategoryModalManager.HandleEntitySavedAsync(savedCategory, shouldAutoSelect: true);
    }

    /// <summary>
    /// 包裝單位儲存事件
    /// </summary>
    private async Task OnUnitSavedWrapper(Unit savedUnit)
    {
        await unitModalManager.HandleEntitySavedAsync(savedUnit, shouldAutoSelect: true);
    }

    /// <summary>
    /// 包裝尺寸儲存事件
    /// </summary>
    private async Task OnSizeSavedWrapper(Size savedSize)
    {
        await sizeModalManager.HandleEntitySavedAsync(savedSize, shouldAutoSelect: true);
    }

    /// <summary>
    /// 包裝倉庫儲存事件
    /// </summary>
    private async Task OnWarehouseSavedWrapper()
    {
        try
        {
            // 由於 WarehouseEditModalComponent 沒有返回實體，我們手動處理
            // 重新載入資料
            if (warehouseModalManager.ReloadDataCallback != null)
            {
                await warehouseModalManager.ReloadDataCallback();
            }
            
            // 執行自訂後處理邏輯
            if (warehouseModalManager.CustomPostProcessCallback != null)
            {
                // 創建一個虛擬實體用於觸發後處理
                var dummyEntity = new Warehouse { Id = 0, Name = "新增的倉庫" };
                await warehouseModalManager.CustomPostProcessCallback(dummyEntity);
            }
            
            // 關閉 Modal
            await warehouseModalManager.CloseModalAsync();
            
            // 顯示成功訊息
            await NotificationService.ShowSuccessAsync("倉庫已成功儲存，選項已更新");
            
            // 觸發狀態變更
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理倉庫儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 包裝倉庫位置儲存事件
    /// </summary>
    private async Task OnWarehouseLocationSavedWrapper()
    {
        try
        {
            // 由於 WarehouseLocationEditModalComponent 沒有返回實體，我們手動處理
            // 重新載入資料
            if (warehouseLocationModalManager.ReloadDataCallback != null)
            {
                await warehouseLocationModalManager.ReloadDataCallback();
            }
            
            // 執行自訂後處理邏輯
            if (warehouseLocationModalManager.CustomPostProcessCallback != null)
            {
                // 創建一個虛擬實體用於觸發後處理
                var dummyEntity = new WarehouseLocation { Id = 0, Name = "新增的倉庫位置" };
                await warehouseLocationModalManager.CustomPostProcessCallback(dummyEntity);
            }
            
            // 關閉 Modal
            await warehouseLocationModalManager.CloseModalAsync();
            
            // 顯示成功訊息
            await NotificationService.ShowSuccessAsync("倉庫位置已成功儲存，選項已更新");
            
            // 觸發狀態變更
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理倉庫位置儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理欄位值變更事件 - 使用統一 Helper
    /// </summary>
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 在第一次欄位變更時檢查實體是否已載入，如果是編輯模式且倉庫位置欄位需要刷新，則刷新
            if (!_entityLoadedButFieldsNotRefreshed && ProductId.HasValue && editModalComponent?.Entity != null)
            {
                _entityLoadedButFieldsNotRefreshed = true;
                await RefreshFormFieldsAfterEntityLoadAsync();
            }
            
            // 處理庫存警戒線字段變更 - 同步到 InventoryStock
            if (fieldChange.PropertyName == nameof(Product.MinStockLevel) || 
                fieldChange.PropertyName == nameof(Product.MaxStockLevel))
            {
                // 如果有選擇倉庫且產品已存在，立即同步到 InventoryStock
                if (editModalComponent?.Entity != null && 
                    editModalComponent.Entity.Id > 0 && 
                    editModalComponent.Entity.WarehouseId.HasValue)
                {
                    await SyncStockLevelToInventoryAsync(editModalComponent.Entity, fieldChange.PropertyName, fieldChange.Value);
                }
                return;
            }
            // 處理倉庫變更 - 重新載入倉庫位置
            else if (fieldChange.PropertyName == nameof(Product.WarehouseId))
            {
                // 重新載入倉庫位置
                await LoadWarehouseLocationsAsync();

                // 使用統一 Helper 處理倉庫欄位變更
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    warehouseModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
            // 使用統一 Helper 處理產品分類欄位變更
            else if (fieldChange.PropertyName == nameof(Product.ProductCategoryId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    productCategoryModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
            // 使用統一 Helper 處理單位欄位變更
            else if (fieldChange.PropertyName == nameof(Product.UnitId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    unitModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
            // 使用統一 Helper 處理尺寸欄位變更
            else if (fieldChange.PropertyName == nameof(Product.SizeId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    sizeModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
            // 使用統一 Helper 處理倉庫位置欄位變更
            else if (fieldChange.PropertyName == nameof(Product.WarehouseLocationId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    warehouseLocationModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("欄位變更處理時發生錯誤");
        }
    }
}
