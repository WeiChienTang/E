@page "/product-pricing/detail/{PricingId:int}"
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Components.Shared.PageModels
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Helpers
@inject IProductPricingService ProductPricingService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<GenericDetailPageComponent TEntity="ProductPricing" 
                           TService="IProductPricingService"
                           Service="@ProductPricingService"
                           EntityBasePath="/product-pricing"
                           EntityId="@PricingId"
                           PageTitle="商品定價詳細資料"
                           PageSubtitle="查看完整的商品定價資訊"
                           EntityName="商品定價"
                           BreadcrumbItems="@breadcrumbItems"
                           UseTabLayout="true"
                           TabSections="@GetTabSections()"
                           EntityDisplayNameSelector="@(pricing => $"{pricing?.Product?.ProductName} - {(pricing != null ? GetPricingTypeDisplayName(pricing.PricingType) : "")}")"
                           OnDataLoaded="@OnDataLoaded"
                           RequiredPermission="ProductPricing.Read"
                           DataLoader="@LoadProductPricingDataAsync"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           @ref="detailComponent" />

@code {
    [Parameter] public int PricingId { get; set; }

    private GenericDetailPageComponent<ProductPricing, IProductPricingService> detailComponent = default!;
    private ProductPricing? productPricing;
    private bool _isLoading = false; // 防止重複載入
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化麵包屑
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),  
                new("產品管理", "/products"),
                new("商品定價", "/product-pricing"),
                new("定價詳細資料")
            };
            
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType(),
                additionalData: new { PricingId, PageName = "ProductPricingDetail" }
            );
            
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // GenericDetailPageComponent 需要的方法
    private async Task<ProductPricing?> LoadProductPricingDataAsync()
    {
        // 防止重複載入
        if (_isLoading)
        {
            return productPricing;
        }
        
        try
        {
            _isLoading = true;
            if (PricingId <= 0) return null;
            
            var result = await ProductPricingService.GetByIdAsync(PricingId);
            productPricing = result; // 保持本地變數同步
            
            return result;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadProductPricingDataAsync), GetType(),
                additionalData: new { PricingId });
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private Task LoadAdditionalDataAsync()
    {
        try
        {
            // 由於GetByIdAsync已經Include所有關聯資料，這裡不需要額外查詢
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalDataAsync), GetType(),
                additionalData: new { PricingId });
            throw;
        }
    }

    private Task OnDataLoaded()
    {
        try
        {
            // 資料載入完成後的處理
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnDataLoaded), GetType(),
                additionalData: new { PricingId });
            return Task.CompletedTask;
        }
    }

    private List<GenericDetailPageComponent<ProductPricing, IProductPricingService>.TabSection> GetTabSections()
    {
        return new List<GenericDetailPageComponent<ProductPricing, IProductPricingService>.TabSection>
        {
            new GenericDetailPageComponent<ProductPricing, IProductPricingService>.TabSection
            {
                Id = "basic",
                Title = "基本資訊",
                Content = @<div>
                    <BasicInfoDisplayComponent 
                        Title="定價基本資訊"
                        IconClass="fas fa-info-circle"
                        IconColor="text-primary"
                        Fields="@GetBasicInfoFields()" />
                </div>
            },

            new GenericDetailPageComponent<ProductPricing, IProductPricingService>.TabSection
            {
                Id = "product-info",
                Title = "商品資訊",
                Content = @<div>
                    <BasicInfoDisplayComponent 
                        Title="商品基本資訊"
                        IconClass="fas fa-box"
                        IconColor="text-primary"
                        Fields="@GetProductInfoFields()" />
                </div>
            },
            
            new GenericDetailPageComponent<ProductPricing, IProductPricingService>.TabSection
            {
                Id = "pricing-conditions",
                Title = "定價條件",
                Content = @<div>
                    <BasicInfoDisplayComponent 
                        Title="定價條件設定"
                        IconClass="fas fa-filter"
                        IconColor="text-info"
                        Fields="@GetConditionFields()" />
                </div>
            },
            
            new GenericDetailPageComponent<ProductPricing, IProductPricingService>.TabSection
            {
                Id = "validity",
                Title = "有效期間",
                Content = @<div>
                    <BasicInfoDisplayComponent 
                        Title="價格有效期間"
                        IconClass="far fa-calendar-alt"
                        IconColor="text-warning"
                        Fields="@GetValidityFields()" />
                </div>
            },
            
            new GenericDetailPageComponent<ProductPricing, IProductPricingService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div>
                    <BasicInfoDisplayComponent 
                        Title="系統記錄資訊"
                        IconClass="fas fa-cog"
                        IconColor="text-secondary"
                        Fields="@GetSystemInfoFields()" />
                </div>
            }
        };
    }

    // 基本資訊欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetBasicInfoFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
                new()
                {
                    Label = "定價類型",
                    Value = productPricing != null ? GetPricingTypeDisplayName(productPricing.PricingType) : null,
                    IsPrimary = true,
                    ValueBold = true,
                    IconClass = "fas fa-tag",
                    IconBgClass = "bg-primary bg-opacity-10",
                    IconTextClass = "text-primary"
                },
                new()
                {
                    Label = "定價金額",
                    Value = productPricing?.Price,
                    Format = BasicInfoDisplayComponent.FieldFormat.Currency,
                    ValueBold = true,
                    IconClass = "fas fa-dollar-sign",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "貨幣",
                    Value = productPricing?.Currency,
                    IconClass = "fas fa-coins",
                    IconBgClass = "bg-info bg-opacity-10", 
                    IconTextClass = "text-info"
                },
                new()
                {
                    Label = "指定客戶",
                    Value = productPricing?.Customer?.CompanyName,
                    EmptyText = "適用所有客戶",
                    IconClass = "fas fa-user",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning"
                },
                new()
                {
                    Label = "優先順序",
                    Value = productPricing?.Priority.ToString(),
                    IconClass = "fas fa-sort-numeric-up",
                    IconBgClass = "bg-secondary bg-opacity-10",
                    IconTextClass = "text-secondary"
                },
                new()
                {
                    Label = "定價說明",
                    Value = productPricing?.PricingDescription,
                    EmptyText = "無說明",
                    IconClass = "fas fa-align-left",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info",
                    ColSize = 12
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GetBasicInfoFields),
                typeof(ProductPricingDetail),
                additionalData: new { PricingId }
            );
            
            return new List<BasicInfoDisplayComponent.BasicInfoField>();
        }
    }

    // 商品資訊欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetProductInfoFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
                new()
                {
                    Label = "商品代碼",
                    Value = productPricing?.Product?.ProductCode,
                    IsPrimary = true,
                    IconClass = "fas fa-barcode",
                    IconBgClass = "bg-primary bg-opacity-10",
                    IconTextClass = "text-primary"
                },
                new()
                {
                    Label = "商品名稱",
                    Value = productPricing?.Product?.ProductName,
                    ValueBold = true,
                    IconClass = "fas fa-box",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info"
                },
                new()
                {
                    Label = "規格",
                    Value = productPricing?.Product?.Specification,
                    EmptyText = "無規格說明",
                    IconClass = "fas fa-list-alt",
                    IconBgClass = "bg-secondary bg-opacity-10",
                    IconTextClass = "text-secondary"
                },
                new()
                {
                    Label = "產品類別",
                    Value = productPricing?.Product?.ProductCategory?.CategoryName,
                    EmptyText = "未分類",
                    IconClass = "fas fa-folder",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "商品狀態",
                    Type = BasicInfoDisplayComponent.FieldType.Status,
                    Value = productPricing?.Product?.Status,
                    IconClass = "fas fa-flag",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GetProductInfoFields),
                typeof(ProductPricingDetail),
                additionalData: new { PricingId }
            );
            
            return new List<BasicInfoDisplayComponent.BasicInfoField>();
        }
    }

    // 適用條件欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetConditionFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
                new()
                {
                    Label = "適用客戶",
                    Value = productPricing?.Customer?.CompanyName,
                    EmptyText = "適用所有客戶",
                    IconClass = "fas fa-users",
                    IconBgClass = "bg-primary bg-opacity-10",
                    IconTextClass = "text-primary"
                },
                new()
                {
                    Label = "客戶代碼",
                    Value = productPricing?.Customer?.CustomerCode,
                    EmptyText = "不適用",
                    IconClass = "fas fa-id-card",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info",
                    VisibilityCondition = () => productPricing?.Customer != null
                },
                new()
                {
                    Label = "最小購買數量",
                    Value = productPricing?.MinQuantity?.ToString(),
                    EmptyText = "無限制",
                    IconClass = "fas fa-calculator",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "最大購買數量",
                    Value = productPricing?.MaxQuantity?.ToString(),
                    EmptyText = "無限制",
                    IconClass = "fas fa-calculator",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning"
                },
                new()
                {
                    Label = "數量區間",
                    CustomContent = @<div>
                        @{
                            var minQty = productPricing?.MinQuantity ?? 0;
                            var maxQty = productPricing?.MaxQuantity;
                            var rangeText = maxQty.HasValue ? $"{minQty} ~ {maxQty}" : $"{minQty} 以上";
                        }
                        <span class="badge bg-secondary">@rangeText</span>
                    </div>,
                    IconClass = "fas fa-chart-bar",
                    IconBgClass = "bg-secondary bg-opacity-10",
                    IconTextClass = "text-secondary"
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GetConditionFields),
                typeof(ProductPricingDetail),
                additionalData: new { PricingId }
            );
            
            return new List<BasicInfoDisplayComponent.BasicInfoField>();
        }
    }

    // 時效性欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetValidityFields()
    {
        try
        {
            var now = DateTime.Now;
            var isActive = productPricing?.EffectiveDate <= now && 
                          (productPricing?.ExpiryDate == null || productPricing?.ExpiryDate > now);

            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
                new()
                {
                    Label = "生效日期",
                    Value = productPricing?.EffectiveDate,
                    Format = BasicInfoDisplayComponent.FieldFormat.Date,
                    IsPrimary = true,
                    IconClass = "fas fa-calendar-check",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "失效日期",
                    Value = productPricing?.ExpiryDate,
                    Format = BasicInfoDisplayComponent.FieldFormat.Date,
                    EmptyText = "永久有效",
                    IconClass = "fas fa-calendar-times",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning"
                },
                new()
                {
                    Label = "當前狀態",
                    CustomContent = @<div>
                        <span class="badge @(isActive ? "bg-success" : "bg-danger")">
                            <i class="fas @(isActive ? "fa-check-circle" : "fa-times-circle") me-1"></i>
                            @(isActive ? "有效" : "無效")
                        </span>
                    </div>,
                    IconClass = "fas fa-info-circle",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info"
                },
                new()
                {
                    Label = "剩餘天數",
                    CustomContent = @<div>
                        @{
                            int? remainingDays = null;
                            if (productPricing?.ExpiryDate.HasValue == true)
                            {
                                remainingDays = (int)(productPricing.ExpiryDate.Value - DateTime.Today).TotalDays;
                            }
                        }
                        @if (remainingDays.HasValue)
                        {
                            var badgeClass = remainingDays > 30 ? "bg-success" : remainingDays > 7 ? "bg-warning" : "bg-danger";
                            <span class="badge @badgeClass">@remainingDays 天</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">永久有效</span>
                        }
                    </div>,
                    IconClass = "fas fa-clock",
                    IconBgClass = "bg-secondary bg-opacity-10",
                    IconTextClass = "text-secondary"
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GetValidityFields),
                typeof(ProductPricingDetail),
                additionalData: new { PricingId }
            );
            
            return new List<BasicInfoDisplayComponent.BasicInfoField>();
        }
    }

    // 系統資訊欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetSystemInfoFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
                new()
                {
                    Label = "記錄ID",
                    Value = productPricing?.Id.ToString(),
                    IconClass = "fas fa-hashtag",
                    IconBgClass = "bg-primary bg-opacity-10",
                    IconTextClass = "text-primary"
                },
                new()
                {
                    Label = "建立時間",
                    Value = productPricing?.CreatedAt,
                    Format = BasicInfoDisplayComponent.FieldFormat.DateTime,
                    IconClass = "fas fa-calendar-plus",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "建立者",
                    Value = productPricing?.CreatedBy,
                    EmptyText = "系統",
                    IconClass = "fas fa-user-plus",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "最後更新",
                    Value = productPricing?.UpdatedAt,
                    Format = BasicInfoDisplayComponent.FieldFormat.DateTime,
                    EmptyText = "未更新",
                    IconClass = "fas fa-sync-alt",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning"
                },
                new()
                {
                    Label = "更新者",
                    Value = productPricing?.UpdatedBy,
                    EmptyText = "未更新",
                    IconClass = "fas fa-user-edit",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning"
                },
                new()
                {
                    Label = "實體狀態",
                    Type = BasicInfoDisplayComponent.FieldType.Status,
                    Value = productPricing?.Status,
                    IconClass = "fas fa-flag",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info"
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GetSystemInfoFields),
                typeof(ProductPricingDetail),
                additionalData: new { PricingId }
            );
            
            return new List<BasicInfoDisplayComponent.BasicInfoField>();
        }
    }

    private string GetPricingTypeDisplayName(PricingType pricingType)
    {
        return pricingType switch
        {
            PricingType.Standard => "標準價格",
            PricingType.Promotional => "促銷價格",
            PricingType.CustomerSpecific => "客戶專屬價",
            PricingType.CustomerGroup => "客戶群組價",
            PricingType.VolumeDiscount => "數量折扣價",
            PricingType.VIP => "VIP價格",
            PricingType.Clearance => "清倉價格",
            PricingType.Trial => "試用價格",
            _ => pricingType.ToString()
        };
    }
}
