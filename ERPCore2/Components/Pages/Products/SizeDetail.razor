@page "/sizes/detail/{sizeId:int}"

@inject ISizeService SizeService
@inject NavigationManager Navigation
@rendermode InteractiveServer


<GenericDetailPageComponent TEntity="Size" 
                           TService="ISizeService"
                           EntityId="@SizeId"
                           Entity="@size"
                           Service="@SizeService"
                           EntityName="尺寸"
                           EntityNamePlural="尺寸"
                           IndexRoute="/sizes"
                           EditRoute="/sizes/edit"
                           LoadingText="載入尺寸資料中..."
                           BreadcrumbItems="@breadcrumbItems"
                           DataLoader="@LoadSizeDataAsync"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           EntityTitleSelector="@(s => s.SizeName)"
                           EntitySubtitleSelector="@(s => $"尺寸代碼：{s.SizeCode}")"
                           EntityDisplayNameSelector="@(s => s.SizeName)"
                           OnDataLoaded="@OnSizeDataLoaded"
                           UseTabLayout="true"
                           TabSections="@GetTabSections()" RequiredPermission="Size.Read">
</GenericDetailPageComponent>


@code {
    [Parameter] public int SizeId { get; set; }

    private Size? size;
    private bool _isLoading = false; // 防止重複載入

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("基礎資料", "#"),
        new("尺寸維護", "/sizes"),
        new("尺寸詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Size?> LoadSizeDataAsync()
    {
        // 防止重複載入
        if (_isLoading)
        {
            return size;
        }
        
        try
        {
            _isLoading = true;
            if (SizeId <= 0) return null;
            
            var result = await SizeService.GetByIdAsync(SizeId);
            size = result; // 保持本地變數同步
            
            return result;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSizeDataAsync), GetType(),
                additionalData: new { SizeId });
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private Task LoadAdditionalDataAsync()
    {
        try
        {
            // Size 實體比較簡單，不需要額外查詢
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalDataAsync), GetType(),
                additionalData: new { SizeId });
            throw;
        }
    }

    private Task OnSizeDataLoaded()
    {
        try
        {
            // 資料載入完成後的處理
            StateHasChanged();        
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnSizeDataLoaded), GetType(),
                additionalData: new { SizeId });
            throw;
        }
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Size, ISizeService
                        >.TabSection> GetTabSections()
    {
        try
        {
            // 先定義點擊處理器
            EventCallback<int> productClickHandler = EventCallback.Factory.Create<int>(this, OnProductCardClick);
            
            return new List<GenericDetailPageComponent<Size, ISizeService
                        >.TabSection>
            {           
                 new GenericDetailPageComponent<Size, ISizeService>.TabSection
                {
                    Id = "basic",
                    Title = "基本資料",
                    Content = @<div>
                        <BasicInfoDisplayComponent 
                            Title="尺寸基本資訊"
                            IconClass="fas fa-ruler"
                            IconColor="text-primary"
                            Fields="@GetSizeBasicFields()" />
                    </div>
                },
            
            new GenericDetailPageComponent<Size, ISizeService>.TabSection
            {
                Id = "products",
                Title = $"關聯商品 ({size?.Products?.Count ?? 0})",
                Content = @<div>
                    <RelationListComponent TRelationEntity="Product" 
                                         TTargetEntity="Product"
                                         RelationItems="@size?.Products"
                                         OnItemClick="@productClickHandler"
                                         GetTargetId="@(p => p.Id)"
                                         GetDisplayName="@(p => p.ProductName ?? "未知商品")"
                                         EmptyMessage="此尺寸目前沒有被任何商品使用"
                                         EmptyIcon="fas fa-box-open">
                        <ExtraContentTemplate Context="product">
                            <small class="text-muted d-block mb-2">代碼：@product.ProductCode</small>
                            @if (!string.IsNullOrEmpty(product.Description))
                            {
                                <p class="card-text small text-muted mb-2">@product.Description</p>
                            }
                        </ExtraContentTemplate>
                    </RelationListComponent>
                </div>
            },
            
            new GenericDetailPageComponent<Size, ISizeService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div>
                    <SystemInfoDisplayComponent 
                        CreatedAt="@(size?.CreatedAt ?? DateTime.MinValue)"
                        UpdatedAt="@size?.UpdatedAt"
                        CreatedBy="@size?.CreatedBy"
                        UpdatedBy="@size?.UpdatedBy"
                        Remarks="@size?.Description"
                        ShowTimeline="true"
                        ShowRemarks="true" />
                </div>
            }        
        };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetTabSections), GetType(),
                additionalData: new { SizeId });
            throw;
        }
    }

    // 取得尺寸基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetSizeBasicFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
                new()
                {
                    Label = "尺寸代碼",
                    Value = size?.SizeCode,
                    IsPrimary = true,
                    ValueBold = true,
                    IconClass = "fas fa-barcode",
                    IconBgClass = "bg-primary bg-opacity-10",
                    IconTextClass = "text-primary",
                    EmptyText = "未設定"
                },
                new()
                {
                    Label = "尺寸名稱",
                    Value = size?.SizeName,
                    ValueBold = true,
                    IconClass = "fas fa-tag",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info"
                },
                new()
                {
                    Label = "狀態",
                    CustomContent = @<div>
                        @if (size?.Status != null)
                        {
                            <StatusBadgeComponent Status="@size.Status" />
                        }
                    </div>,
                    IconClass = "fas fa-toggle-on",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "描述",
                    Value = size?.Description,
                    Format = BasicInfoDisplayComponent.FieldFormat.MultiLine,
                    IconClass = "fas fa-sticky-note",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning",
                    ColSize = 12,
                    VisibilityCondition = () => !string.IsNullOrEmpty(size?.Description)
                }        
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetSizeBasicFields), GetType(),
                additionalData: new { SizeId });
            throw;
        }
    }

    // 處理商品卡片點擊事件
    private async Task OnProductCardClick(int productId)
    {
        try
        {
            Navigation.NavigateTo($"/products/detail/{productId}");
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnProductCardClick),
                GetType(),
                additionalData: new { ProductId = productId, SizeId }
            );
        }
    }
}




