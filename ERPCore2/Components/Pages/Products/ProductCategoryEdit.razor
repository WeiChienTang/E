@page "/product-categories/edit"
@page "/product-categories/edit/{id:int?}"

@inject IProductCategoryService ProductCategoryService
@inject NavigationManager Navigation
@inject INotificationService NotificationService 
@rendermode InteractiveServer

    <GenericEditPageComponent TEntity="ProductCategory" 
                            TService="IProductCategoryService"
                            @ref="editComponent"
                            Id="@Id"
                            Service="@ProductCategoryService"
                            EntityName="商品分類"
                            EntityNamePlural="商品分類"
                            PageTitle="@(Id.HasValue ? "編輯商品分類" : "新增商品分類")"
                            IndexRoute="/product-categories"
                            FormTitle="基本資料"
                            FormSubtitle="商品分類的基本資訊與階層設定"
                            UseGenericForm="true"
                            FormFields="@GetFormFields()"
                            FormSections="@formSections"
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadProductCategoryData"
                            UseGenericSave="true"
                            SaveSuccessMessage="@(Id.HasValue ? "商品分類更新成功" : "商品分類新增成功")"
                            SaveFailureMessage="商品分類儲存失敗"
                            RequiredPermission="ProductCategory.Read" />

@code {
    [Parameter] public int? Id { get; set; }
    
    private GenericEditPageComponent<ProductCategory, IProductCategoryService>? editComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), NotificationService);
            return Task.CompletedTask;
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("商品分類管理", "/product-categories"),
                new(Id.HasValue ? "編輯商品分類" : "新增商品分類")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(), NotificationService);
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(ProductCategory.Code),
                    Label = "分類代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入分類代碼",
                    IsRequired = true,
                    MaxLength = 20,
                    HelpText = "唯一識別此分類的代碼，最多20個字元"
                },
                new()
                {
                    PropertyName = nameof(ProductCategory.CategoryName),
                    Label = "分類名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入分類名稱",
                    IsRequired = true,
                    MaxLength = 100,
                    HelpText = "顯示用的分類名稱，最多100個字元"
                },
                
                // 詳細資訊區段
                new()
                {
                    PropertyName = nameof(ProductCategory.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註",
                    MaxLength = 200,
                    HelpText = "額外的備註說明，最多200個字元"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(ProductCategory.Code), "基本資訊" },
                { nameof(ProductCategory.CategoryName), "基本資訊" },
                { nameof(ProductCategory.Remarks), "額外資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "初始化表單欄位時發生錯誤", GetType(), NotificationService);
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        try
        {
            return formFields;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "取得表單欄位時發生錯誤", GetType(), NotificationService);
            return new List<FormFieldDefinition>();
        }
    }

    private async Task<ProductCategory?> LoadProductCategoryData()
    {
        try
        {
            if (!Id.HasValue) 
            {
                // 新增模式：建立新的商品分類實體並生成代碼
                return new ProductCategory
                {
                    CategoryName = string.Empty,
                    Code = await GenerateCategoryCodeAsync()
                };
            }

            var productCategory = await ProductCategoryService.GetByIdAsync(Id.Value);            
            
            if (productCategory == null)
            {
                await NotificationService.ShowErrorAsync("找不到指定的商品分類資料");
                Navigation.NavigateTo("/product-categories");
                return null;
            }
            return productCategory;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadProductCategoryData), GetType());
            Navigation.NavigateTo("/product-categories");
            return null;
        }
    }

    private async Task<string> GenerateCategoryCodeAsync()
    {
        try
        {
            // 簡單的分類代碼生成邏輯：CAT + 時間戳
            var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            var baseCode = $"CAT{timestamp}";
            
            // 檢查是否重複，如果重複則加上隨機數
            var isExists = await ProductCategoryService.IsCategoryCodeExistsAsync(baseCode);
            if (isExists)
            {
                var random = new Random().Next(100, 999);
                baseCode = $"CAT{timestamp}{random}";
            }
            
            return baseCode;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GenerateCategoryCodeAsync), GetType(),
                additionalData: "生成分類代碼時發生錯誤"
            );
            // 如果生成失敗，返回預設格式
            return $"CAT{DateTime.Now:yyyyMMddHHmmss}";
        }
    }
}

