@page "/colors/edit"
@page "/colors/edit/{id:int?}"

@inject IColorService ColorService
@inject INotificationService NotificationService 
@rendermode InteractiveServer

    <GenericEditPageComponent TEntity="Color" 
                            TService="IColorService"
                            @ref="editComponent"
                            Id="@Id"
                            Service="@ColorService"
                            EntityName="顏色"
                            EntityNamePlural="顏色"
                            PageTitle="@(Id.HasValue ? "編輯顏色" : "新增顏色")"
                            IndexRoute="/colors"
                            FormTitle="基本資料"
                            FormSubtitle="顏色的基本資訊"
                            FormFields="@GetFormFields()"
                            FormSections="@formSections"
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadColorData"
                            UseGenericSave="true"
                            SaveSuccessMessage="@(Id.HasValue ? "顏色更新成功" : "顏色新增成功")"
                            SaveFailureMessage="顏色儲存失敗"
                            RequiredPermission="@(Id.HasValue ? "Color.Update" : "Color.Create")" />

@code {
    [Parameter] public int? Id { get; set; }
    
    private GenericEditPageComponent<Color, IColorService>? editComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(), NotificationService);
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("顏色管理", "/colors"),
                new(Id.HasValue ? "編輯顏色" : "新增顏色")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(), NotificationService);
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(Color.Code),
                    Label = "顏色代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入顏色代碼",
                    IsRequired = true,
                    MaxLength = 20,
                    HelpText = "唯一識別此顏色的代碼，最多20個字元"
                },
                new()
                {
                    PropertyName = nameof(Color.Name),
                    Label = "顏色名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入顏色名稱",
                    IsRequired = true,
                    MaxLength = 50,
                    HelpText = "顯示用的顏色名稱，最多50個字元"
                },
                new()
                {
                    PropertyName = nameof(Color.Status),
                    Label = "狀態",
                    FieldType = FormFieldType.Select,
                    Options = new List<SelectOption>
                    {
                        new() { Text = "啟用", Value = "Active" },
                        new() { Text = "停用", Value = "Inactive" }
                    },
                    HelpText = "設定此顏色的啟用狀態"
                },
                // 詳細資訊區段
                new()
                {
                    PropertyName = nameof(Color.Description),
                    Label = "描述",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入顏色描述",
                    Rows = 3,
                    MaxLength = 200,
                    HelpText = "額外的顏色說明，最多200個字元"
                },
                // 其他資訊區段
                new()
                {
                    PropertyName = nameof(Color.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註",
                    Rows = 2,
                    HelpText = "其他相關備註資訊"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(Color.Name), "基本資訊" },
                { nameof(Color.Code), "基本資訊" },
                { nameof(Color.Status), "設定" },
                { nameof(Color.Description), "詳細資訊" },
                { nameof(Color.Remarks), "額外資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "初始化表單欄位時發生錯誤", GetType(), NotificationService);
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        try
        {
            return formFields;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "取得表單欄位時發生錯誤", GetType(), NotificationService);
            return new List<FormFieldDefinition>();
        }
    }

    private async Task<Color?> LoadColorData()
    {
        try
        {
            if (!Id.HasValue) 
            {
                // 新增模式：建立新的顏色實體並生成代碼
                return new Color
                {
                    Name = string.Empty,
                    Code = await GenerateColorCodeAsync(),
                    Status = EntityStatus.Active
                };
            }

            var color = await ColorService.GetByIdAsync(Id.Value);            
            
            if (color == null)
            {
                await NotificationService.ShowErrorAsync("找不到指定的顏色資料");
                return null;
            }
            return color;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadColorData), GetType(), NotificationService);
            return null;
        }
    }

    private async Task<string> GenerateColorCodeAsync()
    {
        try
        {
            // 簡單的顏色代碼生成邏輯：COL + 時間戳
            var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            var baseCode = $"COL{timestamp}";
            
            // 檢查是否重複，如果重複則加上隨機數
            var isExists = await ColorService.IsCodeExistsAsync(baseCode);
            if (isExists)
            {
                var random = new Random().Next(100, 999);
                baseCode = $"COL{timestamp}{random}";
            }
            
            return baseCode;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GenerateColorCodeAsync), GetType(),
                additionalData: "生成顏色代碼時發生錯誤"
            );
            // 如果生成失敗，返回預設格式
            return $"COL{DateTime.Now:yyyyMMddHHmmss}";
        }
    }
}

