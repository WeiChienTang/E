@page "/product-categories"
@inject IProductCategoryService ProductCategoryService
@rendermode InteractiveServer
@inject INotificationService NotificationService

<GenericIndexPageComponent TEntity="ProductCategory" 
                        TService="IProductCategoryService"
                        Service="@ProductCategoryService"
                        EntityBasePath="/product-categories"                          
                        PageTitle="商品類型"
                        PageSubtitle="管理所有商品類型資料與階層結構"
                        DataLoader="@LoadDataAsync"
                        FilterApplier="@ApplyProductCategoryFilters"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        EntityName="商品類型"
                        GetEntityDisplayName="@(category => category.Name)"
                        RequiredPermission="ProductCategory.Read"
                        OnAddClick="@modalHandler.ShowAddModalAsync"
                        OnRowClick="@modalHandler.ShowEditModalAsync"
                        @ref="indexComponent">
</GenericIndexPageComponent>

<ProductCategoryEditModalComponent IsVisible="@showEditModal"
                                  IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                                  ProductCategoryId="@editingProductCategoryId"
                                  OnProductCategorySaved="@modalHandler.OnEntitySavedAsync"
                                  OnCancel="@modalHandler.OnModalCancelAsync" />
@code {
    // 組件參考
    private GenericIndexPageComponent<ProductCategory, IProductCategoryService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingProductCategoryId = null;
    
    // Modal 處理器
    private ModalHandler<ProductCategory, GenericIndexPageComponent<ProductCategory, IProductCategoryService>> modalHandler = default!;
    
    // 欄位配置
    private ProductCategoryFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<ProductCategory, GenericIndexPageComponent<ProductCategory, IProductCategoryService>>(
                id => editingProductCategoryId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 建立欄位配置（傳遞 NotificationService）
            fieldConfiguration = new ProductCategoryFieldConfiguration(NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化產品分類頁面失敗");
            await NotificationService.ShowErrorAsync("初始化產品分類頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("商品類型管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入產品分類資料
    private async Task<List<ProductCategory>> LoadDataAsync()
    {
        try
        {
            return await ProductCategoryService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadDataAsync), GetType(), additionalData: "載入產品分類資料失敗");
            await NotificationService.ShowErrorAsync("載入產品分類資料失敗");
            // 設定安全的預設值
            return new List<ProductCategory>();
        }
    }

    private IQueryable<ProductCategory> ApplyProductCategoryFilters(SearchFilterModel searchModel, IQueryable<ProductCategory> query)
    {
        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyProductCategoryFilters), GetType());
    }
}
