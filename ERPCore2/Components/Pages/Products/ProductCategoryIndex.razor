@page "/product-categories"
@inject IProductCategoryService ProductCategoryService

@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="ProductCategory" 
                        TService="IProductCategoryService"
                        Service="@ProductCategoryService"
                        EntityBasePath="/product-categories"                          
                        PageTitle="商品類型"
                        PageSubtitle="管理所有商品類型資料與階層結構"
                        DataLoader="@LoadDataAsync"
                        FilterApplier="@ApplyProductCategoryFilters"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        EntityName="商品類型"
                        GetEntityDisplayName="@(category => category.CategoryName)"
                        RequiredPermission="ProductCategory.Read"
                        OnAddClick="@ShowAddModal"
                        OnRowClick="@ShowEditModal"
                        @ref="indexComponent">
</GenericIndexPageComponent>

<ProductCategoryEditModalComponent IsVisible="@showEditModal"
                                  IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                                  ProductCategoryId="@editingProductCategoryId"
                                  OnProductCategorySaved="@OnProductCategorySaved"
                                  OnCancel="@OnModalCancel" />
@code {
    private GenericIndexPageComponent<ProductCategory, IProductCategoryService> indexComponent = default!;
    
    // 設定選項
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingProductCategoryId = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InitializeBreadcrumbs();
            await InitializeFilters();
            await InitializeTableColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType(),
                additionalData: "初始化商品類型頁面失敗"
            );
        }
    }

    private async Task InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("商品類型管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType()
            );
        }
    }

    private async Task InitializeFilters()
    {
        try
        {
            // 建立篩選定義（狀態篩選器會由 GenericIndexPageComponent 自動添加）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Code", "分類代碼", "輸入分類代碼搜尋")
                .AddText("CategoryName", "分類名稱", "輸入分類名稱搜尋")                
                .Build();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    private async Task InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("分類代碼", nameof(ProductCategory.Code)),
                TableColumnDefinition.Text("分類名稱", nameof(ProductCategory.CategoryName)),
                TableColumnDefinition.Text("備註", nameof(ProductCategory.Remarks))
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
        }
    }    // 資料載入委派
    private async Task<List<ProductCategory>> LoadDataAsync()
    {
        try
        {
            return await ProductCategoryService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadDataAsync),
                GetType(),
                additionalData: "載入商品類型資料失敗"
            );
            return new List<ProductCategory>();
        }
    }

    // 篩選邏輯委派
    private IQueryable<ProductCategory> ApplyProductCategoryFilters(SearchFilterModel searchModel, IQueryable<ProductCategory> query)
    {
        var filterActions = new List<Func<SearchFilterModel, IQueryable<ProductCategory>, IQueryable<ProductCategory>>>
        {
            // 應用基礎實體篩選（狀態、備註）
            (model, q) => FilterHelper.ApplyBaseEntityFilters(model, q),
            
            // 分類名稱篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "CategoryName", c => c.CategoryName),
            
            // 分類代碼篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "Code", c => c.Code, allowNull: true),
        };

        return FilterHelper.ApplyFiltersWithErrorHandling(
            searchModel,
            query,
            filterActions,
            q => q.OrderBy(c => c.CategoryName), // 預設排序
            nameof(ApplyProductCategoryFilters),
            GetType()
        );
    }

    // ===== Modal 相關方法 =====

    private async Task ShowAddModal()
    {
        try
        {
            editingProductCategoryId = null;
            showEditModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowAddModal), GetType());
        }
    }

    private async Task ShowEditModal(ProductCategory productCategory)
    {
        try
        {
            if (productCategory?.Id != null)
            {
                editingProductCategoryId = productCategory.Id;
                showEditModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowEditModal), GetType());
        }
    }

    private async Task OnProductCategorySaved(ProductCategory savedProductCategory)
    {
        try
        {
            // 關閉 Modal
            showEditModal = false;
            editingProductCategoryId = null;
            
            // 重新載入資料
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnProductCategorySaved), GetType());
        }
    }

    private async Task OnModalCancel()
    {
        try
        {
            showEditModal = false;
            editingProductCategoryId = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnModalCancel), GetType());
        }
    }
}
