@page "/sizes/edit"
@page "/sizes/edit/{id:int?}"

@inject ISizeService SizeService
@inject INotificationService NotificationService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<GenericEditPageComponent TEntity="Size" 
                         TService="ISizeService"
                         Id="@Id"
                         Entity="@size"
                         Service="@SizeService"
                         EntityName="尺寸"
                         EntityNamePlural="尺寸"
                         PageTitle="@(Id.HasValue ? "編輯尺寸" : "新增尺寸")"
                         FormTitle="基本資料"
                         FormSubtitle="尺寸規格的基本設定資訊"
                         IndexRoute="/sizes"
                         UseGenericForm="true"
                         FormFields="@basicFormFields"
                         FormSections="@basicFormSections"
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadSizeData"
                         SaveHandler="@SaveSize"
                         AdditionalDataLoader="@LoadAdditionalData"
                         @ref="editComponent"
                        RequiredPermission="Size.Read">
</GenericEditPageComponent>


@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<Size, ISizeService> editComponent = default!;
    
    // 資料模型
    private Size size = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> basicFormFields = new();
    private Dictionary<string, string> basicFormSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeBasicFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: "初始化尺寸編輯頁面時發生錯誤"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("尺寸維護", "/sizes"),
                new(Id.HasValue ? "編輯尺寸" : "新增尺寸")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: "初始化麵包屑導航時發生錯誤"
            );
        }
    }

    private Task LoadAdditionalData()
    {
        try
        {
            // Size 實體比較簡單，不需要載入額外的選項資料
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalData), GetType(),
                additionalData: "載入額外資料時發生錯誤"
            );
        }
        
        return Task.CompletedTask;
    }

    private void InitializeBasicFormFields()
    {
        try
        {
            basicFormFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(Size.Code),
                    Label = "尺寸代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入尺寸代碼",
                    IsRequired = true,
                    MaxLength = 20,
                    HelpText = "唯一識別此尺寸的代碼，最多20個字元"
                },
                new()
                {
                    PropertyName = nameof(Size.SizeName),
                    Label = "尺寸名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入尺寸名稱",
                    IsRequired = true,
                    MaxLength = 50,
                    HelpText = "顯示用的尺寸名稱，最多50個字元"
                }
            };

            basicFormSections = new Dictionary<string, string>
            {
                { nameof(Size.Code), "基本資訊" },
                { nameof(Size.SizeName), "基本資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBasicFormFields), GetType(),
                additionalData: "初始化基本表單欄位時發生錯誤"
            );
        }
    }
    
    private async Task<Size?> LoadSizeData()
    {
        try
        {
            if (!Id.HasValue)
            {
                // 新增模式：建立新的尺寸實體並生成代碼
                size = new Size
                {
                    Code = await GenerateSizeCodeAsync(),
                    Status = EntityStatus.Active
                };
                return size;
            }

            // 編輯模式：載入現有尺寸
            var existingSize = await SizeService.GetByIdAsync(Id.Value);
            if (existingSize != null)
            {
                size = existingSize;
            }
            
            return existingSize;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSizeData), GetType(),
                additionalData: $"載入尺寸資料時發生錯誤，ID: {Id}"
            );
            return null;
        }
    }

    private async Task<string> GenerateSizeCodeAsync()
    {
        try
        {
            // 簡單的尺寸代碼生成邏輯：SIZE + 時間戳
            var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            var baseCode = $"SIZE{timestamp}";
            
            // 檢查是否重複，如果重複則加上隨機數
            var isExists = await SizeService.IsSizeCodeExistsAsync(baseCode);
            if (isExists)
            {
                var random = new Random().Next(100, 999);
                baseCode = $"SIZE{timestamp}{random}";
            }
            
            return baseCode;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GenerateSizeCodeAsync), GetType(),
                additionalData: "生成尺寸代碼時發生錯誤"
            );
            // 如果生成失敗，返回預設格式
            return $"SIZE{DateTime.Now:yyyyMMddHHmmss}";
        }
    }

    private async Task<bool> SaveSize(Size entity)
    {
        try
        {
            ServiceResult result;
            
            if (!Id.HasValue)
            {
                // 新增模式
                result = await SizeService.CreateAsync(entity);
                if (result.IsSuccess)
                {
                    await NotificationService.ShowSuccessAsync("新增尺寸", "尺寸新增成功！");
                    // 導航到編輯頁面
                    Navigation.NavigateTo($"/sizes/edit/{entity.Id}");
                    return true;
                }
            }
            else
            {
                // 編輯模式
                result = await SizeService.UpdateAsync(entity);
                if (result.IsSuccess)
                {
                    await NotificationService.ShowSuccessAsync("更新尺寸", "尺寸更新成功！");
                    return true;
                }
            }

            // 顯示錯誤訊息
            await NotificationService.ShowErrorAsync(
                Id.HasValue ? "更新尺寸" : "新增尺寸", 
                result.ErrorMessage ?? "操作失敗");
            return false;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveSize), GetType(),
                additionalData: $"儲存尺寸資料時發生錯誤，ID: {Id}, 操作: {(Id.HasValue ? "更新" : "新增")}"
            );
            return false;
        }
    }
}

