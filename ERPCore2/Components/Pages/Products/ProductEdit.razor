@page "/products/edit"
@page "/products/edit/{id:int?}"

@inject IProductService ProductService
@inject IProductCategoryService ProductCategoryService
@inject ISupplierService SupplierService
@inject ISizeService SizeService
@inject INotificationService NotificationService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<GenericEditPageComponent TEntity="Product" 
                         TService="IProductService"
                         Id="@Id"
                         Entity="@product"
                         Service="@ProductService"
                         EntityName="產品"
                         EntityNamePlural="產品"
                         PageTitle="@GetPageTitle()"
                         FormTitle="基本資料"
                         FormSubtitle="產品的基本資訊"
                         IndexRoute="/products"
                         RequiredPermission="@(Id.HasValue ? "Product.Update" : "Product.Create")"
                         BreadcrumbItems="@breadcrumbItems"
                         FormFields="@formFields"                         
                         FormSections="@formSections"
                         DataLoader="LoadProductData"
                         AdditionalDataLoader="@LoadAdditionalData"
                         SaveHandler="SaveProduct"
                         UseGenericForm="true">
      <AdditionalSections>
        @if (Id.HasValue && product != null)
        {
            @* 供應商管理區塊 *@
            <AssociationManagerComponent TAssociationEntity="ProductSupplier"
                                       TParentEntity="Product"
                                       TRelatedEntity="Supplier"
                                       Items="@productSuppliers"
                                       AvailableRelatedEntities="@availableSuppliers"
                                       ParentEntityId="@(product?.Id ?? 0)"
                                       Title="供應商管理"
                                       Icon="truck"
                                       ItemDisplayName="供應商"
                                       RelatedEntityDisplayName="供應商"
                                       ShowPrimaryOption="true"
                                       GetIsPrimary="@(ps => ps.IsPrimarySupplier)"
                                       GetIsActive="@(ps => ps.Status == EntityStatus.Active)"
                                       GetRelatedEntityDisplayText="@(ps => ps.Supplier?.CompanyName ?? "")"
                                       GetRelatedEntityId="@(s => s.Id)"
                                       GetRelatedEntityText="@(s => $"{s.CompanyName} ({s.SupplierCode})")"
                                       SetIsPrimary="@((ps, isPrimary) => ps.IsPrimarySupplier = isPrimary)"
                                       SetParentId="@((ps, parentId) => ps.ProductId = parentId)"
                                       SetRelatedEntityId="@((ps, supplierId) => ps.SupplierId = supplierId)"
                                       ItemsChanged="@OnProductSuppliersChanged"
                                       OnBeforeAdd="@BeforeAddSupplier"
                                       OnAfterAdd="@AfterAddSupplier" />
        }
    </AdditionalSections>
</GenericEditPageComponent>

@* 移除舊的 Modal 代碼 *@

@code {
    [Parameter] public int? Id { get; set; }
    
    private Product product = new();
    private List<ProductCategory> productCategories = new();
    private List<ProductSupplier> productSuppliers = new();
    private List<Supplier> suppliers = new();
    private List<Supplier> availableSuppliers = new();
    private List<Unit> units = new();
    private List<Size> sizes = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // UI 狀態
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumb();
            InitializeBasicFormFields(); // 先初始化基本表單欄位
            // AdditionalDataLoader 會由 GenericEditPageComponent 自動調用
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: new { ProductId = Id });
                
            // 確保基本初始化完成，避免程式崩潰
            try
            {
                breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
                {
                    new() { Text = "首頁", Href = "/" },
                    new() { Text = "產品管理", Href = "/products" },
                    new() { Text = Id.HasValue ? "編輯產品" : "新增產品" }
                };
                formFields = new List<FormFieldDefinition>();
                formSections = new Dictionary<string, string>();
            }
            catch
            {
                // 如果連預設值都設定失敗，至少確保不是 null
                breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
                formFields ??= new List<FormFieldDefinition>();
                formSections ??= new Dictionary<string, string>();
            }
        }
    }
    
    private void InitializeBreadcrumb()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new() { Text = "首頁", Href = "/" },
                new() { Text = "產品管理", Href = "/products" },
                new() { Text = Id.HasValue ? "編輯產品" : "新增產品" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumb), GetType(),
                additionalData: new { ProductId = Id });
            
            // 設定預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    private void InitializeBasicFormFields()
    {
        try
        {
            // 先初始化不需要選項的基本欄位
            formFields = new List<FormFieldDefinition>
            {
                new() {
                    PropertyName = nameof(Product.ProductCode),
                    Label = "產品代碼",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "輸入產品代碼",
                },
                new() {
                    PropertyName = nameof(Product.ProductName),
                    Label = "產品名稱",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "輸入產品名稱",
                },

                new() {
                    PropertyName = nameof(Product.Description),
                    Label = "產品描述",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "輸入產品描述",
                },
                new() {
                    PropertyName = nameof(Product.Specification),
                    Label = "規格說明",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "輸入規格說明",
                },
                new() {
                    PropertyName = nameof(Product.UnitPrice),
                    Label = "售價",
                    FieldType = FormFieldType.Number,
                    Placeholder = "0",
                },
                new() {
                    PropertyName = nameof(Product.CostPrice),
                    Label = "成本價",
                    FieldType = FormFieldType.Number,
                    Placeholder = "0",
                },
                new() {
                    PropertyName = nameof(Product.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "輸入備註",
                }
            };

            formSections = new Dictionary<string, string>
            {
                // 基本資訊區塊
                { nameof(Product.ProductCode), "基本資訊" },
                { nameof(Product.ProductName), "基本資訊" },
                
                // 價格與其他資訊區塊
                { nameof(Product.UnitPrice), "價格與其他資訊" },
                { nameof(Product.CostPrice), "價格與其他資訊" },
                
                // 詳細說明與其他資訊區塊（放在最下方）
                { nameof(Product.Description), "額外資訊" },
                { nameof(Product.Specification), "額外資訊" },
                { nameof(Product.Remarks), "額外資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBasicFormFields), GetType(),
                additionalData: new { ProductId = Id });
            
            // 設定安全的預設值
            formFields = new List<FormFieldDefinition>();
            formSections = new Dictionary<string, string>();
        }
    }

    private async Task LoadAdditionalData()
    {
        try
        {
            // 載入基礎選項資料
            await LoadReferenceData();
            
            // 初始化需要選項的表單欄位
            InitializeFormFieldsWithOptions();
            
            // 不需要手動調用 StateHasChanged()，GenericEditPageComponent 會處理
        }        
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalData), GetType(),
                additionalData: new { 
                    ProductId = Id,
                    ExpectedData = "ProductCategories, Suppliers, Units, Sizes"
                });
            
            // 設定安全的預設值，確保程式不會崩潰
            productCategories = new List<ProductCategory>();
            suppliers = new List<Supplier>();
            units = new List<Unit>();
            sizes = new List<Size>();
            
            // 即使失敗也要初始化表單欄位
            try
            {
                InitializeFormFieldsWithOptions();
            }
            catch
            {
                // 如果初始化表單欄位也失敗，至少確保基本結構存在
                formFields ??= new List<FormFieldDefinition>();
                formSections ??= new Dictionary<string, string>();
            }
        }
    }

    private void InitializeFormFieldsWithOptions()
    {
        try
        {
            // 找到需要添加選項的欄位並添加到現有的formFields
            var productCategoryField = new FormFieldDefinition
            {
                PropertyName = nameof(Product.ProductCategoryId),
                Label = "產品分類",
                FieldType = FormFieldType.Select,
                IsRequired = productCategories.Any(), // 只有當有分類資料時才設為必填
                Options = productCategories.Select(pc => new SelectOption 
                { 
                    Value = pc.Id.ToString(), 
                    Text = pc.CategoryName 
                }).ToList(),
                // 設定預設值為"半成品"分類，如果找不到則使用第一個可用的分類
                DefaultValue = productCategories.FirstOrDefault(pc => pc.CategoryName == "半成品")?.Id.ToString() 
                              ?? productCategories.FirstOrDefault()?.Id.ToString()
            };

            var unitField = new FormFieldDefinition
            {
                PropertyName = nameof(Product.UnitId),
                Label = "單位",
                FieldType = FormFieldType.Select,
                IsRequired = units.Any(), // 只有當有單位資料時才設為必填
                Options = units.Select(u => new SelectOption 
                { 
                    Value = u.Id.ToString(), 
                    Text = u.UnitName 
                }).ToList(),
                // 設定預設值為"個"單位，如果找不到則使用第一個可用的單位
                DefaultValue = units.FirstOrDefault(u => u.UnitName == "個")?.Id.ToString() 
                              ?? units.FirstOrDefault()?.Id.ToString()
            };

            var sizeField = new FormFieldDefinition
            {
                PropertyName = nameof(Product.SizeId),
                Label = "尺寸",
                FieldType = FormFieldType.Select,
                IsRequired = false, // 尺寸通常不是必填
                Options = sizes.Select(s => new SelectOption 
                { 
                    Value = s.Id.ToString(), 
                    Text = s.SizeName 
                }).ToList(),
            };

            // 插入到適當位置（ProductName之後）
            var insertIndex = formFields.FindIndex(f => f.PropertyName == nameof(Product.ProductName)) + 1;
            if (insertIndex > 0)
            {
                formFields.Insert(insertIndex, productCategoryField);
                formFields.Insert(insertIndex + 1, unitField);
                formFields.Insert(insertIndex + 2, sizeField);
            }
            else
            {
                // 如果找不到ProductName欄位，就添加到開頭
                formFields.Insert(0, productCategoryField);
                formFields.Insert(1, unitField);
                formFields.Insert(2, sizeField);
            }

            // 更新表單區段
            formSections[nameof(Product.ProductCategoryId)] = "基本資訊";
            formSections[nameof(Product.UnitId)] = "基本資訊";
            formSections[nameof(Product.SizeId)] = "基本資訊";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFieldsWithOptions), GetType(),
                additionalData: new { ProductId = Id });
            
            // 如果失敗，至少確保基本結構存在
            formFields ??= new List<FormFieldDefinition>();
            formSections ??= new Dictionary<string, string>();
        }
    }

    private string GetPageTitle()
    {
        try
        {
            return Id.HasValue ? "編輯產品" : "新增產品";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetPageTitle), GetType(),
                additionalData: new { ProductId = Id });
            
            return "產品管理";
        }
    }

    // 資料載入方法
    private async Task<Product?> LoadProductData()
    {
        try
        {
            // 載入基礎選項資料
            await LoadReferenceData();

            if (Id.HasValue)
            {
                // 載入產品資料
                product = await ProductService.GetByIdAsync(Id.Value) ?? new Product();
                
                // 載入產品供應商資料
                if (product.Id > 0)
                {
                    productSuppliers = await ProductService.GetProductSuppliersAsync(product.Id);
                    UpdateAvailableSuppliers();
                }
                
                return product;
            }
            else
            {
                product = new Product();
                
                // 使用服務的初始化方法設定預設值
                ProductService.InitializeNewProduct(product);
                
                // 注意：產品分類和單位的預設值現在由 GenericFormComponent 通過 DefaultValue 自動處理
                
                productSuppliers.Clear();
                return product;
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadProductData), GetType(),
                additionalData: new { ProductId = Id });
            
            StateHasChanged();
            var errorProduct = new Product();
            ProductService.InitializeNewProduct(errorProduct);
            return errorProduct;
        }
    }

    private async Task LoadReferenceData()
    {
        try
        {
            // 依序載入資料以避免 DbContext 併發問題
            var categoryResult = await ProductCategoryService.GetAllAsync();
            productCategories = categoryResult?.Where(c => c.Status == EntityStatus.Active).ToList() ?? new List<ProductCategory>();
            
            var supplierResult = await SupplierService.GetAllAsync();
            suppliers = supplierResult?.Where(s => s.Status == EntityStatus.Active).ToList() ?? new List<Supplier>();
            
            units = await ProductService.GetUnitsAsync() ?? new List<Unit>();
            
            sizes = await SizeService.GetActiveSizesAsync() ?? new List<Size>();
            
            // 確保至少有基本的資料結構
            productCategories ??= new List<ProductCategory>();
            suppliers ??= new List<Supplier>();
            units ??= new List<Unit>();
            sizes ??= new List<Size>();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadReferenceData), GetType(),
                additionalData: new { PageName = "ProductEdit" });
            
            // 設定安全的預設值
            productCategories = new List<ProductCategory>();
            suppliers = new List<Supplier>();
            units = new List<Unit>();
            sizes = new List<Size>();
            StateHasChanged();
        }
    }
    
    // 儲存產品資料
    private async Task<bool> SaveProduct(Product entity)
    {
        try
        {
            ServiceResult<Product> result;
            
            if (Id.HasValue)
            {
                result = await ProductService.UpdateAsync(entity);
            }
            else
            {
                result = await ProductService.CreateAsync(entity);
            }            if (result.IsSuccess)
            {
                product = result.Data!;
                return true;
            }
            else
            {
                // 顯示錯誤通知
                await NotificationService.ShowErrorAsync("儲存產品失敗", result.ErrorMessage);
                return false;
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveProduct), GetType(),
                additionalData: new { ProductId = entity.Id, ProductName = entity.ProductName });
            
            StateHasChanged();
            return false;
        }    }

#region 事件處理方法

    private Task OnProductSuppliersChanged(List<ProductSupplier> updatedSuppliers)
    {
        try
        {
            productSuppliers = updatedSuppliers;
            UpdateAvailableSuppliers();
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnProductSuppliersChanged), GetType(),
                additionalData: new { ProductId = Id, SuppliersCount = updatedSuppliers?.Count });
            
            return Task.CompletedTask;
        }
    }
    
    private Task<bool> BeforeAddSupplier(ProductSupplier newSupplier)
    {
        try
        {
            // 檢查是否已經存在相同的供應商
            var exists = productSuppliers.Any(ps => ps.SupplierId == newSupplier.SupplierId);
            if (exists)
            {
                // 這裡可以顯示錯誤訊息
                return Task.FromResult(false);
            }
            return Task.FromResult(true);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(BeforeAddSupplier), GetType(),
                additionalData: new { ProductId = Id, SupplierId = newSupplier?.SupplierId });
            
            return Task.FromResult(false);
        }
    }

    private async Task AfterAddSupplier(ProductSupplier newSupplier)
    {
        try
        {
            // 載入供應商詳細資料
            var supplier = suppliers.FirstOrDefault(s => s.Id == newSupplier.SupplierId);
            if (supplier != null)
            {
                newSupplier.Supplier = supplier;
            }

            // 儲存到資料庫
            if (Id.HasValue)
            {
                var result = await ProductService.UpdateProductSuppliersAsync(Id.Value, productSuppliers);
                if (!result.IsSuccess)
                {
                    // 顯示錯誤通知
                    await NotificationService.ShowErrorAsync("新增供應商失敗", result.ErrorMessage);
                    
                    // 儲存失敗，移除剛才新增的項目
                    productSuppliers.Remove(newSupplier);
                    StateHasChanged();
                }
            }

            UpdateAvailableSuppliers();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(AfterAddSupplier), GetType(),
                additionalData: new { ProductId = Id, SupplierId = newSupplier.SupplierId });
            
            // 發生錯誤時移除剛才新增的項目
            productSuppliers.Remove(newSupplier);
            UpdateAvailableSuppliers();
            StateHasChanged();
        }
    }

    // 供應商管理方法
    private void UpdateAvailableSuppliers()
    {
        try
        {
            var assignedSupplierIds = productSuppliers.Select(ps => ps.SupplierId).ToHashSet();
            availableSuppliers = suppliers.Where(s => !assignedSupplierIds.Contains(s.Id)).ToList();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(UpdateAvailableSuppliers), GetType(),
                additionalData: new { ProductId = Id, ProductSuppliersCount = productSuppliers?.Count, SuppliersCount = suppliers?.Count });
            
            // 設定預設值
            availableSuppliers = new List<Supplier>();
        }
    }

#endregion
}
