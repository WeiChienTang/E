@page "/products/edit"
@page "/products/edit/{id:int?}"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Data.Enums
@inject IProductService ProductService
@inject IProductCategoryService ProductCategoryService
@inject ISupplierService SupplierService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>@GetPageTitle()</PageTitle>

<GenericMasterDetailEditComponent TMaster="Product" 
                                TService="IProductService"
                                Id="@Id"
                                MasterEntity="@product"
                                Service="@ProductService"
                                EntityName="產品"
                                EntityNamePlural="產品"
                                CreateTitle="新增產品"
                                EditTitle="@($"編輯產品 - {(product?.ProductName ?? "")}")"
                                CreateSubtitle="建立新的產品資料"
                                EditSubtitle="@(product?.ProductCode ?? "")"
                                IndexRoute="/products"
                                BreadcrumbItems="@breadcrumbItems"
                                MasterFormFields="@GetMasterFormFields()"
                                MasterFormSections="@GetMasterFormSections()"
                                MasterFormTitle="基本資料"
                                MasterFormIcon="bi-box"
                                DataLoader="LoadProductData"
                                SaveHandler="SaveProduct"
                                OnSaveSuccess="HandleSaveSuccess"
                                OnCancel="HandleCancel"
                                UseGenericForm="true">
    
    <DetailSections>
        @if (Id.HasValue && product != null)
        {
            @* 供應商管理區塊 *@
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-truck me-2"></i>
                        供應商管理 (@productSuppliers.Count 筆)
                    </h5>
                    <button class="btn btn-sm btn-primary" @onclick="ShowAddSupplierModal">
                        <i class="bi bi-plus me-1"></i>
                        新增供應商
                    </button>
                </div>
                <div class="card-body">
                    @if (productSuppliers.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>供應商</th>
                                        <th>聯絡人</th>
                                        <th>電話</th>
                                        <th>主要供應商</th>
                                        <th>狀態</th>
                                        <th>操作</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ps in productSuppliers)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@ps.Supplier?.CompanyName</strong>
                                                @if (!string.IsNullOrEmpty(ps.Supplier?.SupplierCode))
                                                {
                                                    <br />
                                                    <small class="text-muted">@ps.Supplier.SupplierCode</small>
                                                }
                                            </td>
                                            <td>@ps.Supplier?.ContactPerson</td>
                                            <td>-</td>
                                            <td>
                                                @if (ps.IsPrimarySupplier)
                                                {
                                                    <span class="badge bg-primary">主要</span>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => SetPrimarySupplier(ps)">
                                                        設為主要
                                                    </button>
                                                }
                                            </td>
                                            <td>
                                                @if (ps.Status == EntityStatus.Active)
                                                {
                                                    <span class="badge bg-success">啟用</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">停用</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-danger" @onclick="() => RemoveSupplier(ps)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4 text-muted">
                            <i class="bi bi-truck fs-1 mb-3 d-block"></i>
                            <p>尚未設定供應商</p>
                            <button class="btn btn-outline-primary" @onclick="ShowAddSupplierModal">
                                <i class="bi bi-plus me-1"></i>
                                新增第一個供應商
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
    </DetailSections>
</GenericMasterDetailEditComponent>

@* 新增供應商 Modal *@
@if (showAddSupplierModal)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">新增供應商</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddSupplierModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">選擇供應商</label>
                        <select class="form-select" @bind="selectedSupplierId">
                            <option value="">請選擇供應商</option>
                            @foreach (var supplier in availableSuppliers)
                            {
                                <option value="@supplier.Id">@supplier.CompanyName (@supplier.SupplierCode)</option>
                            }
                        </select>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="newSupplierIsPrimary" id="isPrimaryCheck">
                        <label class="form-check-label" for="isPrimaryCheck">
                            設為主要供應商
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddSupplierModal">取消</button>
                    <button type="button" class="btn btn-primary" @onclick="AddSupplier" disabled="@string.IsNullOrEmpty(selectedSupplierId)">
                        新增
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public int? Id { get; set; }
    
    private Product product = new();
    private List<ProductCategory> productCategories = new();
    private List<ProductSupplier> productSuppliers = new();
    private List<Supplier> suppliers = new();
    private List<Supplier> availableSuppliers = new();
    private List<Unit> units = new();
    
    // Modal 相關
    private bool showAddSupplierModal = false;
    private string selectedSupplierId = string.Empty;
    private bool newSupplierIsPrimary = false;
    
    // UI 狀態
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    protected override void OnInitialized()
    {
        InitializeBreadcrumb();
    }    private void InitializeBreadcrumb()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new() { Text = "首頁", Href = "/" },
            new() { Text = "產品管理", Href = "/products" },
            new() { Text = Id.HasValue ? "編輯產品" : "新增產品" }
        };
    }

    private string GetPageTitle()
    {
        return Id.HasValue ? "編輯產品" : "新增產品";
    }

    // 主表單欄位定義
    private List<FormFieldDefinition> GetMasterFormFields()
    {
        return new List<FormFieldDefinition>
        {
            new() {
                PropertyName = nameof(Product.ProductCode),
                Label = "產品代碼",
                FieldType = FormFieldType.Text,
                IsRequired = true,
                Placeholder = "輸入產品代碼",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.ProductName),
                Label = "產品名稱",
                FieldType = FormFieldType.Text,
                IsRequired = true,
                Placeholder = "輸入產品名稱",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.ProductCategoryId),
                Label = "產品分類",
                FieldType = FormFieldType.Select,
                Options = productCategories.Select(pc => new SelectOption 
                { 
                    Value = pc.Id.ToString(), 
                    Text = pc.CategoryName 
                }).Prepend(new SelectOption { Value = "", Text = "請選擇分類" }).ToList(),
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.UnitId),
                Label = "單位",
                FieldType = FormFieldType.Select,
                Options = units.Select(u => new SelectOption 
                { 
                    Value = u.Id.ToString(), 
                    Text = u.UnitName 
                }).Prepend(new SelectOption { Value = "", Text = "請選擇單位" }).ToList(),
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.IsActive),
                Label = "狀態",
                FieldType = FormFieldType.Select,
                Options = new List<SelectOption>
                {
                    new() { Value = "true", Text = "啟用" },
                    new() { Value = "false", Text = "停用" }
                },
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.Description),
                Label = "產品描述",
                FieldType = FormFieldType.TextArea,
                Placeholder = "輸入產品描述",
                ContainerCssClass = "col-md-12"
            },
            new() {
                PropertyName = nameof(Product.Specification),
                Label = "規格說明",
                FieldType = FormFieldType.TextArea,
                Placeholder = "輸入規格說明",
                ContainerCssClass = "col-md-12"
            },
            new() {
                PropertyName = nameof(Product.UnitPrice),
                Label = "售價",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.CostPrice),
                Label = "成本價",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.CurrentStock),
                Label = "目前庫存",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-4"
            },
            new() {
                PropertyName = nameof(Product.MinStockLevel),
                Label = "最低庫存",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-4"
            },
            new() {
                PropertyName = nameof(Product.MaxStockLevel),
                Label = "最高庫存",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-4"
            },
            new() {
                PropertyName = nameof(Product.Remarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "輸入備註",
                ContainerCssClass = "col-md-12"
            }
        };
    }    // 表單區塊定義
    private Dictionary<string, string> GetMasterFormSections()
    {
        return new Dictionary<string, string>
        {
            // 基本資訊區塊
            { nameof(Product.ProductCode), "基本資訊" },
            { nameof(Product.ProductName), "基本資訊" },
            { nameof(Product.ProductCategoryId), "基本資訊" },
            { nameof(Product.UnitId), "基本資訊" },
            { nameof(Product.IsActive), "基本資訊" },
            
            // 詳細說明區塊
            { nameof(Product.Description), "詳細說明" },
            { nameof(Product.Specification), "詳細說明" },
            
            // 價格與庫存區塊
            { nameof(Product.UnitPrice), "價格與庫存" },
            { nameof(Product.CostPrice), "價格與庫存" },
            { nameof(Product.CurrentStock), "價格與庫存" },
            { nameof(Product.MinStockLevel), "價格與庫存" },
            { nameof(Product.MaxStockLevel), "價格與庫存" },
            
            // 其他資訊區塊
            { nameof(Product.Remarks), "其他資訊" }
        };
    }

    // 資料載入方法
    private async Task<Product?> LoadProductData()
    {
        try
        {
            // 載入基礎選項資料
            await LoadReferenceData();

            if (Id.HasValue)
            {
                // 載入產品資料
                product = await ProductService.GetByIdAsync(Id.Value) ?? new Product();
                
                // 載入產品供應商資料
                if (product.Id > 0)
                {
                    productSuppliers = await ProductService.GetProductSuppliersAsync(product.Id);
                    UpdateAvailableSuppliers();
                }
                
                return product;
            }
            else
            {
                product = new Product();
                productSuppliers.Clear();
                return product;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入產品資料失敗：{ex.Message}");
            return new Product();
        }
    }

    private async Task LoadReferenceData()
    {
        try
        {
            // 依序載入資料以避免 DbContext 併發問題
            var categoryResult = await ProductCategoryService.GetAllAsync();
            productCategories = categoryResult.Where(c => c.Status == EntityStatus.Active).ToList();
            
            var supplierResult = await SupplierService.GetAllAsync();
            suppliers = supplierResult.Where(s => s.Status == EntityStatus.Active).ToList();
            
            units = await ProductService.GetUnitsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入參考資料失敗：{ex.Message}");
        }
    }
    
    // 儲存產品資料
    private async Task<bool> SaveProduct(Product entity)
    {
        try
        {
            ServiceResult<Product> result;
            
            if (Id.HasValue)
            {
                result = await ProductService.UpdateAsync(entity);
            }
            else
            {
                result = await ProductService.CreateAsync(entity);
            }            if (result.IsSuccess)
            {
                product = result.Data!;
                return true;
            }
            else
            {
                Console.WriteLine($"儲存失敗：{result.ErrorMessage}");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"儲存產品資料失敗：{ex.Message}");
            return false;
        }
    }

    // 事件處理方法
    private async Task HandleSaveSuccess()
    {
        await Task.Delay(100); // 給使用者一點反應時間
        Navigation.NavigateTo("/products");
    }

    private async Task HandleCancel()
    {
        Navigation.NavigateTo("/products");
        await Task.CompletedTask;
    }

    // 供應商管理方法
    private void UpdateAvailableSuppliers()
    {
        var assignedSupplierIds = productSuppliers.Select(ps => ps.SupplierId).ToHashSet();
        availableSuppliers = suppliers.Where(s => !assignedSupplierIds.Contains(s.Id)).ToList();
    }

    private void ShowAddSupplierModal()
    {
        UpdateAvailableSuppliers();
        selectedSupplierId = string.Empty;
        newSupplierIsPrimary = false;
        showAddSupplierModal = true;
    }

    private void CloseAddSupplierModal()
    {
        showAddSupplierModal = false;
        selectedSupplierId = string.Empty;
        newSupplierIsPrimary = false;
    }

    private async Task AddSupplier()
    {
        if (string.IsNullOrEmpty(selectedSupplierId) || !Id.HasValue)
            return;

        try
        {
            var supplierId = int.Parse(selectedSupplierId);
            var supplier = suppliers.FirstOrDefault(s => s.Id == supplierId);
            if (supplier == null) return;

            var productSupplier = new ProductSupplier
            {
                ProductId = Id.Value,
                SupplierId = supplierId,
                IsPrimarySupplier = newSupplierIsPrimary,
                Status = EntityStatus.Active,
                Supplier = supplier
            };

            // 如果設為主要供應商，先將其他供應商設為非主要
            if (newSupplierIsPrimary)
            {
                foreach (var ps in productSuppliers)
                {
                    ps.IsPrimarySupplier = false;
                }
            }            productSuppliers.Add(productSupplier);
            
            // 使用 UpdateProductSuppliersAsync 來儲存變更
            var result = await ProductService.UpdateProductSuppliersAsync(Id.Value, productSuppliers);
            if (result.IsSuccess)
            {
                CloseAddSupplierModal();
                StateHasChanged();
            }
            else
            {
                // 如果失敗，移除剛才新增的項目
                productSuppliers.Remove(productSupplier);
                Console.WriteLine($"新增供應商失敗：{result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"新增供應商失敗：{ex.Message}");
        }
    }    private async Task RemoveSupplier(ProductSupplier productSupplier)
    {
        if (!Id.HasValue) return;
        
        try
        {
            productSuppliers.Remove(productSupplier);
            
            var result = await ProductService.UpdateProductSuppliersAsync(Id.Value, productSuppliers);
            if (result.IsSuccess)
            {
                StateHasChanged();
            }
            else
            {
                // 如果失敗，重新加入項目
                productSuppliers.Add(productSupplier);
                Console.WriteLine($"移除供應商失敗：{result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"移除供應商失敗：{ex.Message}");
        }
    }

    private async Task SetPrimarySupplier(ProductSupplier productSupplier)
    {
        if (!Id.HasValue) return;
        
        try
        {
            // 先將所有供應商設為非主要
            foreach (var ps in productSuppliers)
            {
                ps.IsPrimarySupplier = false;
            }
            
            // 設定新的主要供應商
            productSupplier.IsPrimarySupplier = true;
            
            var result = await ProductService.UpdateProductSuppliersAsync(Id.Value, productSuppliers);
            if (result.IsSuccess)
            {
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"設定主要供應商失敗：{result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"設定主要供應商失敗：{ex.Message}");
        }
    }
}
