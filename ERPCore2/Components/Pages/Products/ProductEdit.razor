@page "/products/edit"
@page "/products/edit/{id:int?}"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Data.Enums
@inject IProductService ProductService
@inject IProductCategoryService ProductCategoryService
@inject ISupplierService SupplierService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>@GetPageTitle()</PageTitle>

<GenericEditPageComponent TEntity="Product"
                         TService="IProductService"
                         Id="@Id"
                         Entity="@product"
                         Service="@ProductService"
                         EntityName="產品"
                         EntityNamePlural="產品"
                         CreateTitle="新增產品"
                         EditTitle="@($"編輯產品 - {product.ProductName}")"
                         CreateSubtitle="建立新的產品資料"
                         EditSubtitle="@product.ProductCode"
                         IndexRoute="/products"
                         BreadcrumbItems="@breadcrumbItems"
                         FormFields="@formFields"
                         DataLoader="LoadProductData"
                         SaveHandler="SaveProduct"
                         AdditionalDataLoader="LoadAdditionalData"
                         OnSaveSuccess="HandleSaveSuccess"
                         OnCancel="HandleCancel"
                         UseGenericForm="true">
    <AdditionalSections>
        @if (Id.HasValue)
        {
            @* 供應商管理 (僅編輯模式顯示) *@
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-truck me-2"></i>
                        供應商管理 (@productSuppliers.Count 筆)
                    </h5>
                    <button class="btn btn-sm btn-primary" @onclick="ShowAddSupplierModal">
                        <i class="bi bi-plus me-1"></i>
                        新增供應商
                    </button>
                </div>
                <div class="card-body">
                    @if (productSuppliers.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>供應商</th>
                                        <th>聯絡人</th>
                                        <th>電話</th>
                                        <th>主要供應商</th>
                                        <th>狀態</th>
                                        <th>操作</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ps in productSuppliers)
                                    {
                                        <tr>
                                            <td>
                                                <strong>@ps.Supplier?.CompanyName</strong>
                                                @if (!string.IsNullOrEmpty(ps.Supplier?.SupplierCode))
                                                {
                                                    <br />
                                                    <small class="text-muted">@ps.Supplier.SupplierCode</small>
                                                }
                                            </td>
                                            <td>@ps.Supplier?.ContactPerson</td>
                                            <td>-</td>
                                            <td>
                                                @if (ps.IsPrimarySupplier)
                                                {
                                                    <span class="badge bg-primary">主要</span>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => SetPrimarySupplier(ps)">
                                                        設為主要
                                                    </button>
                                                }
                                            </td>
                                            <td>
                                                @if (ps.Status == EntityStatus.Active)
                                                {
                                                    <span class="badge bg-success">啟用</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">停用</span>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group btn-group-sm">
                                                    <button class="btn btn-outline-danger" @onclick="() => RemoveSupplier(ps)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4 text-muted">
                            <i class="bi bi-truck fs-1 mb-3 d-block"></i>
                            <p>尚未設定供應商</p>
                            <button class="btn btn-outline-primary" @onclick="ShowAddSupplierModal">
                                <i class="bi bi-plus me-1"></i>
                                新增第一個供應商
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
    </AdditionalSections>
</GenericEditPageComponent>

@* 新增供應商 Modal *@
@if (showAddSupplierModal)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">新增供應商</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddSupplierModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">選擇供應商</label>
                        <select class="form-select" @bind="selectedSupplierId">
                            <option value="">請選擇供應商</option>
                            @foreach (var supplier in availableSuppliers)
                            {
                                <option value="@supplier.Id">@supplier.CompanyName (@supplier.SupplierCode)</option>
                            }
                        </select>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" @bind="newSupplierIsPrimary" id="isPrimaryCheck">
                        <label class="form-check-label" for="isPrimaryCheck">
                            設為主要供應商
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddSupplierModal">取消</button>
                    <button type="button" class="btn btn-primary" @onclick="AddSupplier" disabled="@string.IsNullOrEmpty(selectedSupplierId)">
                        新增
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public int? Id { get; set; }
    
    private Product product = new();
    private List<ProductCategory> productCategories = new();
    private List<ProductSupplier> productSuppliers = new();
    private List<Supplier> suppliers = new();
    private List<Supplier> availableSuppliers = new();
    private List<Unit> units = new();
    
    // Modal 相關
    private bool showAddSupplierModal = false;
    private string selectedSupplierId = string.Empty;
    private bool newSupplierIsPrimary = false;
    
    // UI 狀態
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();

    protected override async Task OnInitializedAsync()
    {
        InitializeBreadcrumb();
    }

    private void InitializeFormFields()
    {
        formFields = new List<FormFieldDefinition>
        {
            new() {
                PropertyName = nameof(Product.ProductCode),
                Label = "產品代碼",
                FieldType = FormFieldType.Text,
                IsRequired = true,
                Placeholder = "輸入產品代碼",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.ProductName),
                Label = "產品名稱",
                FieldType = FormFieldType.Text,
                IsRequired = true,
                Placeholder = "輸入產品名稱",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.ProductCategoryId),
                Label = "產品分類",
                FieldType = FormFieldType.Select,
                Options = productCategories.Select(x => new SelectOption { Value = x.Id.ToString(), Text = x.CategoryName }).ToList(),
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.UnitId),
                Label = "單位",
                FieldType = FormFieldType.Select,
                Options = units.Select(x => new SelectOption { Value = x.Id.ToString(), Text = $"{x.UnitName} ({x.Symbol})" }).ToList(),
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.IsActive),
                Label = "狀態",
                FieldType = FormFieldType.Select,
                Options = new List<SelectOption>
                {
                    new() { Value = "true", Text = "啟用" },
                    new() { Value = "false", Text = "停用" }
                },
                ContainerCssClass = "col-md-6"
            },            new() {
                PropertyName = nameof(Product.Description),
                Label = "產品描述",
                FieldType = FormFieldType.TextArea,
                Placeholder = "輸入產品描述",
                ContainerCssClass = "col-md-12"
            },
            new() {
                PropertyName = nameof(Product.Specification),
                Label = "規格說明",
                FieldType = FormFieldType.TextArea,
                Placeholder = "輸入規格說明",
                ContainerCssClass = "col-md-12"
            },
            new() {
                PropertyName = nameof(Product.UnitPrice),
                Label = "售價",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.CostPrice),
                Label = "成本價",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.CurrentStock),
                Label = "目前庫存",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-4"
            },
            new() {
                PropertyName = nameof(Product.MinStockLevel),
                Label = "最低庫存",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-4"
            },
            new() {
                PropertyName = nameof(Product.MaxStockLevel),
                Label = "最高庫存",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-4"
            },            new() {
                PropertyName = nameof(Product.Remarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "輸入備註",
                ContainerCssClass = "col-md-12"
            }
        };
    }

    private async Task LoadAdditionalData()
    {
        try
        {
            // 載入產品分類
            var categoryResult = await ProductCategoryService.GetAllAsync();
            productCategories = categoryResult.Where(c => c.Status == EntityStatus.Active).ToList();
            
            // 載入供應商
            var supplierResult = await SupplierService.GetAllAsync();
            suppliers = supplierResult.Where(s => s.Status == EntityStatus.Active).ToList();
            
            // 載入單位
            units = await ProductService.GetUnitsAsync();
            
            // 初始化表單欄位
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入額外資料失敗：", ex.Message);
        }
    }

    private async Task<Product?> LoadProductData()
    {
        if (!Id.HasValue) 
        {
            var newProduct = new Product
            {
                IsActive = true,
                CurrentStock = 0,
                MinStockLevel = 0,
                MaxStockLevel = 0
            };
            product = newProduct;
            return newProduct;
        }

        try
        {
            var productResult = await ProductService.GetByIdAsync(Id.Value);
            if (productResult != null)
            {
                product = productResult;
                await LoadProductSuppliers();
                return productResult;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "找不到指定的產品資料");
                Navigation.NavigateTo("/products");
                return null;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入產品資料失敗：", ex.Message);
            throw;
        }
    }

    private async Task<bool> SaveProduct(Product entity)
    {
        try
        {
            ServiceResult<Product> result;
            
            if (Id.HasValue)
            {
                result = await ProductService.UpdateAsync(entity);
            }
            else
            {
                result = await ProductService.CreateAsync(entity);
            }

            if (result.IsSuccess)
            {
                if (result.Data != null)
                {
                    product = result.Data;
                    if (!Id.HasValue)
                    {
                        // 新增成功後更新 Id
                        Id = product.Id;
                        await LoadProductSuppliers();
                    }
                }
                await JSRuntime.InvokeVoidAsync("alert", Id.HasValue ? "產品已成功更新" : "產品已成功新增");
                return true;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"儲存失敗: {result.ErrorMessage}");
                return false;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"儲存時發生錯誤: {ex.Message}");
            return false;
        }
    }

    private async Task LoadProductSuppliers()
    {
        if (Id.HasValue)
        {
            var result = await ProductService.GetProductSuppliersAsync(Id.Value);
            productSuppliers = result;
            UpdateAvailableSuppliers();
        }
    }

    private void UpdateAvailableSuppliers()
    {
        var usedSupplierIds = productSuppliers.Select(ps => ps.SupplierId).ToHashSet();
        availableSuppliers = suppliers.Where(s => !usedSupplierIds.Contains(s.Id)).ToList();
    }

    private Task HandleSaveSuccess()
    {
        if (Id.HasValue)
        {
            Navigation.NavigateTo($"/products/detail/{Id}");
        }
        else
        {
            Navigation.NavigateTo("/products");
        }
        return Task.CompletedTask;
    }

    private Task HandleCancel()
    {
        if (Id.HasValue)
        {
            Navigation.NavigateTo($"/products/detail/{Id}");
        }
        else
        {
            Navigation.NavigateTo("/products");
        }
        return Task.CompletedTask;
    }

    private void InitializeBreadcrumb()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("產品管理", "/products"),
            new(Id.HasValue ? "編輯產品" : "新增產品")
        };
    }

    private string GetPageTitle()
    {
        return Id.HasValue ? $"編輯產品 - {product.ProductName}" : "新增產品";
    }

    private void ShowAddSupplierModal()
    {
        selectedSupplierId = string.Empty;
        newSupplierIsPrimary = false;
        showAddSupplierModal = true;
        StateHasChanged();
    }

    private void CloseAddSupplierModal()
    {
        showAddSupplierModal = false;
        StateHasChanged();
    }

    private async Task AddSupplier()
    {
        if (string.IsNullOrEmpty(selectedSupplierId) || !Id.HasValue)
            return;

        try
        {
            var supplierId = int.Parse(selectedSupplierId);
            await JSRuntime.InvokeVoidAsync("alert", "功能開發中：新增供應商");
            CloseAddSupplierModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"新增供應商時發生錯誤: {ex.Message}");
        }
    }

    private async Task SetPrimarySupplier(ProductSupplier productSupplier)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", "功能開發中：設定主要供應商");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"設定主要供應商時發生錯誤: {ex.Message}");
        }
    }

    private async Task RemoveSupplier(ProductSupplier productSupplier)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"確定要移除供應商「{productSupplier.Supplier?.CompanyName}」嗎？");
        if (confirmed)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("alert", "功能開發中：移除供應商");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"移除供應商時發生錯誤: {ex.Message}");
            }
        }
    }

    private string GetSelectedUnitSymbol()
    {
        if (product.UnitId.HasValue)
        {
            var selectedUnit = units.FirstOrDefault(u => u.Id == product.UnitId.Value);
            return selectedUnit?.Symbol ?? selectedUnit?.UnitName ?? "";
        }
        return "";
    }
}
