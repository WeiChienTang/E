@page "/products/edit"
@page "/products/edit/{id:int?}"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.SubCollections
@inject IProductService ProductService
@inject IProductCategoryService ProductCategoryService
@inject ISupplierService SupplierService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>@GetPageTitle()</PageTitle>

<GenericEditPageComponent TEntity="Product" 
                         TService="IProductService"
                         Id="@Id"
                         Entity="@product"
                         Service="@ProductService"
                         EntityName="產品"
                         EntityNamePlural="產品"
                         FormTitle="基本資料"
                         FormSubtitle="產品的基本資訊"
                         FormIcon="bi-box"
                         IndexRoute="/products"
                         BreadcrumbItems="@breadcrumbItems"
                         FormFields="@GetFormFields()"                         
                         FormSections="@GetFormSections()"
                         DataLoader="LoadProductData"
                         SaveHandler="SaveProduct"
                         UseGenericForm="true">
      <AdditionalSections>
        @if (Id.HasValue && product != null)
        {
            @* 供應商管理區塊 *@
            <AssociationManagerComponent TAssociationEntity="ProductSupplier"
                                       TParentEntity="Product"
                                       TRelatedEntity="Supplier"
                                       Items="@productSuppliers"
                                       AvailableRelatedEntities="@availableSuppliers"
                                       ParentEntityId="@(product?.Id ?? 0)"
                                       Title="供應商管理"
                                       Icon="truck"
                                       ItemDisplayName="供應商"
                                       RelatedEntityDisplayName="供應商"
                                       ShowPrimaryOption="true"
                                       GetIsPrimary="@(ps => ps.IsPrimarySupplier)"
                                       GetIsActive="@(ps => ps.Status == EntityStatus.Active)"
                                       GetRelatedEntityDisplayText="@(ps => ps.Supplier?.CompanyName ?? "")"
                                       GetRelatedEntityId="@(s => s.Id)"
                                       GetRelatedEntityText="@(s => $"{s.CompanyName} ({s.SupplierCode})")"
                                       SetIsPrimary="@((ps, isPrimary) => ps.IsPrimarySupplier = isPrimary)"
                                       SetParentId="@((ps, parentId) => ps.ProductId = parentId)"
                                       SetRelatedEntityId="@((ps, supplierId) => ps.SupplierId = supplierId)"
                                       ItemsChanged="@OnProductSuppliersChanged"
                                       OnBeforeAdd="@BeforeAddSupplier"
                                       OnAfterAdd="@AfterAddSupplier" />
        }
    </AdditionalSections>
</GenericEditPageComponent>

@* 移除舊的 Modal 代碼 *@

@code {
    [Parameter] public int? Id { get; set; }
      private Product product = new();
    private List<ProductCategory> productCategories = new();
    private List<ProductSupplier> productSuppliers = new();
    private List<Supplier> suppliers = new();
    private List<Supplier> availableSuppliers = new();
    private List<Unit> units = new();
    
    // UI 狀態
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    protected override void OnInitialized()
    {
        InitializeBreadcrumb();
    }    private void InitializeBreadcrumb()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new() { Text = "首頁", Href = "/" },
            new() { Text = "產品管理", Href = "/products" },
            new() { Text = Id.HasValue ? "編輯產品" : "新增產品" }
        };
    }

    private string GetPageTitle()
    {
        return Id.HasValue ? "編輯產品" : "新增產品";
    }

    // 主表單欄位定義
    private List<FormFieldDefinition> GetFormFields()
    {
        return new List<FormFieldDefinition>
        {
            new() {
                PropertyName = nameof(Product.ProductCode),
                Label = "產品代碼",
                FieldType = FormFieldType.Text,
                IsRequired = true,
                Placeholder = "輸入產品代碼",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.ProductName),
                Label = "產品名稱",
                FieldType = FormFieldType.Text,
                IsRequired = true,
                Placeholder = "輸入產品名稱",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.ProductCategoryId),
                Label = "產品分類",
                FieldType = FormFieldType.Select,
                Options = productCategories.Select(pc => new SelectOption 
                { 
                    Value = pc.Id.ToString(), 
                    Text = pc.CategoryName 
                }).Prepend(new SelectOption { Value = "", Text = "請選擇分類" }).ToList(),
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.UnitId),
                Label = "單位",
                FieldType = FormFieldType.Select,
                Options = units.Select(u => new SelectOption 
                { 
                    Value = u.Id.ToString(), 
                    Text = u.UnitName 
                }).Prepend(new SelectOption { Value = "", Text = "請選擇單位" }).ToList(),
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.IsActive),
                Label = "狀態",
                FieldType = FormFieldType.Select,
                Options = new List<SelectOption>
                {
                    new() { Value = "true", Text = "啟用" },
                    new() { Value = "false", Text = "停用" }
                },
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.Description),
                Label = "產品描述",
                FieldType = FormFieldType.TextArea,
                Placeholder = "輸入產品描述",
                ContainerCssClass = "col-md-12"
            },
            new() {
                PropertyName = nameof(Product.Specification),
                Label = "規格說明",
                FieldType = FormFieldType.TextArea,
                Placeholder = "輸入規格說明",
                ContainerCssClass = "col-md-12"
            },
            new() {
                PropertyName = nameof(Product.UnitPrice),
                Label = "售價",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.CostPrice),
                Label = "成本價",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-6"
            },
            new() {
                PropertyName = nameof(Product.CurrentStock),
                Label = "目前庫存",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-4"
            },
            new() {
                PropertyName = nameof(Product.MinStockLevel),
                Label = "最低庫存",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-4"
            },
            new() {
                PropertyName = nameof(Product.MaxStockLevel),
                Label = "最高庫存",
                FieldType = FormFieldType.Number,
                Placeholder = "0",
                ContainerCssClass = "col-md-4"
            },
            new() {
                PropertyName = nameof(Product.Remarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "輸入備註",
                ContainerCssClass = "col-md-12"
            }
        };
    }    // 表單區塊定義
    private Dictionary<string, string> GetFormSections()
    {
        return new Dictionary<string, string>
        {
            // 基本資訊區塊
            { nameof(Product.ProductCode), "基本資訊" },
            { nameof(Product.ProductName), "基本資訊" },
            { nameof(Product.ProductCategoryId), "基本資訊" },
            { nameof(Product.UnitId), "基本資訊" },
            { nameof(Product.IsActive), "基本資訊" },
            
            // 詳細說明區塊
            { nameof(Product.Description), "詳細說明" },
            { nameof(Product.Specification), "詳細說明" },
            
            // 價格與庫存區塊
            { nameof(Product.UnitPrice), "價格與庫存" },
            { nameof(Product.CostPrice), "價格與庫存" },
            { nameof(Product.CurrentStock), "價格與庫存" },
            { nameof(Product.MinStockLevel), "價格與庫存" },
            { nameof(Product.MaxStockLevel), "價格與庫存" },
            
            // 其他資訊區塊
            { nameof(Product.Remarks), "其他資訊" }
        };
    }

    // 資料載入方法
    private async Task<Product?> LoadProductData()
    {
        try
        {
            // 載入基礎選項資料
            await LoadReferenceData();

            if (Id.HasValue)
            {
                // 載入產品資料
                product = await ProductService.GetByIdAsync(Id.Value) ?? new Product();
                
                // 載入產品供應商資料
                if (product.Id > 0)
                {
                    productSuppliers = await ProductService.GetProductSuppliersAsync(product.Id);
                    UpdateAvailableSuppliers();
                }
                
                return product;
            }
            else
            {
                product = new Product();
                productSuppliers.Clear();
                return product;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入產品資料失敗：{ex.Message}");
            return new Product();
        }
    }

    private async Task LoadReferenceData()
    {
        try
        {
            // 依序載入資料以避免 DbContext 併發問題
            var categoryResult = await ProductCategoryService.GetAllAsync();
            productCategories = categoryResult.Where(c => c.Status == EntityStatus.Active).ToList();
            
            var supplierResult = await SupplierService.GetAllAsync();
            suppliers = supplierResult.Where(s => s.Status == EntityStatus.Active).ToList();
            
            units = await ProductService.GetUnitsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入參考資料失敗：{ex.Message}");
        }
    }
    
    // 儲存產品資料
    private async Task<bool> SaveProduct(Product entity)
    {
        try
        {
            ServiceResult<Product> result;
            
            if (Id.HasValue)
            {
                result = await ProductService.UpdateAsync(entity);
            }
            else
            {
                result = await ProductService.CreateAsync(entity);
            }            if (result.IsSuccess)
            {
                product = result.Data!;
                return true;
            }
            else
            {
                Console.WriteLine($"儲存失敗：{result.ErrorMessage}");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"儲存產品資料失敗：{ex.Message}");
            return false;
        }    }

#region 事件處理方法

    private Task OnProductSuppliersChanged(List<ProductSupplier> updatedSuppliers)
    {
        productSuppliers = updatedSuppliers;
        UpdateAvailableSuppliers();
        StateHasChanged();
        return Task.CompletedTask;
    }    private Task<bool> BeforeAddSupplier(ProductSupplier newSupplier)
    {
        // 檢查是否已經存在相同的供應商
        var exists = productSuppliers.Any(ps => ps.SupplierId == newSupplier.SupplierId);
        if (exists)
        {
            // 這裡可以顯示錯誤訊息
            return Task.FromResult(false);
        }
        return Task.FromResult(true);
    }

    private async Task AfterAddSupplier(ProductSupplier newSupplier)
    {
        // 載入供應商詳細資料
        var supplier = suppliers.FirstOrDefault(s => s.Id == newSupplier.SupplierId);
        if (supplier != null)
        {
            newSupplier.Supplier = supplier;
        }

        // 儲存到資料庫
        if (Id.HasValue)
        {
            var result = await ProductService.UpdateProductSuppliersAsync(Id.Value, productSuppliers);
            if (!result.IsSuccess)
            {
                // 儲存失敗，移除剛才新增的項目
                productSuppliers.Remove(newSupplier);
                StateHasChanged();
            }
        }

        UpdateAvailableSuppliers();
    }

    // 供應商管理方法
    private void UpdateAvailableSuppliers()
    {
        var assignedSupplierIds = productSuppliers.Select(ps => ps.SupplierId).ToHashSet();
        availableSuppliers = suppliers.Where(s => !assignedSupplierIds.Contains(s.Id)).ToList();
    }

#endregion
}
