@page "/units/edit"
@page "/units/edit/{id:int?}"
@inject IUnitService UnitService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="Unit" 
                         TService="IUnitService"
                         Id="@Id"
                         Entity="@unit"
                         Service="@UnitService"
                         EntityName="單位"
                         EntityNamePlural="單位"
                         PageTitle="@(Id.HasValue ? "編輯單位" : "新增單位")"
                         FormTitle="基本資料"
                         FormSubtitle="單位的基本計量資訊"
                         IndexRoute="/units"
                         UseGenericForm="true"
                         FormFields="@formFields"
                         FormSections="@formSections"
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadUnitData"
                         SaveHandler="@SaveUnit"
                         RequiredPermission="@(Id.HasValue ? "Unit.Update" : "Unit.Create")"
                         @ref="editComponent" />


@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<Unit, IUnitService> editComponent = default!;
    
    // 資料模型
    private Unit unit = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: "初始化單位編輯頁面失敗");
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("單位維護", "/units"),
                new(Id.HasValue ? "編輯單位" : "新增單位")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: "初始化麵包屑導航失敗");
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(Unit.UnitCode),
                    Label = "單位代碼",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "請輸入單位代碼",
                    MaxLength = 20,
                    HelpText = "唯一識別此單位的代碼，最多20個字元"
                },
                new()
                {
                    PropertyName = nameof(Unit.UnitName),
                    Label = "單位名稱",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "請輸入單位名稱",
                    MaxLength = 20,                    
                },
                new()
                {
                    PropertyName = nameof(Unit.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    IsRequired = false,
                    DefaultValue = true,
                    HelpText = "請輸入備註"
                },
            };

            formSections = new Dictionary<string, string>
            {
                [nameof(Unit.UnitCode)] = "基本資料",
                [nameof(Unit.UnitName)] = "基本資料",
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFields), GetType(),
                additionalData: "初始化表單欄位失敗");
        }
    }

    private async Task<Unit?> LoadUnitData()
    {
        try
        {
            if (!Id.HasValue)
            {
                unit = new Unit 
                { 
                    UnitCode = await GenerateUnitCodeAsync(),
                    IsActive = true 
                };
                return unit;
            }

            var result = await UnitService.GetByIdAsync(Id.Value);
            if (result != null)
            {
                unit = result;
                return unit;
            }

            await NotificationService.ShowWarningAsync("找不到指定的單位資料");
            Navigation.NavigateTo("/units");
            return null;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadUnitData), GetType(),
                additionalData: "載入單位資料失敗");
            Navigation.NavigateTo("/units");
            return null;
        }
    }

    private async Task<string> GenerateUnitCodeAsync()
    {
        try
        {
            var units = await UnitService.GetAllAsync();
            var maxCode = units
                .Where(u => u.UnitCode.StartsWith("U"))
                .Select(u => u.UnitCode)
                .Where(code => code.Length > 1 && int.TryParse(code.Substring(1), out _))
                .Select(code => int.Parse(code.Substring(1)))
                .DefaultIfEmpty(0)
                .Max();

            return $"U{(maxCode + 1):D3}";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GenerateUnitCodeAsync), GetType(),
                additionalData: "產生單位代碼失敗");
            return "U001";
        }
    }

    private async Task<bool> SaveUnit(Unit entity)
    {
        try
        {
            // 檢查單位代碼是否重複
            if (await UnitService.IsUnitCodeExistsAsync(entity.UnitCode, entity.Id))
            {
                await NotificationService.ShowWarningAsync("單位代碼已存在，請選擇其他代碼");
                return false;
            }

            // 檢查單位名稱是否重複
            if (await UnitService.IsNameExistsAsync(entity.UnitName, entity.Id))
            {
                await NotificationService.ShowWarningAsync("單位名稱已存在，請選擇其他名稱");
                return false;
            }

            ServiceResult result;
            if (entity.Id == 0)
            {
                result = await UnitService.CreateAsync(entity);
                if (result.IsSuccess)
                {
                    await NotificationService.ShowSuccessAsync("新增單位成功");
                }
            }
            else
            {
                result = await UnitService.UpdateAsync(entity);
                if (result.IsSuccess)
                {
                    await NotificationService.ShowSuccessAsync("更新單位成功");
                }
            }

            if (!result.IsSuccess)
            {
                await NotificationService.ShowErrorAsync("操作失敗", result.ErrorMessage);
                return false;
            }

            // 更新本地資料
            unit = entity;
            return true;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveUnit), GetType(),
                additionalData: "儲存單位資料失敗");
            return false;
        }
    }
}

