@page "/product-pricing/edit/{PricingId:int?}"
@inject IProductPricingService ProductPricingService
@inject IProductService ProductService
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="ProductPricing" 
                         TService="IProductPricingService"
                         Service="@ProductPricingService"
                         EntityBasePath="/product-pricing"
                         Id="@PricingId"
                         PageTitle="商品定價編輯"
                         PageSubtitle="新增或編輯商品定價資料"
                         EntityName="商品定價"
                         UseGenericForm="true"
                         BreadcrumbItems="@breadcrumbItems"
                         FormFields="@fieldConfigurations"
                         FormSections="@formSections"
                         DataLoader="LoadBasicDataAsync"
                         AdditionalDataLoader="LoadAdditionalDataAsync"
                         RequiredPermission="ProductPricing.Read"
                         @ref="editComponent" />

@code {
    [Parameter] public int? PricingId { get; set; }

    private GenericEditPageComponent<ProductPricing, IProductPricingService> editComponent = default!;

    // 基礎資料
    private List<Product> products = new();
    private List<Customer> customers = new();

    // 頁面配置
    private List<FormFieldDefinition> fieldConfigurations = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化麵包屑
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("產品管理", "/products"),
                new("商品定價", "/product-pricing"),
                new(PricingId.HasValue ? "編輯定價" : "新增定價")
            };

            await InitializeFieldsAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType(),
                additionalData: new { PricingId, PageName = "ProductPricingEdit" }
            );
            
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    private async Task<ProductPricing?> LoadBasicDataAsync()
    {
        try
        {
            // 載入或創建ProductPricing實體
            ProductPricing? entity;
            if (PricingId.HasValue)
            {
                entity = await ProductPricingService.GetByIdAsync(PricingId.Value);
            }
            else
            {
                entity = new ProductPricing
                {
                    PricingType = PricingType.Standard,
                    Price = 0,
                    Status = EntityStatus.Active
                };
            }

            return entity;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadBasicDataAsync),
                GetType(),
                additionalData: new { PricingId, PageName = "ProductPricingEdit" }
            );
            return null;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入產品清單
            products = await ProductService.GetAllAsync();
            
            // 載入客戶清單  
            customers = await CustomerService.GetAllAsync();

            // 更新欄位選項
            await UpdateFormFieldOptions();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadAdditionalDataAsync),
                GetType(),
                additionalData: new { PricingId, PageName = "ProductPricingEdit" }
            );
        }
    }

    private Task InitializeFieldsAsync()
    {
        try
        {
            fieldConfigurations = new List<FormFieldDefinition>
            {
                // 基本資訊區塊
                new()
                {
                    PropertyName = nameof(ProductPricing.ProductId),
                    Label = "產品",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = GetProductOptions(),
                    Placeholder = "請選擇產品"
                },

                new()
                {
                    PropertyName = nameof(ProductPricing.PricingType),
                    Label = "定價類型",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = GetPricingTypeOptions(),
                    Placeholder = "請選擇定價類型"
                },

                new()
                {
                    PropertyName = nameof(ProductPricing.Price),
                    Label = "價格",
                    FieldType = FormFieldType.Number,
                    IsRequired = true,
                    Min = 0.01m,
                    Max = 999999.99m,
                    Step = 0.01m,
                    Placeholder = "請輸入價格"
                },

                new()
                {
                    PropertyName = nameof(ProductPricing.Currency),
                    Label = "貨幣",
                    FieldType = FormFieldType.Text,
                    MaxLength = 3,
                    DefaultValue = "TWD",
                    Placeholder = "貨幣代碼"
                },

                // 客戶設定區塊
                new()
                {
                    PropertyName = nameof(ProductPricing.CustomerId),
                    Label = "指定客戶",
                    FieldType = FormFieldType.Select,
                    Options = GetCustomerOptions(),
                    Placeholder = "請選擇客戶（可選）",
                    HelpText = "空白表示適用於所有客戶"
                },

                // 數量限制區塊
                new()
                {
                    PropertyName = nameof(ProductPricing.MinQuantity),
                    Label = "最小數量",
                    FieldType = FormFieldType.Number,
                    Min = 1,
                    Max = 99999,
                    Placeholder = "最小訂購量",
                    HelpText = "0或空白表示無最小數量限制"
                },

                new()
                {
                    PropertyName = nameof(ProductPricing.MaxQuantity),
                    Label = "最大數量",
                    FieldType = FormFieldType.Number,
                    Min = 1,
                    Max = 99999,
                    Placeholder = "最大訂購量",
                    HelpText = "0或空白表示無最大數量限制"
                },

                // 有效期間區塊
                new()
                {
                    PropertyName = nameof(ProductPricing.EffectiveDate),
                    Label = "生效日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    DefaultValue = DateTime.Today,
                    Placeholder = "請選擇生效日期"
                },

                new()
                {
                    PropertyName = nameof(ProductPricing.ExpiryDate),
                    Label = "失效日期",
                    FieldType = FormFieldType.Date,
                    Placeholder = "請選擇失效日期",
                    HelpText = "空白表示永久有效"
                },

                // 其他設定區塊
                new()
                {
                    PropertyName = nameof(ProductPricing.Priority),
                    Label = "優先順序",
                    FieldType = FormFieldType.Number,
                    Min = 0,
                    Max = 999,
                    DefaultValue = 0,
                    Placeholder = "優先順序",
                    HelpText = "數字越大優先權越高，預設為0"
                }
            };

            // 初始化表單區段分類
            formSections = new Dictionary<string, string>
            {
                // 基本資訊區塊
                { nameof(ProductPricing.ProductId), "基本資訊" },
                { nameof(ProductPricing.PricingType), "基本資訊" },
                { nameof(ProductPricing.Price), "基本資訊" },
                { nameof(ProductPricing.Currency), "基本資訊" },
                
                // 客戶設定區塊
                { nameof(ProductPricing.CustomerId), "客戶設定" },
                
                // 數量限制區塊
                { nameof(ProductPricing.MinQuantity), "數量限制" },
                { nameof(ProductPricing.MaxQuantity), "數量限制" },
                
                // 有效期間區塊
                { nameof(ProductPricing.EffectiveDate), "有效期間" },
                { nameof(ProductPricing.ExpiryDate), "有效期間" },
                
                // 其他設定區塊
                { nameof(ProductPricing.Priority), "其他設定" }
            };

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，刷新組件以更新欄位
            if (editComponent != null)
            {
                // 使用 StateHasChanged 來觸發組件更新
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFieldsAsync),
                GetType(),
                additionalData: new { PricingId, PageName = "ProductPricingEdit" }
            );
        }
        return Task.CompletedTask;
    }

    private Task UpdateFormFieldOptions()
    {
        try
        {
            // 更新產品選項
            var productField = fieldConfigurations.FirstOrDefault(f => f.PropertyName == "ProductId");
            if (productField != null)
            {
                productField.Options = GetProductOptions();
            }

            // 更新客戶選項
            var customerField = fieldConfigurations.FirstOrDefault(f => f.PropertyName == "CustomerId");
            if (customerField != null)
            {
                customerField.Options = GetCustomerOptions();
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(UpdateFormFieldOptions),
                GetType(),
                additionalData: new { PricingId, PageName = "ProductPricingEdit" }
            );
        }
        return Task.CompletedTask;
    }

    private List<SelectOption> GetProductOptions()
    {
        try
        {
            return products?.Select(p => new SelectOption
            {
                Value = p.Id.ToString(),
                Text = $"{p.ProductCode} - {p.ProductName}"
            }).ToList() ?? new List<SelectOption>();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GetProductOptions),
                GetType(),
                additionalData: new { PricingId, PageName = "ProductPricingEdit" }
            );
            return new List<SelectOption>();
        }
    }

    private List<SelectOption> GetCustomerOptions()
    {
        try
        {
            var options = new List<SelectOption>
            {
                new() { Value = "", Text = "-- 無指定客戶 (適用所有客戶) --" }
            };

            if (customers?.Any() == true)
            {
                options.AddRange(customers.Select(c => new SelectOption
                {
                    Value = c.Id.ToString(),
                    Text = $"{c.CompanyName}"
                }));
            }

            return options;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GetCustomerOptions),
                GetType(),
                additionalData: new { PricingId, PageName = "ProductPricingEdit" }
            );
            return new List<SelectOption> { new() { Value = "", Text = "-- 載入失敗 --" } };
        }
    }

    private List<SelectOption> GetPricingTypeOptions()
    {
        try
        {
            return Enum.GetValues<PricingType>()
                      .Select(pt => new SelectOption
                      {
                          Value = pt.ToString(),
                          Text = GetPricingTypeDisplayName(pt)
                      }).ToList();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GetPricingTypeOptions),
                GetType(),
                additionalData: new { PricingId, PageName = "ProductPricingEdit" }
            );
            return new List<SelectOption>();
        }
    }

    private string GetPricingTypeDisplayName(PricingType pricingType)
    {
        return pricingType switch
        {
            PricingType.Standard => "標準價格",
            PricingType.Promotional => "促銷價格",
            PricingType.CustomerSpecific => "客戶專屬價",
            PricingType.CustomerGroup => "客戶群組價",
            PricingType.VolumeDiscount => "數量折扣價",
            PricingType.VIP => "VIP價格",
            PricingType.Clearance => "清倉價格",
            PricingType.Trial => "試用價格",
            _ => pricingType.ToString()
        };
    }

    private string GetDisplayName(ProductPricing? pricing)
    {
        return pricing != null 
            ? $"{pricing.Product?.ProductName} - {GetPricingTypeDisplayName(pricing.PricingType)}"
            : "";
    }
}
