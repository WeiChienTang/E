@page "/units"
@inject IUnitService UnitService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Unit" 
                          TService="IUnitService"
                          Service="@UnitService"
                          EntityBasePath="/units"
                          PageTitle="單位維護"
                          PageSubtitle="管理所有計量單位資料與轉換關係"
                          EntityName="單位"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadUnitsAsync"
                          FilterApplier="@ApplyUnitFilters"
                          GetEntityDisplayName="@(unit => unit.UnitName)"
                          RequiredPermission="Unit.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 使用 ModalHelper 處理事件 *@
<UnitEditModalComponent IsVisible="@showEditModal"
                        IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                        UnitId="@editingUnitId"
                        OnUnitSaved="@modalHandler.OnEntitySavedAsync"
                        OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Unit, IUnitService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingUnitId = null;
    
    // Modal 處理器 - 使用 ModalHelper 統一處理
    private ModalHandler<Unit, GenericIndexPageComponent<Unit, IUnitService>> modalHandler = default!;

    protected override void OnInitialized()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Unit, GenericIndexPageComponent<Unit, IUnitService>>(
                id => editingUnitId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: new { PageName = "UnitIndex" }
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("單位維護")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: new { PageName = "UnitIndex" }
            );
        }
    }

    // 載入單位資料
    private async Task<List<Unit>> LoadUnitsAsync()
    {
        try
        {
            return await UnitService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadUnitsAsync),
                GetType(),
                additionalData: new { PageName = "UnitIndex" }
            );
            await NotificationService.ShowErrorAsync("載入單位資料失敗");
            return new List<Unit>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("UnitCode", "單位代碼", "輸入單位代碼搜尋")
                .AddText("UnitName", "單位名稱", "輸入單位名稱搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFilters), GetType(),
                additionalData: new { PageName = "UnitIndex" }
            );
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("單位代碼", nameof(Unit.Code)),
                TableColumnDefinition.Text("單位名稱", nameof(Unit.UnitName)),
                TableColumnDefinition.Text("備註", nameof(Unit.Remarks))
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeTableColumns), GetType(),
                additionalData: new { PageName = "UnitIndex" }
            );
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Unit> ApplyUnitFilters(SearchFilterModel searchModel, IQueryable<Unit> query)
    {
        try
        {
            // 單位代碼篩選
            var unitCodeFilter = searchModel.GetFilterValue("UnitCode")?.ToString();
            if (!string.IsNullOrWhiteSpace(unitCodeFilter))
            {
                query = query.Where(u => 
                    u.Code != null && u.Code.Contains(unitCodeFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 單位名稱篩選
            var unitNameFilter = searchModel.GetFilterValue("UnitName")?.ToString();
            if (!string.IsNullOrWhiteSpace(unitNameFilter))
            {
                query = query.Where(u => 
                    u.UnitName.Contains(unitNameFilter, StringComparison.OrdinalIgnoreCase));
            }

            return query.OrderBy(u => u.Code);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplyUnitFilters), GetType(),
                additionalData: new { SearchModel = searchModel, PageName = "UnitIndex" }
            );
            
            // 發生錯誤時返回原始查詢
            return query.OrderBy(u => u.Code);
        }
    }
}
