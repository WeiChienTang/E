@page "/units"
@inject IUnitService UnitService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Unit" 
                          TService="IUnitService"
                          Service="@UnitService"
                          EntityBasePath="/units"
                          PageTitle="單位維護"
                          PageSubtitle="管理所有計量單位資料與轉換關係"
                          EntityName="單位"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadUnitsAsync"
                          FilterApplier="@ApplyUnitFilters"
                          GetEntityDisplayName="@(unit => unit.Name)"
                          RequiredPermission="Unit.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 使用 ModalHelper 處理事件 *@
<UnitEditModalComponent IsVisible="@showEditModal"
                        IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                        UnitId="@editingUnitId"
                        OnUnitSaved="@modalHandler.OnEntitySavedAsync"
                        OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Unit, IUnitService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingUnitId = null;
    
    // Modal 處理器
    private ModalHandler<Unit, GenericIndexPageComponent<Unit, IUnitService>> modalHandler = default!;
    
    // 欄位配置
    private UnitFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Unit, GenericIndexPageComponent<Unit, IUnitService>>(
                id => editingUnitId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 建立欄位配置（傳遞 NotificationService）
            fieldConfiguration = new UnitFieldConfiguration(NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化單位頁面失敗");
            await NotificationService.ShowErrorAsync("初始化單位頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("單位維護")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入單位資料
    private async Task<List<Unit>> LoadUnitsAsync()
    {
        try
        {
            return await UnitService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadUnitsAsync), GetType(), additionalData: "載入單位資料失敗");
            await NotificationService.ShowErrorAsync("載入單位資料失敗");
            // 設定安全的預設值
            return new List<Unit>();
        }
    }

    private IQueryable<Unit> ApplyUnitFilters(SearchFilterModel searchModel, IQueryable<Unit> query)
    {
        try
        {
            // 檢查 fieldConfiguration 是否已初始化
            if (fieldConfiguration == null)
            {
                // 如果配置尚未初始化，回傳基本排序的查詢
                return query.OrderBy(u => u.Code);
            }
            
            return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyUnitFilters), GetType());
        }
        catch (Exception ex)
        {
            // 記錄錯誤並回傳安全的預設查詢
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplyUnitFilters), GetType(), additionalData: "單位篩選器應用失敗");
            _ = NotificationService.ShowErrorAsync("篩選條件應用失敗，已顯示全部資料");
            
            // 回傳基本排序的查詢，確保頁面仍能正常運作
            return query.OrderBy(u => u.Code);
        }
    }
}
