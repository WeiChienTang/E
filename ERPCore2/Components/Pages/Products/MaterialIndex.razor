@page "/materials"

@inject IMaterialService MaterialService
@inject INotificationService NotificationService

@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Material" 
                          TService="IMaterialService"
                          Service="@MaterialService"
                          EntityBasePath="/materials"
                          PageTitle="材質"
                          PageSubtitle="管理所有材質資料與屬性設定"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadMaterialsAsync"
                          FilterApplier="@ApplyMaterialFilters"
                          EntityName="材質"
                          GetEntityDisplayName="@(material => material.Name)"
                          RequiredPermission="Material.Read"
                          @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Material, IMaterialService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitialized),
                GetType(),
                additionalData: "材質頁面初始化失敗");
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("材質管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化麵包屑導航失敗");
        }
    }

    // 載入材質資料
    private async Task<List<Material>> LoadMaterialsAsync()
    {
        try
        {
            return await MaterialService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadMaterialsAsync),
                GetType(),
                additionalData: "載入材質資料發生錯誤");
            await NotificationService.ShowErrorAsync("載入材質資料失敗");
            return new List<Material>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 準備環保選項
            var ecoFriendlyOptions = new List<SelectOption>
            {
                new() { Text = "是", Value = "true" },
                new() { Text = "否", Value = "false" }
            };

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Name", "材質名稱", "輸入材質名稱搜尋")
                .AddText("Code", "材質代碼", "輸入材質代碼搜尋")
                .AddText("Category", "材質類別", "輸入材質類別搜尋")
                .AddText("Description", "描述", "輸入描述搜尋")
                .AddSelect("Status", "狀態", statusOptions)
                .AddSelect("IsEcoFriendly", "環保材質", ecoFriendlyOptions)
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗");
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("材質代碼", nameof(Material.Code)),
                TableColumnDefinition.Text("材質名稱", nameof(Material.Name)),
                TableColumnDefinition.Text("類別", nameof(Material.Category)),
                TableColumnDefinition.Text("描述", nameof(Material.Description)),
                TableColumnDefinition.Template("密度", item => 
                {
                    var material = (Material)item;
                    return @<span>@(material.Density?.ToString("0.00") + " g/cm³" ?? "-")</span>;
                }),
                TableColumnDefinition.Template("環保", item => 
                {
                    var material = (Material)item;
                    return @<span>@(material.IsEcoFriendly ? "是" : "否")</span>;
                }),
                TableColumnDefinition.Status("狀態", nameof(Material.Status), new Dictionary<object, string>
                {
                    { EntityStatus.Active, "bg-success" },
                    { EntityStatus.Inactive, "bg-secondary" }
                }),
                TableColumnDefinition.Date("建立日期", nameof(Material.CreatedAt), "yyyy/MM/dd")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗");
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Material> ApplyMaterialFilters(SearchFilterModel searchModel, IQueryable<Material> query)
    {
        try
        {
            // 材質名稱篩選
            var nameFilter = searchModel.GetFilterValue("Name")?.ToString();
            if (!string.IsNullOrWhiteSpace(nameFilter))
            {
                query = query.Where(m => 
                    m.Name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 材質代碼篩選
            var codeFilter = searchModel.GetFilterValue("Code")?.ToString();
            if (!string.IsNullOrWhiteSpace(codeFilter))
            {
                query = query.Where(m => 
                    m.Code.Contains(codeFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 材質類別篩選
            var categoryFilter = searchModel.GetFilterValue("Category")?.ToString();
            if (!string.IsNullOrWhiteSpace(categoryFilter))
            {
                query = query.Where(m => 
                    !string.IsNullOrEmpty(m.Category) && 
                    m.Category.Contains(categoryFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 描述篩選
            var descriptionFilter = searchModel.GetFilterValue("Description")?.ToString();
            if (!string.IsNullOrWhiteSpace(descriptionFilter))
            {
                query = query.Where(m => 
                    !string.IsNullOrEmpty(m.Description) && 
                    m.Description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 狀態篩選
            var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
            {
                query = query.Where(m => m.Status == status);
            }

            // 環保材質篩選
            var ecoFriendlyFilter = searchModel.GetFilterValue("IsEcoFriendly")?.ToString();
            if (!string.IsNullOrWhiteSpace(ecoFriendlyFilter) && bool.TryParse(ecoFriendlyFilter, out var isEcoFriendly))
            {
                query = query.Where(m => m.IsEcoFriendly == isEcoFriendly);
            }

            return query.OrderBy(m => m.Code);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplyMaterialFilters),
                GetType(),
                additionalData: "套用材質篩選失敗");
            return query.OrderBy(m => m.Code);
        }
    }
}
