@page "/employee-positions/detail/{positionId:int}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Badges
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Helpers
@inject IEmployeePositionService EmployeePositionService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PagePermissionCheck RequiredPermission="EmployeePosition.Read">
    <GenericDetailPageComponent TEntity="EmployeePosition" 
                            TService="IEmployeePositionService"
                            EntityId="@PositionId"
                            Entity="@position"
                            Service="@EmployeePositionService"
                            EntityName="職位設定"
                            EntityNamePlural="職位設定"
                            IndexRoute="/employee-positions"
                            EditRoute="/employee-positions/edit"
                            LoadingText="載入職位設定資料中..."
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadPositionDataAsync"
                            AdditionalDataLoader="@LoadAdditionalDataAsync"
                            EntityTitleSelector="@(p => p.Name)"
                            EntitySubtitleSelector="@(p => $"職位代碼：{p.Code ?? "未設定"} | 等級：{p.Level?.ToString() ?? "未設定"}")"
                            EntityDisplayNameSelector="@(p => p.Name)"
                            OnDataLoaded="@OnPositionDataLoaded"
                            UseTabLayout="true"
                            TabSections="@GetTabSections()">
    </GenericDetailPageComponent>
</PagePermissionCheck>
@code {
    [Parameter] public int PositionId { get; set; }

    private EmployeePosition? position;
    private List<Employee> relatedEmployees = new();
    private bool _isLoading = false;

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("基礎資料", "#"),
        new("職位設定管理", "/employee-positions"),
        new("職位詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<EmployeePosition?> LoadPositionDataAsync()
    {
        if (_isLoading)
        {
            return position;
        }
        
        try
        {
            _isLoading = true;
            if (PositionId <= 0) return null;
            
            var result = await EmployeePositionService.GetByIdAsync(PositionId);
            position = result;
            return result;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadPositionDataAsync),
                GetType(),
                additionalData: new { PositionId }
            );
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入相關員工資料
            if (position != null)
            {
                relatedEmployees = position.Employees?.ToList() ?? new List<Employee>();
            }
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadAdditionalDataAsync),
                typeof(EmployeePositionDetail),
                additionalData: new { PositionId }
            );
            return Task.CompletedTask;
        }
    }

    private Task OnPositionDataLoaded()
    {
        try
        {
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnPositionDataLoaded),
                typeof(EmployeePositionDetail),
                additionalData: new { PositionId }
            );
            throw;
        }
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<EmployeePosition, IEmployeePositionService>.TabSection> GetTabSections()
    {
        try
        {
            return new List<GenericDetailPageComponent<EmployeePosition, IEmployeePositionService>.TabSection>
            {
                new GenericDetailPageComponent<EmployeePosition, IEmployeePositionService>.TabSection
                {
                    Id = "basic",
                    Title = "基本資料",
                    Content = @<div>
                        <BasicInfoDisplayComponent 
                            Title="職位基本資訊"
                            IconClass="fas fa-briefcase"
                            IconColor="text-primary"
                            Fields="@GetPositionBasicFields()"
                            ShowFieldCount="false" />
                    </div>
                },
                new GenericDetailPageComponent<EmployeePosition, IEmployeePositionService>.TabSection
                {
                    Id = "employees",
                    Title = $"相關員工 ({relatedEmployees.Count})",
                    Content = @<div>
                        @if (relatedEmployees.Any())
                        {
                            <div class="card">
                                <div class="card-header">
                                    <h6 class="card-title mb-0">
                                        <i class="fas fa-users me-2"></i>
                                        此職位的員工列表
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        @foreach (var employee in relatedEmployees)
                                        {
                                            <div class="col-md-6 col-lg-4 mb-3">
                                                <div class="d-flex align-items-center p-3 border rounded">
                                                    <div class="flex-shrink-0">
                                                        <div class="avatar avatar-sm rounded-circle bg-primary bg-opacity-10 text-primary">
                                                            <i class="fas fa-user"></i>
                                                        </div>
                                                    </div>
                                                    <div class="flex-grow-1 ms-3">
                                                        <h6 class="mb-1">@($"{employee.FirstName} {employee.LastName}".Trim())</h6>
                                                        <small class="text-muted">@employee.EmployeeCode</small>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <div class="mb-3">
                                    <i class="fas fa-users fa-3x text-muted"></i>
                                </div>
                                <h6 class="text-muted">目前沒有員工使用此職位</h6>
                                <p class="text-muted small">當有員工被指派到此職位時，將會顯示在這裡</p>
                            </div>
                        }
                    </div>
                },
                new GenericDetailPageComponent<EmployeePosition, IEmployeePositionService>.TabSection
                {
                    Id = "system",
                    Title = "系統資訊",
                    Content = @<div>
                        <SystemInfoDisplayComponent 
                            CreatedAt="@(position?.CreatedAt ?? DateTime.MinValue)"
                            UpdatedAt="@position?.UpdatedAt"
                            CreatedBy="@position?.CreatedBy"
                            UpdatedBy="@position?.UpdatedBy"
                            Remarks="@position?.Remarks"
                            ShowTimeline="true"
                            ShowRemarks="true" />
                    </div>
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(GetTabSections),
                typeof(EmployeePositionDetail),
                additionalData: new { PositionId }
            );
            throw;
        }
    }

    // 取得職位基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetPositionBasicFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
                new()
                {
                    Label = "職位代碼",
                    Value = position?.Code,
                    IsPrimary = true,
                    EmptyText = "未設定",
                    IconClass = "fas fa-barcode",
                    IconBgClass = "bg-primary bg-opacity-10",
                    IconTextClass = "text-primary"
                },
                new()
                {
                    Label = "職位名稱",
                    Value = position?.Name,
                    ValueBold = true,
                    IconClass = "fas fa-briefcase",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info"
                },
                new()
                {
                    Label = "職位等級",
                    Value = position?.Level?.ToString(),
                    EmptyText = "未設定",
                    IconClass = "fas fa-layer-group",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning"
                },
                new()
                {
                    Label = "排序順序",
                    Value = position?.SortOrder.ToString(),
                    IconClass = "fas fa-sort-numeric-up",
                    IconBgClass = "bg-secondary bg-opacity-10",
                    IconTextClass = "text-secondary"
                },
                new()
                {
                    Label = "狀態",
                    Type = BasicInfoDisplayComponent.FieldType.Status,
                    Value = position?.Status,
                    IconClass = "fas fa-flag",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "員工數量",
                    Value = relatedEmployees.Count.ToString(),
                    IconClass = "fas fa-users",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info"
                },
                new()
                {
                    Label = "職位描述",
                    Value = position?.Description,
                    VisibilityCondition = () => !string.IsNullOrEmpty(position?.Description),
                    IconClass = "fas fa-align-left",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info",
                    ColSize = 12
                },
                new()
                {
                    Label = "備註",
                    Value = position?.Remarks,
                    VisibilityCondition = () => !string.IsNullOrEmpty(position?.Remarks),
                    IconClass = "fas fa-sticky-note",
                    IconBgClass = "bg-secondary bg-opacity-10",
                    IconTextClass = "text-secondary",
                    ColSize = 12
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(GetPositionBasicFields),
                typeof(EmployeePositionDetail),
                additionalData: new { PositionId }
            );
            throw;
        }
    }
}
