@page "/departments/detail/{departmentId:int}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Helpers
@inject IDepartmentService DepartmentService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PagePermissionCheck RequiredPermission="Department.Read">
    <GenericDetailPageComponent TEntity="Department" 
                            TService="IDepartmentService"
                            EntityId="@DepartmentId"
                            Entity="@department"
                            Service="@DepartmentService"
                            EntityName="部門"
                            EntityNamePlural="部門"
                            IndexRoute="/departments"
                            EditRoute="/departments/edit"
                            LoadingText="載入部門資料中..."
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadDepartmentDataAsync"
                            AdditionalDataLoader="@LoadAdditionalDataAsync"
                            EntityTitleSelector="@(d => d.Name)"
                            EntitySubtitleSelector="@(d => $"部門代碼：{d.DepartmentCode ?? "未設定"}")"
                            EntityDisplayNameSelector="@(d => d.Name)"
                            OnDataLoaded="@OnDepartmentDataLoaded"
                            UseTabLayout="true"
                            TabSections="@GetTabSections()">
    </GenericDetailPageComponent>
</PagePermissionCheck>

@code {
    [Parameter] public int DepartmentId { get; set; }

    private Department? department;
    private bool _isLoading = false;

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("員工管理", "#"),
        new("部門設定", "/departments"),
        new("部門詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Department?> LoadDepartmentDataAsync()
    {
        if (_isLoading)
        {
            return department;
        }
        
        try
        {
            _isLoading = true;
            if (DepartmentId <= 0) return null;
            
            var result = await DepartmentService.GetByIdAsync(DepartmentId);
            department = result;
            return result;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadDepartmentDataAsync),
                GetType(),
                additionalData: new { DepartmentId }
            );
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Task LoadAdditionalDataAsync()
    {
        try
        {
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadAdditionalDataAsync),
                typeof(DepartmentDetail),
                additionalData: new { DepartmentId }
            );
            throw;
        }
    }

    private Task OnDepartmentDataLoaded()
    {
        try
        {
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnDepartmentDataLoaded),
                typeof(DepartmentDetail),
                additionalData: new { DepartmentId }
            );
            throw;
        }
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Department, IDepartmentService>.TabSection> GetTabSections()
    {
        try
        {
            return new List<GenericDetailPageComponent<Department, IDepartmentService>.TabSection>
            {
                new GenericDetailPageComponent<Department, IDepartmentService>.TabSection
                {
                    Id = "basic",
                    Title = "基本資料",
                    Content = @<div>
                        <BasicInfoDisplayComponent Fields="@GetDepartmentBasicFields()" />
                    </div>
                },
                new GenericDetailPageComponent<Department, IDepartmentService>.TabSection
                {
                    Id = "system",
                    Title = "系統資訊",
                    Content = @<div>
                        <BasicInfoDisplayComponent Fields="@GetSystemFields()" />
                    </div>
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(GetTabSections),
                typeof(DepartmentDetail),
                additionalData: new { DepartmentId }
            );
            throw;
        }
    }

    // 取得部門基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetDepartmentBasicFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
                new()
                {
                    Label = "部門代碼",
                    Value = department?.DepartmentCode,
                    IsPrimary = true,
                    EmptyText = "未設定",
                    IconClass = "fas fa-barcode",
                    IconBgClass = "bg-primary bg-opacity-10",
                    IconTextClass = "text-primary"
                },
                new()
                {
                    Label = "部門名稱",
                    Value = department?.Name,
                    ValueBold = true,
                    IconClass = "fas fa-building",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info"
                },
                new()
                {
                    Label = "上級部門",
                    Value = department?.ParentDepartment?.Name,
                    EmptyText = "無上級部門",
                    IconClass = "fas fa-sitemap",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "排序順序",
                    Value = department?.SortOrder.ToString(),
                    IconClass = "fas fa-sort-numeric-down",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning"
                },
                new()
                {
                    Label = "狀態",
                    Type = BasicInfoDisplayComponent.FieldType.Status,
                    Value = department?.Status,
                    IconClass = "fas fa-flag",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "部門描述",
                    Value = department?.Description,
                    VisibilityCondition = () => !string.IsNullOrEmpty(department?.Description),
                    IconClass = "fas fa-align-left",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info",
                    ColSize = 12
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(GetDepartmentBasicFields),
                typeof(DepartmentDetail),
                additionalData: new { DepartmentId }
            );
            throw;
        }
    }

    // 取得系統資訊欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetSystemFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
                new()
                {
                    Label = "建立時間",
                    Value = department?.CreatedAt.ToString("yyyy/MM/dd HH:mm:ss"),
                    IconClass = "fas fa-calendar-plus",
                    IconBgClass = "bg-primary bg-opacity-10",
                    IconTextClass = "text-primary"
                },
                new()
                {
                    Label = "建立者",
                    Value = department?.CreatedBy,
                    IconClass = "fas fa-user-plus",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "更新時間",
                    Value = department?.UpdatedAt?.ToString("yyyy/MM/dd HH:mm:ss"),
                    EmptyText = "未曾更新",
                    IconClass = "fas fa-calendar-edit",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning"
                },
                new()
                {
                    Label = "更新者",
                    Value = department?.UpdatedBy,
                    EmptyText = "未曾更新",
                    IconClass = "fas fa-user-edit",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info"
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(GetSystemFields),
                typeof(DepartmentDetail),
                additionalData: new { DepartmentId }
            );
            throw;
        }
    }
}
