@page "/roles/edit"
@page "/roles/edit/{id:int?}"

@inject IRoleService RoleService
@inject IJSRuntime JSRuntime
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="Role" 
                         TService="IRoleService"
                         Id="@Id"
                         Entity="@role"
                         Service="@RoleService"
                         EntityName="角色"
                         EntityNamePlural="角色"
                         PageTitle="@(Id.HasValue ? "編輯角色" : "新增角色")"
                         FormTitle="基本資料"
                         FormSubtitle="角色的基本資訊與描述"
                         IndexRoute="/roles"
                         FormFields="@basicFormFields"
                         FormSections="@basicFormSections"
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadRoleData"
                         SaveHandler="@SaveRole"
                         AdditionalDataLoader="@LoadAdditionalData"
                         @ref="editComponent"
                        RequiredPermission="Role.Read">
</GenericEditPageComponent>


@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<Role, IRoleService> editComponent = default!;
    
    // 資料模型
    private Role role = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> basicFormFields = new();
    private Dictionary<string, string> basicFormSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeBasicFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: new { Id = Id });
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("角色設定", "/roles"),
                new(Id.HasValue ? "編輯角色" : "新增角色")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: new { Id = Id });
        }
    }

    private async Task LoadAdditionalData()
    {
        try
        {
            // 載入其他必要資料
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalData), GetType(),
                additionalData: new { Id = Id });
        }
    }

    private void InitializeBasicFormFields()
    {
        try
        {
            basicFormFields = new List<FormFieldDefinition>
            {
                new FormFieldDefinition
                {
                    PropertyName = nameof(Role.RoleName),
                    Label = "角色名稱",
                    IsRequired = true,
                    Placeholder = "請輸入角色名稱",
                    FieldType = FormFieldType.Text,
                    MaxLength = 50,
                    HelpText = "角色的唯一名稱，用於區別不同的系統權限群組，最多50個字元"
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(Role.Description),
                    Label = "角色描述",
                    IsRequired = false,
                    Placeholder = "請輸入角色描述",
                    FieldType = FormFieldType.TextArea,
                    MaxLength = 200,
                    Rows = 2,
                    HelpText = "簡要說明此角色的職責與用途，幫助了解角色功能，最多200個字元"
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(Role.Remarks),
                    Label = "備註",
                    IsRequired = false,
                    Placeholder = "請輸入備註",
                    FieldType = FormFieldType.TextArea,
                    MaxLength = 500,
                    Rows = 2,
                    HelpText = "角色的額外說明或注意事項，可記錄特殊使用情況或限制，最多500個字元"
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(Role.IsSystemRole),
                    Label = "系統角色",
                    FieldType = FormFieldType.Checkbox,
                    HelpText = "系統角色無法刪除且權限受限制，通常為系統預設的重要角色"
                }
            };

            basicFormSections = new Dictionary<string, string>
            {
                { nameof(Role.RoleName), "基本資訊" },                
                { nameof(Role.IsSystemRole), "基本資訊" },
                { nameof(Role.Description), "額外資訊" },
                { nameof(Role.Remarks), "額外資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBasicFormFields), GetType(),
                additionalData: new { Id = Id });
        }
    }
    private async Task<Role?> LoadRoleData()
    {
        try
        {
            if (!Id.HasValue) 
            {
                role = new Role();
                return role;
            }

            var result = await RoleService.GetByIdAsync(Id.Value);
            if (result != null)
            {
                role = result;
                return result;
            }
            
            return null;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadRoleData), GetType(),
                additionalData: new { Id = Id });
            return null;
        }
    }

    private async Task<bool> SaveRole(Role entity)
    {
        try
        {
            // 驗證角色名稱是否重複
            var nameCheckResult = await RoleService.IsRoleNameExistsAsync(entity.RoleName, entity.Id);
            if (!nameCheckResult.IsSuccess)
            {
                await NotificationService.ShowErrorAsync($"驗證角色名稱時發生錯誤：{nameCheckResult.ErrorMessage}", "驗證失敗");
                _ = ErrorHandlingHelper.HandlePageErrorAsync(
                    new Exception($"驗證失敗：{nameCheckResult.ErrorMessage}"), 
                    nameof(SaveRole), 
                    GetType(),
                    additionalData: new { Id = Id, RoleName = entity.RoleName, ErrorMessage = nameCheckResult.ErrorMessage });
                return false;
            }

            if (nameCheckResult.Data)
            {
                await NotificationService.ShowErrorAsync($"角色名稱「{entity.RoleName}」已經存在，請輸入不同的角色名稱", "角色名稱重複");
                _ = ErrorHandlingHelper.HandlePageErrorAsync(
                    new Exception("角色名稱重複"), 
                    nameof(SaveRole), 
                    GetType(),
                    additionalData: new { Id = Id, RoleName = entity.RoleName });
                return false;
            }

            // 儲存角色基本資料
            ServiceResult result;
            if (entity.Id == 0)
            {
                result = await RoleService.CreateAsync(entity);
            }
            else
            {
                result = await RoleService.UpdateAsync(entity);
            }

            if (!result.IsSuccess)
            {
                await NotificationService.ShowErrorAsync($"儲存角色時發生錯誤：{result.ErrorMessage}", "儲存失敗");
                _ = ErrorHandlingHelper.HandlePageErrorAsync(
                    new Exception($"儲存失敗：{result.ErrorMessage}"), 
                    nameof(SaveRole), 
                    GetType(),
                    additionalData: new { Id = Id, RoleName = entity.RoleName, ErrorMessage = result.ErrorMessage });
                return false;
            }

            await JSRuntime.InvokeVoidAsync("console.log", $"角色「{entity.RoleName}」已成功儲存");
            return true;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync("儲存角色時發生未預期的錯誤，請稍後再試或聯絡系統管理員", "系統錯誤");
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveRole), GetType(),
                additionalData: new { Id = Id, RoleName = entity.RoleName });
            return false;
        }
    }
}
