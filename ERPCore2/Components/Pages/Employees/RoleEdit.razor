@page "/roles/edit"
@page "/roles/edit/{id:int?}"
@inject IRoleService RoleService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>@(Id.HasValue ? "編輯角色" : "新增角色")</PageTitle>

<GenericEditPageComponent TEntity="Role" 
                         TService="IRoleService"
                         Id="@Id"
                         Entity="@role"
                         Service="@RoleService"
                         EntityName="角色"
                         EntityNamePlural="角色"
                         FormTitle="基本資料"
                         FormSubtitle="角色的基本資訊與描述"
                         IndexRoute="/roles"
                         UseGenericForm="true"
                         FormFields="@basicFormFields"
                         FormSections="@basicFormSections"
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadRoleData"
                         SaveHandler="@SaveRole"
                         AdditionalDataLoader="@LoadAdditionalData"
                         @ref="editComponent">
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<Role, IRoleService> editComponent = default!;
    
    // 資料模型
    private Role role = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> basicFormFields = new();
    private Dictionary<string, string> basicFormSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeBasicFormFields();
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("基礎資料", "#"),
            new("角色維護", "/roles"),
            new(Id.HasValue ? "編輯角色" : "新增角色")
        };
    }

    private async Task LoadAdditionalData()
    {
        // 載入其他必要資料
        await Task.CompletedTask;
    }

    private void InitializeBasicFormFields()
    {
        basicFormFields = new List<FormFieldDefinition>
        {
            new FormFieldDefinition
            {
                PropertyName = nameof(Role.RoleName),
                Label = "角色名稱",
                IsRequired = true,
                Placeholder = "請輸入角色名稱",
                FieldType = FormFieldType.Text,
                MaxLength = 50
            },
            new FormFieldDefinition
            {
                PropertyName = nameof(Role.Description),
                Label = "角色描述",
                IsRequired = false,
                Placeholder = "請輸入角色描述",
                FieldType = FormFieldType.TextArea,
                MaxLength = 200,
                Rows = 3
            },
            new FormFieldDefinition
            {
                PropertyName = nameof(Role.IsSystemRole),
                Label = "系統角色",
                FieldType = FormFieldType.Checkbox,
                HelpText = "系統角色無法刪除且權限受限制"
            }
        };

        basicFormSections = new Dictionary<string, string>
        {
            { nameof(Role.RoleName), "基本資訊" },
            { nameof(Role.Description), "基本資訊" },
            { nameof(Role.IsSystemRole), "角色設定" }
        };
    }
      private async Task<Role?> LoadRoleData()
    {
        try
        {
            if (!Id.HasValue) 
            {
                role = new Role();
                return role;
            }

            var result = await RoleService.GetByIdAsync(Id.Value);
            if (result != null)
            {
                role = result;
                return result;
            }
            
            return null;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入角色資料失敗：", ex.Message);
            return null;
        }
    }

    private async Task<bool> SaveRole(Role entity)
    {
        try
        {
            // 驗證角色名稱是否重複
            var nameCheckResult = await RoleService.IsRoleNameExistsAsync(entity.RoleName, entity.Id);
            if (!nameCheckResult.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("console.error", "驗證失敗：", nameCheckResult.ErrorMessage);
                return false;
            }

            if (nameCheckResult.Data)
            {
                await JSRuntime.InvokeVoidAsync("console.error", "角色名稱重複");
                return false;
            }

            // 儲存角色基本資料
            ServiceResult result;
            if (entity.Id == 0)
            {
                result = await RoleService.CreateAsync(entity);
            }
            else
            {
                result = await RoleService.UpdateAsync(entity);
            }

            if (!result.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("console.error", "儲存失敗：", result.ErrorMessage);
                return false;
            }

            await JSRuntime.InvokeVoidAsync("console.log", $"角色「{entity.RoleName}」已成功儲存");
            return true;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "儲存角色失敗：", ex.Message);
            return false;
        }
    }
}
