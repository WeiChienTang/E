@page "/roles"
@inject IRoleService RoleService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Role" 
                          TService="IRoleService"
                          Service="@RoleService"
                          EntityBasePath="/roles"
                          PageTitle="角色設定"
                          PageSubtitle="管理系統角色與權限設定"
                          EntityName="角色"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadRolesAsync"
                          FilterApplier="@ApplyRoleFilters"
                          GetEntityDisplayName="@(role => role.Name)"
                          RequiredPermission="Role.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 角色編輯 Modal *@
<RoleEditModalComponent IsVisible="@showEditModal"
                        IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                        RoleId="@editingRoleId"
                        OnRoleSaved="@modalHandler.OnEntitySavedAsync"
                        OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Role, IRoleService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingRoleId = null;
    
    // Modal 處理器
    private ModalHandler<Role, GenericIndexPageComponent<Role, IRoleService>> modalHandler = default!;
    
    // 欄位配置
    private RoleFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Role, GenericIndexPageComponent<Role, IRoleService>>(
                id => editingRoleId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 建立欄位配置（傳遞 NotificationService）
            fieldConfiguration = new RoleFieldConfiguration(NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化角色頁面失敗");
            await NotificationService.ShowErrorAsync("初始化角色頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "#"),
                new("角色設定")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入角色資料
    private async Task<List<Role>> LoadRolesAsync()
    {
        try
        {
            return await RoleService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadRolesAsync), GetType(), additionalData: "載入角色資料失敗");
            await NotificationService.ShowErrorAsync("載入角色資料失敗");
            // 設定安全的預設值
            return new List<Role>();
        }
    }

    private IQueryable<Role> ApplyRoleFilters(SearchFilterModel searchModel, IQueryable<Role> query)
    {
        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyRoleFilters), GetType());
    }
}
