@page "/roles"
@inject IRoleService RoleService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Role" 
                          TService="IRoleService"
                          Service="@RoleService"
                          EntityBasePath="/roles"
                          PageTitle="角色設定"
                          PageSubtitle="管理系統角色與權限設定"
                          EntityName="角色"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadRolesAsync"
                          FilterApplier="@ApplyRoleFilters"
                          GetEntityDisplayName="@(role => role.RoleName)"
                          RequiredPermission="Role.Read"
                          OnAddClick="@ShowAddModal"
                          OnRowClick="@ShowEditModal"
                          @ref="indexComponent" />

@* 角色編輯 Modal *@
<RoleEditModalComponent IsVisible="@showEditModal"
                        IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                        RoleId="@editingRoleId"
                        OnRoleSaved="@OnRoleSaved"
                        OnCancel="@OnModalCancel" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Role, IRoleService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingRoleId = null;

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitialized),
                GetType(),
                additionalData: new { PageName = "RoleIndex" }
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "#"),
                new("角色設定")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: new { PageName = "RoleIndex" }
            );
        }
    }

    // 載入角色資料
    private async Task<List<Role>> LoadRolesAsync()
    {
        try
        {
            return await RoleService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadRolesAsync),
                GetType(),
                additionalData: new { PageName = "RoleIndex" }
            );
            return new List<Role>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備系統角色選項
            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("RoleName", "角色名稱", "輸入角色名稱搜尋")
                .AddText("Description", "角色描述", "輸入角色描述搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: new { PageName = "RoleIndex" }
            );
        }
    }    
    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("角色名稱", nameof(Role.RoleName)),
                TableColumnDefinition.Text("角色描述", nameof(Role.Description)),
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: new { PageName = "RoleIndex" }
            );
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Role> ApplyRoleFilters(SearchFilterModel searchModel, IQueryable<Role> query)
    {
        var filterActions = new List<Func<SearchFilterModel, IQueryable<Role>, IQueryable<Role>>>
        {
            // 應用基礎實體篩選（狀態、備註）
            (model, q) => FilterHelper.ApplyBaseEntityFilters(model, q),
            
            // 角色名稱篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "RoleName", r => r.RoleName),
            
            // 角色描述篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "Description", r => r.Description, allowNull: true)
        };

        return FilterHelper.ApplyFiltersWithErrorHandling(
            searchModel,
            query,
            filterActions,
            q => q.OrderBy(r => r.RoleName), // 預設排序
            nameof(ApplyRoleFilters),
            GetType()
        );
    }

    // ===== Modal 相關方法 =====
    private Task ShowAddModal()
    {
        editingRoleId = null;
        showEditModal = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task ShowEditModal(Role role)
    {
        if (role?.Id != null)
        {
            editingRoleId = role.Id;
            showEditModal = true;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private async Task OnRoleSaved(Role savedRole)
    {
        showEditModal = false;
        editingRoleId = null;
        
        if (indexComponent != null)
        {
            await indexComponent.Refresh();
        }
        
        StateHasChanged();
    }

    private Task OnModalCancel()
    {
        showEditModal = false;
        editingRoleId = null;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
