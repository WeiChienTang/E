@page "/departments/edit"
@page "/departments/edit/{id:int?}"
@inject IDepartmentService DepartmentService
@inject INotificationService NotificationService 
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="Department" 
                        TService="IDepartmentService"
                        @ref="editComponent"
                        Id="@Id"
                        Service="@DepartmentService"
                        EntityName="部門"
                        EntityNamePlural="部門"
                        PageTitle="@(Id.HasValue ? "編輯部門" : "新增部門")"
                        IndexRoute="/departments"
                        FormTitle="基本資料"
                        FormSubtitle="部門的基本資訊與組織架構"
                        UseGenericForm="true"
                        FormFields="@GetFormFields()"
                        FormSections="@formSections"
                        BreadcrumbItems="@breadcrumbItems"
                        DataLoader="@LoadDepartmentData"
                        UseGenericSave="true"
                        SaveSuccessMessage="@(Id.HasValue ? "部門更新成功" : "部門新增成功")"
                        SaveFailureMessage="部門儲存失敗"
                        RequiredPermission="@(Id.HasValue ? "Department.Update" : "Department.Create")" />

@code {
    [Parameter] public int? Id { get; set; }
    
    private GenericEditPageComponent<Department, IDepartmentService>? editComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<Employee> availableManagers = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            await LoadAdditionalDataAsync();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), NotificationService);
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入可選擇的主管員工列表
            availableManagers = await DepartmentService.GetAvailableManagersAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalDataAsync), GetType(), NotificationService);
            availableManagers = new List<Employee>();
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "#"),
                new("部門設定", "/departments"),
                new(Id.HasValue ? "編輯部門" : "新增部門")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(), NotificationService);
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            // 準備主管選項
            var managerOptions = availableManagers.Select(e => new SelectOption
            {
                Text = $"{e.EmployeeCode} - {e.FirstName}{e.LastName}".Trim(),
                Value = e.Id.ToString()
            }).ToList();

            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(Department.DepartmentCode),
                    Label = "部門代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入部門代碼",
                    IsRequired = true,
                    HelpText = "部門的唯一識別代碼，新增時系統會自動產生，也可手動修改"
                },
                new()
                {
                    PropertyName = nameof(Department.Name),
                    Label = "部門名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入部門名稱",
                    IsRequired = true,
                    HelpText = "部門的正式名稱，將顯示在系統各處"
                },
                new()
                {
                    PropertyName = nameof(Department.ManagerId),
                    Label = "部門主管",
                    FieldType = FormFieldType.Select,
                    Placeholder = "請選擇部門主管",
                    Options = managerOptions,
                    HelpText = "選擇負責管理此部門的員工"
                },
                
                // 描述區段
                new()
                {
                    PropertyName = nameof(Department.Description),
                    Label = "部門描述",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入部門描述",
                    Rows = 3,
                    HelpText = "詳細描述部門的職責範圍、工作內容或其他相關資訊"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(Department.DepartmentCode), "基本資訊" },
                { nameof(Department.Name), "基本資訊" },
                { nameof(Department.ManagerId), "基本資訊" },
                { nameof(Department.Description), "詳細資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "初始化表單欄位時發生錯誤", GetType(), NotificationService);
        }
    }    private List<FormFieldDefinition> GetFormFields()
    {
        try
        {
            return formFields;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "取得表單欄位時發生錯誤", GetType(), NotificationService);
            return new List<FormFieldDefinition>();
        }
    }

    private async Task<Department?> LoadDepartmentData()
    {
        try
        {
            if (!Id.HasValue) 
            {
                // 新增模式：建立新的部門實體並生成代碼
                return new Department
                {
                    Name = string.Empty,
                    DepartmentCode = await GenerateDepartmentCodeAsync(),
                    Status = EntityStatus.Active
                };
            }

            var department = await DepartmentService.GetByIdAsync(Id.Value);            
            
            if (department == null)
            {
                // 如果找不到部門，建立新的預設部門
                return new Department
                {
                    Status = EntityStatus.Active
                };
            }
            return department;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadDepartmentData), GetType(), NotificationService);
            
            // 設定安全的預設值，確保程式不會崩潰
            return new Department
            {
                DepartmentCode = "ERROR",
                Name = "ERROR",
                Status = EntityStatus.Active
            };
        }
    }

    private async Task<string> GenerateDepartmentCodeAsync()
    {
        try
        {
            // 簡單的部門代碼生成邏輯：DEPT + 時間戳
            var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            var baseCode = $"DEPT{timestamp}";
            
            // 檢查是否重複，如果重複則加上隨機數
            var isExists = await DepartmentService.IsDepartmentCodeExistsAsync(baseCode);
            if (isExists)
            {
                var random = new Random().Next(100, 999);
                baseCode = $"DEPT{timestamp}{random}";
            }
            
            return baseCode;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GenerateDepartmentCodeAsync), GetType(), NotificationService);
            // 如果生成失敗，返回預設格式
            return $"DEPT{DateTime.Now:yyyyMMddHHmmss}";
        }
    }
}

