@page "/employees"
@inject IEmployeeService EmployeeService
@inject IRoleService RoleService
@inject IDepartmentService DepartmentService
@inject IEmployeePositionService EmployeePositionService
@inject INotificationService NotificationService

@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Employee" 
                        TService="IEmployeeService"
                        Service="@EmployeeService"
                        EntityBasePath="/employees"                          
                        PageTitle="員工維護"
                        PageSubtitle="管理員工資料與權限設定"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        DataLoader="@LoadEmployeesAsync"
                        InitializeBasicData="@LoadBasicDataAsync"
                        FilterApplier="@ApplyEmployeeFilters"
                        EntityName="員工"
                        GetEntityDisplayName="@(employee => $"{employee.FirstName} {employee.LastName}".Trim())"
                        RequiredPermission="Employee.Read"
                        OnAddClick="@ShowAddModal"
                        OnRowClick="@ShowEditModal"
                        @ref="indexComponent" />

@* 員工編輯 Modal *@
<EmployeeEditModalComponent IsVisible="@showEditModal"
                           IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                           EmployeeId="@editingEmployeeId"
                           OnEmployeeSaved="@OnEmployeeSaved"
                           OnCancel="@OnModalCancel" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Employee, IEmployeeService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingEmployeeId = null;
    
    // 選項清單
    private List<Role> roles = new();
    private List<Department> departments = new();
    private List<EmployeePosition> employeePositions = new();
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            // 記錄初始化錯誤（使用 Fire-and-Forget 因為這裡不能用 async）
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(OnInitialized), 
                    GetType(),
                    additionalData: new { 
                        PageName = "EmployeeIndex",
                        Action = "Initialize",
                        Phase = "ComponentInitialization"
                    });
            });
            
            // 確保基本初始化完成，避免程式崩潰
            try
            {
                breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
                {
                    new("首頁", "/"),
                    new("員工管理")
                };
                filterDefinitions = new List<SearchFilterDefinition>();
                columnDefinitions = new List<TableColumnDefinition>();
            }
            catch
            {
                // 如果連預設值都設定失敗，至少確保不是 null
                breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
                filterDefinitions ??= new List<SearchFilterDefinition>();
                columnDefinitions ??= new List<TableColumnDefinition>();
            }
        }
    }

    // ===== Modal 相關方法 =====

    private async Task ShowAddModal()
    {
        try
        {
            editingEmployeeId = null;
            showEditModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowAddModal), GetType());
        }
    }

    private async Task ShowEditModal(Employee employee)
    {
        try
        {
            if (employee?.Id != null)
            {
                editingEmployeeId = employee.Id;
                showEditModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowEditModal), GetType());
        }
    }

    private async Task OnEmployeeSaved(Employee savedEmployee)
    {
        try
        {
            // 關閉 Modal
            showEditModal = false;
            editingEmployeeId = null;
            
            // 重新載入資料
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnEmployeeSaved), GetType());
        }
    }

    private async Task OnModalCancel()
    {
        try
        {
            showEditModal = false;
            editingEmployeeId = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnModalCancel), GetType());
        }
    }

    // ===== 原有的初始化方法 =====

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理")
            };
        }
        catch (Exception ex)
        {
            // 記錄麵包屑初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeBreadcrumbs), 
                    GetType(),
                    additionalData: new { 
                        PageName = "EmployeeIndex",
                        Action = "InitializeBreadcrumbs"
                    });
            });
            
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            roles = await RoleService.GetAllAsync();
            departments = await DepartmentService.GetAllAsync();
            employeePositions = await EmployeePositionService.GetAllAsync();
            
            // 重新初始化篩選器（因為需要選項資料）
            InitializeFilters();
            
            // 重要：通知組件狀態已改變，確保參數更新
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadBasicDataAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeIndex",
                    Action = "LoadBasicData",
                    ExpectedData = "Roles, Departments, EmployeePositions"
                });
            
            // 設定安全的預設值，確保程式不會崩潰
            roles = new List<Role>();
            departments = new List<Department>();
            employeePositions = new List<EmployeePosition>();
            
            // 即使失敗也要重新初始化篩選器
            InitializeFilters();
            StateHasChanged();
        }
    }

    // 載入員工資料
    private async Task<List<Employee>> LoadEmployeesAsync()
    {
        try
        {
            return await EmployeeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadEmployeesAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeIndex",
                    Action = "LoadEmployees",
                    ExpectedDataType = "List<Employee>"
                });
            
            // 確保 UI 狀態更新，並回傳安全的預設值
            StateHasChanged();
            return new List<Employee>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備角色選項
            var roleOptions = roles.Select(r => new SelectOption
            {
                Text = r.RoleName,
                Value = r.Id.ToString()
            }).ToList();

            // 準備部門選項
            var departmentOptions = departments.Select(d => new SelectOption
            {
                Text = d.Name,
                Value = d.Id.ToString()
            }).ToList();

            // 準備職位選項
            var positionOptions = employeePositions.Select(p => new SelectOption
            {
                Text = p.Name,
                Value = p.Id.ToString()
            }).ToList();


            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("EmployeeCode", "員工代碼", "輸入員工代碼搜尋")
                .AddText("Account", "帳號", "輸入帳號搜尋")
                .AddText("FirstName", "名字", "輸入名字搜尋")
                .AddText("LastName", "姓氏", "輸入姓氏搜尋")
                .AddSelect("DepartmentId", "部門", departmentOptions)
                .AddSelect("EmployeePositionId", "職位", positionOptions)
                .AddSelect("RoleId", "角色", roleOptions)
                .AddSelect("IsSystemUser", "系統使用者", new List<SelectOption>
                {
                    new SelectOption { Text = "是", Value = "true" },
                    new SelectOption { Text = "否", Value = "false" }
                })
                .Build();
        }
        catch (Exception ex)
        {
            // 記錄篩選器初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeFilters), 
                    GetType(),
                    additionalData: new { 
                        PageName = "EmployeeIndex",
                        Action = "InitializeFilters"
                    });
            });
            
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("員工代碼", nameof(Employee.EmployeeCode)),
                TableColumnDefinition.Text("帳號", nameof(Employee.Account)),
                TableColumnDefinition.Template("姓名", item => 
                {
                    var employee = (Employee)item;
                    var firstName = employee.FirstName ?? "";
                    var lastName = employee.LastName ?? "";
                    return @<span>@($"{lastName}{firstName}".Trim())</span>;
                }),
                TableColumnDefinition.Text("部門", "Department.Name"),
                TableColumnDefinition.Text("職位", "EmployeePosition.Name"),
                TableColumnDefinition.Text("角色", "Role.RoleName"),
                new TableColumnDefinition
                {
                    Title = "系統操控",
                    PropertyName = nameof(Employee.IsSystemUser),
                    CustomTemplate = item => builder =>
                    {
                        var employee = (Employee)item;
                        builder.OpenElement(0, "span");
                        builder.AddAttribute(1, "class", "badge text-white");
                        builder.AddAttribute(2, "style", employee.IsSystemUser ? "background-color: #28a745;" : "background-color: #dc3545;");
                        builder.AddContent(3, employee.IsSystemUser ? "有權限" : "無權限");
                        builder.CloseElement();
                    }
                },
                TableColumnDefinition.Date("最後登入", nameof(Employee.LastLoginAt), "yyyy/MM/dd HH:mm"),
            };
        }
        catch (Exception ex)
        {
            // 記錄表格欄位初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeTableColumns), 
                    GetType(),
                    additionalData: new { 
                        PageName = "EmployeeIndex",
                        Action = "InitializeTableColumns"
                    });
            });
            
            // 設定安全的預設值
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Employee> ApplyEmployeeFilters(SearchFilterModel searchModel, IQueryable<Employee> query)
    {
        var filterActions = new List<Func<SearchFilterModel, IQueryable<Employee>, IQueryable<Employee>>>
        {
            // 應用基礎實體篩選（狀態、備註）
            (model, q) => FilterHelper.ApplyBaseEntityFilters(model, q),
            
            // 員工代碼篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "EmployeeCode", e => e.EmployeeCode),
            
            // 帳號篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "Account", e => e.Account, allowNull: true),
            
            // 名字篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "FirstName", e => e.FirstName, allowNull: true),
            
            // 姓氏篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "LastName", e => e.LastName, allowNull: true),
            
            // 部門篩選
            (model, q) => FilterHelper.ApplyNullableIntIdFilter(model, q, "DepartmentId", e => e.DepartmentId),
            
            // 職位篩選
            (model, q) => FilterHelper.ApplyNullableIntIdFilter(model, q, "EmployeePositionId", e => e.EmployeePositionId),
            
            // 角色篩選  
            (model, q) => FilterHelper.ApplyNullableIntIdFilter(model, q, "RoleId", e => e.RoleId),
            
            // 系統使用者篩選
            (model, q) => {
                var isSystemUserFilter = model.GetFilterValue("IsSystemUser")?.ToString();
                if (!string.IsNullOrWhiteSpace(isSystemUserFilter))
                {
                    var isSystemUser = bool.Parse(isSystemUserFilter);
                    q = q.Where(e => e.IsSystemUser == isSystemUser);
                }
                return q;
            },
        };

        return FilterHelper.ApplyFiltersWithErrorHandling(
            searchModel,
            query,
            filterActions,
            q => q.OrderBy(e => e.EmployeeCode), // 預設排序
            nameof(ApplyEmployeeFilters),
            GetType()
        );
    }
}
