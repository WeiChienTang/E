@page "/employees"
@inject IEmployeeService EmployeeService
@inject IRoleService RoleService
@inject IDepartmentService DepartmentService
@inject IEmployeePositionService EmployeePositionService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Employee" 
                        TService="IEmployeeService"
                        Service="@EmployeeService"
                        EntityBasePath="/employees"                          
                        PageTitle="員工維護"
                        PageSubtitle="管理員工資料與權限設定"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        DataLoader="@LoadEmployeesAsync"
                        InitializeBasicData="@LoadBasicDataAsync"
                        FilterApplier="@ApplyEmployeeFilters"
                        EntityName="員工"
                        GetEntityDisplayName="@(employee => $"{employee.FirstName} {employee.LastName}".Trim())"
                        RequiredPermission="Employee.Read"
                        @ref="indexComponent" />
@code {
    // 組件參考
    private GenericIndexPageComponent<Employee, IEmployeeService> indexComponent = default!;
    
    // 選項清單
    private List<Role> roles = new();
    private List<Department> departments = new();
    private List<EmployeePosition> employeePositions = new();
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            // 記錄初始化錯誤（使用 Fire-and-Forget 因為這裡不能用 async）
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(OnInitialized), 
                    GetType(),
                    additionalData: new { 
                        PageName = "EmployeeIndex",
                        Action = "Initialize",
                        Phase = "ComponentInitialization"
                    });
            });
            
            // 確保基本初始化完成，避免程式崩潰
            try
            {
                breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
                {
                    new("首頁", "/"),
                    new("員工管理")
                };
                filterDefinitions = new List<SearchFilterDefinition>();
                columnDefinitions = new List<TableColumnDefinition>();
            }
            catch
            {
                // 如果連預設值都設定失敗，至少確保不是 null
                breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
                filterDefinitions ??= new List<SearchFilterDefinition>();
                columnDefinitions ??= new List<TableColumnDefinition>();
            }
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理")
            };
        }
        catch (Exception ex)
        {
            // 記錄麵包屑初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeBreadcrumbs), 
                    GetType(),
                    additionalData: new { 
                        PageName = "EmployeeIndex",
                        Action = "InitializeBreadcrumbs"
                    });
            });
            
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            roles = await RoleService.GetAllAsync();
            departments = await DepartmentService.GetAllAsync();
            employeePositions = await EmployeePositionService.GetAllAsync();
            
            // 重新初始化篩選器（因為需要選項資料）
            InitializeFilters();
            
            // 重要：通知組件狀態已改變，確保參數更新
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadBasicDataAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeIndex",
                    Action = "LoadBasicData",
                    ExpectedData = "Roles, Departments, EmployeePositions"
                });
            
            // 設定安全的預設值，確保程式不會崩潰
            roles = new List<Role>();
            departments = new List<Department>();
            employeePositions = new List<EmployeePosition>();
            
            // 即使失敗也要重新初始化篩選器
            InitializeFilters();
            StateHasChanged();
        }
    }

    // 載入員工資料
    private async Task<List<Employee>> LoadEmployeesAsync()
    {
        try
        {
            return await EmployeeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadEmployeesAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeIndex",
                    Action = "LoadEmployees",
                    ExpectedDataType = "List<Employee>"
                });
            
            // 確保 UI 狀態更新，並回傳安全的預設值
            StateHasChanged();
            return new List<Employee>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備角色選項
            var roleOptions = roles.Select(r => new SelectOption
            {
                Text = r.RoleName,
                Value = r.Id.ToString()
            }).ToList();

            // 準備部門選項
            var departmentOptions = departments.Select(d => new SelectOption
            {
                Text = d.Name,
                Value = d.Id.ToString()
            }).ToList();

            // 準備職位選項
            var positionOptions = employeePositions.Select(p => new SelectOption
            {
                Text = p.Name,
                Value = p.Id.ToString()
            }).ToList();

            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 準備帳號鎖定狀態選項
            var lockOptions = new List<SelectOption>
            {
                new() { Text = "正常", Value = "false" },
                new() { Text = "鎖定", Value = "true" }
            };

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("EmployeeCode", "員工代碼", "輸入員工代碼搜尋")
                .AddText("Username", "帳號", "輸入帳號搜尋")
                .AddText("FirstName", "名字", "輸入名字搜尋")
                .AddText("LastName", "姓氏", "輸入姓氏搜尋")
                .AddText("Email", "電子郵件", "輸入電子郵件搜尋")
                .AddSelect("DepartmentId", "部門", departmentOptions)
                .AddSelect("EmployeePositionId", "職位", positionOptions)
                .AddSelect("RoleId", "角色", roleOptions)
                .AddSelect("Status", "狀態", statusOptions)
                .AddSelect("IsLocked", "帳號狀態", lockOptions)
                .Build();
        }
        catch (Exception ex)
        {
            // 記錄篩選器初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeFilters), 
                    GetType(),
                    additionalData: new { 
                        PageName = "EmployeeIndex",
                        Action = "InitializeFilters"
                    });
            });
            
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("員工代碼", nameof(Employee.EmployeeCode)),
                TableColumnDefinition.Text("帳號", nameof(Employee.Username)),
                TableColumnDefinition.Template("姓名", item => 
                {
                    var employee = (Employee)item;
                    var firstName = employee.FirstName ?? "";
                    var lastName = employee.LastName ?? "";
                    return @<span>@($"{lastName}{firstName}".Trim())</span>;
                }),
                TableColumnDefinition.Template("電子郵件", context =>
                {
                    var employee = (Employee)context;
                    var emailContact = employee.EmployeeContacts?
                        .FirstOrDefault(ec => ec.ContactType?.TypeName == "Email");
                    var emailValue = emailContact?.ContactValue ?? "";
                    
                    return builder =>
                    {
                        builder.AddContent(0, emailValue);
                    };
                }),
                TableColumnDefinition.Text("部門", "Department.Name"),
                TableColumnDefinition.Text("職位", "EmployeePosition.Name"),
                TableColumnDefinition.Text("角色", "Role.RoleName"),
                TableColumnDefinition.Date("最後登入", nameof(Employee.LastLoginAt), "yyyy/MM/dd HH:mm"),
                TableColumnDefinition.Status("狀態", nameof(Employee.Status), new Dictionary<object, string>
                {
                    { EntityStatus.Active, "bg-success" },
                    { EntityStatus.Inactive, "bg-secondary" }
                }),
                TableColumnDefinition.Date("建立日期", nameof(Employee.CreatedAt), "yyyy/MM/dd")
            };
        }
        catch (Exception ex)
        {
            // 記錄表格欄位初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeTableColumns), 
                    GetType(),
                    additionalData: new { 
                        PageName = "EmployeeIndex",
                        Action = "InitializeTableColumns"
                    });
            });
            
            // 設定安全的預設值
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }    // 自定義篩選邏輯
    private IQueryable<Employee> ApplyEmployeeFilters(SearchFilterModel searchModel, IQueryable<Employee> query)
    {
        try
        {
            // 員工代碼篩選
            var employeeCodeFilter = searchModel.GetFilterValue("EmployeeCode")?.ToString();
            if (!string.IsNullOrWhiteSpace(employeeCodeFilter))
            {
                query = query.Where(e => 
                    e.EmployeeCode.Contains(employeeCodeFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 帳號篩選
            var usernameFilter = searchModel.GetFilterValue("Username")?.ToString();
            if (!string.IsNullOrWhiteSpace(usernameFilter))
            {
                query = query.Where(e => 
                    e.Username.Contains(usernameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 名字篩選
            var firstNameFilter = searchModel.GetFilterValue("FirstName")?.ToString();
            if (!string.IsNullOrWhiteSpace(firstNameFilter))
            {
                query = query.Where(e => 
                    !string.IsNullOrEmpty(e.FirstName) && 
                    e.FirstName.Contains(firstNameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 姓氏篩選
            var lastNameFilter = searchModel.GetFilterValue("LastName")?.ToString();
            if (!string.IsNullOrWhiteSpace(lastNameFilter))
            {
                query = query.Where(e => 
                    !string.IsNullOrEmpty(e.LastName) && 
                    e.LastName.Contains(lastNameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 電子郵件篩選 (由於需要存取導航屬性，轉為記憶體查詢)
            var emailFilter = searchModel.GetFilterValue("Email")?.ToString();
            if (!string.IsNullOrWhiteSpace(emailFilter))
            {
                var filteredList = query.ToList().Where(e => 
                {
                    var emailContact = e.EmployeeContacts?
                        .FirstOrDefault(ec => ec.ContactType?.TypeName == "Email");
                    return emailContact != null && 
                           !string.IsNullOrEmpty(emailContact.ContactValue) &&
                           emailContact.ContactValue.Contains(emailFilter, StringComparison.OrdinalIgnoreCase);
                });
                query = filteredList.AsQueryable();
            }

            // 部門篩選
            var departmentIdFilter = searchModel.GetFilterValue("DepartmentId")?.ToString();
            if (!string.IsNullOrWhiteSpace(departmentIdFilter) && int.TryParse(departmentIdFilter, out var departmentId))
            {
                query = query.Where(e => e.DepartmentId == departmentId);
            }

            // 職位篩選
            var positionIdFilter = searchModel.GetFilterValue("EmployeePositionId")?.ToString();
            if (!string.IsNullOrWhiteSpace(positionIdFilter) && int.TryParse(positionIdFilter, out var positionId))
            {
                query = query.Where(e => e.EmployeePositionId == positionId);
            }

            // 角色篩選
            var roleIdFilter = searchModel.GetFilterValue("RoleId")?.ToString();
            if (!string.IsNullOrWhiteSpace(roleIdFilter) && int.TryParse(roleIdFilter, out var roleId))
            {
                query = query.Where(e => e.RoleId == roleId);
            }

            // 狀態篩選
            var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
            {
                query = query.Where(e => e.Status == status);
            }

            // 帳號鎖定狀態篩選
            var isLockedFilter = searchModel.GetFilterValue("IsLocked")?.ToString();
            if (!string.IsNullOrWhiteSpace(isLockedFilter) && bool.TryParse(isLockedFilter, out var isLocked))
            {
                query = query.Where(e => e.IsLocked == isLocked);
            }

            return query.OrderBy(e => e.EmployeeCode);
        }
        catch (Exception ex)
        {
            // 記錄篩選錯誤（這裡不能用 async，所以使用 Fire-and-Forget）
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(ApplyEmployeeFilters), 
                    GetType(),
                    additionalData: new { 
                        PageName = "EmployeeIndex",
                        Action = "ApplyFilters",
                        FilterModel = searchModel
                    });
            });
            
            // 回傳原始查詢，確保程式不會崩潰
            return query.OrderBy(e => e.EmployeeCode);
        }
    }
}
