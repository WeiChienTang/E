@page "/employees"
@inject IEmployeeService EmployeeService
@inject IDepartmentService DepartmentService
@inject IRoleService RoleService
@inject IEmployeePositionService EmployeePositionService
@rendermode InteractiveServer
@inject INotificationService NotificationService

<GenericIndexPageComponent TEntity="Employee" 
                        TService="IEmployeeService"
                        Service="@EmployeeService"
                        EntityBasePath="/employees"                          
                        PageTitle="員工維護"
                        PageSubtitle="管理員工資料與權限設定"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        DataLoader="@LoadEmployeesAsync"
                        FilterApplier="@ApplyEmployeeFilters"
                        EntityName="員工"
                        GetEntityDisplayName="@(employee => employee.Name?.Trim() ?? "")"
                        RequiredPermission="Employee.Read"
                        OnAddClick="@modalHandler.ShowAddModalAsync"
                        OnRowClick="@modalHandler.ShowEditModalAsync"
                        @ref="indexComponent" />

@* 員工編輯 Modal *@
<EmployeeEditModalComponent IsVisible="@showEditModal"
                           IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                           EmployeeId="@editingEmployeeId"
                           OnEmployeeSaved="@modalHandler.OnEntitySavedAsync"
                           OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Employee, IEmployeeService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingEmployeeId = null;
    
    // Modal 處理器
    private ModalHandler<Employee, GenericIndexPageComponent<Employee, IEmployeeService>> modalHandler = default!;
    
    // 選項清單
    private List<Department> departments = new();
    private List<Role> roles = new();
    private List<EmployeePosition> employeePositions = new();
    
    // 欄位配置
    private EmployeeFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Employee, GenericIndexPageComponent<Employee, IEmployeeService>>(
                id => editingEmployeeId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入相關資料
            await LoadDepartmentsAsync();
            await LoadRolesAsync();
            await LoadEmployeePositionsAsync();
            
            // 建立欄位配置（在載入相關資料後，並傳遞 NotificationService）
            fieldConfiguration = new EmployeeFieldConfiguration(departments, roles, employeePositions, NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化員工頁面失敗");
            await NotificationService.ShowErrorAsync("初始化員工頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工維護")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入員工資料
    private async Task<List<Employee>> LoadEmployeesAsync()
    {
        try
        {
            return await EmployeeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadEmployeesAsync), GetType(), additionalData: "載入員工資料失敗");
            await NotificationService.ShowErrorAsync("載入員工資料失敗");
            // 設定安全的預設值
            return new List<Employee>();
        }
    }

    // 載入部門資料
    private async Task LoadDepartmentsAsync()
    {
        try
        {
            departments = await DepartmentService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadDepartmentsAsync), GetType(), additionalData: "載入部門資料失敗");
            await NotificationService.ShowErrorAsync("載入部門資料失敗");
            // 設定安全的預設值
            departments = new List<Department>();
        }
    }

    // 載入角色資料
    private async Task LoadRolesAsync()
    {
        try
        {
            roles = await RoleService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadRolesAsync), GetType(), additionalData: "載入角色資料失敗");
            await NotificationService.ShowErrorAsync("載入角色資料失敗");
            // 設定安全的預設值
            roles = new List<Role>();
        }
    }

    // 載入員工職位資料
    private async Task LoadEmployeePositionsAsync()
    {
        try
        {
            employeePositions = await EmployeePositionService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadEmployeePositionsAsync), GetType(), additionalData: "載入員工職位資料失敗");
            await NotificationService.ShowErrorAsync("載入員工職位資料失敗");
            // 設定安全的預設值
            employeePositions = new List<EmployeePosition>();
        }
    }

    // 篩選方法 - 現在已由 FilterHelper 處理所有錯誤情況
    private IQueryable<Employee> ApplyEmployeeFilters(SearchFilterModel searchModel, IQueryable<Employee> query)
    {
        // 確保 fieldConfiguration 已初始化
        if (fieldConfiguration == null)
        {
            // 如果配置未初始化，回傳基本排序的查詢
            return query.OrderBy(p => p.Name);
        }

        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyEmployeeFilters), GetType());
    }
}
