@page "/permissions"

@inject IPermissionManagementService PermissionService
@inject INotificationService NotificationService

@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Permission" 
                          TService="IPermissionManagementService"
                          Service="@PermissionService"
                          EntityBasePath="/permissions"
                          PageTitle="權限維護"
                          PageSubtitle="管理系統功能權限設定"
                          EntityName="權限"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadPermissionsAsync"
                          FilterApplier="@ApplyPermissionFilters"
                          GetEntityDisplayName="@(permission => permission.PermissionName)"
                          RequiredPermission="Permission.Read"
                          @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Permission, IPermissionManagementService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: "權限頁面初始化失敗"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("權限維護")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: "初始化麵包屑導航失敗"
            );
        }
    }

    // 載入權限資料
    private async Task<List<Permission>> LoadPermissionsAsync()
    {
        try
        {
            return await PermissionService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPermissionsAsync), GetType(),
                additionalData: "載入權限資料失敗"
            );
            await NotificationService.ShowErrorAsync("載入權限資料失敗");
            return new List<Permission>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("PermissionName", "權限名稱", "輸入權限名稱搜尋")
                .AddText("PermissionCode", "權限代碼", "輸入權限代碼搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFilters), GetType(),
                additionalData: "初始化篩選條件失敗"
            );
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("權限代碼", nameof(Permission.PermissionCode)),
                TableColumnDefinition.Text("權限名稱", nameof(Permission.PermissionName)),
                TableColumnDefinition.Date("建立日期", nameof(Permission.CreatedAt), "yyyy/MM/dd")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeTableColumns), GetType(),
                additionalData: "初始化表格欄位失敗"
            );
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Permission> ApplyPermissionFilters(SearchFilterModel searchModel, IQueryable<Permission> query)
    {
        var filterActions = new List<Func<SearchFilterModel, IQueryable<Permission>, IQueryable<Permission>>>
        {
            // 應用基礎實體篩選（狀態、備註）
            (model, q) => FilterHelper.ApplyBaseEntityFilters(model, q),
            
            // 權限名稱篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "PermissionName", p => p.PermissionName),
            
            // 權限代碼篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "PermissionCode", p => p.PermissionCode)
        };

        return FilterHelper.ApplyFiltersWithErrorHandling(
            searchModel,
            query,
            filterActions,
            q => q.OrderBy(p => p.PermissionCode).ThenBy(p => p.PermissionName), // 預設排序
            nameof(ApplyPermissionFilters),
            GetType()
        );
    }
}
