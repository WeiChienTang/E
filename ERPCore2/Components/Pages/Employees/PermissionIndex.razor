@page "/permissions"

@inject IPermissionManagementService PermissionService
@inject INotificationService NotificationService

@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Permission" 
                          TService="IPermissionManagementService"
                          Service="@PermissionService"
                          EntityBasePath="/permissions"
                          PageTitle="權限維護"
                          PageSubtitle="管理系統功能權限設定"
                          EntityName="權限"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadPermissionsAsync"
                          FilterApplier="@ApplyPermissionFilters"
                          GetEntityDisplayName="@(permission => permission.Name)"
                          RequiredPermission="Permission.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

<PermissionEditModalComponent IsVisible="@showEditModal"
                              IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                              PermissionId="@editingPermissionId"
                              OnPermissionSaved="@modalHandler.OnEntitySavedAsync"
                              OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Permission, IPermissionManagementService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingPermissionId = null;
    
    // Modal 處理器
    private ModalHandler<Permission, GenericIndexPageComponent<Permission, IPermissionManagementService>> modalHandler = default!;
    
    // 欄位配置
    private PermissionFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Permission, GenericIndexPageComponent<Permission, IPermissionManagementService>>(
                id => editingPermissionId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 建立欄位配置（傳遞 NotificationService）
            fieldConfiguration = new PermissionFieldConfiguration(NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化權限頁面失敗");
            await NotificationService.ShowErrorAsync("初始化權限頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "#"),
                new("權限維護")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入權限資料
    private async Task<List<Permission>> LoadPermissionsAsync()
    {
        try
        {
            return await PermissionService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPermissionsAsync), GetType(), additionalData: "載入權限資料失敗");
            await NotificationService.ShowErrorAsync("載入權限資料失敗");
            // 設定安全的預設值
            return new List<Permission>();
        }
    }

    private IQueryable<Permission> ApplyPermissionFilters(SearchFilterModel searchModel, IQueryable<Permission> query)
    {
        try
        {
            return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyPermissionFilters), GetType());
        }
        catch (Exception ex)
        {
            // 記錄錯誤並回傳安全的預設查詢
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplyPermissionFilters), GetType(), additionalData: "權限篩選器應用失敗");
            _ = NotificationService.ShowErrorAsync("篩選條件應用失敗，已顯示全部資料");
            
            // 回傳基本排序的查詢，確保頁面仍能正常運作
            return query.OrderBy(p => p.Code);
        }
    }
}
