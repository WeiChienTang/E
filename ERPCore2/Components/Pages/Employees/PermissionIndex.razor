@page "/permissions"

@inject IPermissionManagementService PermissionService
@inject INotificationService NotificationService

@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Permission" 
                          TService="IPermissionManagementService"
                          Service="@PermissionService"
                          EntityBasePath="/permissions"
                          PageTitle="權限維護"
                          PageSubtitle="管理系統功能權限設定"
                          EntityName="權限"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadPermissionsAsync"
                          FilterApplier="@ApplyPermissionFilters"
                          GetEntityDisplayName="@(permission => permission.Name)"
                          RequiredPermission="Permission.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

<PermissionEditModalComponent IsVisible="@showEditModal"
                              IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                              PermissionId="@editingPermissionId"
                              OnPermissionSaved="@modalHandler.OnEntitySavedAsync"
                              OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Permission, IPermissionManagementService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingPermissionId = null;
    
    // Modal 處理器
    private ModalHandler<Permission, GenericIndexPageComponent<Permission, IPermissionManagementService>> modalHandler = default!;

    protected override void OnInitialized()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Permission, GenericIndexPageComponent<Permission, IPermissionManagementService>>(
                id => editingPermissionId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: "權限頁面初始化失敗"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "#"),
                new("權限維護")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: "初始化麵包屑導航失敗"
            );
        }
    }

    // 載入權限資料
    private async Task<List<Permission>> LoadPermissionsAsync()
    {
        try
        {
            return await PermissionService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPermissionsAsync), GetType(),
                additionalData: "載入權限資料失敗"
            );
            await NotificationService.ShowErrorAsync("載入權限資料失敗");
            return new List<Permission>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Code", "權限代碼", "輸入權限代碼搜尋")
                .AddText("PermissionName", "權限名稱", "輸入權限名稱搜尋")                
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFilters), GetType(),
                additionalData: "初始化篩選條件失敗"
            );
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("權限代碼", nameof(Permission.Code)),
                TableColumnDefinition.Text("權限名稱", nameof(Permission.Name)),
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeTableColumns), GetType(),
                additionalData: "初始化表格欄位失敗"
            );
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Permission> ApplyPermissionFilters(SearchFilterModel searchModel, IQueryable<Permission> query)
    {
        var filterActions = new List<Func<SearchFilterModel, IQueryable<Permission>, IQueryable<Permission>>>
        {
            // 應用基礎實體篩選（狀態、備註）
            (model, q) => FilterHelper.ApplyBaseEntityFilters(model, q),

            // 權限代碼篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "Code", p => p.Code),

            // 權限名稱篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "PermissionName", p => p.Name),
            
            // 權限代碼篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "PermissionCode", p => p.Code),
        };

        return FilterHelper.ApplyFiltersWithErrorHandling(
            searchModel,
            query,
            filterActions,
            q => q.OrderBy(p => p.Code).ThenBy(p => p.Name), // 預設排序
            nameof(ApplyPermissionFilters),
            GetType()
        );
    }
}
