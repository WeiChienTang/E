@page "/departments"
@inject IDepartmentService DepartmentService
@inject INotificationService NotificationService

@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Department" 
                        TService="IDepartmentService"
                        Service="@DepartmentService"
                        EntityBasePath="/departments"                          
                        PageTitle="部門設定"
                        PageSubtitle="設定公司組織架構與部門資訊"
                        DataLoader="@LoadDataAsync"
                        FilterApplier="@ApplyDepartmentFilters"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        EntityName="部門"
                        GetEntityDisplayName="@(dept => dept.Name)"
                        RequiredPermission="Department.Read"
                        OnAddClick="@ShowAddModal"
                        OnRowClick="@ShowEditModal"
                        @ref="indexComponent"/>

@* 部門編輯 Modal *@
<DepartmentEditModalComponent IsVisible="@showEditModal"
                             IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                             DepartmentId="@editingDepartmentId"
                             OnDepartmentSaved="@OnDepartmentSaved"
                             OnCancel="@OnModalCancel" />

@code {
    private GenericIndexPageComponent<Department, IDepartmentService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingDepartmentId = null;
    
    // 設定選項
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InitializeBreadcrumbs();
            await InitializeFilters();
            await InitializeTableColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType(),
                additionalData: "初始化部門頁面失敗"
            );
        }
    }

    // ===== Modal 相關方法 =====

    private async Task ShowAddModal()
    {
        try
        {
            editingDepartmentId = null;
            showEditModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowAddModal), GetType());
        }
    }

    private async Task ShowEditModal(Department department)
    {
        try
        {
            if (department?.Id != null)
            {
                editingDepartmentId = department.Id;
                showEditModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowEditModal), GetType());
        }
    }

    private async Task OnDepartmentSaved(Department savedDepartment)
    {
        try
        {
            // 關閉 Modal
            showEditModal = false;
            editingDepartmentId = null;
            
            // 重新載入資料
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnDepartmentSaved), GetType());
        }
    }

    private async Task OnModalCancel()
    {
        try
        {
            showEditModal = false;
            editingDepartmentId = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnModalCancel), GetType());
        }
    }

    // ===== 原有的初始化方法 =====

    private async Task InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "#"),
                new("部門設定")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType()
            );
        }
    }

    private async Task InitializeFilters()
    {
        try
        {
            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Code", "部門代碼", "輸入部門代碼搜尋")
                .AddText("Name", "部門名稱", "輸入部門名稱搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    private async Task InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("部門代碼", nameof(Department.Code)),
                TableColumnDefinition.Text("部門名稱", nameof(Department.Name)),
                new TableColumnDefinition
                {
                    Title = "部門主管",
                    PropertyName = "Manager.FirstName",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 120px;",
                    NullDisplayText = "未指派",
                    CustomTemplate = item => builder =>
                    {
                        var department = (Department)item;
                        if (department.Manager != null)
                        {
                            var managerName = $"{department.Manager.FirstName}{department.Manager.LastName}".Trim();
                            if (string.IsNullOrWhiteSpace(managerName))
                            {
                                managerName = department.Manager.Code;
                            }
                            builder.AddContent(0, managerName);
                        }
                        else
                        {
                            builder.OpenElement(0, "span");
                            builder.AddAttribute(1, "class", "text-muted");
                            builder.AddContent(2, "未指派");
                            builder.CloseElement();
                        }
                    }
                },
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
        }
    }

    // 資料載入委派
    private async Task<List<Department>> LoadDataAsync()
    {
        try
        {
            return await DepartmentService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadDataAsync),
                GetType(),
                additionalData: "載入部門資料失敗"
            );
            return new List<Department>();
        }
    }

    private IQueryable<Department> ApplyDepartmentFilters(SearchFilterModel searchModel, IQueryable<Department> query)
    {
        var filterActions = new List<Func<SearchFilterModel, IQueryable<Department>, IQueryable<Department>>>
        {
            // 應用基礎實體篩選（狀態、備註）
            (model, q) => FilterHelper.ApplyBaseEntityFilters(model, q),
            
            // 部門名稱篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "Name", d => d.Name),
            
            // 部門代碼篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "Code", d => d.Code),
        };

        return FilterHelper.ApplyFiltersWithErrorHandling(
            searchModel,
            query,
            filterActions,
            q => q.OrderBy(d => d.Name), // 預設排序
            nameof(ApplyDepartmentFilters),
            GetType()
        );
    }
}