@page "/employee-positions/edit"
@page "/employee-positions/edit/{id:int?}"

@inject IEmployeePositionService EmployeePositionService
@inject INotificationService NotificationService 
@rendermode InteractiveServer

    <GenericEditPageComponent TEntity="EmployeePosition" 
                            TService="IEmployeePositionService"
                            @ref="editComponent"
                            Id="@Id"
                            Service="@EmployeePositionService"
                            EntityName="職位設定"
                            EntityNamePlural="職位設定"
                            PageTitle="@(Id.HasValue ? "編輯職位設定" : "新增職位設定")"
                            IndexRoute="/employee-positions"
                            FormTitle="基本資料"
                            FormSubtitle="職位設定的基本資訊"
                            FormFields="@GetFormFields()"
                            FormSections="@formSections"
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadEmployeePositionData"
                            UseGenericSave="true"
                            SaveSuccessMessage="@(Id.HasValue ? "職位設定更新成功" : "職位設定新增成功")"
                            SaveFailureMessage="職位設定儲存失敗"
                            RequiredPermission="@(Id.HasValue ? "EmployeePosition.Update" : "EmployeePosition.Create")" />

@code {
    [Parameter] public int? Id { get; set; }
    
    private GenericEditPageComponent<EmployeePosition, IEmployeePositionService>? editComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(), NotificationService);
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("職位設定管理", "/employee-positions"),
                new(Id.HasValue ? "編輯職位設定" : "新增職位設定")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(), NotificationService);
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(EmployeePosition.Name),
                    Label = "職位名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入職位名稱",
                    IsRequired = true,
                    HelpText = "輸入職位的正式名稱，例如：經理、主管、專員等"
                },
                new()
                {
                    PropertyName = nameof(EmployeePosition.Code),
                    Label = "職位代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入職位代碼",
                    IsRequired = true,
                    HelpText = "職位的唯一識別代碼，新增時系統會自動產生，也可手動修改"
                },
                // 詳細資訊區段
                new()
                {
                    PropertyName = nameof(EmployeePosition.Description),
                    Label = "職位描述",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入職位描述",
                    Rows = 2,
                    HelpText = "詳細描述此職位的職責範圍、工作內容及要求"
                },
                // 其他資訊區段
                new()
                {
                    PropertyName = nameof(EmployeePosition.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註",
                    Rows = 2,
                    HelpText = "記錄此職位的額外資訊或特殊說明"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(EmployeePosition.Code), "基本資訊" },
                { nameof(EmployeePosition.Name), "基本資訊" },                
                { nameof(EmployeePosition.Description), "額外資訊" },
                { nameof(EmployeePosition.Remarks), "額外資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "初始化表單欄位時發生錯誤", GetType(), NotificationService);
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        try
        {
            return formFields;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "取得表單欄位時發生錯誤", GetType(), NotificationService);
            return new List<FormFieldDefinition>();
        }
    }

    private async Task<EmployeePosition?> LoadEmployeePositionData()
    {
        try
        {
            if (!Id.HasValue) 
            {
                // 新增模式：建立新的職位實體並生成代碼
                return new EmployeePosition
                {
                    Name = string.Empty,
                    Code = GeneratePositionCode(),
                    Status = EntityStatus.Active
                };
            }

            var position = await EmployeePositionService.GetByIdAsync(Id.Value);            
            
            if (position == null)
            {
                // 如果找不到職位，建立新的預設職位
                return new EmployeePosition
                {
                    Status = EntityStatus.Active
                };
            }
            return position;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadEmployeePositionData), GetType(), NotificationService);
            
            // 設定安全的預設值，確保程式不會崩潰
            return new EmployeePosition
            {
                Code = "ERROR",
                Name = "ERROR",
                Status = EntityStatus.Active
            };
        }
    }

    private string GeneratePositionCode()
    {
        try
        {
            // 簡單的職位代碼生成邏輯：POS + 時間戳 + 隨機數
            var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            var random = new Random().Next(100, 999);
            var baseCode = $"POS{timestamp}{random}";
            
            return baseCode;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GeneratePositionCode), GetType(), NotificationService);
            // 如果生成失敗，返回預設格式
            return $"POS{DateTime.Now:yyyyMMddHHmmss}";
        }
    }
}

