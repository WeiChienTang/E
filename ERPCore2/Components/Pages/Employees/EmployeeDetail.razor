@page "/employees/detail/{employeeId:int}"

@inject IEmployeeService EmployeeService
@inject IErrorLogService ErrorLogService
@rendermode InteractiveServer

<PagePermissionCheck RequiredPermission="Employee.Read">
    <GenericDetailPageComponent TEntity="Employee" 
                            TService="IEmployeeService"
                            EntityId="@EmployeeId"
                            Entity="@employee"
                            Service="@EmployeeService"
                            EntityName="員工"
                            EntityNamePlural="員工"
                            IndexRoute="/employees"
                            EditRoute="/employees/edit"
                            LoadingText="載入員工資料中..."
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadEmployeeDataAsync"
                            AdditionalDataLoader="@LoadAdditionalDataAsync"
                            EntityTitleSelector="@(e => GetFullName())"
                            EntitySubtitleSelector="@(e => $"員工代碼：{e.EmployeeCode}")"
                            EntityDisplayNameSelector="@(e => GetFullName())"
                            OnDataLoaded="@OnEmployeeDataLoaded"
                            UseTabLayout="true"
                            TabSections="@GetTabSections()">
    </GenericDetailPageComponent>
</PagePermissionCheck>
@code {
    [Parameter] public int EmployeeId { get; set; }

    private Employee? employee;
    private List<EmployeeContact> employeeContacts = new();
    private List<EmployeeAddress> employeeAddresses = new();
    private bool _isLoading = false;

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("員工管理", "/employees"),
        new("員工詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Employee?> LoadEmployeeDataAsync()
    {
        if (_isLoading)
        {
            return employee;
        }
        
        try
        {
            _isLoading = true;
            if (EmployeeId <= 0) return null;
            
            var result = await EmployeeService.GetByIdAsync(EmployeeId);
            employee = result;
            
            // 從已載入的關聯資料中取得聯絡方式和地址
            if (employee != null)
            {
                employeeContacts = employee.EmployeeContacts?.ToList() ?? new List<EmployeeContact>();
                employeeAddresses = employee.EmployeeAddresses?.ToList() ?? new List<EmployeeAddress>();
            }
            
            return result;
        }
        catch (Exception ex)
        {
            // 統一錯誤處理
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadEmployeeDataAsync),
                GetType(),
                additionalData: new { EmployeeId = EmployeeId }
            );
            
            // 設置預設值避免頁面崩潰
            employee = null;
            employeeContacts = new List<EmployeeContact>();
            employeeAddresses = new List<EmployeeAddress>();
            
            // 重新拋出異常讓 GenericDetailPageComponent 處理
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 由於GetByIdAsync已經Include所有關聯資料，這裡不需要額外查詢
            // 所有資料已在LoadEmployeeDataAsync中處理完成
            
            // 如果有額外的資料載入需求，可以在此處理
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            // 額外資料載入失敗不應該影響主要功能
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadAdditionalDataAsync),
                GetType(),
                additionalData: new { EmployeeId = EmployeeId }
            );
        }
    }

    private async Task OnEmployeeDataLoaded()
    {
        try
        {
            // 資料載入完成後的處理
            await Task.Run(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            // 資料載入後處理失敗不應該影響主要功能
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnEmployeeDataLoaded),
                GetType(),
                additionalData: new { EmployeeId = EmployeeId }
            );
        }
    }

    private string GetFullName()
    {
        try
        {
            if (employee == null) return "";
            var fullName = $"{employee.LastName}{employee.FirstName}".Trim();
            return string.IsNullOrEmpty(fullName) ? employee.Username : fullName;
        }
        catch (Exception ex)
        {
            // 名稱格式化失敗，記錄錯誤但不影響顯示
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(GetFullName),
                GetType(),
                additionalData: new { EmployeeId = EmployeeId }
            );
            
            return "名稱格式錯誤";
        }
    }

    private string GetEmailContact()
    {
        try
        {
            if (employee?.EmployeeContacts == null) return "-";
            
            var emailContact = employee.EmployeeContacts
                .FirstOrDefault(ec => ec.ContactType?.TypeName == "Email");
            
            return emailContact?.ContactValue ?? "-";
        }
        catch (Exception ex)
        {
            // 電子郵件取得失敗，記錄錯誤但不影響顯示
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(GetEmailContact),
                GetType(),
                additionalData: new { EmployeeId = EmployeeId }
            );
            
            return "-";
        }
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Employee, IEmployeeService>.TabSection> GetTabSections()
    {
        try
        {
            return new List<GenericDetailPageComponent<Employee, IEmployeeService>.TabSection>
            {
                new GenericDetailPageComponent<Employee, IEmployeeService>.TabSection
                {
                    Id = "basic",
                    Title = "基本資料",
                    Content = @<div>
                        <BasicInfoDisplayComponent 
                            Title="員工基本資訊"
                            IconClass="fas fa-user"
                            IconColor="text-primary"
                            Fields="@GetEmployeeBasicFields()" />
                    </div>
                },
                
                new GenericDetailPageComponent<Employee, IEmployeeService>.TabSection
                {
                    Id = "account",
                    Title = "帳號資訊",
                    Content = @<div class="row">
                        <DetailFieldComponent Label="帳號狀態">
                            @if (employee?.Status == EntityStatus.Active)
                            {
                                <span class="badge bg-success">啟用</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">停用</span>
                            }
                        </DetailFieldComponent>
                        <DetailFieldComponent Label="鎖定狀態">
                            @if (employee?.IsLocked == true)
                            {
                                <span class="badge bg-danger">已鎖定</span>
                            }
                            else
                            {
                                <span class="badge bg-success">正常</span>
                            }
                        </DetailFieldComponent>
                        @if (employee?.FailedLoginAttempts > 0)
                        {
                            <DetailFieldComponent Label="失敗登入次數" Value="@employee.FailedLoginAttempts.ToString()" />
                        }
                        @if (employee?.LockedAt.HasValue == true)
                        {
                            <DetailFieldComponent Label="鎖定時間" Value="@employee.LockedAt.Value.ToString("yyyy/MM/dd HH:mm:ss")" />
                        }
                        @if (employee?.LastLoginAt.HasValue == true)
                        {
                            <DetailFieldComponent Label="最後登入時間" Value="@employee.LastLoginAt.Value.ToString("yyyy/MM/dd HH:mm:ss")" />
                        }
                        else
                        {
                            <DetailFieldComponent Label="登入記錄" Value="@("從未登入")" />
                        }
                    </div>
                },
                
                new GenericDetailPageComponent<Employee, IEmployeeService>.TabSection
                {
                    Id = "role",
                    Title = "角色權限",
                    Content = @<div class="row">
                        @if (employee?.Role != null)
                        {
                            <DetailFieldComponent Label="角色名稱" Value="@employee.Role.RoleName" IsBold="true" />
                            @if (!string.IsNullOrWhiteSpace(employee.Role.Description))
                            {
                                <DetailFieldComponent Label="角色描述" Value="@employee.Role.Description" />
                            }
                        }
                        else
                        {
                            <div class="col-12">
                                <div class="alert alert-warning">
                                    <i class="bi bi-exclamation-triangle me-2"></i>
                                    未設定角色
                                </div>
                            </div>
                        }
                    </div>
                },
                
                new GenericDetailPageComponent<Employee, IEmployeeService>.TabSection
                {
                    Id = "contacts",
                    Title = "聯絡方式",
                    Content = @<div>
                        <ContactDisplayComponent 
                            Contacts="@GetContactEntities()"
                            Title="員工聯絡方式"
                            ShowStatus="true"
                            ShowStatistics="true"
                            ShowCreateButton="false"
                            EmptyTitle="尚未設定聯絡方式"
                            EmptyMessage="此員工目前沒有任何聯絡方式資料" />
                    </div>
                },
                
                new GenericDetailPageComponent<Employee, IEmployeeService>.TabSection
                {
                    Id = "addresses",
                    Title = "地址資料",
                    Content = @<div>
                        <AddressDisplayComponent 
                            Addresses="@GetAddressEntities()"
                            Title="員工地址資料"
                            ShowStatus="true"
                            ShowAddressDetails="true"
                            ShowMapLink="true"
                            ShowStatistics="true"
                            ShowCreateButton="false"
                            EmptyTitle="尚未設定地址"
                            EmptyMessage="此員工目前沒有任何地址資料" />
                    </div>
                },
                  
                new GenericDetailPageComponent<Employee, IEmployeeService>.TabSection
                {
                    Id = "system",
                    Title = "系統資訊",
                    Content = @<div>
                        <SystemInfoDisplayComponent 
                            CreatedAt="@(employee?.CreatedAt ?? DateTime.MinValue)"
                            UpdatedAt="@employee?.UpdatedAt"
                            CreatedBy="@employee?.CreatedBy"
                            UpdatedBy="@employee?.UpdatedBy"
                            Remarks="@employee?.Remarks"
                            ShowTimeline="true"
                            ShowRemarks="true" />
                    </div>
                }
            };
        }
        catch (Exception ex)
        {
            // 標籤頁設定失敗，記錄錯誤但返回基本結構
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(GetTabSections),
                GetType(),
                additionalData: new { EmployeeId = EmployeeId }
            );
            
            // 返回基本標籤頁結構
            return new List<GenericDetailPageComponent<Employee, IEmployeeService>.TabSection>
            {
                new GenericDetailPageComponent<Employee, IEmployeeService>.TabSection
                {
                    Id = "basic",
                    Title = "基本資料",
                    Content = @<div><p>載入錯誤，請重新整理頁面</p></div>
                }
            };
        }
    }

    // 取得員工基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetEmployeeBasicFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
                new()
                {
                    Label = "員工代碼",
                    Value = employee?.EmployeeCode,
                    IsPrimary = true,
                    ValueBold = true,
                    IconClass = "fas fa-id-badge",
                    IconBgClass = "bg-primary bg-opacity-10",
                    IconTextClass = "text-primary"
                },
                new()
                {
                    Label = "帳號",
                    Value = employee?.Username,
                    ValueBold = true,
                    IconClass = "fas fa-user-circle",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info"
                },
                new()
                {
                    Label = "姓名",
                    Value = GetFullName(),
                    IconClass = "fas fa-user",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "電子郵件",
                    Value = GetEmailContact(),
                    Format = BasicInfoDisplayComponent.FieldFormat.Email,
                    IconClass = "fas fa-envelope",
                    IconBgClass = "bg-warning bg-opacity-10"
                },
                new()
                {
                    Label = "部門",
                    Value = employee?.Department,
                    EmptyText = "-",
                    IconClass = "fas fa-building",
                    IconBgClass = "bg-secondary bg-opacity-10",
                    IconTextClass = "text-secondary"
                },
                new()
                {
                    Label = "職位",
                    Value = employee?.EmployeePosition?.Name,
                    EmptyText = "-",
                    IconClass = "fas fa-briefcase",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info"
                },
                new()
                {
                    Label = "狀態",
                    CustomContent = @<div>
                        @if (employee?.Status != null)
                        {
                            <StatusBadgeComponent Status="@employee.Status" />
                        }
                    </div>,
                    IconClass = "fas fa-toggle-on",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success"
                },
                new()
                {
                    Label = "備註",
                    Value = employee?.Remarks,
                    Format = BasicInfoDisplayComponent.FieldFormat.MultiLine,
                    IconClass = "fas fa-sticky-note",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning",
                    ColSize = 12,
                    VisibilityCondition = () => !string.IsNullOrEmpty(employee?.Remarks)
                }
            };
        }
        catch (Exception ex)
        {
            // 基本資料欄位設定失敗，記錄錯誤但返回空列表
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(GetEmployeeBasicFields),
                GetType(),
                additionalData: new { EmployeeId = EmployeeId }
            );
            
            // 返回空列表以避免頁面崩潰
            return new List<BasicInfoDisplayComponent.BasicInfoField>();
        }
    }

    // 轉換方法
    private IEnumerable<IContactEntity> GetContactEntities()
    {
        try
        {
            return employeeContacts?.AsContactDisplayEntities() ?? new List<IContactEntity>();
        }
        catch (Exception ex)
        {
            // 聯絡方式轉換失敗，記錄錯誤但返回空列表
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(GetContactEntities),
                GetType(),
                additionalData: new { EmployeeId = EmployeeId }
            );
            
            return new List<IContactEntity>();
        }
    }

    private IEnumerable<IAddressEntity> GetAddressEntities()
    {
        try
        {
            return employeeAddresses?.AsAddressDisplayEntities() ?? new List<IAddressEntity>();
        }
        catch (Exception ex)
        {
            // 地址轉換失敗，記錄錯誤但返回空列表
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(GetAddressEntities),
                GetType(),
                additionalData: new { EmployeeId = EmployeeId }
            );
            
            return new List<IAddressEntity>();
        }
    }
}
