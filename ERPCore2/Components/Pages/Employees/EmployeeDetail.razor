@page "/employees/detail/{employeeId:int}"
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Badges
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@inject IEmployeeService EmployeeService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>員工詳細資料</PageTitle>

<GenericDetailPageComponent TEntity="Employee" 
                           TService="IEmployeeService"
                           EntityId="@EmployeeId"
                           Entity="@employee"
                           Service="@EmployeeService"
                           EntityName="員工"
                           EntityNamePlural="員工"
                           IndexRoute="/employees"
                           EditRoute="/employees/edit"
                           LoadingText="載入員工資料中..."
                           BreadcrumbItems="@breadcrumbItems"
                           DataLoader="@LoadEmployeeDataAsync"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           EntityTitleSelector="@(e => GetFullName())"
                           EntitySubtitleSelector="@(e => $"員工代碼：{e.EmployeeCode}")"
                           EntityDisplayNameSelector="@(e => GetFullName())"
                           OnDataLoaded="@OnEmployeeDataLoaded"
                           UseTabLayout="true"
                           TabSections="@GetTabSections()">
</GenericDetailPageComponent>

@code {
    [Parameter] public int EmployeeId { get; set; }

    private Employee? employee;
    private bool _isLoading = false;

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("員工管理", "/employees"),
        new("員工詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Employee?> LoadEmployeeDataAsync()
    {
        if (_isLoading)
        {
            Console.WriteLine("[EmployeeDetail] 載入中，跳過重複調用");
            return employee;
        }
        
        try
        {
            _isLoading = true;
            if (EmployeeId <= 0) return null;
            
            var result = await EmployeeService.GetByIdAsync(EmployeeId);
            employee = result;
            return result;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[EmployeeDetail] 載入員工資料失敗：{ex.Message}");
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Task LoadAdditionalDataAsync()
    {
        // 由於GetByIdAsync已經Include所有關聯資料，這裡不需要額外查詢
        return Task.CompletedTask;
    }

    private Task OnEmployeeDataLoaded()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private string GetFullName()
    {
        if (employee == null) return "";
        var fullName = $"{employee.LastName}{employee.FirstName}".Trim();
        return string.IsNullOrEmpty(fullName) ? employee.Username : fullName;
    }

    private string GetEmailContact()
    {
        if (employee?.EmployeeContacts == null) return "-";
        
        var emailContact = employee.EmployeeContacts
            .FirstOrDefault(ec => ec.ContactType?.TypeName == "Email");
        
        return emailContact?.ContactValue ?? "-";
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Employee, IEmployeeService>.TabSection> GetTabSections()
    {
        return new List<GenericDetailPageComponent<Employee, IEmployeeService>.TabSection>
        {
            new GenericDetailPageComponent<Employee, IEmployeeService>.TabSection
            {
                Id = "basic",
                Title = "基本資料",
                Content = @<div class="row">
                    <DetailFieldComponent Label="員工代碼" Value="@employee?.EmployeeCode" IsPrimary="true" IsBold="true" />
                    <DetailFieldComponent Label="帳號" Value="@employee?.Username" IsBold="true" />
                    <DetailFieldComponent Label="姓名" Value="@GetFullName()" />
                    <DetailFieldComponent Label="電子郵件" Value="@GetEmailContact()" />
                    <DetailFieldComponent Label="部門" Value="@employee?.Department" EmptyText="-" />
                    <DetailFieldComponent Label="職位" Value="@employee?.Position" EmptyText="-" />
                    <DetailFieldComponent Label="狀態">
                        @if (employee?.Status != null)
                        {
                            <StatusBadgeComponent Status="@employee.Status" />
                        }
                    </DetailFieldComponent>
                    @if (!string.IsNullOrEmpty(employee?.Remarks))
                    {
                        <DetailFieldComponent Label="備註" Value="@employee.Remarks" ColSize="12" />
                    }
                </div>
            },
            
            new GenericDetailPageComponent<Employee, IEmployeeService>.TabSection
            {
                Id = "account",
                Title = "帳號資訊",
                Content = @<div class="row">
                    <DetailFieldComponent Label="帳號狀態">
                        @if (employee?.Status == EntityStatus.Active)
                        {
                            <span class="badge bg-success">啟用</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">停用</span>
                        }
                    </DetailFieldComponent>
                    <DetailFieldComponent Label="鎖定狀態">
                        @if (employee?.IsLocked == true)
                        {
                            <span class="badge bg-danger">已鎖定</span>
                        }
                        else
                        {
                            <span class="badge bg-success">正常</span>
                        }
                    </DetailFieldComponent>
                    @if (employee?.FailedLoginAttempts > 0)
                    {
                        <DetailFieldComponent Label="失敗登入次數" Value="@employee.FailedLoginAttempts.ToString()" />
                    }
                    @if (employee?.LockedAt.HasValue == true)
                    {
                        <DetailFieldComponent Label="鎖定時間" Value="@employee.LockedAt.Value.ToString("yyyy/MM/dd HH:mm:ss")" />
                    }
                    @if (employee?.LastLoginAt.HasValue == true)
                    {
                        <DetailFieldComponent Label="最後登入時間" Value="@employee.LastLoginAt.Value.ToString("yyyy/MM/dd HH:mm:ss")" />
                    }                    else
                    {
                        <DetailFieldComponent Label="登入記錄" Value="@("從未登入")" />
                    }
                </div>
            },
            
            new GenericDetailPageComponent<Employee, IEmployeeService>.TabSection
            {
                Id = "role",
                Title = "角色權限",
                Content = @<div class="row">
                    @if (employee?.Role != null)
                    {
                        <DetailFieldComponent Label="角色名稱" Value="@employee.Role.RoleName" IsBold="true" />
                        @if (!string.IsNullOrWhiteSpace(employee.Role.Description))
                        {
                            <DetailFieldComponent Label="角色描述" Value="@employee.Role.Description" />
                        }
                    }
                    else
                    {
                        <div class="col-12">
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                未設定角色
                            </div>
                        </div>
                    }
                </div>
            },
              new GenericDetailPageComponent<Employee, IEmployeeService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div>
                    <SystemInfoDisplayComponent 
                        CreatedAt="@(employee?.CreatedAt ?? DateTime.MinValue)"
                        UpdatedAt="@employee?.UpdatedAt"
                        CreatedBy="@employee?.CreatedBy"
                        UpdatedBy="@employee?.UpdatedBy"
                        Remarks="@employee?.Remarks"
                        ShowTimeline="true"
                        ShowRemarks="true" />
                </div>
            }
        };
    }
}
