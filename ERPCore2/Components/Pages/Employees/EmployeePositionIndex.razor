@page "/employee-positions"
@inject IEmployeePositionService EmployeePositionService
@inject INotificationService NotificationService

@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="EmployeePosition" 
                        TService="IEmployeePositionService"
                        Service="@EmployeePositionService"
                        EntityBasePath="/employee-positions"                          
                        PageTitle="職位設定"
                        PageSubtitle="管理所有職位設定資料與職位層級"
                        DataLoader="@LoadDataAsync"
                        FilterApplier="@ApplyEmployeePositionFilters"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        EntityName="職位設定"
                        GetEntityDisplayName="@(position => position.Name)"
                        RequiredPermission="EmployeePosition.Read"
                        OnAddClick="@modalHandler.ShowAddModalAsync"
                        OnRowClick="@modalHandler.ShowEditModalAsync"
                        @ref="indexComponent"/>

@* 職位編輯 Modal *@
<EmployeePositionEditModalComponent IsVisible="@showEditModal"
                                   IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                                   EmployeePositionId="@editingEmployeePositionId"
                                   OnEmployeePositionSaved="@modalHandler.OnEntitySavedAsync"
                                   OnCancel="@modalHandler.OnModalCancelAsync" />
@code {
    // 組件參考
    private GenericIndexPageComponent<EmployeePosition, IEmployeePositionService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingEmployeePositionId = null;
    
    // Modal 處理器
    private ModalHandler<EmployeePosition, GenericIndexPageComponent<EmployeePosition, IEmployeePositionService>> modalHandler = default!;
    
    // 欄位配置
    private EmployeePositionFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<EmployeePosition, GenericIndexPageComponent<EmployeePosition, IEmployeePositionService>>(
                id => editingEmployeePositionId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 建立欄位配置（傳遞 NotificationService）
            fieldConfiguration = new EmployeePositionFieldConfiguration(NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化職位設定頁面失敗");
            await NotificationService.ShowErrorAsync("初始化職位設定頁面失敗");
        }
    }

    // ===== 原有的初始化方法 =====

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "#"),
                new("職位設定管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入職位設定資料
    private async Task<List<EmployeePosition>> LoadDataAsync()
    {
        try
        {
            return await EmployeePositionService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadDataAsync), GetType(), additionalData: "載入職位設定資料失敗");
            await NotificationService.ShowErrorAsync("載入職位設定資料失敗");
            // 設定安全的預設值
            return new List<EmployeePosition>();
        }
    }

    private IQueryable<EmployeePosition> ApplyEmployeePositionFilters(SearchFilterModel searchModel, IQueryable<EmployeePosition> query)
    {
        try
        {
            return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyEmployeePositionFilters), GetType());
        }
        catch (Exception ex)
        {
            // 記錄錯誤並回傳安全的預設查詢
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplyEmployeePositionFilters), GetType(), additionalData: "職位設定篩選器應用失敗");
            _ = NotificationService.ShowErrorAsync("篩選條件應用失敗，已顯示全部資料");
            
            // 回傳基本排序的查詢，確保頁面仍能正常運作
            return query.OrderBy(p => p.Code);
        }
    }
}
