@page "/employee-positions"
@inject IEmployeePositionService EmployeePositionService
@inject INotificationService NotificationService

@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="EmployeePosition" 
                        TService="IEmployeePositionService"
                        Service="@EmployeePositionService"
                        EntityBasePath="/employee-positions"                          
                        PageTitle="職位設定"
                        PageSubtitle="管理所有職位設定資料與職位層級"
                        DataLoader="@LoadDataAsync"
                        FilterApplier="@ApplyEmployeePositionFilters"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        EntityName="職位設定"
                        GetEntityDisplayName="@(position => position.Name)"
                        RequiredPermission="EmployeePosition.Read"
                        OnAddClick="@modalHandler.ShowAddModalAsync"
                        OnRowClick="@modalHandler.ShowEditModalAsync"
                        @ref="indexComponent"/>

@* 職位編輯 Modal *@
<EmployeePositionEditModalComponent IsVisible="@showEditModal"
                                   IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                                   EmployeePositionId="@editingEmployeePositionId"
                                   OnEmployeePositionSaved="@modalHandler.OnEntitySavedAsync"
                                   OnCancel="@modalHandler.OnModalCancelAsync" />
@code {
    private GenericIndexPageComponent<EmployeePosition, IEmployeePositionService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingEmployeePositionId = null;
    
    // Modal 處理器
    private ModalHandler<EmployeePosition, GenericIndexPageComponent<EmployeePosition, IEmployeePositionService>> modalHandler = default!;
    
    // 設定選項
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<EmployeePosition, GenericIndexPageComponent<EmployeePosition, IEmployeePositionService>>(
                id => editingEmployeePositionId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbs();
            await InitializeFilters();
            await InitializeTableColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType(),
                additionalData: "初始化職位設定頁面失敗"
            );
        }
    }

    // ===== 原有的初始化方法 =====

    private async Task InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "#"),
                new("職位設定管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType()
            );
        }
    }

    private async Task InitializeFilters()
    {
        try
        {
            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Code", "職位代碼", "輸入職位代碼搜尋")
                .AddText("Name", "職位名稱", "輸入職位名稱搜尋")                
                .Build();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    private async Task InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("職位代碼", nameof(EmployeePosition.Code)),
                TableColumnDefinition.Text("職位名稱", nameof(EmployeePosition.Name)),                
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
        }
    }

    // 資料載入委派
    private async Task<List<EmployeePosition>> LoadDataAsync()
    {
        try
        {
            return await EmployeePositionService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadDataAsync),
                GetType(),
                additionalData: "載入職位設定資料失敗"
            );
            return new List<EmployeePosition>();
        }
    }

    // 篩選邏輯委派
    private IQueryable<EmployeePosition> ApplyEmployeePositionFilters(SearchFilterModel searchModel, IQueryable<EmployeePosition> query)
    {
        var filterActions = new List<Func<SearchFilterModel, IQueryable<EmployeePosition>, IQueryable<EmployeePosition>>>
        {
            // 應用基礎實體篩選（狀態、備註）
            (model, q) => FilterHelper.ApplyBaseEntityFilters(model, q),
            
            // 職位名稱篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "Name", p => p.Name),
            
            // 職位代碼篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "Code", p => p.Code, allowNull: true),
        };

        return FilterHelper.ApplyFiltersWithErrorHandling(
            searchModel,
            query,
            filterActions,
            q => q.OrderBy(p => p.Name), // 預設排序
            nameof(ApplyEmployeePositionFilters),
            GetType()
        );
    }
}
