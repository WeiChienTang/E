@page "/employee-positions"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Services.Employees
@using ERPCore2.Components.Shared
@using ERPCore2.Helpers
@inject IEmployeePositionService EmployeePositionService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject INotificationService NotificationService

@rendermode InteractiveServer

<PageTitle>職位設定</PageTitle>
<PagePermissionCheck RequiredPermission="EmployeePosition.Read">
    <GenericIndexPageComponent TEntity="EmployeePosition" 
                            TService="IEmployeePositionService"
                            Service="@EmployeePositionService"
                            EntityBasePath="/employee-positions"                          
                            PageTitle="職位設定"
                            PageSubtitle="管理所有職位設定資料與職位層級"
                            AddButtonText="新增職位"
                            AddButtonTitle="新增職位設定資料"
                            SearchSectionTitle="職位搜尋與管理"
                            EmptyMessage="沒有找到符合條件的職位資料"                          
                            DataLoader="@LoadDataAsync"
                            FilterApplier="@ApplyEmployeePositionFilters"
                            BreadcrumbItems="@breadcrumbItems"
                            FilterDefinitions="@filterDefinitions"
                            ColumnDefinitions="@columnDefinitions"
                            EntityName="職位設定"
                            GetEntityDisplayName="@(position => position.Name)"
                            DeleteSuccessMessage="職位刪除成功"
                            DeleteConfirmMessage="確定要刪除職位「{0}」嗎？"
                            EnableStandardActions="true"
                            ShowViewButton="true"
                            ShowEditButton="true"
                            ShowDeleteButton="true"
                            @ref="indexComponent">
    </GenericIndexPageComponent>
</PagePermissionCheck>
@code {
    private GenericIndexPageComponent<EmployeePosition, IEmployeePositionService> indexComponent = default!;
    
    // 設定選項
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType(),
                additionalData: "初始化職位設定頁面失敗"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("職位設定管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType()
            );
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Name", "職位名稱", "輸入職位名稱搜尋")
                .AddText("Code", "職位代碼", "輸入職位代碼搜尋")
                .AddText("Description", "職位描述", "輸入職位描述搜尋")
                .AddNumber("Level", "職位等級", "輸入職位等級搜尋")
                .AddSelect("Status", "狀態", statusOptions)            
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("職位名稱", nameof(EmployeePosition.Name)),
                TableColumnDefinition.Text("職位代碼", nameof(EmployeePosition.Code)),
                TableColumnDefinition.Text("職位描述", nameof(EmployeePosition.Description)),
                TableColumnDefinition.Number("職位等級", nameof(EmployeePosition.Level), "N0"),
                TableColumnDefinition.Number("排序", nameof(EmployeePosition.SortOrder), "N0"),
                TableColumnDefinition.Status("狀態", nameof(EmployeePosition.Status), new Dictionary<object, string>
                {
                    { EntityStatus.Active, "bg-success" },
                    { EntityStatus.Inactive, "bg-secondary" }
                }),
                TableColumnDefinition.Date("建立日期", nameof(EmployeePosition.CreatedAt), "yyyy/MM/dd")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
        }
    }

    // 資料載入委派
    private async Task<List<EmployeePosition>> LoadDataAsync()
    {
        try
        {
            return await EmployeePositionService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadDataAsync),
                GetType(),
                additionalData: "載入職位設定資料失敗"
            );
            return new List<EmployeePosition>();
        }
    }

    // 篩選邏輯委派
    private IQueryable<EmployeePosition> ApplyEmployeePositionFilters(SearchFilterModel searchModel, IQueryable<EmployeePosition> query)
    {
        try
        {
            // 職位名稱篩選
            var nameFilter = searchModel.GetFilterValue("Name")?.ToString();
            if (!string.IsNullOrWhiteSpace(nameFilter))
            {
                query = query.Where(p => p.Name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 職位代碼篩選
            var codeFilter = searchModel.GetFilterValue("Code")?.ToString();
            if (!string.IsNullOrWhiteSpace(codeFilter))
            {
                query = query.Where(p => 
                    !string.IsNullOrEmpty(p.Code) && 
                    p.Code.Contains(codeFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 職位描述篩選
            var descriptionFilter = searchModel.GetFilterValue("Description")?.ToString();
            if (!string.IsNullOrWhiteSpace(descriptionFilter))
            {
                query = query.Where(p => 
                    !string.IsNullOrEmpty(p.Description) && 
                    p.Description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 職位等級篩選
            var levelFilter = searchModel.GetFilterValue("Level")?.ToString();
            if (!string.IsNullOrWhiteSpace(levelFilter) && int.TryParse(levelFilter, out var level))
            {
                query = query.Where(p => p.Level == level);
            }

            // 狀態篩選
            var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
            {
                query = query.Where(p => p.Status == status);
            }

            return query.OrderBy(p => p.SortOrder).ThenBy(p => p.Name);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplyEmployeePositionFilters),
                GetType(),
                additionalData: "應用篩選條件失敗"
            );
            return query.OrderBy(p => p.SortOrder).ThenBy(p => p.Name);
        }
    }
}
