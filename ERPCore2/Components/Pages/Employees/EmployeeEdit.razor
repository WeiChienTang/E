@page "/employees/edit"
@page "/employees/edit/{id:int?}"

@inject IEmployeeService EmployeeService
@inject IEmployeeContactService EmployeeContactService
@inject IEmployeeAddressService EmployeeAddressService
@inject IEmployeePositionService EmployeePositionService
@inject IRoleService RoleService
@inject IContactTypeService ContactTypeService
@inject IAddressTypeService AddressTypeService
@inject IDepartmentService DepartmentService
@inject IAuthenticationService AuthenticationService
@inject INotificationService NotificationService

@rendermode InteractiveServer
@implements IDisposable

<PageTitle>@GetPageTitle()</PageTitle>

    <GenericEditPageComponent TEntity="Employee" 
                            TService="IEmployeeService"
                            Id="@Id"
                            Entity="@employee"
                            Service="@EmployeeService"
                            EntityName="員工"
                            EntityNamePlural="員工"                         
                            FormTitle="基本資料"
                            FormSubtitle="員工的基本資訊"
                            IndexRoute="/employees"
                            UseGenericForm="true"
                            FormFields="@basicFormFields"
                            FormSections="@basicFormSections"
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadEmployeeData"
                            UseGenericSave="true"
                            CustomValidator="@ValidateEmployeeData"
                            AfterSave="@AfterSaveEmployee"
                            SaveSuccessMessage="@(Id.HasValue ? "員工更新成功" : "員工新增成功")"
                            SaveFailureMessage="員工儲存失敗"
                            AdditionalDataLoader="@LoadAdditionalData"
                        RequiredPermission="@(Id.HasValue ? "Employee.Update" : "Employee.Create")">

        <AdditionalSections>
            @* 密碼設定區塊（僅新增模式） *@
            @if (!Id.HasValue)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-key me-2"></i>
                            密碼設定
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="password" class="form-label">密碼 <span class="text-danger">*</span></label>
                                    <input type="password" @bind="password" class="form-control" id="password" />
                                    <div class="form-text">密碼長度至少 4 個字元，可包含數字、文字或符號</div>
                                    @if (!string.IsNullOrEmpty(passwordValidationMessage))
                                    {
                                        <div class="text-danger small">@passwordValidationMessage</div>
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="confirmPassword" class="form-label">確認密碼 <span class="text-danger">*</span></label>
                                    <input type="password" @bind="confirmPassword" class="form-control" id="confirmPassword" />
                                    @if (!string.IsNullOrEmpty(confirmPasswordValidationMessage))
                                    {
                                        <div class="text-danger small">@confirmPasswordValidationMessage</div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @* 帳號設定區塊（僅編輯模式） *@
            @if (Id.HasValue && employee != null)
            {
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-gear me-2"></i>
                            帳號設定
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">帳號狀態</label>
                                    <div>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="radio" id="statusActive" name="employeeStatus"
                                                   checked="@(employee.Status == EntityStatus.Active)" 
                                                   @onchange="@(() => OnStatusChange(EntityStatus.Active))" />
                                            <label class="form-check-label" for="statusActive">啟用</label>
                                        </div>
                                        <div class="form-check form-check-inline">
                                            <input class="form-check-input" type="radio" id="statusInactive" name="employeeStatus"
                                                   checked="@(employee.Status == EntityStatus.Inactive)" 
                                                   @onchange="@(() => OnStatusChange(EntityStatus.Inactive))" />
                                            <label class="form-check-label" for="statusInactive">停用</label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="isLocked" 
                                               checked="@employee.IsLocked" 
                                               @onchange="@OnIsLockedChange" />
                                        <label class="form-check-label" for="isLocked">鎖定帳號</label>
                                        <div class="form-text">勾選此項將阻止使用者登入</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        @if (employee.FailedLoginAttempts > 0)
                        {
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">失敗登入次數</label>
                                        <div class="fw-bold @(employee.FailedLoginAttempts >= 3 ? "text-danger" : "text-warning")">
                                            @employee.FailedLoginAttempts
                                        </div>
                                        <GenericButtonComponent Variant="ButtonVariant.OutlineSecondary" Size="ButtonSize.Small"
                                                            Text="重設登入失敗次數" OnClick="ResetFailedAttempts" 
                                                            CssClass="mt-1" />
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="row">
                            <div class="col-12">
                                <GenericButtonComponent Variant="ButtonVariant.Warning" Text="重設密碼" 
                                                    IconClass="bi-key me-1" OnClick="ShowPasswordResetDialog" />
                            </div>
                        </div>
                    </div>
                </div>
            }

            @* 密碼重設模態對話框 *@
            @if (showPasswordResetModal)
            {
                <div class="modal fade show" style="display: block; background: rgba(0,0,0,0.5);">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">
                                    <i class="bi-key me-2"></i>
                                    重設密碼 - @employee?.Username
                                </h5>
                                <GenericButtonComponent Variant="ButtonVariant.Secondary" CssClass="btn-close" OnClick="ClosePasswordResetDialog" 
                                                    Title="關閉" />
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="newPassword" class="form-label">新密碼 <span class="text-danger">*</span></label>
                                    <input type="password" @bind="newPassword" class="form-control" id="newPassword" 
                                        placeholder="請輸入新密碼" />
                                    <div class="form-text">密碼長度至少 4 個字元，可包含數字、文字或符號</div>
                                    @if (!string.IsNullOrEmpty(newPasswordValidationMessage))
                                    {
                                        <div class="text-danger small mt-1">@newPasswordValidationMessage</div>
                                    }
                                </div>
                                <div class="mb-3">
                                    <label for="confirmNewPassword" class="form-label">確認新密碼 <span class="text-danger">*</span></label>
                                    <input type="password" @bind="confirmNewPassword" class="form-control" id="confirmNewPassword" 
                                        placeholder="請再次輸入新密碼" />
                                    @if (!string.IsNullOrEmpty(confirmNewPasswordValidationMessage))
                                    {
                                        <div class="text-danger small mt-1">@confirmNewPasswordValidationMessage</div>
                                    }
                                </div>
                            </div>
                            <div class="modal-footer">
                                <GenericButtonComponent Variant="ButtonVariant.Secondary" Text="取消" OnClick="ClosePasswordResetDialog" />
                                <GenericButtonComponent Variant="ButtonVariant.Warning" Text="確定重設" OnClick="ConfirmPasswordReset" />
                            </div>
                        </div>
                    </div>
                </div>
            }

            @* 軟刪除衝突處理對話框 *@
            @if (showSoftDeletedConflictModal && softDeletedEmployee != null)
            {
                <div class="modal fade show" style="display: block; background: rgba(0,0,0,0.5);">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">
                                    <i class="bi-exclamation-triangle me-2 text-warning"></i>
                                    發現已刪除的員工資料
                                </h5>
                                <GenericButtonComponent Variant="ButtonVariant.Secondary" CssClass="btn-close" OnClick="CloseSoftDeletedConflictDialog" 
                                                    Title="關閉" />
                            </div>
                            <div class="modal-body">
                                <div class="alert alert-warning">
                                    <i class="bi-info-circle me-2"></i>
                                    系統發現之前已有相同的@GetConflictDescription()，但該員工已被刪除。您可以選擇以下操作：
                                </div>
                                
                                <div class="card">
                                    <div class="card-header">
                                        <h6 class="mb-0">已刪除的員工資料</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <strong>員工代碼：</strong> @softDeletedEmployee.EmployeeCode
                                            </div>
                                            <div class="col-md-6">
                                                <strong>帳號：</strong> @softDeletedEmployee.Username
                                            </div>
                                            <div class="col-md-6">
                                                <strong>姓名：</strong> @($"{softDeletedEmployee.LastName}{softDeletedEmployee.FirstName}")
                                            </div>
                                            <div class="col-md-6">
                                                <strong>角色：</strong> @softDeletedEmployee.Role?.RoleName
                                            </div>
                                            <div class="col-md-6">
                                                <strong>部門：</strong> @softDeletedEmployee.Department?.Name
                                            </div>
                                            <div class="col-md-6">
                                                <strong>職位：</strong> @softDeletedEmployee.EmployeePosition?.Name
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <GenericButtonComponent Variant="ButtonVariant.Secondary" Text="取消" OnClick="CloseSoftDeletedConflictDialog" 
                                                    IsDisabled="isProcessingSoftDeletedRestore" />
                                <GenericButtonComponent Variant="ButtonVariant.Success" Text="復原並載入資料" IconClass="bi-arrow-clockwise me-1"
                                                    OnClick="HandleSoftDeletedRestore" 
                                                    IsDisabled="isProcessingSoftDeletedRestore" />
                            </div>
                        </div>
                    </div>
                </div>
            }

            @* 聯絡方式管理 *@
            <ContactManagerComponent TContactEntity="EmployeeContact"
                                TParentEntity="Employee"
                                Items="@employeeContacts"
                                Options="@(contactTypes.Cast<ERPCore2.Data.BaseEntity>().ToList())"
                                ParentEntityId="@(employee?.Id ?? 0)"
                                GetIsPrimary="@(c => c.IsPrimary)"
                                GetTypeId="@(c => c.ContactTypeId)"
                                GetContactValue="@(c => c.ContactValue)"
                                SetIsPrimary="@((c, isPrimary) => c.IsPrimary = isPrimary)"
                                SetTypeId="@((c, typeId) => c.ContactTypeId = typeId)"
                                SetContactValue="@((c, value) => c.ContactValue = value)"
                                SetParentId="@((c, parentId) => c.EmployeeId = parentId)"
                                ItemsChanged="@OnEmployeeContactsChanged" />

            @* 地址管理 *@
            <AddressManagerComponent TAddressEntity="EmployeeAddress"
                                TParentEntity="Employee"
                                Items="@employeeAddresses"
                                Options="@(addressTypes.Cast<ERPCore2.Data.BaseEntity>().ToList())"
                                ParentEntityId="@(employee?.Id ?? 0)"
                                GetIsPrimary="@(a => a.IsPrimary)"
                                GetTypeId="@(a => a.AddressTypeId)"
                                GetPostalCode="@(a => a.PostalCode)"
                                GetCity="@(a => a.City)"
                                GetDistrict="@(a => a.District)"
                                GetAddress="@(a => a.Address)"
                                SetIsPrimary="@((a, isPrimary) => a.IsPrimary = isPrimary)"
                                SetTypeId="@((a, typeId) => a.AddressTypeId = typeId)"
                                SetPostalCode="@((a, postalCode) => a.PostalCode = postalCode)"
                                SetCity="@((a, city) => a.City = city)"
                                SetDistrict="@((a, district) => a.District = district)"
                                SetAddress="@((a, address) => a.Address = address)"
                                SetParentId="@((a, parentId) => a.EmployeeId = parentId)"
                                ItemsChanged="@OnEmployeeAddressesChanged" />
        </AdditionalSections>
    </GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 資料模型
    private Employee employee = new();
    private List<EmployeeContact> employeeContacts = new();
    private List<EmployeeAddress> employeeAddresses = new();
    
    // 選項清單
    private List<Role> roles = new();
    private List<EmployeePosition> employeePositions = new();
    private List<Department> departments = new();
    private List<ContactType> contactTypes = new();
    private List<AddressType> addressTypes = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> basicFormFields = new();
    private Dictionary<string, string> basicFormSections = new();
    
    // 密碼欄位
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string passwordValidationMessage = string.Empty;
    private string confirmPasswordValidationMessage = string.Empty;
    
    // 密碼重設模態對話框
    private bool showPasswordResetModal = false;
    private string newPassword = string.Empty;
    private string confirmNewPassword = string.Empty;
    private string newPasswordValidationMessage = string.Empty;
    private string confirmNewPasswordValidationMessage = string.Empty;
    
    // 軟刪除衝突處理對話框
    private bool showSoftDeletedConflictModal = false;
    private Employee? softDeletedEmployee = null;
    private string conflictType = string.Empty;
    private bool isProcessingSoftDeletedRestore = false;
    
    // 防止重複載入
    private bool _isLoadingData = false;
    private readonly SemaphoreSlim _loadingSemaphore = new(1, 1);
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            await LoadAdditionalData();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnInitializedAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeEdit",
                    Action = "Initialize",
                    EmployeeId = Id
                });
            
            // 設置預設值避免頁面崩潰
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "/employees"),
                new(Id.HasValue ? "編輯員工" : "新增員工")
            };
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // 當參數變化時（例如從 Detail 導航到 Edit），重新初始化麵包屑
            InitializeBreadcrumbs();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnParametersSetAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeEdit",
                    Action = "ParametersSet",
                    EmployeeId = Id
                });
            
            // 設置預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "/employees"),
                new(Id.HasValue ? "編輯員工" : "新增員工")
            };
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "/employees"),
                new(Id.HasValue ? "編輯員工" : "新增員工")
            };
        }
        catch (Exception ex)
        {
            // 記錄麵包屑初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeBreadcrumbs), 
                    GetType(),
                    additionalData: new { 
                        PageName = "EmployeeEdit",
                        Action = "InitializeBreadcrumbs",
                        EmployeeId = Id
                    });
            });
            
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    private async Task LoadAdditionalData()
    {
        await _loadingSemaphore.WaitAsync();
        try
        {
            if (_isLoadingData) return; // 防止重複載入
            
            _isLoadingData = true;
            
            // 順序執行以避免DbContext併發問題
            var rolesResult = await RoleService.GetAllAsync();
            roles = rolesResult ?? new List<Role>();
            
            var employeePositionsResult = await EmployeePositionService.GetAllAsync();
            employeePositions = employeePositionsResult ?? new List<EmployeePosition>();
            
            var departmentsResult = await DepartmentService.GetAllAsync();
            departments = departmentsResult ?? new List<Department>();
            
            var contactTypesResult = await ContactTypeService.GetAllAsync();
            contactTypes = contactTypesResult ?? new List<ContactType>();
            
            var addressTypesResult = await AddressTypeService.GetAllAsync();
            addressTypes = addressTypesResult ?? new List<AddressType>();
            
            // 在載入完基礎資料後初始化表單欄位
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadAdditionalData), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeEdit",
                    Action = "LoadAdditionalData",
                    EmployeeId = Id
                });
            
            // 初始化空列表以防止UI錯誤
            roles = new List<Role>();
            employeePositions = new List<EmployeePosition>();
            departments = new List<Department>();
            contactTypes = new List<ContactType>();
            addressTypes = new List<AddressType>();
            InitializeFormFields(); // 即使出錯也要初始化表單欄位
        }
        finally
        {
            _isLoadingData = false;
            _loadingSemaphore.Release();
        }
    }

    private void InitializeFormFields()
    {
        // 角色選項
        var roleOptions = roles.Select(r => new SelectOption
        {
            Text = r.RoleName,
            Value = r.Id.ToString()
        }).ToList();        // 職位選項
        var positionOptions = employeePositions.Select(ep => new SelectOption
        {
            Text = ep.Name,
            Value = ep.Id.ToString()
        }).ToList();

        // 部門選項
        var departmentOptions = departments.Select(d => new SelectOption
        {
            Text = d.Name,
            Value = d.Id.ToString()
        }).ToList();

        // 帳號狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
            new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
        };

        basicFormFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = nameof(Employee.EmployeeCode),
                Label = "員工代碼",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入員工代碼",
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Employee.Username),
                Label = "帳號",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入帳號（用於登入系統）",
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Employee.LastName),
                Label = "姓氏",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入姓氏",
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Employee.FirstName),
                Label = "名字",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入名字",
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Employee.RoleId),
                Label = "角色",
                FieldType = FormFieldType.Select,
                Options = roleOptions,
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Employee.DepartmentId),
                Label = "部門",
                FieldType = FormFieldType.Select,
                Placeholder = "請選擇部門",
                ContainerCssClass = "col-md-6",
                Options = departmentOptions
            },
            new()
            {
                PropertyName = nameof(Employee.EmployeePositionId),
                Label = "職位",
                FieldType = FormFieldType.Select,
                Placeholder = "請選擇職位",
                ContainerCssClass = "col-md-6",
                Options = positionOptions
            }
        };

        basicFormSections = new Dictionary<string, string>
        {
            { nameof(Employee.EmployeeCode), "基本資訊" },
            { nameof(Employee.Username), "基本資訊" },
            { nameof(Employee.LastName), "基本資訊" },
            { nameof(Employee.FirstName), "基本資訊" },
            { nameof(Employee.RoleId), "角色權限" },
            { nameof(Employee.DepartmentId), "工作資訊" },
            { nameof(Employee.EmployeePositionId), "工作資訊" }
        };
    }

    private async Task<Employee?> LoadEmployeeData()
    {
        await _loadingSemaphore.WaitAsync();
        try
        {
            if (!Id.HasValue) 
            {
                var newEmployee = new Employee
                {
                    EmployeeCode = GenerateEmployeeCode(),
                    Username = "",
                    LastName = "",
                    FirstName = "",
                    DepartmentId = null,
                    EmployeePositionId = null,
                    Status = EntityStatus.Active,
                    IsLocked = false,
                    FailedLoginAttempts = 0
                };
                employee = newEmployee;
                employeeContacts = new List<EmployeeContact>();
                employeeAddresses = new List<EmployeeAddress>();
                return newEmployee;
            }

            // 載入員工基本資料
            var loadedEmployee = await EmployeeService.GetByIdAsync(Id.Value);
            if (loadedEmployee != null)
            {
                employee = loadedEmployee;
                
                // 載入聯絡方式
                var contactsResult = await EmployeeContactService.GetByEmployeeIdAsync(Id.Value);
                employeeContacts = contactsResult.IsSuccess && contactsResult.Data != null 
                    ? contactsResult.Data 
                    : new List<EmployeeContact>();
                
                // 載入地址資料
                employeeAddresses = await EmployeeAddressService.GetByEmployeeIdAsync(Id.Value);
                
                // 觸發 UI 更新
                StateHasChanged();
                
                return employee;
            }
            else
            {
                // 如果找不到員工，建立新的
                employee = new Employee();
                employeeContacts = new List<EmployeeContact>();
                employeeAddresses = new List<EmployeeAddress>();
                return employee;
            }
        }
        catch (Exception ex)
        {
            // 統一錯誤處理
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadEmployeeData), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeEdit",
                    Action = "LoadEmployeeData",
                    EmployeeId = Id
                });
            
            // 設置預設值避免頁面崩潰
            employee = new Employee();
            employeeContacts = new List<EmployeeContact>();
            employeeAddresses = new List<EmployeeAddress>();
            
            // 重新拋出異常讓 GenericEditPageComponent 處理
            throw;
        }
        finally
        {
            _loadingSemaphore.Release();
        }
    }

    private string GenerateEmployeeCode()
    {
        return $"E{DateTime.Now:yyyyMMddHHmmss}";
    }

    private string GetPageTitle()
    {
        return Id.HasValue ? "編輯員工" : "新增員工";
    }

    // 員工資料驗證（包含軟刪除衝突檢查和密碼驗證）
    private async Task<bool> ValidateEmployeeData(Employee entity)
    {
        try
        {
            // 只在新增模式進行軟刪除衝突檢查
            if (!Id.HasValue)
            {
                // 檢查軟刪除衝突
                var checkResult = await EmployeeService.CheckSoftDeletedConflictAsync(entity.Username, entity.EmployeeCode);
                if (checkResult.IsSuccess && checkResult.Data != null && checkResult.Data.HasSoftDeletedEmployee)
                {
                    softDeletedEmployee = checkResult.Data.SoftDeletedEmployee;
                    conflictType = checkResult.Data.ConflictType;
                    showSoftDeletedConflictModal = true;
                    StateHasChanged();
                    
                    // 返回 false 以阻止儲存繼續進行，但不顯示錯誤訊息
                    return false;
                }
                
                // 驗證密碼（新增模式）
                if (!ValidatePassword())
                {
                    return false;
                }
            }
            
            return true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ValidateEmployeeData), GetType(),
                additionalData: new { EmployeeId = entity.Id, Username = entity.Username, EmployeeCode = entity.EmployeeCode });
            return false;
        }
    }

    // 員工儲存後的額外處理（處理聯絡方式、地址和密碼設定）
    private async Task AfterSaveEmployee(Employee entity)
    {
        try
        {
            // 更新聯絡方式和地址資料
            if (employeeContacts.Any() || employeeAddresses.Any())
            {
                await EmployeeService.UpdateEmployeeContactsAsync(entity.Id, employeeContacts);
                await EmployeeService.UpdateEmployeeAddressesAsync(entity.Id, employeeAddresses);
            }

            // 新增模式時設定初始密碼
            if (!Id.HasValue && !string.IsNullOrWhiteSpace(password))
            {
                var passwordResult = await AuthenticationService.ResetPasswordAsync(entity.Id, password);
                if (!passwordResult.IsSuccess)
                {
                    await NotificationService.ShowErrorAsync($"員工建立成功，但密碼設定失敗：{passwordResult.ErrorMessage}");
                }
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(AfterSaveEmployee), GetType(),
                additionalData: new { EmployeeId = entity.Id, HasContacts = employeeContacts.Any(), HasAddresses = employeeAddresses.Any() });
        }
    }

    private bool ValidatePassword()
    {
        passwordValidationMessage = string.Empty;
        confirmPasswordValidationMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(password))
        {
            passwordValidationMessage = "請輸入密碼";
            return false;
        }

        if (password.Length < 4)
        {
            passwordValidationMessage = "密碼長度至少需要 4 個字元";
            return false;
        }

        if (string.IsNullOrWhiteSpace(confirmPassword))
        {
            confirmPasswordValidationMessage = "請確認密碼";
            return false;
        }

        if (password != confirmPassword)
        {
            confirmPasswordValidationMessage = "密碼確認不一致";
            return false;
        }
        
        return true;
    }

    #region 帳號管理

    private async Task ResetFailedAttempts()
    {
        try
        {
            if (employee != null)
            {
                employee.FailedLoginAttempts = 0;
                employee.IsLocked = false;
                
                // 儲存變更到資料庫
                await EmployeeService.UpdateAsync(employee);
                
                await NotificationService.ShowSuccessAsync("登入失敗次數已重設");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(ResetFailedAttempts), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeEdit",
                    Action = "ResetFailedAttempts",
                    EmployeeId = employee?.Id
                });
        }
    }

    private async Task ShowPasswordResetDialog()
    {
        try
        {
            if (employee == null) return;

            // 重置表單狀態
            newPassword = string.Empty;
            confirmNewPassword = string.Empty;
            newPasswordValidationMessage = string.Empty;
            confirmNewPasswordValidationMessage = string.Empty;
            
            // 顯示模態對話框
            showPasswordResetModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(ShowPasswordResetDialog), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeEdit",
                    Action = "ShowPasswordResetDialog",
                    EmployeeId = employee?.Id,
                    Username = employee?.Username
                });
        }
    }

    private void ClosePasswordResetDialog()
    {
        showPasswordResetModal = false;
        newPassword = string.Empty;
        confirmNewPassword = string.Empty;
        newPasswordValidationMessage = string.Empty;
        confirmNewPasswordValidationMessage = string.Empty;
        StateHasChanged();
    }

    private async Task ConfirmPasswordReset()
    {
        try
        {
            if (employee == null) return;

            // 驗證新密碼
            if (!ValidateNewPassword())
            {
                StateHasChanged();
                return;
            }

            // 執行密碼重設
            var resetResult = await AuthenticationService.ResetPasswordAsync(employee.Id, newPassword);
            
            if (resetResult.IsSuccess)
            {
                // 重設登入失敗次數和帳號鎖定狀態（但不更新到資料庫，避免覆蓋密碼）
                employee.FailedLoginAttempts = 0;
                employee.IsLocked = false;
                
                // 重新載入員工資料以確保密碼已更新，並保持狀態重設
                var updatedEmployee = await EmployeeService.GetByIdAsync(employee.Id);
                if (updatedEmployee != null)
                {
                    // 保持 UI 中的狀態重設，但使用資料庫中的最新資料（包含新密碼）
                    updatedEmployee.FailedLoginAttempts = 0;
                    updatedEmployee.IsLocked = false;
                    
                    // 更新員工資料以儲存狀態變更（此時員工對象已包含正確的密碼雜湊）
                    var statusUpdateResult = await EmployeeService.UpdateAsync(updatedEmployee);
                    if (statusUpdateResult.IsSuccess)
                    {
                        employee = updatedEmployee;
                    }
                    else
                    {
                        // 即使狀態更新失敗，密碼已經重設成功，所以仍使用更新後的員工資料
                        employee = updatedEmployee;
                    }
                }
                
                // 關閉對話框
                ClosePasswordResetDialog();
                
                await NotificationService.ShowSuccessAsync("密碼重設成功！請使用新密碼登入。");
                StateHasChanged();
            }
            else
            {
                await NotificationService.ShowErrorAsync($"重設密碼失敗：{resetResult.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(ConfirmPasswordReset), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeEdit",
                    Action = "ConfirmPasswordReset",
                    EmployeeId = employee?.Id,
                    Username = employee?.Username
                });
        }
    }

    private bool ValidateNewPassword()
    {
        newPasswordValidationMessage = string.Empty;
        confirmNewPasswordValidationMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(newPassword))
        {
            newPasswordValidationMessage = "請輸入新密碼";
            return false;
        }

        if (newPassword.Length < 4)
        {
            newPasswordValidationMessage = "密碼長度至少需要 4 個字元";
            return false;
        }

        if (string.IsNullOrWhiteSpace(confirmNewPassword))
        {
            confirmNewPasswordValidationMessage = "請確認新密碼";
            return false;
        }

        if (newPassword != confirmNewPassword)
        {
            confirmNewPasswordValidationMessage = "密碼確認不一致";
            return false;
        }
        
        return true;
    }

    #endregion

    #region 事件處理方法

    private Task OnEmployeeContactsChanged(List<EmployeeContact> updatedContacts)
    {
        employeeContacts = updatedContacts;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnEmployeeAddressesChanged(List<EmployeeAddress> updatedAddresses)
    {
        employeeAddresses = updatedAddresses;
        StateHasChanged();
        return Task.CompletedTask;
    }

    #endregion
    
    #region 軟刪除衝突處理

    private async Task CheckForSoftDeletedConflict()
    {
        try
        {
            if (Id.HasValue || employee == null) return; // 只在新增模式檢查

            if (string.IsNullOrWhiteSpace(employee.Username) && string.IsNullOrWhiteSpace(employee.EmployeeCode))
                return;

            var checkResult = await EmployeeService.CheckSoftDeletedConflictAsync(employee.Username, employee.EmployeeCode);
            if (checkResult.IsSuccess && checkResult.Data != null && checkResult.Data.HasSoftDeletedEmployee)
            {
                softDeletedEmployee = checkResult.Data.SoftDeletedEmployee;
                conflictType = checkResult.Data.ConflictType;
                showSoftDeletedConflictModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(CheckForSoftDeletedConflict), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeEdit",
                    Action = "CheckForSoftDeletedConflict",
                    Username = employee?.Username,
                    EmployeeCode = employee?.EmployeeCode
                });
        }
    }

    private string GetConflictDescription()
    {
        return conflictType switch
        {
            "Username" => "帳號",
            "EmployeeCode" => "員工代碼",
            "Username, EmployeeCode" => "帳號和員工代碼",
            _ => "資料"
        };
    }

    private void CloseSoftDeletedConflictDialog()
    {
        showSoftDeletedConflictModal = false;
        softDeletedEmployee = null;
        conflictType = string.Empty;
        isProcessingSoftDeletedRestore = false;
        StateHasChanged();
    }

    private async Task HandleSoftDeletedRestore()
    {
        try
        {
            if (softDeletedEmployee == null) return;

            isProcessingSoftDeletedRestore = true;
            StateHasChanged();

            // 正確做法：只復原軟刪除狀態，不更新其他資料
            var restoreResult = await EmployeeService.RestoreSoftDeletedEmployeeAsync(softDeletedEmployee.Id);
            if (!restoreResult.IsSuccess)
            {
                await NotificationService.ShowErrorAsync($"復原員工失敗：{restoreResult.ErrorMessage}");
                return;
            }

            // 載入已復原的員工資料到編輯頁面
            var loadedEmployee = await EmployeeService.GetByIdAsync(softDeletedEmployee.Id);
            if (loadedEmployee == null)
            {
                await NotificationService.ShowErrorAsync("復原成功，但無法載入員工資料");
                return;
            }

            // 更新頁面上的員工資料為已復原的員工資料
            employee = loadedEmployee;
            Id = loadedEmployee.Id;
            
            // 載入相關資料（聯絡資料和地址已包含在 GetByIdAsync 中）
            employeeContacts = loadedEmployee.EmployeeContacts?.ToList() ?? new List<EmployeeContact>();
            employeeAddresses = loadedEmployee.EmployeeAddresses?.ToList() ?? new List<EmployeeAddress>();

            // 設定密碼（如果有輸入）
            if (!string.IsNullOrWhiteSpace(password))
            {
                var passwordResult = await AuthenticationService.ResetPasswordAsync(loadedEmployee.Id, password);
                if (!passwordResult.IsSuccess)
                {
                    await NotificationService.ShowWarningAsync($"員工復原成功，但密碼設定失敗：{passwordResult.ErrorMessage}");
                }
            }

            CloseSoftDeletedConflictDialog();
            await NotificationService.ShowSuccessAsync("員工已成功復原！現在您可以編輯員工資料。");
            
            // 強制重新渲染頁面以顯示復原的資料
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(HandleSoftDeletedRestore), 
                GetType(),
                additionalData: new { 
                    PageName = "EmployeeEdit",
                    Action = "HandleSoftDeletedRestore",
                    SoftDeletedEmployeeId = softDeletedEmployee?.Id
                });
            await NotificationService.ShowErrorAsync("處理軟刪除復原時發生錯誤，請稍後再試。");
        }
        finally
        {
            isProcessingSoftDeletedRestore = false;
            StateHasChanged();
        }
    }

    #endregion

    #region UI 事件處理方法
    
    private void OnStatusChange(EntityStatus newStatus)
    {
        employee.Status = newStatus;
        StateHasChanged();
    }
    
    private void OnIsLockedChange(ChangeEventArgs e)
    {
        var newValue = (bool)e.Value!;
        employee.IsLocked = newValue;
        StateHasChanged();
    }
    
    #endregion
    
    public void Dispose()
    {
        _loadingSemaphore?.Dispose();
    }
}

