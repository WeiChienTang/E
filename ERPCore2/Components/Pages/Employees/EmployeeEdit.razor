@page "/employees/edit"
@page "/employees/edit/{id:int?}"

@inject IEmployeeService EmployeeService
@inject IDepartmentService DepartmentService
@inject IEmployeePositionService EmployeePositionService
@inject IRoleService RoleService
@inject IEmployeeContactService EmployeeContactService
@inject IEmployeeAddressService EmployeeAddressService
@inject IContactTypeService ContactTypeService
@inject IAddressTypeService AddressTypeService
@inject INotificationService NotificationService 
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="Employee" 
                        TService="IEmployeeService"
                        @ref="editComponent"
                        Id="@Id"
                        Service="@EmployeeService"
                        EntityName="員工"
                        EntityNamePlural="員工"
                        PageTitle="@(Id.HasValue ? "編輯員工" : "新增員工")"
                        IndexRoute="/employees"
                        FormTitle="基本資料"
                        FormSubtitle="員工的基本資訊與組織架構"
                        UseGenericForm="true"
                        FormFields="@GetFormFields()"
                        FormSections="@formSections"
                        BreadcrumbItems="@breadcrumbItems"
                        DataLoader="@LoadEmployeeData"
                        SaveHandler="@SaveEmployee"
                        AdditionalDataLoader="@LoadAdditionalDataAsync"
                        RequiredPermission="Employee.Read" />

@* 聯絡資訊與地址管理 *@
@if (editComponent?.Entity != null)
{
    <div class="container-fluid mt-4">
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <ContactManagerComponent TContactEntity="EmployeeContact" 
                                               TParentEntity="Employee"
                                               Items="@employeeContacts"
                                               Options="@contactTypeOptions"
                                               ParentEntityId="@(Id ?? 0)"
                                               Title="聯絡方式"
                                               ItemDisplayName="聯絡方式"
                                               TypeDisplayName="聯絡類型"
                                               ValueDisplayName="聯絡內容"
                                               ValuePlaceholder="請輸入聯絡內容"
                                               GetIsPrimary="@(contact => contact.IsPrimary)"
                                               GetTypeId="@(contact => contact.ContactTypeId)"
                                               GetContactValue="@(contact => contact.ContactValue)"
                                               GetOptionId="@(option => option.Id)"
                                               GetOptionDisplayText="@(option => ((ContactType)option).TypeName)"
                                               SetIsPrimary="@((contact, isPrimary) => contact.IsPrimary = isPrimary)"
                                               SetTypeId="@((contact, typeId) => contact.ContactTypeId = typeId)"
                                               SetContactValue="@((contact, value) => contact.ContactValue = value)"
                                               SetParentId="@((contact, parentId) => contact.EmployeeId = parentId)"
                                               ItemsChanged="@OnEmployeeContactsChanged" />
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body">
                        <AddressManagerComponent TAddressEntity="EmployeeAddress" 
                                               TParentEntity="Employee"
                                               Items="@employeeAddresses"
                                               Options="@addressTypeOptions"
                                               ParentEntityId="@(Id ?? 0)"
                                               Title="地址資訊"
                                               ItemDisplayName="地址"
                                               TypeDisplayName="地址類型"
                                               GetIsPrimary="@(address => address.IsPrimary)"
                                               GetTypeId="@(address => address.AddressTypeId)"
                                               GetPostalCode="@(address => address.PostalCode)"
                                               GetCity="@(address => address.City)"
                                               GetAddress="@(address => address.Address)"
                                               GetOptionId="@(option => option.Id)"
                                               GetOptionDisplayText="@(option => ((AddressType)option).TypeName)"
                                               SetIsPrimary="@((address, isPrimary) => address.IsPrimary = isPrimary)"
                                               SetTypeId="@((address, typeId) => address.AddressTypeId = typeId)"
                                               SetPostalCode="@((address, value) => address.PostalCode = value)"
                                               SetCity="@((address, value) => address.City = value)"
                                               SetAddress="@((address, value) => address.Address = value)"
                                               SetParentId="@((address, parentId) => address.EmployeeId = parentId)"
                                               ItemsChanged="@OnEmployeeAddressesChanged" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public int? Id { get; set; }
    
    private GenericEditPageComponent<Employee, IEmployeeService>? editComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<Department> availableDepartments = new();
    private List<EmployeePosition> availablePositions = new();
    private List<Role> availableRoles = new();
    
    // 聯絡資訊和地址資訊相關變數
    private List<EmployeeContact> employeeContacts = new();
    private List<EmployeeAddress> employeeAddresses = new();
    private List<ContactType> contactTypes = new();
    private List<AddressType> addressTypes = new();
    
    // 子集合組件用的轉換清單
    private List<ERPCore2.Data.BaseEntity> contactTypeOptions = new();
    private List<ERPCore2.Data.BaseEntity> addressTypeOptions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            await LoadAdditionalDataAsync();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), NotificationService);
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入可選擇的部門列表
            availableDepartments = await DepartmentService.GetAllAsync();
            
            // 載入可選擇的職位列表
            availablePositions = await EmployeePositionService.GetAllAsync();
            
            // 載入可指派的角色列表
            var rolesResult = await RoleService.GetAssignableRolesAsync();
            availableRoles = rolesResult.IsSuccess ? rolesResult.Data ?? new List<Role>() : new List<Role>();
            
            // 載入聯絡類型和地址類型
            contactTypes = await ContactTypeService.GetActiveAsync();
            addressTypes = await AddressTypeService.GetActiveAsync();
            
            // 轉換為子集合組件用的基礎實體清單
            contactTypeOptions = contactTypes.Cast<ERPCore2.Data.BaseEntity>().ToList();
            addressTypeOptions = addressTypes.Cast<ERPCore2.Data.BaseEntity>().ToList();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalDataAsync), GetType(), NotificationService);
            availableDepartments = new List<Department>();
            availablePositions = new List<EmployeePosition>();
            availableRoles = new List<Role>();
            contactTypes = new List<ContactType>();
            addressTypes = new List<AddressType>();
            contactTypeOptions = new List<ERPCore2.Data.BaseEntity>();
            addressTypeOptions = new List<ERPCore2.Data.BaseEntity>();
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("員工管理", "#"),
                new("員工設定", "/employees"),
                new(Id.HasValue ? "編輯員工" : "新增員工")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(), NotificationService);
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            // 準備部門選項
            var departmentOptions = availableDepartments.Select(d => new SelectOption
            {
                Text = d.Name,
                Value = d.Id.ToString()
            }).ToList();

            // 準備職位選項
            var positionOptions = availablePositions.Select(p => new SelectOption
            {
                Text = p.Name,
                Value = p.Id.ToString()
            }).ToList();

            // 準備角色選項
            var roleOptions = availableRoles.Select(r => new SelectOption
            {
                Text = r.RoleName,
                Value = r.Id.ToString()
            }).ToList();

            // 找出預設的系統角色 (Employee-非系統使用者)
            var defaultRole = availableRoles.FirstOrDefault(r => 
                r.RoleName.Contains("Employee") && r.RoleName.Contains("非系統使用者"));
            var defaultRoleValue = defaultRole?.Id.ToString();

            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(Employee.EmployeeCode),
                    Label = "員工代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入員工代碼",
                    IsRequired = true,
                    MaxLength = 20,
                    HelpText = "員工的唯一識別代碼，新增時系統會自動產生，也可手動修改"
                },
                new()
                {
                    PropertyName = nameof(Employee.FirstName),
                    Label = "名字",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入名字",
                    IsRequired = true,
                    MaxLength = 25,
                    HelpText = "員工的名字"
                },
                new()
                {
                    PropertyName = nameof(Employee.LastName),
                    Label = "姓氏",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入姓氏",
                    IsRequired = true,
                    MaxLength = 25,
                    HelpText = "員工的姓氏"
                },
                
                // 帳號資訊區段
                new()
                {
                    PropertyName = nameof(Employee.IsSystemUser),
                    Label = "系統使用者",
                    FieldType = FormFieldType.Checkbox,
                    HelpText = "是否允許此員工登入系統"
                },
                new()
                {
                    PropertyName = nameof(Employee.Account),
                    Label = "帳號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入登入帳號",
                    MaxLength = 50,
                    HelpText = "系統登入帳號，僅當員工為系統使用者時才需要設定"
                },
                new()
                {
                    PropertyName = nameof(Employee.Password),
                    Label = "密碼",
                    FieldType = FormFieldType.Password,
                    Placeholder = "請輸入密碼",
                    MaxLength = 255,
                    HelpText = "登入密碼，僅當員工為系統使用者時才需要設定"
                },
                
                // 組織架構區段
                new()
                {
                    PropertyName = nameof(Employee.DepartmentId),
                    Label = "部門",
                    FieldType = FormFieldType.Select,
                    Placeholder = "請選擇部門",
                    Options = departmentOptions,
                    HelpText = "選擇員工所屬的部門"
                },
                new()
                {
                    PropertyName = nameof(Employee.EmployeePositionId),
                    Label = "職位",
                    FieldType = FormFieldType.Select,
                    Placeholder = "請選擇職位",
                    Options = positionOptions,
                    HelpText = "選擇員工在組織中的職位"
                },
                new()
                {
                    PropertyName = nameof(Employee.RoleId),
                    Label = "系統角色",
                    FieldType = FormFieldType.Select,
                    Placeholder = defaultRoleValue != null ? string.Empty : "請選擇系統角色",
                    Options = roleOptions,
                    DefaultValue = defaultRoleValue,
                    HelpText = "選擇員工在系統中的權限角色"
                },
                
                // 備註區段
                new()
                {
                    PropertyName = nameof(Employee.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註",
                    Rows = 2,
                    MaxLength = 500,
                    HelpText = "其他需要補充的資訊"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(Employee.EmployeeCode), "基本資訊" },
                { nameof(Employee.FirstName), "基本資訊" },
                { nameof(Employee.LastName), "基本資訊" },
                { nameof(Employee.IsSystemUser), "帳號資訊" },
                { nameof(Employee.Account), "帳號資訊" },
                { nameof(Employee.Password), "帳號資訊" },
                { nameof(Employee.RoleId), "帳號資訊" },
                { nameof(Employee.DepartmentId), "組織架構" },
                { nameof(Employee.EmployeePositionId), "組織架構" },                
                { nameof(Employee.Remarks), "額外資料" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "初始化表單欄位時發生錯誤", GetType(), NotificationService);
        }
    }    
    private List<FormFieldDefinition> GetFormFields()
    {
        try
        {
            return formFields;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "取得表單欄位時發生錯誤", GetType(), NotificationService);
            return new List<FormFieldDefinition>();
        }
    }

    private async Task<Employee?> LoadEmployeeData()
    {
        try
        {
            if (!Id.HasValue) 
            {
                // 新增模式：建立新的員工實體並生成代碼
                employeeContacts = new List<EmployeeContact>();
                employeeAddresses = new List<EmployeeAddress>();
                
                // 找出預設的系統角色 (Employee-非系統使用者)
                var defaultRole = availableRoles.FirstOrDefault(r => 
                    r.RoleName.Contains("Employee") && r.RoleName.Contains("非系統使用者"));
                
                return new Employee
                {
                    EmployeeCode = await GenerateEmployeeCodeAsync(),
                    FirstName = string.Empty,
                    LastName = string.Empty,
                    IsSystemUser = false,
                    RoleId = defaultRole?.Id, // 設定預設角色
                    Status = EntityStatus.Active
                };
            }

            var employee = await EmployeeService.GetByIdAsync(Id.Value);            
            
            if (employee == null)
            {
                // 如果找不到員工，建立新的預設員工
                employee = new Employee
                {
                    EmployeeCode = await GenerateEmployeeCodeAsync(),
                    FirstName = "ERROR",
                    LastName = "ERROR",
                    Status = EntityStatus.Active
                };
                employeeContacts = new List<EmployeeContact>();
                employeeAddresses = new List<EmployeeAddress>();
                return employee;
            }
            
            // 載入聯絡資訊和地址資訊
            var contactsResult = await EmployeeContactService.GetByEmployeeIdAsync(Id.Value);
            employeeContacts = contactsResult.IsSuccess && contactsResult.Data != null 
                ? contactsResult.Data 
                : new List<EmployeeContact>();
                
            employeeAddresses = await EmployeeAddressService.GetByEmployeeIdAsync(Id.Value);
            
            return employee;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadEmployeeData), GetType(), NotificationService);
            
            // 設定安全的預設值，確保程式不會崩潰
            return new Employee
            {
                EmployeeCode = "ERROR",
                FirstName = "ERROR",
                LastName = "ERROR",
                Status = EntityStatus.Active
            };
        }
    }

    private async Task<string> GenerateEmployeeCodeAsync()
    {
        try
        {
            // 簡單的員工代碼生成邏輯：EMP + 時間戳
            var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
            var baseCode = $"EMP{timestamp}";
            
            // 檢查是否重複，如果重複則加上隨機數
            var existsResult = await EmployeeService.IsEmployeeCodeExistsAsync(baseCode);
            if (existsResult.IsSuccess && existsResult.Data)
            {
                var random = new Random().Next(100, 999);
                baseCode = $"EMP{timestamp}{random}";
            }
            
            return baseCode;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GenerateEmployeeCodeAsync), GetType(), NotificationService);
            // 如果生成失敗，返回預設格式
            return $"EMP{DateTime.Now:yyyyMMddHHmmss}";
        }
    }

    private async Task<bool> SaveEmployee(Employee entity)
    {
        try
        {
            // 基本驗證 - 使用通知服務
            if (string.IsNullOrWhiteSpace(entity.EmployeeCode))
            {
                await NotificationService.ShowErrorAsync("員工代碼為必填");
                return false;
            }

            if (string.IsNullOrWhiteSpace(entity.FirstName))
            {
                await NotificationService.ShowErrorAsync("員工姓名為必填");
                return false;
            }

            if (string.IsNullOrWhiteSpace(entity.LastName))
            {
                await NotificationService.ShowErrorAsync("員工姓氏為必填");
                return false;
            }

            ServiceResult result;
            
            if (Id.HasValue)
            {
                // 更新現有員工
                result = await EmployeeService.UpdateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新聯絡方式和地址資料
                    await UpdateEmployeeSubCollectionsAsync(entity.Id);
                }
            }
            else
            {
                // 新增員工
                result = await EmployeeService.CreateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新聯絡方式和地址的員工ID
                    foreach (var contact in employeeContacts)
                    {
                        contact.EmployeeId = entity.Id;
                    }
                    
                    foreach (var address in employeeAddresses)
                    {
                        address.EmployeeId = entity.Id;
                    }
                    
                    // 儲存聯絡方式和地址
                    await UpdateEmployeeSubCollectionsAsync(entity.Id);
                }
            }

            // 讓 GenericEditPageComponent 處理通用的成功/失敗訊息
            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveEmployee), GetType(), NotificationService);
            return false;
        }
    }

    private async Task UpdateEmployeeSubCollectionsAsync(int employeeId)
    {
        try
        {
            // 更新聯絡資訊
            if (employeeContacts.Any())
            {
                foreach (var contact in employeeContacts)
                {
                    if (contact.Id > 0)
                    {
                        await EmployeeContactService.UpdateAsync(contact);
                    }
                    else
                    {
                        contact.EmployeeId = employeeId;
                        await EmployeeContactService.CreateAsync(contact);
                    }
                }
            }

            // 更新地址資訊
            if (employeeAddresses.Any())
            {
                foreach (var address in employeeAddresses)
                {
                    if (address.Id > 0)
                    {
                        await EmployeeAddressService.UpdateAsync(address);
                    }
                    else
                    {
                        address.EmployeeId = employeeId;
                        await EmployeeAddressService.CreateAsync(address);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(UpdateEmployeeSubCollectionsAsync), GetType(), NotificationService);
        }
    }

    #region 事件處理方法

    private Task OnEmployeeContactsChanged(List<EmployeeContact> updatedContacts)
    {
        try
        {
            employeeContacts = updatedContacts;
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnEmployeeContactsChanged), GetType(), NotificationService);
            return Task.CompletedTask;
        }
    }

    private Task OnEmployeeAddressesChanged(List<EmployeeAddress> updatedAddresses)
    {
        try
        {
            employeeAddresses = updatedAddresses;
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnEmployeeAddressesChanged), GetType(), NotificationService);
            return Task.CompletedTask;
        }
    }

    #endregion
}
