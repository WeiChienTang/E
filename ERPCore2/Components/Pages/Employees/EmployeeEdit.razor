@page "/employees/edit"
@page "/employees/edit/{id:int?}"
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Forms
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IEmployeeService EmployeeService
@inject IEmployeeContactService EmployeeContactService
@inject IEmployeeAddressService EmployeeAddressService
@inject IRoleService RoleService
@inject IContactTypeService ContactTypeService
@inject IAddressTypeService AddressTypeService
@inject IAuthenticationService AuthenticationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>@GetPageTitle()</PageTitle>

@* 頁面標題 *@
<GenericHeaderComponent Title="@GetPageTitle()"
                       Subtitle="@GetSubtitle()"
                       TitleIcon="@GetTitleIcon()"
                       HeadingLevel="h1"
                       BreadcrumbItems="@breadcrumbItems"
                       IsLoading="@isLoading"
                       LoadingText="載入中..."
                       ShowDivider="true">    <ActionButtons>
        <EditActionButtonsComponent 
            SaveButtonText="儲存"
            CancelButtonText="取消"
            OnSaveClick="SaveEmployee"
            OnCancelClick="Cancel"
            IsSubmitting="@isSubmitting"
            IsLoading="@isLoading" />
    </ActionButtons>
</GenericHeaderComponent>

@* 主要內容區域 *@
<div class="row">
    <div class="col-12">
        @* 基本資料表單 *@
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-person me-2"></i>
                    基本資料
                </h5>
            </div>
            <div class="card-body">
                <EditForm Model="@employee" OnValidSubmit="SaveEmployee">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="employeeCode" class="form-label">員工代碼 <span class="text-danger">*</span></label>
                                <InputText @bind-Value="employee.EmployeeCode" class="form-control" id="employeeCode" />
                                <ValidationMessage For="@(() => employee.EmployeeCode)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="username" class="form-label">帳號 <span class="text-danger">*</span></label>
                                <InputText @bind-Value="employee.Username" class="form-control" id="username" />
                                <ValidationMessage For="@(() => employee.Username)" />
                            </div>
                        </div>
                    </div>
                      <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="lastName" class="form-label">姓氏 <span class="text-danger">*</span></label>
                                <InputText @bind-Value="employee.LastName" class="form-control" id="lastName" />
                                <ValidationMessage For="@(() => employee.LastName)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="firstName" class="form-label">名字 <span class="text-danger">*</span></label>
                                <InputText @bind-Value="employee.FirstName" class="form-control" id="firstName" />
                                <ValidationMessage For="@(() => employee.FirstName)" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="email" class="form-label">電子郵件</label>
                                <InputText @bind-Value="emailValue" type="email" class="form-control" id="email" />
                                <div class="form-text">此欄位現在透過聯絡資料管理</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="roleId" class="form-label">角色 <span class="text-danger">*</span></label>
                                <InputSelect @bind-Value="employee.RoleId" class="form-control" id="roleId">
                                    <option value="">請選擇角色</option>
                                    @foreach (var role in roles)
                                    {
                                        <option value="@role.Id">@role.RoleName</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => employee.RoleId)" />
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="department" class="form-label">部門</label>
                                <InputText @bind-Value="employee.Department" class="form-control" id="department" />
                                <ValidationMessage For="@(() => employee.Department)" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="position" class="form-label">職位</label>
                                <InputText @bind-Value="employee.Position" class="form-control" id="position" />
                                <ValidationMessage For="@(() => employee.Position)" />
                            </div>
                        </div>
                    </div>

                    @if (IsCreateMode)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="password" class="form-label">密碼 <span class="text-danger">*</span></label>
                                    <InputText @bind-Value="password" type="password" class="form-control" id="password" />
                                    <div class="form-text">密碼長度至少 8 個字元，需包含大小寫字母和數字</div>
                                    @if (!string.IsNullOrEmpty(passwordValidationMessage))
                                    {
                                        <div class="text-danger small">@passwordValidationMessage</div>
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="confirmPassword" class="form-label">確認密碼 <span class="text-danger">*</span></label>
                                    <InputText @bind-Value="confirmPassword" type="password" class="form-control" id="confirmPassword" />
                                    @if (!string.IsNullOrEmpty(confirmPasswordValidationMessage))
                                    {
                                        <div class="text-danger small">@confirmPasswordValidationMessage</div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </EditForm>
            </div>
        </div>

        @* 帳號設定 - 僅編輯模式顯示 *@
        @if (!IsCreateMode)
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-gear me-2"></i>
                        帳號設定
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">帳號狀態</label>
                                <div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="status" id="statusActive" 
                                               checked="@(employee.Status == EntityStatus.Active)" 
                                               @onchange="@(() => employee.Status = EntityStatus.Active)">
                                        <label class="form-check-label" for="statusActive">
                                            啟用
                                        </label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="status" id="statusInactive" 
                                               checked="@(employee.Status == EntityStatus.Inactive)" 
                                               @onchange="@(() => employee.Status = EntityStatus.Inactive)">
                                        <label class="form-check-label" for="statusInactive">
                                            停用
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="isLocked" 
                                           checked="@employee.IsLocked" 
                                           @onchange="@((ChangeEventArgs e) => employee.IsLocked = (bool)e.Value!)">
                                    <label class="form-check-label" for="isLocked">
                                        鎖定帳號
                                    </label>
                                </div>
                                <div class="form-text">勾選此項將阻止使用者登入</div>
                            </div>
                        </div>
                    </div>
                    
                    @if (employee.FailedLoginAttempts > 0)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">失敗登入次數</label>
                                    <div class="fw-bold @(employee.FailedLoginAttempts >= 3 ? "text-danger" : "text-warning")">
                                        @employee.FailedLoginAttempts
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-secondary mt-1" @onclick="ResetFailedAttempts">
                                        重設登入失敗次數
                                    </button>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="row">
                        <div class="col-12">
                            <button type="button" class="btn btn-warning" @onclick="ShowPasswordResetDialog">
                                <i class="bi bi-key me-1"></i>
                                重設密碼
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }

        @* 聯絡方式管理 *@
        <div class="card mb-4">
            <GenericHeaderComponent Title="聯絡方式"
                                   Subtitle="@($"管理員工的聯絡資訊 ({employeeContacts.Count} 筆)")"
                                   TitleIcon="telephone"
                                   IsCardHeader="true">
                <ActionButtons>
                    <button class="btn btn-primary" @onclick="AddContact">
                        <i class="bi-plus me-1"></i>
                        新增聯絡方式
                    </button>
                </ActionButtons>
            </GenericHeaderComponent>
            <div class="card-body">
                @if (employeeContacts.Any())
                {
                    <div class="row g-3">
                        @for (int i = 0; i < employeeContacts.Count; i++)
                        {
                            var index = i; // 為了閉包
                            var contact = employeeContacts[index];
                            <div class="col-md-6">
                                <div class="card border-secondary">
                                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                        <small class="fw-bold text-muted">聯絡方式 #@(index + 1)</small>
                                        <div class="btn-group btn-group-sm">
                                            @if (contact.IsPrimary)
                                            {
                                                <span class="badge bg-primary">主要</span>
                                            }
                                            else
                                            {
                                                <button class="btn btn-outline-primary btn-sm" @onclick="() => SetPrimaryContact(index)" title="設為主要">
                                                    <i class="bi bi-star"></i>
                                                </button>
                                            }
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveContact(index)" title="移除">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body p-3">
                                        <div class="mb-2">
                                            <label class="form-label small">聯絡類型</label>
                                            <select class="form-select form-select-sm" 
                                                    @onchange="@(e => UpdateContactType(index, e.Value?.ToString()))"
                                                    value="@contact.ContactTypeId">
                                                <option value="">請選擇聯絡類型</option>
                                                @foreach (var type in contactTypes)
                                                {
                                                    <option value="@type.Id">@type.TypeName</option>
                                                }
                                            </select>
                                        </div>
                                        <div>
                                            <label class="form-label small">聯絡內容</label>
                                            <input type="text" class="form-control form-control-sm" 
                                                   placeholder="請輸入聯絡內容"
                                                   @bind="contact.ContactValue"
                                                   @bind:event="oninput" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-4 text-muted">
                        <i class="bi bi-telephone-x fs-1 mb-3 d-block"></i>
                        <p>尚未建立聯絡方式</p>
                        <button class="btn btn-outline-primary" @onclick="AddContact">
                            <i class="bi bi-plus me-1"></i>
                            新增第一個聯絡方式
                        </button>
                    </div>
                }
            </div>
        </div>

        @* 地址管理 *@
        <div class="card mb-4">
            <GenericHeaderComponent Title="地址資訊"
                                   Subtitle="@($"管理員工的地址資料 ({employeeAddresses.Count} 筆)")"
                                   TitleIcon="geo-alt"
                                   IsCardHeader="true">
                <ActionButtons>
                    <button class="btn btn-primary" @onclick="AddAddress">
                        <i class="bi-plus me-1"></i>
                        新增地址
                    </button>
                </ActionButtons>
            </GenericHeaderComponent>
            <div class="card-body">
                @if (employeeAddresses.Any())
                {
                    <div class="row g-3">
                        @for (int i = 0; i < employeeAddresses.Count; i++)
                        {
                            var index = i; // 為了閉包
                            var address = employeeAddresses[index];
                            <div class="col-lg-6">
                                <div class="card border-secondary">
                                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                        <small class="fw-bold text-muted">地址 #@(index + 1)</small>
                                        <div class="btn-group btn-group-sm">
                                            @if (address.IsPrimary)
                                            {
                                                <span class="badge bg-primary">主要</span>
                                            }
                                            else
                                            {
                                                <button class="btn btn-outline-primary btn-sm" @onclick="() => SetPrimaryAddress(index)" title="設為主要">
                                                    <i class="bi bi-star"></i>
                                                </button>
                                            }
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveAddress(index)" title="移除">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body p-3">
                                        <div class="row g-2">
                                            <div class="col-12">
                                                <label class="form-label small">地址類型</label>
                                                <select class="form-select form-select-sm" 
                                                        @onchange="@(e => UpdateAddressType(index, e.Value?.ToString()))"
                                                        value="@address.AddressTypeId">
                                                    <option value="">請選擇地址類型</option>
                                                    @foreach (var type in addressTypes)
                                                    {
                                                        <option value="@type.Id">@type.TypeName</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-6">
                                                <label class="form-label small">郵遞區號</label>
                                                <input type="text" class="form-control form-control-sm" 
                                                       placeholder="郵遞區號"
                                                       @bind="address.PostalCode"
                                                       @bind:event="oninput" />
                                            </div>
                                            <div class="col-6">
                                                <label class="form-label small">城市</label>
                                                <input type="text" class="form-control form-control-sm" 
                                                       placeholder="城市"
                                                       @bind="address.City"
                                                       @bind:event="oninput" />
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label small">行政區</label>
                                                <input type="text" class="form-control form-control-sm" 
                                                       placeholder="行政區"
                                                       @bind="address.District"
                                                       @bind:event="oninput" />
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label small">詳細地址</label>
                                                <textarea class="form-control form-control-sm" 
                                                          rows="2" 
                                                          placeholder="詳細地址"
                                                          @bind="address.Address"
                                                          @bind:event="oninput"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-4 text-muted">
                        <i class="bi bi-geo-alt-slash fs-1 mb-3 d-block"></i>
                        <p>尚未建立地址資料</p>
                        <button class="btn btn-outline-primary" @onclick="AddAddress">
                            <i class="bi bi-plus me-1"></i>
                            新增第一個地址
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }

    private Employee employee = new();
    private List<Role> roles = new();
    
    // 聯絡方式與地址資料
    private List<EmployeeContact> employeeContacts = new();
    private List<EmployeeAddress> employeeAddresses = new();
    
    // 選項清單
    private List<ContactType> contactTypes = new();
    private List<AddressType> addressTypes = new();
    
    // 用於處理Email輸入的臨時屬性（Email現在透過EmployeeContact管理）
    private string emailValue = string.Empty;
    
    private bool isLoading = true;
    private bool isSubmitting = false;
    
    // 新增員工時的密碼欄位
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string passwordValidationMessage = string.Empty;
    private string confirmPasswordValidationMessage = string.Empty;
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    private bool IsCreateMode => !Id.HasValue || Id.Value == 0;

    protected override async Task OnInitializedAsync()
    {
        await InitializePageAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await InitializePageAsync();
    }    private async Task InitializePageAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // 初始化麵包屑
            InitializeBreadcrumbs();
            
            // 載入角色清單
            await LoadRolesAsync();
            
            // 載入選項清單
            await LoadOptionListsAsync();
            
            // 載入員工資料（編輯模式）
            if (!IsCreateMode)
            {
                await LoadEmployeeAsync();
            }
            else
            {
                // 新增模式，初始化新員工
                employee = new Employee
                {
                    Status = EntityStatus.Active
                };
                employeeContacts = new List<EmployeeContact>();
                employeeAddresses = new List<EmployeeAddress>();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入頁面資料時發生錯誤：", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("員工管理", "/employees"),
            new(IsCreateMode ? "新增員工" : "編輯員工")
        };
    }

    private async Task LoadRolesAsync()
    {
        try
        {
            var result = await RoleService.GetAllAsync();
            if (result != null)
            {
                roles = result;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入角色清單失敗：", ex.Message);
        }
    }

    private async Task LoadOptionListsAsync()
    {
        try
        {
            // 載入聯絡類型清單
            var contactTypesResult = await ContactTypeService.GetAllAsync();
            if (contactTypesResult != null)
            {
                contactTypes = contactTypesResult;
            }

            // 載入地址類型清單
            var addressTypesResult = await AddressTypeService.GetAllAsync();
            if (addressTypesResult != null)
            {
                addressTypes = addressTypesResult;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入選項清單失敗：", ex.Message);
        }
    }    private async Task LoadEmployeeAsync()
    {
        if (!Id.HasValue) return;

        try
        {            var result = await EmployeeService.GetByIdAsync(Id.Value);
            if (result != null)
            {
                employee = result;
                
                // 設置Email值（從EmployeeContact中取得）
                var emailContact = employee.EmployeeContacts?
                    .FirstOrDefault(ec => ec.ContactType?.TypeName == "Email");
                emailValue = emailContact?.ContactValue ?? "";
                
                // 載入聯絡方式資料
                var contactsResult = await EmployeeContactService.GetByEmployeeIdAsync(Id.Value);
                employeeContacts = contactsResult.IsSuccess && contactsResult.Data != null 
                    ? contactsResult.Data 
                    : new List<EmployeeContact>();
                
                // 載入地址資料
                employeeAddresses = await EmployeeAddressService.GetByEmployeeIdAsync(Id.Value);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "找不到指定的員工資料");
                Navigation.NavigateTo("/employees");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入員工資料失敗：", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", "載入員工資料失敗");
        }
    }    private async Task SaveEmployee()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;
            StateHasChanged();

            // 驗證表單
            if (!ValidateForm())
            {
                return;
            }

            if (IsCreateMode)
            {
                // 新增員工
                var createResult = await EmployeeService.CreateAsync(employee);                if (createResult.IsSuccess && createResult.Data != null)
                {
                    // 如果有設定密碼，進行密碼重設
                    if (!string.IsNullOrWhiteSpace(password))
                    {
                        await AuthenticationService.ResetPasswordAsync(createResult.Data.Id, password);
                    }
                    
                    // 更新聯絡方式的員工ID
                    foreach (var contact in employeeContacts)
                    {
                        contact.EmployeeId = createResult.Data.Id;
                    }
                    
                    // 更新地址的員工ID
                    foreach (var address in employeeAddresses)
                    {
                        address.EmployeeId = createResult.Data.Id;
                    }
                    
                    // 儲存聯絡方式和地址
                    await EmployeeService.UpdateEmployeeContactsAsync(createResult.Data.Id, employeeContacts);
                    await EmployeeService.UpdateEmployeeAddressesAsync(createResult.Data.Id, employeeAddresses);
                    
                    await JSRuntime.InvokeVoidAsync("alert", "員工建立成功");
                    Navigation.NavigateTo($"/employees/detail/{createResult.Data.Id}");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"建立員工失敗：{createResult.ErrorMessage}");
                }
            }            else
            {
                // 更新員工
                var updateResult = await EmployeeService.UpdateAsync(employee);
                if (updateResult != null)
                {
                    // 更新聯絡方式
                    await EmployeeService.UpdateEmployeeContactsAsync(employee.Id, employeeContacts);
                    
                    // 更新地址資料
                    await EmployeeService.UpdateEmployeeAddressesAsync(employee.Id, employeeAddresses);
                    
                    await JSRuntime.InvokeVoidAsync("alert", "員工資料更新成功");
                    Navigation.NavigateTo($"/employees/detail/{employee.Id}");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "更新員工資料失敗");
                }
            }        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "儲存員工資料時發生錯誤：", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", "儲存失敗");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private bool ValidateForm()
    {
        passwordValidationMessage = string.Empty;
        confirmPasswordValidationMessage = string.Empty;

        if (IsCreateMode)
        {
            // 新增模式需要驗證密碼
            if (string.IsNullOrWhiteSpace(password))
            {
                passwordValidationMessage = "請輸入密碼";
                return false;
            }

            if (password.Length < 8)
            {
                passwordValidationMessage = "密碼長度至少需要 8 個字元";
                return false;
            }

            if (string.IsNullOrWhiteSpace(confirmPassword))
            {
                confirmPasswordValidationMessage = "請確認密碼";
                return false;
            }

            if (password != confirmPassword)
            {
                confirmPasswordValidationMessage = "密碼確認不一致";
                return false;
            }            // 密碼會在儲存時透過 AuthenticationService 處理
            // 這裡不需要直接設定 PasswordHash
        }

        return true;
    }    private async Task ResetFailedAttempts()
    {
        try
        {
            employee.FailedLoginAttempts = 0;
            await JSRuntime.InvokeVoidAsync("alert", "登入失敗次數已重設");
        }        catch (Exception)
        {
            await JSRuntime.InvokeVoidAsync("alert", "重設失敗");
        }
    }

    private async Task ShowPasswordResetDialog()
    {
        try
        {
            var newPassword = $"Temp{DateTime.Now:yyyyMMdd}!";
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"確定要重設 {employee.Username} 的密碼嗎？\n新密碼將設為：{newPassword}");              if (confirmed)
            {
                // 使用 AuthenticationService 重設密碼
                var resetResult = await AuthenticationService.ResetPasswordAsync(employee.Id, newPassword);
                if (resetResult.IsSuccess)
                {
                    employee.FailedLoginAttempts = 0;
                    employee.IsLocked = false;
                    await JSRuntime.InvokeVoidAsync("alert", $"密碼已重設為：{newPassword}");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"重設密碼失敗：{resetResult.ErrorMessage}");
                }
            }
        }        catch (Exception)
        {
            await JSRuntime.InvokeVoidAsync("alert", "重設密碼失敗");
        }
    }

    private void Cancel()
    {
        if (IsCreateMode)
        {
            Navigation.NavigateTo("/employees");
        }
        else
        {
            Navigation.NavigateTo($"/employees/detail/{employee.Id}");
        }
    }

    private string GetPageTitle()
    {
        return IsCreateMode ? "新增員工" : $"編輯員工 - {employee.Username}";
    }

    private string GetSubtitle()
    {
        return IsCreateMode ? "建立新的員工帳號" : $"修改員工資料（員工代碼：{employee.EmployeeCode}）";
    }

    private string GetTitleIcon()
    {
        return IsCreateMode ? "person-plus" : "person-gear";
    }

    #region 聯絡方式管理

    private void AddContact()
    {
        var newContact = new EmployeeContact
        {
            EmployeeId = employee.Id,
            ContactTypeId = null,
            ContactValue = "",
            IsPrimary = employeeContacts.Count == 0, // 第一個自動設為主要
            Status = EntityStatus.Active
        };
        
        employeeContacts.Add(newContact);
        StateHasChanged();
    }

    private void RemoveContact(int index)
    {
        if (index >= 0 && index < employeeContacts.Count)
        {
            var removedContact = employeeContacts[index];
            employeeContacts.RemoveAt(index);
            
            // 如果移除的是主要聯絡方式且還有其他聯絡方式，設定第一個為主要
            if (removedContact.IsPrimary && employeeContacts.Any())
            {
                employeeContacts[0].IsPrimary = true;
            }
            
            StateHasChanged();
        }
    }

    private void SetPrimaryContact(int index)
    {
        if (index >= 0 && index < employeeContacts.Count)
        {
            // 清除所有主要標記
            foreach (var contact in employeeContacts)
            {
                contact.IsPrimary = false;
            }
            
            // 設定指定的為主要
            employeeContacts[index].IsPrimary = true;
            StateHasChanged();
        }
    }

    private void UpdateContactType(int index, string? contactTypeIdStr)
    {
        if (index >= 0 && index < employeeContacts.Count)
        {
            if (int.TryParse(contactTypeIdStr, out var contactTypeId))
            {
                employeeContacts[index].ContactTypeId = contactTypeId;
            }
            else
            {
                employeeContacts[index].ContactTypeId = null;
            }
            StateHasChanged();
        }
    }

    #endregion

    #region 地址管理

    private void AddAddress()
    {
        var newAddress = new EmployeeAddress
        {
            EmployeeId = employee.Id,
            AddressTypeId = null,
            PostalCode = "",
            City = "",
            District = "",
            Address = "",
            IsPrimary = employeeAddresses.Count == 0, // 第一個自動設為主要
            Status = EntityStatus.Active
        };
        
        employeeAddresses.Add(newAddress);
        StateHasChanged();
    }

    private void RemoveAddress(int index)
    {
        if (index >= 0 && index < employeeAddresses.Count)
        {
            var removedAddress = employeeAddresses[index];
            employeeAddresses.RemoveAt(index);
            
            // 如果移除的是主要地址且還有其他地址，設定第一個為主要
            if (removedAddress.IsPrimary && employeeAddresses.Any())
            {
                employeeAddresses[0].IsPrimary = true;
            }
            
            StateHasChanged();
        }
    }

    private void SetPrimaryAddress(int index)
    {
        if (index >= 0 && index < employeeAddresses.Count)
        {
            // 清除所有主要標記
            foreach (var address in employeeAddresses)
            {
                address.IsPrimary = false;
            }
            
            // 設定指定的為主要
            employeeAddresses[index].IsPrimary = true;
            StateHasChanged();
        }
    }

    private void UpdateAddressType(int index, string? addressTypeIdStr)
    {
        if (index >= 0 && index < employeeAddresses.Count)
        {
            if (int.TryParse(addressTypeIdStr, out var addressTypeId))
            {
                employeeAddresses[index].AddressTypeId = addressTypeId;
            }
            else
            {
                employeeAddresses[index].AddressTypeId = null;
            }
            StateHasChanged();
        }
    }

    #endregion
}
