@page "/employees/edit"
@page "/employees/edit/{id:int?}"
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Forms
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IEmployeeService EmployeeService
@inject IEmployeeContactService EmployeeContactService
@inject IEmployeeAddressService EmployeeAddressService
@inject IRoleService RoleService
@inject IContactTypeService ContactTypeService
@inject IAddressTypeService AddressTypeService
@inject IAuthenticationService AuthenticationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode())
@implements IDisposable

<GenericEditPageComponent TEntity="Employee"
                         TService="IEmployeeService"
                         Id="@Id"
                         Service="@EmployeeService"
                         EntityName="員工"
                         EntityNamePlural="員工"
                         CreateTitle="新增員工"
                         EditTitle="編輯員工"
                         CreateSubtitle="建立新的員工帳號"
                         EditSubtitle="修改員工資料"
                         CreateIcon="person-plus"
                         EditIcon="person-gear"
                         IndexRoute="/employees"
                         BreadcrumbItems="@GetBreadcrumbItems()"
                         FormFields="@GetFormFields()"
                         FormSections="@GetFormSections()"
                         AdditionalSections="@CreateAdditionalSections()"
                         DataLoader="@LoadEmployeeDataAsync"
                         SaveHandler="@SaveEmployeeAsync"
                         CustomValidation="@ValidateEmployeeAsync">
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }

    // 資料清單
    private List<Role> roles = new();
    private List<ContactType> contactTypes = new();
    private List<AddressType> addressTypes = new();
    
    // 主從資料
    private List<EmployeeContact> employeeContacts = new();
    private List<EmployeeAddress> employeeAddresses = new();
    
    // 特殊欄位
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string passwordValidationMessage = string.Empty;
    private string confirmPasswordValidationMessage = string.Empty;

    // 併發控制
    private readonly SemaphoreSlim _semaphore = new(1, 1);
    private bool _disposed = false;

    // 當前實體
    private Employee? currentEmployee = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        if (_disposed) return;

        await _semaphore.WaitAsync();
        try
        {
            // 載入角色清單
            var rolesResult = await RoleService.GetAllAsync();
            if (rolesResult != null)
            {
                roles = rolesResult;
            }

            // 載入聯絡類型清單
            var contactTypesResult = await ContactTypeService.GetAllAsync();
            if (contactTypesResult != null)
            {
                contactTypes = contactTypesResult;
            }

            // 載入地址類型清單
            var addressTypesResult = await AddressTypeService.GetAllAsync();
            if (addressTypesResult != null)
            {
                addressTypes = addressTypesResult;
            }

            // 如果是編輯模式，載入主從資料
            if (Id.HasValue && Id.Value > 0)
            {
                await LoadMasterDetailDataAsync();
            }
            else
            {
                // 新增模式，初始化空資料
                employeeContacts = new List<EmployeeContact>();
                employeeAddresses = new List<EmployeeAddress>();
            }
        }
        finally
        {
            _semaphore.Release();
        }
    }

    private async Task LoadMasterDetailDataAsync()
    {
        if (!Id.HasValue || Id.Value <= 0) return;

        try
        {
            // 載入聯絡方式資料
            var contactsResult = await EmployeeContactService.GetByEmployeeIdAsync(Id.Value);
            employeeContacts = contactsResult.IsSuccess && contactsResult.Data != null 
                ? contactsResult.Data 
                : new List<EmployeeContact>();
            
            // 載入地址資料
            employeeAddresses = await EmployeeAddressService.GetByEmployeeIdAsync(Id.Value);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入主從資料失敗：", ex.Message);
        }
    }    private List<FormFieldDefinition> GetFormFields()
    {
        var fields = new List<FormFieldDefinition>
        {
            new() { 
                PropertyName = nameof(Employee.EmployeeCode), 
                Label = "員工代碼", 
                FieldType = FormFieldType.Text, 
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                PropertyName = nameof(Employee.Username), 
                Label = "帳號", 
                FieldType = FormFieldType.Text, 
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                PropertyName = nameof(Employee.LastName), 
                Label = "姓氏", 
                FieldType = FormFieldType.Text, 
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                PropertyName = nameof(Employee.FirstName), 
                Label = "名字", 
                FieldType = FormFieldType.Text, 
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                PropertyName = nameof(Employee.Department), 
                Label = "部門", 
                FieldType = FormFieldType.Text,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                PropertyName = nameof(Employee.Position), 
                Label = "職位", 
                FieldType = FormFieldType.Text,
                ContainerCssClass = "col-md-6"
            }
        };

        // 添加角色選擇欄位
        if (roles.Any())
        {
            var roleField = new FormFieldDefinition
            {
                PropertyName = nameof(Employee.RoleId),
                Label = "角色",
                FieldType = FormFieldType.Select,
                IsRequired = true,
                ContainerCssClass = "col-md-6",
                Options = roles.Select(r => new SelectOption { Value = r.Id.ToString(), Text = r.RoleName }).ToList()
            };
            fields.Insert(4, roleField);
        }

        return fields;
    }

    private Dictionary<string, string> GetFormSections()
    {
        return new Dictionary<string, string>
        {
            { "基本資料", "person" }
        };
    }

    private RenderFragment CreateAdditionalSections() => @<text>
        @CreatePasswordSection()
        @CreateAccountSettingsSection()
        @CreateContactsSection()
        @CreateAddressesSection()
    </text>;

    private RenderFragment CreatePasswordSection() => @<text>
        @if (IsCreateMode)
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-key me-2"></i>
                        密碼設定
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="password" class="form-label">密碼 <span class="text-danger">*</span></label>
                                <input type="password" @bind="password" class="form-control" id="password" />
                                <div class="form-text">密碼長度至少 8 個字元，需包含大小寫字母和數字</div>
                                @if (!string.IsNullOrEmpty(passwordValidationMessage))
                                {
                                    <div class="text-danger small">@passwordValidationMessage</div>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">確認密碼 <span class="text-danger">*</span></label>
                                <input type="password" @bind="confirmPassword" class="form-control" id="confirmPassword" />
                                @if (!string.IsNullOrEmpty(confirmPasswordValidationMessage))
                                {
                                    <div class="text-danger small">@confirmPasswordValidationMessage</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </text>;

    private RenderFragment CreateAccountSettingsSection() => @<text>
        @if (!IsCreateMode && currentEmployee != null)
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-gear me-2"></i>
                        帳號設定
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">帳號狀態</label>
                                <div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="status" id="statusActive" 
                                               checked="@(currentEmployee.Status == EntityStatus.Active)" 
                                               @onchange="@(() => currentEmployee.Status = EntityStatus.Active)">
                                        <label class="form-check-label" for="statusActive">啟用</label>
                                    </div>
                                    <div class="form-check form-check-inline">
                                        <input class="form-check-input" type="radio" name="status" id="statusInactive" 
                                               checked="@(currentEmployee.Status == EntityStatus.Inactive)" 
                                               @onchange="@(() => currentEmployee.Status = EntityStatus.Inactive)">
                                        <label class="form-check-label" for="statusInactive">停用</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="isLocked" 
                                           checked="@currentEmployee.IsLocked" 
                                           @onchange="@((ChangeEventArgs e) => currentEmployee.IsLocked = (bool)e.Value!)">
                                    <label class="form-check-label" for="isLocked">鎖定帳號</label>
                                </div>
                                <div class="form-text">勾選此項將阻止使用者登入</div>
                            </div>
                        </div>
                    </div>
                    
                    @if (currentEmployee.FailedLoginAttempts > 0)
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">失敗登入次數</label>
                                    <div class="fw-bold @(currentEmployee.FailedLoginAttempts >= 3 ? "text-danger" : "text-warning")">
                                        @currentEmployee.FailedLoginAttempts
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-secondary mt-1" @onclick="ResetFailedAttempts">
                                        重設登入失敗次數
                                    </button>
                                </div>
                            </div>
                        </div>
                    }

                    <div class="row">
                        <div class="col-12">
                            <button type="button" class="btn btn-warning" @onclick="ShowPasswordResetDialog">
                                <i class="bi bi-key me-1"></i>重設密碼
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </text>;

    private RenderFragment CreateContactsSection() => @<text>
        <div class="card mb-4">
            <GenericHeaderComponent Title="聯絡方式"
                                   Subtitle="@($"管理員工的聯絡資訊 ({employeeContacts.Count} 筆)")"
                                   TitleIcon="telephone"
                                   IsCardHeader="true">
                <ActionButtons>
                    <button class="btn btn-primary" @onclick="AddContact">
                        <i class="bi-plus me-1"></i>新增聯絡方式
                    </button>
                </ActionButtons>
            </GenericHeaderComponent>
            <div class="card-body">
                @if (employeeContacts.Any())
                {
                    <div class="row g-3">
                        @for (int i = 0; i < employeeContacts.Count; i++)
                        {
                            var index = i;
                            var contact = employeeContacts[index];
                            <div class="col-md-6">
                                <div class="card border-secondary">
                                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                        <small class="fw-bold text-muted">聯絡方式 #@(index + 1)</small>
                                        <div class="btn-group btn-group-sm">
                                            @if (contact.IsPrimary)
                                            {
                                                <span class="badge bg-primary">主要</span>
                                            }
                                            else
                                            {
                                                <button class="btn btn-outline-primary btn-sm" @onclick="() => SetPrimaryContact(index)" title="設為主要">
                                                    <i class="bi bi-star"></i>
                                                </button>
                                            }
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveContact(index)" title="移除">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body p-3">
                                        <div class="mb-2">
                                            <label class="form-label small">聯絡類型</label>
                                            <select class="form-select form-select-sm" 
                                                    @onchange="@(e => UpdateContactType(index, e.Value?.ToString()))"
                                                    value="@contact.ContactTypeId">
                                                <option value="">請選擇聯絡類型</option>
                                                @foreach (var type in contactTypes)
                                                {
                                                    <option value="@type.Id">@type.TypeName</option>
                                                }
                                            </select>
                                        </div>
                                        <div>
                                            <label class="form-label small">聯絡內容</label>
                                            <input type="text" class="form-control form-control-sm" 
                                                   placeholder="請輸入聯絡內容"
                                                   @bind="contact.ContactValue"
                                                   @bind:event="oninput" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-4 text-muted">
                        <i class="bi bi-telephone-x fs-1 mb-3 d-block"></i>
                        <p>尚未建立聯絡方式</p>
                        <button class="btn btn-outline-primary" @onclick="AddContact">
                            <i class="bi bi-plus me-1"></i>新增第一個聯絡方式
                        </button>
                    </div>
                }
            </div>
        </div>
    </text>;

    private RenderFragment CreateAddressesSection() => @<text>
        <div class="card mb-4">
            <GenericHeaderComponent Title="地址資訊"
                                   Subtitle="@($"管理員工的地址資料 ({employeeAddresses.Count} 筆)")"
                                   TitleIcon="geo-alt"
                                   IsCardHeader="true">
                <ActionButtons>
                    <button class="btn btn-primary" @onclick="AddAddress">
                        <i class="bi-plus me-1"></i>新增地址
                    </button>
                </ActionButtons>
            </GenericHeaderComponent>
            <div class="card-body">
                @if (employeeAddresses.Any())
                {
                    <div class="row g-3">
                        @for (int i = 0; i < employeeAddresses.Count; i++)
                        {
                            var index = i;
                            var address = employeeAddresses[index];
                            <div class="col-lg-6">
                                <div class="card border-secondary">
                                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                        <small class="fw-bold text-muted">地址 #@(index + 1)</small>
                                        <div class="btn-group btn-group-sm">
                                            @if (address.IsPrimary)
                                            {
                                                <span class="badge bg-primary">主要</span>
                                            }
                                            else
                                            {
                                                <button class="btn btn-outline-primary btn-sm" @onclick="() => SetPrimaryAddress(index)" title="設為主要">
                                                    <i class="bi bi-star"></i>
                                                </button>
                                            }
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveAddress(index)" title="移除">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body p-3">
                                        <div class="row g-2">
                                            <div class="col-12">
                                                <label class="form-label small">地址類型</label>
                                                <select class="form-select form-select-sm" 
                                                        @onchange="@(e => UpdateAddressType(index, e.Value?.ToString()))"
                                                        value="@address.AddressTypeId">
                                                    <option value="">請選擇地址類型</option>
                                                    @foreach (var type in addressTypes)
                                                    {
                                                        <option value="@type.Id">@type.TypeName</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-6">
                                                <label class="form-label small">郵遞區號</label>
                                                <input type="text" class="form-control form-control-sm" 
                                                       placeholder="郵遞區號"
                                                       @bind="address.PostalCode"
                                                       @bind:event="oninput" />
                                            </div>
                                            <div class="col-6">
                                                <label class="form-label small">城市</label>
                                                <input type="text" class="form-control form-control-sm" 
                                                       placeholder="城市"
                                                       @bind="address.City"
                                                       @bind:event="oninput" />
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label small">行政區</label>
                                                <input type="text" class="form-control form-control-sm" 
                                                       placeholder="行政區"
                                                       @bind="address.District"
                                                       @bind:event="oninput" />
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label small">詳細地址</label>
                                                <textarea class="form-control form-control-sm" 
                                                          rows="2" 
                                                          placeholder="詳細地址"
                                                          @bind="address.Address"
                                                          @bind:event="oninput"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-4 text-muted">
                        <i class="bi bi-geo-alt-slash fs-1 mb-3 d-block"></i>
                        <p>尚未建立地址資料</p>
                        <button class="btn btn-outline-primary" @onclick="AddAddress">
                            <i class="bi bi-plus me-1"></i>新增第一個地址
                        </button>
                    </div>
                }
            </div>
        </div>
    </text>;

    private List<GenericHeaderComponent.BreadcrumbItem> GetBreadcrumbItems()
    {
        return new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("員工管理", "/employees"),
            new(IsCreateMode ? "新增員工" : "編輯員工")
        };
    }

    private bool IsCreateMode => !Id.HasValue || Id.Value == 0;

    // GenericEditPageComponent 需要的方法
    private async Task<Employee?> LoadEmployeeDataAsync()
    {
        if (!Id.HasValue || Id.Value <= 0)
        {
            currentEmployee = new Employee { Status = EntityStatus.Active };
            return currentEmployee;
        }

        try
        {
            var result = await EmployeeService.GetByIdAsync(Id.Value);
            currentEmployee = result;
            return result;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入員工資料失敗：", ex.Message);
            return null;
        }
    }

    private async Task<bool> SaveEmployeeAsync(Employee entity)
    {
        try
        {
            currentEmployee = entity;

            if (IsCreateMode)
            {
                var createResult = await EmployeeService.CreateAsync(entity);
                if (createResult.IsSuccess && createResult.Data != null)
                {
                    // 設定密碼
                    if (!string.IsNullOrWhiteSpace(password))
                    {
                        await AuthenticationService.ResetPasswordAsync(createResult.Data.Id, password);
                    }
                    
                    // 更新聯絡方式和地址的員工ID
                    foreach (var contact in employeeContacts)
                    {
                        contact.EmployeeId = createResult.Data.Id;
                    }
                    
                    foreach (var address in employeeAddresses)
                    {
                        address.EmployeeId = createResult.Data.Id;
                    }
                    
                    // 儲存聯絡方式和地址
                    await EmployeeService.UpdateEmployeeContactsAsync(createResult.Data.Id, employeeContacts);
                    await EmployeeService.UpdateEmployeeAddressesAsync(createResult.Data.Id, employeeAddresses);
                    
                    // 導航到詳細頁面
                    Navigation.NavigateTo($"/employees/detail/{createResult.Data.Id}");
                    return true;
                }
                return false;
            }
            else
            {
                var updateResult = await EmployeeService.UpdateAsync(entity);
                if (updateResult != null)
                {
                    await EmployeeService.UpdateEmployeeContactsAsync(entity.Id, employeeContacts);
                    await EmployeeService.UpdateEmployeeAddressesAsync(entity.Id, employeeAddresses);
                    
                    Navigation.NavigateTo($"/employees/detail/{entity.Id}");
                    return true;
                }
                return false;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "儲存員工資料失敗：", ex.Message);
            return false;
        }
    }

    private async Task<bool> ValidateEmployeeAsync(Employee entity)
    {
        passwordValidationMessage = string.Empty;
        confirmPasswordValidationMessage = string.Empty;

        if (IsCreateMode)
        {
            if (string.IsNullOrWhiteSpace(password))
            {
                passwordValidationMessage = "請輸入密碼";
                return false;
            }

            if (password.Length < 8)
            {
                passwordValidationMessage = "密碼長度至少需要 8 個字元";
                return false;
            }

            if (string.IsNullOrWhiteSpace(confirmPassword))
            {
                confirmPasswordValidationMessage = "請確認密碼";
                return false;
            }

            if (password != confirmPassword)
            {
                confirmPasswordValidationMessage = "密碼確認不一致";
                return false;
            }
        }

        return true;
    }

    // 聯絡方式管理
    private void AddContact()
    {
        var newContact = new EmployeeContact
        {
            EmployeeId = Id ?? 0,
            ContactTypeId = null,
            ContactValue = "",
            IsPrimary = employeeContacts.Count == 0,
            Status = EntityStatus.Active
        };
        
        employeeContacts.Add(newContact);
        StateHasChanged();
    }

    private void RemoveContact(int index)
    {
        if (index >= 0 && index < employeeContacts.Count)
        {
            var removedContact = employeeContacts[index];
            employeeContacts.RemoveAt(index);
            
            if (removedContact.IsPrimary && employeeContacts.Any())
            {
                employeeContacts[0].IsPrimary = true;
            }
            
            StateHasChanged();
        }
    }

    private void SetPrimaryContact(int index)
    {
        if (index >= 0 && index < employeeContacts.Count)
        {
            foreach (var contact in employeeContacts)
            {
                contact.IsPrimary = false;
            }
            
            employeeContacts[index].IsPrimary = true;
            StateHasChanged();
        }
    }

    private void UpdateContactType(int index, string? contactTypeIdStr)
    {
        if (index >= 0 && index < employeeContacts.Count)
        {
            if (int.TryParse(contactTypeIdStr, out var contactTypeId))
            {
                employeeContacts[index].ContactTypeId = contactTypeId;
            }
            else
            {
                employeeContacts[index].ContactTypeId = null;
            }
            StateHasChanged();
        }
    }

    // 地址管理
    private void AddAddress()
    {
        var newAddress = new EmployeeAddress
        {
            EmployeeId = Id ?? 0,
            AddressTypeId = null,
            PostalCode = "",
            City = "",
            District = "",
            Address = "",
            IsPrimary = employeeAddresses.Count == 0,
            Status = EntityStatus.Active
        };
        
        employeeAddresses.Add(newAddress);
        StateHasChanged();
    }

    private void RemoveAddress(int index)
    {
        if (index >= 0 && index < employeeAddresses.Count)
        {
            var removedAddress = employeeAddresses[index];
            employeeAddresses.RemoveAt(index);
            
            if (removedAddress.IsPrimary && employeeAddresses.Any())
            {
                employeeAddresses[0].IsPrimary = true;
            }
            
            StateHasChanged();
        }
    }

    private void SetPrimaryAddress(int index)
    {
        if (index >= 0 && index < employeeAddresses.Count)
        {
            foreach (var address in employeeAddresses)
            {
                address.IsPrimary = false;
            }
            
            employeeAddresses[index].IsPrimary = true;
            StateHasChanged();
        }
    }

    private void UpdateAddressType(int index, string? addressTypeIdStr)
    {
        if (index >= 0 && index < employeeAddresses.Count)
        {
            if (int.TryParse(addressTypeIdStr, out var addressTypeId))
            {
                employeeAddresses[index].AddressTypeId = addressTypeId;
            }
            else
            {
                employeeAddresses[index].AddressTypeId = null;
            }
            StateHasChanged();
        }
    }

    // 帳號管理
    private async Task ResetFailedAttempts()
    {
        try
        {
            if (currentEmployee != null)
            {
                currentEmployee.FailedLoginAttempts = 0;
                await JSRuntime.InvokeVoidAsync("alert", "登入失敗次數已重設");
            }
        }
        catch (Exception)
        {
            await JSRuntime.InvokeVoidAsync("alert", "重設失敗");
        }
    }

    private async Task ShowPasswordResetDialog()
    {
        try
        {
            if (currentEmployee == null) return;

            var newPassword = $"Temp{DateTime.Now:yyyyMMdd}!";
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"確定要重設 {currentEmployee.Username} 的密碼嗎？\n新密碼將設為：{newPassword}");

            if (confirmed)
            {
                var resetResult = await AuthenticationService.ResetPasswordAsync(currentEmployee.Id, newPassword);
                if (resetResult.IsSuccess)
                {
                    currentEmployee.FailedLoginAttempts = 0;
                    currentEmployee.IsLocked = false;
                    await JSRuntime.InvokeVoidAsync("alert", $"密碼已重設為：{newPassword}");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"重設密碼失敗：{resetResult.ErrorMessage}");
                }
            }
        }
        catch (Exception)
        {
            await JSRuntime.InvokeVoidAsync("alert", "重設密碼失敗");
        }
    }

    public void Dispose()
    {
        _disposed = true;
        _semaphore?.Dispose();
    }
}
