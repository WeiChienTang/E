@page "/error-logs"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IErrorLogService ErrorLogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>錯誤記錄管理</PageTitle>
<PagePermissionCheck RequiredPermission="SystemControl.ViewErrorLog">
@* 警告訊息區域 *@
<AlertComponent 
    Message="@alertMessage" 
    Type="@alertType" 
    IsVisible="@showAlert" 
    IsDismissible="true"
    OnDismiss="@(() => showAlert = false)" />

@* 頁面標題 *@
<GenericHeaderComponent Title="錯誤記錄管理"
                       Subtitle="檢視與管理系統錯誤記錄"
                       HeadingLevel="h1"
                       BreadcrumbItems="@breadcrumbItems"
                       ShowDivider="true" />

@if (IsLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
        <LoadingComponent IsLoading="true" 
                        LoadingText="載入錯誤記錄中..." 
                        ShowText="true" 
                        Size="LoadingComponent.LoadingSize.Large" />
    </div>
}
else
{

    @* 篩選區域 *@
    <GenericSearchFilterComponent TModel="SearchFilterModel"
                                FilterDefinitions="@filterDefinitions"
                                FilterModel="@filterModel"
                                OnSearch="@HandleSearch"
                                OnFilterChanged="@HandleFilterChanged"
                                AutoSearch="true"
                                ShowSearchButton="false"
                                SearchDelayMs="500" />

    @* 錯誤記錄表格 *@
    <div class="error-table">
        <div class="table-actions">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <small class="text-muted">共 @filteredErrorLogs.Count 筆記錄</small>
                </div>
                <div class="btn-group">
                    <GenericButtonComponent Variant="ButtonVariant.Primary" 
                                           Text="全選" 
                                           OnClick="@SelectAllCurrentPage"
                                           IsDisabled="@(!GetPagedErrorLogs().Any())"
                                           Size="ButtonSize.Small" />
                    <GenericButtonComponent Variant="ButtonVariant.Success" 
                                           Text="完成" 
                                           OnClick="@MarkSelectedAsResolved"
                                           IsDisabled="@(!selectedErrorIds.Any())"
                                           Size="ButtonSize.Small" />
                    <GenericButtonComponent Variant="ButtonVariant.Danger" 
                                           Text="移除" 
                                           OnClick="@RemoveSelectedErrors"
                                           IsDisabled="@(!selectedErrorIds.Any())"
                                           Size="ButtonSize.Small" />
                </div>
            </div>
        </div>
        
        <div class="table-responsive">
            <GenericTableComponent TItem="ErrorLog"
                                 Items="@GetPagedErrorLogs()"
                                 ColumnDefinitions="@GetColumnDefinitionsWithCheckbox()"
                                 ShowActions="false"
                                 IsStriped="false"
                                 IsHoverable="true"
                                 IsBordered="false"
                                 EnableRowClick="true"
                                 OnRowClick="@HandleRowClick"
                                 EmptyMessage="沒有找到錯誤記錄"
                                 GetRowCssClass="@GetRowCssClass"
                                 EnablePagination="true"
                                 CurrentPage="@currentPage"
                                 PageSize="@pageSize"
                                 TotalItems="@filteredErrorLogs.Count"
                                 OnPageChanged="@HandlePageChanged"
                                 OnPageSizeChanged="@HandlePageSizeChanged"
                                 ShowPageSizeSelector="true" />
        </div>
    </div>
}
</PagePermissionCheck>
@code {
    // 資料
    private List<ErrorLog> allErrorLogs = new();
    private List<ErrorLog> filteredErrorLogs = new();
    
    // 狀態
    private bool IsLoading = true;
    private bool showAlert = false;
    private string alertMessage = string.Empty;
    private AlertComponent.AlertType alertType = AlertComponent.AlertType.Info;
    
    // 新的篩選系統
    private List<SearchFilterDefinition> filterDefinitions = new();
    private SearchFilterModel filterModel = new();
    
    // 分頁
    private int currentPage = 1;
    private int pageSize = 20;
    
    // 選擇
    private HashSet<int> selectedErrorIds = new();

    // 表格欄位定義
    private List<TableColumnDefinition> columnDefinitions = new();

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("系統管理", "#"),
        new("錯誤記錄管理")
    };

    protected override async Task OnInitializedAsync()
    {
        InitializeFilters();
        InitializeTableColumns();
        await LoadDataAsync();
    }

    private void InitializeFilters()
    {
        try
        {
            // 錯誤等級選項
            var levelOptions = new List<SelectOption>
            {
                new() { Text = "資訊", Value = ErrorLevel.Info.ToString() },
                new() { Text = "警告", Value = ErrorLevel.Warning.ToString() },
                new() { Text = "錯誤", Value = ErrorLevel.Error.ToString() },
                new() { Text = "嚴重", Value = ErrorLevel.Critical.ToString() }
            };

            // 錯誤來源選項
            var sourceOptions = new List<SelectOption>
            {
                new() { Text = "資料庫", Value = ErrorSource.Database.ToString() },
                new() { Text = "業務邏輯", Value = ErrorSource.BusinessLogic.ToString() },
                new() { Text = "使用者介面", Value = ErrorSource.UserInterface.ToString() },
                new() { Text = "系統層級", Value = ErrorSource.System.ToString() },
                new() { Text = "API", Value = ErrorSource.API.ToString() },
                new() { Text = "安全相關", Value = ErrorSource.Security.ToString() }
            };

            // 處理狀態選項
            var resolvedOptions = new List<SelectOption>
            {
                new() { Text = "未處理", Value = "false" },
                new() { Text = "已處理", Value = "true" }
            };

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Message", "錯誤訊息", "輸入錯誤訊息關鍵字...")
                .AddSelect("Level", "錯誤等級", levelOptions)
                .AddSelect("Source", "錯誤來源", sourceOptions)
                .AddSelect("IsResolved", "處理狀態", resolvedOptions)
                .AddDateRange("OccurredDate", "發生時間")
                .Build();
        }
        catch (Exception ex)
        {
            ShowAlert($"初始化篩選器失敗：{ex.Message}", AlertComponent.AlertType.Danger);
        }
    }

    private async Task HandleSearch(SearchFilterModel searchModel)
    {
        await ApplyFilters(searchModel);
    }

    private Task HandleFilterChanged(SearchFilterModel searchModel)
    {
        // 更新本地篩選模型參考，確保與組件同步
        filterModel = searchModel;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task ApplyFilters(SearchFilterModel searchModel)
    {
        try
        {
            if (searchModel == null || !searchModel.HasAnyFilter())
            {
                // 如果沒有篩選條件，顯示所有數據
                filteredErrorLogs = allErrorLogs.OrderByDescending(e => e.OccurredAt).ToList();
            }
            else
            {
                filteredErrorLogs = allErrorLogs.AsQueryable().Where(e =>
                    ApplyErrorLogFilters(searchModel, e)
                ).OrderByDescending(e => e.OccurredAt).ToList();
            }
            
            currentPage = 1;
            selectedErrorIds.Clear();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowAlert($"套用篩選時發生錯誤：{ex.Message}", AlertComponent.AlertType.Danger);
        }

        await Task.CompletedTask;
    }

    private bool ApplyErrorLogFilters(SearchFilterModel searchModel, ErrorLog errorLog)
    {
        // 錯誤訊息篩選
        var messageFilter = searchModel.GetFilterValue("Message")?.ToString();
        if (!string.IsNullOrWhiteSpace(messageFilter) && 
            !errorLog.Message.Contains(messageFilter, StringComparison.OrdinalIgnoreCase))
        {
            return false;
        }

        // 錯誤等級篩選
        var levelFilter = searchModel.GetFilterValue("Level")?.ToString();
        if (!string.IsNullOrWhiteSpace(levelFilter) && 
            errorLog.Level.ToString() != levelFilter)
        {
            return false;
        }

        // 錯誤來源篩選
        var sourceFilter = searchModel.GetFilterValue("Source")?.ToString();
        if (!string.IsNullOrWhiteSpace(sourceFilter) && 
            errorLog.Source.ToString() != sourceFilter)
        {
            return false;
        }

        // 處理狀態篩選
        var resolvedFilter = searchModel.GetFilterValue("IsResolved")?.ToString();
        if (!string.IsNullOrWhiteSpace(resolvedFilter) && 
            bool.TryParse(resolvedFilter, out var isResolved) &&
            errorLog.IsResolved != isResolved)
        {
            return false;
        }

        // 日期範圍篩選
        var dateRange = searchModel.GetFilterValue("OccurredDate") as DateRange;
        if (dateRange != null && dateRange.IsValid())
        {
            var occurredDate = errorLog.OccurredAt.Date;
            if (!dateRange.Contains(occurredDate))
            {
                return false;
            }
        }

        return true;
    }

    private async Task LoadDataAsync()
    {
        try
        {
            IsLoading = true;
            
            // 載入錯誤記錄
            var result = await ErrorLogService.GetAllAsync();
            allErrorLogs = result?.ToList() ?? new List<ErrorLog>();
            
            // 應用篩選
            await ApplyFilters(filterModel);
        }
        catch (Exception ex)
        {
            ShowAlert($"載入資料時發生錯誤：{ex.Message}", AlertComponent.AlertType.Danger);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private List<ErrorLog> GetPagedErrorLogs()
    {
        return filteredErrorLogs
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private int GetTotalPages()
    {
        return (int)Math.Ceiling((double)filteredErrorLogs.Count / pageSize);
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= GetTotalPages())
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private async Task HandlePageChanged(int newPage)
    {
        currentPage = newPage;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandlePageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1; // 重置到第一頁
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleRowClick(ErrorLog errorLog)
    {
        // 導航到錯誤記錄詳情頁面
        Navigation.NavigateTo($"/error-logs/detail/{errorLog.Id}");
        await Task.CompletedTask;
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)e.Value!;
        if (isChecked)
        {
            // 獲取當前頁面的資料進行全選
            var currentPageItems = filteredErrorLogs
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .Where(el => !el.IsResolved)
                .Select(el => el.Id)
                .ToHashSet();
            
            foreach (var id in currentPageItems)
            {
                selectedErrorIds.Add(id);
            }
        }
        else
        {
            selectedErrorIds.Clear();
        }
        StateHasChanged();
    }

    private void SelectAllCurrentPage()
    {
        // 獲取當前頁面的所有錯誤記錄ID
        var currentPageItems = GetPagedErrorLogs()
            .Select(el => el.Id)
            .ToList();
        
        // 檢查是否當前頁面的所有項目都已選中
        var allSelected = currentPageItems.All(id => selectedErrorIds.Contains(id));
        
        if (allSelected)
        {
            // 如果全部已選中，則取消選中當前頁面的所有項目
            foreach (var id in currentPageItems)
            {
                selectedErrorIds.Remove(id);
            }
        }
        else
        {
            // 否則選中當前頁面的所有項目
            foreach (var id in currentPageItems)
            {
                selectedErrorIds.Add(id);
            }
        }
        
        StateHasChanged();
    }

    private void ToggleErrorSelection(int errorId, bool isSelected)
    {
        if (isSelected)
        {
            selectedErrorIds.Add(errorId);
        }
        else
        {
            selectedErrorIds.Remove(errorId);
        }
        StateHasChanged();
    }

    private async Task MarkSelectedAsResolved()
    {
        try
        {
            foreach (var errorId in selectedErrorIds)
            {
                var errorLog = allErrorLogs.FirstOrDefault(e => e.Id == errorId);
                if (errorLog != null && !errorLog.IsResolved)
                {
                    errorLog.IsResolved = true;
                    errorLog.ResolvedAt = DateTime.UtcNow;
                    errorLog.ResolvedBy = "系統管理員";
                    await ErrorLogService.UpdateAsync(errorLog);
                }
            }
            
            selectedErrorIds.Clear();
            await LoadDataAsync();
            ShowAlert($"已成功標記錯誤記錄為已處理", AlertComponent.AlertType.Success);
        }
        catch (Exception ex)
        {
            ShowAlert($"批次處理時發生錯誤：{ex.Message}", AlertComponent.AlertType.Danger);
        }
    }

    private async Task RemoveSelectedErrors()
    {
        try
        {
            if (!selectedErrorIds.Any())
            {
                ShowAlert("請選擇要移除的錯誤記錄", AlertComponent.AlertType.Warning);
                return;
            }

            foreach (var errorId in selectedErrorIds.ToList())
            {
                await ErrorLogService.DeleteAsync(errorId);
            }
            
            selectedErrorIds.Clear();
            await LoadDataAsync();
            ShowAlert($"已成功移除選定的錯誤記錄", AlertComponent.AlertType.Success);
        }
        catch (Exception ex)
        {
            ShowAlert($"移除錯誤記錄時發生錯誤：{ex.Message}", AlertComponent.AlertType.Danger);
        }
    }

    private async Task MarkSingleAsResolved(int errorId)
    {
        try
        {
            var errorLog = allErrorLogs.FirstOrDefault(e => e.Id == errorId);
            if (errorLog != null && !errorLog.IsResolved)
            {
                errorLog.IsResolved = true;
                errorLog.ResolvedAt = DateTime.UtcNow;
                errorLog.ResolvedBy = "系統管理員";
                await ErrorLogService.UpdateAsync(errorLog);
                
                await LoadDataAsync();
                ShowAlert("錯誤記錄已標記為已處理", AlertComponent.AlertType.Success);
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"處理錯誤記錄時發生錯誤：{ex.Message}", AlertComponent.AlertType.Danger);
        }
    }

    private void InitializeTableColumns()
    {
        // 建立狀態的徽章映射
        var statusBadgeMap = new Dictionary<object, string>
        {
            { true, "bg-success" },
            { false, "bg-danger" }
        };

        // 建立錯誤等級的徽章映射
        var levelBadgeMap = new Dictionary<object, string>
        {
            { ErrorLevel.Critical, "level-critical" },
            { ErrorLevel.Error, "level-error" },
            { ErrorLevel.Warning, "level-warning" },
            { ErrorLevel.Info, "level-info" }
        };

        columnDefinitions = new List<TableColumnDefinition>
        {
            // 錯誤訊息欄位
            TableColumnDefinition.Template("錯誤訊息", GetMessageTemplate()),
            
            // 錯誤等級欄位
            new TableColumnDefinition
            {
                Title = "等級",
                CustomTemplate = GetLevelTemplate(),
                CellCssClass = "text-center",
                HeaderStyle = "width: 100px;"
            },
            
            // 錯誤來源欄位
            new TableColumnDefinition
            {
                Title = "來源",
                CustomTemplate = GetSourceTemplate(),
                CellCssClass = "text-center",
                HeaderStyle = "width: 120px;"
            },
            
            // 發生時間欄位
            new TableColumnDefinition
            {
                Title = "發生時間",
                PropertyName = "OccurredAt",
                DataType = ColumnDataType.DateTime,
                Format = "MM-dd HH:mm",
                CellCssClass = "small text-center",
                HeaderStyle = "width: 160px;"
            },
            
            // 狀態欄位
            new TableColumnDefinition
            {
                Title = "狀態",
                CustomTemplate = GetStatusTemplate(),
                CellCssClass = "text-center",
                HeaderStyle = "width: 80px;"
            }
        };
    }

    private List<TableColumnDefinition> GetColumnDefinitionsWithCheckbox()
    {
        var columnsWithCheckbox = new List<TableColumnDefinition>
        {
            // 選擇框欄位
            new TableColumnDefinition
            {
                Title = "",
                CustomTemplate = GetCheckboxTemplate(),
                CellCssClass = "text-center",
                HeaderStyle = "width: 50px;"
            }
        };
        
        // 添加其他欄位
        columnsWithCheckbox.AddRange(columnDefinitions);
        
        return columnsWithCheckbox;
    }

    private RenderFragment<object> GetCheckboxTemplate() => (errorLog) =>
    {
        var error = (ErrorLog)errorLog;
        return @<input type="checkbox" class="form-check-input" 
                       checked="@selectedErrorIds.Contains(error.Id)"
                       @onclick:stopPropagation="true"
                       @onchange:stopPropagation="true"
                       @onchange="@((e) => ToggleErrorSelection(error.Id, (bool)e.Value!))" />;
    };

    private RenderFragment<object> GetMessageTemplate() => (errorLog) =>
    {
        var error = (ErrorLog)errorLog;
        return @<div class="error-message" title="@error.Message">
                    @error.Message
                </div>;
    };

    private RenderFragment<object> GetLevelTemplate() => (errorLog) =>
    {
        var error = (ErrorLog)errorLog;
        return @<span class="level-badge @GetErrorLevelBadgeClass(error.Level)">
                    @GetErrorLevelDisplay(error.Level)
                </span>;
    };

    private RenderFragment<object> GetSourceTemplate() => (errorLog) =>
    {
        var error = (ErrorLog)errorLog;
        return @<text>@GetErrorSourceDisplay(error.Source)</text>;
    };

    private RenderFragment<object> GetStatusTemplate() => (errorLog) =>
    {
        var error = (ErrorLog)errorLog;
        if (error.IsResolved)
        {
            return @<span class="badge bg-success">已處理</span>;
        }
        else
        {
            return @<span class="badge bg-danger">未處理</span>;
        }
    };

    private string GetRowCssClass(ErrorLog errorLog)
    {
        return selectedErrorIds.Contains(errorLog.Id) ? "table-active" : "";
    }

    // 輔助方法
    private string GetErrorLevelDisplay(ErrorLevel level) => level switch
    {
        ErrorLevel.Info => "資訊",
        ErrorLevel.Warning => "警告",
        ErrorLevel.Error => "錯誤",
        ErrorLevel.Critical => "嚴重",
        _ => level.ToString()
    };

    private string GetErrorSourceDisplay(ErrorSource source) => source switch
    {
        ErrorSource.Database => "資料庫",
        ErrorSource.BusinessLogic => "業務邏輯",
        ErrorSource.UserInterface => "介面",
        ErrorSource.System => "系統",
        ErrorSource.API => "API",
        ErrorSource.Security => "安全",
        _ => source.ToString()
    };

    private string GetErrorLevelBadgeClass(ErrorLevel level) => level switch
    {
        ErrorLevel.Critical => "level-critical",
        ErrorLevel.Error => "level-error",
        ErrorLevel.Warning => "level-warning",
        ErrorLevel.Info => "level-info",
        _ => "bg-secondary"
    };

    private string FormatCellValue(ErrorLog errorLog, TableColumnDefinition column)
    {
        var value = GetPropertyValue(errorLog, column.PropertyName);
        
        if (value == null)
            return column.NullDisplayText ?? "-";

        return column.DataType switch
        {
            ColumnDataType.Text => System.Web.HttpUtility.HtmlEncode(value.ToString() ?? ""),
            ColumnDataType.DateTime => FormatDateTime(value, column.Format),
            _ => System.Web.HttpUtility.HtmlEncode(value.ToString() ?? "")
        };
    }

    private object? GetPropertyValue(ErrorLog errorLog, string propertyName)
    {
        if (errorLog == null || string.IsNullOrEmpty(propertyName))
            return null;

        var property = typeof(ErrorLog).GetProperty(propertyName);
        return property?.GetValue(errorLog);
    }

    private string FormatDateTime(object value, string? format)
    {
        format = format ?? "MM-dd HH:mm";
        
        var dateString = value switch
        {
            DateTime dt => dt.ToString(format),
            DateTimeOffset dto => dto.ToString(format),
            _ => value.ToString()
        };
        
        return System.Web.HttpUtility.HtmlEncode(dateString ?? "");
    }

    private void ShowAlert(string message, AlertComponent.AlertType type)
    {
        alertMessage = message;
        alertType = type;
        showAlert = true;
        StateHasChanged();
    }
}
