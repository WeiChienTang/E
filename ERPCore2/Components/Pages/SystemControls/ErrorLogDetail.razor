@page "/error-logs/detail/{errorLogId:int}"

@attribute [Authorize]
@inject IErrorLogService ErrorLogService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>錯誤記錄詳細資料</PageTitle>
<PagePermissionCheck RequiredPermission="SystemControl.ViewErrorLog">
@* 警告訊息區域 *@
<AlertComponent 
    Message="@alertMessage" 
    Type="@alertType" 
    IsVisible="@showAlert" 
    IsDismissible="true"
    OnDismiss="@(() => showAlert = false)" />

<div class="error-detail-container">
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
            <LoadingComponent IsLoading="true" 
                            LoadingText="載入錯誤記錄中..." 
                            ShowText="true" 
                            Size="LoadingSize.Large" />
        </div>
    }
    else if (errorLog == null)
    {
        <div class="alert alert-warning">
            <h4>找不到錯誤記錄</h4>
            <p>指定的錯誤記錄不存在或已被刪除。</p>
            <GenericButtonComponent Variant="ButtonVariant.Primary" 
                                   Text="返回錯誤記錄列表" 
                                   OnClick="@(() => Navigation.NavigateTo("/error-logs"))" />
        </div>
    }
    else
    {
        @* 頁面標題 *@
        <GenericHeaderComponent Title="錯誤記錄詳細資料"
                               Subtitle="@($"錯誤ID: {errorLog.ErrorId}")"
                               HeadingLevel="h1"
                               BreadcrumbItems="@breadcrumbItems"
                               ShowDivider="true">
            <ActionButtons>
                <div class="d-flex gap-2">
                    @if (!errorLog.IsResolved)
                    {
                        <GenericButtonComponent Variant="ButtonVariant.Success"
                                               Text="標記為已處理"
                                               IconClass="fas fa-check"
                                               OnClick="@MarkAsResolved"
                                               IsLoading="@markingResolved" />
                    }
                    <GenericButtonComponent Variant="ButtonVariant.Secondary"
                                           Text="返回列表"
                                           IconClass="fas fa-arrow-left"
                                           OnClick="@(() => Navigation.NavigateTo("/error-logs"))" />
                </div>
            </ActionButtons>
        </GenericHeaderComponent>

        @* 錯誤概要 *@
        <div class="error-header">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h3 class="mb-2">
                        <i class="fas fa-exclamation-triangle @GetErrorLevelCssClass(errorLog.Level) me-2"></i>
                        @errorLog.Message
                    </h3>
                    <div class="mb-2">
                        <span class="level-badge @GetErrorLevelBadgeClass(errorLog.Level) me-2">
                            @GetErrorLevelDisplay(errorLog.Level)
                        </span>
                        <span class="badge bg-info">
                            <i class="fas fa-layer-group me-1"></i>@GetErrorSourceDisplay(errorLog.Source)
                        </span>
                    </div>
                    <small class="text-muted">
                        <i class="fas fa-clock me-1"></i>
                        發生時間：@errorLog.OccurredAt.ToString("yyyy-MM-dd HH:mm:ss")
                    </small>
                </div>
                <div class="col-md-4 text-end">
                    <span class="status-badge @(errorLog.IsResolved ? "resolved" : "unresolved")">
                        <i class="fas @(errorLog.IsResolved ? "fa-check-circle" : "fa-exclamation-circle") me-1"></i>
                        @(errorLog.IsResolved ? "已處理" : "未處理")
                    </span>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-8">
                @* 技術詳情 *@
                <div class="info-card">
                    <div class="info-card-header">
                        <i class="fas fa-code text-primary me-2"></i>技術詳情
                    </div>
                    <div class="info-card-body">
                        @if (!string.IsNullOrEmpty(errorLog.ExceptionType))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold">例外類型</label>
                                <div class="tech-details">@errorLog.ExceptionType</div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorLog.StackTrace))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold">堆疊追蹤</label>
                                <div class="stack-trace">@errorLog.StackTrace</div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorLog.InnerException))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold">內部例外</label>
                                <div class="tech-details">@errorLog.InnerException</div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorLog.AdditionalData))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold">額外資料</label>
                                <div class="tech-details">@errorLog.AdditionalData</div>
                            </div>
                        }
                    </div>
                </div>

                @* 處理狀態 *@
                @if (errorLog.IsResolved)
                {
                    <div class="info-card">
                        <div class="info-card-header">
                            <i class="fas fa-check-circle text-success me-2"></i>處理記錄
                        </div>
                        <div class="info-card-body">
                            <div class="resolution-section">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-2">
                                            <strong>處理者：</strong>@(errorLog.ResolvedBy ?? "未指定")
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-2">
                                            <strong>處理時間：</strong>@(errorLog.ResolvedAt?.ToString("yyyy-MM-dd HH:mm:ss") ?? "未指定")
                                        </div>
                                    </div>
                                </div>
                                @if (!string.IsNullOrEmpty(errorLog.Resolution))
                                {
                                    <div class="mt-3">
                                        <strong>解決方案：</strong>
                                        <p class="mt-2 mb-0">@errorLog.Resolution</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="col-lg-4">
                @* 環境資訊 *@
                <div class="info-card">
                    <div class="info-card-header">
                        <i class="fas fa-cogs text-secondary me-2"></i>環境資訊
                    </div>
                    <div class="info-card-body">
                        @if (!string.IsNullOrEmpty(errorLog.RequestPath))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold">請求路徑</label>
                                <div>@errorLog.RequestPath</div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorLog.Module))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold">所屬模組</label>
                                <div>@errorLog.Module</div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorLog.Category))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold">錯誤分類</label>
                                <div>@errorLog.Category</div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorLog.UserId))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold">使用者ID</label>
                                <div>@errorLog.UserId</div>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorLog.UserAgent))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold">使用者代理</label>
                                <div class="small text-muted">@errorLog.UserAgent</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>
</PagePermissionCheck>
@code {
    [Parameter] public int ErrorLogId { get; set; }

    private ErrorLog? errorLog;
    private bool IsLoading = true;
    private bool markingResolved = false;
    
    // 警告相關
    private bool showAlert = false;
    private string alertMessage = string.Empty;
    private AlertComponent.AlertType alertType = AlertComponent.AlertType.Info;

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("系統管理", "#"),
        new("錯誤記錄管理", "/error-logs"),
        new("錯誤記錄詳細資料")
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadErrorLogAsync();
    }

    private async Task LoadErrorLogAsync()
    {
        try
        {
            IsLoading = true;
            errorLog = await ErrorLogService.GetByIdAsync(ErrorLogId);
        }
        catch (Exception ex)
        {
            ShowAlert($"載入錯誤記錄時發生錯誤：{ex.Message}", AlertComponent.AlertType.Danger);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task MarkAsResolved()
    {
        try
        {
            markingResolved = true;
            
            // 更新錯誤記錄狀態
            if (errorLog != null)
            {
                errorLog.IsResolved = true;
                errorLog.ResolvedAt = DateTime.UtcNow;
                errorLog.ResolvedBy = "系統管理員"; // 這裡應該取得當前使用者
                
                await ErrorLogService.UpdateAsync(errorLog);
                ShowAlert("錯誤記錄已標記為已處理", AlertComponent.AlertType.Success);
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"標記處理狀態時發生錯誤：{ex.Message}", AlertComponent.AlertType.Danger);
        }
        finally
        {
            markingResolved = false;
            StateHasChanged();
        }
    }

    private void ShowAlert(string message, AlertComponent.AlertType type)
    {
        alertMessage = message;
        alertType = type;
        showAlert = true;
        StateHasChanged();
    }

    // 錯誤等級顯示相關方法
    private string GetErrorLevelDisplay(ErrorLevel level) => level switch
    {
        ErrorLevel.Info => "資訊",
        ErrorLevel.Warning => "警告",
        ErrorLevel.Error => "錯誤",
        ErrorLevel.Critical => "嚴重",
        _ => level.ToString()
    };

    private string GetErrorSourceDisplay(ErrorSource source) => source switch
    {
        ErrorSource.Database => "資料庫",
        ErrorSource.BusinessLogic => "業務邏輯",
        ErrorSource.UserInterface => "使用者介面",
        ErrorSource.System => "系統層級",
        ErrorSource.API => "API",
        ErrorSource.Security => "安全相關",
        _ => source.ToString()
    };

    private string GetErrorLevelCssClass(ErrorLevel level) => level switch
    {
        ErrorLevel.Critical => "error-level-critical",
        ErrorLevel.Error => "error-level-error",
        ErrorLevel.Warning => "error-level-warning",
        ErrorLevel.Info => "error-level-info",
        _ => "text-muted"
    };

    private string GetErrorLevelBadgeClass(ErrorLevel level) => level switch
    {
        ErrorLevel.Critical => "level-critical",
        ErrorLevel.Error => "level-error",
        ErrorLevel.Warning => "level-warning",
        ErrorLevel.Info => "level-info",
        _ => "bg-secondary"
    };
}

