@page "/roles/detail/{roleId:int}"

@inject IRoleService RoleService
@rendermode InteractiveServer


    <GenericDetailPageComponent TEntity="Role" 
                            TService="IRoleService"
                            EntityId="@RoleId"
                            Entity="@role"
                            Service="@RoleService"
                            EntityName="角色"
                            EntityNamePlural="角色"
                            IndexRoute="/roles"
                            EditRoute="/roles/edit"
                            LoadingText="載入角色資料中..."
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadRoleDataAsync"
                            AdditionalDataLoader="@LoadAdditionalDataAsync"
                            EntityTitleSelector="@(r => r.RoleName)"
                            EntitySubtitleSelector="@(r => $"權限數量：{r.RolePermissions?.Count ?? 0} 個")"
                            EntityDisplayNameSelector="@(r => r.RoleName)"
                            OnDataLoaded="@OnRoleDataLoaded"
                            TabSections="@GetTabSections()" RequiredPermission="Role.Read">
    </GenericDetailPageComponent>

@code {
    [Parameter] public int RoleId { get; set; }

    private Role? role;
    private bool _isLoading = false; // 防止重複載入

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            breadcrumbItems = GetBreadcrumbItems();
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType());
            throw;
        }
    }

    // 取得麵包屑導航項目
    private List<GenericHeaderComponent.BreadcrumbItem> GetBreadcrumbItems()
    {
        try
        {
            return new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("角色設定", "/roles"),
                new("角色詳細資料")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetBreadcrumbItems), GetType());
            throw;
        }
    }

    // GenericDetailPageComponent 需要的方法
    private async Task<Role?> LoadRoleDataAsync()
    {
        // 防止重複載入
        if (_isLoading)
        {
            return role;
        }
        
        try
        {
            _isLoading = true;
            if (RoleId <= 0) return null;
            var result = await RoleService.GetByIdAsync(RoleId);
            role = result; // 保持本地變數同步
            
            return result;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadRoleDataAsync), GetType(),
                additionalData: new { RoleId }
            );
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private Task LoadAdditionalDataAsync()
    {
        try
        {
            // 由於GetByIdAsync已經Include所有關聯資料，這裡不需要額外查詢
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalDataAsync), GetType());
            throw;
        }
    }

    private Task OnRoleDataLoaded()
    {
        try
        {
            // 資料載入完成後的處理
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnRoleDataLoaded), GetType());
            throw;
        }
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Role, IRoleService
                        >.TabSection> GetTabSections()
    {
        try
        {
            return new List<GenericDetailPageComponent<Role, IRoleService
                        >.TabSection>
            {            new GenericDetailPageComponent<Role, IRoleService>.TabSection
            {
                Id = "basic",
                Title = "基本資料",
                Content = @<div>
                    <BasicInfoDisplayComponent 
                        Title="角色基本資訊"
                        IconClass="fas fa-user-tag"
                        IconColor="text-primary"
                        Fields="@GetBasicInfoFields()"
                        ShowFieldCount="false" />
                </div>
            },
            new GenericDetailPageComponent<Role, IRoleService>.TabSection
            {
                Id = "permissions",
                Title = "權限設定",
                Content = @<div>
                    <RolePermissionDisplayComponent RolePermissions="@role?.RolePermissions" />
                </div>
            },
            
            new GenericDetailPageComponent<Role, IRoleService>.TabSection
            {
                Id = "employees",
                Title = "使用員工",
                Content = @<div>
                    @if (role?.Employees?.Any() == true)
                    {
                        <div class="row">
                            @foreach (var employee in role.Employees.OrderBy(e => e.FirstName ?? e.LastName))
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="card">
                                        <div class="card-body">                                            <h6 class="card-title">
                                                <i class="fas fa-user text-success me-2"></i>
                                                @($"{employee.FirstName} {employee.LastName}".Trim())
                                            </h6>
                                            <p class="card-text">
                                                <small class="text-muted">員工編號：@employee.EmployeeCode</small>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-muted p-3 text-center">
                            <i class="fas fa-users fa-2x mb-2 d-block"></i>
                            尚無員工使用此角色
                        </div>
                    }
                </div>
            },            new GenericDetailPageComponent<Role, IRoleService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div>
                    <SystemInfoDisplayComponent 
                        CreatedAt="@(role?.CreatedAt ?? DateTime.MinValue)"
                        UpdatedAt="@role?.UpdatedAt"
                        CreatedBy="@role?.CreatedBy"
                        UpdatedBy="@role?.UpdatedBy"
                        Remarks="@role?.Remarks"
                        ShowTimeline="true"
                        ShowRemarks="true" />
                </div>
            }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetTabSections), GetType());
            throw;
        }
    }

    // 取得基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetBasicInfoFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
            new()
            {
                Label = "角色名稱",
                Value = role?.RoleName,
                IsPrimary = true,
                ValueBold = true,
                IconClass = "fas fa-user-tag",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary"
            },
            new()
            {
                Label = "角色描述",
                Value = role?.Description,
                EmptyText = "無描述",
                IconClass = "fas fa-info-circle",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 12
            },
            new()
            {
                Label = "系統角色",
                CustomContent = @<div>
                    @if (role?.IsSystemRole == true)
                    {
                        <span class="badge bg-primary">
                            <i class="fas fa-crown me-1"></i>系統角色
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">
                            <i class="fas fa-user me-1"></i>自訂角色
                        </span>
                    }
                </div>,
                IconClass = "fas fa-shield-alt",
                IconBgClass = "bg-warning bg-opacity-10", 
                IconTextClass = "text-warning"
            },
            new()
            {
                Label = "員工數量",
                Value = role?.Employees?.Count.ToString() ?? "0",
                ValueBold = true,
                Format = BasicInfoDisplayComponent.FieldFormat.Number,
                IconClass = "fas fa-users",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success",
                Description = "使用此角色的員工數量"
            }
        };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetBasicInfoFields), GetType());
            throw;
        }
    }
}




