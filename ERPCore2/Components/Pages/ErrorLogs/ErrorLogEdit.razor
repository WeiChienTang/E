@page "/error-logs/edit"
@page "/error-logs/edit/{id:int?}"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.PageModels
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Forms
@inject IErrorLogService ErrorLogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>@(Id.HasValue ? "編輯錯誤記錄" : "新增錯誤記錄")</PageTitle>

<GenericEditPageComponent TEntity="ErrorLog" 
                         TService="IErrorLogService"
                         @ref="editComponent"
                         Id="@Id"
                         Service="@ErrorLogService"
                         EntityName="錯誤記錄"
                         EntityNamePlural="錯誤記錄"
                         IndexRoute="/error-logs"
                         FormTitle="錯誤記錄資料"
                         FormSubtitle="編輯錯誤記錄的處理狀態與說明"
                         UseGenericForm="true"
                         FormFields="@GetFormFields()"
                         FormSections="@GetFormSections()"
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadErrorLogData"
                         UseGenericSave="true"
                         SaveSuccessMessage="@(Id.HasValue ? "錯誤記錄更新成功" : "錯誤記錄新增成功")"
                         SaveFailureMessage="錯誤記錄儲存失敗">
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<ErrorLog, IErrorLogService> editComponent = default!;
    
    // 資料模型
    private ErrorLog errorLog = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeFormFields();
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("系統管理", "#"),
            new("錯誤記錄管理", "/error-logs"),
            new(Id.HasValue ? "編輯錯誤記錄" : "新增錯誤記錄")
        };
    }

    private void InitializeFormFields()
    {
        formSections = new Dictionary<string, string>
        {
            { "basic", "基本資料" },
            { "details", "詳細資訊" },
            { "resolution", "處理狀態" }
        };
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return new List<FormFieldDefinition>
        {
            // 基本資料區段
            new()
            {
                PropertyName = nameof(ErrorLog.ErrorId),
                Label = "錯誤ID",
                FieldType = FormFieldType.Text,
                IsReadOnly = true,
                GroupName = "basic"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.Message),
                Label = "錯誤訊息",
                FieldType = FormFieldType.TextArea,
                IsRequired = true,
                IsReadOnly = true,
                Rows = 3,
                GroupName = "basic"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.Level),
                Label = "錯誤等級",
                FieldType = FormFieldType.Select,
                IsReadOnly = true,
                Options = GetErrorLevelOptions(),
                GroupName = "basic"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.Source),
                Label = "錯誤來源",
                FieldType = FormFieldType.Select,
                IsReadOnly = true,
                Options = GetErrorSourceOptions(),
                GroupName = "basic"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.OccurredAt),
                Label = "發生時間",
                FieldType = FormFieldType.DateTime,
                IsReadOnly = true,
                GroupName = "basic"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.Category),
                Label = "錯誤分類",
                FieldType = FormFieldType.Text,
                IsReadOnly = true,
                GroupName = "basic"
            },

            // 詳細資訊區段
            new()
            {
                PropertyName = nameof(ErrorLog.ExceptionType),
                Label = "例外類型",
                FieldType = FormFieldType.Text,
                IsReadOnly = true,
                GroupName = "details"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.StackTrace),
                Label = "堆疊追蹤",
                FieldType = FormFieldType.TextArea,
                IsReadOnly = true,
                Rows = 8,
                GroupName = "details"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.InnerException),
                Label = "內部例外",
                FieldType = FormFieldType.TextArea,
                IsReadOnly = true,
                Rows = 4,
                GroupName = "details"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.RequestPath),
                Label = "請求路徑",
                FieldType = FormFieldType.Text,
                IsReadOnly = true,
                GroupName = "details"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.Module),
                Label = "所屬模組",
                FieldType = FormFieldType.Text,
                IsReadOnly = true,
                GroupName = "details"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.UserId),
                Label = "使用者ID",
                FieldType = FormFieldType.Text,
                IsReadOnly = true,
                GroupName = "details"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.UserAgent),
                Label = "使用者代理",
                FieldType = FormFieldType.TextArea,
                IsReadOnly = true,
                Rows = 2,
                GroupName = "details"
            },

            // 處理狀態區段
            new()
            {
                PropertyName = nameof(ErrorLog.IsResolved),
                Label = "已處理",
                FieldType = FormFieldType.Checkbox,
                GroupName = "resolution"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.ResolvedBy),
                Label = "處理者",
                FieldType = FormFieldType.Text,
                GroupName = "resolution"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.ResolvedAt),
                Label = "處理時間",
                FieldType = FormFieldType.DateTime,
                GroupName = "resolution"
            },
            new()
            {
                PropertyName = nameof(ErrorLog.Resolution),
                Label = "處理說明",
                FieldType = FormFieldType.TextArea,
                Rows = 4,
                GroupName = "resolution",
                Placeholder = "輸入處理說明..."
            }
        };
    }

    private Dictionary<string, string> GetFormSections()
    {
        return formSections;
    }

    private async Task<ErrorLog?> LoadErrorLogData()
    {
        if (!Id.HasValue) return new ErrorLog();

        try
        {
            var result = await ErrorLogService.GetByIdAsync(Id.Value);
            if (result != null)
            {
                errorLog = result;
                return errorLog;
            }
            
            return null;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"載入錯誤記錄時發生錯誤：{ex.Message}");
            return null;
        }
    }

    // 輔助方法
    private List<SelectOption> GetErrorLevelOptions()
    {
        return Enum.GetValues<ErrorLevel>().Select(level => new SelectOption
        {
            Value = level.ToString(),
            Text = GetErrorLevelDisplay(level)
        }).ToList();
    }

    private List<SelectOption> GetErrorSourceOptions()
    {
        return Enum.GetValues<ErrorSource>().Select(source => new SelectOption
        {
            Value = source.ToString(),
            Text = GetErrorSourceDisplay(source)
        }).ToList();
    }

    private string GetErrorLevelDisplay(ErrorLevel level)
    {
        return level switch
        {
            ErrorLevel.Info => "資訊",
            ErrorLevel.Warning => "警告",
            ErrorLevel.Error => "錯誤",
            ErrorLevel.Critical => "嚴重錯誤",
            _ => level.ToString()
        };
    }

    private string GetErrorSourceDisplay(ErrorSource source)
    {
        return source switch
        {
            ErrorSource.Database => "資料庫",
            ErrorSource.BusinessLogic => "業務邏輯",
            ErrorSource.UserInterface => "使用者介面",
            ErrorSource.System => "系統",
            ErrorSource.API => "API",
            ErrorSource.Security => "安全性",
            _ => source.ToString()
        };
    }
}
