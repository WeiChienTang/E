@page "/error-logs"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.PageModels
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Forms
@using ERPCore2.Components.Shared.Tables
@inject IErrorLogService ErrorLogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>錯誤記錄管理</PageTitle>

<GenericIndexPageComponent TEntity="ErrorLog" 
                          TService="IErrorLogService"
                          Service="@ErrorLogService"
                          EntityBasePath="/error-logs"
                          PageTitle="錯誤記錄管理"
                          PageSubtitle="檢視與管理系統錯誤記錄"
                          EntityName="錯誤記錄"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadErrorLogsAsync"
                          FilterApplier="@ApplyErrorLogFilters"
                          GetEntityDisplayName="@(errorLog => errorLog.Message ?? "未知錯誤")"
                          EnableStandardActions="true"
                          ShowViewButton="true"
                          ShowEditButton="true"
                          ShowDeleteButton="false"
                          @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<ErrorLog, IErrorLogService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeFilters();
        InitializeColumns();
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("系統管理", "#"),
            new("錯誤記錄管理")
        };
    }

    private void InitializeFilters()
    {
        filterDefinitions = new List<SearchFilterDefinition>
        {
            new()
            {
                Name = "Message",
                Type = SearchFilterType.Text,
                Label = "錯誤訊息",
                Placeholder = "輸入錯誤訊息關鍵字...",
                CssClass = "col-md-4"
            },
            new()
            {
                Name = "Level",
                Type = SearchFilterType.Select,
                Label = "錯誤等級",
                Options = Enum.GetValues<ErrorLevel>().Select(level => new SelectOption 
                { 
                    Value = level.ToString(), 
                    Text = GetErrorLevelDisplay(level) 
                }).ToList(),
                CssClass = "col-md-2"
            },
            new()
            {
                Name = "Source",
                Type = SearchFilterType.Select,
                Label = "錯誤來源",
                Options = Enum.GetValues<ErrorSource>().Select(source => new SelectOption 
                { 
                    Value = source.ToString(), 
                    Text = GetErrorSourceDisplay(source) 
                }).ToList(),
                CssClass = "col-md-2"
            },
            new()
            {
                Name = "IsResolved",
                Type = SearchFilterType.Select,
                Label = "處理狀態",
                Options = new List<SelectOption>
                {
                    new() { Value = "", Text = "全部" },
                    new() { Value = "false", Text = "未處理" },
                    new() { Value = "true", Text = "已處理" }
                },
                CssClass = "col-md-2"
            },
            new()
            {
                Name = "OccurredAt",
                Type = SearchFilterType.DateRange,
                Label = "發生時間",
                CssClass = "col-md-4"
            }
        };
    }

    private void InitializeColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("錯誤訊息", "Message", "text-truncate"),
            TableColumnDefinition.Text("等級", "Level"),
            TableColumnDefinition.Text("來源", "Source"),
            TableColumnDefinition.DateTime("發生時間", "OccurredAt"),
            TableColumnDefinition.Boolean("狀態", "IsResolved", "已處理", "未處理")
        };
    }

    // 資料載入方法
    private async Task<List<ErrorLog>> LoadErrorLogsAsync()
    {
        try
        {
            var result = await ErrorLogService.GetAllAsync();
            return result?.ToList() ?? new List<ErrorLog>();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"載入錯誤記錄時發生錯誤：{ex.Message}");
            return new List<ErrorLog>();
        }
    }

    // 篩選應用方法
    private IQueryable<ErrorLog> ApplyErrorLogFilters(SearchFilterModel filterModel, IQueryable<ErrorLog> query)
    {
        if (filterModel == null) return query;

        // 錯誤訊息篩選
        if (filterModel.TextFilters.TryGetValue("Message", out var message) && 
            !string.IsNullOrEmpty(message))
        {
            query = query.Where(e => e.Message != null && e.Message.Contains(message));
        }

        // 錯誤等級篩選
        if (filterModel.SelectFilters.TryGetValue("Level", out var levelFilter) && 
            !string.IsNullOrEmpty(levelFilter) &&
            Enum.TryParse<ErrorLevel>(levelFilter, out var level))
        {
            query = query.Where(e => e.Level == level);
        }

        // 錯誤來源篩選
        if (filterModel.SelectFilters.TryGetValue("Source", out var sourceFilter) && 
            !string.IsNullOrEmpty(sourceFilter) &&
            Enum.TryParse<ErrorSource>(sourceFilter, out var source))
        {
            query = query.Where(e => e.Source == source);
        }

        // 處理狀態篩選
        if (filterModel.SelectFilters.TryGetValue("IsResolved", out var resolvedFilter) && 
            !string.IsNullOrEmpty(resolvedFilter) &&
            bool.TryParse(resolvedFilter, out var isResolved))
        {
            query = query.Where(e => e.IsResolved == isResolved);
        }

        // 發生時間範圍篩選
        if (filterModel.DateRangeFilters.TryGetValue("OccurredAt", out var dateRange) && 
            dateRange != null)
        {
            if (dateRange.StartDate.HasValue)
            {
                query = query.Where(e => e.OccurredAt >= dateRange.StartDate.Value);
            }
            if (dateRange.EndDate.HasValue)
            {
                query = query.Where(e => e.OccurredAt <= dateRange.EndDate.Value);
            }
        }

        return query;
    }

    // 輔助方法
    private string GetErrorLevelDisplay(ErrorLevel level)
    {
        return level switch
        {
            ErrorLevel.Info => "資訊",
            ErrorLevel.Warning => "警告",
            ErrorLevel.Error => "錯誤",
            ErrorLevel.Critical => "嚴重錯誤",
            _ => level.ToString()
        };
    }

    private string GetErrorSourceDisplay(ErrorSource source)
    {
        return source switch
        {
            ErrorSource.Database => "資料庫",
            ErrorSource.BusinessLogic => "業務邏輯",
            ErrorSource.UserInterface => "使用者介面",
            ErrorSource.System => "系統",
            ErrorSource.API => "API",
            ErrorSource.Security => "安全性",
            _ => source.ToString()
        };
    }

    private string GetErrorLevelBadgeClass(ErrorLevel level)
    {
        return level switch
        {
            ErrorLevel.Info => "bg-info",
            ErrorLevel.Warning => "bg-warning",
            ErrorLevel.Error => "bg-danger",
            ErrorLevel.Critical => "bg-dark",
            _ => "bg-secondary"
        };
    }
}