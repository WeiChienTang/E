@* 財務交易編輯組件 - 可在任何頁面中嵌入 *@
@using ERPCore2.Components.Shared.PageModels
@using ERPCore2.Components.Shared.Forms
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@inject IFinancialTransactionService FinancialTransactionService
@inject INotificationService NotificationService
@inject ActionButtonHelper ActionButtonHelper

<GenericEditModalComponent TEntity="FinancialTransaction" 
                          TService="IFinancialTransactionService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@FinancialTransactionId"
                          Service="@FinancialTransactionService"
                          EntityName="財務交易"
                          EntityNamePlural="財務交易"
                          ModalTitle="@(FinancialTransactionId.HasValue ? "檢視財務交易" : "檢視財務交易")"
                          Size="GenericEditModalComponent<FinancialTransaction, IFinancialTransactionService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          DataLoader="@LoadFinancialTransactionDataAsync"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="false"
                          SaveSuccessMessage="@(FinancialTransactionId.HasValue ? "財務交易更新成功" : "財務交易新增成功")"
                          SaveFailureMessage="財務交易儲存失敗"
                          RequiredPermission="FinancialTransaction.Read"
                          OnCancel="@HandleCancel"
                          AdditionalSections="@AdditionalContentSection" />

@* 沖銷確認 Modal *@
@if (showReverseModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">沖銷財務交易</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="HideReverseModal"></button>
                </div>
                <div class="modal-body">
                    <p>確定要沖銷此財務交易嗎？此操作不可逆轉。</p>
                    <div class="form-group">
                        <label for="reversalReason">沖銷原因 <span class="text-danger">*</span></label>
                        <textarea id="reversalReason" class="form-control" @bind="reversalReason" rows="3" placeholder="請輸入沖銷原因"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideReverseModal">取消</button>
                    <button type="button" class="btn btn-warning" @onclick="ConfirmReverse" disabled="@(string.IsNullOrWhiteSpace(reversalReason) || isReversing)">
                        @if (isReversing)
                        {
                            <i class="fas fa-spinner fa-spin"></i>
                        }
                        else
                        {
                            <i class="fas fa-undo"></i>
                        }
                        沖銷
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? FinancialTransactionId { get; set; }
    [Parameter] public EventCallback<FinancialTransaction> OnTransactionSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 元件參考 =====
    private GenericEditModalComponent<FinancialTransaction, IFinancialTransactionService> editModalComponent = default!;

    // ===== 內部狀態 =====
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<Customer> customers = new();
    private List<Company> companies = new();
    private List<PaymentMethod> paymentMethods = new();

    // ===== 沖銷功能相關 =====
    private bool showReverseModal = false;
    private string reversalReason = string.Empty;
    private bool isReversing = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadAdditionalDataAsync();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化財務交易編輯組件失敗");
            await NotificationService.ShowErrorAsync("初始化財務交易編輯組件失敗");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            await LoadAdditionalDataAsync();
            InitializeFormFields();
        }
    }

    private List<SelectOption> GetTransactionTypeOptions()
    {
        return Enum.GetValues<FinancialTransactionTypeEnum>()
            .Select(e => new SelectOption
            {
                Text = GetEnumDescription(e),
                Value = ((int)e).ToString()
            })
            .ToList();
    }

    // ===== 表單初始化 =====
    private void InitializeFormFields()
    {
        try
        {
            // 準備交易類型選項
            var transactionTypeOptions = GetTransactionTypeOptions();
            
            // 準備客戶選項
            var customerOptions = customers.Select(c => new SelectOption
            {
                Text = $"{c.CompanyName}".Trim(),
                Value = c.Id.ToString()
            }).ToList();

            // 準備公司選項
            var companyOptions = companies.Select(c => new SelectOption
            {
                Text = $"{c.CompanyName}".Trim(),
                Value = c.Id.ToString()
            }).ToList();

            // 準備付款方式選項
            var paymentMethodOptions = paymentMethods.Select(p => new SelectOption
            {
                Text = $"{p.Name}".Trim(),
                Value = p.Id.ToString()
            }).ToList();

            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(FinancialTransaction.TransactionNumber),
                    Label = "交易單號",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    IsReadOnly = true,
                    HelpText = "系統自動產生的交易單號"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.TransactionDate),
                    Label = "交易日期",
                    FieldType = FormFieldType.DateTime,
                    IsRequired = true,
                    IsReadOnly = true,
                    HelpText = "交易發生的日期與時間"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.TransactionType),
                    Label = "交易類型",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    IsReadOnly = true,
                    Options = transactionTypeOptions,
                    HelpText = "財務交易的類型"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.Amount),
                    Label = "交易金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = true,
                    IsReadOnly = true,
                    HelpText = "交易的金額"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.CustomerId),
                    Label = "客戶",
                    FieldType = FormFieldType.Select,
                    IsReadOnly = true,
                    Options = customerOptions,
                    HelpText = "關聯的客戶"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.CompanyId),
                    Label = "公司",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    IsReadOnly = true,
                    Options = companyOptions,
                    HelpText = "交易所屬的公司"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.PaymentMethodId),
                    Label = "收付款方式",
                    FieldType = FormFieldType.Select,
                    IsReadOnly = true,
                    Options = paymentMethodOptions,
                    HelpText = "使用的收付款方式"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.PaymentAccount),
                    Label = "收付款帳戶",
                    FieldType = FormFieldType.Text,
                    IsReadOnly = true,
                    HelpText = "收付款的帳戶資訊"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.SourceDocumentType),
                    Label = "來源單據類型",
                    FieldType = FormFieldType.Text,
                    IsReadOnly = true,
                    HelpText = "產生此交易的來源單據類型"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.SourceDocumentNumber),
                    Label = "來源單據號碼",
                    FieldType = FormFieldType.Text,
                    IsReadOnly = true,
                    HelpText = "來源單據的編號"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.ReferenceNumber),
                    Label = "參考號碼",
                    FieldType = FormFieldType.Text,
                    IsReadOnly = true,
                    HelpText = "交易的參考號碼"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.BalanceAfter),
                    Label = "交易後餘額",
                    FieldType = FormFieldType.Number,
                    IsReadOnly = true,
                    HelpText = "交易完成後的帳戶餘額"
                },
                new()
                {
                    PropertyName = nameof(FinancialTransaction.Description),
                    Label = "交易描述",
                    FieldType = FormFieldType.TextArea,
                    IsReadOnly = true,
                    Rows = 3,
                    HelpText = "交易的詳細描述",
                    ContainerCssClass = "col-12"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(FinancialTransaction.TransactionNumber), "基本資訊" },
                { nameof(FinancialTransaction.TransactionDate), "基本資訊" },
                { nameof(FinancialTransaction.TransactionType), "基本資訊" },
                { nameof(FinancialTransaction.Amount), "基本資訊" },
                { nameof(FinancialTransaction.CustomerId), "相關資訊" },
                { nameof(FinancialTransaction.CompanyId), "相關資訊" },
                { nameof(FinancialTransaction.PaymentMethodId), "付款資訊" },
                { nameof(FinancialTransaction.PaymentAccount), "付款資訊" },
                { nameof(FinancialTransaction.SourceDocumentType), "來源資訊" },
                { nameof(FinancialTransaction.SourceDocumentNumber), "來源資訊" },
                { nameof(FinancialTransaction.ReferenceNumber), "其他資訊" },
                { nameof(FinancialTransaction.BalanceAfter), "其他資訊" },
                { nameof(FinancialTransaction.Description), "其他資訊" }
            };
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    private RenderFragment? AdditionalContentSection => (__builder) =>
    {
        @if (editModalComponent?.Entity != null)
        {
            @if (FinancialTransactionId.HasValue && editModalComponent.Entity.IsReversed)
            {
                <div class="alert alert-warning mt-3">
                    <h6><i class="fas fa-exclamation-triangle"></i> 沖銷資訊</h6>
                    <p><strong>沖銷日期：</strong> @editModalComponent.Entity.ReversedDate?.ToString("yyyy/MM/dd HH:mm")</p>
                    <p><strong>沖銷原因：</strong> @editModalComponent.Entity.ReversalReason</p>
                    @if (editModalComponent.Entity.ReversalTransactionId.HasValue)
                    {
                        <p><strong>沖銷交易ID：</strong> @editModalComponent.Entity.ReversalTransactionId</p>
                    }
                </div>
            }
            
            @if (FinancialTransactionId.HasValue && !editModalComponent.Entity.IsReversed)
            {
                <div class="mt-3">
                    <button type="button" class="btn btn-warning" @onclick="ShowReverseModal">
                        <i class="fas fa-undo"></i> 沖銷交易
                    </button>
                </div>
            }
        }
    };

    private string GetEnumDescription(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = field?.GetCustomAttribute<System.ComponentModel.DescriptionAttribute>();
        return attribute?.Description ?? value.ToString();
    }

    private async Task<FinancialTransaction> LoadFinancialTransactionDataAsync()
    {
        try
        {
            if (FinancialTransactionId.HasValue)
            {
                var transaction = await FinancialTransactionService.GetByIdAsync(FinancialTransactionId.Value);
                if (transaction != null)
                {
                    return transaction;
                }
            }

            // 建立新交易時產生交易單號
            var newTransaction = new FinancialTransaction
            {
                TransactionNumber = await FinancialTransactionService.GenerateNextTransactionNumberAsync(),
                TransactionDate = DateTime.Now
            };

            return newTransaction;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadFinancialTransactionDataAsync), GetType(), additionalData: $"載入財務交易資料失敗，ID: {FinancialTransactionId}");
            throw;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            await Task.WhenAll(
                LoadCustomersAsync(),
                LoadCompaniesAsync(),
                LoadPaymentMethodsAsync()
            );
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalDataAsync), GetType(), additionalData: "載入附加資料失敗");
            throw;
        }
    }

    private async Task LoadCustomersAsync()
    {
        try
        {
            customers = await FinancialTransactionService.GetCustomersAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCustomersAsync), GetType());
            customers = new List<Customer>();
        }
    }

    private async Task LoadCompaniesAsync()
    {
        try
        {
            companies = await FinancialTransactionService.GetCompaniesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCompaniesAsync), GetType());
            companies = new List<Company>();
        }
    }

    private async Task LoadPaymentMethodsAsync()
    {
        try
        {
            paymentMethods = await FinancialTransactionService.GetPaymentMethodsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPaymentMethodsAsync), GetType());
            paymentMethods = new List<PaymentMethod>();
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            await OnCancel.InvokeAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleCancel), GetType());
        }
    }

    // 沖銷功能
    private void ShowReverseModal()
    {
        showReverseModal = true;
        reversalReason = string.Empty;
    }

    private void HideReverseModal()
    {
        showReverseModal = false;
        reversalReason = string.Empty;
    }

    private async Task ConfirmReverse()
    {
        if (string.IsNullOrWhiteSpace(reversalReason) || !FinancialTransactionId.HasValue)
            return;

        try
        {
            isReversing = true;
            var result = await FinancialTransactionService.ReverseTransactionAsync(FinancialTransactionId.Value, reversalReason);
            
            if (result.IsSuccess)
            {
                await NotificationService.ShowSuccessAsync("財務交易沖銷成功");
                HideReverseModal();
                
                // 重新載入資料
                if (editModalComponent != null)
                {
                    // 重新載入實體
                    var reloadedEntity = await LoadFinancialTransactionDataAsync();
                    StateHasChanged();
                }
                
                // 通知父元件
                if (editModalComponent?.Entity != null)
                {
                    await OnTransactionSaved.InvokeAsync(editModalComponent.Entity);
                }
            }
            else
            {
                await NotificationService.ShowErrorAsync(result.ErrorMessage ?? "沖銷失敗");
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ConfirmReverse), GetType(), additionalData: $"沖銷財務交易失敗，ID: {FinancialTransactionId}");
            await NotificationService.ShowErrorAsync("沖銷財務交易時發生錯誤");
        }
        finally
        {
            isReversing = false;
        }
    }
}