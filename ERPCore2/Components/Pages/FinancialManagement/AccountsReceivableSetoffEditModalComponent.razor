@* 應收帳款沖款編輯組件 *@
@inject IAccountsReceivableSetoffService AccountsReceivableSetoffService
@inject IAccountsReceivableSetoffDetailService AccountsReceivableSetoffDetailService
@inject ISettoffPaymentDetailService SetoffPaymentDetailService
@inject IPrepaymentDetailService SetoffPrepaymentDetailService
@inject ICustomerService CustomerService
@inject ICompanyService CompanyService
@inject IPaymentMethodService PaymentMethodService
@inject IEmployeeService EmployeeService
@inject INotificationService NotificationService
@inject IFinancialTransactionService FinancialTransactionService
@inject ActionButtonHelper ActionButtonHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

<GenericEditModalComponent TEntity="AccountsReceivableSetoff" 
                          TService="IAccountsReceivableSetoffService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@SetoffId"
                          Service="@AccountsReceivableSetoffService"
                          EntityName="應收帳款沖款"
                          EntityNamePlural="沖款單"
                          ModalTitle="@(SetoffId.HasValue ? "編輯應收帳款沖款" : "新增應收帳款沖款")"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadSetoffData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(SetoffId.HasValue ? "應收帳款沖款更新成功" : "應收帳款沖款新增成功")"
                          SaveFailureMessage="應收帳款沖款儲存失敗"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          CustomValidator="@ValidateSetoffDetailsAsync"
                          AfterSave="@SaveSetoffDetailsAsync"
                          CustomModules="@GetCustomModules()" />

@* 客戶編輯 Modal *@
<CustomerEditModalComponent @ref="customerEditModal"
                           IsVisible="@customerModalManager.IsModalVisible"
                           IsVisibleChanged="@customerModalManager.HandleModalVisibilityChangedAsync"
                           CustomerId="@customerModalManager.SelectedEntityId"
                           OnCustomerSaved="@OnCustomerSavedWrapper"
                           OnCancel="@customerModalManager.HandleModalCancelAsync" />

@* 公司編輯 Modal *@
<CompanyEditModalComponent @ref="companyEditModal"
                          IsVisible="@companyModalManager.IsModalVisible"
                          IsVisibleChanged="@companyModalManager.HandleModalVisibilityChangedAsync"
                          CompanyId="@companyModalManager.SelectedEntityId"
                          OnCompanySaved="@OnCompanySavedWrapper"
                          OnCancel="@companyModalManager.HandleModalCancelAsync" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? SetoffId { get; set; }
    [Parameter] public EventCallback<AccountsReceivableSetoff> OnSetoffSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>? editModalComponent;
    private SetoffDetailManagerComponent? detailManagerComponent;
    private SetoffPaymentDetailManagerComponent? paymentDetailManagerComponent;
    private SetoffPrepaymentManagerComponent? prepaymentManagerComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 相關資料
    private List<Customer> customers = new();
    private List<Company> companies = new();
    private List<PaymentMethod> paymentMethods = new();
    private List<Employee> employees = new();
    
    // 沖款明細相關狀態
    private int? selectedCustomerId = null;
    private List<AccountsReceivableSetoffDetail> setoffDetails = new();
    private decimal totalSetoffAmount = 0m;
    private decimal totalPaymentAmount = 0m;
    private decimal totalPrepaymentAmount = 0m;
    
    // Modal 管理器
    private CustomerEditModalComponent? customerEditModal;
    private RelatedEntityModalManager<Customer> customerModalManager = default!;
    private CompanyEditModalComponent? companyEditModal;
    private RelatedEntityModalManager<Company> companyModalManager = default!;

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeCustomerModalManager();
            InitializeCompanyModalManager();
            
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化應收帳款沖款編輯組件失敗");
        }
    }

    /// <summary>
    /// 載入沖款資料
    /// </summary>
    private async Task<AccountsReceivableSetoff?> LoadSetoffData()
    {
        try
        {
            if (SetoffId.HasValue && SetoffId.Value > 0)
            {
                var setoff = await AccountsReceivableSetoffService.GetByIdAsync(SetoffId.Value);
                
                // 編輯模式：初始化本地的 totalSetoffAmount 變數
                // 這確保在明細組件載入之前，totalSetoffAmount 就有正確的初始值
                if (setoff != null)
                {
                    totalSetoffAmount = setoff.TotalSetoffAmount;
                }
                
                return setoff;
            }
            else
            {
                // 新增模式：生成沖款單號並設置預設公司
                var primaryCompany = await CompanyService.GetPrimaryCompanyAsync();
                var newSetoff = new AccountsReceivableSetoff
                {
                    SetoffNumber = await GenerateSetoffNumberAsync(),
                    SetoffDate = DateTime.Today,
                    CompanyId = primaryCompany?.Id ?? 0,
                    TotalSetoffAmount = 0 // 新增模式初始為 0
                };
                
                // 新增模式：初始化 totalSetoffAmount
                totalSetoffAmount = 0;
                
                return newSetoff;
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSetoffData), GetType(), additionalData: $"載入應收帳款沖款資料失敗 - SetoffId: {SetoffId}");
            return null;
        }
    }

    /// <summary>
    /// 載入額外資料
    /// </summary>
    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            await LoadCustomersAsync();
            await LoadCompaniesAsync();
            await LoadPaymentMethodsAsync();
            await LoadEmployeesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalDataAsync), GetType(), additionalData: "載入額外資料失敗");
        }
    }

    private async Task LoadCustomersAsync()
    {
        try
        {
            customers = await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCustomersAsync), GetType(), additionalData: "載入客戶資料失敗");
            customers = new List<Customer>();
        }
    }

    private async Task LoadPaymentMethodsAsync()
    {
        try
        {
            paymentMethods = await PaymentMethodService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPaymentMethodsAsync), GetType(), additionalData: "載入付款方式資料失敗");
            paymentMethods = new List<PaymentMethod>();
        }
    }

    private async Task LoadCompaniesAsync()
    {
        try
        {
            companies = await CompanyService.GetActiveCompaniesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCompaniesAsync), GetType(), additionalData: "載入公司資料失敗");
            companies = new List<Company>();
        }
    }

    private async Task LoadEmployeesAsync()
    {
        try
        {
            employees = await EmployeeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadEmployeesAsync), GetType(), additionalData: "載入員工資料失敗");
            employees = new List<Employee>();
        }
    }

    /// <summary>
    /// 初始化表單欄位
    /// </summary>
    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.SetoffNumber),
                    Label = "沖款單號",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    IsReadOnly = true,
                    HelpText = "系統自動產生的沖款單號"
                },

                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.CustomerId),
                    Label = "客戶",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇客戶",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "輸入客戶名稱進行搜尋，或直接選擇",
                    ActionButtons = await GetCustomerActionButtonsAsync()
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.CompanyId),
                    Label = "公司",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請選擇公司",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "選擇適用的公司",
                    ActionButtons = await GetCompanyActionButtonsAsync()
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.SetoffDate),
                    Label = "沖款日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    HelpText = "沖款的日期"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.TotalSetoffAmount),
                    Label = "總沖款金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    IsReadOnly = true,
                    HelpText = "由沖款明細自動計算總金額"
                },
                
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註",
                    HelpText = "備註說明",
                    MaxLength = 500,
                    Rows = 2,
                    ContainerCssClass = "col-12"
                } 
            };

            // 初始化表單區段
            formSections = new Dictionary<string, string>
            {
                { nameof(AccountsReceivableSetoff.SetoffNumber), "基本資訊" },                
                { nameof(AccountsReceivableSetoff.CustomerId), "基本資訊" },
                { nameof(AccountsReceivableSetoff.CompanyId), "基本資訊" },
                { nameof(AccountsReceivableSetoff.SetoffDate), "基本資訊" },
                { nameof(AccountsReceivableSetoff.TotalSetoffAmount), "金額資訊" },
                { nameof(AccountsReceivableSetoff.Remarks), "其他資訊" }
            };

            
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFieldsAsync), GetType());
        }
    }

    /// <summary>
    /// 取得表單欄位清單
    /// </summary>
    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(AccountsReceivableSetoff.CompanyId), companies },
            { nameof(AccountsReceivableSetoff.CustomerId), customers },
            { nameof(AccountsReceivableSetoff.PaymentMethodId), paymentMethods },
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(AccountsReceivableSetoff.CompanyId), "CompanyName" },
            { nameof(AccountsReceivableSetoff.CustomerId), "CompanyName" },
            { nameof(AccountsReceivableSetoff.PaymentMethodId), "Name" },
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(AccountsReceivableSetoff.CompanyId), "Id" },
            { nameof(AccountsReceivableSetoff.CustomerId), "Id" },
            { nameof(AccountsReceivableSetoff.PaymentMethodId), "Id" },
        };
    }

    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(AccountsReceivableSetoff.CustomerId), searchTerm => new Dictionary<string, object?>
                {
                    { nameof(Customer.CompanyName), searchTerm }
                }
            }
        };
    }

    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(AccountsReceivableSetoff.CustomerId), customerModalManager },
            { nameof(AccountsReceivableSetoff.CompanyId), companyModalManager }
        };
    }

    /// <summary>
    /// 產生沖款單號
    /// </summary>
    private async Task<string> GenerateSetoffNumberAsync()
    {
        try
        {
            return await CodeGenerationHelper.GenerateEntityCodeAsync(
                AccountsReceivableSetoffService,
                "ARO", // Accounts Receivable Offset
                (service, code, excludeId) => service.IsSetoffNumberExistsAsync(code, excludeId)
            );
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GenerateSetoffNumberAsync), GetType(), additionalData: "產生沖款單號失敗");
            return $"ARO{DateTime.Now:yyyyMMddHHmmss}";
        }
    }

    /// <summary>
    /// 處理儲存成功事件
    /// </summary>
    private async Task HandleSaveSuccess()
    {
        try
        {
            if (OnSetoffSaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnSetoffSaved.InvokeAsync(editModalComponent.Entity);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleSaveSuccess), GetType());
        }
    }

    /// <summary>
    /// 處理取消事件
    /// </summary>
    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleCancel), GetType());
        }
    }

    /// <summary>
    /// 創建或更新財務交易記錄
    /// </summary>
    private async Task CreateFinancialTransactionRecordsAsync(AccountsReceivableSetoff setoff, List<SetoffDetailDto> selectedDetails)
    {
        try
        {
            // 檢查是否為編輯模式 (SetoffId.HasValue 表示是編輯現有記錄)
            bool isEditMode = SetoffId.HasValue && SetoffId.Value > 0;
            
            if (isEditMode)
            {
                // 編輯模式：先處理清理不再需要的交易記錄
                await CleanupObsoleteFinancialTransactionsAsync(setoff, selectedDetails);
            }
            
            foreach (var detail in selectedDetails)
            {
                // 只有當沖款或折讓金額大於0時才創建記錄
                if (detail.ThisTimeAmount > 0 || detail.ThisTimeDiscountAmount > 0)
                {
                    // 合併沖款和折讓為單筆交易記錄
                    var totalAmount = detail.ThisTimeAmount + detail.ThisTimeDiscountAmount;
                    await CreateOrUpdateFinancialTransactionAsync(
                        setoff, detail, FinancialTransactionTypeEnum.AccountsReceivableSetoff,
                        totalAmount, detail.ThisTimeAmount, detail.ThisTimeDiscountAmount, 
                        "應收沖款", isEditMode);
                }
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(CreateFinancialTransactionRecordsAsync), GetType(), 
                additionalData: $"創建財務交易記錄失敗 - SetoffId: {setoff.Id}");
        }
    }

    /// <summary>
    /// 創建或更新財務交易記錄的輔助方法
    /// </summary>
    private async Task CreateOrUpdateFinancialTransactionAsync(
        AccountsReceivableSetoff setoff, 
        SetoffDetailDto detail, 
        FinancialTransactionTypeEnum transactionType,
        decimal totalAmount,
        decimal cashAmount,
        decimal discountAmount,
        string description,
        bool isEditMode)
    {
        try
        {
            FinancialTransaction? existingTransaction = null;

            if (isEditMode)
            {
                // 編輯模式：檢查是否已有相關記錄
                // 使用更有效率的查詢：透過客戶ID先篩選，再進行詳細比對
                var customerTransactions = await FinancialTransactionService.GetTransactionsByCustomerIdAsync(setoff.CustomerId);
                
                // 查找對應的交易記錄（根據 SourceDocumentId, SourceDetailId 和 TransactionType）
                existingTransaction = customerTransactions?.FirstOrDefault(ft => 
                    ft.SourceDocumentType == "AccountsReceivableSetoff" &&
                    ft.SourceDocumentId == setoff.Id &&
                    ft.SourceDetailId == detail.OriginalEntityId && 
                    ft.TransactionType == transactionType &&
                    !ft.IsReversed);
            }

            if (existingTransaction != null)
            {
                // 更新現有記錄
                existingTransaction.Amount = totalAmount; // 總金額 = 現金沖款 + 折讓
                existingTransaction.TransactionDate = setoff.SetoffDate;
                existingTransaction.PaymentMethodId = setoff.PaymentMethodId;
                existingTransaction.PaymentAccount = setoff.PaymentAccount;
                existingTransaction.UpdatedAt = DateTime.Now;
                
                // 更新折讓相關欄位
                existingTransaction.CurrentDiscountAmount = discountAmount;
                existingTransaction.AccumulatedDiscountAmount = detail.DynamicDiscountedAmount;
                
                // 更新備註
                if (discountAmount > 0)
                {
                    existingTransaction.Remarks = $"{description} - {detail.DocumentNumber} (現金: {cashAmount:N2}, 折讓: {discountAmount:N2})";
                }
                else
                {
                    existingTransaction.Remarks = $"{description} - {detail.DocumentNumber}";
                }

                var updateResult = await FinancialTransactionService.UpdateAsync(existingTransaction);
                
                if (!updateResult.IsSuccess)
                {
                    await NotificationService.ShowErrorAsync("財務記錄更新失敗", 
                        $"{description}記錄更新失敗: {updateResult.ErrorMessage}");
                }
                return;
            }

            // 新增模式或編輯模式下沒有找到現有記錄：創建新記錄
            var newTransaction = new FinancialTransaction
            {
                TransactionNumber = $"FT{DateTime.Now:yyyyMMddHHmmss}{detail.OriginalEntityId}",
                TransactionType = transactionType,
                TransactionDate = setoff.SetoffDate,
                Amount = totalAmount, // 總金額 = 現金沖款 + 折讓
                CustomerId = setoff.CustomerId,
                CompanyId = setoff.CompanyId,
                SourceDocumentType = "AccountsReceivableSetoff",
                SourceDocumentId = setoff.Id,
                SourceDocumentNumber = setoff.SetoffNumber,
                SourceDetailId = detail.OriginalEntityId, // 關鍵：明細級別追蹤
                PaymentMethodId = setoff.PaymentMethodId,
                PaymentAccount = setoff.PaymentAccount,
                CreatedAt = DateTime.Now,
                Status = EntityStatus.Active,
                // 設置折讓相關欄位
                CurrentDiscountAmount = discountAmount,
                AccumulatedDiscountAmount = detail.DiscountedAmount + discountAmount
            };
            
            // 設置備註
            if (discountAmount > 0)
            {
                newTransaction.Remarks = $"{description} - {detail.DocumentNumber} (現金: {cashAmount:N2}, 折讓: {discountAmount:N2})";
            }
            else
            {
                newTransaction.Remarks = $"{description} - {detail.DocumentNumber}";
            }

            // 使用服務創建記錄
            var result = await CreateFinancialTransactionAsync(newTransaction);
            
            if (!result.IsSuccess)
            {
                await NotificationService.ShowErrorAsync("財務記錄創建失敗", 
                    $"{description}記錄創建失敗: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(CreateOrUpdateFinancialTransactionAsync), GetType(),
                additionalData: $"處理財務交易記錄失敗 - TransactionType: {transactionType}, TotalAmount: {totalAmount}, CashAmount: {cashAmount}, DiscountAmount: {discountAmount}");
        }
    }

    /// <summary>
    /// 創建單筆財務交易記錄的輔助方法
    /// </summary>
    private async Task<ServiceResult> CreateFinancialTransactionAsync(FinancialTransaction transaction)
    {
        try
        {
            return await FinancialTransactionService.CreateAsync(transaction);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(CreateFinancialTransactionAsync), GetType());
            return ServiceResult.Failure($"創建財務交易記錄時發生錯誤: {ex.Message}");
        }
    }

    /// <summary>
    /// 清理不再需要的財務交易記錄
    /// </summary>
    private async Task CleanupObsoleteFinancialTransactionsAsync(AccountsReceivableSetoff setoff, List<SetoffDetailDto> selectedDetails)
    {
        try
        {
            // 獲取現有的財務交易記錄
            var existingTransactions = await FinancialTransactionService.GetTransactionsByCustomerIdAsync(setoff.CustomerId);
            
            // 篩選出屬於當前沖款單的記錄
            var currentSetoffTransactions = existingTransactions?.Where(ft => 
                ft.SourceDocumentType == "AccountsReceivableSetoff" &&
                ft.SourceDocumentId == setoff.Id &&
                !ft.IsReversed).ToList() ?? new List<FinancialTransaction>();

            foreach (var existingTransaction in currentSetoffTransactions)
            {
                // 檢查這筆交易記錄是否還需要（現在沖款和折讓都在同一筆記錄中）
                var stillNeeded = selectedDetails.Any(detail => 
                    detail.OriginalEntityId == existingTransaction.SourceDetailId &&
                    existingTransaction.TransactionType == FinancialTransactionTypeEnum.AccountsReceivableSetoff &&
                    (detail.ThisTimeAmount > 0 || detail.ThisTimeDiscountAmount > 0));

                if (!stillNeeded)
                {
                    // 這筆記錄不再需要，使用沖銷機制移除
                    var reversalResult = await FinancialTransactionService.ReverseTransactionAsync(
                        existingTransaction.Id, "編輯沖款單時移除不再需要的交易記錄");
                    
                    if (!reversalResult.IsSuccess)
                    {
                        await NotificationService.ShowWarningAsync("清理財務記錄警告", 
                            $"無法沖銷交易記錄 {existingTransaction.TransactionNumber}: {reversalResult.ErrorMessage}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(CleanupObsoleteFinancialTransactionsAsync), GetType(),
                additionalData: $"清理財務交易記錄失敗 - SetoffId: {setoff.Id}");
        }
    }

    // ===== Modal 管理器初始化方法 =====
    
    /// <summary>
    /// 初始化客戶 Modal 管理器
    /// </summary>
    private void InitializeCustomerModalManager()
    {
        customerModalManager = new RelatedEntityManagerBuilder<Customer>(NotificationService, "客戶")
            .WithPropertyName(nameof(AccountsReceivableSetoff.CustomerId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(customerId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.CustomerId = customerId;
                }
            })
            .WithCustomPostProcess(async customer => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }
    
    /// <summary>
    /// 初始化公司 Modal 管理器
    /// </summary>
    private void InitializeCompanyModalManager()
    {
        companyModalManager = new RelatedEntityManagerBuilder<Company>(NotificationService, "公司")
            .WithPropertyName(nameof(AccountsReceivableSetoff.CompanyId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(companyId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.CompanyId = companyId;
                }
            })
            .WithCustomPostProcess(async company => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }
    
    // ===== ActionButton 產生方法 =====
    
    /// <summary>
    /// 產生客戶操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetCustomerActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            customerModalManager, 
            nameof(AccountsReceivableSetoff.CustomerId)
        );
    }
    
    /// <summary>
    /// 產生公司操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetCompanyActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            companyModalManager, 
            nameof(AccountsReceivableSetoff.CompanyId)
        );
    }
    
    // ===== Modal 事件包裝器方法 =====
    
    /// <summary>
    /// 包裝客戶儲存事件
    /// </summary>
    private async Task OnCustomerSavedWrapper(Customer savedCustomer)
    {
        await customerModalManager.HandleEntitySavedAsync(savedCustomer, shouldAutoSelect: true);
    }
    
    /// <summary>
    /// 包裝公司儲存事件
    /// </summary>
    private async Task OnCompanySavedWrapper(Company savedCompany)
    {
        await companyModalManager.HandleEntitySavedAsync(savedCompany, shouldAutoSelect: true);
    }
    
    /// <summary>
    /// 處理欄位值變更事件 - 使用統一 Helper
    /// </summary>
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 使用統一 Helper 處理客戶欄位變更
            if (fieldChange.PropertyName == nameof(AccountsReceivableSetoff.CustomerId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    customerModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
                
                // 更新選中的客戶ID
                if (fieldChange.Value != null && int.TryParse(fieldChange.Value.ToString(), out var customerId) && customerId > 0)
                {
                    selectedCustomerId = customerId;
                }
                else
                {
                    selectedCustomerId = null;
                    // 清空明細資料
                    setoffDetails.Clear();
                }
                
                // 觸發重新渲染
                StateHasChanged();
            }
            
            // 使用統一 Helper 處理公司欄位變更
            if (fieldChange.PropertyName == nameof(AccountsReceivableSetoff.CompanyId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    companyModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
                
                // 觸發重新渲染
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("欄位變更處理時發生錯誤");
        }
    }

    // ===== 沖款明細管理相關方法 =====
    
    /// <summary>
    /// 載入沖款明細
    /// </summary>
    private async Task LoadSetoffDetails(int setoffId)
    {
        try
        {
            // 從服務載入沖款明細
            var setoff = await AccountsReceivableSetoffService.GetByIdAsync(setoffId);
            setoffDetails = setoff?.SetoffDetails?.ToList() ?? new List<AccountsReceivableSetoffDetail>();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSetoffDetails), GetType(), 
                additionalData: $"載入沖款明細失敗 - SetoffId: {setoffId}");
            setoffDetails = new List<AccountsReceivableSetoffDetail>();
        }
    }

    /// <summary>
    /// 驗證沖款明細 - 在儲存主檔之前執行
    /// </summary>
    private async Task<bool> ValidateSetoffDetailsAsync(AccountsReceivableSetoff setoff)
    {
        try
        {
            // 驗證沖款明細
            if (detailManagerComponent != null)
            {
                var validation = detailManagerComponent.ValidateSelection();
                if (!validation.IsValid)
                {
                    await NotificationService.ShowErrorAsync("明細驗證失敗", string.Join("\n", validation.Errors));
                    return false;
                }
            }
            
            // 驗證付款明細
            if (paymentDetailManagerComponent != null)
            {
                var paymentValidation = paymentDetailManagerComponent.ValidatePaymentDetails();
                if (!paymentValidation.IsValid)
                {
                    await NotificationService.ShowErrorAsync("付款明細驗證失敗", string.Join("\n", paymentValidation.Errors));
                    return false;
                }
            }
            
            return true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ValidateSetoffDetailsAsync), GetType());
            return false;
        }
    }

    /// <summary>
    /// AfterSave 回調方法 - 在主檔儲存後處理明細
    /// </summary>
    private async Task SaveSetoffDetailsAsync(AccountsReceivableSetoff setoff)
    {
        try
        {
            if (detailManagerComponent == null || setoff.Id <= 0)
                return;

            // 取得選中的明細項目並轉換為 AccountsReceivableSetoffDetail 實體
            var selectedDetails = detailManagerComponent.GetSelectedDetails();
            if (!selectedDetails.Any())
                return;

            var detailEntities = selectedDetails.Select(dto => 
            {
                // 計算正確的累計收款金額
                // 編輯模式：需要先減去原始的沖款和折讓金額，再加上新的金額
                // 新增模式：直接加上本次的沖款和折讓金額
                decimal afterReceivedAmount;
                if (dto.IsEditMode)
                {
                    // 編輯模式：移除原始金額後加上新金額
                    afterReceivedAmount = dto.SettledAmount - dto.OriginalThisTimeAmount - dto.OriginalThisTimeDiscountAmount 
                                        + dto.ThisTimeAmount + dto.ThisTimeDiscountAmount;
                }
                else
                {
                    // 新增模式：現有累計 + 本次金額
                    afterReceivedAmount = dto.SettledAmount + dto.ThisTimeAmount + dto.ThisTimeDiscountAmount;
                }
                
                var entity = new AccountsReceivableSetoffDetail
                {
                    SetoffId = setoff.Id,
                    SalesOrderDetailId = dto.Type == "SalesOrder" ? dto.OriginalEntityId : null,
                    SalesReturnDetailId = dto.Type == "SalesReturn" ? dto.OriginalEntityId : null,
                    ReceivableAmount = dto.TotalAmount,
                    SetoffAmount = dto.ThisTimeAmount, // 只記錄現金沖款金額
                    AfterReceivedAmount = afterReceivedAmount, // 使用正確計算的累計收款金額
                    // 將折讓金額記錄在備註中
                    Remarks = dto.ThisTimeDiscountAmount > 0 ? $"本次沖款：{dto.ThisTimeAmount:N2}，本次折讓：{dto.ThisTimeDiscountAmount:N2}" : null
                };
                
                // 偵錯日誌：確認 SetoffAmount 有正確設置
                Console.WriteLine($"[偵測用訊息] 明細 {dto.DocumentNumber}: ThisTimeAmount={dto.ThisTimeAmount}, SetoffAmount={entity.SetoffAmount}, AfterReceivedAmount={entity.AfterReceivedAmount}");
                
                return entity;
            }).ToList();

            // 使用服務批量建立明細
            var result = await AccountsReceivableSetoffDetailService.CreateBatchForSetoffAsync(setoff.Id, detailEntities);
            if (!result.IsSuccess)
            {
                await NotificationService.ShowErrorAsync("儲存沖款明細失敗", result.ErrorMessage ?? "未知錯誤");
                return;
            }

            // 步驟 1：根據付款明細計算總金額並更新主檔
            // 關鍵修改：使用付款明細的總額作為沖款總額
            decimal calculatedTotal = 0m;
            
            if (paymentDetailManagerComponent != null)
            {
                var paymentDetails = paymentDetailManagerComponent.GetPaymentDetails();
                calculatedTotal = paymentDetails.Sum(p => p.Amount);
                Console.WriteLine($"[計算] 根據付款明細計算總金額：{calculatedTotal}");
            }
            else
            {
                // 如果沒有付款明細組件，回退到使用沖款明細總額
                calculatedTotal = selectedDetails.Sum(d => d.ThisTimeAmount + d.ThisTimeDiscountAmount);
                Console.WriteLine($"[計算] 使用沖款明細計算總金額：{calculatedTotal}");
            }
            
            // 更新主檔總金額
            if (Math.Abs(setoff.TotalSetoffAmount - calculatedTotal) > 0.01m)
            {
                Console.WriteLine($"[修正] 更新主檔總金額：{setoff.TotalSetoffAmount} -> {calculatedTotal}");
                setoff.TotalSetoffAmount = calculatedTotal;
            }
            
            // 強制更新主檔以確保 TotalSetoffAmount 正確儲存
            var updateResult = await AccountsReceivableSetoffService.UpdateAsync(setoff);
            if (!updateResult.IsSuccess)
            {
                await NotificationService.ShowErrorAsync("更新沖款總額失敗", updateResult.ErrorMessage ?? "未知錯誤");
                return;
            }
            
            // 步驟 2：創建財務交易記錄
            await CreateFinancialTransactionRecordsAsync(setoff, selectedDetails);
            
            // 步驟 3：儲存付款明細（使用正確的 setoff.Id）
            if (paymentDetailManagerComponent != null)
            {
                // 關鍵修正：確保付款明細使用正確的 SetoffId
                var paymentDetails = paymentDetailManagerComponent.GetPaymentDetails();
                var deletedIds = paymentDetailManagerComponent.GetDeletedDetailIds();
                
                // 直接調用服務層方法，傳入正確的 setoff.Id
                var paymentResult = await SetoffPaymentDetailService.SavePaymentDetailsAsync(
                    setoff.Id,  // 使用 setoff.Id 而不是組件的 SetoffId 參數
                    paymentDetails,
                    deletedIds
                );
                
                if (!paymentResult.Success)
                {
                    await NotificationService.ShowErrorAsync("儲存付款明細失敗", paymentResult.Message);
                    return;
                }
            }
            
            // 步驟 4：儲存預收款明細
            if (prepaymentManagerComponent != null)
            {
                var prepaymentSaveResult = await prepaymentManagerComponent.SaveAsync();
                
                if (!prepaymentSaveResult.Success)
                {
                    await NotificationService.ShowErrorAsync("儲存預收款明細失敗", prepaymentSaveResult.Message);
                    return;
                }
            }
            
            await NotificationService.ShowSuccessAsync($"已儲存 {detailEntities.Count} 筆沖款明細，包含 {selectedDetails.Count(d => d.ThisTimeDiscountAmount > 0)} 筆折讓記錄");
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveSetoffDetailsAsync), GetType());
        }
    }

    /// <summary>
    /// 配置自訂模組
    /// </summary>
    private List<GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule> GetCustomModules()
    {
        try
        {
            if (editModalComponent == null)
            {
                return new List<GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule>();
            }

            return new List<GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule>
            {
                // 沖款明細管理器
                new GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule
                {
                    Title = "",
                    Order = 1,
                    CssClass = "mt-4",
                    IsVisible = true,
                    Content = CreateSetoffDetailManagerContent()
                },
                // 付款明細管理器
                new GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule
                {
                    Title = "",
                    Order = 2,
                    CssClass = "mt-3",
                    IsVisible = true,
                    Content = CreatePaymentDetailManagerContent()
                },
                // 預收款管理器
                new GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule
                {
                    Title = "",
                    Order = 3,
                    CssClass = "mt-3",
                    IsVisible = true,
                    Content = CreatePrepaymentManagerContent()
                },
            };
        }
        catch
        {
            // 如果創建模組時發生錯誤，返回空列表
            return new List<GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule>();
        }
    }

    /// <summary>
    /// 創建沖款明細管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreateSetoffDetailManagerContent() => __builder =>
    {
        try
        {
            @if (editModalComponent?.Entity != null)
            {
                @if (editModalComponent.Entity.CustomerId > 0)
                {
                    try
                    {
                        <SetoffDetailManagerComponent @ref="detailManagerComponent"
                                                     Mode="SetoffMode.Receivable"
                                                     CustomerId="@editModalComponent.Entity.CustomerId"
                                                     IsEditMode="@(SetoffId.HasValue && SetoffId.Value > 0)"
                                                     SetoffId="@SetoffId"
                                                     OnTotalAmountChanged="@HandleTotalSetoffAmountChanged"
                                                     IsReadOnly="false" />
                    }
                    catch
                    {
                        <div class="alert alert-warning" role="alert">
                            載入沖款明細管理器時發生錯誤，請重新整理頁面。
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info text-center" role="alert">
                        <i class="fas fa-info-circle me-2"></i>
                        請先選擇客戶後再進行沖款明細管理
                    </div>
                }
            }
            else
            {
                <div class="text-center py-3">
                    <span class="text-muted">請先選擇客戶後再管理沖款明細</span>
                </div>
            }
        }
        catch
        {
            <div class="alert alert-warning" role="alert">
                載入沖款明細管理器時發生錯誤，請重新整理頁面。
            </div>
        }
    };

    /// <summary>
    /// 創建付款明細管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreatePaymentDetailManagerContent() => __builder =>
    {
        try
        {
            @if (editModalComponent?.Entity != null)
            {
                @if (editModalComponent.Entity.CustomerId > 0)
                {
                    try
                    {
                        <SetoffPaymentDetailManagerComponent @ref="paymentDetailManagerComponent"
                                                             SetoffId="@SetoffId"
                                                             TotalSetoffAmount="@totalSetoffAmount"
                                                             TotalPrepaymentAmount="@totalPrepaymentAmount"
                                                             OnPaymentDetailsChanged="@HandlePaymentDetailsChanged"
                                                             OnTotalPaymentAmountChanged="@HandleTotalPaymentAmountChanged"
                                                             IsReadOnly="false"
                                                             IsEditMode="true" />
                    }
                    catch
                    {
                        <div class="alert alert-warning" role="alert">
                            載入付款明細管理器時發生錯誤，請重新整理頁面。
                        </div>
                    }
                }
            }
        }
        catch
        {
            <div class="alert alert-warning" role="alert">
                載入付款明細管理器時發生錯誤，請重新整理頁面。
            </div>
        }
    };

    /// <summary>
    /// 創建預收款管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreatePrepaymentManagerContent() => __builder =>
    {
        try
        {
            @if (editModalComponent?.Entity != null)
            {
                @if (editModalComponent.Entity.CustomerId > 0)
                {
                    try
                    {
                        <SetoffPrepaymentManagerComponent @ref="prepaymentManagerComponent"
                                                         Mode="SetoffMode.Receivable"
                                                         CustomerId="@editModalComponent.Entity.CustomerId"
                                                         IsEditMode="@(SetoffId.HasValue && SetoffId.Value > 0)"
                                                         SetoffId="@SetoffId"
                                                         SetoffNumber="@editModalComponent.Entity.SetoffNumber"
                                                         OnTotalUseAmountChanged="@HandleTotalPrepaymentAmountChanged"
                                                         IsReadOnly="false" />
                    }
                    catch
                    {
                        <div class="alert alert-warning" role="alert">
                            載入預收款管理器時發生錯誤，請重新整理頁面。
                        </div>
                    }
                }
            }
        }
        catch
        {
            <div class="alert alert-warning" role="alert">
                載入預收款管理器時發生錯誤，請重新整理頁面。
            </div>
        }
    };

    /// <summary>
    /// 處理付款明細變更
    /// </summary>
    private async Task HandlePaymentDetailsChanged(List<SetoffPaymentDetailDto> paymentDetails)
    {
        try
        {
            // 可以在這裡處理付款明細變更的邏輯
            // 不需要調用 StateHasChanged()，避免不必要的重新渲染
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandlePaymentDetailsChanged), GetType());
        }
    }

    /// <summary>
    /// 處理付款總額變更
    /// </summary>
    private async Task HandleTotalPaymentAmountChanged(decimal amount)
    {
        try
        {
            totalPaymentAmount = amount;
            // 不需要調用 StateHasChanged()，避免觸發整個父組件和所有子組件的重新渲染
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleTotalPaymentAmountChanged), GetType());
        }
    }

    /// <summary>
    /// 處理預收款總額變更
    /// </summary>
    private async Task HandleTotalPrepaymentAmountChanged(decimal amount)
    {
        try
        {
            totalPrepaymentAmount = amount;
            // 不需要調用 StateHasChanged()，避免觸發整個父組件和所有子組件的重新渲染
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleTotalPrepaymentAmountChanged), GetType());
        }
    }

    /// <summary>
    /// 處理總沖款金額變更（從 SetoffDetailManagerComponent 事件觸發）
    /// 注意：不再即時更新主表實體，僅更新本地變數供付款明細組件使用
    /// 實際的 TotalSetoffAmount 將在儲存時根據付款明細總額計算
    /// </summary>
    private async Task HandleTotalSetoffAmountChanged(decimal amount)
    {
        try
        {
            // 只更新本地變數，用於傳遞給 SetoffPaymentDetailManagerComponent
            totalSetoffAmount = amount;
            
            // 需要 StateHasChanged() 來更新 SetoffPaymentDetailManagerComponent 的 TotalSetoffAmount 參數
            // SetoffDetailManagerComponent 已實現 ShouldRender() 優化，不會不必要地重新渲染
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleTotalSetoffAmountChanged), GetType());
        }
    }

    /// <summary>
    /// 處理沖款明細金額變更 - 更新總沖款金額
    /// </summary>
    private void UpdateTotalSetoffAmount()
    {
        if (detailManagerComponent != null)
        {
            var selectedDetails = detailManagerComponent.GetSelectedDetails();
            totalSetoffAmount = selectedDetails.Sum(d => d.ThisTimeAmount + d.ThisTimeDiscountAmount);
            StateHasChanged();
        }
    }
}