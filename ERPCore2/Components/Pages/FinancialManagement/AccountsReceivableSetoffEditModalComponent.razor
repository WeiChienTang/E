@* 應收帳款沖款編輯組件 *@
@inject IAccountsReceivableSetoffService AccountsReceivableSetoffService
@inject IAccountsReceivableSetoffDetailService AccountsReceivableSetoffDetailService
@inject ICustomerService CustomerService
@inject ICompanyService CompanyService
@inject IPaymentMethodService PaymentMethodService
@inject IEmployeeService EmployeeService
@inject INotificationService NotificationService
@inject IFinancialTransactionService FinancialTransactionService
@inject ActionButtonHelper ActionButtonHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

<GenericEditModalComponent TEntity="AccountsReceivableSetoff" 
                          TService="IAccountsReceivableSetoffService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@SetoffId"
                          Service="@AccountsReceivableSetoffService"
                          EntityName="應收帳款沖款"
                          EntityNamePlural="沖款單"
                          ModalTitle="@(SetoffId.HasValue ? "編輯應收帳款沖款" : "新增應收帳款沖款")"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadSetoffData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(SetoffId.HasValue ? "應收帳款沖款更新成功" : "應收帳款沖款新增成功")"
                          SaveFailureMessage="應收帳款沖款儲存失敗"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          CustomValidator="@ValidateSetoffDetailsAsync"
                          AfterSave="@SaveSetoffDetailsAsync"
                          CustomModules="@GetCustomModules()" />

@* 客戶編輯 Modal *@
<CustomerEditModalComponent @ref="customerEditModal"
                           IsVisible="@customerModalManager.IsModalVisible"
                           IsVisibleChanged="@customerModalManager.HandleModalVisibilityChangedAsync"
                           CustomerId="@customerModalManager.SelectedEntityId"
                           OnCustomerSaved="@OnCustomerSavedWrapper"
                           OnCancel="@customerModalManager.HandleModalCancelAsync" />

@* 公司編輯 Modal *@
<CompanyEditModalComponent @ref="companyEditModal"
                          IsVisible="@companyModalManager.IsModalVisible"
                          IsVisibleChanged="@companyModalManager.HandleModalVisibilityChangedAsync"
                          CompanyId="@companyModalManager.SelectedEntityId"
                          OnCompanySaved="@OnCompanySavedWrapper"
                          OnCancel="@companyModalManager.HandleModalCancelAsync" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? SetoffId { get; set; }
    [Parameter] public EventCallback<AccountsReceivableSetoff> OnSetoffSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>? editModalComponent;
    private AccountsReceivableSetoffDetailManagerComponent? detailManagerComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 相關資料
    private List<Customer> customers = new();
    private List<Company> companies = new();
    private List<PaymentMethod> paymentMethods = new();
    private List<Employee> employees = new();
    
    // 沖款明細相關狀態
    private int? selectedCustomerId = null;
    private List<AccountsReceivableSetoffDetail> setoffDetails = new();
    
    // Modal 管理器
    private CustomerEditModalComponent? customerEditModal;
    private RelatedEntityModalManager<Customer> customerModalManager = default!;
    private CompanyEditModalComponent? companyEditModal;
    private RelatedEntityModalManager<Company> companyModalManager = default!;

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeCustomerModalManager();
            InitializeCompanyModalManager();
            
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化應收帳款沖款編輯組件失敗");
        }
    }

    /// <summary>
    /// 載入沖款資料
    /// </summary>
    private async Task<AccountsReceivableSetoff?> LoadSetoffData()
    {
        try
        {
            if (SetoffId.HasValue && SetoffId.Value > 0)
            {
                var setoff = await AccountsReceivableSetoffService.GetByIdAsync(SetoffId.Value);
                return setoff;
            }
            else
            {
                // 新增模式：生成沖款單號並設置預設公司
                var primaryCompany = await CompanyService.GetPrimaryCompanyAsync();
                var newSetoff = new AccountsReceivableSetoff
                {
                    SetoffNumber = await GenerateSetoffNumberAsync(),
                    SetoffDate = DateTime.Today,
                    CompanyId = primaryCompany?.Id ?? 0
                };
                return newSetoff;
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSetoffData), GetType(), additionalData: $"載入應收帳款沖款資料失敗 - SetoffId: {SetoffId}");
            return null;
        }
    }

    /// <summary>
    /// 載入額外資料
    /// </summary>
    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            await LoadCustomersAsync();
            await LoadCompaniesAsync();
            await LoadPaymentMethodsAsync();
            await LoadEmployeesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalDataAsync), GetType(), additionalData: "載入額外資料失敗");
        }
    }

    private async Task LoadCustomersAsync()
    {
        try
        {
            customers = await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCustomersAsync), GetType(), additionalData: "載入客戶資料失敗");
            customers = new List<Customer>();
        }
    }

    private async Task LoadPaymentMethodsAsync()
    {
        try
        {
            paymentMethods = await PaymentMethodService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPaymentMethodsAsync), GetType(), additionalData: "載入付款方式資料失敗");
            paymentMethods = new List<PaymentMethod>();
        }
    }

    private async Task LoadCompaniesAsync()
    {
        try
        {
            companies = await CompanyService.GetActiveCompaniesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCompaniesAsync), GetType(), additionalData: "載入公司資料失敗");
            companies = new List<Company>();
        }
    }

    private async Task LoadEmployeesAsync()
    {
        try
        {
            employees = await EmployeeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadEmployeesAsync), GetType(), additionalData: "載入員工資料失敗");
            employees = new List<Employee>();
        }
    }

    /// <summary>
    /// 初始化表單欄位
    /// </summary>
    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.SetoffNumber),
                    Label = "沖款單號",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    IsReadOnly = true,
                    HelpText = "系統自動產生的沖款單號"
                },

                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.CustomerId),
                    Label = "客戶",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇客戶",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "輸入客戶名稱進行搜尋，或直接選擇",
                    ActionButtons = await GetCustomerActionButtonsAsync()
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.CompanyId),
                    Label = "公司",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請選擇公司",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "選擇適用的公司",
                    ActionButtons = await GetCompanyActionButtonsAsync()
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.SetoffDate),
                    Label = "沖款日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    HelpText = "沖款的日期"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.TotalSetoffAmount),
                    Label = "總沖款金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    IsReadOnly = true,
                    HelpText = "由沖款明細自動計算總金額"
                },
                
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註",
                    HelpText = "備註說明",
                    MaxLength = 500,
                    Rows = 2,
                    ContainerCssClass = "col-12"
                } 
            };

            // 初始化表單區段
            formSections = new Dictionary<string, string>
            {
                { nameof(AccountsReceivableSetoff.SetoffNumber), "基本資訊" },                
                { nameof(AccountsReceivableSetoff.CustomerId), "基本資訊" },
                { nameof(AccountsReceivableSetoff.CompanyId), "基本資訊" },
                { nameof(AccountsReceivableSetoff.SetoffDate), "基本資訊" },
                { nameof(AccountsReceivableSetoff.TotalSetoffAmount), "金額資訊" },
                { nameof(AccountsReceivableSetoff.Remarks), "其他資訊" }
            };

            
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFieldsAsync), GetType());
        }
    }

    /// <summary>
    /// 取得表單欄位清單
    /// </summary>
    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(AccountsReceivableSetoff.CompanyId), companies },
            { nameof(AccountsReceivableSetoff.CustomerId), customers },
            { nameof(AccountsReceivableSetoff.PaymentMethodId), paymentMethods },
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(AccountsReceivableSetoff.CompanyId), "CompanyName" },
            { nameof(AccountsReceivableSetoff.CustomerId), "CompanyName" },
            { nameof(AccountsReceivableSetoff.PaymentMethodId), "Name" },
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(AccountsReceivableSetoff.CompanyId), "Id" },
            { nameof(AccountsReceivableSetoff.CustomerId), "Id" },
            { nameof(AccountsReceivableSetoff.PaymentMethodId), "Id" },
        };
    }

    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(AccountsReceivableSetoff.CustomerId), searchTerm => new Dictionary<string, object?>
                {
                    { nameof(Customer.CompanyName), searchTerm }
                }
            }
        };
    }

    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(AccountsReceivableSetoff.CustomerId), customerModalManager },
            { nameof(AccountsReceivableSetoff.CompanyId), companyModalManager }
        };
    }

    /// <summary>
    /// 產生沖款單號
    /// </summary>
    private async Task<string> GenerateSetoffNumberAsync()
    {
        try
        {
            return await CodeGenerationHelper.GenerateEntityCodeAsync(
                AccountsReceivableSetoffService,
                "ARO", // Accounts Receivable Offset
                (service, code, excludeId) => service.IsSetoffNumberExistsAsync(code, excludeId)
            );
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GenerateSetoffNumberAsync), GetType(), additionalData: "產生沖款單號失敗");
            return $"ARO{DateTime.Now:yyyyMMddHHmmss}";
        }
    }

    /// <summary>
    /// 處理儲存成功事件
    /// </summary>
    private async Task HandleSaveSuccess()
    {
        try
        {
            if (OnSetoffSaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnSetoffSaved.InvokeAsync(editModalComponent.Entity);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleSaveSuccess), GetType());
        }
    }

    /// <summary>
    /// 處理取消事件
    /// </summary>
    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleCancel), GetType());
        }
    }

    /// <summary>
    /// 創建財務交易記錄
    /// </summary>
    private async Task CreateFinancialTransactionRecordsAsync(AccountsReceivableSetoff setoff, List<SetoffDetailDto> selectedDetails)
    {
        try
        {
            foreach (var detail in selectedDetails)
            {
                // 創建沖款交易記錄
                if (detail.ThisTimeAmount > 0)
                {
                    var setoffTransaction = new FinancialTransaction
                    {
                        TransactionNumber = $"FT{DateTime.Now:yyyyMMddHHmmss}{detail.OriginalEntityId}",
                        TransactionType = FinancialTransactionTypeEnum.AccountsReceivableSetoff,
                        TransactionDate = setoff.SetoffDate,
                        Amount = detail.ThisTimeAmount,
                        Description = $"應收沖款 - {detail.DocumentNumber}",
                        CustomerId = setoff.CustomerId,
                        CompanyId = setoff.CompanyId,
                        SourceDocumentType = "AccountsReceivableSetoff",
                        SourceDocumentId = setoff.Id,
                        SourceDocumentNumber = setoff.SetoffNumber,
                        SourceDetailId = detail.OriginalEntityId, // 關鍵：明細級別追蹤
                        PaymentMethodId = setoff.PaymentMethodId,
                        PaymentAccount = setoff.PaymentAccount,
                        CreatedAt = DateTime.Now,
                        Status = EntityStatus.Active
                    };

                    // 使用服務創建記錄
                    var result = await CreateFinancialTransactionAsync(setoffTransaction);
                    if (!result.IsSuccess)
                    {
                        await NotificationService.ShowErrorAsync("財務記錄創建失敗", $"沖款記錄創建失敗: {result.ErrorMessage}");
                    }
                }

                // 創建折讓交易記錄
                if (detail.ThisTimeDiscountAmount > 0)
                {
                    var discountTransaction = new FinancialTransaction
                    {
                        TransactionNumber = $"FT{DateTime.Now:yyyyMMddHHmmss}{detail.OriginalEntityId}D",
                        TransactionType = FinancialTransactionTypeEnum.AccountsReceivableDiscount,
                        TransactionDate = setoff.SetoffDate,
                        Amount = detail.ThisTimeDiscountAmount,
                        Description = $"應收折讓 - {detail.DocumentNumber}",
                        CustomerId = setoff.CustomerId,
                        CompanyId = setoff.CompanyId,
                        SourceDocumentType = "AccountsReceivableSetoff",
                        SourceDocumentId = setoff.Id,
                        SourceDocumentNumber = setoff.SetoffNumber,
                        SourceDetailId = detail.OriginalEntityId, // 關鍵：明細級別追蹤
                        PaymentMethodId = setoff.PaymentMethodId,
                        PaymentAccount = setoff.PaymentAccount,
                        CreatedAt = DateTime.Now,
                        Status = EntityStatus.Active
                    };

                    // 使用服務創建記錄
                    var result = await CreateFinancialTransactionAsync(discountTransaction);
                    if (!result.IsSuccess)
                    {
                        await NotificationService.ShowErrorAsync("財務記錄創建失敗", $"折讓記錄創建失敗: {result.ErrorMessage}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(CreateFinancialTransactionRecordsAsync), GetType(), 
                additionalData: $"創建財務交易記錄失敗 - SetoffId: {setoff.Id}");
        }
    }

    /// <summary>
    /// 創建單筆財務交易記錄的輔助方法
    /// </summary>
    private async Task<ServiceResult> CreateFinancialTransactionAsync(FinancialTransaction transaction)
    {
        try
        {
            // 使用注入的 FinancialTransactionService 創建記錄
            var result = await FinancialTransactionService.CreateAsync(transaction);
            
            return result;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(CreateFinancialTransactionAsync), GetType(), 
                additionalData: $"創建財務交易記錄失敗 - TransactionNumber: {transaction.TransactionNumber}");
            return ServiceResult.Failure("創建財務交易記錄時發生錯誤");
        }
    }

    // ===== Modal 管理器初始化方法 =====
    
    /// <summary>
    /// 初始化客戶 Modal 管理器
    /// </summary>
    private void InitializeCustomerModalManager()
    {
        customerModalManager = new RelatedEntityManagerBuilder<Customer>(NotificationService, "客戶")
            .WithPropertyName(nameof(AccountsReceivableSetoff.CustomerId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(customerId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.CustomerId = customerId;
                }
            })
            .WithCustomPostProcess(async customer => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }
    
    /// <summary>
    /// 初始化公司 Modal 管理器
    /// </summary>
    private void InitializeCompanyModalManager()
    {
        companyModalManager = new RelatedEntityManagerBuilder<Company>(NotificationService, "公司")
            .WithPropertyName(nameof(AccountsReceivableSetoff.CompanyId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(companyId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.CompanyId = companyId;
                }
            })
            .WithCustomPostProcess(async company => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }
    
    // ===== ActionButton 產生方法 =====
    
    /// <summary>
    /// 產生客戶操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetCustomerActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            customerModalManager, 
            nameof(AccountsReceivableSetoff.CustomerId)
        );
    }
    
    /// <summary>
    /// 產生公司操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetCompanyActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            companyModalManager, 
            nameof(AccountsReceivableSetoff.CompanyId)
        );
    }
    
    // ===== Modal 事件包裝器方法 =====
    
    /// <summary>
    /// 包裝客戶儲存事件
    /// </summary>
    private async Task OnCustomerSavedWrapper(Customer savedCustomer)
    {
        await customerModalManager.HandleEntitySavedAsync(savedCustomer, shouldAutoSelect: true);
    }
    
    /// <summary>
    /// 包裝公司儲存事件
    /// </summary>
    private async Task OnCompanySavedWrapper(Company savedCompany)
    {
        await companyModalManager.HandleEntitySavedAsync(savedCompany, shouldAutoSelect: true);
    }
    
    /// <summary>
    /// 處理欄位值變更事件 - 使用統一 Helper
    /// </summary>
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 使用統一 Helper 處理客戶欄位變更
            if (fieldChange.PropertyName == nameof(AccountsReceivableSetoff.CustomerId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    customerModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
                
                // 更新選中的客戶ID
                if (fieldChange.Value != null && int.TryParse(fieldChange.Value.ToString(), out var customerId) && customerId > 0)
                {
                    selectedCustomerId = customerId;
                }
                else
                {
                    selectedCustomerId = null;
                    // 清空明細資料
                    setoffDetails.Clear();
                }
                
                // 觸發重新渲染
                StateHasChanged();
            }
            
            // 使用統一 Helper 處理公司欄位變更
            if (fieldChange.PropertyName == nameof(AccountsReceivableSetoff.CompanyId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    companyModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
                
                // 觸發重新渲染
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("欄位變更處理時發生錯誤");
        }
    }

    // ===== 沖款明細管理相關方法 =====
    
    /// <summary>
    /// 載入沖款明細
    /// </summary>
    private async Task LoadSetoffDetails(int setoffId)
    {
        try
        {
            // 從服務載入沖款明細
            var setoff = await AccountsReceivableSetoffService.GetByIdAsync(setoffId);
            setoffDetails = setoff?.SetoffDetails?.ToList() ?? new List<AccountsReceivableSetoffDetail>();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSetoffDetails), GetType(), 
                additionalData: $"載入沖款明細失敗 - SetoffId: {setoffId}");
            setoffDetails = new List<AccountsReceivableSetoffDetail>();
        }
    }

    /// <summary>
    /// 驗證沖款明細 - 在儲存主檔之前執行
    /// </summary>
    private async Task<bool> ValidateSetoffDetailsAsync(AccountsReceivableSetoff setoff)
    {
        try
        {
            if (detailManagerComponent != null)
            {
                var validation = detailManagerComponent.ValidateSelection();
                if (!validation.IsValid)
                {
                    await NotificationService.ShowErrorAsync("明細驗證失敗", string.Join("\n", validation.Errors));
                    return false;
                }
            }
            return true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ValidateSetoffDetailsAsync), GetType());
            return false;
        }
    }

    /// <summary>
    /// AfterSave 回調方法 - 在主檔儲存後處理明細
    /// </summary>
    private async Task SaveSetoffDetailsAsync(AccountsReceivableSetoff setoff)
    {
        try
        {
            if (detailManagerComponent == null || setoff.Id <= 0)
                return;

            // 取得選中的明細項目並轉換為 AccountsReceivableSetoffDetail 實體
            var selectedDetails = detailManagerComponent.GetSelectedDetails();
            if (!selectedDetails.Any())
                return;

            var detailEntities = selectedDetails.Select(dto => new AccountsReceivableSetoffDetail
            {
                SetoffId = setoff.Id,
                SalesOrderDetailId = dto.Type == "SalesOrder" ? dto.OriginalEntityId : null,
                SalesReturnDetailId = dto.Type == "SalesReturn" ? dto.OriginalEntityId : null,
                ReceivableAmount = dto.TotalAmount,
                SetoffAmount = dto.ThisTimeAmount,
                // 暫時將折讓金額存在備註中，直到實體結構更新
                PreviousReceivedAmount = dto.SettledAmount,
                AfterReceivedAmount = dto.SettledAmount + dto.ThisTimeAmount + dto.ThisTimeDiscountAmount,
                RemainingAmount = dto.TotalAmount - (dto.SettledAmount + dto.ThisTimeAmount + dto.ThisTimeDiscountAmount),
                IsFullyReceived = (dto.TotalAmount - (dto.SettledAmount + dto.ThisTimeAmount + dto.ThisTimeDiscountAmount)) <= 0,
                DocumentNumber = dto.DocumentNumber,
                ProductName = dto.ProductName,
                Quantity = dto.Quantity,
                DocumentType = dto.Type,
                // 暫時將折讓金額記錄在備註中
                Remarks = dto.ThisTimeDiscountAmount > 0 ? $"本次折讓：{dto.ThisTimeDiscountAmount:N2}" : null
            }).ToList();

            // 使用服務批量建立明細
            var result = await AccountsReceivableSetoffDetailService.CreateBatchForSetoffAsync(setoff.Id, detailEntities);
            if (!result.IsSuccess)
            {
                await NotificationService.ShowErrorAsync("儲存沖款明細失敗", result.ErrorMessage ?? "未知錯誤");
                return;
            }

            // 創建財務交易記錄
            await CreateFinancialTransactionRecordsAsync(setoff, selectedDetails);
            
            // 重新計算並更新主檔總金額（包含沖款和折讓）
            setoff.TotalSetoffAmount = selectedDetails.Sum(d => d.ThisTimeAmount + d.ThisTimeDiscountAmount);
            await AccountsReceivableSetoffService.UpdateAsync(setoff);
            
            await NotificationService.ShowSuccessAsync($"已儲存 {detailEntities.Count} 筆沖款明細，包含 {selectedDetails.Count(d => d.ThisTimeDiscountAmount > 0)} 筆折讓記錄");
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveSetoffDetailsAsync), GetType());
        }
    }

    /// <summary>
    /// 配置自訂模組
    /// </summary>
    private List<GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule> GetCustomModules()
    {
        try
        {
            if (editModalComponent == null)
            {
                return new List<GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule>();
            }

            return new List<GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule>
            {
                new GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule
                {
                    Title = "",
                    Order = 1,
                    CssClass = "mt-4",
                    IsVisible = true,
                    Content = CreateSetoffDetailManagerContent()
                }
            };
        }
        catch
        {
            // 如果創建模組時發生錯誤，返回空列表
            return new List<GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>.CustomModule>();
        }
    }

    /// <summary>
    /// 創建沖款明細管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreateSetoffDetailManagerContent() => __builder =>
    {
        try
        {
            @if (editModalComponent?.Entity != null)
            {
                @if (editModalComponent.Entity.CustomerId > 0)
                {
                    try
                    {
                        <AccountsReceivableSetoffDetailManagerComponent @ref="detailManagerComponent"
                                                                       CustomerId="@editModalComponent.Entity.CustomerId"
                                                                       IsEditMode="@(SetoffId.HasValue && SetoffId.Value > 0)"
                                                                       SetoffId="@SetoffId"
                                                                       IsReadOnly="false" />
                    }
                    catch
                    {
                        <div class="alert alert-warning" role="alert">
                            載入明細管理器時發生錯誤，請重新整理頁面。
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info text-center" role="alert">
                        <i class="fas fa-info-circle me-2"></i>
                        請先選擇客戶後再進行沖款明細管理
                    </div>
                }
            }
            else
            {
                <div class="text-center py-3">
                    <span class="text-muted">請先選擇客戶後再管理沖款明細</span>
                </div>
            }
        }
        catch
        {
            <div class="alert alert-warning" role="alert">
                載入明細管理器時發生錯誤，請重新整理頁面。
            </div>
        }
    };
}