@* 應收帳款沖款編輯組件 *@
@inject IAccountsReceivableSetoffService AccountsReceivableSetoffService
@inject ICustomerService CustomerService
@inject IPaymentMethodService PaymentMethodService
@inject IEmployeeService EmployeeService
@inject INotificationService NotificationService

<GenericEditModalComponent TEntity="AccountsReceivableSetoff" 
                          TService="IAccountsReceivableSetoffService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@SetoffId"
                          Service="@AccountsReceivableSetoffService"
                          EntityName="應收帳款沖款"
                          EntityNamePlural="沖款單"
                          ModalTitle="@(SetoffId.HasValue ? "編輯應收帳款沖款" : "新增應收帳款沖款")"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          DataLoader="@LoadSetoffData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(SetoffId.HasValue ? "應收帳款沖款更新成功" : "應收帳款沖款新增成功")"
                          SaveFailureMessage="應收帳款沖款儲存失敗"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? SetoffId { get; set; }
    [Parameter] public EventCallback<AccountsReceivableSetoff> OnSetoffSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    
    // 相關資料
    private List<Customer> customers = new();
    private List<PaymentMethod> paymentMethods = new();
    private List<Employee> employees = new();

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadAdditionalDataAsync();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化應收帳款沖款編輯組件失敗");
        }
    }

    /// <summary>
    /// 載入沖款資料
    /// </summary>
    private async Task<AccountsReceivableSetoff?> LoadSetoffData()
    {
        try
        {
            if (SetoffId.HasValue && SetoffId.Value > 0)
            {
                var setoff = await AccountsReceivableSetoffService.GetByIdAsync(SetoffId.Value);
                return setoff;
            }
            else
            {
                // 新增模式：生成沖款單號
                var newSetoff = new AccountsReceivableSetoff
                {
                    SetoffNumber = await GenerateSetoffNumberAsync(),
                    SetoffDate = DateTime.Today
                };
                return newSetoff;
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSetoffData), GetType(), additionalData: $"載入應收帳款沖款資料失敗 - SetoffId: {SetoffId}");
            return null;
        }
    }

    /// <summary>
    /// 載入額外資料
    /// </summary>
    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            await LoadCustomersAsync();
            await LoadPaymentMethodsAsync();
            await LoadEmployeesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalDataAsync), GetType(), additionalData: "載入額外資料失敗");
        }
    }

    private async Task LoadCustomersAsync()
    {
        try
        {
            customers = await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCustomersAsync), GetType(), additionalData: "載入客戶資料失敗");
            customers = new List<Customer>();
        }
    }

    private async Task LoadPaymentMethodsAsync()
    {
        try
        {
            paymentMethods = await PaymentMethodService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPaymentMethodsAsync), GetType(), additionalData: "載入付款方式資料失敗");
            paymentMethods = new List<PaymentMethod>();
        }
    }

    private async Task LoadEmployeesAsync()
    {
        try
        {
            employees = await EmployeeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadEmployeesAsync), GetType(), additionalData: "載入員工資料失敗");
            employees = new List<Employee>();
        }
    }

    /// <summary>
    /// 初始化表單欄位
    /// </summary>
    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.SetoffNumber),
                    Label = "沖款單號",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    IsReadOnly = true,
                    HelpText = "系統自動產生的沖款單號"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.SetoffDate),
                    Label = "沖款日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    HelpText = "沖款的日期"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.CustomerId),
                    Label = "客戶",
                    FieldType = FormFieldType.AutoComplete,
                    IsRequired = true,
                    HelpText = "選擇要進行沖款的客戶"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.TotalSetoffAmount),
                    Label = "總沖款金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    IsReadOnly = true,
                    HelpText = "由沖款明細自動計算總金額"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.PaymentMethodId),
                    Label = "收款方式",
                    FieldType = FormFieldType.AutoComplete,
                    HelpText = "選擇收款方式"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.PaymentAccount),
                    Label = "收款帳戶",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入收款帳戶或現金",
                    HelpText = "收款的銀行帳戶或現金"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.IsCompleted),
                    Label = "是否已完成",
                    FieldType = FormFieldType.Checkbox,
                    HelpText = "勾選表示此沖款已完成"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.CompletedDate),
                    Label = "完成日期",
                    FieldType = FormFieldType.Date,
                    HelpText = "沖款完成的日期"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.ApproverId),
                    Label = "審核者",
                    FieldType = FormFieldType.AutoComplete,
                    HelpText = "選擇審核者"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.ApprovedDate),
                    Label = "審核日期",
                    FieldType = FormFieldType.Date,
                    HelpText = "審核的日期"
                },
                new()
                {
                    PropertyName = nameof(AccountsReceivableSetoff.ApprovalRemarks),
                    Label = "審核備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入審核備註",
                    HelpText = "審核時的備註說明"
                }
            };
        }
        catch (Exception ex)
        {
            ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFields), GetType());
        }
    }

    /// <summary>
    /// 取得表單欄位清單
    /// </summary>
    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(AccountsReceivableSetoff.CustomerId), customers },
            { nameof(AccountsReceivableSetoff.PaymentMethodId), paymentMethods },
            { nameof(AccountsReceivableSetoff.ApproverId), employees }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(AccountsReceivableSetoff.CustomerId), "CompanyName" },
            { nameof(AccountsReceivableSetoff.PaymentMethodId), "Name" },
            { nameof(AccountsReceivableSetoff.ApproverId), "Name" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(AccountsReceivableSetoff.CustomerId), "Id" },
            { nameof(AccountsReceivableSetoff.PaymentMethodId), "Id" },
            { nameof(AccountsReceivableSetoff.ApproverId), "Id" }
        };
    }

    /// <summary>
    /// 產生沖款單號
    /// </summary>
    private async Task<string> GenerateSetoffNumberAsync()
    {
        try
        {
            return await CodeGenerationHelper.GenerateEntityCodeAsync(
                AccountsReceivableSetoffService,
                "ARO", // Accounts Receivable Offset
                (service, code, excludeId) => service.IsSetoffNumberExistsAsync(code, excludeId)
            );
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GenerateSetoffNumberAsync), GetType(), additionalData: "產生沖款單號失敗");
            return $"ARO{DateTime.Now:yyyyMMddHHmmss}";
        }
    }

    /// <summary>
    /// 處理儲存成功事件
    /// </summary>
    private async Task HandleSaveSuccess()
    {
        try
        {
            if (OnSetoffSaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnSetoffSaved.InvokeAsync(editModalComponent.Entity);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleSaveSuccess), GetType());
        }
    }

    /// <summary>
    /// 處理取消事件
    /// </summary>
    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleCancel), GetType());
        }
    }
}