@* 可重用的貨幣編輯組件 - 可在任何頁面中嵌入 *@
@inject ICurrencyService CurrencyService
@inject INotificationService NotificationService

<GenericEditModalComponent TEntity="Currency" 
                          TService="ICurrencyService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@CurrencyId"
                          Service="@CurrencyService"
                          EntityName="貨幣"
                          EntityNamePlural="貨幣"
                          ModalTitle="@(CurrencyId.HasValue ? "編輯貨幣" : "新增貨幣")"
                          Size="GenericEditModalComponent<Currency, ICurrencyService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          DataLoader="@LoadCurrencyData"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(CurrencyId.HasValue ? "貨幣更新成功" : "貨幣新增成功")"
                          SaveFailureMessage="貨幣儲存失敗"
                          RequiredPermission="Currency.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel" />

@code {
    // ===== 參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? CurrencyId { get; set; }
    [Parameter] public EventCallback<Currency> OnCurrencySaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public Dictionary<string, object?>? PrefilledValues { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<Currency, ICurrencyService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();

    // ===== 生命週期 =====
    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            InitializeFormFields();
        }
    }

    // ===== 事件處理 =====
    private async Task HandleSaveSuccess()
    {
        try
        {
            // 如果父組件需要知道貨幣已儲存
            if (OnCurrencySaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnCurrencySaved.InvokeAsync(editModalComponent.Entity);
            }

            // 關閉 Modal
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }

            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理取消事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task CloseModal()
    {
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(false);
        }
    }

    // ===== 資料載入 =====
    private async Task<Currency?> LoadCurrencyData()
    {
        try
        {
            if (!CurrencyId.HasValue) 
            {
                // 新增模式：建立新的貨幣實體並生成代碼
                var newCurrency = new Currency
                {
                    Name = string.Empty,
                    Code = await GenerateCurrencyCodeAsync(),
                    Status = EntityStatus.Active,
                    IsBaseCurrency = false,
                    ExchangeRate = 1m
                };
                
                // 應用預填值
                if (PrefilledValues != null)
                {
                    foreach (var kvp in PrefilledValues)
                    {
                        var property = typeof(Currency).GetProperty(kvp.Key);
                        if (property != null && property.CanWrite && kvp.Value != null)
                        {
                            try
                            {
                                // 轉換值的類型
                                var convertedValue = Convert.ChangeType(kvp.Value, property.PropertyType);
                                property.SetValue(newCurrency, convertedValue);
                            }
                            catch (Exception)
                            {
                                // 忽略轉換失敗的值
                            }
                        }
                    }
                }
                
                return newCurrency;
            }

            var currency = await CurrencyService.GetByIdAsync(CurrencyId.Value);            
            
            if (currency == null)
            {
                // 如果找不到貨幣，建立新的預設貨幣
                return new Currency
                {
                    Status = EntityStatus.Active,
                    IsBaseCurrency = false,
                    ExchangeRate = 1m
                };
            }
            return currency;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入貨幣資料時發生錯誤：{ex.Message}");
            
            // 設定安全的預設值，確保程式不會崩潰
            return new Currency
            {
                Code = "ERROR",
                Name = "ERROR",
                Status = EntityStatus.Active,
                IsBaseCurrency = false,
                ExchangeRate = 1m
            };
        }
    }

    // ===== 表單初始化 =====
    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(Currency.Code),
                    Label = "貨幣代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入貨幣代碼 (例如: TWD, USD, JPY)",
                    IsRequired = true,
                    HelpText = "貨幣的唯一識別代碼，建議使用 ISO 4217 標準代碼"
                },
                new()
                {
                    PropertyName = nameof(Currency.Name),
                    Label = "貨幣名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入貨幣名稱 (例如: 新台幣, 美元, 日圓)",
                    IsRequired = true,
                    HelpText = "貨幣的正式名稱，將顯示在系統各處"
                },
                new()
                {
                    PropertyName = nameof(Currency.Symbol),
                    Label = "符號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入貨幣符號 (例如: NT$, $, ¥)",
                    IsRequired = false,
                    HelpText = "貨幣的符號表示，用於金額顯示"
                },
                new()
                {
                    PropertyName = nameof(Currency.IsBaseCurrency),
                    Label = "是否為本位幣",
                    FieldType = FormFieldType.Checkbox,
                    IsRequired = false,
                    HelpText = "標記此貨幣是否為系統的基準貨幣 (本位幣)"
                },
                new()
                {
                    PropertyName = nameof(Currency.ExchangeRate),
                    Label = "匯率",
                    FieldType = FormFieldType.Number,
                    Placeholder = "請輸入匯率",
                    IsRequired = true,
                    HelpText = "相對於本位幣的匯率 (例如: 1 USD = 30.5 TWD 時，USD 的匯率為 30.5)",
                    Step = 0.0001m,
                    Min = 0
                },
                new()
                {
                    PropertyName = nameof(Currency.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註",
                    IsRequired = false,
                    Rows = 2,
                    HelpText = "關於此貨幣的補充說明",
                    ContainerCssClass = "col-12"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(Currency.Code), "基本資訊" },
                { nameof(Currency.Name), "基本資訊" },
                { nameof(Currency.Symbol), "基本資訊" },
                { nameof(Currency.IsBaseCurrency), "匯率設定" },
                { nameof(Currency.ExchangeRate), "匯率設定" },
                { nameof(Currency.Remarks), "額外資料" }
            };
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    // ===== 輔助方法 =====
    private async Task<string> GenerateCurrencyCodeAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            CurrencyService,
            "CUR",
            (service, code, excludeId) => service.IsCodeExistsAsync(code, excludeId)
        );
    }

    // ===== 公開方法 (供父組件調用) =====

    /// <summary>
    /// 開啟新增貨幣 Modal
    /// </summary>
    public async Task ShowAddModal()
    {
        CurrencyId = null;
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(true);
        }
    }

    /// <summary>
    /// 開啟編輯貨幣 Modal
    /// </summary>
    public async Task ShowEditModal(int currencyId)
    {
        CurrencyId = currencyId;
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(true);
        }
    }
}
