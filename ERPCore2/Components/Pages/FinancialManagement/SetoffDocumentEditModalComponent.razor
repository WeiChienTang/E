@* 沖款單編輯組件 *@
@inject ISetoffDocumentService SetoffDocumentService
@inject ISetoffProductDetailService SetoffProductDetailService
@inject ISetoffPaymentService SetoffPaymentService
@inject ISetoffPrepaymentService SetoffPrepaymentService
@inject ISetoffPrepaymentUsageService SetoffPrepaymentUsageService
@inject IPrepaymentTypeService PrepaymentTypeService
@inject ICompanyService CompanyService
@inject ICustomerService CustomerService
@inject ISupplierService SupplierService
@inject INotificationService NotificationService
@inject ActionButtonHelper ActionButtonHelper

<GenericEditModalComponent TEntity="SetoffDocument" 
                          TService="ISetoffDocumentService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@SetoffDocumentId"
                          Service="@SetoffDocumentService"
                          EntityName="沖款單"
                          EntityNamePlural="沖款單"
                          ModalTitle="@(SetoffDocumentId.HasValue ? "編輯沖款單" : "新增沖款單")"
                          Size="GenericEditModalComponent<SetoffDocument, ISetoffDocumentService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadSetoffDocumentData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(SetoffDocumentId.HasValue ? "沖款單更新成功" : "沖款單新增成功")"
                          SaveFailureMessage="沖款單儲存失敗"
                          RequiredPermission="SetoffDocument.Read"
                          CustomValidator="@ValidateBeforeSave"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          CustomModules="@GetCustomModules()">
</GenericEditModalComponent>

<CompanyEditModalComponent @ref="companyEditModal"
                          IsVisible="@companyModalManager.IsModalVisible"
                          IsVisibleChanged="@companyModalManager.HandleModalVisibilityChangedAsync"
                          CompanyId="@companyModalManager.SelectedEntityId"
                          OnCompanySaved="@OnCompanySavedWrapper"
                          OnCancel="@companyModalManager.HandleModalCancelAsync" />

<CustomerEditModalComponent @ref="customerEditModal"
                           IsVisible="@customerModalManager.IsModalVisible"
                           IsVisibleChanged="@customerModalManager.HandleModalVisibilityChangedAsync"
                           CustomerId="@customerModalManager.SelectedEntityId"
                           OnCustomerSaved="@OnCustomerSavedWrapper"
                           OnCancel="@customerModalManager.HandleModalCancelAsync" />

<SupplierEditModalComponent @ref="supplierEditModal"
                           IsVisible="@supplierModalManager.IsModalVisible"
                           IsVisibleChanged="@supplierModalManager.HandleModalVisibilityChangedAsync"
                           SupplierId="@supplierModalManager.SelectedEntityId"
                           OnSupplierSaved="@OnSupplierSavedWrapper"
                           OnCancel="@supplierModalManager.HandleModalCancelAsync" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? SetoffDocumentId { get; set; }
    [Parameter] public SetoffType? DefaultSetoffType { get; set; } // 新增：預設的沖款類型
    [Parameter] public EventCallback<SetoffDocument> OnSetoffDocumentSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<SetoffDocument, ISetoffDocumentService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 公司編輯 Modal 相關變數 - 使用泛型管理器
    private CompanyEditModalComponent? companyEditModal;
    private RelatedEntityModalManager<Company> companyModalManager = default!;
    
    // 客戶編輯 Modal 相關變數 - 使用泛型管理器
    private CustomerEditModalComponent? customerEditModal;
    private RelatedEntityModalManager<Customer> customerModalManager = default!;
    
    // 廠商編輯 Modal 相關變數 - 使用泛型管理器
    private SupplierEditModalComponent? supplierEditModal;
    private RelatedEntityModalManager<Supplier> supplierModalManager = default!;
    
    // 選項清單
    private List<Company> companies = new();
    private List<Customer> customers = new();
    private List<Supplier> suppliers = new();
    
    // 商品明細相關
    private List<SetoffProductDetail> setoffProductDetails = new();
    private bool IsReadOnly => false; // 可根據權限或狀態控制
    private SetoffProductDetailManagerComponent? setoffProductDetailManager;
    
    // 收款記錄相關
    private List<SetoffPayment> setoffPayments = new();
    private SetoffPaymentDetailManagerComponent? setoffPaymentDetailManager;
    
    // 預收付款項相關
    private List<SetoffPrepayment> setoffPrepayments = new();
    private SetoffPrepaymentDetailManagerComponent? setoffPrepaymentDetailManager;
    
    // 日期篩選
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化公司 Modal 管理器
            InitializeCompanyModalManager();
            
            // 初始化客戶 Modal 管理器
            InitializeCustomerModalManager();
            
            // 初始化廠商 Modal 管理器
            InitializeSupplierModalManager();
            
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化沖款單編輯組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // 當 SetoffDocumentId 參數變更時，重新初始化表單欄位
        if (formFields != null) // 只有在已經初始化過的情況下才重新設定
        {
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
        
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// 初始化公司 Modal 管理器
    /// </summary>
    private void InitializeCompanyModalManager()
    {
        companyModalManager = new RelatedEntityManagerBuilder<Company>(NotificationService, "公司")
            .WithPropertyName(nameof(SetoffDocument.CompanyId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(companyId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.CompanyId = companyId;
                }
            })
            .WithCustomPostProcess(async company => 
            {
                // 重新初始化表單欄位以更新按鈕狀態
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 初始化客戶 Modal 管理器
    /// </summary>
    private void InitializeCustomerModalManager()
    {
        customerModalManager = new RelatedEntityManagerBuilder<Customer>(NotificationService, "客戶")
            .WithPropertyName("CustomerId")
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(customerId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.RelatedPartyId = customerId;
                    editModalComponent.Entity.RelatedPartyType = "Customer";
                    
                    // 更新 RelatedPartyName
                    var customer = customers.FirstOrDefault(c => c.Id == customerId);
                    if (customer != null)
                    {
                        editModalComponent.Entity.RelatedPartyName = customer.CompanyName;
                    }
                }
            })
            .WithCustomPostProcess(async customer => 
            {
                // 重新初始化表單欄位以更新按鈕狀態
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 初始化廠商 Modal 管理器
    /// </summary>
    private void InitializeSupplierModalManager()
    {
        supplierModalManager = new RelatedEntityManagerBuilder<Supplier>(NotificationService, "廠商")
            .WithPropertyName("SupplierId")
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(supplierId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.RelatedPartyId = supplierId;
                    editModalComponent.Entity.RelatedPartyType = "Supplier";
                    
                    // 更新 RelatedPartyName
                    var supplier = suppliers.FirstOrDefault(s => s.Id == supplierId);
                    if (supplier != null)
                    {
                        editModalComponent.Entity.RelatedPartyName = supplier.CompanyName;
                    }
                }
            })
            .WithCustomPostProcess(async supplier => 
            {
                // 重新初始化表單欄位以更新按鈕狀態
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 儲存前驗證（在主表單儲存之前執行）
    /// </summary>
    private async Task<bool> ValidateBeforeSave(SetoffDocument entity)
    {
        try
        {
            if (entity == null)
            {
                await NotificationService.ShowErrorAsync("沒有可儲存的資料");
                return false;
            }

            // ===== 儲存前驗證金額 =====
            var receivedFromPayments = setoffPaymentDetailManager?.GetTotalReceivedAmount() ?? 0;
            var allowanceFromPayments = setoffPaymentDetailManager?.GetTotalAllowanceAmount() ?? 0;
            var hasProductSetoff = setoffProductDetails?.Any(d => 
                d.CurrentSetoffAmount > 0 || d.CurrentAllowanceAmount > 0) ?? false;
            
            // 取得預收付款項類型資訊
            var allPrepaymentTypes = await PrepaymentTypeService.GetAllAsync();
            var prepaymentAmount = 0m;      // 預收/付類型的 Amount
            var prepaymentUsedAmount = 0m;  // 轉沖款類型的 UsedAmount
            
            foreach (var prepayment in setoffPrepayments)
            {
                var prepaymentType = allPrepaymentTypes.FirstOrDefault(pt => pt.Id == prepayment.PrepaymentTypeId);
                if (prepaymentType != null && prepaymentType.Name.Contains("轉沖款"))
                {
                    prepaymentUsedAmount += prepayment.UsedAmount;
                }
                else
                {
                    prepaymentAmount += prepayment.Amount;
                }
            }
            
            if (hasProductSetoff)
            {
                // ===== 情境A：有商品明細（轉沖款） =====
                // 驗證本期沖銷 = 商品明細的本次沖款 + 本次折讓總和
                var expectedCurrentSetoff = setoffProductDetails?.Sum(d => d.CurrentSetoffAmount + d.CurrentAllowanceAmount) ?? 0;
                
                if (Math.Abs(expectedCurrentSetoff - entity.CurrentSetoffAmount) > 0.01m)
                {
                    await NotificationService.ShowErrorAsync(
                        $"本期沖銷驗證失敗：商品明細總額 {expectedCurrentSetoff:N2} 應等於本期沖銷 {entity.CurrentSetoffAmount:N2}");
                    return false;
                }
                
                // ===== 驗證 Payment + Prepayment 與商品明細的對應關係 =====
                var expectedReceivedFromProduct = setoffProductDetails?.Sum(d => d.CurrentSetoffAmount) ?? 0;
                var expectedAllowanceFromProduct = setoffProductDetails?.Sum(d => d.CurrentAllowanceAmount) ?? 0;
                
                // 計算實際的收款金額（考慮預付款項的影響）
                // - 預付類型：Payment收款 - Prepayment預付 = ProductDetail本次沖款
                // - 預付轉沖款類型：Payment收款 + Prepayment轉沖款 = ProductDetail本次沖款
                var actualReceivedAmount = receivedFromPayments - prepaymentAmount + prepaymentUsedAmount;
                
                // 驗證實際收款金額 = 商品明細本次沖款總和
                if (Math.Abs(actualReceivedAmount - expectedReceivedFromProduct) > 0.01m)
                {
                    await NotificationService.ShowErrorAsync(
                        $"收款記錄驗證失敗：\n" +
                        $"商品明細本次沖款: {expectedReceivedFromProduct:N2}\n" +
                        $"Payment收款({receivedFromPayments:N2}) - 預付({prepaymentAmount:N2}) + 轉沖款({prepaymentUsedAmount:N2}) = {actualReceivedAmount:N2}\n" +
                        $"兩者必須相等，請調整收款金額或預收付款項");
                    return false;
                }
                
                // 驗證 Payment折讓金額 = 商品明細本次折讓總和
                if (Math.Abs(allowanceFromPayments - expectedAllowanceFromProduct) > 0.01m)
                {
                    await NotificationService.ShowErrorAsync(
                        $"折讓金額驗證失敗：\n" +
                        $"商品明細本次折讓: {expectedAllowanceFromProduct:N2}\n" +
                        $"Payment折讓金額: {allowanceFromPayments:N2}\n" +
                        $"兩者必須相等，請調整折讓金額");
                    return false;
                }
                
                // 驗證本期折讓 = 商品明細的本次折讓總和
                var expectedAllowance = setoffProductDetails?.Sum(d => d.CurrentAllowanceAmount) ?? 0;
                if (Math.Abs(expectedAllowance - entity.TotalAllowanceAmount) > 0.01m)
                {
                    await NotificationService.ShowErrorAsync(
                        $"本期折讓驗證失敗：商品明細折讓 {expectedAllowance:N2} 應等於本期折讓 {entity.TotalAllowanceAmount:N2}");
                    return false;
                }
                
                // 驗證本期已收 = Payment收款 + Payment折讓 + Prepayment轉沖款 - Prepayment預付
                // 說明：預付款是預先支付的，所以要從已收中扣除；轉沖款是額外的收款，所以要加上
                var expectedTotalCollection = receivedFromPayments + allowanceFromPayments + prepaymentUsedAmount - prepaymentAmount;
                if (Math.Abs(expectedTotalCollection - entity.TotalCollectionAmount) > 0.01m)
                {
                    await NotificationService.ShowErrorAsync(
                        $"本期已收驗證失敗：Payment收款({receivedFromPayments:N2}) + Payment折讓({allowanceFromPayments:N2}) + 轉沖款({prepaymentUsedAmount:N2}) - 預付({prepaymentAmount:N2}) = {expectedTotalCollection:N2}，應等於本期已收 {entity.TotalCollectionAmount:N2}");
                    return false;
                }
            }
            else
            {
                // ===== 情境B：無商品明細（預收/付） =====
                // 驗證本期沖銷 = Prepayment.Amount（預收/付金額）
                if (Math.Abs(prepaymentAmount - entity.CurrentSetoffAmount) > 0.01m)
                {
                    await NotificationService.ShowErrorAsync(
                        $"預收付驗證失敗：Prepayment金額 {prepaymentAmount:N2} 必須等於本期沖銷 {entity.CurrentSetoffAmount:N2}");
                    return false;
                }
                
                // 驗證本期已收 = Payment收款 + Payment折讓 + Prepayment預收/付
                var expectedTotalCollection = receivedFromPayments + allowanceFromPayments + prepaymentAmount;
                if (Math.Abs(expectedTotalCollection - entity.TotalCollectionAmount) > 0.01m)
                {
                    await NotificationService.ShowErrorAsync(
                        $"本期已收驗證失敗：Payment收款({receivedFromPayments:N2}) + Payment折讓({allowanceFromPayments:N2}) + Prepayment({prepaymentAmount:N2}) = {expectedTotalCollection:N2}，應等於本期已收 {entity.TotalCollectionAmount:N2}");
                    return false;
                }
                
                // 驗證本期折讓 = 0（無商品明細時，本期折讓為0）
                if (Math.Abs(entity.TotalAllowanceAmount) > 0.01m)
                {
                    await NotificationService.ShowErrorAsync(
                        $"本期折讓驗證失敗：無商品明細時，本期折讓應為0，目前為 {entity.TotalAllowanceAmount:N2}");
                    return false;
                }
            }           
            
            // 驗證預收付款項（如果有填寫的話）
            if (setoffPrepaymentDetailManager != null)
            {
                var prepaymentValidationResult = await setoffPrepaymentDetailManager.ValidateAsync();
                if (!prepaymentValidationResult)
                {
                    // 驗證失敗，直接阻止儲存
                    return false;
                }
            }
            
            // ===== 提前驗證準備儲存的預收付款項資料 =====
            // 區分兩種類型：
            // 1. 預收/預付（Amount > 0 且 UsedAmount = 0）→ 使用 SetoffPrepaymentService 驗證
            // 2. 轉沖款（UsedAmount > 0 且非預收/預付類型）→ 使用 SetoffPrepaymentUsageService 驗證
            
            // ===== DEBUG：輸出 setoffPrepayments 內容 =====
            Console.WriteLine("\n========================================");
            Console.WriteLine($"[ValidateBeforeSave] setoffPrepayments 總數: {setoffPrepayments?.Count ?? 0}");
            if (setoffPrepayments?.Any() == true)
            {
                for (int i = 0; i < setoffPrepayments.Count; i++)
                {
                    var p = setoffPrepayments[i];
                    Console.WriteLine($"  [{i}] Id={p.Id}, SourceCode={p.SourceDocumentCode}, Amount={p.Amount}, UsedAmount={p.UsedAmount}, PrepaymentTypeId={p.PrepaymentTypeId}");
                }
            }
            Console.WriteLine("========================================\n");
            
            // 取得所有預收付類型，用於判斷是否為轉沖款類型
            var prepaymentTypesForValidation = await PrepaymentTypeService.GetAllAsync();
            
            // 驗證預收/預付主記錄（Amount > 0 且非轉沖款類型）
            var prepaymentRecords = setoffPrepayments?
                .Where(p => 
                {
                    // 必須有 Amount > 0
                    if (p.Amount <= 0) return false;
                    
                    // 檢查是否為轉沖款類型
                    var prepaymentType = prepaymentTypesForValidation.FirstOrDefault(pt => pt.Id == p.PrepaymentTypeId);
                    if (prepaymentType != null && prepaymentType.Name.Contains("轉沖款"))
                    {
                        return false;  // 轉沖款類型，不納入預收/預付驗證
                    }
                    
                    return true;  // 預收/預付類型
                })
                .ToList() ?? new List<SetoffPrepayment>();
            
            Console.WriteLine($"[ValidateBeforeSave] 過濾後的 prepaymentRecords（預收/預付主記錄）數量: {prepaymentRecords.Count}");
            for (int i = 0; i < prepaymentRecords.Count; i++)
            {
                var p = prepaymentRecords[i];
                Console.WriteLine($"  [{i}] Id={p.Id}, SourceCode={p.SourceDocumentCode}, Amount={p.Amount}");
            }
            
            if (prepaymentRecords.Any())
            {
                Console.WriteLine($"\n[ValidateBeforeSave] 開始驗證 {prepaymentRecords.Count} 筆預收/預付記錄...\n");
                
                for (int i = 0; i < prepaymentRecords.Count; i++)
                {
                    var prepayment = prepaymentRecords[i];
                    Console.WriteLine($"[ValidateBeforeSave] 驗證第 {i + 1}/{prepaymentRecords.Count} 筆...");
                    
                    // 呼叫 SetoffPrepaymentService 層的驗證方法
                    var validationResult = await SetoffPrepaymentService.ValidateAsync(prepayment);
                    if (!validationResult.IsSuccess)
                    {
                        Console.WriteLine($"[ValidateBeforeSave] ❌ 驗證失敗: {validationResult.ErrorMessage}");
                        await NotificationService.ShowErrorAsync($"預收付款項驗證失敗：{validationResult.ErrorMessage}");
                        return false;
                    }
                    Console.WriteLine($"[ValidateBeforeSave] ✅ 驗證通過");
                }
            }
            else
            {
                Console.WriteLine("[ValidateBeforeSave] 沒有預收/預付主記錄需要驗證");
            }
            
            // 驗證轉沖款使用記錄
            var usageRecords = setoffPrepayments?
                .Where(p => p.UsedAmount > 0 && p.Amount == 0)
                .ToList() ?? new List<SetoffPrepayment>();
            
            if (usageRecords.Any())
            {
                foreach (var prepayment in usageRecords)
                {
                    // 從 SourceDocumentCode 查詢原始預收付款項
                    var sourcePrepayment = await SetoffPrepaymentService.GetBySourceDocumentCodeAsync(prepayment.SourceDocumentCode);
                    if (sourcePrepayment == null)
                    {
                        await NotificationService.ShowErrorAsync($"找不到來源預收付款項：{prepayment.SourceDocumentCode}");
                        return false;
                    }
                    
                    // 驗證使用金額是否超過可用餘額
                    var usageValidation = await SetoffPrepaymentUsageService.ValidateUsageAmountAsync(
                        sourcePrepayment.Id,
                        prepayment.UsedAmount,
                        null  // 新增時不需要排除任何記錄
                    );
                    
                    if (!usageValidation.IsSuccess)
                    {
                        await NotificationService.ShowErrorAsync($"轉沖款驗證失敗：{usageValidation.ErrorMessage}");
                        return false;
                    }
                }
            }
            
            
            // ===== 驗證商品明細的本次沖款是否超過未結清餘額 =====
            // 使用 Service 層的統一驗證邏輯，避免邏輯重複
            if (hasProductSetoff && SetoffProductDetailService != null && setoffProductDetails != null)
            {
                var validDetails = setoffProductDetails
                    .Where(d => d.CurrentSetoffAmount > 0 || d.CurrentAllowanceAmount > 0)
                    .ToList();
                
                if (validDetails.Any())
                {
                    // 直接調用 Service 的驗證方法，確保前端和後端驗證邏輯一致
                    foreach (var detail in validDetails)
                    {
                        // 如果是編輯模式，傳入 detail.Id 以排除原本的沖銷金額
                        var validation = await SetoffProductDetailService.ValidateSetoffAmountAsync(
                            detail.SourceDetailId,
                            detail.SourceDetailType,
                            detail.CurrentSetoffAmount,
                            detail.CurrentAllowanceAmount,
                            detail.Id > 0 ? detail.Id : null);
                        
                        if (!validation.IsSuccess)
                        {
                            await NotificationService.ShowErrorAsync($"商品明細驗證失敗：{validation.ErrorMessage}");
                            return false;
                        }
                    }
                }
            }

            // 驗證通過
            return true;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"驗證資料時發生錯誤：{ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// 儲存成功後處理（在主表單儲存成功之後執行）
    /// </summary>
    private async Task HandleSaveSuccess()
    {
        try
        {
            if (editModalComponent?.Entity == null)
            {
                await NotificationService.ShowErrorAsync("沒有可儲存的資料");
                return;
            }

            var entity = editModalComponent.Entity;

            // 儲存商品明細（過濾掉本次沖款和折讓都為 0 的項目）
            var validDetails = setoffProductDetails
                .Where(d => d.CurrentSetoffAmount > 0 || d.CurrentAllowanceAmount > 0)
                .ToList();
                
            if (validDetails.Any() && entity.Id > 0)
            {
                // 設定 SetoffDocumentId
                foreach (var detail in validDetails)
                {
                    detail.SetoffDocumentId = entity.Id;
                }

                var detailResult = await SetoffProductDetailService.CreateBatchWithValidationAsync(validDetails);
                if (!detailResult.IsSuccess)
                {
                    await NotificationService.ShowErrorAsync($"商品明細儲存失敗：{detailResult.ErrorMessage}");
                    return;
                }
            }

            // 儲存收款記錄（過濾掉付款方式為空的項目）
            var validPayments = setoffPayments
                .Where(p => p.PaymentMethodId.HasValue && p.PaymentMethodId.Value > 0)
                .ToList();
                
            if (entity.Id > 0)
            {
                // 取得現有的收款記錄
                var existingPayments = await SetoffPaymentService.GetBySetoffDocumentIdAsync(entity.Id);
                var existingPaymentIds = existingPayments.Select(p => p.Id).ToList();
                var currentPaymentIds = validPayments.Where(p => p.Id > 0).Select(p => p.Id).ToList();
                
                // 刪除不再存在的收款記錄
                var paymentsToDelete = existingPayments.Where(ep => !currentPaymentIds.Contains(ep.Id)).ToList();
                foreach (var paymentToDelete in paymentsToDelete)
                {
                    await SetoffPaymentService.DeleteAsync(paymentToDelete.Id);
                }
                
                // 處理新增和更新
                foreach (var payment in validPayments)
                {
                    payment.SetoffDocumentId = entity.Id;
                    
                    if (payment.Id > 0)
                    {
                        // 更新現有記錄
                        var paymentResult = await SetoffPaymentService.UpdateAsync(payment);
                        if (!paymentResult.IsSuccess)
                        {
                            await NotificationService.ShowErrorAsync($"收款記錄更新失敗：{paymentResult.ErrorMessage}");
                            return;
                        }
                    }
                    else
                    {
                        // 新增記錄
                        var paymentResult = await SetoffPaymentService.CreateAsync(payment);
                        if (!paymentResult.IsSuccess)
                        {
                            await NotificationService.ShowErrorAsync($"收款記錄新增失敗：{paymentResult.ErrorMessage}");
                            return;
                        }
                    }
                }
            }
            
            // ===== 儲存預收付款項 =====
            // 需要區分兩種情況：
            // 1. 預收/預付（Amount > 0 且非轉沖款類型）→ 儲存到 SetoffPrepayment 表
            // 2. 轉沖款（UsedAmount > 0 且為轉沖款類型）→ 儲存到 SetoffPrepaymentUsage 表
            
            if (entity.Id > 0)
            {
                // 取得所有預收付類型資訊，用於判斷是否為轉沖款類型
                var allPrepaymentTypes = await PrepaymentTypeService.GetAllAsync();
                
                Console.WriteLine($"\n[HandleSaveSuccess] 開始處理預收付款項儲存，總數: {setoffPrepayments.Count}");
                
                // === 處理預收/預付主記錄（排除轉沖款類型）===
                var prepaymentRecords = setoffPrepayments
                    .Where(p => 
                    {
                        // 必須有 Amount > 0
                        if (p.Amount <= 0) return false;
                        
                        // 檢查是否為轉沖款類型
                        var prepaymentType = allPrepaymentTypes.FirstOrDefault(pt => pt.Id == p.PrepaymentTypeId);
                        if (prepaymentType != null && prepaymentType.Name.Contains("轉沖款"))
                        {
                            return false;  // 轉沖款類型，不納入預收/預付儲存
                        }
                        
                        return true;  // 預收/預付類型
                    })
                    .ToList();
                
                Console.WriteLine($"[HandleSaveSuccess] 預收/預付主記錄數量: {prepaymentRecords.Count}");
                for (int i = 0; i < prepaymentRecords.Count; i++)
                {
                    var p = prepaymentRecords[i];
                    Console.WriteLine($"  [{i}] Id={p.Id}, SourceCode={p.SourceDocumentCode}, Amount={p.Amount}");
                }
                
                // 取得現有的預收付款項主記錄
                var existingPrepayments = await SetoffPrepaymentService.GetBySetoffDocumentIdAsync(entity.Id);
                var existingPrepaymentIds = existingPrepayments.Select(p => p.Id).ToList();
                var currentPrepaymentIds = prepaymentRecords.Where(p => p.Id > 0).Select(p => p.Id).ToList();
                
                // 刪除不再存在的預收付款項記錄
                var prepaymentsToDelete = existingPrepayments.Where(ep => !currentPrepaymentIds.Contains(ep.Id)).ToList();
                foreach (var prepaymentToDelete in prepaymentsToDelete)
                {
                    await SetoffPrepaymentService.DeleteAsync(prepaymentToDelete.Id);
                }
                
                // 處理新增和更新
                foreach (var prepayment in prepaymentRecords)
                {
                    prepayment.SetoffDocumentId = entity.Id;
                    
                    if (prepayment.Id > 0)
                    {
                        // 更新現有記錄
                        var prepaymentResult = await SetoffPrepaymentService.UpdateAsync(prepayment);
                        if (!prepaymentResult.IsSuccess)
                        {
                            await NotificationService.ShowErrorAsync($"預收付款項更新失敗：{prepaymentResult.ErrorMessage}");
                            return;
                        }
                    }
                    else
                    {
                        // 新增記錄
                        var prepaymentResult = await SetoffPrepaymentService.CreateAsync(prepayment);
                        if (!prepaymentResult.IsSuccess)
                        {
                            await NotificationService.ShowErrorAsync($"預收付款項新增失敗：{prepaymentResult.ErrorMessage}");
                            return;
                        }
                    }
                }
                
                // === 處理轉沖款使用記錄（根據類型名稱判斷）===
                var usageRecords = setoffPrepayments
                    .Where(p => 
                    {
                        // 必須有 UsedAmount > 0
                        if (p.UsedAmount <= 0) return false;
                        
                        // 檢查是否為轉沖款類型
                        var prepaymentType = allPrepaymentTypes.FirstOrDefault(pt => pt.Id == p.PrepaymentTypeId);
                        if (prepaymentType != null && prepaymentType.Name.Contains("轉沖款"))
                        {
                            return true;  // 轉沖款類型
                        }
                        
                        return false;
                    })
                    .ToList();
                
                Console.WriteLine($"[HandleSaveSuccess] 轉沖款使用記錄數量: {usageRecords.Count}");
                for (int i = 0; i < usageRecords.Count; i++)
                {
                    var u = usageRecords[i];
                    Console.WriteLine($"  [{i}] SourceCode={u.SourceDocumentCode}, UsedAmount={u.UsedAmount}");
                }
                
                // 取得現有的使用記錄
                var existingUsages = await SetoffPrepaymentUsageService.GetBySetoffDocumentIdAsync(entity.Id);
                
                // 先刪除所有既有的使用記錄（因為前端傳來的是完整清單）
                await SetoffPrepaymentUsageService.DeleteBySetoffDocumentIdAsync(entity.Id);
                
                // 建立新的使用記錄
                foreach (var prepayment in usageRecords)
                {
                    // 從 SourceDocumentCode 查詢原始預收付款項
                    var sourcePrepayment = await SetoffPrepaymentService.GetBySourceDocumentCodeAsync(prepayment.SourceDocumentCode);
                    if (sourcePrepayment == null)
                    {
                        await NotificationService.ShowErrorAsync($"找不到來源預收付款項：{prepayment.SourceDocumentCode}");
                        return;
                    }
                    
                    // 建立使用記錄
                    var usage = new SetoffPrepaymentUsage
                    {
                        SetoffPrepaymentId = sourcePrepayment.Id,
                        SetoffDocumentId = entity.Id,
                        UsedAmount = prepayment.UsedAmount,
                        UsageDate = DateTime.Now,
                        Remarks = $"沖款單 {entity.SetoffNumber} 使用"
                    };
                    
                    var usageResult = await SetoffPrepaymentUsageService.CreateAsync(usage);
                    if (!usageResult.IsSuccess)
                    {
                        await NotificationService.ShowErrorAsync($"預收付款項使用記錄新增失敗：{usageResult.ErrorMessage}");
                        return;
                    }
                }
            }

            await OnSetoffDocumentSaved.InvokeAsync(entity);
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"儲存商品明細時發生錯誤：{ex.Message}");
        }
    }
    
    /// <summary>
    /// 處理商品明細變更事件，更新沖款單的各項金額欄位
    /// </summary>
    /// <remarks>
    /// 欄位說明：
    /// - 本期應收 (TotalSetoffAmount): 被選入的來源明細的原始應收/付總金額（不會因為輸入本次沖款而改變）
    /// - 本期沖銷 (CurrentSetoffAmount): 本次沖款 + 本次折讓的總和
    /// - 本期已收 (TotalCollectionAmount): 實際收到的款項（目前等於本次沖款，未來會考慮手續費等因素）
    /// - 本期折讓 (TotalAllowanceAmount): 本次折讓的總額
    /// </remarks>
    private void HandleProductDetailsChanged(List<SetoffProductDetail> details)
    {
        setoffProductDetails = details;
        
        // 更新總金額
        if (editModalComponent?.Entity != null)
        {
            // 【本期應收】= 被選入的來源明細的原始應收/付總金額
            // 這個值應該從 SetoffProductDetailManagerComponent 取得來源明細的總金額
            // 只在明細被選入時計算，不會因為輸入本次沖款金額而改變
            if (setoffProductDetailManager != null)
            {
                editModalComponent.Entity.TotalSetoffAmount = setoffProductDetailManager.GetSourceTotalAmount();
            }
            
            // 【本期沖銷】= 本次沖款 + 本次折讓的總和
            editModalComponent.Entity.CurrentSetoffAmount = details.Sum(d => d.CurrentSetoffAmount + d.CurrentAllowanceAmount);
            
            // 【本期已收】不在此更新，由收款記錄（HandlePaymentsChanged）和預收付款項（HandlePrepaymentsChanged）決定
            // 【本期折讓】= 本次折讓的總額
            editModalComponent.Entity.TotalAllowanceAmount = details.Sum(d => d.CurrentAllowanceAmount);
        }
        
        StateHasChanged();
    }
    
    /// <summary>
    /// 處理收款記錄變更事件
    /// </summary>
    /// <remarks>
    /// 收款記錄變更時即時更新本期已收欄位
    /// - Payment的收款金額和折讓金額都屬於本期已收
    /// - Payment不影響本期沖銷（本期沖銷只來自商品明細）
    /// - Payment的折讓金額不影響本期折讓（本期折讓只來自商品明細）
    /// </remarks>
    private async Task HandlePaymentsChanged(List<SetoffPayment> payments)
    {
        setoffPayments = payments;
        
        if (editModalComponent?.Entity != null && setoffPaymentDetailManager != null)
        {
            var receivedFromPayments = setoffPaymentDetailManager.GetTotalReceivedAmount();
            var allowanceFromPayments = setoffPaymentDetailManager.GetTotalAllowanceAmount();
            
            // 計算預收付款項金額
            var prepaymentUsedAmount = 0m;  // 轉沖款類型
            var prepaymentAmount = 0m;       // 預收/付類型
            
            // 需要判斷預收付類型，需要先載入 PrepaymentType 資料
            var allPrepaymentTypes = await PrepaymentTypeService.GetAllAsync();
            foreach (var prepayment in setoffPrepayments)
            {
                var prepaymentType = allPrepaymentTypes.FirstOrDefault(pt => pt.Id == prepayment.PrepaymentTypeId);
                if (prepaymentType != null && prepaymentType.Name.Contains("轉沖款"))
                {
                    prepaymentUsedAmount += prepayment.UsedAmount;
                }
                else
                {
                    prepaymentAmount += prepayment.Amount;
                }
            }
            
            // 判斷是否有商品明細
            var hasProductSetoff = setoffProductDetails?.Any(d => 
                d.CurrentSetoffAmount > 0 || d.CurrentAllowanceAmount > 0) ?? false;
            
            if (hasProductSetoff)
            {
                // ===== 情境A：有商品明細（轉沖款） =====
                // 本期已收 = Payment收款 + Payment折讓 + Prepayment轉沖款 - Prepayment預付
                // 說明：預付款是預先支付的，所以要從已收中扣除；轉沖款是額外的收款，所以要加上
                editModalComponent.Entity.TotalCollectionAmount = receivedFromPayments + allowanceFromPayments + prepaymentUsedAmount - prepaymentAmount;
                
                // 【本期沖銷】不在此更新，由商品明細決定
                // 【本期折讓】不在此更新，由商品明細決定
            }
            else
            {
                // ===== 情境B：無商品明細（預收/付） =====
                // 本期已收 = Payment收款 + Payment折讓 + Prepayment預收/付
                editModalComponent.Entity.TotalCollectionAmount = receivedFromPayments + allowanceFromPayments + prepaymentAmount;
                
                // 本期沖銷 = Prepayment.Amount (預收/付金額)
                editModalComponent.Entity.CurrentSetoffAmount = prepaymentAmount;
                
                // 本期折讓 = 0（無商品明細時，本期折讓為0）
                editModalComponent.Entity.TotalAllowanceAmount = 0;
            }
        }
        
        StateHasChanged();
    }
    
    /// <summary>
    /// 處理預收付款項變更事件
    /// </summary>
    /// <remarks>
    /// 預收付款項變更時更新相關金額欄位
    /// - 轉沖款類型（情境A）：使用 UsedAmount，更新本期已收
    /// - 預收/付類型（情境B）：使用 Amount，更新本期已收和本期沖銷
    /// </remarks>
    private async Task HandlePrepaymentsChanged(List<SetoffPrepayment> prepayments)
    {
        setoffPrepayments = prepayments;
        
        if (editModalComponent?.Entity != null && setoffPaymentDetailManager != null)
        {
            var receivedFromPayments = setoffPaymentDetailManager.GetTotalReceivedAmount();
            var allowanceFromPayments = setoffPaymentDetailManager.GetTotalAllowanceAmount();
            
            // 計算預收付款項金額
            var prepaymentUsedAmount = 0m;  // 轉沖款類型
            var prepaymentAmount = 0m;       // 預收/付類型
            
            // 需要判斷預收付類型，需要先載入 PrepaymentType 資料
            var allPrepaymentTypes = await PrepaymentTypeService.GetAllAsync();
            foreach (var prepayment in prepayments)
            {
                var prepaymentType = allPrepaymentTypes.FirstOrDefault(pt => pt.Id == prepayment.PrepaymentTypeId);
                if (prepaymentType != null && prepaymentType.Name.Contains("轉沖款"))
                {
                    prepaymentUsedAmount += prepayment.UsedAmount;
                }
                else
                {
                    prepaymentAmount += prepayment.Amount;
                }
            }
            
            // 判斷是否有商品明細
            var hasProductSetoff = setoffProductDetails?.Any(d => 
                d.CurrentSetoffAmount > 0 || d.CurrentAllowanceAmount > 0) ?? false;
            
            if (hasProductSetoff)
            {
                // ===== 情境A：有商品明細（轉沖款） =====
                // 本期已收 = Payment收款 + Payment折讓 + Prepayment轉沖款 - Prepayment預付
                // 說明：預付款是預先支付的，所以要從已收中扣除；轉沖款是額外的收款，所以要加上
                editModalComponent.Entity.TotalCollectionAmount = receivedFromPayments + allowanceFromPayments + prepaymentUsedAmount - prepaymentAmount;
                
                // 【本期沖銷】不在此更新，由商品明細決定
                // 【本期折讓】不在此更新，由商品明細決定
            }
            else
            {
                // ===== 情境B：無商品明細（預收/付） =====
                // 本期已收 = Payment收款 + Payment折讓 + Prepayment預收/付
                editModalComponent.Entity.TotalCollectionAmount = receivedFromPayments + allowanceFromPayments + prepaymentAmount;
                
                // 本期沖銷 = Prepayment.Amount (預收/付金額)
                editModalComponent.Entity.CurrentSetoffAmount = prepaymentAmount;
                
                // 本期折讓 = 0（無商品明細時，本期折讓為0）
                editModalComponent.Entity.TotalAllowanceAmount = 0;
            }
        }
        
        StateHasChanged();
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task<SetoffDocument?> LoadSetoffDocumentData()
    {
        try
        {
            SetoffDocument? setoffDocument;
            
            if (!SetoffDocumentId.HasValue)
            {
                // 新增模式 - 使用 DefaultSetoffType 或預設為應收帳款
                setoffDocument = new SetoffDocument
                {
                    SetoffNumber = await GenerateSetoffNumberAsync(DefaultSetoffType),
                    SetoffDate = DateTime.Today,
                    SetoffType = DefaultSetoffType ?? SetoffType.AccountsReceivable,
                    TotalSetoffAmount = 0
                };
                
                // 新增模式：清空商品明細、收款記錄和預收付款項
                setoffProductDetails = new List<SetoffProductDetail>();
                setoffPayments = new List<SetoffPayment>();
                setoffPrepayments = new List<SetoffPrepayment>(); 
            }
            else
            {
                // 編輯模式
                setoffDocument = await SetoffDocumentService.GetByIdAsync(SetoffDocumentId.Value);
                
                // 載入商品明細
                setoffProductDetails = await SetoffProductDetailService.GetBySetoffDocumentIdAsync(SetoffDocumentId.Value);
                
                // 載入收款記錄
                setoffPayments = await SetoffPaymentService.GetBySetoffDocumentIdAsync(SetoffDocumentId.Value);
                
                // 載入預收付款項（包含主記錄和使用記錄）
                setoffPrepayments = new List<SetoffPrepayment>();
                
                // 1. 載入預收/預付主記錄（Amount > 0）
                Console.WriteLine($"[LoadSetoffDocumentData] 準備載入預收/預付主記錄，SetoffDocumentId={SetoffDocumentId.Value}");
                var prepaymentRecords = await SetoffPrepaymentService.GetBySetoffDocumentIdAsync(SetoffDocumentId.Value);
                Console.WriteLine($"[LoadSetoffDocumentData] 載入了 {prepaymentRecords.Count} 筆預收/預付主記錄");
                for (int i = 0; i < prepaymentRecords.Count; i++)
                {
                    var rec = prepaymentRecords[i];
                    Console.WriteLine($"  [{i}] Id={rec.Id}, SourceCode={rec.SourceDocumentCode}, Amount={rec.Amount}, UsedAmount={rec.UsedAmount}");
                }
                setoffPrepayments.AddRange(prepaymentRecords);
                
                // 2. 載入轉沖款使用記錄（UsedAmount > 0），轉換為 SetoffPrepayment 格式供前端顯示
                var usageRecords = await SetoffPrepaymentUsageService.GetBySetoffDocumentIdAsync(SetoffDocumentId.Value);
                
                // 取得所有預收付類型，用於查詢「轉沖款」類型ID
                var allPrepaymentTypes = await PrepaymentTypeService.GetAllAsync();
                
                foreach (var usage in usageRecords)
                {
                    // 根據來源預收付款項的類型，判斷應該使用哪個「轉沖款」類型
                    // 來源是「預收」→ 使用「預收轉沖款」
                    // 來源是「預付」→ 使用「預付轉沖款」
                    var sourceType = usage.SetoffPrepayment.PrepaymentType?.Name ?? string.Empty;
                    var transferTypeName = sourceType.Contains("預收") ? "預收轉沖款" : "預付轉沖款";
                    var transferType = allPrepaymentTypes.FirstOrDefault(pt => pt.Name == transferTypeName);
                    
                    if (transferType == null)
                    {
                        await NotificationService.ShowErrorAsync($"找不到預收付類型：{transferTypeName}");
                        continue;
                    }
                    
                    // 轉換為 SetoffPrepayment 格式，讓前端組件可以統一處理
                    setoffPrepayments.Add(new SetoffPrepayment
                    {
                        Id = 0,  // 使用記錄沒有 SetoffPrepayment 的 ID
                        PrepaymentTypeId = transferType.Id,  // ✅ 使用「轉沖款」類型的ID
                        SourceDocumentCode = usage.SourcePrepaymentCode ?? usage.SetoffPrepayment.SourceDocumentCode,  // ✅ 優先使用 SourcePrepaymentCode
                        Amount = usage.SetoffPrepayment.Amount,  // ✅ 保存來源的總金額（用於前端顯示「總金額」欄位）
                        UsedAmount = usage.UsedAmount,  // 轉沖款：記錄使用金額
                        CustomerId = usage.SetoffPrepayment.CustomerId,
                        SupplierId = usage.SetoffPrepayment.SupplierId,
                        SetoffDocumentId = SetoffDocumentId.Value,
                        Remarks = $"SOURCE_ID:{usage.SetoffPrepaymentId}"  // ✅ 暫存來源 SetoffPrepayment.Id
                    });
                }
            }
            
            // 資料載入後，重新初始化表單欄位以正確顯示客戶或廠商欄位
            // 使用 Task.Run 確保在下一個渲染週期執行
            _ = Task.Run(async () =>
            {
                await InvokeAsync(async () =>
                {
                    await InitializeFormFieldsAsync();
                    StateHasChanged();
                });
            });
            
            return setoffDocument;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入沖款單資料時發生錯誤：{ex.Message}");
            return null;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入公司列表
            companies = await CompanyService.GetAllAsync();
            
            // 載入客戶列表（用於應收帳款）
            customers = await CustomerService.GetAllAsync();
            
            // 載入廠商列表（用於應付帳款）
            suppliers = await SupplierService.GetAllAsync();
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("載入沖款單編輯相關資料時發生錯誤");
            companies = new List<Company>();
            customers = new List<Customer>();
            suppliers = new List<Supplier>();
        }
    }

    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            // 動態加入客戶或廠商欄位 - 先判斷類型
            var currentSetoffType = editModalComponent?.Entity?.SetoffType ?? DefaultSetoffType ?? SetoffType.AccountsReceivable;
            
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(SetoffDocument.SetoffNumber),
                    Label = "沖款單號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入沖款單號",
                    IsRequired = true,
                    MaxLength = 50,
                    HelpText = "沖款單的唯一識別號碼，新增時系統會自動產生，也可手動修改"
                }
            };

            // 根據沖款類型動態加入客戶或廠商欄位（緊接在沖款單號之後）
            if (currentSetoffType == SetoffType.AccountsReceivable)
            {
                // 應收帳款：顯示客戶欄位
                formFields.Add(new()
                {
                    PropertyName = "CustomerId",
                    Label = "客戶",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇客戶",
                    MinSearchLength = 0,
                    IsRequired = true,
                    HelpText = "選擇應收帳款的客戶",
                    ActionButtons = await GetCustomerActionButtonsAsync()
                });
            }
            else if (currentSetoffType == SetoffType.AccountsPayable)
            {
                // 應付帳款：顯示廠商欄位
                formFields.Add(new()
                {
                    PropertyName = "SupplierId",
                    Label = "廠商",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇廠商",
                    MinSearchLength = 0,
                    IsRequired = true,
                    HelpText = "選擇應付帳款的廠商",
                    ActionButtons = await GetSupplierActionButtonsAsync()
                });
            }

            // 繼續加入其他共用欄位
            formFields.AddRange(new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(SetoffDocument.CompanyId),
                    Label = "公司",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇公司",
                    MinSearchLength = 0, // 允許空白搜尋以顯示所有選項
                    IsRequired = true,
                    HelpText = "選擇沖款單所屬的公司",
                    ActionButtons = await GetCompanyActionButtonsAsync()
                },
                new()
                {
                    PropertyName = "FilterStartDate",
                    Label = "來源單據起始日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = false,
                    HelpText = "篩選該日期之後的銷貨、銷貨退回、入庫、入庫退出單據"
                },
                new()
                {
                    PropertyName = "FilterEndDate",
                    Label = "來源單據結束日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = false,
                    HelpText = "篩選該日期之前的銷貨、銷貨退回、入庫、入庫退出單據"
                },
                new()
                {
                    PropertyName = nameof(SetoffDocument.SetoffDate),
                    Label = "沖款日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    HelpText = "沖款單的建立日期"
                }
            });

            // 繼續加入金額相關欄位
            formFields.AddRange(new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(SetoffDocument.TotalSetoffAmount),
                    Label = "本期應收",
                    FieldType = FormFieldType.Number,
                    Placeholder = "系統自動計算",
                    IsRequired = false,
                    IsReadOnly = true,
                    HelpText = "沖款單的總金額",
                },
                new()
                {
                    PropertyName = nameof(SetoffDocument.TotalCollectionAmount),
                    Label = "本期已收",
                    FieldType = FormFieldType.Number,
                    Placeholder = "系統自動計算",
                    IsRequired = false,
                    IsReadOnly = true,
                    HelpText = "實際收到的款項總額",
                },
                new()
                {
                    PropertyName = nameof(SetoffDocument.CurrentSetoffAmount),
                    Label = "本期沖銷",
                    FieldType = FormFieldType.Number,
                    Placeholder = "系統自動計算",
                    IsRequired = false,
                    IsReadOnly = true,
                    HelpText = "本次沖款單所沖銷的金額",
                },
                new()
                {
                    PropertyName = nameof(SetoffDocument.TotalAllowanceAmount),
                    Label = "本期折讓",
                    FieldType = FormFieldType.Number,
                    Placeholder = "系統自動計算",
                    IsRequired = false,
                    IsReadOnly = true,
                    HelpText = "折讓抵銷的總額",
                },

                FormFieldConfigurationHelper.CreateRemarksField<SetoffDocument>(),
            });


            
            // 動態設定表單區段 - 使用有序列表以控制欄位順序
            var sectionList = new List<KeyValuePair<string, string>>
            {
                new(nameof(SetoffDocument.SetoffNumber), "基本資訊")
            };

            // 根據沖款類型加入對應的關聯方區段(插入在沖款單號之後)
            if (currentSetoffType == SetoffType.AccountsReceivable)
            {
                sectionList.Add(new("CustomerId", "基本資訊"));
            }
            else if (currentSetoffType == SetoffType.AccountsPayable)
            {
                sectionList.Add(new("SupplierId", "基本資訊"));
            }

            // 繼續加入其他基本資訊欄位
            sectionList.AddRange(new[]
            {
                new KeyValuePair<string, string>(nameof(SetoffDocument.CompanyId), "基本資訊"),
                new KeyValuePair<string, string>("FilterStartDate", "基本資訊"),
                new KeyValuePair<string, string>("FilterEndDate", "基本資訊"),
                new KeyValuePair<string, string>(nameof(SetoffDocument.SetoffDate), "基本資訊")
            });

            // 加入金額相關區段
            sectionList.AddRange(new[]
            {
                new KeyValuePair<string, string>(nameof(SetoffDocument.TotalSetoffAmount), "金額資訊(系統自動計算)"),    
                new KeyValuePair<string, string>(nameof(SetoffDocument.TotalCollectionAmount), "金額資訊(系統自動計算)"),            
                new KeyValuePair<string, string>(nameof(SetoffDocument.CurrentSetoffAmount), "金額資訊(系統自動計算)"),                
                new KeyValuePair<string, string>(nameof(SetoffDocument.TotalAllowanceAmount), "金額資訊(系統自動計算)"),
                new KeyValuePair<string, string>(nameof(SetoffDocument.Remarks), "其他資訊")
            });

            // 轉換為 Dictionary
            formSections = sectionList.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 產生沖款單號
    /// </summary>
    /// <remarks>
    /// 單號格式:
    /// - 應收帳款: SO-YYYYMMDD-001 (Sales Offset - 銷貨沖款)
    /// - 應付帳款: PO-YYYYMMDD-001 (Purchase Offset - 進貨沖款)
    /// </remarks>
    private async Task<string> GenerateSetoffNumberAsync(SetoffType? setoffType = null)
    {
        try
        {
            // 根據沖款類型決定前綴
            // 應收帳款使用 SO (Sales Offset), 應付帳款使用 PO (Purchase Offset)
            var currentSetoffType = setoffType ?? editModalComponent?.Entity?.SetoffType ?? DefaultSetoffType ?? SetoffType.AccountsReceivable;
            var typePrefix = currentSetoffType == SetoffType.AccountsReceivable ? "SO" : "PO";
            
            var today = DateTime.Today;
            var prefix = $"{typePrefix}-{today:yyyyMMdd}";
            
            var allSetoffDocs = await SetoffDocumentService.GetAllAsync();
            var todaySetoffDocs = allSetoffDocs
                .Where(s => s.SetoffNumber.StartsWith(prefix))
                .ToList();
            
            var maxNumber = todaySetoffDocs.Any()
                ? todaySetoffDocs.Max(s =>
                {
                    var parts = s.SetoffNumber.Split('-');
                    return parts.Length == 3 && int.TryParse(parts[2], out var num) ? num : 0;
                })
                : 0;
            
            return $"{prefix}-{(maxNumber + 1):D3}";
        }
        catch (Exception)
        {
            // 例外處理時也根據類型決定前綴
            var currentSetoffType = setoffType ?? editModalComponent?.Entity?.SetoffType ?? DefaultSetoffType ?? SetoffType.AccountsReceivable;
            var typePrefix = currentSetoffType == SetoffType.AccountsReceivable ? "SO" : "PO";
            return $"{typePrefix}-{DateTime.Today:yyyyMMdd}-001";
        }
    }

    /// <summary>
    /// 欄位變更事件處理
    /// </summary>
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 註解：因為沖款類型現在由 DefaultSetoffType 控制，不再需要手動變更處理
            // 如果未來需要支援手動變更沖款類型，可以取消註解以下程式碼
            /*
            if (fieldChange.PropertyName == nameof(SetoffDocument.SetoffType) && editModalComponent?.Entity != null)
            {
                editModalComponent.Entity.RelatedPartyId = 0;
                editModalComponent.Entity.RelatedPartyName = string.Empty;
                editModalComponent.Entity.RelatedPartyType = string.Empty;
                
                await InitializeFormFieldsAsync();
                StateHasChanged();
            }
            */
            
            // 使用統一 Helper 處理公司欄位變更
            if (fieldChange.PropertyName == nameof(SetoffDocument.CompanyId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    companyModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
            
            // 處理客戶欄位變更
            if (fieldChange.PropertyName == "CustomerId" && editModalComponent?.Entity != null)
            {
                if (fieldChange.Value != null && int.TryParse(fieldChange.Value.ToString(), out int customerId))
                {
                    editModalComponent.Entity.RelatedPartyId = customerId;
                    editModalComponent.Entity.RelatedPartyType = "Customer";
                    
                    // 更新 RelatedPartyName
                    var customer = customers.FirstOrDefault(c => c.Id == customerId);
                    if (customer != null)
                    {
                        editModalComponent.Entity.RelatedPartyName = customer.CompanyName;
                    }
                    
                    // 更新 ActionButtons
                    await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                        customerModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
                }
            }
            
            // 處理廠商欄位變更
            if (fieldChange.PropertyName == "SupplierId" && editModalComponent?.Entity != null)
            {
                if (fieldChange.Value != null && int.TryParse(fieldChange.Value.ToString(), out int supplierId))
                {
                    editModalComponent.Entity.RelatedPartyId = supplierId;
                    editModalComponent.Entity.RelatedPartyType = "Supplier";
                    
                    // 更新 RelatedPartyName
                    var supplier = suppliers.FirstOrDefault(s => s.Id == supplierId);
                    if (supplier != null)
                    {
                        editModalComponent.Entity.RelatedPartyName = supplier.CompanyName;
                    }
                    
                    // 更新 ActionButtons
                    await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                        supplierModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
                }
            }
            
            // 處理日期篩選變更
            if (fieldChange.PropertyName == "FilterStartDate")
            {
                if (fieldChange.Value != null && DateTime.TryParse(fieldChange.Value.ToString(), out DateTime startDate))
                {
                    filterStartDate = startDate;
                }
                else
                {
                    filterStartDate = null;
                }
                StateHasChanged();
            }
            
            if (fieldChange.PropertyName == "FilterEndDate")
            {
                if (fieldChange.Value != null && DateTime.TryParse(fieldChange.Value.ToString(), out DateTime endDate))
                {
                    filterEndDate = endDate;
                }
                else
                {
                    filterEndDate = null;
                }
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            // 忽略錯誤
        }
    }

    // ===== AutoComplete 相關方法 =====
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(SetoffDocument.CompanyId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["CompanyName"] = searchTerm
                }
            },
            {
                "CustomerId",
                searchTerm => new Dictionary<string, object?>
                {
                    ["CompanyName"] = searchTerm
                }
            },
            {
                "SupplierId",
                searchTerm => new Dictionary<string, object?>
                {
                    ["CompanyName"] = searchTerm
                }
            }
        };
    }

    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(SetoffDocument.CompanyId), companies.Cast<object>() },
            { "CustomerId", customers.Cast<object>() },
            { "SupplierId", suppliers.Cast<object>() }
        };
    }

    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(SetoffDocument.CompanyId), "CompanyName" },
            { "CustomerId", "CompanyName" },
            { "SupplierId", "CompanyName" }
        };
    }

    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(SetoffDocument.CompanyId), "Id" },
            { "CustomerId", "Id" },
            { "SupplierId", "Id" }
        };
    }

    // ===== Modal 管理器 =====
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(SetoffDocument.CompanyId), companyModalManager },
            { "CustomerId", customerModalManager },
            { "SupplierId", supplierModalManager }
        };
    }

    // ===== Action Buttons =====
    private async Task<List<FieldActionButton>> GetCompanyActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent,
            companyModalManager,
            nameof(SetoffDocument.CompanyId)
        );
    }

    private Task<List<FieldActionButton>> GetCustomerActionButtonsAsync()
    {
        // 取得目前的 RelatedPartyId (當 SetoffType 是應收帳款時)
        int? currentCustomerId = null;
        if (editModalComponent?.Entity?.SetoffType == SetoffType.AccountsReceivable && 
            editModalComponent.Entity.RelatedPartyType == "Customer")
        {
            currentCustomerId = editModalComponent.Entity.RelatedPartyId > 0 
                ? editModalComponent.Entity.RelatedPartyId 
                : null;
        }
        
        return Task.FromResult(customerModalManager.GenerateActionButtons(currentCustomerId));
    }

    private Task<List<FieldActionButton>> GetSupplierActionButtonsAsync()
    {
        // 取得目前的 RelatedPartyId (當 SetoffType 是應付帳款時)
        int? currentSupplierId = null;
        if (editModalComponent?.Entity?.SetoffType == SetoffType.AccountsPayable && 
            editModalComponent.Entity.RelatedPartyType == "Supplier")
        {
            currentSupplierId = editModalComponent.Entity.RelatedPartyId > 0 
                ? editModalComponent.Entity.RelatedPartyId 
                : null;
        }
        
        return Task.FromResult(supplierModalManager.GenerateActionButtons(currentSupplierId));
    }

    private async Task OnCompanySavedWrapper(Company company)
    {
        await companyModalManager.HandleEntitySavedAsync(company, shouldAutoSelect: true);
    }

    private async Task OnCustomerSavedWrapper(Customer customer)
    {
        await customerModalManager.HandleEntitySavedAsync(customer, shouldAutoSelect: true);
    }

    private async Task OnSupplierSavedWrapper(Supplier supplier)
    {
        await supplierModalManager.HandleEntitySavedAsync(supplier, shouldAutoSelect: true);
    }

    /// <summary>
    /// 配置自訂模組
    /// </summary>
    private List<GenericEditModalComponent<SetoffDocument, ISetoffDocumentService>.CustomModule> GetCustomModules()
    {
        try
        {
            if (editModalComponent == null)
            {
                return new List<GenericEditModalComponent<SetoffDocument, ISetoffDocumentService>.CustomModule>();
            }

            return new List<GenericEditModalComponent<SetoffDocument, ISetoffDocumentService>.CustomModule>
            {
                new GenericEditModalComponent<SetoffDocument, ISetoffDocumentService>.CustomModule
                {
                    Title = "",
                    Content = CreateSetoffProductDetailManagerContent(),
                    Order = 1
                },
                new GenericEditModalComponent<SetoffDocument, ISetoffDocumentService>.CustomModule
                {
                    Title = "",
                    Content = CreateSetoffPaymentDetailManagerContent(),
                    Order = 2
                },
                new GenericEditModalComponent<SetoffDocument, ISetoffDocumentService>.CustomModule
                {
                    Title = "",
                    Content = CreateSetoffPrepaymentDetailManagerContent(),
                    Order = 3
                }
            };
        }
        catch
        {
            return new List<GenericEditModalComponent<SetoffDocument, ISetoffDocumentService>.CustomModule>();
        }
    }

    /// <summary>
    /// 創建沖銷商品明細管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreateSetoffProductDetailManagerContent() => __builder =>
    {
        try
        {
            @if (editModalComponent?.Entity != null && editModalComponent.Entity.RelatedPartyId > 0)
            {
                <SetoffProductDetailManagerComponent 
                    @ref="setoffProductDetailManager"
                    SetoffDocumentId="@SetoffDocumentId"
                    SetoffType="@editModalComponent.Entity.SetoffType"
                    RelatedPartyId="@editModalComponent.Entity.RelatedPartyId"
                    RelatedPartyType="@editModalComponent.Entity.RelatedPartyType"
                    StartDate="@filterStartDate"
                    EndDate="@filterEndDate"
                    ExistingDetails="@setoffProductDetails"
                    OnDetailsChanged="@HandleProductDetailsChanged"
                    IsReadOnly="@IsReadOnly" />
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    <i class="bi bi-info-circle me-2"></i>
                    請先選擇@(editModalComponent?.Entity?.SetoffType == SetoffType.AccountsReceivable ? "客戶" : "廠商")以載入商品明細
                </div>
            }
        }
        catch
        {
            <div class="alert alert-warning" role="alert">
                載入明細管理器時發生錯誤,請重新整理頁面。
            </div>
        }
    };
    
    /// <summary>
    /// 創建收款記錄管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreateSetoffPaymentDetailManagerContent() => __builder =>
    {
        try
        {
            @if (editModalComponent?.Entity != null && editModalComponent.Entity.RelatedPartyId > 0)
            {
                <SetoffPaymentDetailManagerComponent 
                    @ref="setoffPaymentDetailManager"
                    SetoffDocumentId="@SetoffDocumentId"
                    ExistingPayments="@setoffPayments"
                    OnPaymentsChanged="@HandlePaymentsChanged"
                    IsReadOnly="@IsReadOnly" />
            }
        }
        catch
        {
            <div class="alert alert-warning" role="alert">
                載入收款記錄管理器時發生錯誤,請重新整理頁面。
            </div>
        }
    };
    /// <summary>
    /// 創建預收付款項管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreateSetoffPrepaymentDetailManagerContent() => __builder =>
    {
        try
        {
            @if (editModalComponent?.Entity != null && editModalComponent.Entity.RelatedPartyId > 0)
            {
                <SetoffPrepaymentDetailManagerComponent @ref="setoffPrepaymentDetailManager"
                                                       SetoffDocumentId="@SetoffDocumentId"
                                                       SetoffType="@editModalComponent.Entity.SetoffType"
                                                       CustomerId="@(editModalComponent.Entity.SetoffType == SetoffType.AccountsReceivable ? editModalComponent.Entity.RelatedPartyId : null)"
                                                       SupplierId="@(editModalComponent.Entity.SetoffType == SetoffType.AccountsPayable ? editModalComponent.Entity.RelatedPartyId : null)"
                                                       SetoffDocumentNumber="@editModalComponent.Entity.SetoffNumber"
                                                       ExistingPrepayments="@setoffPrepayments"
                                                       OnPrepaymentsChanged="@HandlePrepaymentsChanged"
                                                       IsReadOnly="@IsReadOnly" />
            }
        }
        catch
        {
            <div class="alert alert-warning" role="alert">
                載入預收付款項管理器時發生錯誤,請重新整理頁面。
            </div>
        }
    };
}
