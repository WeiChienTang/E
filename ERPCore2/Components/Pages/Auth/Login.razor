@page "/auth/login"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies
@inject NavigationManager Navigation
@inject ERPCore2.Services.IAuthenticationService AuthenticationService

<PageTitle>登入 - ERPCore2</PageTitle>

<div class="container-fluid vh-100 d-flex align-items-center justify-content-center bg-light">
    <div class="card shadow-lg" style="width: 400px;">
        <div class="card-header bg-primary text-white text-center">
            <h4 class="mb-0">
                <i class="fas fa-sign-in-alt me-2"></i>
                ERPCore2 登入
            </h4>
        </div>
        <div class="card-body p-4">
            <form @onsubmit="@HandleLoginSubmit" @onsubmit:preventDefault="true">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        @errorMessage
                    </div>
                }

                <div class="mb-3">
                    <label for="username" class="form-label">
                        <i class="fas fa-user me-2"></i>使用者名稱
                    </label>
                    <input @bind="loginModel.Username" 
                           class="form-control" 
                           id="username" 
                           type="text"
                           placeholder="請輸入使用者名稱" 
                           required />
                </div>
                
                <div class="mb-3">
                    <label for="password" class="form-label">
                        <i class="fas fa-lock me-2"></i>密碼
                    </label>
                    <input @bind="loginModel.Password" 
                           type="password" 
                           class="form-control" 
                           id="password" 
                           placeholder="請輸入密碼" 
                           required />
                </div>
                
                <div class="mb-3 form-check">
                    <input @bind="loginModel.RememberMe" 
                           class="form-check-input" 
                           type="checkbox"
                           id="rememberMe" />
                    <label class="form-check-label" for="rememberMe">
                        記住我
                    </label>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>登入中...</span>
                        }
                        else
                        {
                            <i class="fas fa-sign-in-alt me-2"></i>
                            <span>登入</span>
                        }
                    </button>
                </div>
            </form>
        </div>
        <div class="card-footer text-center text-muted">
            <small>ERPCore2 企業資源規劃系統</small>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    protected override void OnInitialized()
    {
        Console.WriteLine("🚀 Login 組件初始化開始");
        loginModel ??= new LoginModel();
        Console.WriteLine($"ReturnUrl: '{ReturnUrl}'");
        Console.WriteLine("✅ Login 組件初始化完成");
    }    private async Task HandleLoginSubmit()
    {
        Console.WriteLine("=== HandleLoginSubmit 開始 (直接 Blazor 模式) ===");
        
        // 防止重複提交
        if (isLoading) 
        {
            Console.WriteLine("❌ 由於 isLoading=true，停止執行");
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();
            
            Console.WriteLine($"loginModel.Username: '{loginModel?.Username}'");
            Console.WriteLine($"loginModel.Password: 長度={loginModel?.Password?.Length ?? 0}");
            Console.WriteLine($"loginModel.RememberMe: {loginModel?.RememberMe}");
            
            // 輸入值檢查
            if (string.IsNullOrWhiteSpace(loginModel?.Username) || string.IsNullOrWhiteSpace(loginModel?.Password))
            {
                Console.WriteLine("❌ 輸入驗證失敗 - 使用者名稱或密碼為空");
                errorMessage = "請輸入使用者名稱和密碼";
                return;
            }            Console.WriteLine("✅ 輸入驗證通過，準備直接驗證員工");

            // 直接調用認證服務進行驗證
            var employeeResult = await AuthenticationService.LoginAsync(
                loginModel!.Username.Trim(), 
                loginModel.Password.Trim());

            if (!employeeResult.IsSuccess || employeeResult.Data == null)
            {
                Console.WriteLine($"❌ 員工驗證失敗: {employeeResult.ErrorMessage}");
                errorMessage = employeeResult.ErrorMessage ?? "使用者名稱或密碼錯誤";
                return;
            }

            var employee = employeeResult.Data;
            Console.WriteLine($"✅ 員工驗證成功: Id={employee.Id}, Username={employee.Username}");

            // 建立認證 Claims
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.NameIdentifier, employee.Id.ToString()),
                new Claim(ClaimTypes.Name, employee.Username),
                new Claim(ClaimTypes.GivenName, employee.FirstName ?? ""),
                new Claim(ClaimTypes.Surname, employee.LastName ?? ""),
                new Claim(ClaimTypes.Email, employee.Email ?? ""),
                new Claim("EmployeeCode", employee.EmployeeCode ?? ""),
                new Claim("Department", employee.Department ?? ""),
                new Claim("Position", employee.Position ?? "")
            };

            Console.WriteLine("🔍 建立的基本 Claims:");
            foreach (var claim in claims)
            {
                Console.WriteLine($"  - {claim.Type}: {claim.Value}");
            }

            // 加入角色聲明
            if (employee.Role != null)
            {
                claims.Add(new Claim(ClaimTypes.Role, employee.Role.RoleName));
                Console.WriteLine($"✅ 添加角色聲明: {employee.Role.RoleName}");
            }
            else
            {
                Console.WriteLine("⚠️ 員工沒有角色資料");
            }            // 建立身份並執行登入 - 使用導航到認證端點的方式
            var claimsList = new List<string>();
            foreach (var claim in claims)
            {
                claimsList.Add($"{claim.Type}|{claim.Value}");
            }
            
            // 將Claims資料序列化並通過導航傳遞到認證端點
            var claimsData = string.Join(";", claimsList);
            var rememberMe = loginModel.RememberMe ? "true" : "false";
            var returnUrl = !string.IsNullOrEmpty(ReturnUrl) ? ReturnUrl : "/";
            
            Console.WriteLine($"🍪 準備導航到認證端點進行Cookie設定");
            Console.WriteLine($"🔄 ReturnUrl: {returnUrl}");
            
            // 導航到認證端點來設置Cookie
            var encodedClaimsData = Uri.EscapeDataString(claimsData);
            var encodedReturnUrl = Uri.EscapeDataString(returnUrl);
            var authUrl = $"/api/auth/signin?claims={encodedClaimsData}&remember={rememberMe}&returnUrl={encodedReturnUrl}";
            
            Console.WriteLine($"🔄 導航到: {authUrl}");
            Navigation.NavigateTo(authUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"💥 HandleLoginSubmit 發生例外: {ex.GetType().Name}");
            Console.WriteLine($"💥 例外訊息: {ex.Message}");
            errorMessage = $"登入時發生錯誤：{ex.Message}";
        }
        finally
        {
            Console.WriteLine($"🔚 HandleLoginSubmit 結束，設定 isLoading=false");
            isLoading = false;
            StateHasChanged();
            Console.WriteLine("=== HandleLoginSubmit 完成 ===");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "請輸入使用者名稱")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "請輸入密碼")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; } = false;
    }
}
