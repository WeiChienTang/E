@page "/warehouses"
@inject IWarehouseService WarehouseService
@rendermode InteractiveServer
@inject INotificationService NotificationService

<GenericIndexPageComponent TEntity="Warehouse" 
                        TService="IWarehouseService"
                        Service="@WarehouseService"
                        EntityBasePath="/warehouses"
                        PageTitle="倉庫維護"
                        PageSubtitle="管理所有倉庫資料與基本資訊"
                        EntityName="倉庫"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        DataLoader="@LoadWarehousesAsync"
                        FilterApplier="@ApplyWarehouseFilters"
                        GetEntityDisplayName="@(warehouse => warehouse.Name)"
                        RequiredPermission="Warehouse.Read"
                        OnAddClick="@modalHandler.ShowAddModalAsync"
                        OnRowClick="@modalHandler.ShowEditModalAsync"
                        @ref="indexComponent" />

<WarehouseEditModalComponent IsVisible="@showEditModal"
                           IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                           WarehouseId="@editingWarehouseId"
                           OnWarehouseSaved="@modalHandler.OnEntitySavedAsync"
                           OnCancel="@modalHandler.OnModalCancelAsync" />
@code {
    // 組件參考
    private GenericIndexPageComponent<Warehouse, IWarehouseService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingWarehouseId = null;
    
    // Modal 處理器
    private ModalHandler<Warehouse, GenericIndexPageComponent<Warehouse, IWarehouseService>> modalHandler = default!;
    
    // 欄位配置
    private WarehouseFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Warehouse, GenericIndexPageComponent<Warehouse, IWarehouseService>>(
                id => editingWarehouseId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 建立欄位配置（傳遞 NotificationService）
            fieldConfiguration = new WarehouseFieldConfiguration(NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: new { PageName = "WarehouseIndex" });
            await NotificationService.ShowErrorAsync("初始化倉庫頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("庫存管理"),
                new("倉庫維護")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入倉庫資料
    private async Task<List<Warehouse>> LoadWarehousesAsync()
    {
        try
        {
            return await WarehouseService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadWarehousesAsync), GetType(), additionalData: "載入倉庫資料失敗");
            await NotificationService.ShowErrorAsync("載入倉庫資料失敗");
            // 設定安全的預設值
            return new List<Warehouse>();
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Warehouse> ApplyWarehouseFilters(SearchFilterModel searchModel, IQueryable<Warehouse> query)
    {
        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyWarehouseFilters), GetType());
    }
}
