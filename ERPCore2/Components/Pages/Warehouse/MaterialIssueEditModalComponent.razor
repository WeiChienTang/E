@* 領料單編輯組件 *@
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.Forms
@using ERPCore2.Helpers
@using ERPCore2.Components.Shared.SubCollections
@using ERPCore2.Models
@inject IMaterialIssueService MaterialIssueService
@inject IEmployeeService EmployeeService
@inject IDepartmentService DepartmentService
@inject INotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<GenericEditModalComponent TEntity="MaterialIssue" 
                          TService="IMaterialIssueService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@MaterialIssueId"
                          Service="@MaterialIssueService"
                          EntityName="領料單"
                          EntityNamePlural="領料單"
                          ModalTitle="@(MaterialIssueId.HasValue ? "編輯領料單" : "新增領料單")"
                          Size="GenericEditModalComponent<MaterialIssue, IMaterialIssueService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@formFields"
                          FormSections="@formSections"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          DataLoader="@LoadMaterialIssueData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          SaveHandler="@SaveMaterialIssueWrapper"
                          SaveSuccessMessage="@(MaterialIssueId.HasValue ? "領料單更新成功" : "領料單新增成功")"
                          SaveFailureMessage="領料單儲存失敗"
                          RequiredPermission="MaterialIssue.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          CustomValidator="@ValidateMaterialIssueDetailsAsync"
                          CustomModules="@GetCustomModules()">
</GenericEditModalComponent>

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? MaterialIssueId { get; set; }
    [Parameter] public EventCallback<MaterialIssue> OnMaterialIssueSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<MaterialIssue, IMaterialIssueService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 原始資料集合（用於 AutoComplete）
    private List<Employee> availableEmployees = new();
    private List<Department> availableDepartments = new();
    
    // 領料明細
    private List<MaterialIssueDetail> materialIssueDetails = new();
    private MaterialIssueDetailManagerComponent? detailManagerComponent;
    
    // 下拉選單選項
    private List<Employee> employees = new();
    private List<Department> departments = new();
    private List<SelectOption> employeeOptions = new();
    private List<SelectOption> departmentOptions = new();

    // ===== 必要方法 =====
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            // 每次開啟 Modal 時都重置明細資料
            materialIssueDetails = new List<MaterialIssueDetail>();
            
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
    }

    private async Task HandleSaveSuccess()
    {
        try
        {
            if (OnMaterialIssueSaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnMaterialIssueSaved.InvokeAsync(editModalComponent.Entity);
            }

            await CloseModal();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleSaveSuccess), GetType(), 
                additionalData: "領料單編輯Modal儲存成功處理失敗");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleCancel), GetType(), 
                additionalData: "領料單編輯Modal取消處理失敗");
        }
    }

    private async Task CloseModal()
    {
        try
        {
            if (IsVisibleChanged.HasDelegate)
            {
                await IsVisibleChanged.InvokeAsync(false);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(CloseModal), GetType(), 
                additionalData: "關閉Modal時發生錯誤");
        }
    }

    // ===== 資料載入方法 =====

    private async Task<MaterialIssue?> LoadMaterialIssueData()
    {
        try
        {
            // 先清空明細資料，避免顯示上一次的資料
            materialIssueDetails = new List<MaterialIssueDetail>();
            
            if (!MaterialIssueId.HasValue)
            {
                // 新增模式：建立新的領料單實體並生成單號
                var newMaterialIssue = new MaterialIssue
                {
                    Code = await GenerateMaterialIssueCodeAsync(),
                    IssueDate = DateTime.Today,
                    Status = EntityStatus.Active,
                    MaterialIssueDetails = new List<MaterialIssueDetail>()
                };
                
                return newMaterialIssue;
            }

            var materialIssue = await MaterialIssueService.GetWithDetailsAsync(MaterialIssueId.Value);
            
            if (materialIssue != null)
            {
                // 載入明細
                materialIssueDetails = materialIssue.MaterialIssueDetails?.ToList() ?? new List<MaterialIssueDetail>();
            }
            
            return materialIssue;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadMaterialIssueData), GetType(), 
                additionalData: $"載入領料單資料失敗 - ID: {MaterialIssueId}");
            await NotificationService.ShowErrorAsync("載入領料單資料失敗");
            return null;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 並行載入相關資料
            var employeesTask = EmployeeService.GetAllAsync();
            var departmentsTask = DepartmentService.GetAllAsync();

            await Task.WhenAll(employeesTask, departmentsTask);

            employees = await employeesTask;
            departments = await departmentsTask;
            
            availableEmployees = employees;
            availableDepartments = departments;

            // 建立下拉選單選項
            employeeOptions = employees.Select(e => new SelectOption
            {
                Text = e.Name ?? "",
                Value = e.Id.ToString()
            }).ToList();

            departmentOptions = departments.Select(d => new SelectOption
            {
                Text = d.Name ?? "",
                Value = d.Id.ToString()
            }).ToList();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalDataAsync), GetType(), 
                additionalData: "載入領料單相關資料失敗");
            await NotificationService.ShowErrorAsync("載入相關資料失敗");
            
            // 設定安全的預設值
            employees = new List<Employee>();
            departments = new List<Department>();
            employeeOptions = new List<SelectOption>();
            departmentOptions = new List<SelectOption>();
        }
    }

    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new FormFieldDefinition()
                {
                    PropertyName = nameof(MaterialIssue.Code),
                    Label = "領料單號",
                    FieldType = FormFieldType.Text,
                    IsReadOnly = true,
                    Placeholder = "系統自動產生",
                    HelpText = "系統自動產生的唯一領料單號"
                },
                new FormFieldDefinition()
                {
                    PropertyName = nameof(MaterialIssue.IssueDate),
                    Label = "領料日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    DefaultValue = DateTime.Today,
                    HelpText = "請選擇領料的日期"
                },
                new FormFieldDefinition()
                {
                    PropertyName = nameof(MaterialIssue.EmployeeId),
                    Label = "領料人員",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = employeeOptions,
                    Placeholder = "請選擇領料人員",
                    HelpText = "選擇負責領料的員工"
                },
                new FormFieldDefinition()
                {
                    PropertyName = nameof(MaterialIssue.DepartmentId),
                    Label = "領料部門",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = departmentOptions,
                    Placeholder = "請選擇領料部門",
                    HelpText = "選擇負責領料的部門"
                },

                FormFieldConfigurationHelper.CreateRemarksField<MaterialIssue>()
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(MaterialIssue.Code), "基本資訊" },
                { nameof(MaterialIssue.IssueDate), "基本資訊" },
                { nameof(MaterialIssue.EmployeeId), "基本資訊" },
                { nameof(MaterialIssue.DepartmentId), "基本資訊" },
                { nameof(MaterialIssue.Remarks), "額外資料" }
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFieldsAsync), GetType(), 
                additionalData: "初始化表單欄位失敗");
            formFields = new List<FormFieldDefinition>();
            formSections = new Dictionary<string, string>();
        }
    }

    // ===== AutoComplete 配置 =====

    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(MaterialIssue.EmployeeId), availableEmployees },
            { nameof(MaterialIssue.DepartmentId), availableDepartments }
        };
    }

    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(MaterialIssue.EmployeeId), nameof(Employee.Name) },
            { nameof(MaterialIssue.DepartmentId), nameof(Department.Name) }
        };
    }

    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(MaterialIssue.EmployeeId), nameof(Employee.Id) },
            { nameof(MaterialIssue.DepartmentId), nameof(Department.Id) }
        };
    }

    // ===== 自訂模組配置 =====

    private List<GenericEditModalComponent<MaterialIssue, IMaterialIssueService>.CustomModule> GetCustomModules()
    {
        if (editModalComponent == null)
        {
            return new List<GenericEditModalComponent<MaterialIssue, IMaterialIssueService>.CustomModule>();
        }

        return new List<GenericEditModalComponent<MaterialIssue, IMaterialIssueService>.CustomModule>
        {
            new GenericEditModalComponent<MaterialIssue, IMaterialIssueService>.CustomModule
            {
                Order = 1,
                IsVisible = true,
                Content = CreateDetailManagerContent()
            }
        };
    }

    private RenderFragment CreateDetailManagerContent() => __builder =>
    {
        if (editModalComponent?.Entity != null)
        {
            <MaterialIssueDetailManagerComponent @ref="detailManagerComponent"
                                                Details="@materialIssueDetails"
                                                DetailsChanged="@HandleDetailsChanged"
                                                IsReadOnly="false" />
        }
    };

    private void HandleDetailsChanged(List<MaterialIssueDetail> details)
    {
        materialIssueDetails = details;
        StateHasChanged();
    }

    // ===== 儲存處理 =====

    private async Task<bool> SaveMaterialIssueWrapper(MaterialIssue materialIssue)
    {
        try
        {
            if (materialIssue == null)
            {
                await NotificationService.ShowErrorAsync("沒有要儲存的領料單資料");
                return false;
            }

            // 設定明細
            materialIssue.MaterialIssueDetails = materialIssueDetails;

            // 儲存領料單
            ServiceResult<MaterialIssue> result;
            if (materialIssue.Id > 0)
            {
                result = await MaterialIssueService.UpdateAsync(materialIssue);
            }
            else
            {
                result = await MaterialIssueService.CreateAsync(materialIssue);
            }

            if (!result.IsSuccess || result.Data == null)
            {
                await NotificationService.ShowErrorAsync(result.ErrorMessage ?? "儲存領料單失敗");
                return false;
            }

            return true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveMaterialIssueWrapper), GetType(), 
                additionalData: $"儲存領料單失敗 - ID: {materialIssue?.Id}");
            await NotificationService.ShowErrorAsync($"儲存時發生錯誤：{ex.Message}");
            return false;
        }
    }

    // ===== 驗證方法 =====

    private async Task<bool> ValidateMaterialIssueDetailsAsync(MaterialIssue materialIssue)
    {
        try
        {
            // 驗證至少有一筆明細
            if (!materialIssueDetails.Any())
            {
                await NotificationService.ShowErrorAsync("請至少新增一筆領料明細");
                return false;
            }

            // 驗證明細資料完整性
            var invalidDetails = materialIssueDetails.Where(d => 
                d.ProductId <= 0 || 
                d.WarehouseId <= 0 || 
                d.IssueQuantity <= 0
            ).ToList();

            if (invalidDetails.Any())
            {
                await NotificationService.ShowErrorAsync("存在無效的明細資料，請檢查商品、倉庫和數量是否都已填寫");
                return false;
            }

            return true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ValidateMaterialIssueDetailsAsync), GetType(), 
                additionalData: "驗證領料明細失敗");
            await NotificationService.ShowErrorAsync("驗證明細資料時發生錯誤");
            return false;
        }
    }

    // ===== 欄位變更處理 =====

    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 可在此處理欄位變更邏輯
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnFieldValueChanged), GetType(), 
                additionalData: $"處理欄位變更失敗 - Property: {fieldChange.PropertyName}");
        }
    }

    // ===== 輔助方法 =====

    /// <summary>
    /// 生成領料單號
    /// </summary>
    private async Task<string> GenerateMaterialIssueCodeAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            MaterialIssueService,
            "MI",
            (service, code, excludeId) => service.IsIssueNumberExistsAsync(code, excludeId)
        );
    }
}
