@* 可重用的庫存編輯組件 - 可在任何頁面中嵌入 *@
@inject IInventoryStockService InventoryStockService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@inject INotificationService NotificationService
@inject ActionButtonHelper ActionButtonHelper

<GenericEditModalComponent TEntity="InventoryStock" 
                          TService="IInventoryStockService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@InventoryStockId"
                          Service="@InventoryStockService"
                          EntityName="庫存"
                          EntityNamePlural="庫存"
                          ModalTitle="@(InventoryStockId.HasValue ? "編輯庫存" : "新增庫存")"
                          Size="GenericEditModalComponent<InventoryStock, IInventoryStockService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadInventoryStockData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(InventoryStockId.HasValue ? "庫存更新成功" : "庫存新增成功")"
                          SaveFailureMessage="庫存儲存失敗"
                          RequiredPermission="InventoryStock.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged" />

@* 商品編輯 Modal *@
<ProductEditModalComponent @ref="productEditModal"
                          IsVisible="@productModalManager.IsModalVisible"
                          IsVisibleChanged="@productModalManager.HandleModalVisibilityChangedAsync"
                          ProductId="@productModalManager.SelectedEntityId"
                          OnProductSaved="@OnProductSavedWrapper"
                          OnCancel="@productModalManager.HandleModalCancelAsync" />

@* 倉庫編輯 Modal *@
<WarehouseEditModalComponent @ref="warehouseEditModal"
                            IsVisible="@warehouseModalManager.IsModalVisible"
                            IsVisibleChanged="@warehouseModalManager.HandleModalVisibilityChangedAsync"
                            WarehouseId="@warehouseModalManager.SelectedEntityId"
                            OnWarehouseSaved="@OnWarehouseSavedWrapper"
                            OnCancel="@warehouseModalManager.HandleModalCancelAsync" />

@* 倉庫位置編輯 Modal *@
<WarehouseLocationEditModalComponent @ref="warehouseLocationEditModal"
                                    IsVisible="@warehouseLocationModalManager.IsModalVisible"
                                    IsVisibleChanged="@warehouseLocationModalManager.HandleModalVisibilityChangedAsync"
                                    WarehouseLocationId="@warehouseLocationModalManager.SelectedEntityId"
                                    OnWarehouseLocationSaved="@OnWarehouseLocationSavedWrapper"
                                    OnCancel="@warehouseLocationModalManager.HandleModalCancelAsync" />

@code {
    // ===== 參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? InventoryStockId { get; set; }
    [Parameter] public EventCallback<InventoryStock> OnInventoryStockSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public Dictionary<string, object?>? PrefilledValues { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<InventoryStock, IInventoryStockService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<Product> availableProducts = new();
    private List<Warehouse> availableWarehouses = new();
    private List<WarehouseLocation> availableWarehouseLocations = new();
    private int? selectedWarehouseId = null;

    // Modal 管理器
    private ProductEditModalComponent? productEditModal;
    private WarehouseEditModalComponent? warehouseEditModal;
    private WarehouseLocationEditModalComponent? warehouseLocationEditModal;
    private RelatedEntityModalManager<Product> productModalManager = default!;
    private RelatedEntityModalManager<Warehouse> warehouseModalManager = default!;
    private RelatedEntityModalManager<WarehouseLocation> warehouseLocationModalManager = default!;

    // ===== 生命週期 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeModalManagers();
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化庫存編輯組件時發生錯誤");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
    }

    // ===== 事件處理 =====
    private async Task HandleSaveSuccess()
    {
        try
        {
            // 如果父組件需要知道庫存已儲存
            if (OnInventoryStockSaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnInventoryStockSaved.InvokeAsync(editModalComponent.Entity);
            }

            // 關閉 Modal
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }

            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理取消事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task CloseModal()
    {
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(false);
        }
    }

    // ===== 資料載入 =====
    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入產品列表
            availableProducts = await ProductService.GetAllAsync();
            
            // 載入倉庫列表  
            availableWarehouses = await WarehouseService.GetAllAsync();
            
            // 載入所有倉庫位置（初始化時）
            availableWarehouseLocations = await WarehouseLocationService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入庫存資料時發生錯誤：{ex.Message}");
            availableProducts = new List<Product>();
            availableWarehouses = new List<Warehouse>();
            availableWarehouseLocations = new List<WarehouseLocation>();
        }
    }

    private async Task<InventoryStock?> LoadInventoryStockData()
    {
        try
        {
            if (!InventoryStockId.HasValue) 
            {
                // 新增模式：建立新的庫存實體
                var newInventoryStock = new InventoryStock
                {
                    CurrentStock = 0,
                    ReservedStock = 0,
                    InTransitStock = 0,
                    Status = EntityStatus.Active
                };
                
                // 應用預填值
                if (PrefilledValues != null)
                {
                    foreach (var kvp in PrefilledValues)
                    {
                        var property = typeof(InventoryStock).GetProperty(kvp.Key);
                        if (property != null && property.CanWrite && kvp.Value != null)
                        {
                            try
                            {
                                // 轉換值的類型
                                var convertedValue = Convert.ChangeType(kvp.Value, property.PropertyType);
                                property.SetValue(newInventoryStock, convertedValue);
                                
                                // 如果是倉庫ID，也設定 selectedWarehouseId
                                if (kvp.Key == nameof(InventoryStock.WarehouseId) && int.TryParse(kvp.Value.ToString(), out int warehouseId))
                                {
                                    selectedWarehouseId = warehouseId;
                                }
                            }
                            catch (Exception)
                            {
                                // 忽略轉換失敗的值
                            }
                        }
                    }
                }
                
                return newInventoryStock;
            }

            var inventoryStock = await InventoryStockService.GetByIdAsync(InventoryStockId.Value);            
            
            if (inventoryStock == null)
            {
                // 如果找不到庫存，建立新的預設庫存
                return new InventoryStock
                {
                    CurrentStock = 0,
                    ReservedStock = 0,
                    InTransitStock = 0,
                    Status = EntityStatus.Active
                };
            }
            
            // 設定選中的倉庫，用於更新倉庫位置選項
            selectedWarehouseId = inventoryStock.WarehouseId;
            
            return inventoryStock;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入庫存資料時發生錯誤：{ex.Message}");
            
            // 設定安全的預設值，確保程式不會崩潰
            return new InventoryStock
            {
                CurrentStock = 0,
                ReservedStock = 0,
                InTransitStock = 0,
                Status = EntityStatus.Active
            };
        }
    }

    // ===== 表單初始化 =====
    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(InventoryStock.ProductId),
                    Label = "商品",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇商品",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "輸入商品名稱進行搜尋，或直接選擇",
                    ActionButtons = await GetProductActionButtonsAsync()
                },
                new()
                {
                    PropertyName = nameof(InventoryStock.WarehouseId),
                    Label = "倉庫",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇倉庫",
                    IsRequired = false,
                    MinSearchLength = 0,
                    HelpText = "輸入倉庫名稱進行搜尋，或直接選擇",
                    ActionButtons = await GetWarehouseActionButtonsAsync()
                },
                new()
                {
                    PropertyName = nameof(InventoryStock.WarehouseLocationId),
                    Label = "倉庫位置",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = selectedWarehouseId.HasValue ? "請輸入或選擇倉庫位置（可選）" : "請先選擇倉庫",
                    IsRequired = false,
                    IsDisabled = !selectedWarehouseId.HasValue,
                    MinSearchLength = 0,
                    HelpText = selectedWarehouseId.HasValue ? "輸入倉庫位置名稱進行搜尋，或直接選擇（可選）" : "請先選擇倉庫才能選擇倉庫位置",
                    ActionButtons = await GetWarehouseLocationActionButtonsAsync()
                },
                
                // 庫存數量區段
                new()
                {
                    PropertyName = nameof(InventoryStock.CurrentStock),
                    Label = "現有庫存",
                    FieldType = FormFieldType.Number,
                    Placeholder = "請輸入現有庫存數量（預設為0）",
                    IsRequired = false,
                    HelpText = "商品目前的實際庫存數量（預設為0）",
                },
                new()
                {
                    PropertyName = nameof(InventoryStock.ReservedStock),
                    Label = "預留庫存",
                    FieldType = FormFieldType.Number,
                    Placeholder = "系統自動計算",
                    IsRequired = false,
                    IsReadOnly = true,
                    HelpText = "已預留但尚未出庫的數量（系統會自動計算，不可手動修改）",
                },
                new()
                {
                    PropertyName = nameof(InventoryStock.InTransitStock),
                    Label = "在途庫存",
                    FieldType = FormFieldType.Number,
                    Placeholder = "系統自動計算",
                    IsRequired = false,
                    IsReadOnly = true,
                    HelpText = "已下單但尚未到貨的數量（系統會自動計算，不可手動修改）",
                },
                
                // 庫存警戒線區段
                new()
                {
                    PropertyName = nameof(InventoryStock.MinStockLevel),
                    Label = "最低庫存警戒線",
                    FieldType = FormFieldType.Number,
                    Placeholder = "請輸入最低庫存警戒線",
                    IsRequired = false,
                    HelpText = "當庫存低於此數量時會發出警告",
                },
                new()
                {
                    PropertyName = nameof(InventoryStock.MaxStockLevel),
                    Label = "最高庫存警戒線",
                    FieldType = FormFieldType.Number,
                    Placeholder = "請輸入最高庫存警戒線",
                    IsRequired = false,
                    HelpText = "建議的最大庫存數量",
                },
                
                // 成本資訊區段
                new()
                {
                    PropertyName = nameof(InventoryStock.AverageCost),
                    Label = "平均成本",
                    FieldType = FormFieldType.Number,
                    Placeholder = "系統自動計算",
                    IsRequired = false,
                    IsReadOnly = true,
                    HelpText = "商品的平均單位成本（系統會自動計算，不可手動修改）",
                    Step = 0.01m
                },
                
                FormFieldConfigurationHelper.CreateRemarksField<InventoryStock>(
                    label: "庫存備註",
                    placeholder: "請輸入庫存備註",
                    helpText: "其他需要補充的庫存相關資訊",
                    rows: 2,
                    containerCssClass: "col-12"
                )
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(InventoryStock.ProductId), "基本資訊" },
                { nameof(InventoryStock.WarehouseId), "基本資訊" },
                { nameof(InventoryStock.WarehouseLocationId), "基本資訊" },                
                { nameof(InventoryStock.CurrentStock), "數量資訊" },                              
                { nameof(InventoryStock.MinStockLevel), "數量資訊" },
                { nameof(InventoryStock.MaxStockLevel), "數量資訊" },     
                { nameof(InventoryStock.AverageCost), "系統計算" },    
                { nameof(InventoryStock.InTransitStock), "系統計算" },    
                { nameof(InventoryStock.ReservedStock), "系統計算" },  
                { nameof(InventoryStock.Remarks), "額外資料" }
            };
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    // ===== AutoComplete 配置方法 =====
    
    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(InventoryStock.ProductId), availableProducts.Cast<object>() },
            { nameof(InventoryStock.WarehouseId), availableWarehouses.Cast<object>() },
            { nameof(InventoryStock.WarehouseLocationId), availableWarehouseLocations.Cast<object>() }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(InventoryStock.ProductId), "Name" },
            { nameof(InventoryStock.WarehouseId), "Name" },
            { nameof(InventoryStock.WarehouseLocationId), "Name" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(InventoryStock.ProductId), "Id" },
            { nameof(InventoryStock.WarehouseId), "Id" },
            { nameof(InventoryStock.WarehouseLocationId), "Id" }
        };
    }

    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(InventoryStock.ProductId), productModalManager },
            { nameof(InventoryStock.WarehouseId), warehouseModalManager },
            { nameof(InventoryStock.WarehouseLocationId), warehouseLocationModalManager }
        };
    }

    // ===== Modal 管理器初始化方法 =====
    
    /// <summary>
    /// 初始化所有 Modal 管理器
    /// </summary>
    private void InitializeModalManagers()
    {
        InitializeProductModalManager();
        InitializeWarehouseModalManager();
        InitializeWarehouseLocationModalManager();
    }

    /// <summary>
    /// 初始化商品 Modal 管理器
    /// </summary>
    private void InitializeProductModalManager()
    {
        productModalManager = new RelatedEntityManagerBuilder<Product>(NotificationService, "商品")
            .WithPropertyName(nameof(InventoryStock.ProductId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(productId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.ProductId = productId;
                }
            })
            .WithCustomPostProcess(async product => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 初始化倉庫 Modal 管理器
    /// </summary>
    private void InitializeWarehouseModalManager()
    {
        warehouseModalManager = new RelatedEntityManagerBuilder<Warehouse>(NotificationService, "倉庫")
            .WithPropertyName(nameof(InventoryStock.WarehouseId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(warehouseId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.WarehouseId = warehouseId;
                }
            })
            .WithCustomPostProcess(async warehouse => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 初始化倉庫位置 Modal 管理器
    /// </summary>
    private void InitializeWarehouseLocationModalManager()
    {
        warehouseLocationModalManager = new RelatedEntityManagerBuilder<WarehouseLocation>(NotificationService, "倉庫位置")
            .WithPropertyName(nameof(InventoryStock.WarehouseLocationId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(warehouseLocationId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.WarehouseLocationId = warehouseLocationId;
                }
            })
            .WithCustomPostProcess(async warehouseLocation => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    // ===== ActionButton 產生方法 =====
    
    /// <summary>
    /// 產生商品操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetProductActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            productModalManager, 
            nameof(InventoryStock.ProductId)
        );
    }

    /// <summary>
    /// 產生倉庫操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetWarehouseActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            warehouseModalManager, 
            nameof(InventoryStock.WarehouseId)
        );
    }

    /// <summary>
    /// 產生倉庫位置操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetWarehouseLocationActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            warehouseLocationModalManager, 
            nameof(InventoryStock.WarehouseLocationId)
        );
    }

    // ===== 輔助方法 =====
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 使用統一 Helper 處理商品欄位變更
            if (fieldChange.PropertyName == nameof(InventoryStock.ProductId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    productModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
            // 使用統一 Helper 處理倉庫欄位變更
            else if (fieldChange.PropertyName == nameof(InventoryStock.WarehouseId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    warehouseModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
                await OnWarehouseChanged(fieldChange.Value);
            }
            // 使用統一 Helper 處理倉庫位置欄位變更
            else if (fieldChange.PropertyName == nameof(InventoryStock.WarehouseLocationId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    warehouseLocationModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理欄位變更時發生錯誤：{ex.Message}");
        }
    }

    private async Task OnWarehouseChanged(object? value)
    {
        try
        {
            if (int.TryParse(value?.ToString(), out int warehouseId))
            {
                selectedWarehouseId = warehouseId;
                
                // 重新載入倉庫位置資料，只載入該倉庫的位置
                var result = await WarehouseLocationService.GetByWarehouseIdAsync(warehouseId);
                if (result.IsSuccess)
                {
                    availableWarehouseLocations = result.Data?.ToList() ?? new List<WarehouseLocation>();
                }
                else
                {
                    availableWarehouseLocations = new List<WarehouseLocation>();
                }
                
                // 清空倉庫位置選擇（因為倉庫變更了）
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.WarehouseLocationId = null;
                }
                
                // 重新初始化表單欄位以更新倉庫位置欄位的啟用/停用狀態
                await InitializeFormFieldsAsync();
                
                // 觸發狀態變更以更新 AutoComplete 選項
                StateHasChanged();
            }
            else
            {
                // 如果倉庫ID無效，清空相關資料
                selectedWarehouseId = null;
                availableWarehouseLocations = new List<WarehouseLocation>();
                
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.WarehouseLocationId = null;
                }
                
                // 重新初始化表單欄位以停用倉庫位置欄位
                await InitializeFormFieldsAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"更新倉庫位置選項時發生錯誤：{ex.Message}");
        }
    }

    private List<SelectOption> GetWarehouseLocationOptions(int? warehouseId)
    {
        var options = new List<SelectOption>
        {
            new SelectOption { Text = "無指定位置", Value = "" }
        };

        if (warehouseId.HasValue)
        {
            var locations = availableWarehouseLocations
                .Where(wl => wl.WarehouseId == warehouseId.Value)
                .Select(wl => new SelectOption
                {
                    Text = $"{wl.Code} - {wl.Name}",
                    Value = wl.Id.ToString()
                }).ToList();
            
            options.AddRange(locations);
        }

        return options;
    }

    // ===== Modal 事件包裝器方法 =====
    
    /// <summary>
    /// 包裝商品儲存事件
    /// </summary>
    private async Task OnProductSavedWrapper()
    {
        try
        {
            // 重新載入資料
            if (productModalManager.ReloadDataCallback != null)
            {
                await productModalManager.ReloadDataCallback();
            }
            
            // 執行自訂後處理邏輯
            if (productModalManager.CustomPostProcessCallback != null)
            {
                var dummyProduct = new Product();
                await productModalManager.CustomPostProcessCallback(dummyProduct);
            }
            
            // 關閉 Modal
            await productModalManager.CloseModalAsync();
            
            // 顯示成功訊息
            await NotificationService.ShowSuccessAsync("商品已成功儲存，選項已更新");
            
            // 觸發狀態變更
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理商品儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 包裝倉庫儲存事件
    /// </summary>
    private async Task OnWarehouseSavedWrapper()
    {
        try
        {
            // 重新載入資料
            if (warehouseModalManager.ReloadDataCallback != null)
            {
                await warehouseModalManager.ReloadDataCallback();
            }
            
            // 執行自訂後處理邏輯
            if (warehouseModalManager.CustomPostProcessCallback != null)
            {
                var dummyWarehouse = new Warehouse();
                await warehouseModalManager.CustomPostProcessCallback(dummyWarehouse);
            }
            
            // 關閉 Modal
            await warehouseModalManager.CloseModalAsync();
            
            // 顯示成功訊息
            await NotificationService.ShowSuccessAsync("倉庫已成功儲存，選項已更新");
            
            // 觸發狀態變更
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理倉庫儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 包裝倉庫位置儲存事件
    /// </summary>
    private async Task OnWarehouseLocationSavedWrapper()
    {
        try
        {
            // 重新載入資料
            if (warehouseLocationModalManager.ReloadDataCallback != null)
            {
                await warehouseLocationModalManager.ReloadDataCallback();
            }
            
            // 執行自訂後處理邏輯
            if (warehouseLocationModalManager.CustomPostProcessCallback != null)
            {
                var dummyWarehouseLocation = new WarehouseLocation();
                await warehouseLocationModalManager.CustomPostProcessCallback(dummyWarehouseLocation);
            }
            
            // 關閉 Modal
            await warehouseLocationModalManager.CloseModalAsync();
            
            // 顯示成功訊息
            await NotificationService.ShowSuccessAsync("倉庫位置已成功儲存，選項已更新");
            
            // 觸發狀態變更
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理倉庫位置儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    // ===== 公開方法 (供父組件調用) =====

    /// <summary>
    /// 開啟新增庫存 Modal
    /// </summary>
    public async Task ShowAddModal()
    {
        InventoryStockId = null;
        selectedWarehouseId = null;
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(true);
        }
    }

    /// <summary>
    /// 開啟編輯庫存 Modal
    /// </summary>
    public async Task ShowEditModal(int inventoryStockId)
    {
        InventoryStockId = inventoryStockId;
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(true);
        }
    }

    /// <summary>
    /// 開啟新增庫存 Modal 並預填商品和倉庫
    /// </summary>
    public async Task ShowAddModalWithPrefilledData(int productId, int warehouseId)
    {
        InventoryStockId = null;
        selectedWarehouseId = warehouseId;
        
        PrefilledValues = new Dictionary<string, object?>
        {
            { nameof(InventoryStock.ProductId), productId },
            { nameof(InventoryStock.WarehouseId), warehouseId }
        };
        
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(true);
        }
    }
}