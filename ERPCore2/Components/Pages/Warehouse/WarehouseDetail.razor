@page "/warehouses/detail/{warehouseId:int}"

@inject IWarehouseService WarehouseService
@inject IErrorLogService ErrorLogService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PagePermissionCheck RequiredPermission="Warehouse.Read">
    <GenericDetailPageComponent TEntity="Warehouse" 
                            TService="IWarehouseService"
                            EntityId="@WarehouseId"
                            Entity="@warehouse"
                            Service="@WarehouseService"
                            EntityName="倉庫"
                            EntityNamePlural="倉庫"
                            IndexRoute="/warehouses"
                            EditRoute="/warehouses/edit"
                            LoadingText="載入倉庫資料中..."
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadWarehouseDataAsync"
                            EntityTitleSelector="@(w => w.WarehouseName)"
                            EntitySubtitleSelector="@(w => $"倉庫代碼：{w.WarehouseCode}")"
                            EntityDisplayNameSelector="@(w => w.WarehouseName)"
                            OnDataLoaded="@OnWarehouseDataLoaded"
                            UseTabLayout="true"
                            TabSections="@GetTabSections()">
    </GenericDetailPageComponent>
</PagePermissionCheck>
@code {
    [Parameter] public int WarehouseId { get; set; }

    private Warehouse? warehouse;
    private bool _isLoading = false; // 防止重複載入

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("倉庫管理", "/warehouses"),
        new("倉庫詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Warehouse?> LoadWarehouseDataAsync()
    {
        // 防止重複載入
        if (_isLoading)
        {
            return warehouse;
        }
        
        try
        {
            _isLoading = true;
            
            if (WarehouseId <= 0) return null;
            var result = await WarehouseService.GetWarehouseWithLocationsAsync(WarehouseId);
            warehouse = result; // 保持本地變數同步
            
            return result;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadWarehouseDataAsync), GetType(),
                additionalData: new { WarehouseId = WarehouseId });
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Task OnWarehouseDataLoaded()
    {
        try
        {
            // 資料載入完成後的處理
            StateHasChanged();        
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnWarehouseDataLoaded), GetType(),
                additionalData: new { WarehouseId = WarehouseId });
            return Task.CompletedTask;
        }
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Warehouse, IWarehouseService>.TabSection> GetTabSections()
    {
        try
        {
            return new List<GenericDetailPageComponent<Warehouse, IWarehouseService>.TabSection>
            {           
                 new GenericDetailPageComponent<Warehouse, IWarehouseService>.TabSection
                {
                    Id = "basic",
                    Title = "基本資料",
                    Content = @<div>
                        <BasicInfoDisplayComponent Fields="@GetWarehouseBasicFields()" />
                    </div>            },
            
            new GenericDetailPageComponent<Warehouse, IWarehouseService>.TabSection
            {
                Id = "locations",
                Title = "庫位資訊",
                Content = @<div>
                    <div class="card">
                        <div class="card-header bg-light">
                            <h6 class="card-title mb-0">
                                <i class="fas fa-map-marker-alt me-2"></i>庫位列表
                            </h6>
                        </div>
                        <div class="card-body">
                            @if (warehouse?.WarehouseLocations?.Any() == true)
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>庫位代碼</th>
                                                <th>庫位名稱</th>
                                                <th>區域/排/層/位</th>
                                                <th>狀態</th>
                                                <th>說明</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var location in warehouse.WarehouseLocations.OrderBy(l => l.LocationCode))
                                            {
                                                <tr>
                                                    <td>
                                                        <span class="fw-medium">@location.LocationCode</span>
                                                    </td>
                                                    <td>@location.LocationName</td>
                                                    <td>
                                                        @{
                                                            var locationParts = new List<string>();
                                                            if (!string.IsNullOrEmpty(location.Zone)) locationParts.Add($"區:{location.Zone}");
                                                            if (!string.IsNullOrEmpty(location.Aisle)) locationParts.Add($"排:{location.Aisle}");
                                                            if (!string.IsNullOrEmpty(location.Level)) locationParts.Add($"層:{location.Level}");
                                                            if (!string.IsNullOrEmpty(location.Position)) locationParts.Add($"位:{location.Position}");
                                                        }
                                                        @if (locationParts.Any())
                                                        {
                                                            <span class="badge bg-info">@string.Join(", ", locationParts)</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">未設定</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (location.IsActive)
                                                        {
                                                            <span class="badge bg-success">啟用</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-secondary">停用</span>
                                                        }
                                                    </td>
                                                    <td>@(location.Description ?? "無")</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4 text-muted">
                                    <i class="fas fa-inbox fa-2x mb-3"></i>
                                    <p>此倉庫目前沒有設定庫位</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            },
            
            new GenericDetailPageComponent<Warehouse, IWarehouseService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div>
                    <SystemInfoDisplayComponent CreatedAt="@(warehouse?.CreatedAt ?? DateTime.MinValue)"
                                               UpdatedAt="@warehouse?.UpdatedAt"
                                               CreatedBy="@warehouse?.CreatedBy"
                                               UpdatedBy="@warehouse?.UpdatedBy" />
                </div>
            }
        };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetTabSections), GetType(),
                additionalData: new { WarehouseId = WarehouseId });
            
            // 返回預設的空標籤頁列表
            return new List<GenericDetailPageComponent<Warehouse, IWarehouseService>.TabSection>();
        }
    }

    // 取得倉庫基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetWarehouseBasicFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "倉庫代碼",
                Value = warehouse?.WarehouseCode,
                IsPrimary = true,
                ValueBold = true,
                IconClass = "fas fa-barcode",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary",
                ColSize = 6
            },
            new()
            {
                Label = "倉庫名稱",
                Value = warehouse?.WarehouseName,
                ValueBold = true,
                IconClass = "fas fa-warehouse",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 6
            },
            new()
            {
                Label = "倉庫類型",
                Value = GetWarehouseTypeDisplayName(warehouse?.WarehouseType),
                IconClass = "fas fa-tags",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning",
                ColSize = 6
            },
            new()
            {
                Label = "預設倉庫",
                CustomContent = @<div>
                    @if (warehouse?.IsDefault == true)
                    {
                        <span class="badge bg-primary">
                            <i class="fas fa-star me-1"></i>是
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">否</span>
                    }
                </div>,
                IconClass = "fas fa-star",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning",
                ColSize = 6
            },
            new()
            {
                Label = "狀態",
                CustomContent = @<div>
                    @if (warehouse?.IsActive == true)
                    {
                        <span class="badge bg-success">
                            <i class="fas fa-check-circle me-1"></i>啟用
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">
                            <i class="fas fa-times-circle me-1"></i>停用
                        </span>
                    }
                </div>,
                IconClass = "fas fa-toggle-on",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success",
                ColSize = 6
            },
            new()
            {
                Label = "地址",
                Value = warehouse?.Address,
                IconClass = "fas fa-map-marker-alt",
                IconBgClass = "bg-danger bg-opacity-10",
                IconTextClass = "text-danger",
                VisibilityCondition = () => !string.IsNullOrEmpty(warehouse?.Address),
                ColSize = 12
            },
            new()
            {
                Label = "聯絡人",
                Value = warehouse?.ContactPerson,
                IconClass = "fas fa-user",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success",
                VisibilityCondition = () => !string.IsNullOrEmpty(warehouse?.ContactPerson),
                ColSize = 6
            },
            new()
            {
                Label = "聯絡電話",
                Value = warehouse?.Phone,
                IconClass = "fas fa-phone",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                VisibilityCondition = () => !string.IsNullOrEmpty(warehouse?.Phone),
                ColSize = 6
            }
        };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetWarehouseBasicFields), GetType(),
                additionalData: new { WarehouseId = WarehouseId });
            
            // 返回預設的空欄位列表
            return new List<BasicInfoDisplayComponent.BasicInfoField>();
        }
    }

    // 輔助方法：取得倉庫類型顯示名稱
    private string GetWarehouseTypeDisplayName(WarehouseTypeEnum? warehouseType)
    {
        try
        {
            return warehouseType switch
            {
                WarehouseTypeEnum.Main => "主倉庫",
                WarehouseTypeEnum.Branch => "分倉庫",
                WarehouseTypeEnum.Virtual => "虛擬倉庫",
                WarehouseTypeEnum.Return => "退貨倉庫",
                _ => "未知"
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetWarehouseTypeDisplayName), GetType(),
                additionalData: new { WarehouseType = warehouseType });
            
            // 返回預設值
            return "未知";
        }
    }
}
