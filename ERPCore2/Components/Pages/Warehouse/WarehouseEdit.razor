@page "/warehouses/edit"
@page "/warehouses/edit/{id:int?}"

@inject IWarehouseService WarehouseService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<GenericEditPageComponent TEntity="Warehouse" 
                        TService="IWarehouseService"
                        Id="@Id"
                        Entity="@warehouse"
                        Service="@WarehouseService"
                        EntityName="倉庫"
                        EntityNamePlural="倉庫"
                        PageTitle="@(Id.HasValue ? "編輯倉庫" : "新增倉庫")"
                        FormTitle="基本資料"
                        FormSubtitle="倉庫的基本資訊"
                        IndexRoute="/warehouses"
                        RequiredPermission="@(Id.HasValue ? "Warehouse.Update" : "Warehouse.Create")"
                        UseGenericForm="true"
                        FormFields="@formFields"
                        FormSections="@formSections"
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadWarehouseData"
                            SaveHandler="@SaveWarehouse"
                            @ref="editComponent" />

@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<Warehouse, IWarehouseService> editComponent = default!;
    
    // 資料模型
    private Warehouse warehouse = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType()
                );
        }
    }

    private async void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("倉庫管理", "/warehouses"),
                new(Id.HasValue ? "編輯倉庫" : "新增倉庫")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType()
                );
        }
    }

    private async void InitializeFormFields()
    {
        try
        {
            // 準備倉庫類型選項
            var warehouseTypeOptions = new List<SelectOption>
            {
                new() { Text = "主倉庫", Value = ((int)WarehouseTypeEnum.Main).ToString() },
                new() { Text = "分倉庫", Value = ((int)WarehouseTypeEnum.Branch).ToString() },
                new() { Text = "虛擬倉庫", Value = ((int)WarehouseTypeEnum.Virtual).ToString() },
                new() { Text = "退貨倉庫", Value = ((int)WarehouseTypeEnum.Return).ToString() }
            };

            formFields = new List<FormFieldDefinition>
            {
                new FormFieldDefinition
                {
                    PropertyName = nameof(Warehouse.WarehouseCode),
                    Label = "倉庫代碼",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "請輸入倉庫代碼",
                    MaxLength = 20,
                    HelpText = "倉庫的唯一識別代碼，最多20個字元"
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(Warehouse.WarehouseName),
                    Label = "倉庫名稱",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "請輸入倉庫名稱",
                    MaxLength = 50,
                    HelpText = "倉庫的顯示名稱，最多50個字元"
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(Warehouse.WarehouseType),
                    Label = "倉庫類型",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = warehouseTypeOptions,
                    HelpText = "選擇倉庫的類型"
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(Warehouse.Address),
                    Label = "地址",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入倉庫地址",
                    MaxLength = 200,
                    HelpText = "倉庫的實際地址，最多200個字元"
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(Warehouse.ContactPerson),
                    Label = "聯絡人",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入聯絡人姓名",
                    MaxLength = 50,
                    HelpText = "倉庫負責人或聯絡人姓名"
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(Warehouse.Phone),
                    Label = "聯絡電話",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入聯絡電話",
                    MaxLength = 20,
                    HelpText = "聯絡人的電話號碼"
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(Warehouse.IsDefault),
                    Label = "設為預設倉庫",
                    FieldType = FormFieldType.Checkbox,
                    HelpText = "是否將此倉庫設為系統預設倉庫"
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(Warehouse.IsActive),
                    Label = "啟用狀態",
                    FieldType = FormFieldType.Checkbox,
                    HelpText = "是否啟用此倉庫"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(Warehouse.WarehouseCode), "基本資訊" },
                { nameof(Warehouse.WarehouseName), "基本資訊" },
                { nameof(Warehouse.WarehouseType), "基本資訊" },
                { nameof(Warehouse.Address), "聯絡資訊" },
                { nameof(Warehouse.ContactPerson), "聯絡資訊" },
                { nameof(Warehouse.Phone), "聯絡資訊" },
                { nameof(Warehouse.IsDefault), "設定" },
                { nameof(Warehouse.IsActive), "設定" }
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFormFields),
                GetType()
                );
        }
    }
    
    private async Task<Warehouse?> LoadWarehouseData()
    {
        try
        {
            if (!Id.HasValue)
            {
                warehouse = new Warehouse
                {
                    WarehouseCode = await GenerateWarehouseCodeAsync(),
                    WarehouseType = WarehouseTypeEnum.Main,
                    IsActive = true,
                    IsDefault = false
                };
                return warehouse;
            }

            var result = await WarehouseService.GetByIdAsync(Id.Value);
            if (result != null)
            {
                warehouse = result;
            }
            return result;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadWarehouseData),
                GetType(),
                additionalData: new { WarehouseId = Id });
            
            StateHasChanged();
            return null;
        }
    }

    private async Task<string> GenerateWarehouseCodeAsync()
    {
        try
        {
            // 生成倉庫代碼邏輯 - 可根據需求調整
            var existingWarehouses = await WarehouseService.GetAllAsync();
            var maxCode = existingWarehouses
                .Where(w => w.WarehouseCode.StartsWith("WH"))
                .Select(w => w.WarehouseCode.Substring(2))
                .Where(code => int.TryParse(code, out _))
                .Select(code => int.Parse(code))
                .DefaultIfEmpty(0)
                .Max();
            
            return $"WH{(maxCode + 1):D3}";
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GenerateWarehouseCodeAsync),
                GetType()
                );
            
            return "WH001";
        }
    }

    private async Task<bool> SaveWarehouse(Warehouse entity)
    {
        try
        {
            ServiceResult result;
            
            if (entity.Id == 0)
            {
                result = await WarehouseService.CreateAsync(entity);
            }
            else
            {
                result = await WarehouseService.UpdateAsync(entity);
            }

            if (result.IsSuccess)
            {
                await NotificationService.ShowSuccessAsync($"倉庫{(entity.Id == 0 ? "新增" : "更新")}成功");
                
                // 如果設為預設倉庫，更新預設設定
                if (entity.IsDefault && entity.Id > 0)
                {
                    await WarehouseService.SetDefaultWarehouseAsync(entity.Id);
                }
                
                return true;
            }
            else
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    new Exception($"Service operation failed: {result.ErrorMessage}"),
                    nameof(SaveWarehouse),
                    GetType(),
                    additionalData: new { WarehouseId = entity.Id, WarehouseName = entity.WarehouseName, ErrorMessage = result.ErrorMessage });
                return false;
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(SaveWarehouse),
                GetType(),
                additionalData: new { WarehouseId = entity.Id, WarehouseName = entity.WarehouseName });
            
            StateHasChanged();
            return false;
        }
    }
}
