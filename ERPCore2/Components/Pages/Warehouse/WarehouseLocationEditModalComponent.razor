@* 可重用的倉庫內位置編輯組件 - 可在任何頁面中嵌入 *@
@inject IWarehouseLocationService WarehouseLocationService
@inject IWarehouseService WarehouseService
@inject INotificationService NotificationService
@inject ActionButtonHelper ActionButtonHelper

<GenericEditModalComponent TEntity="WarehouseLocation" 
                          TService="IWarehouseLocationService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@WarehouseLocationId"
                          Service="@WarehouseLocationService"
                          EntityName="倉庫內位置"
                          EntityNamePlural="倉庫內位置"
                          ModalTitle="@(WarehouseLocationId.HasValue ? "編輯倉庫內位置" : "新增倉庫內位置")"
                          Size="GenericEditModalComponent<WarehouseLocation, IWarehouseLocationService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadWarehouseLocationData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(WarehouseLocationId.HasValue ? "倉庫內位置更新成功" : "倉庫內位置新增成功")"
                          SaveFailureMessage="倉庫內位置儲存失敗"
                          RequiredPermission="WarehouseLocation.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel" />

@* 倉庫編輯 Modal *@
<WarehouseEditModalComponent @ref="warehouseEditModal"
                            IsVisible="@warehouseModalManager.IsModalVisible"
                            IsVisibleChanged="@warehouseModalManager.HandleModalVisibilityChangedAsync"
                            WarehouseId="@warehouseModalManager.SelectedEntityId"
                            OnWarehouseSaved="@OnWarehouseSavedWrapper"
                            OnCancel="@warehouseModalManager.HandleModalCancelAsync" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? WarehouseLocationId { get; set; }
    [Parameter] public EventCallback OnWarehouseLocationSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<WarehouseLocation, IWarehouseLocationService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<Warehouse> warehouses = new();
    
    // Modal 管理器
    private WarehouseEditModalComponent? warehouseEditModal;
    private RelatedEntityModalManager<Warehouse> warehouseModalManager = default!;

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeWarehouseModalManager();
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化倉庫位置編輯組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
    }

    private async Task HandleSaveSuccess()
    {
        try
        {
            if (OnWarehouseLocationSaved.HasDelegate)
            {
                // 如果有指定儲存成功回調，則執行
                await OnWarehouseLocationSaved.InvokeAsync();
            }
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理取消事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task CloseModal()
    {
        try
        {
            if (IsVisibleChanged.HasDelegate)
            {
                await IsVisibleChanged.InvokeAsync(false);
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"關閉視窗時發生錯誤：{ex.Message}");
        }
    }

    private async Task<WarehouseLocation?> LoadWarehouseLocationData()
    {
        try
        {
            if (!WarehouseLocationId.HasValue)
            {
                // 新增模式 - 自動產生庫位代碼
                var generatedCode = await GenerateWarehouseLocationCodeAsync();
                return new WarehouseLocation
                {
                    Code = generatedCode,
                    Status = EntityStatus.Active
                };
            }

            // 編輯模式
            return await WarehouseLocationService.GetByIdAsync(WarehouseLocationId.Value);
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫內位置資料時發生錯誤：{ex.Message}");
            return null;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入倉庫清單用於下拉選單
            warehouses = await WarehouseService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫資料時發生錯誤：{ex.Message}");
            warehouses = new List<Warehouse>();
        }
    }

    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(WarehouseLocation.Code),
                    Label = "庫位代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入庫位代碼",
                    IsRequired = true,
                    MaxLength = 20,
                    HelpText = "庫位的唯一識別代碼，新增時系統會自動產生，也可手動修改"
                },
                new()
                {
                    PropertyName = nameof(WarehouseLocation.Name),
                    Label = "庫位名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入庫位名稱",
                    IsRequired = true,
                    MaxLength = 50,
                    HelpText = "庫位的唯一名稱，用於識別不同庫位"
                },
                new()
                {
                    PropertyName = nameof(WarehouseLocation.WarehouseId),
                    Label = "所屬倉庫",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇倉庫",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "輸入倉庫名稱進行搜尋，或直接選擇",
                    ActionButtons = await GetWarehouseActionButtonsAsync()
                },
                new()
                {
                    PropertyName = nameof(WarehouseLocation.Zone),
                    Label = "區域",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入區域代碼",
                    IsRequired = false,
                    MaxLength = 10,
                    HelpText = "庫位所在區域（如：A區、B區等）"
                },
                new()
                {
                    PropertyName = nameof(WarehouseLocation.Aisle),
                    Label = "排號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入排號",
                    IsRequired = false,
                    MaxLength = 10,
                    HelpText = "庫位所在排號（如：01、02、03等）"
                },
                new()
                {
                    PropertyName = nameof(WarehouseLocation.Level),
                    Label = "層號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入層號",
                    IsRequired = false,
                    MaxLength = 10,
                    HelpText = "庫位所在層號（如：1F、2F、3F等）"
                },
                new()
                {
                    PropertyName = nameof(WarehouseLocation.Position),
                    Label = "位號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入位號",
                    IsRequired = false,
                    MaxLength = 10,
                    HelpText = "庫位具體位置號碼（如：A、B、C等）"
                },
                new()
                {
                    PropertyName = nameof(WarehouseLocation.MaxCapacity),
                    Label = "最大容量",
                    FieldType = FormFieldType.Number,
                    Placeholder = "請輸入最大容量",
                    IsRequired = false,
                    HelpText = "此庫位可容納的最大數量（選填）",                    
                },

                FormFieldConfigurationHelper.CreateRemarksField<WarehouseLocation>()
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(WarehouseLocation.Code), "基本資訊" },
                { nameof(WarehouseLocation.Name), "基本資訊" },
                { nameof(WarehouseLocation.WarehouseId), "基本資訊" },
                { nameof(WarehouseLocation.Zone), "基本資訊" },
                { nameof(WarehouseLocation.Aisle), "基本資訊" },
                { nameof(WarehouseLocation.Level), "基本資訊" },
                { nameof(WarehouseLocation.Position), "基本資訊" },
                { nameof(WarehouseLocation.MaxCapacity), "基本資訊" },
                { nameof(WarehouseLocation.Remarks), "額外資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFormFieldsAsync),
                GetType(),
                additionalData: new { WarehouseLocationId }
            );
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 生成庫位代碼
    /// </summary>
    private async Task<string> GenerateWarehouseLocationCodeAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            WarehouseLocationService,
            "WL",
            (service, code, excludeId) => service.IsWarehouseLocationCodeExistsAsync(code, excludeId)
        );
    }

    // ===== AutoComplete 配置方法 =====
    
    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(WarehouseLocation.WarehouseId), warehouses.Cast<object>() }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(WarehouseLocation.WarehouseId), "Name" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(WarehouseLocation.WarehouseId), "Id" }
        };
    }

    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(WarehouseLocation.WarehouseId), warehouseModalManager }
        };
    }

    // ===== Modal 管理器初始化方法 =====
    
    /// <summary>
    /// 初始化倉庫 Modal 管理器
    /// </summary>
    private void InitializeWarehouseModalManager()
    {
        warehouseModalManager = new RelatedEntityManagerBuilder<Warehouse>(NotificationService, "倉庫")
            .WithPropertyName(nameof(WarehouseLocation.WarehouseId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(warehouseId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.WarehouseId = warehouseId;
                }
            })
            .WithCustomPostProcess(async warehouse => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    // ===== ActionButton 產生方法 =====
    
    /// <summary>
    /// 產生倉庫操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetWarehouseActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            warehouseModalManager, 
            nameof(WarehouseLocation.WarehouseId)
        );
    }

    // ===== Modal 事件包裝器方法 =====
    
    /// <summary>
    /// 包裝倉庫儲存事件
    /// </summary>
    private async Task OnWarehouseSavedWrapper()
    {
        try
        {
            // 由於 WarehouseEditModalComponent 沒有返回實體，我們手動處理
            // 重新載入資料
            if (warehouseModalManager.ReloadDataCallback != null)
            {
                await warehouseModalManager.ReloadDataCallback();
            }
            
            // 執行自訂後處理邏輯
            if (warehouseModalManager.CustomPostProcessCallback != null)
            {
                // 創建一個假的 Warehouse 實體，因為 WarehouseEditModalComponent 沒有返回實體
                var dummyWarehouse = new Warehouse();
                await warehouseModalManager.CustomPostProcessCallback(dummyWarehouse);
            }
            
            // 關閉 Modal
            await warehouseModalManager.CloseModalAsync();
            
            // 顯示成功訊息
            await NotificationService.ShowSuccessAsync("倉庫已成功儲存，選項已更新");
            
            // 觸發狀態變更
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理倉庫儲存成功事件時發生錯誤：{ex.Message}");
        }
    }
}
