@page "/enhanced-table-demo"
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services.Interfaces
@using ERPCore2.Components.Shared.Tables
@using ERPCore2.Components.Shared.Badges
@inject ICustomerService CustomerService
@rendermode InteractiveServer

@* 增強版資料表格示例頁面 *@

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-table me-2"></i>
                        增強版資料表格示例 - EnhancedTableComponent
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted mb-4">
                        這個示例展示了如何使用 <code>EnhancedTableComponent</code> 來建立可配置的資料表格，
                        支援多種資料類型的自動格式化和自定義範本。
                    </p>

                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">載入中...</span>
                            </div>
                            <p class="mt-2 text-muted">載入客戶資料中...</p>
                        </div>
                    }
                    else
                    {                        <!-- 使用增強版資料表格組件 -->
                        <EnhancedTableComponent TItem="Customer" 
                                              Items="customers"
                                              ColumnDefinitions="columnDefinitions"
                                              ShowActions="true"
                                              EnableRowClick="true"
                                              OnRowClick="OnRowClick"
                                              EmptyMessage="沒有找到客戶資料"
                                              ActionsTemplate="@GetActionsTemplate()" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 訊息顯示 -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            @message
            <button type="button" class="btn-close" @onclick="ClearMessage"></button>
        </div>
    </div>
}

@code {
    private List<Customer> customers = new();
    private bool isLoading = true;
    private string message = string.Empty;
    
    // 定義表格欄位配置
    private List<TableColumnDefinition> columnDefinitions = new();
    
    protected override async Task OnInitializedAsync()
    {
        // 初始化欄位定義
        InitializeColumnDefinitions();
        
        // 載入資料
        await LoadCustomersAsync();
    }
    
    private void InitializeColumnDefinitions()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            // 客戶代碼 - 使用自定義範本加粗顯示
            TableColumnDefinition.Template(
                "客戶代碼", 
                customer => @<strong>@(((Customer)customer).CustomerCode)</strong>
            ),
            
            // 公司名稱 - 文字欄位
            TableColumnDefinition.Text("公司名稱", "CompanyName"),
            
            // 聯絡人 - 文字欄位
            TableColumnDefinition.Text("聯絡人", "ContactPerson"),
            
            // 統一編號 - 文字欄位
            TableColumnDefinition.Text("統一編號", "TaxNumber"),
            
            // 客戶類型 - 巢狀屬性
            TableColumnDefinition.Text("客戶類型", "CustomerType.TypeName"),
            
            // 行業別 - 巢狀屬性
            TableColumnDefinition.Text("行業別", "IndustryType.IndustryTypeName"),
              // 狀態 - 使用狀態映射自動顯示徽章
            TableColumnDefinition.Status("狀態", "Status", GetStatusBadgeMap()),
            
            // 建立日期 - 日期格式化
            TableColumnDefinition.Date("建立日期", "CreatedAt", "yyyy/MM/dd")
        };
    }
    
    private Dictionary<object, string> GetStatusBadgeMap()
    {
        return new Dictionary<object, string>
        {
            { EntityStatus.Active, "bg-success" },
            { EntityStatus.Inactive, "bg-secondary" }
        };
    }
    
    private RenderFragment<Customer> GetActionsTemplate()
    {
        return customer => @<div>
            <button class="btn btn-sm btn-outline-primary me-1" 
                    @onclick="() => EditCustomer(customer.Id)">
                <i class="fas fa-edit"></i>
            </button>
            <button class="btn btn-sm btn-outline-danger" 
                    @onclick="() => DeleteCustomer(customer.Id, customer.CompanyName)">
                <i class="fas fa-trash"></i>
            </button>
        </div>;
    }
    
    private async Task LoadCustomersAsync()
    {
        try
        {
            isLoading = true;
            customers = await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            message = $"載入客戶資料時發生錯誤: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void OnRowClick(Customer customer)
    {
        message = $"點擊了客戶: {customer.CompanyName} ({customer.CustomerCode})";
        StateHasChanged();
    }
    
    private void EditCustomer(int customerId)
    {
        message = $"編輯客戶 ID: {customerId}";
        StateHasChanged();
    }
    
    private void DeleteCustomer(int customerId, string companyName)
    {
        message = $"刪除客戶: {companyName} (ID: {customerId})";
        StateHasChanged();
    }
    
    private void ClearMessage()
    {
        message = string.Empty;
        StateHasChanged();
    }
}
