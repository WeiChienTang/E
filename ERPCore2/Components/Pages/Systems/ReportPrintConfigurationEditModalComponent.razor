@* 可重用的報表列印配置編輯組件 - 可在任何頁面中嵌入 *@
@inject IReportPrintConfigurationService ReportPrintConfigurationService
@inject IPrinterConfigurationService PrinterConfigurationService
@inject IPaperSettingService PaperSettingService
@inject INotificationService NotificationService

<GenericEditModalComponent TEntity="ReportPrintConfiguration" 
                          TService="IReportPrintConfigurationService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@ReportPrintConfigurationId"
                          Service="@ReportPrintConfigurationService"
                          EntityName="報表列印配置"
                          EntityNamePlural="報表列印配置"
                          ModalTitle="@(ReportPrintConfigurationId.HasValue ? "編輯報表列印配置" : "新增報表列印配置")"
                          Size="GenericEditModalComponent<ReportPrintConfiguration, IReportPrintConfigurationService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          DataLoader="@LoadReportPrintConfigurationData"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(ReportPrintConfigurationId.HasValue ? "報表列印配置更新成功" : "報表列印配置新增成功")"
                          SaveFailureMessage="報表列印配置儲存失敗"
                          RequiredPermission="ReportPrintConfiguration.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel" />

@code {
    // ===== 參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? ReportPrintConfigurationId { get; set; }
    [Parameter] public EventCallback<ReportPrintConfiguration> OnReportPrintConfigurationSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public Dictionary<string, object?>? PrefilledValues { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<ReportPrintConfiguration, IReportPrintConfigurationService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();

    // 下拉選單選項
    private List<SelectOption> printerConfigurationOptions = new();
    private List<SelectOption> paperSettingOptions = new();

    // ===== 生命週期 =====
    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            InitializeFormFields();
        }
    }

    // ===== 事件處理 =====
    private async Task HandleSaveSuccess()
    {
        try
        {
            // 如果父組件需要知道報表列印配置已儲存
            if (OnReportPrintConfigurationSaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnReportPrintConfigurationSaved.InvokeAsync(editModalComponent.Entity);
            }

            // 關閉 Modal
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }

            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理取消事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task CloseModal()
    {
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(false);
        }
    }

    // ===== 資料載入 =====
    private async Task<ReportPrintConfiguration?> LoadReportPrintConfigurationData()
    {
        try
        {
            if (!ReportPrintConfigurationId.HasValue) 
            {
                // 新增模式：建立新的報表列印配置實體
                var newReportPrintConfiguration = new ReportPrintConfiguration
                {
                    ReportType = string.Empty,
                    ReportName = string.Empty,
                    Status = EntityStatus.Active
                };
                
                // 應用預填值
                if (PrefilledValues != null)
                {
                    foreach (var kvp in PrefilledValues)
                    {
                        var property = typeof(ReportPrintConfiguration).GetProperty(kvp.Key);
                        if (property != null && property.CanWrite && kvp.Value != null)
                        {
                            try
                            {
                                // 轉換值的類型
                                var convertedValue = Convert.ChangeType(kvp.Value, property.PropertyType);
                                property.SetValue(newReportPrintConfiguration, convertedValue);
                            }
                            catch (Exception)
                            {
                                // 忽略轉換失敗的值
                            }
                        }
                    }
                }
                
                return newReportPrintConfiguration;
            }

            var reportPrintConfiguration = await ReportPrintConfigurationService.GetByIdAsync(ReportPrintConfigurationId.Value);            
            
            if (reportPrintConfiguration == null)
            {
                // 如果找不到報表列印配置，建立新的預設配置
                return new ReportPrintConfiguration
                {
                    Status = EntityStatus.Active
                };
            }
            return reportPrintConfiguration;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入報表列印配置資料時發生錯誤：{ex.Message}");
            return null;
        }
    }

    // ===== 表單欄位配置 =====
    private void InitializeFormFields()
    {
        try
        {
            // 載入下拉選單選項
            LoadDropdownOptions();
            
            // 建立表單區塊
            formSections = new Dictionary<string, string>
            {
                { "basic", "基本資訊" },
                { "config", "列印設定" },
                { "other", "其他資訊" }
            };

            // 設定欄位在頁面中顯示的順序
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(ReportPrintConfiguration.ReportType),
                    Label = "報表類型",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "請輸入報表類型（如：PurchaseOrder、Invoice）",
                    HelpText = "用於識別報表類型的唯一代碼"
                },
                new()
                {
                    PropertyName = nameof(ReportPrintConfiguration.ReportName),
                    Label = "報表名稱",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "請輸入報表顯示名稱",
                    HelpText = "報表的顯示名稱，用於介面展示"
                },
                new()
                {
                    PropertyName = nameof(ReportPrintConfiguration.PrinterConfigurationId),
                    Label = "印表機設定",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Placeholder = "請選擇印表機設定",
                    Options = printerConfigurationOptions,
                    HelpText = "選擇此報表使用的印表機設定"
                },
                new()
                {
                    PropertyName = nameof(ReportPrintConfiguration.PaperSettingId),
                    Label = "紙張設定",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Placeholder = "請選擇紙張設定",
                    Options = paperSettingOptions,
                    HelpText = "選擇此報表使用的紙張設定"
                },
                new()
                {
                    PropertyName = nameof(ReportPrintConfiguration.Status),
                    Label = "狀態",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Placeholder = "請選擇狀態",
                    Options = new List<SelectOption>
                    {
                        new() { Text = "啟用", Value = ((int)EntityStatus.Active).ToString() },
                        new() { Text = "停用", Value = ((int)EntityStatus.Inactive).ToString() }
                    },
                    HelpText = "設定此報表配置的啟用狀態"
                },
                new()
                {
                    PropertyName = nameof(ReportPrintConfiguration.Code),
                    Label = "代碼",
                    FieldType = FormFieldType.Text,
                    IsRequired = false,
                    Placeholder = "請輸入代碼（可選）",
                    HelpText = "選填的自定義代碼"
                },
                new()
                {
                    PropertyName = nameof(ReportPrintConfiguration.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    IsRequired = false,
                    Placeholder = "請輸入備註（可選）",
                    HelpText = "選填的備註說明",
                    Rows = 3
                }
            };
        }
        catch (Exception ex)
        {
            formFields = new List<FormFieldDefinition>();
            formSections = new Dictionary<string, string>();
            Task.Run(async () => await NotificationService.ShowErrorAsync($"初始化表單欄位時發生錯誤：{ex.Message}"));
        }
    }

    private async void LoadDropdownOptions()
    {
        try
        {
            // 載入印表機設定選項
            var printerConfigurations = await PrinterConfigurationService.GetAllAsync();
            printerConfigurationOptions = printerConfigurations
                .Where(p => p.Status == EntityStatus.Active)
                .Select(p => new SelectOption { Text = p.Name, Value = p.Id.ToString() })
                .OrderBy(p => p.Text)
                .ToList();
            
            // 添加空選項
            printerConfigurationOptions.Insert(0, new SelectOption { Text = "請選擇印表機設定", Value = "" });

            // 載入紙張設定選項
            var paperSettings = await PaperSettingService.GetAllAsync();
            paperSettingOptions = paperSettings
                .Where(p => p.Status == EntityStatus.Active)
                .Select(p => new SelectOption { Text = p.Name, Value = p.Id.ToString() })
                .OrderBy(p => p.Text)
                .ToList();
            
            // 添加空選項
            paperSettingOptions.Insert(0, new SelectOption { Text = "請選擇紙張設定", Value = "" });
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            printerConfigurationOptions = new List<SelectOption>
            {
                new SelectOption { Text = "載入失敗", Value = "" }
            };
            paperSettingOptions = new List<SelectOption>
            {
                new SelectOption { Text = "載入失敗", Value = "" }
            };
            await NotificationService.ShowErrorAsync($"載入下拉選單選項時發生錯誤：{ex.Message}");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    // ===== 公開方法 =====
    /// <summary>
    /// 取得目前的實體資料
    /// </summary>
    public ReportPrintConfiguration? GetCurrentEntity()
    {
        return editModalComponent?.Entity;
    }
}
