@page "/error-logs"
@inject IErrorLogService ErrorLogService
@rendermode InteractiveServer
@inject INotificationService NotificationService
@using ERPCore2.FieldConfiguration

<GenericIndexPageComponent TEntity="ErrorLog" 
                      TService="IErrorLogService"
                      Service="@ErrorLogService"
                      EntityBasePath="/error-logs"
                      PageTitle="錯誤記錄"
                      PageSubtitle="系統錯誤記錄查詢與監控"
                      EntityName="錯誤記錄"
                      BreadcrumbItems="@breadcrumbItems"
                      FilterDefinitions="@filterDefinitions"
                      ColumnDefinitions="@columnDefinitions"
                      DataLoader="@LoadErrorLogsAsync"
                      FilterApplier="@ApplyErrorLogFilters"
                      GetEntityDisplayName="@(errorLog => $"[{errorLog.ErrorId}] {errorLog.Message}")"
                      RequiredPermission="ErrorLog.Read"
                      OnAddClick="@(() => Task.CompletedTask)"
                      OnRowClick="@((ErrorLog errorLog) => ShowErrorLogDetailAsync(errorLog.Id))"
                      ShowDefaultActions="true"
                      ShowAddButton="false"
                      ShowViewButton="false"
                      ShowEditButton="false"
                      ShowDeleteButton="false"
                      EnableRowClick="true"
                      ShowStatisticsCards="true"
                      StatisticsCardConfigs="@statisticsCardConfigs"
                      StatisticsDataLoader="@LoadStatisticsDataAsync"
                      @ref="indexComponent" />

<!-- 錯誤詳細檢視 Modal -->
<ErrorLogDetailViewModal IsVisible="@showDetailModal"
                        IsVisibleChanged="@((bool visible) => showDetailModal = visible)"
                        ErrorLogId="@selectedErrorLogId"
                        OnClose="@CloseDetailModal" />

@code {
    // 組件參考
    private GenericIndexPageComponent<ErrorLog, IErrorLogService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showDetailModal = false;
    private int? selectedErrorLogId = null;
    
    // 欄位配置
    private ErrorLogFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 統計卡片相關
    private List<StatisticsCardConfig> statisticsCardConfigs = new();
    
    // 篩選狀態
    private string currentFilter = "all";
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InitializeBreadcrumbsAsync();
            
            // 建立欄位配置
            fieldConfiguration = new ErrorLogFieldConfiguration(NotificationService);
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
            
            // 初始化統計卡片配置
            InitializeStatisticsCardConfigs();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化錯誤記錄頁面失敗");
            await NotificationService.ShowErrorAsync("初始化錯誤記錄頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("系統管理", "/systems"),
                new("錯誤記錄")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // ===== 統計相關方法 =====
    
    /// <summary>
    /// 初始化統計卡片配置
    /// </summary>
    private void InitializeStatisticsCardConfigs()
    {
        try
        {
            statisticsCardConfigs = new List<StatisticsCardConfig>
            {
                new()
                {
                    Title = "總錯誤數",
                    DataKey = "TotalErrors",
                    BorderColor = "danger",
                    TextColor = "danger",
                    OnClick = EventCallback.Factory.Create(this, HandleTotalErrorsClick)
                },
                new()
                {
                    Title = "未解決",
                    DataKey = "UnresolvedErrors",
                    BorderColor = "warning",
                    TextColor = "warning",
                    OnClick = EventCallback.Factory.Create(this, HandleUnresolvedErrorsClick)
                },
                new()
                {
                    Title = "已解決",
                    DataKey = "ResolvedErrors",
                    BorderColor = "success",
                    TextColor = "success",
                    OnClick = EventCallback.Factory.Create(this, HandleResolvedErrorsClick)
                },
                new()
                {
                    Title = "嚴重錯誤",
                    DataKey = "CriticalErrors",
                    BorderColor = "info",
                    TextColor = "info",
                    OnClick = EventCallback.Factory.Create(this, HandleCriticalErrorsClick)
                }
            };
        }
        catch (Exception ex)
        {
            // 記錄錯誤但不顯示通知，因為這不是關鍵功能
            _ = Task.Run(async () => await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeStatisticsCardConfigs), GetType(), additionalData: "初始化統計卡片配置失敗"));
            // 設定安全的預設值
            statisticsCardConfigs = new List<StatisticsCardConfig>();
        }
    }
    
    /// <summary>
    /// 載入統計資料
    /// </summary>
    private async Task<Dictionary<string, object>> LoadStatisticsDataAsync()
    {
        try
        {
            var allErrors = await ErrorLogService.GetAllAsync();
            
            return new Dictionary<string, object>
            {
                ["TotalErrors"] = allErrors.Count,
                ["UnresolvedErrors"] = allErrors.Count(e => !e.IsResolved),
                ["ResolvedErrors"] = allErrors.Count(e => e.IsResolved),
                ["CriticalErrors"] = allErrors.Count(e => e.Level == Data.Enums.ErrorLevel.Critical)
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadStatisticsDataAsync), GetType(), additionalData: "載入統計資料失敗");
            await NotificationService.ShowErrorAsync("載入統計資料失敗");
            // 返回空的統計資料
            return new Dictionary<string, object>();
        }
    }
    
    // ===== 統計卡片點擊事件處理 =====
    
    private async Task HandleTotalErrorsClick()
    {
        try
        {
            currentFilter = "all";
            await RefreshDataAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleTotalErrorsClick), GetType());
        }
    }
    
    private async Task HandleUnresolvedErrorsClick()
    {
        try
        {
            currentFilter = "unresolved";
            await RefreshDataAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleUnresolvedErrorsClick), GetType());
        }
    }
    
    private async Task HandleResolvedErrorsClick()
    {
        try
        {
            currentFilter = "resolved";
            await RefreshDataAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleResolvedErrorsClick), GetType());
        }
    }
    
    private async Task HandleCriticalErrorsClick()
    {
        try
        {
            await NotificationService.ShowInfoAsync("顯示嚴重錯誤資訊...");
            // 可以進一步實現特殊的嚴重錯誤篩選或處理邏輯
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleCriticalErrorsClick), GetType());
        }
    }

    // 載入錯誤記錄資料
    private async Task<List<ErrorLog>> LoadErrorLogsAsync()
    {
        try
        {
            var errorLogs = currentFilter switch
            {
                "unresolved" => await ErrorLogService.GetUnresolvedAsync(),
                "resolved" => (await ErrorLogService.GetAllAsync()).Where(e => e.IsResolved).OrderByDescending(e => e.OccurredAt).ToList(),
                _ => await ErrorLogService.GetAllAsync()
            };

            return errorLogs;
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadErrorLogsAsync), GetType(), additionalData: "載入錯誤記錄資料失敗");
            await NotificationService.ShowErrorAsync("載入錯誤記錄資料失敗");
            // 設定安全的預設值
            return new List<ErrorLog>();
        }
    }

    private IQueryable<ErrorLog> ApplyErrorLogFilters(SearchFilterModel searchModel, IQueryable<ErrorLog> query)
    {
        // 確保 fieldConfiguration 已初始化
        if (fieldConfiguration == null)
        {
            return query.OrderByDescending(e => e.OccurredAt);
        }

        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyErrorLogFilters), GetType());
    }

    // 顯示錯誤詳細資訊
    private async Task ShowErrorLogDetailAsync(int errorLogId)
    {
        try
        {
            selectedErrorLogId = errorLogId;
            showDetailModal = true;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowErrorLogDetailAsync), GetType(), additionalData: "顯示錯誤詳細資訊失敗");
            await NotificationService.ShowErrorAsync("無法顯示錯誤詳細資訊");
        }
    }

    // 關閉詳細檢視 Modal
    private async Task CloseDetailModal()
    {
        try
        {
            showDetailModal = false;
            selectedErrorLogId = null;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(CloseDetailModal), GetType(), additionalData: "關閉詳細檢視Modal失敗");
        }
    }

    // 重新整理資料
    private async Task RefreshDataAsync()
    {
        try
        {
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(RefreshDataAsync), GetType(), additionalData: "重新整理錯誤記錄資料失敗");
            await NotificationService.ShowErrorAsync("重新整理資料失敗");
        }
    }
}