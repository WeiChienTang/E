@using Microsoft.AspNetCore.Components.Forms
@inject IWebHostEnvironment Environment
@inject INotificationService NotificationService

<div class="logo-upload-container">
    @* 目前的 Logo 顯示 *@
    @if (!string.IsNullOrEmpty(CurrentLogoPath))
    {
        <div class="current-logo-preview mb-3">
            <h6 class="text-muted mb-2">目前的 Logo:</h6>
            <div class="text-center p-3 bg-light rounded">
                <img src="@CurrentLogoPath" alt="Current Logo" class="img-thumbnail" style="max-width: 200px; max-height: 100px;" />
            </div>
        </div>
    }
    
    @* 檔案選擇器 *@
    <div class="mb-3">
        <label class="form-label fw-bold">選擇新的 Logo 圖片</label>
        <InputFile OnChange="HandleFileSelected" 
                   accept=".jpg,.jpeg,.png,.gif,.svg" 
                   class="form-control" />
        <div class="form-text">
            <i class="bi bi-info-circle"></i> 
            支援格式: JPG, PNG, GIF, SVG | 檔案大小限制: 500KB | 建議尺寸: 200x80px ~ 400x160px
        </div>
    </div>
    
    @* 預覽區域 *@
    @if (!string.IsNullOrEmpty(PreviewImageUrl))
    {
        <div class="preview-section">
            <h6 class="text-muted mb-2">
                <i class="bi bi-eye"></i> 預覽:
            </h6>
            <div class="preview-container p-3 bg-light rounded text-center">
                <img src="@PreviewImageUrl" alt="Preview" class="img-thumbnail" style="max-width: 300px; max-height: 150px;" />
                <div class="mt-2 text-muted small">
                    @if (SelectedFile != null)
                    {
                        <div>檔案名稱: @SelectedFile.Name</div>
                        <div>檔案大小: @FileUploadHelper.GetFileSizeString(SelectedFile.Size)</div>
                    }
                </div>
            </div>
        </div>
    }

    @* 載入中指示器 *@
    @if (IsUploading)
    {
        <div class="text-center mt-3">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">上傳中...</span>
            </div>
            <div class="mt-2 text-muted">上傳中，請稍候...</div>
        </div>
    }
</div>

@code {
    /// <summary>
    /// 目前的 Logo 路徑
    /// </summary>
    [Parameter] public string? CurrentLogoPath { get; set; }
    
    /// <summary>
    /// 公司 ID
    /// </summary>
    [Parameter] public int CompanyId { get; set; }
    
    /// <summary>
    /// Logo 上傳成功事件
    /// </summary>
    [Parameter] public EventCallback<string> OnLogoUploaded { get; set; }
    
    private string? PreviewImageUrl;
    private IBrowserFile? SelectedFile;
    private bool IsUploading = false;

    /// <summary>
    /// 處理檔案選擇
    /// </summary>
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null)
            {
                return;
            }

            // 儲存選擇的檔案
            SelectedFile = file;

            // 生成預覽圖片
            PreviewImageUrl = await FileUploadHelper.ConvertToBase64Async(file, 500 * 1024);
            
            if (string.IsNullOrEmpty(PreviewImageUrl))
            {
                await NotificationService.ShowErrorAsync("無法產生預覽圖片，請檢查檔案格式和大小");
                SelectedFile = null;
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"選擇檔案時發生錯誤：{ex.Message}");
            SelectedFile = null;
            PreviewImageUrl = null;
        }
    }

    /// <summary>
    /// 執行檔案上傳（由父組件調用）
    /// </summary>
    /// <returns>上傳成功後的檔案路徑</returns>
    public async Task<string?> UploadFileAsync()
    {
        if (SelectedFile == null)
        {
            await NotificationService.ShowWarningAsync("請先選擇要上傳的檔案");
            return null;
        }

        try
        {
            IsUploading = true;
            StateHasChanged();

            // 執行上傳
            var result = await FileUploadHelper.UploadCompanyLogoAsync(
                SelectedFile,
                CompanyId,
                Environment,
                CurrentLogoPath
            );

            if (result.Success)
            {
                await NotificationService.ShowSuccessAsync(result.Message);
                
                // 觸發上傳成功事件
                if (OnLogoUploaded.HasDelegate && !string.IsNullOrEmpty(result.FilePath))
                {
                    await OnLogoUploaded.InvokeAsync(result.FilePath);
                }

                // 清除預覽
                ResetComponent();

                return result.FilePath;
            }
            else
            {
                await NotificationService.ShowErrorAsync(result.Message);
                return null;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"上傳失敗：{ex.Message}");
            return null;
        }
        finally
        {
            IsUploading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// 重設組件狀態
    /// </summary>
    private void ResetComponent()
    {
        SelectedFile = null;
        PreviewImageUrl = null;
        IsUploading = false;
    }

    /// <summary>
    /// 清除選擇（由父組件調用）
    /// </summary>
    public void ClearSelection()
    {
        ResetComponent();
        StateHasChanged();
    }
}
