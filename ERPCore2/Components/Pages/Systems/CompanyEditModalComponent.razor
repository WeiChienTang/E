@* 可重用的公司編輯組件 - 可在任何頁面中嵌入 *@
@inject ICompanyService CompanyService
@inject INotificationService NotificationService

<GenericEditModalComponent TEntity="Company" 
                          TService="ICompanyService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@CompanyId"
                          Service="@CompanyService"
                          EntityName="公司"
                          EntityNamePlural="公司"
                          ModalTitle="@(CompanyId.HasValue ? "編輯公司" : "新增公司")"
                          Size="GenericEditModalComponent<Company, ICompanyService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          DataLoader="@LoadCompanyData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(CompanyId.HasValue ? "公司更新成功" : "公司新增成功")"
                          SaveFailureMessage="公司儲存失敗"
                          RequiredPermission="Company.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel" />

@code {
    // ===== 參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? CompanyId { get; set; }
    [Parameter] public EventCallback<Company> OnCompanySaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public Dictionary<string, object?>? PrefilledValues { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<Company, ICompanyService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();

    // ===== 生命週期 =====
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            await LoadAdditionalDataAsync();
            InitializeFormFields();
        }
    }

    // ===== 資料載入 =====
    private async Task<Company?> LoadCompanyData()
    {
        try
        {
            if (!CompanyId.HasValue) 
            {
                // 新增模式：建立新的公司實體並生成代碼
                var newCompany = new Company
                {
                    CompanyName = string.Empty,
                    Code = await GenerateCompanyCodeAsync(),
                    Status = EntityStatus.Active
                };
                
                // 應用預填值
                if (PrefilledValues != null)
                {
                    foreach (var kvp in PrefilledValues)
                    {
                        var property = typeof(Company).GetProperty(kvp.Key);
                        if (property != null && property.CanWrite && kvp.Value != null)
                        {
                            try
                            {
                                // 轉換值的類型
                                var convertedValue = Convert.ChangeType(kvp.Value, property.PropertyType);
                                property.SetValue(newCompany, convertedValue);
                            }
                            catch (Exception)
                            {
                                // 忽略轉換失敗的值
                            }
                        }
                    }
                }
                
                return newCompany;
            }

            var company = await CompanyService.GetByIdAsync(CompanyId.Value);            
            
            if (company == null)
            {
                // 如果找不到公司，建立新的預設公司
                return new Company
                {
                    Status = EntityStatus.Active
                };
            }
            return company;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入公司資料時發生錯誤：{ex.Message}");
            
            // 設定安全的預設值，確保程式不會崩潰
            return new Company
            {
                Code = "ERROR",
                CompanyName = "ERROR",
                Status = EntityStatus.Active
            };
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 如果需要載入其他相關資料，可以在這裡實作
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入公司資料時發生錯誤：{ex.Message}");
        }
    }

    // ===== 表單初始化 =====
    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(Company.Code),
                    Label = "公司代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司代碼",
                    IsRequired = true,
                    HelpText = "公司的唯一識別代碼，新增時系統會自動產生，也可手動修改"
                },
                new()
                {
                    PropertyName = nameof(Company.CompanyName),
                    Label = "公司名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司名稱",
                    IsRequired = true,
                    HelpText = "公司的正式名稱，將顯示在系統各處"
                },
                new()
                {
                    PropertyName = nameof(Company.CompanyNameEn),
                    Label = "公司英文名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司英文名稱",
                    HelpText = "公司的英文名稱"
                },
                new()
                {
                    PropertyName = nameof(Company.TaxId),
                    Label = "統一編號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入統一編號",
                    HelpText = "8位數字的統一編號"
                },
                new()
                {
                    PropertyName = nameof(Company.Representative),
                    Label = "負責人",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入負責人姓名",
                    HelpText = "公司的法定代表人"
                },
                // 聯絡資訊區段
                new()
                {
                    PropertyName = nameof(Company.Address),
                    Label = "公司地址",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入公司地址",
                    Rows = 2,
                    HelpText = "公司的註冊地址"
                },
                new()
                {
                    PropertyName = nameof(Company.Phone),
                    Label = "公司電話",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司電話",
                    HelpText = "公司的聯絡電話"
                },
                new()
                {
                    PropertyName = nameof(Company.Fax),
                    Label = "公司傳真",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司傳真",
                    HelpText = "公司的傳真號碼"
                },
                new()
                {
                    PropertyName = nameof(Company.Email),
                    Label = "公司Email",
                    FieldType = FormFieldType.Email,
                    Placeholder = "請輸入公司Email",
                    HelpText = "公司的官方電子郵件地址"
                },
                new()
                {
                    PropertyName = nameof(Company.Website),
                    Label = "公司網站",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司網站",
                    HelpText = "公司的官方網站網址"
                },
                new()
                {
                    PropertyName = nameof(Company.Description),
                    Label = "公司簡介",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入公司簡介",
                    HelpText = "公司的簡要說明",
                    ContainerCssClass = "col-12"
                },
                new()
                {
                    PropertyName = nameof(Company.Status),
                    Label = "狀態",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = EntityStatusHelper.GetEntityStatusOptions(),
                    HelpText = "公司的使用狀態"
                },

                FormFieldConfigurationHelper.CreateRemarksField<Company>()
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(Company.Code), "基本資訊" },
                { nameof(Company.CompanyName), "基本資訊" },
                { nameof(Company.CompanyNameEn), "基本資訊" },
                { nameof(Company.TaxId), "基本資訊" },
                { nameof(Company.Representative), "基本資訊" },
                { nameof(Company.Status), "基本資訊" },
                { nameof(Company.Address), "聯絡資訊" },
                { nameof(Company.Phone), "聯絡資訊" },
                { nameof(Company.Fax), "聯絡資訊" },
                { nameof(Company.Email), "聯絡資訊" },
                { nameof(Company.Website), "聯絡資訊" },
                { nameof(Company.Description), "額外資料" },
                { nameof(Company.Remarks), "額外資料" }
            };
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    // ===== 輔助方法 =====
    private async Task<string> GenerateCompanyCodeAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            CompanyService,
            "COMP",
            (service, code, excludeId) => service.IsCodeExistsAsync(code, excludeId)
        );
    }

    // ===== 事件處理 =====
    private async Task HandleSaveSuccess()
    {
        try
        {
            // 如果父組件需要知道公司已儲存
            if (OnCompanySaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnCompanySaved.InvokeAsync(editModalComponent.Entity);
            }

            // 關閉 Modal
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }

            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理取消事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task CloseModal()
    {
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(false);
        }
    }

    // ===== 公開方法 (供父組件調用) =====

    /// <summary>
    /// 開啟新增公司 Modal
    /// </summary>
    public async Task ShowAddModal()
    {
        CompanyId = null;
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(true);
        }
    }

    /// <summary>
    /// 開啟編輯公司 Modal
    /// </summary>
    public async Task ShowEditModal(int companyId)
    {
        CompanyId = companyId;
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(true);
        }
    }
}
