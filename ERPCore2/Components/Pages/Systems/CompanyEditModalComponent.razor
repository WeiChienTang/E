@* 可重用的公司編輯組件 - 可在任何頁面中嵌入 *@
@inject ICompanyService CompanyService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment WebHostEnvironment

<GenericEditModalComponent TEntity="Company" 
                          TService="ICompanyService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@CompanyId"
                          Service="@CompanyService"
                          EntityName="公司"
                          EntityNamePlural="公司"
                          ModalTitle="@(CompanyId.HasValue ? "編輯公司" : "新增公司")"
                          Size="GenericEditModalComponent<Company, ICompanyService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          DataLoader="@LoadCompanyData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(CompanyId.HasValue ? "公司更新成功" : "公司新增成功")"
                          SaveFailureMessage="公司儲存失敗"
                          RequiredPermission="Company.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          CustomActionButtons="@LogoManagementButtons">
</GenericEditModalComponent>

@* 隱藏的檔案輸入元素 *@
<InputFile id="logo-file-input" OnChange="HandleLogoFileSelected" accept=".jpg,.jpeg,.png,.gif,.svg" style="display: none;" @ref="logoInputFile" />

@code {
    // ===== 參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? CompanyId { get; set; }
    [Parameter] public EventCallback<Company> OnCompanySaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public Dictionary<string, object?>? PrefilledValues { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<Company, ICompanyService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();

    // ===== 生命週期 =====
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible)
        {
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
    }

    // ===== 資料載入 =====
    private async Task<Company?> LoadCompanyData()
    {
        try
        {
            if (!CompanyId.HasValue) 
            {
                // 新增模式：建立新的公司實體並生成代碼
                var newCompany = new Company
                {
                    CompanyName = string.Empty,
                    Code = await GenerateCompanyCodeAsync(),
                    Status = EntityStatus.Active
                };
                
                // 應用預填值
                if (PrefilledValues != null)
                {
                    foreach (var kvp in PrefilledValues)
                    {
                        var property = typeof(Company).GetProperty(kvp.Key);
                        if (property != null && property.CanWrite && kvp.Value != null)
                        {
                            try
                            {
                                // 轉換值的類型
                                var convertedValue = Convert.ChangeType(kvp.Value, property.PropertyType);
                                property.SetValue(newCompany, convertedValue);
                            }
                            catch (Exception)
                            {
                                // 忽略轉換失敗的值
                            }
                        }
                    }
                }
                
                return newCompany;
            }

            var company = await CompanyService.GetByIdAsync(CompanyId.Value);            
            
            if (company == null)
            {
                // 如果找不到公司，建立新的預設公司
                return new Company
                {
                    Status = EntityStatus.Active
                };
            }
            return company;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入公司資料時發生錯誤：{ex.Message}");
            
            // 設定安全的預設值，確保程式不會崩潰
            return new Company
            {
                Code = "ERROR",
                CompanyName = "ERROR",
                Status = EntityStatus.Active
            };
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 如果需要載入其他相關資料，可以在這裡實作
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入公司資料時發生錯誤：{ex.Message}");
        }
    }

    // ===== 表單初始化 =====
    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(Company.Code),
                    Label = "公司代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司代碼",
                    IsRequired = true,
                    MaxLength = 25,
                    HelpText = "公司的唯一識別代碼，新增時系統會自動產生，也可手動修改"
                },
                new()
                {
                    PropertyName = nameof(Company.CompanyName),
                    Label = "公司名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司名稱",
                    IsRequired = true,
                    MaxLength = 20,
                    HelpText = "公司的正式名稱，將顯示在系統各處"
                },
                new()
                {
                    PropertyName = nameof(Company.CompanyNameEn),
                    Label = "公司英文名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司英文名稱",
                    MaxLength = 50,
                    HelpText = "公司的英文名稱"
                },
                new()
                {
                    PropertyName = nameof(Company.ShortName),
                    Label = "公司簡稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司簡稱",
                    MaxLength = 20,
                    HelpText = "公司的簡稱"
                },
                new()
                {
                    PropertyName = nameof(Company.ShortNameEn),
                    Label = "公司英文簡稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司英文簡稱",
                    MaxLength = 50,
                    HelpText = "公司的英文簡稱"
                },
                new()
                {
                    PropertyName = nameof(Company.TaxId),
                    Label = "統一編號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入統一編號",
                    MaxLength = 8,
                    HelpText = "8位數字的統一編號"
                },
                new()
                {
                    PropertyName = nameof(Company.InvoiceTitle),
                    Label = "發票抬頭",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入發票抬頭",
                    MaxLength = 50,
                    HelpText = "發票抬頭（如與公司名稱不同時使用）"
                },
                new()
                {
                    PropertyName = nameof(Company.EstablishedDate),
                    Label = "成立日期",
                    FieldType = FormFieldType.Date,
                    Placeholder = "請選擇成立日期",
                    HelpText = "公司成立日期"
                },
                new()
                {
                    PropertyName = nameof(Company.CapitalAmount),
                    Label = "資本額",
                    FieldType = FormFieldType.Number,
                    Placeholder = "請輸入資本額",
                    HelpText = "公司資本額"
                },
                new()
                {
                    PropertyName = nameof(Company.Representative),
                    Label = "負責人",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入負責人姓名",
                    MaxLength = 10,
                    HelpText = "公司的法定代表人"
                },
                // 聯絡資訊區段
                new()
                {
                    PropertyName = nameof(Company.Address),
                    Label = "公司地址",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司地址",
                    MaxLength = 50,
                    HelpText = "公司的註冊地址"
                },
                new()
                {
                    PropertyName = nameof(Company.Phone),
                    Label = "公司電話",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司電話",
                    MaxLength = 20,
                    HelpText = "公司的聯絡電話"
                },
                new()
                {
                    PropertyName = nameof(Company.Fax),
                    Label = "公司傳真",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司傳真",
                    MaxLength = 20,
                    HelpText = "公司的傳真號碼"
                },
                new()
                {
                    PropertyName = nameof(Company.Email),
                    Label = "公司Email",
                    FieldType = FormFieldType.Email,
                    Placeholder = "請輸入公司Email",
                    MaxLength = 100,
                    HelpText = "公司的官方電子郵件地址"
                },
                new()
                {
                    PropertyName = nameof(Company.Website),
                    Label = "公司網站",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司網站",
                    MaxLength = 100,
                    HelpText = "公司的官方網站網址",
                    ActionButtons = await GetWebsiteActionButtonsAsync()
                },
                new()
                {
                    PropertyName = nameof(Company.Description),
                    Label = "公司簡介",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入公司簡介",
                    MaxLength = 120,
                    HelpText = "公司的簡要說明",
                    ContainerCssClass = "col-12"
                },
                new()
                {
                    PropertyName = nameof(Company.Status),
                    Label = "狀態",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = EntityStatusHelper.GetEntityStatusOptions(),
                    HelpText = "公司的使用狀態"
                },

                FormFieldConfigurationHelper.CreateRemarksField<Company>()
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(Company.Code), "基本資訊" },
                { nameof(Company.CompanyName), "基本資訊" },
                { nameof(Company.CompanyNameEn), "基本資訊" },
                { nameof(Company.ShortName), "基本資訊" },
                { nameof(Company.ShortNameEn), "基本資訊" },
                { nameof(Company.TaxId), "基本資訊" },
                { nameof(Company.InvoiceTitle), "基本資訊" },
                { nameof(Company.EstablishedDate), "公司資料" },
                { nameof(Company.CapitalAmount), "公司資料" },
                { nameof(Company.Representative), "公司資料" },
                { nameof(Company.Status), "基本資訊" },
                { nameof(Company.Address), "聯絡資訊" },
                { nameof(Company.Phone), "聯絡資訊" },
                { nameof(Company.Fax), "聯絡資訊" },
                { nameof(Company.Email), "聯絡資訊" },
                { nameof(Company.Website), "聯絡資訊" },
                { nameof(Company.Description), "額外資料" },
                { nameof(Company.Remarks), "額外資料" }
            };
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    // ===== 輔助方法 =====
    private async Task<string> GenerateCompanyCodeAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            CompanyService,
            "COMP",
            (service, code, excludeId) => service.IsCodeExistsAsync(code, excludeId)
        );
    }

    // ===== 事件處理 =====
    private async Task HandleSaveSuccess()
    {
        try
        {
            // 如果父組件需要知道公司已儲存
            if (OnCompanySaved.HasDelegate && editModalComponent?.Entity != null)
            {
                await OnCompanySaved.InvokeAsync(editModalComponent.Entity);
            }

            // 關閉 Modal
            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }

            await CloseModal();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理取消事件時發生錯誤：{ex.Message}");
        }
    }

    private async Task CloseModal()
    {
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(false);
        }
    }

    // ===== LOGO 管理相關 =====
    
    private InputFile? logoInputFile;
    
    /// <summary>
    /// LOGO 管理按鈕 - 顯示在 Modal Footer 最左側
    /// </summary>
    private RenderFragment LogoManagementButtons => 
        @<text>
            @if (editModalComponent?.Entity != null)
            {
                <GenericButtonComponent Text="@(string.IsNullOrEmpty(editModalComponent.Entity.LogoPath) ? "上傳 LOGO" : "更換 LOGO")"
                                      Variant="ButtonVariant.Primary"
                                      Size="ButtonSize.Small"
                                      OnClick="TriggerFileInput" />
                
                @if (!string.IsNullOrEmpty(editModalComponent.Entity.LogoPath))
                {
                    <GenericButtonComponent Text="預覽 LOGO"
                                          Variant="ButtonVariant.Primary"
                                          Size="ButtonSize.Small"
                                          OnClick="PreviewLogo" />
                }
            }
        </text>;


    
    /// <summary>
    /// 觸發檔案選擇
    /// </summary>
    private async Task TriggerFileInput()
    {
        if (logoInputFile != null)
        {
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('logo-file-input').click()");
        }
    }
    
    /// <summary>
    /// 產生公司網站操作按鈕
    /// </summary>
    private async Task<List<FieldActionButton>> GetWebsiteActionButtonsAsync()
    {
        await Task.CompletedTask; // 確保方法是異步的
        
        return new List<FieldActionButton>
        {
            new FieldActionButton
            {
                Text = "前往",
                Variant = "OutlinePrimary",
                Size = "Small",
                Title = "在新視窗開啟公司網站",
                OnClick = async () => await NavigateToWebsite(),
                IsDisabled = false
            }
        };
    }

    /// <summary>
    /// 前往公司網站
    /// </summary>
    private async Task NavigateToWebsite()
    {
        try
        {
            var website = editModalComponent?.Entity?.Website;
            
            if (string.IsNullOrWhiteSpace(website))
            {
                await NotificationService.ShowWarningAsync("請先輸入公司網站網址");
                return;
            }

            // 確保網址有完整的協議
            var url = website;
            if (!url.StartsWith("http://", StringComparison.OrdinalIgnoreCase) && 
                !url.StartsWith("https://", StringComparison.OrdinalIgnoreCase))
            {
                url = "https://" + url;
            }

            // 在新視窗開啟網站
            await JSRuntime.InvokeVoidAsync("open", url, "_blank");
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"開啟網站時發生錯誤：{ex.Message}");
        }
    }
    
    /// <summary>
    /// 處理 LOGO 檔案選擇
    /// </summary>
    private async Task HandleLogoFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null) return;
            
            // 驗證檔案
            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".svg" };
            var extension = Path.GetExtension(file.Name).ToLowerInvariant();
            
            if (!allowedExtensions.Contains(extension))
            {
                await NotificationService.ShowErrorAsync("只允許上傳 JPG、PNG、GIF、SVG 格式的圖片檔案");
                return;
            }
            
            if (file.Size > 500 * 1024) // 500KB
            {
                await NotificationService.ShowErrorAsync("LOGO 檔案大小不能超過 500KB");
                return;
            }
            
            // 上傳檔案
            var companyId = editModalComponent?.Entity?.Id ?? 0;
            
            // 如果是新增模式（companyId = 0），先提示使用者需要先儲存公司資料
            if (companyId == 0)
            {
                await NotificationService.ShowWarningAsync("請先儲存公司資料後，再上傳 LOGO");
                return;
            }
            
            // 取得舊的 Logo 路徑（用於刪除舊檔案）
            var oldLogoPath = editModalComponent?.Entity?.LogoPath;
            
            // 上傳新檔案（會自動刪除舊檔案）
            var result = await FileUploadHelper.UploadCompanyLogoAsync(file, companyId, WebHostEnvironment, oldLogoPath);
            
            if (result.Success && !string.IsNullOrEmpty(result.FilePath) && editModalComponent?.Entity != null)
            {
                // 更新實體的 LogoPath
                editModalComponent.Entity.LogoPath = result.FilePath;
                
                // 儲存到資料庫
                var updateResult = await CompanyService.UpdateLogoPathAsync(companyId, result.FilePath);
                
                if (updateResult.IsSuccess)
                {
                    await NotificationService.ShowSuccessAsync("LOGO 上傳成功");
                    StateHasChanged();
                }
                else
                {
                    await NotificationService.ShowErrorAsync($"LOGO 上傳成功，但儲存失敗：{updateResult.ErrorMessage}");
                }
            }
            else if (!result.Success)
            {
                await NotificationService.ShowErrorAsync(result.Message);
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"上傳 LOGO 時發生錯誤：{ex.Message}");
        }
    }
    
    /// <summary>
    /// 預覽 LOGO
    /// </summary>
    private async Task PreviewLogo()
    {
        if (!string.IsNullOrEmpty(editModalComponent?.Entity?.LogoPath))
        {
            var logoUrl = editModalComponent.Entity.LogoPath;
            await JSRuntime.InvokeVoidAsync("open", logoUrl, "_blank");
        }
    }

    // ===== 公開方法 (供父組件調用) =====

    /// <summary>
    /// 開啟新增公司 Modal
    /// </summary>
    public async Task ShowAddModal()
    {
        CompanyId = null;
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(true);
        }
    }

    /// <summary>
    /// 開啟編輯公司 Modal
    /// </summary>
    public async Task ShowEditModal(int companyId)
    {
        CompanyId = companyId;
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(true);
        }
    }
}
