@page "/customers/edit"
@page "/customers/edit/{id:int?}"
@inject ICustomerService CustomerService
@inject ICustomerAddressService CustomerAddressService
@inject ICustomerContactService CustomerContactService
@inject INotificationService NotificationService
@inject IErrorLogService ErrorLogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using ERPCore2.Components.Shared.SubCollections
@rendermode InteractiveServer

<PagePermissionCheck RequiredPermission="@(Id.HasValue ? "Customer.Update" : "Customer.Create")">
    <GenericEditPageComponent TEntity="Customer" 
                         TService="ICustomerService"
                         Id="@Id"
                         Entity="@customer"
                         Service="@CustomerService"
                         EntityName="客戶"
                         EntityNamePlural="客戶"                         
                         FormTitle="基本資料"
                         FormSubtitle="客戶的基本公司資訊"
                         IndexRoute="/customers"
                         UseGenericForm="true"
                         FormFields="@basicFormFields"
                         FormSections="@basicFormSections"
                         BreadcrumbItems="@breadcrumbItems"                         
                         DataLoader="@LoadCustomerData"
                         SaveHandler="@SaveCustomer"                         
                         AdditionalDataLoader="@LoadAdditionalData"
                         @ref="editComponent"><AdditionalSections>
        @* 聯絡方式管理 - 使用新的子集合組件 *@
        <ContactManagerComponent TContactEntity="CustomerContact" 
                                TParentEntity="Customer"
                                Items="@customerContacts"
                                Options="@contactTypeOptions"
                                ParentEntityId="@customer.Id"
                                Title="聯絡方式"
                                ItemDisplayName="聯絡方式"
                                TypeDisplayName="聯絡類型"
                                ValueDisplayName="聯絡內容"
                                ValuePlaceholder="請輸入聯絡內容"
                                GetIsPrimary="@(contact => contact.IsPrimary)"
                                GetTypeId="@(contact => contact.ContactTypeId)"
                                GetContactValue="@(contact => contact.ContactValue)"
                                GetOptionId="@(option => option.Id)"
                                GetOptionDisplayText="@(option => ((ContactType)option).TypeName)"
                                SetIsPrimary="@((contact, isPrimary) => contact.IsPrimary = isPrimary)"
                                SetTypeId="@((contact, typeId) => contact.ContactTypeId = typeId)"
                                SetContactValue="@((contact, value) => contact.ContactValue = value)"
                                SetParentId="@((contact, parentId) => contact.CustomerId = parentId)"
                                ItemsChanged="@OnContactsChanged" />

        @* 地址管理 - 使用新的子集合組件 *@
        <AddressManagerComponent TAddressEntity="CustomerAddress" 
                                TParentEntity="Customer"
                                Items="@customerAddresses"
                                Options="@addressTypeOptions"
                                ParentEntityId="@customer.Id"
                                Title="地址資訊"
                                ItemDisplayName="地址"
                                TypeDisplayName="地址類型"
                                GetIsPrimary="@(address => address.IsPrimary)"
                                GetTypeId="@(address => address.AddressTypeId)"
                                GetPostalCode="@(address => address.PostalCode)"
                                GetCity="@(address => address.City)"
                                GetDistrict="@(address => address.District)"
                                GetAddress="@(address => address.Address)"
                                GetOptionId="@(option => option.Id)"
                                GetOptionDisplayText="@(option => ((AddressType)option).TypeName)"
                                SetIsPrimary="@((address, isPrimary) => address.IsPrimary = isPrimary)"
                                SetTypeId="@((address, typeId) => address.AddressTypeId = typeId)"
                                SetPostalCode="@((address, value) => address.PostalCode = value)"
                                SetCity="@((address, value) => address.City = value)"
                                SetDistrict="@((address, value) => address.District = value)"
                                SetAddress="@((address, value) => address.Address = value)"
                                SetParentId="@((address, parentId) => address.CustomerId = parentId)"
                                ItemsChanged="@OnAddressesChanged" />
    </AdditionalSections>
</GenericEditPageComponent>
</PagePermissionCheck>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<Customer, ICustomerService> editComponent = default!;
    
    // 資料模型
    private Customer customer = new();
    private List<CustomerContact> customerContacts = new();
    private List<CustomerAddress> customerAddresses = new();
      // 選項清單
    private List<CustomerType> customerTypes = new();
    private List<IndustryType> industryTypes = new();
    private List<ContactType> contactTypes = new();
    private List<AddressType> addressTypes = new();
    
    // 子集合組件用的轉換清單
    private List<ERPCore2.Data.BaseEntity> contactTypeOptions = new();
    private List<ERPCore2.Data.BaseEntity> addressTypeOptions = new();// 表單欄位定義
    private List<FormFieldDefinition> basicFormFields = new();
    private Dictionary<string, string> basicFormSections = new();
      // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeBasicFormFields(); // 先初始化基本表單欄位
            // AdditionalDataLoader 會由 GenericEditPageComponent 自動調用
        }
        catch (Exception ex)
        {
            // 記錄初始化錯誤（使用 Fire-and-Forget 因為這裡不能用 async）
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(OnInitialized), 
                    GetType(),
                    additionalData: new { 
                        PageName = "CustomerEdit",
                        Action = "Initialize",
                        CustomerId = Id,
                        Phase = "ComponentInitialization"
                    });
            });
            
            // 確保基本初始化完成，避免程式崩潰
            try
            {
                breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
                {
                    new("首頁", "/"),
                    new("客戶管理", "/customers"),
                    new(Id.HasValue ? "編輯客戶" : "新增客戶")
                };
                basicFormFields = new List<FormFieldDefinition>();
                basicFormSections = new Dictionary<string, string>();
            }
            catch
            {
                // 如果連預設值都設定失敗，至少確保不是 null
                breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
                basicFormFields ??= new List<FormFieldDefinition>();
                basicFormSections ??= new Dictionary<string, string>();
            }
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("客戶管理", "/customers"),
                new(Id.HasValue ? "編輯客戶" : "新增客戶")
            };
        }
        catch (Exception ex)
        {
            // 記錄麵包屑初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeBreadcrumbs), 
                    GetType(),
                    additionalData: new { 
                        PageName = "CustomerEdit",
                        Action = "InitializeBreadcrumbs",
                        CustomerId = Id
                    });
            });
            
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }    private async Task LoadAdditionalData()
    {
        // 簡化：只載入選項列表
        try
        {
            customerTypes = await CustomerService.GetCustomerTypesAsync();
            industryTypes = await CustomerService.GetIndustryTypesAsync();
            contactTypes = await CustomerService.GetContactTypesAsync();
            addressTypes = await CustomerService.GetAddressTypesAsync();
            
            // 轉換為子集合組件用的基礎實體清單
            contactTypeOptions = contactTypes.Cast<ERPCore2.Data.BaseEntity>().ToList();
            addressTypeOptions = addressTypes.Cast<ERPCore2.Data.BaseEntity>().ToList();
              
            InitializeFormFields();
            
            // 不需要手動調用 StateHasChanged()，GenericEditPageComponent 會處理
        }        
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadAdditionalData), 
                GetType(),
                additionalData: new { 
                    PageName = "CustomerEdit",
                    Action = "LoadAdditionalData",
                    CustomerId = Id,
                    ExpectedData = "CustomerTypes, IndustryTypes, ContactTypes, AddressTypes"
                });
            
            // 設定安全的預設值，確保程式不會崩潰
            customerTypes = new List<CustomerType>();
            industryTypes = new List<IndustryType>();
            contactTypes = new List<ContactType>();
            addressTypes = new List<AddressType>();
            contactTypeOptions = new List<ERPCore2.Data.BaseEntity>();
            addressTypeOptions = new List<ERPCore2.Data.BaseEntity>();
            
            // 即使失敗也要初始化表單欄位
            try
            {
                InitializeFormFields();
            }
            catch
            {
                // 如果初始化表單欄位也失敗，至少確保基本結構存在
                basicFormFields ??= new List<FormFieldDefinition>();
                basicFormSections ??= new Dictionary<string, string>();
            }
        }
    }

    private void InitializeBasicFormFields()
    {
        try
        {
            // 先初始化不需要選項的基本欄位
            basicFormFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(Customer.CustomerCode),
                    Label = "客戶代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入客戶代碼",
                    IsRequired = true,
                    ContainerCssClass = "col-md-4"
                },
                new()
                {
                    PropertyName = nameof(Customer.CompanyName),
                    Label = "公司名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司名稱",
                    IsRequired = true,
                    ContainerCssClass = "col-md-8"
                },
                new()
                {
                    PropertyName = nameof(Customer.ContactPerson),
                    Label = "聯絡人",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入聯絡人姓名",
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(Customer.TaxNumber),
                    Label = "統一編號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入統一編號",
                    ContainerCssClass = "col-md-6"
                }
            };

            basicFormSections = new Dictionary<string, string>
            {
                { nameof(Customer.CustomerCode), "基本資訊" },
                { nameof(Customer.CompanyName), "基本資訊" },
                { nameof(Customer.ContactPerson), "聯絡資訊" },
                { nameof(Customer.TaxNumber), "財務資訊" }
            };
        }
        catch (Exception ex)
        {
            // 記錄表單欄位初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeBasicFormFields), 
                    GetType(),
                    additionalData: new { 
                        PageName = "CustomerEdit",
                        Action = "InitializeBasicFormFields",
                        CustomerId = Id
                    });
            });
            
            // 設定安全的預設值
            basicFormFields = new List<FormFieldDefinition>();
            basicFormSections = new Dictionary<string, string>();
        }
    }    private void InitializeFormFields()
    {
        try
        {
            // 創建自動完成搜索函式
            var customerTypeSearchFunction = new Func<string, Task<List<SelectOption>>>(async (keyword) =>
            {
                List<CustomerType> results;
                if (string.IsNullOrWhiteSpace(keyword))
                {
                    // 如果關鍵字為空，返回所有客戶類型（用於初始化顯示值）
                    results = customerTypes.Take(10).ToList();
                }
                else
                {
                    results = await CustomerService.SearchCustomerTypesAsync(keyword);
                }
                
                return results.Select(ct => new SelectOption
                {
                    Text = ct.TypeName,
                    Value = ct.Id.ToString()
                }).ToList();
            });

            var industryTypeSearchFunction = new Func<string, Task<List<SelectOption>>>(async (keyword) =>
            {
                List<IndustryType> results;
                if (string.IsNullOrWhiteSpace(keyword))
                {
                    // 如果關鍵字為空，返回所有行業類型（用於初始化顯示值）
                    results = industryTypes.Take(10).ToList();
                }
                else
                {
                    results = await CustomerService.SearchIndustryTypesAsync(keyword);
                }
                
                return results.Select(it => new SelectOption
                {
                    Text = it.IndustryTypeName,
                    Value = it.Id.ToString()
                }).ToList();
            });

            // 添加需要自動完成的欄位到現有的basicFormFields
            basicFormFields.AddRange(new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(Customer.CustomerTypeId),
                    Label = "客戶類型",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "輸入客戶類型名稱進行搜尋...",
                    SearchFunction = customerTypeSearchFunction,
                    MinSearchLength = 1,
                    AutoCompleteDelayMs = 300,
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(Customer.IndustryTypeId),
                    Label = "行業類型",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "輸入行業類型名稱進行搜尋...",
                    SearchFunction = industryTypeSearchFunction,
                    MinSearchLength = 1,
                    AutoCompleteDelayMs = 300,
                    ContainerCssClass = "col-md-6"
                }
            });

            // 更新表單區段
            basicFormSections[nameof(Customer.CustomerTypeId)] = "分類資訊";
            basicFormSections[nameof(Customer.IndustryTypeId)] = "分類資訊";
        }
        catch (Exception ex)
        {
            // 記錄表單欄位初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeFormFields), 
                    GetType(),
                    additionalData: new { 
                        PageName = "CustomerEdit",
                        Action = "InitializeFormFields",
                        CustomerId = Id
                    });
            });
            
            // 如果失敗，至少確保基本結構存在
            basicFormFields ??= new List<FormFieldDefinition>();
            basicFormSections ??= new Dictionary<string, string>();
        }
    }
    
    private async Task<Customer?> LoadCustomerData()
    {
        try
        {
            if (!Id.HasValue) 
            {
                var newCustomer = new Customer
                {
                    CustomerCode = await GenerateCustomerCodeAsync(),
                    CompanyName = "",
                    ContactPerson = "",
                    TaxNumber = "",
                    Status = EntityStatus.Active
                };
                customer = newCustomer;
                customerContacts = new List<CustomerContact>();
                customerAddresses = new List<CustomerAddress>();
                return newCustomer;
            }

            // 載入客戶基本資料
            var loadedCustomer = await CustomerService.GetByIdAsync(Id.Value);
            if (loadedCustomer != null)
            {
                customer = loadedCustomer;
                
                // 載入聯絡方式和地址資料
                customerContacts = await CustomerService.GetCustomerContactsAsync(Id.Value);
                customerAddresses = await CustomerAddressService.GetByCustomerIdAsync(Id.Value);
                
                return customer;
            }
            else
            {
                // 如果找不到客戶，建立新的
                customer = new Customer();
                customerContacts = new List<CustomerContact>();
                customerAddresses = new List<CustomerAddress>();
                return customer;
            }
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadCustomerData), 
                GetType(),
                additionalData: new { 
                    PageName = "CustomerEdit",
                    Action = "LoadCustomerData",
                    CustomerId = Id
                });
            
            // 設定安全的預設值，確保程式不會崩潰
            customer = new Customer
            {
                CustomerCode = "ERROR",
                CompanyName = "",
                ContactPerson = "",
                TaxNumber = "",
                Status = EntityStatus.Active
            };
            customerContacts = new List<CustomerContact>();
            customerAddresses = new List<CustomerAddress>();
            
            return customer;
        }
    }private async Task<string> GenerateCustomerCodeAsync()
    {
        try
        {
            // 獲取所有客戶並找到最新的代碼
            var customers = await CustomerService.GetAllAsync();
            var lastCode = customers
                .Where(c => !string.IsNullOrEmpty(c.CustomerCode) && c.CustomerCode.StartsWith("C"))
                .Select(c => c.CustomerCode)
                .OrderByDescending(code => code)
                .FirstOrDefault();
                
            if (lastCode != null && lastCode.Length > 1)
            {
                var codeNumber = lastCode.Substring(1);
                if (int.TryParse(codeNumber, out var number))
                {
                    return $"C{(number + 1):D4}";
                }
            }
            return "C0001"; // 預設第一個客戶代碼
        }
        catch
        {
            return "C0001"; // 如果出錯，回傳預設值
        }    
    }    private async Task<bool> SaveCustomer(Customer entity)
    {
        try
        {
            // 首先執行必填欄位的客戶端驗證
            var isRequiredFieldsValid = await NotificationService.ValidateRequiredFieldsAsync();
            if (!isRequiredFieldsValid)
            {
                return false;
            }

            // 基本驗證 - 使用通知服務
            if (string.IsNullOrWhiteSpace(entity.CustomerCode))
            {
                await NotificationService.ShowErrorAsync("客戶代碼為必填");
                return false;
            }

            if (string.IsNullOrWhiteSpace(entity.CompanyName))
            {
                await NotificationService.ShowErrorAsync("公司名稱為必填");
                return false;
            }

            ServiceResult result;
            
            if (Id.HasValue)
            {
                // 更新現有客戶
                result = await CustomerService.UpdateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新聯絡方式和地址資料
                    await CustomerService.UpdateCustomerContactsAsync(entity.Id, customerContacts);
                    await CustomerAddressService.UpdateCustomerAddressesAsync(entity.Id, customerAddresses);
                }
            }
            else
            {
                // 新增客戶
                result = await CustomerService.CreateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新聯絡方式和地址資料
                    await CustomerService.UpdateCustomerContactsAsync(entity.Id, customerContacts);
                    await CustomerAddressService.UpdateCustomerAddressesAsync(entity.Id, customerAddresses);
                }
            }

            // 使用通知服務顯示結果，但不重複顯示
            // GenericEditPageComponent 會處理通用的成功/失敗訊息
            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"儲存時發生錯誤：{ex.Message}");
            return false;
        }
    }

    // ===== 子集合事件處理 =====
    
    private Task OnContactsChanged(List<CustomerContact> contacts)
    {
        customerContacts = contacts;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private Task OnAddressesChanged(List<CustomerAddress> addresses)
    {
        customerAddresses = addresses;
        StateHasChanged();
        return Task.CompletedTask;
    }

}
