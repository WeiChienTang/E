@* 可重用的客戶編輯組件 - 可在任何頁面中嵌入 *@
@inject ICustomerService CustomerService
@inject INotificationService NotificationService
@inject ActionButtonHelper ActionButtonHelper
@using ERPCore2.Helpers

<GenericEditModalComponent TEntity="Customer" 
                          TService="ICustomerService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@CustomerId"
                          Service="@CustomerService"
                          EntityName="客戶"
                          EntityNamePlural="客戶"
                          ModalTitle="@(CustomerId.HasValue ? "編輯客戶" : "新增客戶")"
                          Size="GenericEditModalComponent<Customer, ICustomerService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          DataLoader="@LoadCustomerData"
                          UseGenericSave="true"
                          SaveSuccessMessage="@(CustomerId.HasValue ? "客戶更新成功" : "客戶新增成功")"
                          SaveFailureMessage="客戶儲存失敗"
                          RequiredPermission="Customer.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel">
</GenericEditModalComponent>

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? CustomerId { get; set; }
    [Parameter] public EventCallback<Customer> OnCustomerSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<Customer, ICustomerService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InitializeFormFieldsAsync();
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化客戶編輯組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // 當 CustomerId 參數變更時，重新初始化表單欄位
        if (formFields != null) // 只有在已經初始化過的情況下才重新設定
        {
            await InitializeFormFieldsAsync();
        }
        
        await base.OnParametersSetAsync();
    }

    private async Task HandleSaveSuccess()
    {
        if (editModalComponent?.Entity != null)
        {
            await OnCustomerSaved.InvokeAsync(editModalComponent.Entity);
        }
        await CloseModal();
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task<Customer?> LoadCustomerData()
    {
        try
        {
            if (!CustomerId.HasValue)
            {
                // 新增模式
                var newCustomer = new Customer
                {
                    Code = await GenerateCustomerCodeAsync(),
                    Status = EntityStatus.Active
                };

                return newCustomer;
            }

            // 編輯模式
            var customer = await CustomerService.GetByIdAsync(CustomerId.Value);

            return customer;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入客戶資料時發生錯誤：{ex.Message}");
            return null;
        }
    }

    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
            new()
            {
                PropertyName = nameof(Customer.Code),
                Label = "客戶代碼",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入客戶代碼",
                IsRequired = true,
                MaxLength = 20,
                HelpText = "客戶的唯一識別代碼，新增時系統會自動產生，也可手動修改"
            },
            new()
            {
                PropertyName = nameof(Customer.CompanyName),
                Label = "公司名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入公司名稱",
                IsRequired = false,
                MaxLength = 20,
                HelpText = "客戶的完整公司名稱（公司名稱、負責人或聯絡人至少需填寫一項）"
            },
            new()
            {
                PropertyName = nameof(Customer.ContactPerson),
                Label = "聯絡人",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入聯絡人姓名",
                IsRequired = false,
                MaxLength = 10,
                HelpText = "主要聯絡人姓名（公司名稱、負責人或聯絡人至少需填寫一項）"
            },
            new()
            {
                PropertyName = nameof(Customer.TaxNumber),
                Label = "統一編號",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入統一編號",
                IsRequired = false,
                MaxLength = 8,
                HelpText = "公司統一編號（8位數字）"
            },
            new()
            {
                PropertyName = nameof(Customer.ResponsiblePerson),
                Label = "負責人",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入負責人姓名",
                IsRequired = false,
                MaxLength = 10,
                HelpText = "公司負責人姓名（公司名稱、負責人或聯絡人至少需填寫一項）"
            },
            new()
            {
                PropertyName = nameof(Customer.JobTitle),
                Label = "職稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入職稱",
                IsRequired = false,
                MaxLength = 10,
                HelpText = "聯絡人職稱"
            },
            new()
            {
                PropertyName = nameof(Customer.ContactPhone),
                Label = "聯絡電話",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入聯絡電話",
                IsRequired = false,
                MaxLength = 20,
                HelpText = "聯絡人或是公司聯絡電話"
            },
            new()
            {
                PropertyName = nameof(Customer.MobilePhone),
                Label = "行動電話",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入行動電話",
                IsRequired = false,
                MaxLength = 20,
                HelpText = "聯絡人行動電話"
            },
            new()
            {
                PropertyName = nameof(Customer.Fax),
                Label = "傳真",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入傳真號碼",
                IsRequired = false,
                MaxLength = 20,
                HelpText = "公司傳真號碼"
            },
            new()
            {
                PropertyName = nameof(Customer.Email),
                Label = "信箱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入電子郵件",
                IsRequired = false,
                MaxLength = 50,
                HelpText = "聯絡人電子郵件地址"
            },
            new()
            {
                PropertyName = nameof(Customer.Website),
                Label = "公司網址",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入公司網址",
                IsRequired = false,
                MaxLength = 50,
                ContainerCssClass = "col-4",
                HelpText = "公司官方網站網址"
            },
            new()
            {
                PropertyName = nameof(Customer.ContactAddress),
                Label = "聯絡地址",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入聯絡地址",
                IsRequired = false,
                MaxLength = 50,
                HelpText = "公司聯絡地址",
                ContainerCssClass = "col-4"
            },
            new()
            {
                PropertyName = nameof(Customer.ShippingAddress),
                Label = "貨運地址",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入貨運地址",
                IsRequired = false,
                MaxLength = 50,
                HelpText = "貨物運送地址",
                ContainerCssClass = "col-4"
            },
            new()
            {
                PropertyName = nameof(Customer.PaymentMethod),
                Label = "付款方式",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入付款方式",
                IsRequired = false,
                MaxLength = 10,
                HelpText = "客戶的付款方式（例如：現金、支票、匯款等）"
            },
            new()
            {
                PropertyName = nameof(Customer.PaymentTerms),
                Label = "付款條件",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入付款條件",
                IsRequired = false,
                MaxLength = 50,
                HelpText = "付款條件說明（例如：月結30天、貨到付款等）"
            },
            new FormFieldDefinition()
            {
                PropertyName = nameof(Customer.CompanyContactPhone),
                Label = "聯絡電話",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入聯絡電話",
                IsRequired = false,
                MaxLength = 20,
                HelpText = "負責人或是公司聯絡電話"
            },

            FormFieldConfigurationHelper.CreateRemarksField<Customer>()
        };

        formSections = new Dictionary<string, string>
        {
            { nameof(Customer.Code), "基本資訊" },
            { nameof(Customer.CompanyName), "基本資訊" },
            { nameof(Customer.ResponsiblePerson), "基本資訊" },       
            { nameof(Customer.CompanyContactPhone), "基本資訊" },
            { nameof(Customer.TaxNumber), "基本資訊" },         
            { nameof(Customer.Fax), "基本資訊" },   
            { nameof(Customer.Website), "基本資訊" },
            { nameof(Customer.ContactAddress), "基本資訊" },
            { nameof(Customer.ShippingAddress), "基本資訊" },
            
            { nameof(Customer.ContactPerson), "聯絡人資訊" },
            { nameof(Customer.JobTitle), "聯絡人資訊" },
            { nameof(Customer.ContactPhone), "聯絡人資訊" },
            { nameof(Customer.MobilePhone), "聯絡人資訊" },            
            { nameof(Customer.Email), "聯絡人資訊" },           

            { nameof(Customer.PaymentMethod), "付款資訊" },
            { nameof(Customer.PaymentTerms), "付款資訊" },
            { nameof(Customer.Remarks), "其他資訊" }
        };
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 生成客戶代碼
    /// </summary>
    private async Task<string> GenerateCustomerCodeAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            CustomerService,
            "CUST",
            (service, code, excludeId) => service.IsCustomerCodeExistsAsync(code, excludeId)
        );
    }
}
