@page "/customers"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@using ERPCore2.Helpers
@rendermode InteractiveServer

<PageTitle>客戶維護</PageTitle>

<GenericIndexPageComponent TEntity="Customer" 
                          TService="ICustomerService"
                          Service="@CustomerService"
                          EntityBasePath="/customers"
                          PageTitle="客戶維護"
                          PageSubtitle="管理所有客戶資料與聯絡資訊"
                          EntityName="客戶"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadCustomersAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplyCustomerFilters"
                          GetEntityDisplayName="@(customer => customer.CompanyName)"
                          @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Customer, ICustomerService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            // 記錄初始化錯誤（使用 Fire-and-Forget 因為這裡不能用 async）
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(OnInitialized), 
                    GetType(),
                    additionalData: new { 
                        PageName = "CustomerIndex",
                        Action = "Initialize",
                        Phase = "ComponentInitialization"
                    });
            });
            
            // 確保基本初始化完成，避免程式崩潰
            try
            {
                breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
                {
                    new("首頁", "/"),
                    new("客戶管理")
                };
                filterDefinitions = new List<SearchFilterDefinition>();
                columnDefinitions = new List<TableColumnDefinition>();
            }
            catch
            {
                // 如果連預設值都設定失敗，至少確保不是 null
                breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
                filterDefinitions ??= new List<SearchFilterDefinition>();
                columnDefinitions ??= new List<TableColumnDefinition>();
            }
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("客戶管理")
            };
        }
        catch (Exception ex)
        {
            // 記錄麵包屑初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeBreadcrumbs), 
                    GetType(),
                    additionalData: new { 
                        PageName = "CustomerIndex",
                        Action = "InitializeBreadcrumbs"
                    });
            });
            
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 重新初始化篩選器以載入下拉選單選項
            await InitializeFiltersAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadBasicDataAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "CustomerIndex",
                    Action = "LoadBasicData",
                    ExpectedData = "CustomerTypes, IndustryTypes"
                });
        }
    }

    // 載入客戶資料
    private async Task<List<Customer>> LoadCustomersAsync()
    {
        try
        {
            return await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadCustomersAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "CustomerIndex",
                    Action = "LoadCustomers",
                    ExpectedDataType = "List<Customer>"
                });
            
            // 確保 UI 狀態更新，並回傳安全的預設值
            StateHasChanged();
            return new List<Customer>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 建立基本篩選定義（不包含下拉選單選項，這些將在 InitializeFiltersAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("CustomerCode", "客戶代碼", "輸入客戶代碼搜尋")
                .AddText("CompanyName", "公司名稱", "輸入公司名稱搜尋")
                .AddText("ContactPerson", "聯絡人", "輸入聯絡人姓名搜尋")
                .AddSelect("CustomerTypeId", "客戶類型", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("IndustryTypeId", "行業類型", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("Status", "狀態", statusOptions)
                .AddText("TaxNumber", "統一編號", "輸入統一編號搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            // 記錄篩選器初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeFilters), 
                    GetType(),
                    additionalData: new { 
                        PageName = "CustomerIndex",
                        Action = "InitializeFilters"
                    });
            });
            
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("客戶代碼", nameof(Customer.CustomerCode)),
                TableColumnDefinition.Text("公司名稱", nameof(Customer.CompanyName)),
                TableColumnDefinition.Text("聯絡人", nameof(Customer.ContactPerson)),
                TableColumnDefinition.Text("客戶類型", "CustomerType.TypeName"),
                TableColumnDefinition.Text("行業類型", "IndustryType.IndustryTypeName"),
                TableColumnDefinition.Status("狀態", nameof(Customer.Status), new Dictionary<object, string>
                {
                    { EntityStatus.Active, "bg-success" },
                    { EntityStatus.Inactive, "bg-secondary" }
                }),
                TableColumnDefinition.Date("建立日期", nameof(Customer.CreatedAt), "yyyy/MM/dd")
            };
        }
        catch (Exception ex)
        {
            // 記錄表格欄位初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeTableColumns), 
                    GetType(),
                    additionalData: new { 
                        PageName = "CustomerIndex",
                        Action = "InitializeTableColumns"
                    });
            });
            
            // 設定安全的預設值
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Customer> ApplyCustomerFilters(SearchFilterModel searchModel, IQueryable<Customer> query)
    {
        try
        {
            // 客戶代碼篩選
            var customerCodeFilter = searchModel.GetFilterValue("CustomerCode")?.ToString();
            if (!string.IsNullOrWhiteSpace(customerCodeFilter))
            {
                query = query.Where(c => 
                    c.CustomerCode.Contains(customerCodeFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 公司名稱篩選
            var companyNameFilter = searchModel.GetFilterValue("CompanyName")?.ToString();
            if (!string.IsNullOrWhiteSpace(companyNameFilter))
            {
                query = query.Where(c => 
                    c.CompanyName.Contains(companyNameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 聯絡人篩選
            var contactPersonFilter = searchModel.GetFilterValue("ContactPerson")?.ToString();
            if (!string.IsNullOrWhiteSpace(contactPersonFilter))
            {
                query = query.Where(c => 
                    !string.IsNullOrEmpty(c.ContactPerson) && 
                    c.ContactPerson.Contains(contactPersonFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 客戶類型篩選 - 改為ID篩選
            var customerTypeIdFilter = searchModel.GetFilterValue("CustomerTypeId")?.ToString();
            if (!string.IsNullOrWhiteSpace(customerTypeIdFilter) && int.TryParse(customerTypeIdFilter, out var customerTypeId))
            {
                query = query.Where(c => c.CustomerTypeId == customerTypeId);
            }

            // 行業類型篩選 - 改為ID篩選
            var industryTypeIdFilter = searchModel.GetFilterValue("IndustryTypeId")?.ToString();
            if (!string.IsNullOrWhiteSpace(industryTypeIdFilter) && int.TryParse(industryTypeIdFilter, out var industryTypeId))
            {
                query = query.Where(c => c.IndustryTypeId == industryTypeId);
            }

            // 狀態篩選
            var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
            {
                query = query.Where(c => c.Status == status);
            }

            // 統一編號篩選
            var taxNumberFilter = searchModel.GetFilterValue("TaxNumber")?.ToString();
            if (!string.IsNullOrWhiteSpace(taxNumberFilter))
            {
                query = query.Where(c => 
                    !string.IsNullOrEmpty(c.TaxNumber) && 
                    c.TaxNumber.Contains(taxNumberFilter, StringComparison.OrdinalIgnoreCase));
            }

            return query.OrderBy(c => c.CustomerCode);
        }
        catch (Exception ex)
        {
            // 記錄篩選錯誤（這裡不能用 async，所以使用 Fire-and-Forget）
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(ApplyCustomerFilters), 
                    GetType(),
                    additionalData: new { 
                        PageName = "CustomerIndex",
                        Action = "ApplyFilters",
                        FilterModel = searchModel
                    });
            });
            
            // 回傳原始查詢，確保程式不會崩潰
            return query.OrderBy(c => c.CustomerCode);
        }
    }

    private async Task InitializeFiltersAsync()
    {
        try
        {
            // 載入客戶類型選項
            var customerTypes = await CustomerService.GetCustomerTypesAsync();
            var customerTypeOptions = customerTypes.Select(ct => new SelectOption
            {
                Text = ct.TypeName,
                Value = ct.Id.ToString()
            }).ToList();

            // 載入行業類型選項
            var industryTypes = await CustomerService.GetIndustryTypesAsync();
            var industryTypeOptions = industryTypes.Select(it => new SelectOption
            {
                Text = it.IndustryTypeName,
                Value = it.Id.ToString()
            }).ToList();

            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("CustomerCode", "客戶代碼", "輸入客戶代碼搜尋")
                .AddText("CompanyName", "公司名稱", "輸入公司名稱搜尋")
                .AddText("ContactPerson", "聯絡人", "輸入聯絡人姓名搜尋")
                .AddSelect("CustomerTypeId", "客戶類型", customerTypeOptions)
                .AddSelect("IndustryTypeId", "行業類型", industryTypeOptions)
                .AddSelect("Status", "狀態", statusOptions)
                .AddText("TaxNumber", "統一編號", "輸入統一編號搜尋")
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，刷新組件以更新篩選器
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFiltersAsync), GetType(),
                additionalData: new { PageName = "CustomerIndex", Action = "InitializeFiltersAsync" });
        }
    }
}
