@page "/customers"
@inject ICustomerService CustomerService
@rendermode InteractiveServer
@inject INotificationService NotificationService

<GenericIndexPageComponent TEntity="Customer" 
                      TService="ICustomerService"
                      Service="@CustomerService"
                      EntityBasePath="/customers"
                      PageTitle="客戶維護"
                      PageSubtitle="管理所有客戶資料與聯絡資訊"
                      EntityName="客戶"
                      BreadcrumbItems="@breadcrumbItems"
                      FilterDefinitions="@filterDefinitions"
                      ColumnDefinitions="@columnDefinitions"
                      DataLoader="@LoadCustomersAsync"
                      FilterApplier="@ApplyCustomerFilters"
                      GetEntityDisplayName="@(customer => customer.CompanyName)"
                      RequiredPermission="Customer.Read"
                      OnAddClick="@modalHandler.ShowAddModalAsync"
                      OnRowClick="@modalHandler.ShowEditModalAsync"
                      @ref="indexComponent" />

<CustomerEditModalComponent IsVisible="@showEditModal"
                           IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                           CustomerId="@editingCustomerId"
                           OnCustomerSaved="@modalHandler.OnEntitySavedAsync"
                           OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Customer, ICustomerService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingCustomerId = null;
    
    // Modal 處理器
    private ModalHandler<Customer, GenericIndexPageComponent<Customer, ICustomerService>> modalHandler = default!;
    
    // 選項清單
    private List<CustomerType> customerTypes = new();
    
    // 欄位配置
    private CustomerFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Customer, GenericIndexPageComponent<Customer, ICustomerService>>(
                id => editingCustomerId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入客戶類型資料
            await LoadCustomerTypesAsync();
            
            // 建立欄位配置（在載入客戶類型後，並傳遞 NotificationService）
            fieldConfiguration = new CustomerFieldConfiguration(customerTypes, NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化客戶頁面失敗");
            await NotificationService.ShowErrorAsync("初始化客戶頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("客戶管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入客戶資料
    private async Task<List<Customer>> LoadCustomersAsync()
    {
        try
        {
            return await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex,nameof(LoadCustomersAsync),GetType(),additionalData:"載入客戶資料失敗");
            await NotificationService.ShowErrorAsync("載入客戶資料失敗");
            // 設定安全的預設值
            return new List<Customer>();
        }
    }

    // 載入客戶類型資料
    private async Task LoadCustomerTypesAsync()
    {
        try
        {
            customerTypes = await CustomerService.GetCustomerTypesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCustomerTypesAsync), GetType(), additionalData: "載入客戶類型資料失敗");
            await NotificationService.ShowErrorAsync("載入客戶類型資料失敗");
            // 設定安全的預設值
            customerTypes = new List<CustomerType>();
        }
    }

    private IQueryable<Customer> ApplyCustomerFilters(SearchFilterModel searchModel, IQueryable<Customer> query)
    {
        try
        {
            return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyCustomerFilters), GetType());
        }
        catch (Exception ex)
        {
            // 記錄錯誤並回傳安全的預設查詢
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplyCustomerFilters), GetType(), additionalData: "客戶篩選器應用失敗");
            _ = NotificationService.ShowErrorAsync("篩選條件應用失敗，已顯示全部資料");
            
            // 回傳基本排序的查詢，確保頁面仍能正常運作
            return query.OrderBy(c => c.Code);
        }
    }
}