@page "/customers"
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>客戶維護</PageTitle>

<GenericIndexPageComponent TEntity="Customer" 
                          TService="ICustomerService"
                          Service="@CustomerService"
                          EntityBasePath="/customers"
                          PageTitle="客戶維護"
                          PageSubtitle="管理所有客戶資料與聯絡資訊"
                          PageIcon="people-fill"
                          AddButtonText="新增客戶"
                          AddButtonIcon="bi bi-plus-circle"
                          AddButtonTitle="新增客戶資料"
                          SearchSectionTitle="客戶搜尋與管理"
                          EmptyMessage="沒有找到符合條件的客戶資料"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadCustomersAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplyCustomerFilters"
                          AutoSearch="true"
                          ShowSearchButton="true"
                          ShowAdvancedToggle="true"
                          SearchDelayMs="500"
                          EntityName="客戶"
                          GetEntityDisplayName="@(customer => customer.CompanyName)"
                          DeleteSuccessMessage="客戶刪除成功"
                          DeleteConfirmMessage="確定要刪除客戶「{0}」嗎？"
                          EnableStandardActions="true"
                          ShowViewButton="true"
                          ShowEditButton="true"
                          ShowDeleteButton="true"
                          @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Customer, ICustomerService> indexComponent = default!;
    
    // 選項清單
    private List<CustomerType> customerTypes = new();
    private List<IndustryType> industryTypes = new();
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeFilters();
        InitializeTableColumns();
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("客戶管理")
        };
    }

    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            customerTypes = await CustomerService.GetCustomerTypesAsync();
            industryTypes = await CustomerService.GetIndustryTypesAsync();
            
            // 重新初始化篩選器（因為需要選項資料）
            InitializeFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入基礎資料失敗：", ex.Message);
            customerTypes = new List<CustomerType>();
            industryTypes = new List<IndustryType>();
        }
    }

    // 載入客戶資料
    private async Task<List<Customer>> LoadCustomersAsync()
    {
        try
        {
            return await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入客戶資料失敗：", ex.Message);
            return new List<Customer>();
        }
    }

    private void InitializeFilters()
    {
        // 準備客戶類型選項
        var customerTypeOptions = customerTypes.Select(ct => new SelectOption
        {
            Text = ct.TypeName,
            Value = ct.Id.ToString()
        }).ToList();

        // 準備行業類型選項
        var industryTypeOptions = industryTypes.Select(it => new SelectOption
        {
            Text = it.IndustryTypeName,
            Value = it.Id.ToString()
        }).ToList();

        // 準備狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
            new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
        };

        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("CustomerCode", "客戶代碼", "輸入客戶代碼搜尋")
            .AddText("CompanyName", "公司名稱", "輸入公司名稱搜尋")
            .AddText("ContactPerson", "聯絡人", "輸入聯絡人姓名搜尋")
            .AddSelect("CustomerTypeId", "客戶類型", customerTypeOptions, isAdvanced: true)
            .AddSelect("IndustryTypeId", "行業類型", industryTypeOptions, isAdvanced: true)
            .AddSelect("Status", "狀態", statusOptions, isAdvanced: true)
            .AddText("TaxNumber", "統一編號", "輸入統一編號搜尋", isAdvanced: true)
            .Build();
    }

    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("客戶代碼", nameof(Customer.CustomerCode)),
            TableColumnDefinition.Text("公司名稱", nameof(Customer.CompanyName)),
            TableColumnDefinition.Text("聯絡人", nameof(Customer.ContactPerson)),
            TableColumnDefinition.Text("客戶類型", "CustomerType.TypeName"),
            TableColumnDefinition.Text("行業類型", "IndustryType.IndustryTypeName"),
            TableColumnDefinition.Status("狀態", nameof(Customer.Status), new Dictionary<object, string>
            {
                { EntityStatus.Active, "bg-success" },
                { EntityStatus.Inactive, "bg-secondary" }
            }),
            TableColumnDefinition.Date("建立日期", nameof(Customer.CreatedAt), "yyyy/MM/dd")
        };
    }

    // 自定義篩選邏輯
    private IQueryable<Customer> ApplyCustomerFilters(SearchFilterModel searchModel, IQueryable<Customer> query)
    {
        // 客戶代碼篩選
        var customerCodeFilter = searchModel.GetFilterValue("CustomerCode")?.ToString();
        if (!string.IsNullOrWhiteSpace(customerCodeFilter))
        {
            query = query.Where(c => 
                c.CustomerCode.Contains(customerCodeFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 公司名稱篩選
        var companyNameFilter = searchModel.GetFilterValue("CompanyName")?.ToString();
        if (!string.IsNullOrWhiteSpace(companyNameFilter))
        {
            query = query.Where(c => 
                c.CompanyName.Contains(companyNameFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 聯絡人篩選
        var contactPersonFilter = searchModel.GetFilterValue("ContactPerson")?.ToString();
        if (!string.IsNullOrWhiteSpace(contactPersonFilter))
        {
            query = query.Where(c => 
                !string.IsNullOrEmpty(c.ContactPerson) && 
                c.ContactPerson.Contains(contactPersonFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 客戶類型篩選
        var customerTypeIdFilter = searchModel.GetFilterValue("CustomerTypeId")?.ToString();
        if (!string.IsNullOrWhiteSpace(customerTypeIdFilter) && int.TryParse(customerTypeIdFilter, out var customerTypeId))
        {
            query = query.Where(c => c.CustomerTypeId == customerTypeId);
        }

        // 行業類型篩選
        var industryTypeIdFilter = searchModel.GetFilterValue("IndustryTypeId")?.ToString();
        if (!string.IsNullOrWhiteSpace(industryTypeIdFilter) && int.TryParse(industryTypeIdFilter, out var industryTypeId))
        {
            query = query.Where(c => c.IndustryTypeId == industryTypeId);
        }

        // 狀態篩選
        var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
        if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
        {
            query = query.Where(c => c.Status == status);
        }

        // 統一編號篩選
        var taxNumberFilter = searchModel.GetFilterValue("TaxNumber")?.ToString();
        if (!string.IsNullOrWhiteSpace(taxNumberFilter))
        {
            query = query.Where(c => 
                !string.IsNullOrEmpty(c.TaxNumber) && 
                c.TaxNumber.Contains(taxNumberFilter, StringComparison.OrdinalIgnoreCase));
        }

        return query.OrderBy(c => c.CustomerCode);
    }
}