@page "/customers"
@inject ICustomerService CustomerService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Customer" 
                      TService="ICustomerService"
                      Service="@CustomerService"
                      EntityBasePath="/customers"
                      PageTitle="客戶維護"
                      PageSubtitle="管理所有客戶資料與聯絡資訊"
                      EntityName="客戶"
                      BreadcrumbItems="@breadcrumbItems"
                      FilterDefinitions="@filterDefinitions"
                      ColumnDefinitions="@columnDefinitions"
                      DataLoader="@LoadCustomersAsync"
                      InitializeBasicData="@LoadBasicDataAsync"
                      FilterApplier="@ApplyCustomerFilters"
                      GetEntityDisplayName="@(customer => customer.CompanyName)"
                      RequiredPermission="Customer.Read"
                      OnAddClick="@modalHandler.ShowAddModalAsync"
                      OnRowClick="@modalHandler.ShowEditModalAsync"
                      @ref="indexComponent" />

<CustomerEditModalComponent IsVisible="@showEditModal"
                           IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                           CustomerId="@editingCustomerId"
                           OnCustomerSaved="@modalHandler.OnEntitySavedAsync"
                           OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Customer, ICustomerService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingCustomerId = null;
    
    // Modal 處理器
    private ModalHandler<Customer, GenericIndexPageComponent<Customer, ICustomerService>> modalHandler = default!;
    
    // 選項清單
    private List<CustomerType> customerTypes = new();
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Customer, GenericIndexPageComponent<Customer, ICustomerService>>(
                id => editingCustomerId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitialized),
                GetType(),
                additionalData: "初始化客戶頁面失敗"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("客戶管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化麵包屑導航失敗"
            );
            
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            customerTypes = await CustomerService.GetCustomerTypesAsync();
            
            // 重新初始化篩選器（因為需要選項資料）
            InitializeFilters();
            
            // 重要：通知組件狀態已改變，確保參數更新
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadBasicDataAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "CustomerIndex",
                    Action = "LoadBasicData",
                    ExpectedData = "CustomerTypes"
                });
                
            // 設定安全的預設值，確保程式不會崩潰
            customerTypes = new List<CustomerType>();
            
            // 即使失敗也要重新初始化篩選器
            InitializeFilters();
            StateHasChanged();
        }
    }

    // 載入客戶資料
    private async Task<List<Customer>> LoadCustomersAsync()
    {
        try
        {
            return await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadCustomersAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "CustomerIndex",
                    Action = "LoadCustomers",
                    ExpectedDataType = "List<Customer>"
                });
            
            // 確保 UI 狀態更新，並回傳安全的預設值
            StateHasChanged();
            return new List<Customer>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備客戶類型選項
            var customerTypeOptions = customerTypes.Select(ct => new SelectOption
            {
                Text = ct.TypeName,
                Value = ct.Id.ToString()
            }).ToList();

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Code", "客戶代碼", "輸入客戶代碼搜尋")
                .AddText("CompanyName", "公司名稱", "輸入公司名稱搜尋")
                .AddText("ContactPerson", "聯絡人", "輸入聯絡人姓名搜尋")
                .AddSelect("CustomerTypeId", "客戶類型", customerTypeOptions)
                .AddText("TaxNumber", "統一編號", "輸入統一編號搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
            
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("客戶代碼", nameof(Customer.Code)),
                TableColumnDefinition.Text("公司名稱", nameof(Customer.CompanyName)),
                TableColumnDefinition.Text("聯絡人", nameof(Customer.ContactPerson)),
                TableColumnDefinition.Text("客戶類型", "CustomerType.TypeName"),
                TableColumnDefinition.Text("統一編號", nameof(Customer.TaxNumber)),
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
            
            // 設定安全的預設值
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }

    private IQueryable<Customer> ApplyCustomerFilters(SearchFilterModel searchModel, IQueryable<Customer> query)
    {
        var filterActions = new List<Func<SearchFilterModel, IQueryable<Customer>, IQueryable<Customer>>>
        {
            // 應用基礎實體篩選（狀態、備註）
            (model, q) => FilterHelper.ApplyBaseEntityFilters(model, q),
            
            // 客戶代碼篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "Code", c => c.Code),
            
            // 公司名稱篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "CompanyName", c => c.CompanyName),
            
            // 聯絡人篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "ContactPerson", c => c.ContactPerson),
            
            // 客戶類型篩選
            (model, q) => FilterHelper.ApplyNullableIntIdFilter(model, q, "CustomerTypeId", c => c.CustomerTypeId),
            
            // 統一編號篩選 - 允許 null 值
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "TaxNumber", c => c.TaxNumber, allowNull: true),
        };

        return FilterHelper.ApplyFiltersWithErrorHandling(
            searchModel,
            query,
            filterActions,
            q => q.OrderBy(c => c.Code), // 預設排序
            nameof(ApplyCustomerFilters),
            GetType()
        );
    }
}
