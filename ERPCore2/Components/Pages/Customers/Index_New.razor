@page "/customers"
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services.Customers.Interfaces
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>客戶管理</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-users me-2"></i>客戶管理
                    </h3>
                    <button class="btn btn-primary" @onclick="NavigateToCreate">
                        <i class="fas fa-plus me-2"></i>新增客戶
                    </button>
                </div>
                
                <div class="card-body">
                    <!-- 搜索區域 -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" placeholder="搜索客戶代碼或公司名稱..." 
                                       @bind="searchTerm" @bind:event="oninput" @onkeypress="OnSearchKeyPress" />
                            </div>
                        </div>                        <div class="col-md-4">
                            <select class="form-select" @onchange="OnFilterChanged" value="@selectedStatus">
                                <option value="">全部狀態</option>
                                <option value="@EntityStatus.Active">啟用</option>
                                <option value="@EntityStatus.Inactive">停用</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <button class="btn btn-outline-secondary" @onclick="ClearFilters">
                                <i class="fas fa-times me-2"></i>清除篩選
                            </button>
                        </div>
                    </div>

                    <!-- 錯誤訊息 -->
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="ClearError"></button>
                        </div>
                    }

                    <!-- 成功訊息 -->
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success alert-dismissible fade show" role="alert">
                            @successMessage
                            <button type="button" class="btn-close" @onclick="ClearSuccess"></button>
                        </div>
                    }

                    <!-- 載入中指示器 -->
                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">載入中...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- 客戶列表 -->
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>客戶代碼</th>
                                        <th>公司名稱</th>
                                        <th>聯絡人</th>
                                        <th>統一編號</th>
                                        <th>客戶類型</th>
                                        <th>行業別</th>
                                        <th>狀態</th>
                                        <th>建立日期</th>
                                        <th>操作</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (customers.Any())
                                    {
                                        @foreach (var customer in customers)
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@customer.CustomerCode</strong>
                                                </td>
                                                <td>@customer.CompanyName</td>
                                                <td>@(customer.ContactPerson ?? "-")</td>
                                                <td>@(customer.TaxNumber ?? "-")</td>
                                                <td>@(customer.CustomerType?.TypeName ?? "-")</td>
                                                <td>@(customer.Industry?.IndustryName ?? "-")</td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(customer.Status)">
                                                        @GetStatusText(customer.Status)
                                                    </span>
                                                </td>
                                                <td>@customer.CreatedDate.ToString("yyyy/MM/dd")</td>
                                                <td>
                                                    <div class="btn-group" role="group">
                                                        <button type="button" class="btn btn-sm btn-outline-primary" 
                                                                @onclick="() => NavigateToView(customer.CustomerId)" 
                                                                title="檢視">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-sm btn-outline-warning" 
                                                                @onclick="() => NavigateToEdit(customer.CustomerId)" 
                                                                title="編輯">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-sm btn-outline-danger" 
                                                                @onclick="() => ConfirmDelete(customer.CustomerId, customer.CompanyName)" 
                                                                title="刪除">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="9" class="text-center py-4 text-muted">
                                                <i class="fas fa-inbox fa-2x mb-2"></i>
                                                <br />
                                                沒有找到符合條件的客戶資料
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 載入 Font Awesome 圖示 -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

@code {
    private List<Customer> customers = new();
    private List<Customer> allCustomers = new();
    
    private string searchTerm = string.Empty;
    private string selectedStatus = string.Empty;
    
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    
    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            ClearMessages();
            
            allCustomers = await CustomerService.GetAllAsync();
            ApplyFilters();
        }        catch (Exception)
        {
            errorMessage = "載入客戶資料時發生錯誤，請稍後再試。";
            // 可以考慮添加 logger 注入來記錄錯誤
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void ApplyFilters()
    {
        customers = allCustomers;
        
        // 搜索過濾
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLower().Trim();
            customers = customers.Where(c => 
                c.CustomerCode.ToLower().Contains(term) || 
                c.CompanyName.ToLower().Contains(term) ||
                (c.ContactPerson?.ToLower().Contains(term) ?? false)
            ).ToList();
        }
        
        // 狀態過濾
        if (!string.IsNullOrWhiteSpace(selectedStatus) && Enum.TryParse<EntityStatus>(selectedStatus, out var status))
        {
            customers = customers.Where(c => c.Status == status).ToList();
        }
    }
    
    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplyFilters();
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task OnFilterChanged(ChangeEventArgs e)
    {
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }
    
    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedStatus = string.Empty;
        ApplyFilters();
        StateHasChanged();
    }
    
    private string GetStatusBadgeClass(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Active => "bg-success",
            EntityStatus.Inactive => "bg-warning",
            EntityStatus.Deleted => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    private string GetStatusText(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Active => "啟用",
            EntityStatus.Inactive => "停用",
            EntityStatus.Deleted => "已刪除",
            _ => "未知"
        };
    }
    
    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/customers/create");
    }
    
    private void NavigateToView(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}");
    }
    
    private void NavigateToEdit(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}/edit");
    }
    
    private async Task ConfirmDelete(int customerId, string companyName)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"確定要刪除客戶「{companyName}」嗎？此操作無法復原。");
        
        if (confirmed)
        {
            try
            {
                var result = await CustomerService.DeleteAsync(customerId);
                
                if (result.IsSuccess)
                {
                    successMessage = "客戶刪除成功！";
                    await LoadDataAsync();
                }
                else
                {
                    errorMessage = $"客戶刪除失敗: {result.ErrorMessage}";
                }
            }            catch (Exception)
            {
                errorMessage = "刪除客戶時發生錯誤，請稍後再試。";
            }
        }
    }
    
    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }
    
    private void ClearError() => errorMessage = string.Empty;
    private void ClearSuccess() => successMessage = string.Empty;
    
    // Watch for search term changes
    private string previousSearchTerm = string.Empty;
    private string previousStatus = string.Empty;
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            if (searchTerm != previousSearchTerm || selectedStatus != previousStatus)
            {
                previousSearchTerm = searchTerm;
                previousStatus = selectedStatus;
                
                ApplyFilters();
                StateHasChanged();
            }
        }
    }
}
