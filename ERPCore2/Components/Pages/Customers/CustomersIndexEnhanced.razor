@page "/customers-enhanced"
@using static ERPCore2.Components.Shared.Buttons.ButtonComponent
@using static ERPCore2.Components.Shared.Alerts.AlertComponent
@using ERPCore2.Services.Interfaces
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">                <PageHeaderComponent Title="客戶管理 (增強版)" IconClass="fas fa-users">
                    <Actions>
                        <ButtonComponent Text="新增客戶" 
                                       Variant="ButtonVariant.Primary" 
                                       IconClass="fas fa-plus" 
                                       OnClick="NavigateToCreate" />                        <ButtonComponent Text="返回原版本" 
                                       Variant="ButtonVariant.Secondary" 
                                       IconClass="fas fa-arrow-left" 
                                       OnClick="@(() => Navigation.NavigateTo("/customers"))" />
                    </Actions>
                </PageHeaderComponent>
                <div class="card-body">
                    <!-- 搜索區域 -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <SearchComponent Placeholder="搜索客戶代碼或公司名稱..." 
                                           SearchTerm="@searchTerm"
                                           SearchTermChanged="@OnSearchTermChanged"
                                           OnSearch="@OnSearchSubmit" />
                        </div>                        
                        <div class="col-md-4">
                            <SelectComponent TValue="string"
                                           Id="statusFilter" 
                                           Label=""
                                           @bind-Value="selectedStatus"
                                           Items="@(Enum.GetValues<EntityStatus>().Cast<object>())"
                                           GetItemText="@(item => GetStatusFilterText((EntityStatus)item))"
                                           GetItemValue="@(item => item.ToString())"
                                           EmptyOptionText="全部狀態" />
                        </div>
                        <div class="col-md-4">
                            <ButtonComponent Text="清除篩選" 
                                           IconClass="fas fa-times" 
                                           OnClick="ClearFilters" />
                        </div>
                    </div>

                    <!-- 訊息顯示區域 -->
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <AlertComponent Type="AlertType.Danger" 
                                      Message="@errorMessage" 
                                      IconClass="fas fa-exclamation-triangle"
                                      OnDismiss="ClearError" />
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <AlertComponent Type="AlertType.Success" 
                                      Message="@successMessage" 
                                      IconClass="fas fa-check-circle"
                                      OnDismiss="ClearSuccess" />
                    }

                    <!-- 載入中指示器 -->
                    <LoadingComponent IsLoading="@isLoading" 
                                    LoadingText="載入客戶資料中..." 
                                    ShowText="true" />

                    @if (!isLoading)
                    {
                        <!-- 客戶列表 - 使用增強版表格 -->
                        <div class="alert alert-info mb-3">
                            <i class="fas fa-info-circle me-2"></i>
                            這裡使用了新的 <strong>GenericTableComponent</strong>，具有以下優勢：
                            <ul class="mb-0 mt-2">
                                <li>配置式欄位定義，減少重複代碼</li>
                                <li>自動格式化（日期、貨幣、狀態等）</li>
                                <li>支援巢狀屬性存取</li>
                                <li>統一的樣式和行為</li>
                            </ul>
                        </div>
                        
                        <GenericTableComponent TItem="Customer" 
                                              Items="customers"
                                              ColumnDefinitions="columnDefinitions"
                                              ShowActions="true"
                                              EnableRowClick="true"
                                              OnRowClick="ShowCustomerDetail"
                                              EmptyMessage="沒有找到符合條件的客戶資料"
                                              ActionsTemplate="@GetActionsTemplate()" />
                    }
                </div>
            </div>        
        </div>    
    </div>
</div>

<!-- 客戶詳細資料模態對話框 -->
<CustomerDetailModal @ref="customerDetailModal" 
                    Customer="selectedCustomer" 
                    OnClose="OnModalClose" />

@code {
    private List<Customer> customers = new();
    private List<Customer> allCustomers = new();
    
    private string searchTerm = string.Empty;
    private string selectedStatus = string.Empty;
    
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    
    // 模態相關變數
    private CustomerDetailModal customerDetailModal = default!;
    private Customer? selectedCustomer;
    
    // 增強版表格欄位定義
    private List<TableColumnDefinition> columnDefinitions = new();
    
    protected override async Task OnInitializedAsync()
    {
        InitializeColumnDefinitions();
        await LoadDataAsync();
    }
    
    private void InitializeColumnDefinitions()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            // 客戶代碼 - 使用自定義範本加粗顯示
            TableColumnDefinition.Template(
                "客戶代碼", 
                customer => @<strong>@(((Customer)customer).CustomerCode)</strong>
            ),
            
            // 公司名稱 - 文字欄位
            TableColumnDefinition.Text("公司名稱", "CompanyName"),
            
            // 聯絡人 - 文字欄位，null 值自動顯示 "-"
            TableColumnDefinition.Text("聯絡人", "ContactPerson"),
            
            // 統一編號 - 文字欄位
            TableColumnDefinition.Text("統一編號", "TaxNumber"),
            
            // 客戶類型 - 巢狀屬性，自動處理 null 值
            TableColumnDefinition.Text("客戶類型", "CustomerType.TypeName"),
            
            // 行業別 - 巢狀屬性
            TableColumnDefinition.Text("行業別", "IndustryType.IndustryTypeName"),
            
            // 狀態 - 使用狀態映射自動顯示徽章
            TableColumnDefinition.Status("狀態", "Status", GetStatusBadgeMap()),
            
            // 建立日期 - 自動日期格式化
            TableColumnDefinition.Date("建立日期", "CreatedAt", "yyyy/MM/dd")
        };
    }
    
    private Dictionary<object, string> GetStatusBadgeMap()
    {
        return new Dictionary<object, string>
        {
            { EntityStatus.Active, "bg-success" },
            { EntityStatus.Inactive, "bg-secondary" }
        };
    }
    
    private RenderFragment<Customer> GetActionsTemplate()
    {
        return customer => @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-info" 
                    title="檢視詳細資料"
                    @onclick="() => ShowCustomerDetail(customer)">
                <i class="fas fa-eye"></i>
            </button>
            <button class="btn btn-outline-primary" 
                    title="編輯客戶"
                    @onclick="() => NavigateToEdit(customer.Id)">
                <i class="fas fa-edit"></i>
            </button>
            <button class="btn btn-outline-danger" 
                    title="刪除客戶"
                    @onclick="() => ConfirmDelete(customer.Id, customer.CompanyName)">
                <i class="fas fa-trash"></i>
            </button>
        </div>;
    }
    
    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            ClearMessages();
            
            allCustomers = await CustomerService.GetAllAsync();
            ApplyFilters();
        }
        catch (Exception)
        {
            errorMessage = "載入客戶資料時發生錯誤，請稍後再試。";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void ApplyFilters()
    {
        customers = allCustomers;
        
        // 搜索過濾
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLower().Trim();
            customers = customers.Where(c => 
                c.CustomerCode.ToLower().Contains(term) || 
                c.CompanyName.ToLower().Contains(term) ||
                (c.ContactPerson?.ToLower().Contains(term) ?? false)
            ).ToList();
        }
        
        // 狀態過濾
        if (!string.IsNullOrWhiteSpace(selectedStatus) && Enum.TryParse<EntityStatus>(selectedStatus, out var status))
        {
            customers = customers.Where(c => c.Status == status).ToList();
        }
    }
    
    private async Task OnSearchTermChanged(string newSearchTerm)
    {
        searchTerm = newSearchTerm;
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSearchSubmit(string searchValue)
    {
        searchTerm = searchValue;
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }
    
    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedStatus = string.Empty;
        ApplyFilters();
        StateHasChanged();
    }
    
    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/customers/create");
    }
    
    private void NavigateToEdit(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}/edit");
    }
    
    private async Task ConfirmDelete(int customerId, string companyName)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"確定要刪除客戶「{companyName}」嗎？此操作無法復原。");
        
        if (confirmed)
        {
            try
            {
                var result = await CustomerService.DeleteAsync(customerId);
                
                if (result.IsSuccess)
                {
                    successMessage = "客戶刪除成功！";
                    await LoadDataAsync();
                }
                else
                {
                    errorMessage = $"客戶刪除失敗: {result.ErrorMessage}";
                }
            }
            catch (Exception)
            {
                errorMessage = "刪除客戶時發生錯誤，請稍後再試。";
            }
        }
    }
    
    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }
    
    private void ClearError() => errorMessage = string.Empty;
    private void ClearSuccess() => successMessage = string.Empty;
    
    private string GetStatusFilterText(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Active => "啟用",
            EntityStatus.Inactive => "停用",
            _ => status.ToString()
        };
    }
    
    // 模態相關方法
    private async Task ShowCustomerDetail(Customer customer)
    {
        selectedCustomer = customer;
        await customerDetailModal.ShowAsync();
    }
    
    private void OnModalClose()
    {
        selectedCustomer = null;
        StateHasChanged();
    }
}
