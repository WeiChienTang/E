@page "/customer-types"

@inject ICustomerTypeService CustomerTypeService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="CustomerType" 
                        TService="ICustomerTypeService"
                        Service="@CustomerTypeService"
                        EntityBasePath="/customer-types"                          
                        PageTitle="客戶類型"
                        PageSubtitle="管理客戶分類類型設定"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        DataLoader="@LoadCustomerTypesAsync"
                        FilterApplier="@ApplyCustomerTypeFilters"
                        EntityName="客戶類型"
                        GetEntityDisplayName="@(customerType => customerType.TypeName)"
                        RequiredPermission="CustomerType.Read"
                        OnAddClick="@ShowAddModal"
                        OnRowClick="@ShowEditModal"
                        @ref="indexComponent" />

@* 客戶類型編輯 Modal *@
<CustomerTypeEditModalComponent IsVisible="@showEditModal"
                               IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                               CustomerTypeId="@editingCustomerTypeId"
                               OnCustomerTypeSaved="@OnCustomerTypeSaved"
                               OnCancel="@OnModalCancel" />

@code {
    // 組件參考
    private GenericIndexPageComponent<CustomerType, ICustomerTypeService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingCustomerTypeId = null;

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitialized),
                GetType(),
                additionalData: "初始化客戶類型頁面失敗"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("客戶管理", "/customers"),
                new("客戶類型管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化麵包屑導航失敗"
            );
        }
    }

    // 載入客戶類型資料
    private async Task<List<CustomerType>> LoadCustomerTypesAsync()
    {
        try
        {
            return await CustomerTypeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadCustomerTypesAsync),
                GetType(),
                additionalData: "載入客戶類型資料失敗"
            );
            return new List<CustomerType>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("TypeName", "類型名稱", "輸入類型名稱搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("類型名稱", nameof(CustomerType.TypeName)),
                TableColumnDefinition.Text("描述", nameof(CustomerType.Remarks)),
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
        }
    }

    // 自定義篩選邏輯
    private IQueryable<CustomerType> ApplyCustomerTypeFilters(SearchFilterModel searchModel, IQueryable<CustomerType> query)
    {
        try
        {
            // 類型名稱篩選
            var typeNameFilter = searchModel.GetFilterValue("TypeName")?.ToString();
            if (!string.IsNullOrWhiteSpace(typeNameFilter))
            {
                query = query.Where(ct => 
                    ct.TypeName.Contains(typeNameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 狀態篩選
            var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
            {
                query = query.Where(ct => ct.Status == status);
            }
            
            return query.OrderBy(ct => ct.TypeName);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplyCustomerTypeFilters),
                GetType(),
                additionalData: "套用客戶類型篩選失敗"
            );
            return query.OrderBy(ct => ct.TypeName);
        }
    }

    // ===== Modal 相關方法 =====

    private async Task ShowAddModal()
    {
        try
        {
            editingCustomerTypeId = null;
            showEditModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowAddModal), GetType());
        }
    }

    private async Task ShowEditModal(CustomerType customerType)
    {
        try
        {
            if (customerType?.Id != null)
            {
                editingCustomerTypeId = customerType.Id;
                showEditModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowEditModal), GetType());
        }
    }

    private async Task OnCustomerTypeSaved(CustomerType savedCustomerType)
    {
        try
        {
            // 關閉 Modal
            showEditModal = false;
            editingCustomerTypeId = null;
            
            // 重新載入資料
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnCustomerTypeSaved), GetType());
        }
    }

    private async Task OnModalCancel()
    {
        try
        {
            showEditModal = false;
            editingCustomerTypeId = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnModalCancel), GetType());
        }
    }
}
