@page "/customer-types"
@inject ICustomerTypeService CustomerTypeService
@rendermode InteractiveServer
@inject INotificationService NotificationService

<GenericIndexPageComponent TEntity="CustomerType" 
                        TService="ICustomerTypeService"
                        Service="@CustomerTypeService"
                        EntityBasePath="/customer-types"                          
                        PageTitle="客戶類型"
                        PageSubtitle="管理客戶分類類型設定"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        DataLoader="@LoadCustomerTypesAsync"
                        FilterApplier="@ApplyCustomerTypeFilters"
                        EntityName="客戶類型"
                        GetEntityDisplayName="@(customerType => customerType.TypeName)"
                        RequiredPermission="CustomerType.Read"
                        OnAddClick="@modalHandler.ShowAddModalAsync"
                        OnRowClick="@modalHandler.ShowEditModalAsync"
                        @ref="indexComponent" />

@* 客戶類型編輯 Modal *@
<CustomerTypeEditModalComponent IsVisible="@showEditModal"
                               IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                               CustomerTypeId="@editingCustomerTypeId"
                               OnCustomerTypeSaved="@modalHandler.OnEntitySavedAsync"
                               OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<CustomerType, ICustomerTypeService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingCustomerTypeId = null;
    
    // Modal 處理器
    private ModalHandler<CustomerType, GenericIndexPageComponent<CustomerType, ICustomerTypeService>> modalHandler = default!;
    
    // 欄位配置
    private CustomerTypeFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<CustomerType, GenericIndexPageComponent<CustomerType, ICustomerTypeService>>(
                id => editingCustomerTypeId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 建立欄位配置（傳遞 NotificationService）
            fieldConfiguration = new CustomerTypeFieldConfiguration(NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化客戶類型頁面失敗");
            await NotificationService.ShowErrorAsync("初始化客戶類型頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("客戶管理", "/customers"),
                new("客戶類型管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入客戶類型資料
    private async Task<List<CustomerType>> LoadCustomerTypesAsync()
    {
        try
        {
            return await CustomerTypeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCustomerTypesAsync), GetType(), additionalData: "載入客戶類型資料失敗");
            await NotificationService.ShowErrorAsync("載入客戶類型資料失敗");
            // 設定安全的預設值
            return new List<CustomerType>();
        }
    }

    private IQueryable<CustomerType> ApplyCustomerTypeFilters(SearchFilterModel searchModel, IQueryable<CustomerType> query)
    {
        try
        {
            return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyCustomerTypeFilters), GetType());
        }
        catch (Exception ex)
        {
            // 記錄錯誤並回傳安全的預設查詢
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplyCustomerTypeFilters), GetType(), additionalData: "客戶類型篩選器應用失敗");
            _ = NotificationService.ShowErrorAsync("篩選條件應用失敗，已顯示全部資料");
            
            // 回傳基本排序的查詢，確保頁面仍能正常運作
            return query.OrderBy(ct => ct.Code);
        }
    }
}
