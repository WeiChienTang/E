@page "/customers"
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Services.Interfaces
@using Microsoft.AspNetCore.Components.Web
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.Alerts
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Loading
@using ERPCore2.Components.Shared.Forms
@using static ERPCore2.Components.Shared.Buttons.ButtonComponent
@using static ERPCore2.Components.Shared.Alerts.AlertComponent
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>客戶管理</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <PageHeaderComponent Title="客戶管理" IconClass="fas fa-users">
                    <Actions>
                        <ButtonComponent Text="新增客戶" 
                                       Variant="ButtonVariant.Primary" 
                                       IconClass="fas fa-plus" 
                                       OnClick="NavigateToCreate" />
                    </Actions>
                </PageHeaderComponent>                <div class="card-body">
                    <!-- 搜索區域 -->
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <SearchComponent Placeholder="搜索客戶代碼或公司名稱..." 
                                           SearchTerm="@searchTerm"
                                           SearchTermChanged="@OnSearchTermChanged"
                                           OnSearch="@OnSearchSubmit" />
                        </div>                        <div class="col-md-4">
                            <SelectComponent TValue="string"
                                           Id="statusFilter" 
                                           Label=""
                                           @bind-Value="selectedStatus"
                                           Items="@(Enum.GetValues<EntityStatus>().Cast<object>())"
                                           GetItemText="@(item => GetStatusFilterText((EntityStatus)item))"
                                           GetItemValue="@(item => item.ToString())"
                                           EmptyOptionText="全部狀態" />
                        </div>
                        <div class="col-md-4">
                            <ButtonComponent Text="清除篩選" 
                                           IconClass="fas fa-times" 
                                           OnClick="ClearFilters" />
                        </div>
                    </div><!-- 訊息顯示區域 -->
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <AlertComponent Type="AlertType.Danger" 
                                      Message="@errorMessage" 
                                      IconClass="fas fa-exclamation-triangle"
                                      OnDismiss="ClearError" />
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <AlertComponent Type="AlertType.Success" 
                                      Message="@successMessage" 
                                      IconClass="fas fa-check-circle"
                                      OnDismiss="ClearSuccess" />
                    }                    <!-- 載入中指示器 -->
                    <LoadingComponent IsLoading="@isLoading" 
                                    LoadingText="載入客戶資料中..." 
                                    ShowText="true" />
                      @if (!isLoading)
                    {
                        <!-- 客戶列表 -->
                        <TableComponent TItem="Customer" 
                                      Items="customers"
                                      Headers="tableHeaders"
                                      ShowActions="true"
                                      ActionsHeader="操作"
                                      EmptyMessage="沒有找到符合條件的客戶資料">
                            <RowTemplate Context="customer">
                                <td>
                                    <strong>@customer.CustomerCode</strong>
                                </td>
                                <td>@customer.CompanyName</td>
                                <td>@(customer.ContactPerson ?? "-")</td>
                                <td>@(customer.TaxNumber ?? "-")</td>
                                <td>@(customer.CustomerType?.TypeName ?? "-")</td>
                                <td>@(customer.IndustryType?.IndustryTypeName ?? "-")</td>
                                <td>
                                    <StatusBadgeComponent Status="customer.Status" />
                                </td>
                                <td>@customer.CreatedAt.ToString("yyyy/MM/dd")</td>
                            </RowTemplate>
                            <ActionsTemplate Context="customer">
                                <div class="btn-group" role="group">                                    
                                    <ButtonComponent Text="" 
                                        Variant="ButtonVariant.OutlinePrimary" 
                                        Size="ButtonSize.Small"
                                        IconClass="fas fa-eye" 
                                        Title="檢視"
                                        OnClick="() => NavigateToView(customer.Id)" />       

                                    <ButtonComponent Text="" 
                                        Variant="ButtonVariant.OutlineWarning" 
                                        Size="ButtonSize.Small"
                                        IconClass="fas fa-edit" 
                                        Title="編輯"
                                        OnClick="() => NavigateToEdit(customer.Id)" />       

                                    <ButtonComponent Text="" 
                                        Variant="ButtonVariant.OutlineDanger" 
                                        Size="ButtonSize.Small"
                                        IconClass="fas fa-trash" 
                                        Title="刪除"
                                        OnClick="() => ConfirmDelete(customer.Id, customer.CompanyName)" />
                                </div>
                            </ActionsTemplate>
                        </TableComponent>
                    }
                </div>
            </div>
        </div>    </div>
</div>

@code {
    private List<Customer> customers = new();
    private List<Customer> allCustomers = new();
    
    private string searchTerm = string.Empty;
    private string selectedStatus = string.Empty;
    
    private bool isLoading = true;    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    
    private List<string> tableHeaders = new()
    {
        "客戶代碼", "公司名稱", "聯絡人", "統一編號", 
        "客戶類型", "行業別", "狀態", "建立日期"
    };
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    
    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            ClearMessages();
            
            allCustomers = await CustomerService.GetAllAsync();
            ApplyFilters();
        }        catch (Exception)
        {
            errorMessage = "載入客戶資料時發生錯誤，請稍後再試。";
            // 可以考慮添加 logger 注入來記錄錯誤
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void ApplyFilters()
    {
        customers = allCustomers;
        
        // 搜索過濾
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLower().Trim();
            customers = customers.Where(c => 
                c.CustomerCode.ToLower().Contains(term) || 
                c.CompanyName.ToLower().Contains(term) ||
                (c.ContactPerson?.ToLower().Contains(term) ?? false)
            ).ToList();
        }
        
        // 狀態過濾
        if (!string.IsNullOrWhiteSpace(selectedStatus) && Enum.TryParse<EntityStatus>(selectedStatus, out var status))
        {
            customers = customers.Where(c => c.Status == status).ToList();
        }
    }
      private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ApplyFilters();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnSearchTermChanged(string newSearchTerm)
    {
        searchTerm = newSearchTerm;
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnSearchSubmit(string searchValue)
    {
        searchTerm = searchValue;
        ApplyFilters();
        await InvokeAsync(StateHasChanged);
    }
      private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedStatus = string.Empty;
        ApplyFilters();
        StateHasChanged();
    }
    
    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/customers/create");
    }
    
    private void NavigateToView(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}");
    }
    
    private void NavigateToEdit(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}/edit");
    }
    
    private async Task ConfirmDelete(int customerId, string companyName)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"確定要刪除客戶「{companyName}」嗎？此操作無法復原。");
        
        if (confirmed)
        {
            try
            {
                var result = await CustomerService.DeleteAsync(customerId);
                
                if (result.IsSuccess)
                {
                    successMessage = "客戶刪除成功！";
                    await LoadDataAsync();
                }
                else
                {
                    errorMessage = $"客戶刪除失敗: {result.ErrorMessage}";
                }
            }            catch (Exception)
            {
                errorMessage = "刪除客戶時發生錯誤，請稍後再試。";
            }
        }
    }
    
    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }
    
    private void ClearError() => errorMessage = string.Empty;
    private void ClearSuccess() => successMessage = string.Empty;
    
    // Watch for search term changes
    private string previousSearchTerm = string.Empty;
    private string previousStatus = string.Empty;
      protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            if (searchTerm != previousSearchTerm || selectedStatus != previousStatus)
            {
                previousSearchTerm = searchTerm;
                previousStatus = selectedStatus;
                
                ApplyFilters();
                StateHasChanged();
            }
        }
    }
    
    private string GetStatusFilterText(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Active => "啟用",
            EntityStatus.Inactive => "停用",
            _ => status.ToString()
        };
    }
}
