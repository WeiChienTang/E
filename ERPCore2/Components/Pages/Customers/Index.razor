@page "/customers"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Services.Models
@inject CustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>客戶管理</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-users me-2"></i>客戶管理
                    </h3>
                    <button class="btn btn-primary" @onclick="NavigateToCreate">
                        <i class="fas fa-plus me-2"></i>新增客戶
                    </button>
                </div>
                
                <div class="card-body">
                    <!-- 搜索區域 -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <div class="input-group">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                                <input type="text" class="form-control" placeholder="搜索客戶代碼或公司名稱..." 
                                       @bind="searchTerm" @bind:event="oninput" @onkeypress="OnSearchKeyPress" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedCustomerTypeId">
                                <option value="">全部客戶類型</option>
                                @foreach (var type in customerTypes)
                                {
                                    <option value="@type.CustomerTypeId">@type.TypeName</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedIndustryId">
                                <option value="">全部行業別</option>
                                @foreach (var industry in industries)
                                {
                                    <option value="@industry.IndustryId">@industry.IndustryName</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" @bind="selectedStatus">
                                <option value="">全部狀態</option>
                                <option value="@EntityStatus.Active">啟用</option>
                                <option value="@EntityStatus.Inactive">停用</option>
                            </select>
                        </div>
                    </div>

                    <!-- 載入中指示器 -->
                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">載入中...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- 客戶列表 -->
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th>客戶代碼</th>
                                        <th>公司名稱</th>
                                        <th>聯絡人</th>
                                        <th>統一編號</th>
                                        <th>客戶類型</th>
                                        <th>行業別</th>
                                        <th>狀態</th>
                                        <th>建立日期</th>
                                        <th>操作</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (filteredCustomers.Any())
                                    {
                                        @foreach (var customer in paginatedCustomers)
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@customer.CustomerCode</strong>
                                                </td>
                                                <td>@customer.CompanyName</td>
                                                <td>@(customer.ContactPerson ?? "-")</td>
                                                <td>@(customer.TaxNumber ?? "-")</td>
                                                <td>@(customer.CustomerType?.TypeName ?? "-")</td>
                                                <td>@(customer.Industry?.IndustryName ?? "-")</td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(customer.Status)">
                                                        @GetStatusText(customer.Status)
                                                    </span>
                                                </td>
                                                <td>@customer.CreatedDate.ToString("yyyy/MM/dd")</td>
                                                <td>
                                                    <div class="btn-group" role="group">
                                                        <button type="button" class="btn btn-sm btn-outline-primary" 
                                                                @onclick="() => NavigateToView(customer.CustomerId)" 
                                                                title="檢視">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-sm btn-outline-warning" 
                                                                @onclick="() => NavigateToEdit(customer.CustomerId)" 
                                                                title="編輯">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        @if (customer.Status == EntityStatus.Active)
                                                        {
                                                            <button type="button" class="btn btn-sm btn-outline-secondary" 
                                                                    @onclick="() => ToggleStatus(customer.CustomerId, EntityStatus.Inactive)" 
                                                                    title="停用">
                                                                <i class="fas fa-pause"></i>
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <button type="button" class="btn btn-sm btn-outline-success" 
                                                                    @onclick="() => ToggleStatus(customer.CustomerId, EntityStatus.Active)" 
                                                                    title="啟用">
                                                                <i class="fas fa-play"></i>
                                                            </button>
                                                        }
                                                        <button type="button" class="btn btn-sm btn-outline-danger" 
                                                                @onclick="() => ConfirmDelete(customer.CustomerId, customer.CompanyName)" 
                                                                title="刪除">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="9" class="text-center py-4 text-muted">
                                                <i class="fas fa-inbox fa-2x mb-2"></i>
                                                <br />
                                                沒有找到符合條件的客戶資料
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- 分頁 -->
                        @if (totalPages > 1)
                        {
                            <nav aria-label="客戶列表分頁">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)">
                                            <i class="fas fa-angle-double-left"></i>
                                        </button>
                                    </li>
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                            <i class="fas fa-angle-left"></i>
                                        </button>
                                    </li>
                                    
                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                    {
                                        int pageNum = i;
                                        <li class="page-item @(currentPage == pageNum ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(pageNum)">
                                                @pageNum
                                            </button>
                                        </li>
                                    }
                                    
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                            <i class="fas fa-angle-right"></i>
                                        </button>
                                    </li>
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(totalPages)" disabled="@(currentPage == totalPages)">
                                            <i class="fas fa-angle-double-right"></i>
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                            
                            <div class="text-center mt-3">
                                <small class="text-muted">
                                    顯示第 @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, totalRecords) 筆，
                                    共 @totalRecords 筆資料
                                </small>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 載入 Font Awesome 圖示 -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

@code {
    private List<Customer> customers = new();
    private List<Customer> filteredCustomers = new();
    private List<Customer> paginatedCustomers = new();
    private List<CustomerType> customerTypes = new();
    private List<Industry> industries = new();
    
    private string searchTerm = string.Empty;
    private string selectedCustomerTypeId = string.Empty;
    private string selectedIndustryId = string.Empty;
    private string selectedStatus = string.Empty;
    
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;
    private int totalPages = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
    
    private async Task LoadDataAsync()
    {
        isLoading = true;        try
        {
            var customerTask = CustomerService.GetAllWithDetailsAsync();
            var customerTypesTask = CustomerService.GetAllCustomerTypesAsync();
            var industriesTask = CustomerService.GetAllIndustriesAsync();
            
            await Task.WhenAll(customerTask, customerTypesTask, industriesTask);
            
            customers = await customerTask;
            customerTypes = await customerTypesTask;
            industries = await industriesTask;
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            // 處理錯誤
            await JSRuntime.InvokeVoidAsync("alert", $"載入資料時發生錯誤: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void ApplyFilters()
    {
        filteredCustomers = customers;
        
        // 搜索過濾
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLower();
            filteredCustomers = filteredCustomers.Where(c => 
                c.CustomerCode.ToLower().Contains(term) || 
                c.CompanyName.ToLower().Contains(term) ||
                (c.ContactPerson?.ToLower().Contains(term) ?? false)
            ).ToList();
        }
        
        // 客戶類型過濾
        if (!string.IsNullOrWhiteSpace(selectedCustomerTypeId) && int.TryParse(selectedCustomerTypeId, out var typeId))
        {
            filteredCustomers = filteredCustomers.Where(c => c.CustomerTypeId == typeId).ToList();
        }
        
        // 行業別過濾
        if (!string.IsNullOrWhiteSpace(selectedIndustryId) && int.TryParse(selectedIndustryId, out var industryId))
        {
            filteredCustomers = filteredCustomers.Where(c => c.IndustryId == industryId).ToList();
        }
        
        // 狀態過濾
        if (!string.IsNullOrWhiteSpace(selectedStatus) && Enum.TryParse<EntityStatus>(selectedStatus, out var status))
        {
            filteredCustomers = filteredCustomers.Where(c => c.Status == status).ToList();
        }
        
        // 計算分頁
        totalRecords = filteredCustomers.Count;
        totalPages = (int)Math.Ceiling((double)totalRecords / pageSize);
        currentPage = Math.Min(currentPage, Math.Max(1, totalPages));
        
        // 分頁資料
        paginatedCustomers = filteredCustomers
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }
      private void OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            ApplyFilters();
            StateHasChanged();
        }
    }
    
    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            ApplyFilters();
            StateHasChanged();
        }
    }
    
    private string GetStatusBadgeClass(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Active => "bg-success",
            EntityStatus.Inactive => "bg-warning",
            EntityStatus.Deleted => "bg-danger",
            _ => "bg-secondary"
        };
    }
    
    private string GetStatusText(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Active => "啟用",
            EntityStatus.Inactive => "停用",
            EntityStatus.Deleted => "已刪除",
            _ => "未知"
        };
    }
    
    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/customers/create");
    }
    
    private void NavigateToView(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}");
    }
    
    private void NavigateToEdit(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}/edit");
    }
    
    private async Task ToggleStatus(int customerId, EntityStatus newStatus)
    {
        try
        {
            ServiceResult result;
            
            if (newStatus == EntityStatus.Active)
            {
                result = await CustomerService.ActivateAsync(customerId, "系統管理員");
            }
            else
            {
                result = await CustomerService.DeactivateAsync(customerId, "系統管理員");
            }
            
            if (result.IsSuccess)
            {
                await LoadDataAsync();
                await JSRuntime.InvokeVoidAsync("alert", "狀態更新成功！");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"狀態更新失敗: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"狀態更新時發生錯誤: {ex.Message}");
        }
    }
    
    private async Task ConfirmDelete(int customerId, string companyName)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"確定要刪除客戶「{companyName}」嗎？此操作無法復原。");
        
        if (confirmed)
        {
            try
            {
                var result = await CustomerService.DeleteAsync(customerId);
                
                if (result.IsSuccess)
                {
                    await LoadDataAsync();
                    await JSRuntime.InvokeVoidAsync("alert", "客戶刪除成功！");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"客戶刪除失敗: {result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除客戶時發生錯誤: {ex.Message}");
            }
        }
    }
    
    // 監聽篩選條件變化
    private string previousCustomerTypeId = string.Empty;
    private string previousIndustryId = string.Empty;
    private string previousStatus = string.Empty;
    private string previousSearchTerm = string.Empty;
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            // 檢查篩選條件是否有變化
            if (selectedCustomerTypeId != previousCustomerTypeId ||
                selectedIndustryId != previousIndustryId ||
                selectedStatus != previousStatus ||
                searchTerm != previousSearchTerm)
            {
                previousCustomerTypeId = selectedCustomerTypeId;
                previousIndustryId = selectedIndustryId;
                previousStatus = selectedStatus;
                previousSearchTerm = searchTerm;
                
                currentPage = 1;
                ApplyFilters();
                StateHasChanged();
            }
        }
    }
}