@page "/customers"
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using ERPCore2.Services.Customers.Interfaces

<PageTitle>客戶管理</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-users me-2"></i>客戶管理
                    </h3>
                    <button class="btn btn-primary" @onclick="NavigateToCreate">
                        <i class="fas fa-plus me-2"></i>新增客戶
                    </button>
                </div>
                
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">載入中...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- 搜尋篩選 -->
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fas fa-search"></i>
                                    </span>
                                    <input type="text" class="form-control" placeholder="搜尋客戶代碼或公司名稱..." 
                                           @bind="searchTerm" @onkeyup="OnSearchTermChanged" />
                                </div>
                            </div>                            <div class="col-md-3">
                                <select class="form-select" @onchange="OnStatusChanged" value="@selectedStatus">
                                    <option value="">所有狀態</option>
                                    <option value="Active">使用中</option>
                                    <option value="Inactive">停用</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-outline-secondary" @onclick="ResetFilters">
                                    <i class="fas fa-undo me-2"></i>重設
                                </button>
                            </div>
                        </div>

                        @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                            </div>
                        }

                        <!-- 客戶列表 -->
                        @if (customers.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>客戶代碼</th>
                                            <th>公司名稱</th>
                                            <th>聯絡人</th>
                                            <th>統一編號</th>
                                            <th>狀態</th>
                                            <th>建立日期</th>
                                            <th class="text-center">操作</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var customer in customers)
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@customer.CustomerCode</strong>
                                                </td>
                                                <td>@customer.CompanyName</td>
                                                <td>@customer.ContactPerson</td>
                                                <td>@customer.TaxNumber</td>
                                                <td>
                                                    @if (customer.Status == EntityStatus.Active)
                                                    {
                                                        <span class="badge bg-success">使用中</span>
                                                    }
                                                    else if (customer.Status == EntityStatus.Inactive)
                                                    {
                                                        <span class="badge bg-warning">停用</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-danger">已刪除</span>
                                                    }                                                </td>
                                                <td>@customer.CreatedDate.ToString("yyyy-MM-dd")</td>
                                                <td class="text-center">
                                                    <div class="btn-group" role="group">
                                                        <button class="btn btn-sm btn-outline-info" 
                                                                @onclick="() => NavigateToDetails(customer.CustomerId)"
                                                                title="查看詳細">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-warning" 
                                                                @onclick="() => NavigateToEdit(customer.CustomerId)"
                                                                title="編輯">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        @if (customer.Status != EntityStatus.Deleted)
                                                        {
                                                            <button class="btn btn-sm btn-outline-danger" 
                                                                    @onclick="() => ConfirmDelete(customer)"
                                                                    title="刪除">
                                                                <i class="fas fa-trash"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- 分頁資訊 -->
                            <div class="d-flex justify-content-between align-items-center mt-3">
                                <div>
                                    <small class="text-muted">
                                        共 @totalCustomers 筆客戶資料
                                    </small>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-users fa-3x text-muted mb-3"></i>
                                <h5 class="text-muted">尚無客戶資料</h5>
                                <p class="text-muted">點擊上方「新增客戶」按鈕來建立第一筆客戶資料</p>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 確認刪除模態視窗 -->
@if (showDeleteModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-exclamation-triangle text-warning me-2"></i>確認刪除
                    </h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>確定要刪除客戶「<strong>@customerToDelete?.CompanyName</strong>」嗎？</p>
                    <p class="text-muted small">此操作無法復原。</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">取消</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteCustomer" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        else
                        {
                            <i class="fas fa-trash me-2"></i>
                        }
                        刪除
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- 載入 Font Awesome 圖示 -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

@code {
    private List<Customer> customers = new();
    private List<Customer> allCustomers = new();
    private int totalCustomers = 0;
    
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    
    // 搜尋和篩選
    private string searchTerm = string.Empty;
    private string selectedStatus = string.Empty;
    private System.Timers.Timer? searchTimer;
    
    // 刪除相關
    private bool showDeleteModal = false;
    private bool isDeleting = false;
    private Customer? customerToDelete;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCustomersAsync();
    }
      private async Task LoadCustomersAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            allCustomers = await CustomerService.GetAllAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"載入客戶資料時發生錯誤: {ex.Message}";
            customers = new List<Customer>();
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void ApplyFilters()
    {
        var filteredCustomers = allCustomers.AsEnumerable();
        
        // 狀態篩選
        if (!string.IsNullOrWhiteSpace(selectedStatus))
        {
            if (Enum.TryParse<EntityStatus>(selectedStatus, out var status))
            {
                filteredCustomers = filteredCustomers.Where(c => c.Status == status);
            }
        }
        else
        {
            // 預設不顯示已刪除的客戶
            filteredCustomers = filteredCustomers.Where(c => c.Status != EntityStatus.Deleted);
        }
        
        // 搜尋篩選
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLower();
            filteredCustomers = filteredCustomers.Where(c => 
                (c.CustomerCode?.ToLower().Contains(term) ?? false) ||
                (c.CompanyName?.ToLower().Contains(term) ?? false) ||
                (c.ContactPerson?.ToLower().Contains(term) ?? false)
            );
        }
        
        customers = filteredCustomers.OrderBy(c => c.CustomerCode).ToList();
        totalCustomers = customers.Count;
    }
    
    private void OnSearchTermChanged()
    {
        searchTimer?.Stop();
        searchTimer?.Dispose();
        
        searchTimer = new System.Timers.Timer(300); // 300ms 延遲
        searchTimer.Elapsed += (sender, e) =>
        {
            InvokeAsync(() =>
            {
                ApplyFilters();
                StateHasChanged();
            });
            searchTimer.Stop();
        };
        searchTimer.Start();
    }
    
    private void OnStatusChanged()
    {
        ApplyFilters();
    }
    
    private void ResetFilters()
    {
        searchTerm = string.Empty;
        selectedStatus = string.Empty;
        ApplyFilters();
    }
    
    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/customers/create");
    }
    
    private void NavigateToDetails(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}");
    }
    
    private void NavigateToEdit(int customerId)
    {
        Navigation.NavigateTo($"/customers/{customerId}/edit");
    }
    
    private void ConfirmDelete(Customer customer)
    {
        customerToDelete = customer;
        showDeleteModal = true;
    }
    
    private void CancelDelete()
    {
        customerToDelete = null;
        showDeleteModal = false;
        isDeleting = false;
    }
      private async Task DeleteCustomer()
    {
        if (customerToDelete == null || isDeleting) return;
        
        try
        {
            isDeleting = true;
            
            var result = await CustomerService.DeleteAsync(customerToDelete.CustomerId);
            
            if (result.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", "客戶刪除成功！");
                await LoadCustomersAsync(); // 重新載入列表
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"刪除客戶時發生錯誤: {ex.Message}");
        }
        finally
        {
            CancelDelete();
        }
    }
    
    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}