@page "/customers/create"
@page "/customers/{CustomerId:int}/edit"
@inject ICustomerService CustomerService
@inject IAddressService AddressService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.Alerts
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Loading
@using ERPCore2.Components.Shared.Forms
@using static ERPCore2.Components.Shared.Buttons.ButtonComponent
@using static ERPCore2.Components.Shared.Alerts.AlertComponent
@using static ERPCore2.Components.Shared.Forms.FormSectionComponent
@rendermode InteractiveServer

<PageTitle>@GetPageTitle()</PageTitle>

<link href="~/css/variables.css" rel="stylesheet" />

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">                <PageHeaderComponent Title="@GetPageTitle()" IconClass="@GetPageIcon()">
                    <Actions>
                        <ButtonComponent Text="返回列表" 
                                       Variant="ButtonVariant.OutlineSecondary" 
                                       IconClass="fas fa-arrow-left" 
                                       OnClick="NavigateBack" />
                    </Actions>
                </PageHeaderComponent>
                
                <div class="card-body">
                    <LoadingComponent IsLoading="@isLoading" 
                                    LoadingText="@GetLoadingText()" 
                                    ShowText="true" />
                      @if (!isLoading && !string.IsNullOrWhiteSpace(notFoundMessage))
                    {
                        <AlertComponent Type="AlertType.Warning" 
                                      Message="@notFoundMessage" 
                                      IconClass="fas fa-exclamation-triangle" />
                    }
                    else if (!isLoading)
                    {                        <EditForm Model="@customer" OnValidSubmit="@HandleSubmit">
                            <DataAnnotationsValidator />
                            
                            <!-- 基本資訊區塊 -->
                            <FormSectionComponent Title="基本資訊" 
                                                IconClass="fas fa-info-circle"
                                                SectionType="FormSectionType.Basic"
                                                RequiredFieldsCount="@GetBasicRequiredFieldsCount()"
                                                CompletedFieldsCount="@GetBasicCompletedFieldsCount()">
                                <div class="row">
                                    <div class="col-md-3">
                                        <InputComponent Id="customerCode" 
                                                      Label="客戶代碼" 
                                                      Value="@customer.CustomerCode"
                                                      ValueChanged="@(value => { customer.CustomerCode = value; LogChange("CustomerCode", value); })"
                                                      IsRequired="true" />
                                        <ValidationMessage For="@(() => customer.CustomerCode)" class="text-danger" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <InputComponent Id="companyName" 
                                                      Label="公司名稱" 
                                                      Value="@customer.CompanyName"
                                                      ValueChanged="@(value => { customer.CompanyName = value; LogChange("CompanyName", value); })"
                                                      IsRequired="true" />
                                        <ValidationMessage For="@(() => customer.CompanyName)" class="text-danger" />
                                    </div>
                                    
                                    <div class="col-md-3">
                                        <InputComponent Id="taxNumber" 
                                                      Label="統一編號" 
                                                      Value="@customer.TaxNumber"
                                                      ValueChanged="@(value => { customer.TaxNumber = value; LogChange("TaxNumber", value); })" />
                                        <ValidationMessage For="@(() => customer.TaxNumber)" class="text-danger" />
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-4">
                                        <SelectComponent TValue="int?"
                                                       Id="customerType" 
                                                       Label="客戶類型"
                                                       Value="@customer.CustomerTypeId"
                                                       ValueChanged="@(value => { customer.CustomerTypeId = value; LogChange("CustomerTypeId", value?.ToString() ?? "null"); StateHasChanged(); })"
                                                       Items="customerTypes"
                                                       GetItemText="@(item => ((CustomerType)item).TypeName)"
                                                       GetItemValue="@(item => ((CustomerType)item).CustomerTypeId)"
                                                       EmptyOptionText="請選擇客戶類型..." />
                                        <ValidationMessage For="@(() => customer.CustomerTypeId)" class="text-danger" />
                                    </div>
                                    
                                    <div class="col-md-4">
                                        <SelectComponent TValue="int?"
                                                       Id="industry" 
                                                       Label="行業別"
                                                       Value="@customer.IndustryId"
                                                       ValueChanged="@(value => { customer.IndustryId = value; LogChange("IndustryId", value?.ToString() ?? "null"); StateHasChanged(); })"
                                                       Items="industries"
                                                       GetItemText="@(item => ((Industry)item).IndustryName)"
                                                       GetItemValue="@(item => ((Industry)item).IndustryId)"
                                                       EmptyOptionText="請選擇行業別..." />
                                        <ValidationMessage For="@(() => customer.IndustryId)" class="text-danger" />
                                    </div>
                                    
                                    <div class="col-md-4">
                                        <InputComponent Id="contactPerson" 
                                                      Label="聯絡人" 
                                                      Value="@customer.ContactPerson"
                                                      ValueChanged="@(value => { customer.ContactPerson = value; LogChange("ContactPerson", value); })" />
                                        <ValidationMessage For="@(() => customer.ContactPerson)" class="text-danger" />
                                    </div>
                                </div>                            </FormSectionComponent>
                            
                            <!-- 聯絡資訊區塊 -->
                            <FormSectionComponent Title="聯絡資訊" 
                                                IconClass="fas fa-phone"
                                                SectionType="FormSectionType.Contact"
                                                RequiredFieldsCount="0"
                                                CompletedFieldsCount="@GetContactCompletedFieldsCount()">
                                <div class="row">
                                    <div class="col-md-4">
                                        <InputComponent Id="phone" 
                                                      Label="電話" 
                                                      Value="@GetContactValue("電話")"
                                                      ValueChanged="@(value => UpdateContactValue("電話", value))"
                                                      InputType="tel"
                                                      Placeholder="02-1234-5678" />
                                    </div>
                                    
                                    <div class="col-md-4">
                                        <InputComponent Id="mobile" 
                                                      Label="手機" 
                                                      Value="@GetContactValue("手機")"
                                                      ValueChanged="@(value => UpdateContactValue("手機", value))"
                                                      InputType="tel"
                                                      Placeholder="0912-345-678" />
                                    </div>
                                    
                                    <div class="col-md-4">
                                        <InputComponent Id="fax" 
                                                      Label="傳真" 
                                                      Value="@GetContactValue("傳真")"
                                                      ValueChanged="@(value => UpdateContactValue("傳真", value))"
                                                      InputType="tel"
                                                      Placeholder="02-1234-5679" />
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-6">
                                        <InputComponent Id="email" 
                                                      Label="Email" 
                                                      Value="@GetContactValue("Email")"
                                                      ValueChanged="@(value => UpdateContactValue("Email", value))"
                                                      InputType="email"
                                                      Placeholder="contact@company.com" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <InputComponent Id="website" 
                                                      Label="網站" 
                                                      Value="@GetContactValue("網站")"
                                                      ValueChanged="@(value => UpdateContactValue("網站", value))"
                                                      InputType="url"
                                                      Placeholder="https://www.company.com" />
                                    </div>
                                </div>
                            </FormSectionComponent>
                            
                            @if (IsEditMode)
                            {
                                <!-- 系統資訊區塊 (僅編輯模式顯示) -->
                                <FormSectionComponent Title="系統資訊" 
                                                    IconClass="fas fa-cog"
                                                    SectionType="FormSectionType.System"
                                                    RequiredFieldsCount="1"
                                                    CompletedFieldsCount="@(customer.Status != EntityStatus.Default ? 1 : 0)">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <SelectComponent TValue="EntityStatus"
                                                           Id="status" 
                                                           Label="狀態"
                                                           Value="@customer.Status"
                                                           ValueChanged="@(value => customer.Status = value)"
                                                           Items="@(Enum.GetValues<EntityStatus>().Cast<object>())"
                                                           GetItemText="@(item => GetStatusText((EntityStatus)item))"
                                                           GetItemValue="@(item => item)"
                                                           ShowEmptyOption="false" />
                                            <ValidationMessage For="@(() => customer.Status)" class="text-danger" />
                                        </div>
                                        
                                        <div class="col-md-3">
                                            <InputComponent Id="modifiedBy" 
                                                          Label="修改者" 
                                                          Value="@customer.ModifiedBy"
                                                          ValueChanged="@(value => customer.ModifiedBy = value)" />
                                            <ValidationMessage For="@(() => customer.ModifiedBy)" class="text-danger" />
                                        </div>
                                        
                                        <div class="col-md-3">
                                            <InputComponent Id="createdDate" 
                                                          Label="建立日期" 
                                                          Value="@customer.CreatedDate.ToString("yyyy-MM-dd HH:mm")"
                                                          IsReadOnly="true" />
                                        </div>
                                        
                                        <div class="col-md-3">
                                            <InputComponent Id="createdBy" 
                                                          Label="建立者" 
                                                          Value="@customer.CreatedBy"
                                                          IsReadOnly="true" />
                                        </div>
                                    </div>
                                </FormSectionComponent>
                            }
                            else
                            {
                                <!-- 新增模式的建立者資訊 -->
                                <FormSectionComponent Title="建立資訊" 
                                                    IconClass="fas fa-user-plus"
                                                    SectionType="FormSectionType.System"
                                                    RequiredFieldsCount="0"
                                                    CompletedFieldsCount="1">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <InputComponent Id="createdBy" 
                                                          Label="建立者" 
                                                          Value="@customer.CreatedBy"
                                                          ValueChanged="@(value => customer.CreatedBy = value)"
                                                          IsReadOnly="true" />
                                            <ValidationMessage For="@(() => customer.CreatedBy)" class="text-danger" />
                                        </div>
                                    </div>
                                </FormSectionComponent>
                            }
                            
                            <!-- 地址資訊區塊 -->
                            <FormSectionComponent Title="地址資訊" 
                                                IconClass="fas fa-map-marker-alt"
                                                SectionType="FormSectionType.Address"
                                                RequiredFieldsCount="0"
                                                CompletedFieldsCount="@GetAddressCompletedFieldsCount()">
                                <AddressManagement Addresses="@customerAddresses"
                                                 AddressTypes="@addressTypes"
                                                 AddressesChanged="@AddressesChangedCallback"
                                                 OnAddAddress="@(() => HandleAddAddress())"                                                         
                                                 OnRemoveAddress="HandleRemoveAddress"
                                                 OnSetPrimaryAddress="HandleSetPrimaryAddress"
                                                 OnCopyFromFirstAddress="HandleCopyFromFirstAddress"
                                                 OnAddressTypeChanged="HandleAddressTypeChanged"
                                                 OnPostalCodeChanged="HandlePostalCodeChanged"
                                                 OnCityChanged="HandleCityChanged"
                                                 OnDistrictChanged="HandleDistrictChanged"
                                                 OnAddressChanged="HandleAddressChanged" />
                            </FormSectionComponent>
                              @if (!string.IsNullOrWhiteSpace(errorMessage))
                            {
                                <AlertComponent Type="AlertType.Danger" 
                                              Message="@errorMessage" 
                                              IconClass="fas fa-exclamation-triangle" />
                            }
                            
                            <!-- 統一的提交按鈕區塊 (新增和編輯模式共用) -->
                            <div class="row">
                                <div class="col-12">
                                    <div class="d-flex justify-content-end gap-2 mt-3">
                                        <ButtonComponent Text="取消" 
                                                       Variant="ButtonVariant.OutlineSecondary" 
                                                       IconClass="fas fa-times"
                                                       OnClick="NavigateBack" />
                                                       
                                        <ButtonComponent Text="@GetSubmitButtonText()" 
                                                       Variant="ButtonVariant.Primary" 
                                                       IconClass="@(isSubmitting ? "spinner-border spinner-border-sm" : "fas fa-save")"
                                                       IsDisabled="@isSubmitting"
                                                       IsSubmit="true" />
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 載入 Font Awesome 圖示 -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

@code {
    [Parameter] public int? CustomerId { get; set; }
      private Customer customer = new();
    private List<CustomerType> customerTypes = new();
    private List<Industry> industries = new();
    private List<AddressType> addressTypes = new();
    private List<ContactType> contactTypes = new();
    private List<CustomerAddress> customerAddresses = new();
    private List<CustomerContact> customerContacts = new();
    
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private string notFoundMessage = string.Empty;
    private string customerCode = string.Empty;
    
    // 除錯設定
    private bool enableDebugLog = true; // 可以設為 false 關閉除錯
    
    // 判斷是否為編輯模式
    private bool IsEditMode => CustomerId.HasValue && CustomerId.Value > 0;
    
    // EventCallback for AddressManagement component (新增和編輯模式都可使用)
    private EventCallback<List<CustomerAddress>> AddressesChangedCallback => 
        EventCallback.Factory.Create<List<CustomerAddress>>(this, OnAddressesChanged);
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
      private async Task LoadDataAsync()
    {        try
        {
            // 載入客戶類型、行業別、地址類型和聯絡類型的下拉選項
            customerTypes = await CustomerService.GetCustomerTypesAsync();
            industries = await CustomerService.GetIndustriesAsync();
            addressTypes = await CustomerService.GetAddressTypesAsync();
            contactTypes = await CustomerService.GetContactTypesAsync();
            
            if (IsEditMode)
            {
                // 編輯模式：載入現有客戶資料和地址
                await LoadExistingCustomerAsync();
            }
            else
            {
                // 新增模式：初始化預設地址
                InitializeDefaultAddresses();
                InitializeNewCustomer();
            }
            
            if (enableDebugLog)
            {
                Console.WriteLine("=== 載入資料後的除錯資訊 ===");
                Console.WriteLine($"IsEditMode: {IsEditMode}");
                Console.WriteLine($"CustomerId: {CustomerId}");
                Console.WriteLine($"CustomerTypes count: {customerTypes.Count}");
                Console.WriteLine($"Industries count: {industries.Count}");                Console.WriteLine($"ContactTypes count: {contactTypes.Count}");
                Console.WriteLine($"CustomerAddresses count: {customerAddresses.Count}");
                Console.WriteLine($"CustomerContacts count: {customerContacts.Count}");
                LogCustomerState("初始化完成");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"載入資料時發生錯誤: {ex.Message}";
            Console.WriteLine($"LoadDataAsync Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }    private async Task LoadExistingCustomerAsync()
    {
        if (!CustomerId.HasValue) return;
        
        var existingCustomer = await CustomerService.GetByIdAsync(CustomerId.Value);
        
        if (existingCustomer == null)
        {
            notFoundMessage = "找不到指定的客戶資料";
            return;
        }
        
        // 填入現有資料
        customerCode = existingCustomer.CustomerCode;
        customer = existingCustomer;
        customer.ModifiedBy = "系統管理員"; // 可以從認證系統獲取
          // 載入客戶地址資料
        await LoadCustomerAddressesAsync();
        
        // 載入客戶聯絡資料
        await LoadCustomerContactsAsync();
    }
    
    private async Task LoadCustomerAddressesAsync()
    {        try
        {
            if (CustomerId.HasValue)
            {
                // 載入客戶的地址資料
                var addresses = await AddressService.GetAddressesByCustomerIdAsync(CustomerId.Value);
                customerAddresses = addresses?.ToList() ?? new List<CustomerAddress>();
                
                // 如果沒有地址，初始化一個預設地址
                if (!customerAddresses.Any())
                {
                    InitializeDefaultAddresses();
                }
                
                if (enableDebugLog)
                {
                    Console.WriteLine($"載入了 {customerAddresses.Count} 個客戶地址");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入客戶地址時發生錯誤: {ex.Message}");
            // 如果載入失敗，初始化預設地址
            InitializeDefaultAddresses();        }
    }
    
    private async Task LoadCustomerContactsAsync()
    {
        try
        {
            if (CustomerId.HasValue)
            {
                // 載入客戶的聯絡資料
                var contacts = await CustomerService.GetCustomerContactsAsync(CustomerId.Value);
                customerContacts = contacts?.ToList() ?? new List<CustomerContact>();
                
                if (enableDebugLog)
                {
                    Console.WriteLine($"載入了 {customerContacts.Count} 個客戶聯絡資料");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入客戶聯絡資料時發生錯誤: {ex.Message}");
            // 如果載入失敗，初始化空的聯絡資料
            customerContacts = new List<CustomerContact>();
        }
    }
    
    private void InitializeNewCustomer()
    {
        // 確保所有字串屬性都有初始值，避免 null
        customer.CustomerCode = customer.CustomerCode ?? string.Empty;
        customer.CompanyName = customer.CompanyName ?? string.Empty;
        customer.ContactPerson = customer.ContactPerson ?? string.Empty;
        customer.TaxNumber = customer.TaxNumber ?? string.Empty;
        customer.CreatedBy = customer.CreatedBy ?? "系統管理員";
        customer.CreatedDate = DateTime.Now;
        customer.Status = ERPCore2.Data.Enums.EntityStatus.Active;
    }
    
    private void InitializeDefaultAddresses()
    {
        customerAddresses.Clear();
        
        // 尋找公司地址類型
        var companyAddressType = addressTypes.FirstOrDefault(at => at.TypeName.Contains("公司"));
        
        // 如果找不到公司地址類型，使用第一個可用的類型
        if (companyAddressType == null && addressTypes.Any())
            companyAddressType = addressTypes.First();
        
        // 新增預設公司地址
        if (companyAddressType != null)
        {
            customerAddresses.Add(new CustomerAddress
            {
                AddressTypeId = companyAddressType.AddressTypeId,
                IsPrimary = true,
                Status = ERPCore2.Data.Enums.EntityStatus.Active,
                PostalCode = string.Empty,
                City = string.Empty,
                District = string.Empty,
                Address = string.Empty
            });
        }
        
        if (enableDebugLog)
        {
            Console.WriteLine($"初始化了 {customerAddresses.Count} 個預設地址 (公司地址)");
        }
    }
    
    private async Task HandleSubmit()
    {
        if (isSubmitting) return;
        
        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;
              if (enableDebugLog)
            {
                LogCustomerState("表單提交前");
                Console.WriteLine($"準備提交的地址數量: {customerAddresses.Count}");
                Console.WriteLine($"準備提交的聯絡資料數量: {customerContacts.Count}");
            }
            
            ServiceResult result;
              if (IsEditMode)
            {
                // 編輯模式：更新客戶資料、地址和聯絡資料
                customer.CustomerAddresses = customerAddresses;
                customer.CustomerContacts = customerContacts;
                result = await CustomerService.UpdateAsync(customer);
                
                // 如果有地址資料，同時更新地址
                if (result.IsSuccess && customerAddresses.Any())
                {
                    try
                    {
                        await AddressService.UpdateCustomerAddressesAsync(customer.CustomerId, customerAddresses);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"更新客戶地址時發生錯誤: {ex.Message}");
                        // 地址更新失敗不影響客戶資料更新成功的結果
                    }
                }
                
                // 如果有聯絡資料，同時更新聯絡資料
                if (result.IsSuccess && customerContacts.Any())
                {
                    try
                    {
                        await CustomerService.UpdateCustomerContactsAsync(customer.CustomerId, customerContacts);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"更新客戶聯絡資料時發生錯誤: {ex.Message}");
                        // 聯絡資料更新失敗不影響客戶資料更新成功的結果
                    }
                }
            }
            else
            {
                // 新增模式：將地址和聯絡資料加入到客戶物件中
                customer.CustomerAddresses = customerAddresses;
                customer.CustomerContacts = customerContacts;
                result = await CustomerService.CreateAsync(customer);
            }
            
            if (result.IsSuccess)
            {
                var message = IsEditMode ? "客戶更新成功！" : "客戶新增成功！";
                await JSRuntime.InvokeVoidAsync("alert", message);
                Navigation.NavigateTo("/customers");
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            var action = IsEditMode ? "更新" : "新增";
            errorMessage = $"{action}客戶時發生錯誤: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
    // 地址管理事件處理方法 (新增和編輯模式都可使用)
    private Task HandleAddAddress()
    {
        try
        {
            var newAddress = new CustomerAddress
            {
                CustomerId = customer.CustomerId,
                Status = EntityStatus.Active,
                IsPrimary = customerAddresses.Count == 0,
                AddressTypeId = GetDefaultAddressTypeId(customerAddresses.Count),
                PostalCode = string.Empty,
                City = string.Empty,
                District = string.Empty,
                Address = string.Empty
            };
            
            // 對於新建客戶，只加到本地集合
            customerAddresses.Add(newAddress);
            
            if (enableDebugLog)
            {
                Console.WriteLine($"新增地址，目前數量: {customerAddresses.Count}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"新增地址時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleRemoveAddress(int index)
    {
        try
        {
            if (customerAddresses.Count > 1 && index < customerAddresses.Count)
            {
                var removedAddress = customerAddresses[index];
                customerAddresses.RemoveAt(index);
                
                // 如果刪除的是主要地址，將第一個地址設為主要
                if (removedAddress.IsPrimary && customerAddresses.Any())
                {
                    customerAddresses[0].IsPrimary = true;
                }
                
                if (enableDebugLog)
                {
                    Console.WriteLine($"移除地址，目前數量: {customerAddresses.Count}");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"移除地址時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleSetPrimaryAddress(int index)
    {
        try
        {
            if (index >= 0 && index < customerAddresses.Count)
            {
                // 更新本地集合
                foreach (var addr in customerAddresses)
                {
                    addr.IsPrimary = false;
                }
                customerAddresses[index].IsPrimary = true;
                
                if (enableDebugLog)
                {
                    Console.WriteLine($"設定主要地址: 索引 {index}");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"設定主要地址時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleCopyFromFirstAddress((int targetIndex, bool shouldCopy) args)
    {
        try
        {
            if (args.shouldCopy && customerAddresses.Count >= 2 && args.targetIndex < customerAddresses.Count)
            {
                var sourceAddress = customerAddresses[0];
                var targetAddress = customerAddresses[args.targetIndex];
                
                // 本地複製
                targetAddress.PostalCode = sourceAddress.PostalCode;
                targetAddress.City = sourceAddress.City;
                targetAddress.District = sourceAddress.District;
                targetAddress.Address = sourceAddress.Address;
                
                if (enableDebugLog)
                {
                    Console.WriteLine($"複製地址從索引 0 到索引 {args.targetIndex}");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"複製地址時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleAddressTypeChanged((int index, int? value) args)
    {
        try
        {
            if (args.index < customerAddresses.Count)
            {
                customerAddresses[args.index].AddressTypeId = args.value;
                
                if (enableDebugLog)
                {
                    Console.WriteLine($"地址類型變更: 索引 {args.index}, 新值: {args.value}");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"更新地址類型時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandlePostalCodeChanged((int index, string? value) args)
    {
        try
        {
            if (args.index < customerAddresses.Count)
            {
                customerAddresses[args.index].PostalCode = args.value;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"更新郵遞區號時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleCityChanged((int index, string? value) args)
    {
        try
        {
            if (args.index < customerAddresses.Count)
            {
                customerAddresses[args.index].City = args.value;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"更新城市時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleDistrictChanged((int index, string? value) args)
    {
        try
        {
            if (args.index < customerAddresses.Count)
            {
                customerAddresses[args.index].District = args.value;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"更新行政區時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleAddressChanged((int index, string? value) args)
    {
        try
        {
            if (args.index < customerAddresses.Count)
            {
                customerAddresses[args.index].Address = args.value;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"更新地址時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private int? GetDefaultAddressTypeId(int index)
    {
        if (!addressTypes.Any()) return null;
        
        return index switch
        {
            0 => addressTypes.FirstOrDefault(at => at.TypeName.Contains("住宅") || at.TypeName.Contains("公司"))?.AddressTypeId ??
                 addressTypes.FirstOrDefault()?.AddressTypeId,
            1 => addressTypes.FirstOrDefault(at => at.TypeName.Contains("通訊") || at.TypeName.Contains("寄信"))?.AddressTypeId ??
                 addressTypes.Skip(1).FirstOrDefault()?.AddressTypeId,
            _ => addressTypes.FirstOrDefault()?.AddressTypeId
        };
    }
    
    private Task OnAddressesChanged(List<CustomerAddress> updatedAddresses)
    {
        customerAddresses = updatedAddresses ?? new List<CustomerAddress>();
        
        if (enableDebugLog)
        {
            Console.WriteLine($"地址已更新，目前數量: {customerAddresses.Count}");
            foreach (var addr in customerAddresses)
            {
                Console.WriteLine($"- 地址類型ID: {addr.AddressTypeId}, 主要: {addr.IsPrimary}, 城市: {addr.City}");
            }
        }
        
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    // UI 輔助方法
    private string GetPageTitle()
    {
        if (IsEditMode)
        {
            return !string.IsNullOrWhiteSpace(customerCode) 
                ? $"編輯客戶 ({customerCode})" 
                : "編輯客戶";
        }
        return "新增客戶";
    }
    
    private string GetPageIcon()
    {
        return IsEditMode ? "fas fa-user-edit" : "fas fa-user-plus";
    }
    
    private string GetSubmitButtonText()
    {
        return IsEditMode ? "更新客戶" : "儲存客戶";
    }
    
    private string GetLoadingText()
    {
        return IsEditMode ? "載入客戶資料中..." : "載入表單資料中...";
    }
    
    private string GetStatusText(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Active => "啟用",
            EntityStatus.Inactive => "停用",
            _ => status.ToString()
        };
    }
    
    // 簡單的除錯日誌方法
    private void LogChange(string fieldName, string value)
    {
        if (enableDebugLog)
        {
            Console.WriteLine($"欄位 {fieldName} 變更為: '{value}' (長度: {value?.Length ?? 0})");
        }
    }
    
    private void LogCustomerState(string context)
    {
        if (!enableDebugLog) return;
        
        Console.WriteLine($"=== {context} - Customer 狀態 ===");
        Console.WriteLine($"CustomerCode: '{customer.CustomerCode}' (Length: {customer.CustomerCode?.Length ?? 0})");
        Console.WriteLine($"CompanyName: '{customer.CompanyName}' (Length: {customer.CompanyName?.Length ?? 0})");
        Console.WriteLine($"ContactPerson: '{customer.ContactPerson}' (Length: {customer.ContactPerson?.Length ?? 0})");
        Console.WriteLine($"TaxNumber: '{customer.TaxNumber}' (Length: {customer.TaxNumber?.Length ?? 0})");
        Console.WriteLine($"CustomerTypeId: {customer.CustomerTypeId}");
        Console.WriteLine($"IndustryId: {customer.IndustryId}");
        Console.WriteLine($"CreatedBy: '{customer.CreatedBy}'");
        Console.WriteLine("================================");
    }
      private void NavigateBack()
    {
        Navigation.NavigateTo("/customers");
    }
    
    // 完成度追蹤輔助方法
    private int GetBasicRequiredFieldsCount()
    {
        return 2; // CustomerCode 和 CompanyName 是必填欄位
    }
    
    private int GetBasicCompletedFieldsCount()
    {
        int count = 0;
        
        if (!string.IsNullOrWhiteSpace(customer.CustomerCode))
            count++;
            
        if (!string.IsNullOrWhiteSpace(customer.CompanyName))
            count++;
            
        return count;
    }
      private int GetAddressCompletedFieldsCount()
    {
        if (!customerAddresses.Any())
            return 0;
            
        // 計算至少有一個完整地址的數量
        int completedAddresses = customerAddresses.Count(addr => 
            !string.IsNullOrWhiteSpace(addr.PostalCode) &&
            !string.IsNullOrWhiteSpace(addr.City) &&
            !string.IsNullOrWhiteSpace(addr.District) &&
            !string.IsNullOrWhiteSpace(addr.Address)
        );
        
        return completedAddresses;
    }
    
    // 聯絡資訊管理輔助方法
    private int GetContactCompletedFieldsCount()
    {
        return customerContacts.Count(c => !string.IsNullOrWhiteSpace(c.ContactValue));
    }
    
    private string GetContactValue(string contactTypeName)
    {
        var contactType = contactTypes.FirstOrDefault(ct => ct.TypeName == contactTypeName);
        if (contactType == null) return string.Empty;
        
        var contact = customerContacts.FirstOrDefault(c => c.ContactTypeId == contactType.ContactTypeId);
        return contact?.ContactValue ?? string.Empty;
    }
    
    private void UpdateContactValue(string contactTypeName, string value)
    {
        var contactType = contactTypes.FirstOrDefault(ct => ct.TypeName == contactTypeName);
        if (contactType == null) return;
        
        var existingContact = customerContacts.FirstOrDefault(c => c.ContactTypeId == contactType.ContactTypeId);
        
        if (!string.IsNullOrWhiteSpace(value))
        {
            if (existingContact != null)
            {
                existingContact.ContactValue = value;
            }
            else
            {
                customerContacts.Add(new CustomerContact
                {
                    CustomerId = customer.CustomerId,
                    ContactTypeId = contactType.ContactTypeId,
                    ContactValue = value,
                    IsPrimary = !customerContacts.Any(c => c.IsPrimary && c.ContactTypeId == contactType.ContactTypeId),
                    Status = EntityStatus.Active
                });
            }
        }
        else if (existingContact != null)
        {
            customerContacts.Remove(existingContact);
        }
        
        if (enableDebugLog)
        {
            Console.WriteLine($"聯絡資訊更新: {contactTypeName} = '{value}'");
        }
    }
}
