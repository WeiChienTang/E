@page "/customers/create"
@page "/customers/{CustomerId:int}/edit"
@inject ICustomerService CustomerService
@inject IAddressService AddressService
@inject IContactTypeService ContactTypeService
@inject ICustomerContactService CustomerContactService
@inject ICustomerAddressService CustomerAddressService
@inject ICustomerTypeService CustomerTypeService
@inject IIndustryTypeService IndustryTypeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services.Interfaces
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.Alerts
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Loading
@using ERPCore2.Components.Shared.Forms
@using ERPCore2.Components.Shared.Modals
@using static ERPCore2.Components.Shared.Buttons.ButtonComponent
@using static ERPCore2.Components.Shared.Alerts.AlertComponent
@using static ERPCore2.Components.Shared.Forms.FormSectionComponent
@rendermode InteractiveServer

<PageTitle>@GetPageTitle()</PageTitle>

<link href="~/css/variables.css" rel="stylesheet" />

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">                
                <PageHeaderComponent Title="@GetPageTitle()" IconClass="@GetPageIcon()">
                    <Actions>
                        <ButtonComponent Text="返回列表" 
                                       Variant="ButtonVariant.OutlineSecondary" 
                                       IconClass="fas fa-arrow-left" 
                                       OnClick="NavigateBack" />
                    </Actions>
                </PageHeaderComponent>
                
                <div class="card-body">
                    <LoadingComponent IsLoading="@isLoading" 
                                    LoadingText="@GetLoadingText()" 
                                    ShowText="true" />
                      @if (!isLoading && !string.IsNullOrWhiteSpace(notFoundMessage))
                    {
                        <AlertComponent Type="AlertType.Warning" 
                                      Message="@notFoundMessage" 
                                      IconClass="fas fa-exclamation-triangle" />
                    }
                    else if (!isLoading)
                    {                        
                        <EditForm Model="@customer" OnValidSubmit="@HandleSubmit">
                            <DataAnnotationsValidator />                            
                            <!-- 基本資訊區塊 -->                            
                            <FormSectionComponent Title="基本資訊" 
                                                IconClass="fas fa-info-circle"
                                                SectionType="@FormSectionType.Basic"
                                                RequiredFieldsCount="@GetBasicRequiredFieldsCount()"
                                                CompletedFieldsCount="@GetBasicCompletedFieldsCount()">
                                <div class="row">
                                    <div class="col-md-3">
                                        <InputComponent Id="customerCode" 
                                                      Label="客戶代碼" 
                                                      Value="@customer.CustomerCode"
                                                      ValueChanged="@(value => { customer.CustomerCode = value; LogChange("CustomerCode", value); })"
                                                      IsRequired="true" />
                                        <ValidationMessage For="@(() => customer.CustomerCode)" class="text-danger" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <InputComponent Id="companyName" 
                                                      Label="公司名稱" 
                                                      Value="@customer.CompanyName"
                                                      ValueChanged="@(value => { customer.CompanyName = value; LogChange("CompanyName", value); })"
                                                      IsRequired="true" />
                                        <ValidationMessage For="@(() => customer.CompanyName)" class="text-danger" />
                                    </div>
                                    
                                    <div class="col-md-3">
                                        <InputComponent Id="taxNumber" 
                                                      Label="統一編號" 
                                                      Value="@customer.TaxNumber"
                                                      ValueChanged="@(value => { customer.TaxNumber = value; LogChange("TaxNumber", value); })" />
                                        <ValidationMessage For="@(() => customer.TaxNumber)" class="text-danger" />
                                    </div>
                                </div>
                                
                                <div class="row">                                    <div class="col-md-4">
                                        <DatabaseSelectWithManagementComponent TValue="int?" TEntity="CustomerType"
                                                                                Id="customerType" 
                                                                                Label="客戶類型"
                                                                                Value="@customer.CustomerTypeId"
                                                                                ValueChanged="@((int? value) => { customer.CustomerTypeId = value; LogChange("CustomerTypeId", value?.ToString() ?? "null"); StateHasChanged(); })"
                                                                                LoadDataFunc="@(() => CustomerService.GetCustomerTypesAsync())"
                                                                                GetItemText="@((CustomerType item) => item.TypeName)"
                                                                                GetItemValue="@((CustomerType item) => (object)item.CustomerTypeId)"
                                                                                EmptyOptionText="請選擇客戶類型..."
                                                                                ShowManagementButton="true"
                                                                                OnManagementClick="ShowCustomerTypeModal" />
                                        <ValidationMessage For="@(() => customer.CustomerTypeId)" class="text-danger" />
                                    </div>                                      <div class="col-md-4">
                                        <DatabaseSelectWithManagementComponent TValue="int?" TEntity="IndustryType"
                                                                                Id="industryType" 
                                                                                Label="行業類型"
                                                                                Value="@customer.IndustryTypeId"
                                                                                ValueChanged="@((int? value) => { customer.IndustryTypeId = value; LogChange("IndustryTypeId", value?.ToString() ?? "null"); StateHasChanged(); })"
                                                                                LoadDataFunc="@(() => CustomerService.GetIndustryTypesAsync())"
                                                                                GetItemText="@((IndustryType item) => item.IndustryTypeName)"
                                                                                GetItemValue="@((IndustryType item) => (object)item.IndustryTypeId)"
                                                                                EmptyOptionText="請選擇行業類型..."
                                                                                ShowManagementButton="true"
                                                                                OnManagementClick="ShowIndustryTypeModal" />
                                        <ValidationMessage For="@(() => customer.IndustryTypeId)" class="text-danger" />
                                    </div>
                                    
                                    <div class="col-md-4">
                                        <InputComponent Id="contactPerson" 
                                                      Label="聯絡人" 
                                                      Value="@customer.ContactPerson"
                                                      ValueChanged="@(value => { customer.ContactPerson = value; LogChange("ContactPerson", value); })" />
                                        <ValidationMessage For="@(() => customer.ContactPerson)" class="text-danger" />
                                    </div>                                
                                </div>
                            </FormSectionComponent>
                                <!-- 聯絡資訊區塊 -->                            
                            <FormSectionComponent Title="聯絡資訊" 
                                                IconClass="fas fa-phone"
                                                SectionType="@FormSectionType.Contact"
                                                RequiredFieldsCount="0"
                                                CompletedFieldsCount="@GetContactCompletedFieldsCount()">
                                
                                <div class="row">
                                    <div class="col-md-4">
                                        <InputComponent Id="phone" 
                                                      Label="電話" 
                                                      Value="@GetContactValue("電話")"
                                                      ValueChanged="@(value => UpdateContactValue("電話", value))"
                                                      InputType="tel"
                                                      Placeholder="02-1234-5678" />
                                    </div>
                                    
                                    <div class="col-md-4">
                                        <InputComponent Id="mobile" 
                                                      Label="手機" 
                                                      Value="@GetContactValue("手機")"
                                                      ValueChanged="@(value => UpdateContactValue("手機", value))"
                                                      InputType="tel"
                                                      Placeholder="0912-345-678" />
                                    </div>
                                    
                                    <div class="col-md-4">
                                        <InputComponent Id="fax" 
                                                      Label="傳真" 
                                                      Value="@GetContactValue("傳真")"
                                                      ValueChanged="@(value => UpdateContactValue("傳真", value))"
                                                      InputType="tel"
                                                      Placeholder="02-1234-5679" />
                                    </div>
                                </div>
                                
                                <div class="row">
                                    <div class="col-md-6">
                                        <InputComponent Id="email" 
                                                      Label="Email" 
                                                      Value="@GetContactValue("Email")"
                                                      ValueChanged="@(value => UpdateContactValue("Email", value))"
                                                      InputType="email"
                                                      Placeholder="contact@company.com" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <InputComponent Id="website" 
                                                      Label="網站" 
                                                      Value="@GetContactValue("網站")"
                                                      ValueChanged="@(value => UpdateContactValue("網站", value))"
                                                      InputType="url"
                                                      Placeholder="https://www.company.com" />                                    
                                    </div>
                                </div>
                            </FormSectionComponent>
                            
                            @if (IsEditMode)
                            {
                                <!-- 系統資訊區塊 (僅編輯模式顯示) -->                                
                                <FormSectionComponent Title="系統資訊" 
                                                    IconClass="fas fa-cog"
                                                    SectionType="@FormSectionType.System"
                                                    RequiredFieldsCount="1"
                                                    CompletedFieldsCount="@(customer.Status != EntityStatus.Default ? 1 : 0)">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <SelectComponent TValue="EntityStatus"
                                                           Id="status" 
                                                           Label="狀態"
                                                           Value="@customer.Status"
                                                           ValueChanged="@(value => customer.Status = value)"
                                                           Items="@(Enum.GetValues<EntityStatus>().Cast<object>())"
                                                           GetItemText="@(item => GetStatusText((EntityStatus)item))"
                                                           GetItemValue="@(item => item)"
                                                           ShowEmptyOption="false" />
                                            <ValidationMessage For="@(() => customer.Status)" class="text-danger" />
                                        </div>
                                        
                                        <div class="col-md-3">
                                            <InputComponent Id="modifiedBy" 
                                                          Label="修改者" 
                                                          Value="@customer.ModifiedBy"
                                                          ValueChanged="@(value => customer.ModifiedBy = value)" />
                                            <ValidationMessage For="@(() => customer.ModifiedBy)" class="text-danger" />
                                        </div>
                                        
                                        <div class="col-md-3">
                                            <InputComponent Id="createdDate" 
                                                          Label="建立日期" 
                                                          Value="@customer.CreatedDate.ToString("yyyy-MM-dd HH:mm")"
                                                          IsReadOnly="true" />
                                        </div>
                                        
                                        <div class="col-md-3">
                                            <InputComponent Id="createdBy" 
                                                          Label="建立者" 
                                                          Value="@customer.CreatedBy"
                                                          IsReadOnly="true" />
                                        </div>
                                    </div>
                                </FormSectionComponent>
                            }
                            else
                            {
                                <!-- 新增模式的建立者資訊 -->                                
                                <FormSectionComponent Title="建立資訊" 
                                                    IconClass="fas fa-user-plus"
                                                    SectionType="@FormSectionType.System"
                                                    RequiredFieldsCount="0"
                                                    CompletedFieldsCount="1">
                                    <div class="row">
                                        <div class="col-md-3">
                                            <InputComponent Id="createdBy" 
                                                          Label="建立者" 
                                                          Value="@customer.CreatedBy"
                                                          ValueChanged="@(value => customer.CreatedBy = value)"
                                                          IsReadOnly="true" />
                                            <ValidationMessage For="@(() => customer.CreatedBy)" class="text-danger" />
                                        </div>
                                    </div>
                                </FormSectionComponent>
                            }
                            
                            <!-- 地址資訊區塊 -->                            
                            <FormSectionComponent Title="地址資訊" 
                                                IconClass="fas fa-map-marker-alt"
                                                SectionType="@FormSectionType.Address"
                                                RequiredFieldsCount="0"
                                                CompletedFieldsCount="@GetAddressCompletedFieldsCount()">
                                <AddressManagement Addresses="@customerAddresses"
                                                 AddressTypes="@addressTypes"
                                                 AddressesChanged="@AddressesChangedCallback"
                                                 OnAddAddress="@(() => HandleAddAddress())"                                                         
                                                 OnRemoveAddress="HandleRemoveAddress"
                                                 OnSetPrimaryAddress="HandleSetPrimaryAddress"
                                                 OnCopyFromFirstAddress="HandleCopyFromFirstAddress"
                                                 OnAddressTypeChanged="HandleAddressTypeChanged"
                                                 OnPostalCodeChanged="HandlePostalCodeChanged"
                                                 OnCityChanged="HandleCityChanged"
                                                 OnDistrictChanged="HandleDistrictChanged"
                                                 OnAddressChanged="HandleAddressChanged" />
                            </FormSectionComponent>
                              @if (!string.IsNullOrWhiteSpace(errorMessage))
                            {
                                <AlertComponent Type="AlertType.Danger" 
                                              Message="@errorMessage" 
                                              IconClass="fas fa-exclamation-triangle" />
                            }
                            
                            <!-- 統一的提交按鈕區塊 (新增和編輯模式共用) -->
                            <div class="row">
                                <div class="col-12">
                                    <div class="d-flex justify-content-end gap-2 mt-3">
                                        <ButtonComponent Text="取消" 
                                                       Variant="ButtonVariant.OutlineSecondary" 
                                                       IconClass="fas fa-times"
                                                       OnClick="NavigateBack" />
                                                       
                                        <ButtonComponent Text="@GetSubmitButtonText()" 
                                                       Variant="ButtonVariant.Primary" 
                                                       IconClass="@(isSubmitting ? "spinner-border spinner-border-sm" : "fas fa-save")"
                                                       IsDisabled="@isSubmitting"
                                                       IsSubmit="true" />
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 載入 Font Awesome 圖示 -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

<!-- ContactType 管理模態視窗 -->
<GenericManagementModal @ref="contactTypeModal" 
                       TEntity="ContactType"
                       ModalId="contactTypeManagementModal"
                       Title="聯絡類型管理"
                       EntityDisplayName="聯絡類型"
                       IconClass="fas fa-phone"
                       LoadingText="載入聯絡類型資料中..."
                       Service="ContactTypeService"
                       OnDataChanged="OnContactTypesChanged"                       
                       GetEntityId="GetContactTypeId"
                       GetEntityStatus="GetContactTypeStatus"
                       SetCreatedBy="SetContactTypeCreatedBy"
                       SetEntityStatus="SetContactTypeStatus"
                       CreateFormContent="CreateContactTypeForm"
                       TableHeaders="ContactTypeTableHeaders"
                       TableRowContent="ContactTypeTableRow" />

<!-- CustomerType 管理模態視窗 -->
<GenericManagementModal @ref="customerTypeModal" 
                       TEntity="CustomerType"
                       ModalId="customerTypeManagementModal"
                       Title="客戶類型管理"
                       EntityDisplayName="客戶類型"
                       IconClass="fas fa-users"
                       LoadingText="載入客戶類型資料中..."
                       Service="CustomerTypeService"
                       OnDataChanged="OnCustomerTypesChanged"                       
                       GetEntityId="GetCustomerTypeId"
                       GetEntityStatus="GetCustomerTypeStatus"
                       SetCreatedBy="SetCustomerTypeCreatedBy"
                       SetEntityStatus="SetCustomerTypeStatus"
                       CreateFormContent="CreateCustomerTypeForm"
                       TableHeaders="CustomerTypeTableHeaders"
                       TableRowContent="CustomerTypeTableRow" />

<!-- IndustryType 管理模態視窗 -->
<GenericManagementModal @ref="industryTypeModal" 
                       TEntity="IndustryType"
                       ModalId="industryTypeManagementModal"
                       Title="行業類型管理"
                       EntityDisplayName="行業類型"
                       IconClass="fas fa-industry"
                       LoadingText="載入行業類型資料中..."
                       Service="IndustryTypeService"
                       OnDataChanged="OnIndustryTypesChanged"                       
                       GetEntityId="GetIndustryTypeId"
                       GetEntityStatus="GetIndustryTypeStatus"
                       SetCreatedBy="SetIndustryTypeCreatedBy"
                       SetEntityStatus="SetIndustryTypeStatus"
                       CreateFormContent="CreateIndustryTypeForm"
                       TableHeaders="IndustryTypeTableHeaders"
                       TableRowContent="IndustryTypeTableRow" />

@code {    
    [Parameter] public int? CustomerId { get; set; }
      private Customer customer = new();
    private List<CustomerType> customerTypes = new();
    private List<IndustryType> industryTypes = new();
    private List<AddressType> addressTypes = new();
    private List<ContactType> contactTypes = new();
    private List<CustomerAddress> customerAddresses = new();
    private List<CustomerContact> customerContacts = new();    // 模態組件引用
    private GenericManagementModal<ContactType> contactTypeModal = default!;
    private GenericManagementModal<CustomerType> customerTypeModal = default!;
    private GenericManagementModal<IndustryType> industryTypeModal = default!;
    
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private string notFoundMessage = string.Empty;
    private string customerCode = string.Empty;
    
    // 防止並發操作的信號量
    private readonly SemaphoreSlim _dataRefreshSemaphore = new(1, 1);
    
    // 除錯設定
    private bool enableDebugLog = true; // 可以設為 false 關閉除錯
    
    // 判斷是否為編輯模式
    private bool IsEditMode => CustomerId.HasValue && CustomerId.Value > 0;
    
    // EventCallback for AddressManagement component (新增和編輯模式都可使用)
    private EventCallback<List<CustomerAddress>> AddressesChangedCallback => 
        EventCallback.Factory.Create<List<CustomerAddress>>(this, OnAddressesChanged);
      protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }
      
    private async Task LoadDataAsync()
    {
        try
        {            // 載入客戶類型、行業類型、地址類型和聯絡類型的下拉選項            
            customerTypes = await CustomerService.GetCustomerTypesAsync();
            industryTypes = await CustomerService.GetIndustryTypesAsync();
            addressTypes = await CustomerService.GetAddressTypesAsync();

            // 使用 ContactTypeService 載入聯絡類型
            contactTypes = await ContactTypeService.GetActiveAsync();
            
            if (IsEditMode)
            {
                // 編輯模式：載入現有客戶資料和地址
                await LoadExistingCustomerAsync();
            }            else
            {
                // 新增模式：初始化預設地址和新客戶
                InitializeDefaultAddresses();
                CustomerService.InitializeNewCustomer(customer);
            }
            
            if (enableDebugLog)
            {
                Console.WriteLine("=== 載入資料後的除錯資訊 ===");
                Console.WriteLine($"IsEditMode: {IsEditMode}");
                Console.WriteLine($"CustomerId: {CustomerId}");
                Console.WriteLine($"CustomerTypes count: {customerTypes.Count}");
                Console.WriteLine($"IndustryTypes count: {industryTypes.Count}");
                Console.WriteLine($"ContactTypes count: {contactTypes.Count}");
                Console.WriteLine($"CustomerAddresses count: {customerAddresses.Count}");
                Console.WriteLine($"CustomerContacts count: {customerContacts.Count}");
                LogCustomerState("初始化完成");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"載入資料時發生錯誤: {ex.Message}";
            Console.WriteLine($"LoadDataAsync Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }    private async Task LoadExistingCustomerAsync()
    {
        if (!CustomerId.HasValue) return;
        
        var existingCustomer = await CustomerService.GetByIdAsync(CustomerId.Value);
        
        if (existingCustomer == null)
        {
            notFoundMessage = "找不到指定的客戶資料";
            return;
        }
        
        // 填入現有資料
        customerCode = existingCustomer.CustomerCode;
        customer = existingCustomer;
        customer.ModifiedBy = "系統管理員"; // 可以從認證系統獲取
          // 載入客戶地址資料（使用新的簡化方法）
        customerAddresses = await AddressService.GetAddressesWithDefaultAsync(CustomerId.Value, addressTypes);
        
        // 載入客戶聯絡資料
        customerContacts = (await CustomerService.GetCustomerContactsAsync(CustomerId.Value)).ToList();
    }
      private async Task LoadCustomerContactsAsync()
    {
        try
        {
            if (CustomerId.HasValue)
            {
                // 載入客戶的聯絡資料
                var contacts = await CustomerService.GetCustomerContactsAsync(CustomerId.Value);
                customerContacts = contacts?.ToList() ?? new List<CustomerContact>();
                
                if (enableDebugLog)
                {
                    Console.WriteLine($"載入了 {customerContacts.Count} 個客戶聯絡資料");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入客戶聯絡資料時發生錯誤: {ex.Message}");
            // 如果載入失敗，初始化空的聯絡資料
            customerContacts = new List<CustomerContact>();
        }
    }
      private void InitializeDefaultAddresses()
    {
        CustomerAddressService.InitializeDefaultAddresses(customerAddresses, addressTypes);
        
        if (enableDebugLog)
        {
            Console.WriteLine($"初始化了 {customerAddresses.Count} 個預設地址 (公司地址)");
        }
    }
    
    private async Task HandleSubmit()
    {
        if (isSubmitting) return;
        
        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;            if (enableDebugLog)
            {
                LogCustomerState("表單提交前");
                Console.WriteLine($"準備提交的地址數量: {customerAddresses.Count}");
                Console.WriteLine($"準備提交的聯絡資料數量: {customerContacts.Count}");
            }
              // 驗證聯絡資料
            var contactValidationResult = CustomerContactService.ValidateCustomerContacts(customerContacts);
            if (!contactValidationResult.IsSuccess)
            {
                errorMessage = contactValidationResult.ErrorMessage;
                return;
            }
            
            // 確保每種聯絡類型只有一個主要聯絡方式
            var primaryContactResult = CustomerContactService.EnsureUniquePrimaryContacts(customerContacts);
            if (!primaryContactResult.IsSuccess)
            {
                errorMessage = primaryContactResult.ErrorMessage;
                return;
            }
            
            // 驗證地址資料
            var addressValidationResult = CustomerAddressService.ValidateAddresses(customerAddresses);
            if (!addressValidationResult.IsSuccess)
            {
                errorMessage = addressValidationResult.ErrorMessage;
                return;
            }
            
            // 確保有主要地址
            var primaryAddressResult = CustomerAddressService.EnsurePrimaryAddressExists(customerAddresses);
            if (!primaryAddressResult.IsSuccess)
            {
                errorMessage = primaryAddressResult.ErrorMessage;
                return;
            }
            
            ServiceResult result;
              if (IsEditMode)
            {
                // 編輯模式：更新客戶資料、地址和聯絡資料
                customer.CustomerAddresses = customerAddresses;
                customer.CustomerContacts = customerContacts;
                result = await CustomerService.UpdateAsync(customer);
                
                // 如果有地址資料，同時更新地址
                if (result.IsSuccess && customerAddresses.Any())
                {
                    try
                    {
                        await AddressService.UpdateCustomerAddressesAsync(customer.CustomerId, customerAddresses);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"更新客戶地址時發生錯誤: {ex.Message}");
                        // 地址更新失敗不影響客戶資料更新成功的結果
                    }
                }
                
                // 如果有聯絡資料，同時更新聯絡資料
                if (result.IsSuccess && customerContacts.Any())
                {
                    try
                    {
                        await CustomerService.UpdateCustomerContactsAsync(customer.CustomerId, customerContacts);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"更新客戶聯絡資料時發生錯誤: {ex.Message}");
                        // 聯絡資料更新失敗不影響客戶資料更新成功的結果
                    }
                }
            }
            else
            {
                // 新增模式：將地址和聯絡資料加入到客戶物件中
                customer.CustomerAddresses = customerAddresses;
                customer.CustomerContacts = customerContacts;
                result = await CustomerService.CreateAsync(customer);
            }
            
            if (result.IsSuccess)
            {
                var message = IsEditMode ? "客戶更新成功！" : "客戶新增成功！";
                await JSRuntime.InvokeVoidAsync("alert", message);
                Navigation.NavigateTo("/customers");
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            var action = IsEditMode ? "更新" : "新增";
            errorMessage = $"{action}客戶時發生錯誤: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
      // 地址管理事件處理方法 (新增和編輯模式都可使用)
    private Task HandleAddAddress()
    {
        try
        {
            var newAddress = CustomerAddressService.CreateNewAddress(customer.CustomerId, customerAddresses.Count);
            newAddress.AddressTypeId = CustomerAddressService.GetDefaultAddressTypeId(customerAddresses.Count, addressTypes);
            
            var result = CustomerAddressService.AddAddress(customerAddresses, newAddress);
            
            if (!result.IsSuccess)
            {
                errorMessage = result.ErrorMessage;
                Console.WriteLine($"新增地址失敗: {result.ErrorMessage}");
            }
            else if (enableDebugLog)
            {
                Console.WriteLine($"新增地址，目前數量: {customerAddresses.Count}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"新增地址時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
      private Task HandleRemoveAddress(int index)
    {
        var result = CustomerAddressService.RemoveAddress(customerAddresses, index);
        
        if (!result.IsSuccess)
        {
            errorMessage = result.ErrorMessage;
            Console.WriteLine($"移除地址失敗: {result.ErrorMessage}");
        }
        else if (enableDebugLog)
        {
            Console.WriteLine($"移除地址，目前數量: {customerAddresses.Count}");
        }
        
        return Task.CompletedTask;
    }
      private Task HandleSetPrimaryAddress(int index)
    {
        var result = CustomerAddressService.SetPrimaryAddress(customerAddresses, index);
        
        if (!result.IsSuccess)
        {
            errorMessage = result.ErrorMessage;
            Console.WriteLine($"設定主要地址失敗: {result.ErrorMessage}");
        }
        else if (enableDebugLog)
        {
            Console.WriteLine($"設定主要地址: 索引 {index}");
        }
        
        return Task.CompletedTask;
    }
      private Task HandleCopyFromFirstAddress((int targetIndex, bool shouldCopy) args)
    {
        if (args.shouldCopy)
        {
            var result = CustomerAddressService.CopyAddressFromFirst(customerAddresses, args.targetIndex);
            
            if (!result.IsSuccess)
            {
                errorMessage = result.ErrorMessage;
                Console.WriteLine($"複製地址失敗: {result.ErrorMessage}");
            }
            else if (enableDebugLog)
            {
                Console.WriteLine($"複製地址從索引 0 到索引 {args.targetIndex}");
            }
        }
        
        return Task.CompletedTask;
    }
      private Task HandleAddressTypeChanged((int index, int? value) args)
    {
        var result = CustomerAddressService.UpdateAddressType(customerAddresses, args.index, args.value);
        
        if (!result.IsSuccess)
        {
            errorMessage = result.ErrorMessage;
        }
        else if (enableDebugLog)
        {
            Console.WriteLine($"地址類型變更: 索引 {args.index}, 新值: {args.value}");
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandlePostalCodeChanged((int index, string? value) args)
    {
        var result = CustomerAddressService.UpdatePostalCode(customerAddresses, args.index, args.value);
        
        if (!result.IsSuccess)
        {
            errorMessage = result.ErrorMessage;
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleCityChanged((int index, string? value) args)
    {
        var result = CustomerAddressService.UpdateCity(customerAddresses, args.index, args.value);
        
        if (!result.IsSuccess)
        {
            errorMessage = result.ErrorMessage;
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleDistrictChanged((int index, string? value) args)
    {
        var result = CustomerAddressService.UpdateDistrict(customerAddresses, args.index, args.value);
        
        if (!result.IsSuccess)
        {
            errorMessage = result.ErrorMessage;
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleAddressChanged((int index, string? value) args)
    {
        var result = CustomerAddressService.UpdateAddress(customerAddresses, args.index, args.value);
        
        if (!result.IsSuccess)
        {
            errorMessage = result.ErrorMessage;
        }
        
        return Task.CompletedTask;
    }
      
    private Task OnAddressesChanged(List<CustomerAddress> updatedAddresses)
    {
        customerAddresses = updatedAddresses ?? new List<CustomerAddress>();
        
        if (enableDebugLog)
        {
            Console.WriteLine($"地址已更新，目前數量: {customerAddresses.Count}");
            foreach (var addr in customerAddresses)
            {
                Console.WriteLine($"- 地址類型ID: {addr.AddressTypeId}, 主要: {addr.IsPrimary}, 城市: {addr.City}");
            }
        }
        
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    // UI 輔助方法
    private string GetPageTitle()
    {
        if (IsEditMode)
        {
            return !string.IsNullOrWhiteSpace(customerCode) 
                ? $"編輯客戶 ({customerCode})" 
                : "編輯客戶";
        }
        return "新增客戶";
    }
    
    private string GetPageIcon()
    {
        return IsEditMode ? "fas fa-user-edit" : "fas fa-user-plus";
    }
    
    private string GetSubmitButtonText()
    {
        return IsEditMode ? "更新客戶" : "儲存客戶";
    }
    
    private string GetLoadingText()
    {
        return IsEditMode ? "載入客戶資料中..." : "載入表單資料中...";
    }
    
    private string GetStatusText(EntityStatus status)
    {
        return status switch
        {
            EntityStatus.Active => "啟用",
            EntityStatus.Inactive => "停用",
            _ => status.ToString()
        };
    }
    
    // 簡單的除錯日誌方法
    private void LogChange(string fieldName, string value)
    {
        if (enableDebugLog)
        {
            Console.WriteLine($"欄位 {fieldName} 變更為: '{value}' (長度: {value?.Length ?? 0})");
        }
    }
    
    private void LogCustomerState(string context)
    {
        if (!enableDebugLog) return;
        
        Console.WriteLine($"=== {context} - Customer 狀態 ===");
        Console.WriteLine($"CustomerCode: '{customer.CustomerCode}' (Length: {customer.CustomerCode?.Length ?? 0})");
        Console.WriteLine($"CompanyName: '{customer.CompanyName}' (Length: {customer.CompanyName?.Length ?? 0})");
        Console.WriteLine($"ContactPerson: '{customer.ContactPerson}' (Length: {customer.ContactPerson?.Length ?? 0})");
        Console.WriteLine($"TaxNumber: '{customer.TaxNumber}' (Length: {customer.TaxNumber?.Length ?? 0})");
        Console.WriteLine($"CustomerTypeId: {customer.CustomerTypeId}");
        Console.WriteLine($"IndustryTypeId: {customer.IndustryTypeId}");
        Console.WriteLine($"CreatedBy: '{customer.CreatedBy}'");
        Console.WriteLine("================================");
    }
      private void NavigateBack()
    {
        Navigation.NavigateTo("/customers");
    }
      // 完成度追蹤輔助方法
    private int GetBasicRequiredFieldsCount()
    {
        return CustomerService.GetBasicRequiredFieldsCount();
    }
    
    private int GetBasicCompletedFieldsCount()
    {
        return CustomerService.GetBasicCompletedFieldsCount(customer);
    }private int GetAddressCompletedFieldsCount()
    {
        return CustomerAddressService.GetAddressCompletedFieldsCount(customerAddresses);
    }
      // 聯絡資訊管理輔助方法
    private int GetContactCompletedFieldsCount()
    {
        return CustomerContactService.GetContactCompletedFieldsCount(customerContacts);
    }
      private string GetContactValue(string contactTypeName)
    {
        return CustomerContactService.GetContactValue(customer.CustomerId, contactTypeName, contactTypes, customerContacts);
    }
      private void UpdateContactValue(string contactTypeName, string value)
    {
        var result = CustomerContactService.UpdateContactValue(customer.CustomerId, contactTypeName, value, contactTypes, customerContacts);
        
        if (!result.IsSuccess)
        {
            errorMessage = result.ErrorMessage;
            Console.WriteLine($"更新聯絡資訊失敗: {result.ErrorMessage}");
        }
        else if (enableDebugLog)
        {
            Console.WriteLine($"聯絡資訊更新: {contactTypeName} = '{value}'");
        }
    }    // ContactType 管理模態相關方法
    private async Task ShowContactTypeModal()
    {
        if (contactTypeModal != null)
        {
            await contactTypeModal.ShowModal();
        }
    }      private async Task OnContactTypesChanged()
    {        
        // 重新載入聯絡類型資料，使用鎖定防止並發
        if (!await _dataRefreshSemaphore.WaitAsync(1000)) // 等待最多1秒
        {
            Console.WriteLine("聯絡類型資料重新載入被跳過（正在進行中）");
            return;
        }
        
        try
        {
            contactTypes = await ContactTypeService.GetActiveAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"重新載入聯絡類型失敗: {ex.Message}");
        }
        finally
        {
            _dataRefreshSemaphore.Release();
        }
    }
    
    // CustomerType 管理模態相關方法
    private async Task ShowCustomerTypeModal()
    {
        if (customerTypeModal != null)
        {
            await customerTypeModal.ShowModal();
        }
    }
      private async Task OnCustomerTypesChanged()
    {
        // 重新載入客戶類型資料，使用鎖定防止並發
        if (!await _dataRefreshSemaphore.WaitAsync(1000)) // 等待最多1秒
        {
            Console.WriteLine("客戶類型資料重新載入被跳過（正在進行中）");
            return;
        }
        
        try
        {
            customerTypes = await CustomerService.GetCustomerTypesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"重新載入客戶類型失敗: {ex.Message}");
        }
        finally
        {
            _dataRefreshSemaphore.Release();
        }
    }
    
    // IndustryType 管理模態相關方法
    private async Task ShowIndustryTypeModal()
    {
        if (industryTypeModal != null)
        {
            await industryTypeModal.ShowModal();
        }
    }
      private async Task OnIndustryTypesChanged()
    {
        // 重新載入行業類型資料，使用鎖定防止並發
        if (!await _dataRefreshSemaphore.WaitAsync(1000)) // 等待最多1秒
        {
            Console.WriteLine("行業類型資料重新載入被跳過（正在進行中）");
            return;
        }
        
        try
        {
            industryTypes = await CustomerService.GetIndustryTypesAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"重新載入行業類型失敗: {ex.Message}");
        }
        finally
        {
            _dataRefreshSemaphore.Release();
        }
    }
    // GenericManagementModal 的委派方法
    private int GetContactTypeId(ContactType contactType) => contactType.ContactTypeId;
    private EntityStatus GetContactTypeStatus(ContactType contactType) => contactType.Status;
    private void SetContactTypeCreatedBy(ContactType contactType, string user) => contactType.CreatedBy = user;
    private void SetContactTypeStatus(ContactType contactType, EntityStatus status) => contactType.Status = status;

    // CustomerType 的委派方法
    private int GetCustomerTypeId(CustomerType customerType) => customerType.CustomerTypeId;
    private EntityStatus GetCustomerTypeStatus(CustomerType customerType) => customerType.Status;
    private void SetCustomerTypeCreatedBy(CustomerType customerType, string user) => customerType.CreatedBy = user;
    private void SetCustomerTypeStatus(CustomerType customerType, EntityStatus status) => customerType.Status = status;

    // IndustryType 的委派方法
    private int GetIndustryTypeId(IndustryType industryType) => industryType.IndustryTypeId;
    private EntityStatus GetIndustryTypeStatus(IndustryType industryType) => industryType.Status;
    private void SetIndustryTypeCreatedBy(IndustryType industryType, string user) => industryType.CreatedBy = user;
    private void SetIndustryTypeStatus(IndustryType industryType, EntityStatus status) => industryType.Status = status;

    // RenderFragment 方法
    private RenderFragment<ContactType> CreateContactTypeForm => context => __builder =>
    {
        <div class="row">
            <div class="col-md-8">
                <div class="form-group mb-3">
                    <label for="typeName" class="form-label">聯絡類型名稱 <span class="text-danger">*</span></label>
                    <InputText id="typeName" 
                              @bind-Value="context.TypeName" 
                              class="form-control" 
                              placeholder="請輸入聯絡類型名稱"
                              maxlength="20" />
                    <ValidationMessage For="@(() => context.TypeName)" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group mb-3">
                    <label class="form-label">字元數</label>
                    <div class="form-control-plaintext">
                        @(context.TypeName?.Length ?? 0) / 20
                    </div>
                </div>
            </div>
        </div>
        
        <div class="form-group mb-3">
            <label for="description" class="form-label">描述</label>
            <InputTextArea id="description" 
                          @bind-Value="context.Description" 
                          class="form-control" 
                          placeholder="請輸入描述（選填）"
                          rows="3"
                          maxlength="100" />
            <ValidationMessage For="@(() => context.Description)" />
            <div class="form-text">
                @(context.Description?.Length ?? 0) / 100 字元
            </div>
        </div>
    };

    private RenderFragment ContactTypeTableHeaders => __builder =>
    {
        <th>名稱</th>
        <th>描述</th>
        <th>狀態</th>
        <th>建立日期</th>
    };

    private RenderFragment<ContactType> ContactTypeTableRow => context => __builder =>
    {
        <td>
            <strong>@context.TypeName</strong>
        </td>
        <td>
            <span class="text-muted">
                @(string.IsNullOrEmpty(context.Description) ? "無" : context.Description)
            </span>
        </td>
        <td>
            @if (context.Status == EntityStatus.Active)
            {
                <span class="badge bg-success">啟用</span>
            }
            else if (context.Status == EntityStatus.Inactive)
            {
                <span class="badge bg-warning">停用</span>
            }
            else
            {
                <span class="badge bg-secondary">已刪除</span>
            }
        </td>
        <td>
            <small class="text-muted">
                @context.CreatedDate.ToString("yyyy/MM/dd HH:mm")
                <br />
                <span class="text-muted">by @context.CreatedBy</span>
            </small>
        </td>
    };

    // CustomerType RenderFragment 方法
    private RenderFragment<CustomerType> CreateCustomerTypeForm => context => __builder =>
    {
        <div class="row">
            <div class="col-md-8">
                <div class="form-group mb-3">
                    <label for="customerTypeName" class="form-label">客戶類型名稱 <span class="text-danger">*</span></label>
                    <InputText id="customerTypeName" 
                              @bind-Value="context.TypeName" 
                              class="form-control" 
                              placeholder="請輸入客戶類型名稱"
                              maxlength="50" />
                    <ValidationMessage For="@(() => context.TypeName)" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group mb-3">
                    <label class="form-label">字元數</label>
                    <div class="form-control-plaintext">
                        @(context.TypeName?.Length ?? 0) / 50
                    </div>
                </div>
            </div>
        </div>
        
        <div class="form-group mb-3">
            <label for="customerTypeDescription" class="form-label">描述</label>
            <InputTextArea id="customerTypeDescription" 
                          @bind-Value="context.Description" 
                          class="form-control" 
                          placeholder="請輸入描述（選填）"
                          rows="3"
                          maxlength="100" />
            <ValidationMessage For="@(() => context.Description)" />
            <div class="form-text">
                @(context.Description?.Length ?? 0) / 100 字元
            </div>
        </div>
    };

    private RenderFragment CustomerTypeTableHeaders => __builder =>
    {
        <th>名稱</th>
        <th>描述</th>
        <th>狀態</th>
        <th>建立日期</th>
    };

    private RenderFragment<CustomerType> CustomerTypeTableRow => context => __builder =>
    {
        <td>
            <strong>@context.TypeName</strong>
        </td>
        <td>
            <span class="text-muted">
                @(string.IsNullOrEmpty(context.Description) ? "無" : context.Description)
            </span>
        </td>
        <td>
            @if (context.Status == EntityStatus.Active)
            {
                <span class="badge bg-success">啟用</span>
            }
            else if (context.Status == EntityStatus.Inactive)
            {
                <span class="badge bg-warning">停用</span>
            }
            else
            {
                <span class="badge bg-secondary">已刪除</span>
            }
        </td>
        <td>
            <small class="text-muted">
                @context.CreatedDate.ToString("yyyy/MM/dd HH:mm")
                <br />
                <span class="text-muted">by @context.CreatedBy</span>
            </small>
        </td>
    };    // IndustryType RenderFragment 方法
    private RenderFragment<IndustryType> CreateIndustryTypeForm => context => __builder =>
    {
        <div class="row">
            <div class="col-md-8">
                <div class="form-group mb-3">
                    <label for="industryTypeName" class="form-label">行業類型名稱 <span class="text-danger">*</span></label>
                    <InputText id="industryTypeName" 
                              @bind-Value="context.IndustryTypeName" 
                              class="form-control" 
                              placeholder="請輸入行業類型名稱"
                              maxlength="100" />
                    <ValidationMessage For="@(() => context.IndustryTypeName)" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group mb-3">
                    <label class="form-label">字元數</label>
                    <div class="form-control-plaintext">
                        @(context.IndustryTypeName?.Length ?? 0) / 100
                    </div>
                </div>
            </div>
        </div>
        
        <div class="form-group mb-3">
            <label for="industryTypeCode" class="form-label">行業類型代碼</label>
            <InputText id="industryTypeCode" 
                      @bind-Value="context.IndustryTypeCode" 
                      class="form-control" 
                      placeholder="請輸入行業類型代碼（選填）"
                      maxlength="10" />
            <ValidationMessage For="@(() => context.IndustryTypeCode)" />
            <div class="form-text">
                @(context.IndustryTypeCode?.Length ?? 0) / 10 字元
            </div>
        </div>
    };    private RenderFragment IndustryTypeTableHeaders => __builder =>
    {
        <th>名稱</th>
        <th>代碼</th>
        <th>狀態</th>
        <th>建立日期</th>
    };    private RenderFragment<IndustryType> IndustryTypeTableRow => context => __builder =>
    {
        <td>
            <strong>@context.IndustryTypeName</strong>
        </td>
        <td>
            <span class="text-muted">
                @(string.IsNullOrEmpty(context.IndustryTypeCode) ? "無" : context.IndustryTypeCode)
            </span>
        </td>
        <td>
            @if (context.Status == EntityStatus.Active)
            {
                <span class="badge bg-success">啟用</span>
            }
            else if (context.Status == EntityStatus.Inactive)
            {
                <span class="badge bg-warning">停用</span>
            }
            else
            {
                <span class="badge bg-secondary">已刪除</span>
            }
        </td>
        <td>
            <small class="text-muted">
                @context.CreatedDate.ToString("yyyy/MM/dd HH:mm")
                <br />
                <span class="text-muted">by @context.CreatedBy</span>
            </small>
        </td>
    };
}
