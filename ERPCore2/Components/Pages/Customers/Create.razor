@page "/customers/create"
@inject ICustomerService CustomerService
@inject IAddressService AddressService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.Alerts
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Loading
@using ERPCore2.Components.Shared.Forms
@using static ERPCore2.Components.Shared.Buttons.ButtonComponent
@using static ERPCore2.Components.Shared.Alerts.AlertComponent
@rendermode InteractiveServer

<PageTitle>新增客戶</PageTitle>

<link href="~/css/variables.css" rel="stylesheet" />

<div class="container-fluid">
    <div class="row">
        <div class="col-12">            <div class="card">                <PageHeaderComponent Title="新增客戶" IconClass="fas fa-user-plus">
                    <Actions>
                        <ButtonComponent Text="返回列表" 
                                       Variant="ButtonVariant.OutlineSecondary" 
                                       IconClass="fas fa-arrow-left" 
                                       OnClick="NavigateBack" />
                    </Actions>
                </PageHeaderComponent>
                
                <!-- 固定按鈕列 -->
                <PageActionBar>
                    <PrimaryActions>
                        <ButtonComponent Text="儲存客戶" 
                                       Variant="ButtonVariant.Primary" 
                                       IconClass="fas fa-save" 
                                       OnClick="HandleSubmit"
                                       IsDisabled="@isSubmitting" />
                        <ButtonComponent Text="取消" 
                                       Variant="ButtonVariant.OutlineSecondary" 
                                       IconClass="fas fa-times" 
                                       OnClick="NavigateBack" />
                    </PrimaryActions>
                </PageActionBar>
                
                <div class="card-body">
                    <LoadingComponent IsLoading="@isLoading" 
                                    LoadingText="載入表單資料中..." 
                                    ShowText="true" />
                    
                    @if (!isLoading)
                    {
                        <EditForm Model="@customer" OnValidSubmit="@HandleSubmit">
                            <DataAnnotationsValidator />
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <InputComponent Id="customerCode" 
                                                  Label="客戶代碼" 
                                                  Value="@customer.CustomerCode"
                                                  ValueChanged="@(value => { customer.CustomerCode = value; LogChange("CustomerCode", value); })"
                                                  IsRequired="true" />
                                    <ValidationMessage For="@(() => customer.CustomerCode)" class="text-danger" />
                                </div>
                                
                                <div class="col-md-6">
                                    <InputComponent Id="companyName" 
                                                  Label="公司名稱" 
                                                  Value="@customer.CompanyName"
                                                  ValueChanged="@(value => { customer.CompanyName = value; LogChange("CompanyName", value); })"
                                                  IsRequired="true" />
                                    <ValidationMessage For="@(() => customer.CompanyName)" class="text-danger" />
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <InputComponent Id="contactPerson" 
                                                  Label="聯絡人" 
                                                  Value="@customer.ContactPerson"
                                                  ValueChanged="@(value => { customer.ContactPerson = value; LogChange("ContactPerson", value); })" />
                                    <ValidationMessage For="@(() => customer.ContactPerson)" class="text-danger" />
                                </div>
                                
                                <div class="col-md-6">
                                    <InputComponent Id="taxNumber" 
                                                  Label="統一編號" 
                                                  Value="@customer.TaxNumber"
                                                  ValueChanged="@(value => { customer.TaxNumber = value; LogChange("TaxNumber", value); })" />
                                    <ValidationMessage For="@(() => customer.TaxNumber)" class="text-danger" />
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <SelectComponent TValue="int?"
                                                   Id="customerType" 
                                                   Label="客戶類型"
                                                   Value="@customer.CustomerTypeId"
                                                   ValueChanged="@(value => { customer.CustomerTypeId = value; LogChange("CustomerTypeId", value?.ToString() ?? "null"); StateHasChanged(); })"
                                                   Items="customerTypes"
                                                   GetItemText="@(item => ((CustomerType)item).TypeName)"
                                                   GetItemValue="@(item => ((CustomerType)item).CustomerTypeId)"
                                                   EmptyOptionText="請選擇客戶類型..." />
                                    <ValidationMessage For="@(() => customer.CustomerTypeId)" class="text-danger" />
                                </div>
                                
                                <div class="col-md-6">
                                    <SelectComponent TValue="int?"
                                                   Id="industry" 
                                                   Label="行業別"
                                                   Value="@customer.IndustryId"
                                                   ValueChanged="@(value => { customer.IndustryId = value; LogChange("IndustryId", value?.ToString() ?? "null"); StateHasChanged(); })"
                                                   Items="industries"
                                                   GetItemText="@(item => ((Industry)item).IndustryName)"
                                                   GetItemValue="@(item => ((Industry)item).IndustryId)"
                                                   EmptyOptionText="請選擇行業別..." />
                                    <ValidationMessage For="@(() => customer.IndustryId)" class="text-danger" />
                                </div>
                            </div>
                              <div class="row">
                                <div class="col-md-6">
                                    <InputComponent Id="createdBy" 
                                                  Label="建立者" 
                                                  Value="@customer.CreatedBy"
                                                  ValueChanged="@(value => customer.CreatedBy = value)"
                                                  IsReadOnly="true" />
                                    <ValidationMessage For="@(() => customer.CreatedBy)" class="text-danger" />
                                </div>
                            </div>
                            
                            <!-- 地址管理區段 -->
                            <div class="row mt-4">
                                <div class="col-12">
                                    <hr class="my-3" />
                                    <h5 class="mb-3">
                                        <i class="fas fa-map-marker-alt me-2"></i>
                                        地址管理
                                    </h5>                                    <AddressManagement Addresses="@customerAddresses"
                                                     AddressTypes="@addressTypes"
                                                     AddressesChanged="@AddressesChangedCallback"
                                                     OnAddAddress="@HandleAddAddress"
                                                     OnRemoveAddress="@HandleRemoveAddress"
                                                     OnSetPrimaryAddress="@HandleSetPrimaryAddress"
                                                     OnCopyFromFirstAddress="@HandleCopyFromFirstAddress"
                                                     OnAddressTypeChanged="@HandleAddressTypeChanged"
                                                     OnPostalCodeChanged="@HandlePostalCodeChanged"
                                                     OnCityChanged="@HandleCityChanged"
                                                     OnDistrictChanged="@HandleDistrictChanged"
                                                     OnAddressChanged="@HandleAddressChanged" />
                                </div>
                            </div>                            @if (!string.IsNullOrWhiteSpace(errorMessage))
                            {
                                <AlertComponent Type="AlertType.Danger" 
                                              Message="@errorMessage" 
                                              IconClass="fas fa-exclamation-triangle" />
                            }
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 載入 Font Awesome 圖示 -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

@code {    
    private Customer customer = new();
    private List<CustomerType> customerTypes = new();
    private List<Industry> industries = new();
    private List<AddressType> addressTypes = new();
    private List<CustomerAddress> customerAddresses = new();
    
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    
    // 除錯設定
    private bool enableDebugLog = true; // 可以設為 false 關閉除錯
    
    // EventCallback for AddressManagement component
    private EventCallback<List<CustomerAddress>> AddressesChangedCallback => 
        EventCallback.Factory.Create<List<CustomerAddress>>(this, OnAddressesChanged);
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }      
        private async Task LoadDataAsync()
    {
        try
        {
            // 載入客戶類型、行業別和地址類型的下拉選項
            customerTypes = await CustomerService.GetCustomerTypesAsync();
            industries = await CustomerService.GetIndustriesAsync();
            addressTypes = await CustomerService.GetAddressTypesAsync();
            
            // 初始化預設地址（住宅地址和通訊地址）
            InitializeDefaultAddresses();
            
            // 確保所有字串屬性都有初始值，避免 null
            customer.CustomerCode = customer.CustomerCode ?? string.Empty;
            customer.CompanyName = customer.CompanyName ?? string.Empty;
            customer.ContactPerson = customer.ContactPerson ?? string.Empty;
            customer.TaxNumber = customer.TaxNumber ?? string.Empty;
            customer.CreatedBy = customer.CreatedBy ?? "系統管理員";
            customer.CreatedDate = DateTime.Now;
            customer.Status = ERPCore2.Data.Enums.EntityStatus.Active;
            
            if (enableDebugLog)
            {
                Console.WriteLine("=== 載入資料後的除錯資訊 ===");
                Console.WriteLine($"CustomerTypes count: {customerTypes.Count}");
                Console.WriteLine($"Industries count: {industries.Count}");
                Console.WriteLine($"AddressTypes count: {addressTypes.Count}");
                Console.WriteLine($"CustomerAddresses count: {customerAddresses.Count}");
                LogCustomerState("初始化完成");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"載入資料時發生錯誤: {ex.Message}";
            Console.WriteLine($"LoadDataAsync Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
        private async Task HandleSubmit()
    {
        if (isSubmitting) return;
        
        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;
            
            if (enableDebugLog)
            {
                LogCustomerState("表單提交前");
                Console.WriteLine($"準備提交的地址數量: {customerAddresses.Count}");
            }
            
            // 將地址加入到客戶物件中
            customer.CustomerAddresses = customerAddresses;
            
            var result = await CustomerService.CreateAsync(customer);
            
            if (result.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", "客戶新增成功！");
                Navigation.NavigateTo("/customers");
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"新增客戶時發生錯誤: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
    private void InitializeDefaultAddresses()
    {
        customerAddresses.Clear();
        
        // 尋找住宅地址和通訊地址類型
        var residentialType = addressTypes.FirstOrDefault(at => at.TypeName.Contains("住宅") || at.TypeName.Contains("公司"));
        var mailingType = addressTypes.FirstOrDefault(at => at.TypeName.Contains("通訊") || at.TypeName.Contains("帳單"));
        
        // 如果找不到預期的地址類型，使用前兩個可用的類型
        if (residentialType == null && addressTypes.Any())
            residentialType = addressTypes.First();
        if (mailingType == null && addressTypes.Count > 1)
            mailingType = addressTypes.Skip(1).First();
        
        // 新增預設住宅地址
        if (residentialType != null)
        {
            customerAddresses.Add(new CustomerAddress
            {
                AddressTypeId = residentialType.AddressTypeId,
                IsPrimary = true,
                Status = ERPCore2.Data.Enums.EntityStatus.Active,
                PostalCode = string.Empty,
                City = string.Empty,
                District = string.Empty,
                Address = string.Empty
            });
        }
        
        // 新增預設通訊地址
        if (mailingType != null && mailingType.AddressTypeId != residentialType?.AddressTypeId)
        {
            customerAddresses.Add(new CustomerAddress
            {
                AddressTypeId = mailingType.AddressTypeId,
                IsPrimary = false,
                Status = ERPCore2.Data.Enums.EntityStatus.Active,
                PostalCode = string.Empty,
                City = string.Empty,
                District = string.Empty,
                Address = string.Empty
            });
        }
        
        if (enableDebugLog)
        {
            Console.WriteLine($"初始化了 {customerAddresses.Count} 個預設地址");        }
    }
    
    // 地址管理事件處理方法
    private Task HandleAddAddress()
    {
        try
        {
            var newAddress = new CustomerAddress
            {
                CustomerId = customer.CustomerId,
                Status = EntityStatus.Active,
                IsPrimary = customerAddresses.Count == 0,
                AddressTypeId = GetDefaultAddressTypeId(customerAddresses.Count),
                PostalCode = string.Empty,
                City = string.Empty,
                District = string.Empty,
                Address = string.Empty
            };
            
            // 對於新建客戶，只加到本地集合
            customerAddresses.Add(newAddress);
            
            if (enableDebugLog)
            {
                Console.WriteLine($"新增地址，目前數量: {customerAddresses.Count}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"新增地址時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleRemoveAddress(int index)
    {
        try
        {
            if (customerAddresses.Count > 1 && index < customerAddresses.Count)
            {
                var removedAddress = customerAddresses[index];
                customerAddresses.RemoveAt(index);
                
                // 如果刪除的是主要地址，將第一個地址設為主要
                if (removedAddress.IsPrimary && customerAddresses.Any())
                {
                    customerAddresses[0].IsPrimary = true;
                }
                
                if (enableDebugLog)
                {
                    Console.WriteLine($"移除地址，目前數量: {customerAddresses.Count}");
                }
            }
        }
        catch (Exception ex)
        {            errorMessage = $"移除地址時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleSetPrimaryAddress(int index)
    {
        try
        {
            if (index >= 0 && index < customerAddresses.Count)
            {
                // 更新本地集合
                foreach (var addr in customerAddresses)
                {
                    addr.IsPrimary = false;
                }
                customerAddresses[index].IsPrimary = true;
                
                if (enableDebugLog)
                {
                    Console.WriteLine($"設定主要地址: 索引 {index}");
                }
            }
        }
        catch (Exception ex)
        {            errorMessage = $"設定主要地址時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleCopyFromFirstAddress((int targetIndex, bool shouldCopy) args)
    {
        try
        {
            if (args.shouldCopy && customerAddresses.Count >= 2 && args.targetIndex < customerAddresses.Count)
            {
                var sourceAddress = customerAddresses[0];
                var targetAddress = customerAddresses[args.targetIndex];
                
                // 本地複製
                targetAddress.PostalCode = sourceAddress.PostalCode;
                targetAddress.City = sourceAddress.City;
                targetAddress.District = sourceAddress.District;
                targetAddress.Address = sourceAddress.Address;
                
                if (enableDebugLog)
                {
                    Console.WriteLine($"複製地址從索引 0 到索引 {args.targetIndex}");
                }
            }
        }
        catch (Exception ex)
        {            errorMessage = $"複製地址時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleAddressTypeChanged((int index, int? value) args)
    {
        try
        {
            if (args.index < customerAddresses.Count)
            {
                customerAddresses[args.index].AddressTypeId = args.value;
                
                if (enableDebugLog)
                {
                    Console.WriteLine($"地址類型變更: 索引 {args.index}, 新值: {args.value}");
                }
            }
        }
        catch (Exception ex)
        {            errorMessage = $"更新地址類型時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandlePostalCodeChanged((int index, string? value) args)
    {
        try
        {
            if (args.index < customerAddresses.Count)
            {
                customerAddresses[args.index].PostalCode = args.value;
            }
        }
        catch (Exception ex)
        {            errorMessage = $"更新郵遞區號時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleCityChanged((int index, string? value) args)
    {
        try
        {
            if (args.index < customerAddresses.Count)
            {
                customerAddresses[args.index].City = args.value;
            }
        }
        catch (Exception ex)
        {            errorMessage = $"更新城市時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleDistrictChanged((int index, string? value) args)
    {
        try
        {
            if (args.index < customerAddresses.Count)
            {
                customerAddresses[args.index].District = args.value;
            }
        }
        catch (Exception ex)
        {            errorMessage = $"更新行政區時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private Task HandleAddressChanged((int index, string? value) args)
    {
        try
        {
            if (args.index < customerAddresses.Count)
            {
                customerAddresses[args.index].Address = args.value;
            }
        }
        catch (Exception ex)
        {            errorMessage = $"更新地址時發生錯誤: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        
        return Task.CompletedTask;
    }
    
    private int? GetDefaultAddressTypeId(int index)
    {
        if (!addressTypes.Any()) return null;
        
        return index switch
        {
            0 => addressTypes.FirstOrDefault(at => at.TypeName.Contains("住宅") || at.TypeName.Contains("公司"))?.AddressTypeId ??
                 addressTypes.FirstOrDefault()?.AddressTypeId,
            1 => addressTypes.FirstOrDefault(at => at.TypeName.Contains("通訊") || at.TypeName.Contains("寄信"))?.AddressTypeId ??
                 addressTypes.Skip(1).FirstOrDefault()?.AddressTypeId,
            _ => addressTypes.FirstOrDefault()?.AddressTypeId
        };
    }
      
    private Task OnAddressesChanged(List<CustomerAddress> updatedAddresses)
    {
        customerAddresses = updatedAddresses ?? new List<CustomerAddress>();
        
        if (enableDebugLog)
        {
            Console.WriteLine($"地址已更新，目前數量: {customerAddresses.Count}");
            foreach (var addr in customerAddresses)
            {
                Console.WriteLine($"- 地址類型ID: {addr.AddressTypeId}, 主要: {addr.IsPrimary}, 城市: {addr.City}");
            }
        }
        
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    // 簡單的除錯日誌方法
    private void LogChange(string fieldName, string value)
    {
        if (enableDebugLog)
        {
            Console.WriteLine($"欄位 {fieldName} 變更為: '{value}' (長度: {value?.Length ?? 0})");
        }
    }
    
    private void LogCustomerState(string context)
    {
        if (!enableDebugLog) return;
        
        Console.WriteLine($"=== {context} - Customer 狀態 ===");
        Console.WriteLine($"CustomerCode: '{customer.CustomerCode}' (Length: {customer.CustomerCode?.Length ?? 0})");
        Console.WriteLine($"CompanyName: '{customer.CompanyName}' (Length: {customer.CompanyName?.Length ?? 0})");
        Console.WriteLine($"ContactPerson: '{customer.ContactPerson}' (Length: {customer.ContactPerson?.Length ?? 0})");
        Console.WriteLine($"TaxNumber: '{customer.TaxNumber}' (Length: {customer.TaxNumber?.Length ?? 0})");
        Console.WriteLine($"CustomerTypeId: {customer.CustomerTypeId}");
        Console.WriteLine($"IndustryId: {customer.IndustryId}");
        Console.WriteLine($"CreatedBy: '{customer.CreatedBy}'");
        Console.WriteLine("================================");
    }
    
    private void NavigateBack()
    {
        Navigation.NavigateTo("/customers");
    }
}