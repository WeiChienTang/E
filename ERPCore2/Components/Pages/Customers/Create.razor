@page "/customers/create"
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.Alerts
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Loading
@using ERPCore2.Components.Shared.Forms
@using static ERPCore2.Components.Shared.Buttons.ButtonComponent
@using static ERPCore2.Components.Shared.Alerts.AlertComponent
@rendermode InteractiveServer

<PageTitle>新增客戶</PageTitle>

<link href="~/css/variables.css" rel="stylesheet" />

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">                
                <PageHeaderComponent Title="新增客戶" IconClass="fas fa-user-plus">
                    <Actions>
                        <ButtonComponent Text="返回列表" 
                                       Variant="ButtonVariant.OutlineSecondary" 
                                       IconClass="fas fa-arrow-left" 
                                       OnClick="NavigateBack" />
                    </Actions>
                </PageHeaderComponent>
                
                <div class="card-body">
                    <LoadingComponent IsLoading="@isLoading" 
                                    LoadingText="載入表單資料中..." 
                                    ShowText="true" />
                    
                    @if (!isLoading)
                    {
                        <EditForm Model="@customer" OnValidSubmit="@HandleSubmit">
                            <DataAnnotationsValidator />
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <InputComponent Id="customerCode" 
                                                  Label="客戶代碼" 
                                                  Value="@customer.CustomerCode"
                                                  ValueChanged="@(value => { customer.CustomerCode = value; LogChange("CustomerCode", value); })"
                                                  IsRequired="true" />
                                    <ValidationMessage For="@(() => customer.CustomerCode)" class="text-danger" />
                                </div>
                                
                                <div class="col-md-6">
                                    <InputComponent Id="companyName" 
                                                  Label="公司名稱" 
                                                  Value="@customer.CompanyName"
                                                  ValueChanged="@(value => { customer.CompanyName = value; LogChange("CompanyName", value); })"
                                                  IsRequired="true" />
                                    <ValidationMessage For="@(() => customer.CompanyName)" class="text-danger" />
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <InputComponent Id="contactPerson" 
                                                  Label="聯絡人" 
                                                  Value="@customer.ContactPerson"
                                                  ValueChanged="@(value => { customer.ContactPerson = value; LogChange("ContactPerson", value); })" />
                                    <ValidationMessage For="@(() => customer.ContactPerson)" class="text-danger" />
                                </div>
                                
                                <div class="col-md-6">
                                    <InputComponent Id="taxNumber" 
                                                  Label="統一編號" 
                                                  Value="@customer.TaxNumber"
                                                  ValueChanged="@(value => { customer.TaxNumber = value; LogChange("TaxNumber", value); })" />
                                    <ValidationMessage For="@(() => customer.TaxNumber)" class="text-danger" />
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <SelectComponent TValue="int?"
                                                   Id="customerType" 
                                                   Label="客戶類型"
                                                   Value="@customer.CustomerTypeId"
                                                   ValueChanged="@(value => { customer.CustomerTypeId = value; LogChange("CustomerTypeId", value?.ToString() ?? "null"); StateHasChanged(); })"
                                                   Items="customerTypes"
                                                   GetItemText="@(item => ((CustomerType)item).TypeName)"
                                                   GetItemValue="@(item => ((CustomerType)item).CustomerTypeId)"
                                                   EmptyOptionText="請選擇客戶類型..." />
                                    <ValidationMessage For="@(() => customer.CustomerTypeId)" class="text-danger" />
                                </div>
                                
                                <div class="col-md-6">
                                    <SelectComponent TValue="int?"
                                                   Id="industry" 
                                                   Label="行業別"
                                                   Value="@customer.IndustryId"
                                                   ValueChanged="@(value => { customer.IndustryId = value; LogChange("IndustryId", value?.ToString() ?? "null"); StateHasChanged(); })"
                                                   Items="industries"
                                                   GetItemText="@(item => ((Industry)item).IndustryName)"
                                                   GetItemValue="@(item => ((Industry)item).IndustryId)"
                                                   EmptyOptionText="請選擇行業別..." />
                                    <ValidationMessage For="@(() => customer.IndustryId)" class="text-danger" />
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <InputComponent Id="createdBy" 
                                                  Label="建立者" 
                                                  Value="@customer.CreatedBy"
                                                  ValueChanged="@(value => customer.CreatedBy = value)"
                                                  IsReadOnly="true" />
                                    <ValidationMessage For="@(() => customer.CreatedBy)" class="text-danger" />
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrWhiteSpace(errorMessage))
                            {
                                <AlertComponent Type="AlertType.Danger" 
                                              Message="@errorMessage" 
                                              IconClass="fas fa-exclamation-triangle" />
                            }

                            <div class="row">                                
                                <div class="col-12">
                                    <div class="d-flex justify-content-end gap-2">
                                        <ButtonComponent Text="取消" 
                                                       Variant="ButtonVariant.Secondary" 
                                                       IconClass="fas fa-times"
                                                       OnClick="NavigateBack" />
                                                       
                                        <ButtonComponent Text="@(isSubmitting ? "處理中" : "儲存")" 
                                                       Variant="ButtonVariant.Primary" 
                                                       IconClass="@(isSubmitting ? "spinner-border spinner-border-sm" : "fas fa-save")"
                                                       IsDisabled="@isSubmitting"
                                                       IsSubmit="true" />
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- 載入 Font Awesome 圖示 -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

@code {    
    private Customer customer = new();
    private List<CustomerType> customerTypes = new();
    private List<Industry> industries = new();
    
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    
    // 除錯設定
    private bool enableDebugLog = true; // 可以設為 false 關閉除錯
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }      
      
    private async Task LoadDataAsync()
    {
        try
        {
            // 載入客戶類型和行業別的下拉選項
            customerTypes = await CustomerService.GetCustomerTypesAsync();
            industries = await CustomerService.GetIndustriesAsync();
            
            // 確保所有字串屬性都有初始值，避免 null
            customer.CustomerCode = customer.CustomerCode ?? string.Empty;
            customer.CompanyName = customer.CompanyName ?? string.Empty;
            customer.ContactPerson = customer.ContactPerson ?? string.Empty;
            customer.TaxNumber = customer.TaxNumber ?? string.Empty;
            customer.CreatedBy = customer.CreatedBy ?? "系統管理員";
            customer.CreatedDate = DateTime.Now;
            customer.Status = ERPCore2.Data.Enums.EntityStatus.Active;
            
            if (enableDebugLog)
            {
                Console.WriteLine("=== 載入資料後的除錯資訊 ===");
                Console.WriteLine($"CustomerTypes count: {customerTypes.Count}");
                Console.WriteLine($"Industries count: {industries.Count}");
                LogCustomerState("初始化完成");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"載入資料時發生錯誤: {ex.Message}";
            Console.WriteLine($"LoadDataAsync Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
      
    private async Task HandleSubmit()
    {
        if (isSubmitting) return;
        
        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;
            
            if (enableDebugLog)
            {
                LogCustomerState("表單提交前");
            }
            
            var result = await CustomerService.CreateAsync(customer);
            
            if (result.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", "客戶新增成功！");
                Navigation.NavigateTo("/customers");
            }
            else
            {
                errorMessage = result.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"新增客戶時發生錯誤: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
    
    // 簡單的除錯日誌方法
    private void LogChange(string fieldName, string value)
    {
        if (enableDebugLog)
        {
            Console.WriteLine($"欄位 {fieldName} 變更為: '{value}' (長度: {value?.Length ?? 0})");
        }
    }
    
    private void LogCustomerState(string context)
    {
        if (!enableDebugLog) return;
        
        Console.WriteLine($"=== {context} - Customer 狀態 ===");
        Console.WriteLine($"CustomerCode: '{customer.CustomerCode}' (Length: {customer.CustomerCode?.Length ?? 0})");
        Console.WriteLine($"CompanyName: '{customer.CompanyName}' (Length: {customer.CompanyName?.Length ?? 0})");
        Console.WriteLine($"ContactPerson: '{customer.ContactPerson}' (Length: {customer.ContactPerson?.Length ?? 0})");
        Console.WriteLine($"TaxNumber: '{customer.TaxNumber}' (Length: {customer.TaxNumber?.Length ?? 0})");
        Console.WriteLine($"CustomerTypeId: {customer.CustomerTypeId}");
        Console.WriteLine($"IndustryId: {customer.IndustryId}");
        Console.WriteLine($"CreatedBy: '{customer.CreatedBy}'");
        Console.WriteLine("================================");
    }
    
    private void NavigateBack()
    {
        Navigation.NavigateTo("/customers");
    }
}