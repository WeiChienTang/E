@page "/customers/detail/{customerId:int}"
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Data.Entities
@using ERPCore2.Services.Interfaces
@using Microsoft.AspNetCore.Components.Web
@inject ICustomerService CustomerService
@inject ICustomerContactService CustomerContactService
@inject ICustomerAddressService CustomerAddressService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">載入中...</span>
            </div>
            <div class="mt-2">載入客戶資料中...</div>
        </div>
    </div>
}
else if (customer == null)
{
    <div class="alert alert-warning">
        <h4>找不到客戶資料</h4>
        <p>指定的客戶不存在或已被刪除。</p>        <button class="btn btn-primary" @onclick="BackToCustomerList">
            返回客戶列表
        </button>
    </div>
}
else
{
    <GenericDetailsComponent Configuration="@detailConfiguration" 
                           OnSectionLoad="HandleSectionLoad"
                           OnItemClick="HandleItemClick"
                           ActionButtons="@ActionButtons" />
}

@code {
    [Parameter] public int CustomerId { get; set; }

    private Customer? customer;
    private List<CustomerContact> customerContacts = new();
    private List<CustomerAddress> customerAddresses = new();
    private bool isLoading = true;
    private DetailViewConfiguration detailConfiguration = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomerData();
        InitializeDetailConfiguration();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CustomerId > 0)
        {
            await LoadCustomerData();
            InitializeDetailConfiguration();
        }
    }

    private async Task LoadCustomerData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // 載入客戶基本資料
            customer = await CustomerService.GetByIdAsync(CustomerId);
            
            if (customer != null)
            {
                // 載入聯絡方式
                customerContacts = await CustomerService.GetCustomerContactsAsync(CustomerId);
                
                // 載入地址資料
                customerAddresses = await CustomerAddressService.GetByCustomerIdAsync(CustomerId);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入客戶資料失敗：", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeDetailConfiguration()
    {
        if (customer == null) return;

        detailConfiguration = new DetailViewConfiguration
        {
            Title = customer.CompanyName,
            Subtitle = $"客戶編號：{customer.CustomerCode}",
            TitleIcon = "bi bi-building",
            UseTabs = true,
            Sections = new List<DetailSection>
            {
                CreateBasicInfoSection(),
                CreateContactSection(),
                CreateAddressSection()
            }
        };
    }

    private DetailSection CreateBasicInfoSection()
    {
        var items = new List<DetailItem>
        {
            new() { 
                Label = "客戶代碼", 
                Value = customer!.CustomerCode, 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "公司名稱", 
                Value = customer.CompanyName, 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-md-6",
                IsHighlight = true
            },
            new() { 
                Label = "聯絡人", 
                Value = customer.ContactPerson ?? "-", 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "統一編號", 
                Value = customer.TaxNumber ?? "-", 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "客戶類型", 
                Value = customer.CustomerType?.TypeName ?? "-", 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "行業類型", 
                Value = customer.IndustryType?.IndustryTypeName ?? "-", 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "狀態", 
                Value = GetStatusText(customer.Status), 
                DisplayType = DetailDisplayType.Status,                Format = new DetailItemFormat 
                { 
                    StatusColors = new Dictionary<string, string>
                    {
                        { "啟用", "bg-success" },
                        { "停用", "bg-danger" },
                        { "已刪除", "bg-secondary" }
                    }
                },
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "建立日期", 
                Value = customer.CreatedAt, 
                DisplayType = DetailDisplayType.DateTime,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "最後更新", 
                Value = customer.UpdatedAt, 
                DisplayType = DetailDisplayType.DateTime,
                ContainerCssClass = "col-md-6"
            }
        };

        // 加入備註（如果有的話）
        if (!string.IsNullOrWhiteSpace(customer.Remarks))
        {
            items.Add(new DetailItem { 
                Label = "備註", 
                Value = customer.Remarks, 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-12"
            });
        }

        return new DetailSection
        {
            Id = "basic",
            Title = "基本資料",
            Icon = "bi bi-info-circle",
            Items = items
        };
    }

    private DetailSection CreateContactSection()
    {
        var items = new List<DetailItem>();
        
        if (customerContacts.Any())
        {
            foreach (var contact in customerContacts.OrderBy(c => c.ContactType?.TypeName))
            {
                var displayType = GetContactDisplayType(contact.ContactType?.TypeName);
                
                items.Add(new DetailItem 
                { 
                    Label = $"{contact.ContactType?.TypeName ?? "未知類型"}{(contact.IsPrimary ? " (主要)" : "")}", 
                    Value = contact.ContactValue, 
                    DisplayType = displayType,
                    ContainerCssClass = "col-md-6",
                    IsHighlight = contact.IsPrimary
                });
            }
        }
        else
        {
            items.Add(new DetailItem 
            { 
                Label = "聯絡資訊", 
                Value = "暫無聯絡資訊", 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-12"
            });
        }

        return new DetailSection
        {
            Id = "contact",
            Title = "聯絡資訊",
            Icon = "bi bi-telephone",
            Items = items
        };
    }

    private DetailSection CreateAddressSection()
    {
        var items = new List<DetailItem>();
        
        if (customerAddresses.Any())
        {
            foreach (var address in customerAddresses.OrderBy(a => a.AddressType?.TypeName))
            {
                var addressText = BuildAddressText(address);
                
                items.Add(new DetailItem 
                { 
                    Label = $"{address.AddressType?.TypeName ?? "未知類型"}{(address.IsPrimary ? " (主要)" : "")}", 
                    Value = addressText, 
                    DisplayType = DetailDisplayType.Text,
                    ContainerCssClass = "col-12",
                    IsHighlight = address.IsPrimary
                });
            }
        }
        else
        {
            items.Add(new DetailItem 
            { 
                Label = "地址資訊", 
                Value = "暫無地址資訊", 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-12"
            });
        }

        return new DetailSection
        {
            Id = "address",
            Title = "地址資訊",
            Icon = "bi bi-geo-alt",
            Items = items
        };
    }    private string GetStatusText(Data.Enums.EntityStatus status)
    {
        return status switch
        {
            Data.Enums.EntityStatus.Active => "啟用",
            Data.Enums.EntityStatus.Inactive => "停用",
            Data.Enums.EntityStatus.Deleted => "已刪除",
            _ => "未知"
        };
    }

    private DetailDisplayType GetContactDisplayType(string? contactTypeName)
    {
        if (string.IsNullOrEmpty(contactTypeName))
            return DetailDisplayType.Text;

        return contactTypeName.ToLower() switch
        {
            var name when name.Contains("電話") || name.Contains("手機") || name.Contains("傳真") => DetailDisplayType.Phone,
            var name when name.Contains("email") || name.Contains("郵件") || name.Contains("信箱") => DetailDisplayType.Email,
            var name when name.Contains("網站") || name.Contains("網址") => DetailDisplayType.Link,
            _ => DetailDisplayType.Text
        };
    }

    private string BuildAddressText(CustomerAddress address)
    {
        var parts = new List<string>();
        
        if (!string.IsNullOrEmpty(address.PostalCode))
            parts.Add($"({address.PostalCode})");
        
        if (!string.IsNullOrEmpty(address.City))
            parts.Add(address.City);
        
        if (!string.IsNullOrEmpty(address.District))
            parts.Add(address.District);
        
        if (!string.IsNullOrEmpty(address.Address))
            parts.Add(address.Address);

        return parts.Any() ? string.Join(" ", parts) : "地址不完整";
    }

    // Action Buttons
    private RenderFragment ActionButtons => __builder =>
    {
        <button class="btn btn-primary btn-sm me-2" @onclick="EditCustomer">
            <i class="fas fa-edit me-1"></i>編輯
        </button>
        <button class="btn btn-outline-secondary btn-sm me-2" @onclick="PrintCustomer">
            <i class="fas fa-print me-1"></i>列印
        </button>
        <button class="btn btn-outline-primary btn-sm" @onclick="BackToList">
            <i class="fas fa-arrow-left me-1"></i>返回列表
        </button>
    };

    private async Task HandleSectionLoad(string sectionId)
    {
        // 目前所有資料都在初始載入時取得，所以這裡不需要額外處理
        // 未來如果需要延遲載入特定區塊的資料，可以在這裡實作
        await Task.CompletedTask;
    }

    private async Task HandleItemClick(GenericDetailsComponent.DetailItemClickEventArgs args)
    {
        // 處理項目點擊事件
        // 例如：點擊電話號碼撥打電話、點擊電子郵件發送郵件等
        if (args.Item.DisplayType == DetailDisplayType.Phone)
        {
            await JSRuntime.InvokeVoidAsync("window.open", $"tel:{args.Item.Value}");
        }
        else if (args.Item.DisplayType == DetailDisplayType.Email)
        {
            await JSRuntime.InvokeVoidAsync("window.open", $"mailto:{args.Item.Value}");
        }
        else if (args.Item.DisplayType == DetailDisplayType.Link)
        {
            await JSRuntime.InvokeVoidAsync("window.open", args.Item.Value?.ToString(), "_blank");
        }
    }

    private void EditCustomer()
    {
        Navigation.NavigateTo($"/customers/edit/{CustomerId}");
    }

    private async Task PrintCustomer()
    {
        await JSRuntime.InvokeVoidAsync("window.print");
    }    private void BackToList()
    {
        Navigation.NavigateTo("/customers");
    }

    private void BackToCustomerList()
    {
        Navigation.NavigateTo("/customers");
    }
}
