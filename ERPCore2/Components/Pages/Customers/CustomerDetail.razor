@page "/customers/detail/{customerId:int}"
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Badges
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Extensions
@inject ICustomerService CustomerService
@inject ICustomerContactService CustomerContactService
@inject ICustomerAddressService CustomerAddressService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>客戶詳細資料</PageTitle>

<GenericDetailPageComponent TEntity="Customer" 
                           TService="ICustomerService"
                           EntityId="@CustomerId"
                           Entity="@customer"
                           Service="@CustomerService"
                           EntityName="客戶"
                           EntityNamePlural="客戶"
                           IndexRoute="/customers"
                           EditRoute="/customers/edit"
                           LoadingText="載入客戶資料中..."
                           BreadcrumbItems="@breadcrumbItems"
                           DataLoader="@LoadCustomerDataAsync"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           EntityTitleSelector="@(c => c.CompanyName)"
                           EntitySubtitleSelector="@(c => $"統一編號：{c.TaxNumber ?? "未設定"}")"
                           EntityDisplayNameSelector="@(c => c.CompanyName)"
                           OnDataLoaded="@OnCustomerDataLoaded"
                           UseTabLayout="true"
                           TabSections="@GetTabSections()">
</GenericDetailPageComponent>

@code {
    [Parameter] public int CustomerId { get; set; }

    private Customer? customer;
    private List<CustomerContact> customerContacts = new();
    private List<CustomerAddress> customerAddresses = new();
    private bool _isLoading = false; // 防止重複載入

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("客戶管理", "/customers"),
        new("客戶詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Customer?> LoadCustomerDataAsync()
    {
        // 防止重複載入
        if (_isLoading)
        {
            Console.WriteLine("[CustomerDetail] 載入中，跳過重複調用");
            return customer;
        }
        
        try
        {
            _isLoading = true;            if (CustomerId <= 0) return null;
            var result = await CustomerService.GetByIdAsync(CustomerId);
            customer = result; // 保持本地變數同步
            
            // 從已載入的關聯資料中取得聯絡方式和地址
            if (customer != null)
            {
                customerContacts = customer.CustomerContacts?.ToList() ?? new List<CustomerContact>();
                customerAddresses = customer.CustomerAddresses?.ToList() ?? new List<CustomerAddress>();
            }
            
            return result;
        }
        catch (Exception ex)
        {            Console.Error.WriteLine($"[CustomerDetail] 載入客戶資料失敗：{ex.Message}");
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private Task LoadAdditionalDataAsync()
    {
        // 由於GetByIdAsync已經Include所有關聯資料，這裡不需要額外查詢
        // 所有資料已在LoadCustomerDataAsync中處理完成
        return Task.CompletedTask;
    }

    private Task OnCustomerDataLoaded()
    {
        // 資料載入完成後的處理
        StateHasChanged();        
        return Task.CompletedTask;
    }
    private string BuildAddressText(CustomerAddress address)
    {
        var parts = new List<string>();
        
        if (!string.IsNullOrEmpty(address.PostalCode))
            parts.Add($"({address.PostalCode})");
        
        if (!string.IsNullOrEmpty(address.City))
            parts.Add(address.City);
        
        if (!string.IsNullOrEmpty(address.District))
            parts.Add(address.District);
        
        if (!string.IsNullOrEmpty(address.Address))
            parts.Add(address.Address);
        
        return parts.Any() ? string.Join(" ", parts) : "地址不完整";
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Customer, ICustomerService>.TabSection> GetTabSections()
    {        
        return new List<GenericDetailPageComponent<Customer, ICustomerService>.TabSection>
        {           
             new GenericDetailPageComponent<Customer, ICustomerService>.TabSection
            {
                Id = "basic",
                Title = "基本資料",
                Content = @<div>
                    <BasicInfoDisplayComponent 
                        Title="客戶基本資訊"
                        IconClass="fas fa-building"
                        IconColor="text-primary"
                        Fields="@GetCustomerBasicFields()" />
                </div>
            },
              new GenericDetailPageComponent<Customer, ICustomerService>.TabSection
            {
                Id = "contacts",
                Title = "聯絡方式",
                Content = @<div>                    <ContactDisplayComponent 
                        Contacts="@GetContactEntities()"
                        Title="客戶聯絡方式"
                        ShowStatus="true"
                        ShowStatistics="true"
                        ShowCreateButton="false"
                        EmptyTitle="尚未設定聯絡方式"
                        EmptyMessage="此客戶目前沒有任何聯絡方式資料" />
                </div>
            },
            
            new GenericDetailPageComponent<Customer, ICustomerService>.TabSection
            {
                Id = "addresses",
                Title = "地址資料",
                Content = @<div>                    <AddressDisplayComponent 
                        Addresses="@GetAddressEntities()"
                        Title="客戶地址資料"
                        ShowStatus="true"
                        ShowAddressDetails="true"
                        ShowMapLink="true"
                        ShowStatistics="true"
                        ShowCreateButton="false"
                        EmptyTitle="尚未設定地址"
                        EmptyMessage="此客戶目前沒有任何地址資料" />
                </div>
            },
            
            new GenericDetailPageComponent<Customer, ICustomerService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div>
                    <SystemInfoDisplayComponent 
                        CreatedAt="@(customer?.CreatedAt ?? DateTime.MinValue)"
                        UpdatedAt="@customer?.UpdatedAt"
                        CreatedBy="@customer?.CreatedBy"
                        UpdatedBy="@customer?.UpdatedBy"
                        Remarks="@customer?.Remarks"
                        ShowTimeline="true"
                        ShowRemarks="true" />
                </div>
            }        };
    }

    // 取得客戶基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetCustomerBasicFields()
    {
        return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "統一編號",
                Value = customer?.TaxNumber,
                IsPrimary = true,
                ValueBold = true,
                IconClass = "fas fa-id-card",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary",
                EmptyText = "未設定",
                ColSize = 6
            },
            new()
            {
                Label = "公司名稱",
                Value = customer?.CompanyName,
                ValueBold = true,
                IconClass = "fas fa-building",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 6
            },
            new()
            {
                Label = "聯絡人",
                Value = customer?.ContactPerson,
                IconClass = "fas fa-user",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success",
                ColSize = 6
            },
            new()
            {
                Label = "客戶類型",
                Value = customer?.CustomerType?.TypeName,
                IconClass = "fas fa-tags",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning",
                ColSize = 6
            },
            new()
            {
                Label = "行業類型",
                Value = customer?.IndustryType?.IndustryTypeName,
                IconClass = "fas fa-industry",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary",
                ColSize = 6
            },            new()
            {
                Label = "狀態",
                CustomContent = @<div>
                    @if (customer?.Status != null)
                    {
                        <span class="badge @(customer.Status == EntityStatus.Active ? "bg-success" : "bg-secondary")">
                            @(customer.Status == EntityStatus.Active ? "有效" : "無效")
                        </span>
                    }
                </div>,
                IconClass = "fas fa-toggle-on",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success",
                ColSize = 6
            },
            new()
            {
                Label = "備註",
                Value = customer?.Remarks,
                Format = BasicInfoDisplayComponent.FieldFormat.MultiLine,
                IconClass = "fas fa-sticky-note",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning",
                ColSize = 12,
                VisibilityCondition = () => !string.IsNullOrEmpty(customer?.Remarks)
            }        };
    }    // 轉換方法
    private IEnumerable<IContactEntity> GetContactEntities()
    {
        return customerContacts.AsContactDisplayEntities();
    }

    private IEnumerable<IAddressEntity> GetAddressEntities()
    {
        return customerAddresses.AsAddressDisplayEntities();
    }
}
