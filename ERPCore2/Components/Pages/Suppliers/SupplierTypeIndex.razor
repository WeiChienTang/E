@page "/supplier-types"

@inject ISupplierTypeService SupplierTypeService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="SupplierType" 
                          TService="ISupplierTypeService"
                          Service="@SupplierTypeService"
                          EntityBasePath="/supplier-types"                          
                          PageTitle="廠商類型管理"
                          PageSubtitle="管理廠商分類類型設定"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSupplierTypesAsync"
                          FilterApplier="@ApplySupplierTypeFilters"
                          EntityName="廠商類型管理"
                          GetEntityDisplayName="@(supplierType => supplierType.TypeName)"
                          RequiredPermission="SupplierType.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 廠商類型管理編輯 Modal *@
<SupplierTypeEditModalComponent IsVisible="@showEditModal"
                               IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                               SupplierTypeId="@editingSupplierTypeId"
                               OnSupplierTypeSaved="@modalHandler.OnEntitySavedAsync"
                               OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<SupplierType, ISupplierTypeService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingSupplierTypeId = null;
    
    // Modal 處理器
    private ModalHandler<SupplierType, GenericIndexPageComponent<SupplierType, ISupplierTypeService>> modalHandler = default!;
    
    // 欄位配置
    private SupplierTypeFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<SupplierType, GenericIndexPageComponent<SupplierType, ISupplierTypeService>>(
                id => editingSupplierTypeId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 建立欄位配置（傳遞 NotificationService）
            fieldConfiguration = new SupplierTypeFieldConfiguration(NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化廠商類型管理頁面失敗");
            await NotificationService.ShowErrorAsync("初始化廠商類型管理頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "/"),
                new("廠商類型管理管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入廠商類型管理資料
    private async Task<List<SupplierType>> LoadSupplierTypesAsync()
    {
        try
        {
            return await SupplierTypeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSupplierTypesAsync), GetType(), additionalData: "載入廠商類型管理資料失敗");
            await NotificationService.ShowErrorAsync("載入廠商類型管理資料失敗");
            // 設定安全的預設值
            return new List<SupplierType>();
        }
    }

    private IQueryable<SupplierType> ApplySupplierTypeFilters(SearchFilterModel searchModel, IQueryable<SupplierType> query)
    {
        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplySupplierTypeFilters), GetType());
    }
}
