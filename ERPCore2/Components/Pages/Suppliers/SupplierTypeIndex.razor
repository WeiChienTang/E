@page "/supplier-types"

@inject ISupplierTypeService SupplierTypeService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="SupplierType" 
                          TService="ISupplierTypeService"
                          Service="@SupplierTypeService"
                          EntityBasePath="/supplier-types"                          
                          PageTitle="廠商類型"
                          PageSubtitle="管理廠商分類類型設定"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSupplierTypesAsync"
                          FilterApplier="@ApplySupplierTypeFilters"
                          AutoSearch="true"
                          ShowSearchButton="true"
                          SearchDelayMs="500"
                          EntityName="廠商類型"
                          GetEntityDisplayName="@(supplierType => supplierType.TypeName)"
                          RequiredPermission="SupplierType.Read"
                          OnAddClick="@ShowAddModal"
                          OnRowClick="@ShowEditModal"
                          @ref="indexComponent" />

@* 廠商類型編輯 Modal *@
<SupplierTypeEditModalComponent IsVisible="@showEditModal"
                               IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                               SupplierTypeId="@editingSupplierTypeId"
                               OnSupplierTypeSaved="@OnSupplierTypeSaved"
                               OnCancel="@OnModalCancel" />

@code {
    // 組件參考
    private GenericIndexPageComponent<SupplierType, ISupplierTypeService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingSupplierTypeId = null;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.Run(() =>
            {
                InitializeBreadcrumbs();
                InitializeFilters();
                InitializeTableColumns();
            });
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(),
                additionalData: new { Component = "SupplierTypeIndex", Action = "Initialize" }
            );
        }
    }

    // ===== Modal 相關方法 =====

    private async Task ShowAddModal()
    {
        try
        {
            editingSupplierTypeId = null;
            showEditModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowAddModal), GetType());
        }
    }

    private async Task ShowEditModal(SupplierType supplierType)
    {
        try
        {
            if (supplierType?.Id != null)
            {
                editingSupplierTypeId = supplierType.Id;
                showEditModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowEditModal), GetType());
        }
    }

    private async Task OnSupplierTypeSaved(SupplierType savedSupplierType)
    {
        try
        {
            // 關閉 Modal
            showEditModal = false;
            editingSupplierTypeId = null;
            
            // 重新載入資料
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnSupplierTypeSaved), GetType());
        }
    }

    private async Task OnModalCancel()
    {
        try
        {
            showEditModal = false;
            editingSupplierTypeId = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnModalCancel), GetType());
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "/"),
                new("廠商類型管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: new { Component = "SupplierTypeIndex", Action = "InitializeBreadcrumbs" }
            );
        }
    }

    // 載入廠商類型資料
    private async Task<List<SupplierType>> LoadSupplierTypesAsync()
    {
        try
        {
            return await SupplierTypeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSupplierTypesAsync), GetType(),
                additionalData: new { Component = "SupplierTypeIndex", Action = "LoadSupplierTypes" }
            );
            return new List<SupplierType>(); // 回傳空列表作為後備
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("TypeName", "類型名稱", "輸入類型名稱搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFilters), GetType(),
                additionalData: new { Component = "SupplierTypeIndex", Action = "InitializeFilters" }
            );
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("類型名稱", nameof(SupplierType.TypeName)),
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeTableColumns), GetType(),
                additionalData: new { Component = "SupplierTypeIndex", Action = "InitializeTableColumns" }
            );
        }
    }

    // 自定義篩選邏輯
    private IQueryable<SupplierType> ApplySupplierTypeFilters(SearchFilterModel searchModel, IQueryable<SupplierType> query)
    {
        var filterActions = new List<Func<SearchFilterModel, IQueryable<SupplierType>, IQueryable<SupplierType>>>
        {
            // 類型名稱篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "TypeName", st => st.TypeName),
        };

        return FilterHelper.ApplyFiltersWithErrorHandling(
            searchModel,
            query,
            filterActions,
            q => q.OrderBy(st => st.TypeName), // 預設排序
            nameof(ApplySupplierTypeFilters),
            GetType()
        );
    }
}
