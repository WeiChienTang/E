@page "/suppliers/edit"
@page "/suppliers/edit/{id:int?}"
@inject ISupplierService SupplierService
@inject ISupplierAddressService SupplierAddressService
@inject ISupplierContactService SupplierContactService
@inject IContactTypeService ContactTypeService
@inject IAddressTypeService AddressTypeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>@GetPageTitle()</PageTitle>

@* 頁面標題 *@
<GenericHeaderComponent Title="@GetPageTitle()"
                       Subtitle="@GetSubtitle()"
                       TitleIcon="@GetTitleIcon()"
                       HeadingLevel="h1"
                       BreadcrumbItems="@breadcrumbItems"
                       IsLoading="@isLoading"
                       LoadingText="載入中..."
                       ShowDivider="true">    <ActionButtons>
        <EditActionButtonsComponent 
            SaveButtonText="儲存"
            CancelButtonText="取消"
            OnSaveClick="SaveSupplier"
            OnCancelClick="Cancel"
            IsSubmitting="@isSubmitting"
            IsLoading="@isLoading" />
    </ActionButtons>
</GenericHeaderComponent>

@* 主要內容區域 *@
<div class="row">
    <div class="col-12">
        @* 基本資料表單 *@
        <div class="card mb-4">
            <GenericHeaderComponent Title="基本資料"
                                   Subtitle="廠商的基本公司資訊"
                                   TitleIcon="building-gear"
                                   IsCardHeader="true">
            </GenericHeaderComponent>
            <div class="card-body">
                <GenericFormComponent TModel="Supplier"
                                    Model="@supplier"
                                    FieldDefinitions="@basicFormFields"
                                    FieldSections="@basicFormSections"
                                    OnFormSubmit="HandleBasicFormSubmit"
                                    ShowFormHeader="false"
                                    ShowFormButtons="false"
                                    ShowValidationSummary="true"
                                    FormCssClass=""
                                    FormBodyCssClass="">
                </GenericFormComponent>
            </div>
        </div>

        @* 聯絡方式管理 *@
        <div class="card mb-4">
            <GenericHeaderComponent Title="聯絡方式"
                                   Subtitle="@($"管理廠商的聯絡資訊 ({supplierContacts.Count} 筆)")"
                                   TitleIcon="telephone"
                                   IsCardHeader="true">                <ActionButtons>
                    <button class="btn btn-primary" @onclick="AddContact">
                        <i class="bi-plus me-1"></i>
                        新增聯絡方式
                    </button>
                </ActionButtons>
            </GenericHeaderComponent>
            <div class="card-body">
                @if (supplierContacts.Any())
                {
                    <div class="row g-3">
                        @for (int i = 0; i < supplierContacts.Count; i++)
                        {
                            var index = i; // 為了閉包
                            var contact = supplierContacts[index];
                            <div class="col-md-6">
                                <div class="card border-secondary">
                                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                        <small class="fw-bold text-muted">聯絡方式 #@(index + 1)</small>
                                        <div class="btn-group btn-group-sm">
                                            @if (contact.IsPrimary)
                                            {
                                                <span class="badge bg-primary">主要</span>
                                            }
                                            else
                                            {
                                                <button class="btn btn-outline-primary btn-sm" @onclick="() => SetPrimaryContact(index)" title="設為主要">
                                                    <i class="bi bi-star"></i>
                                                </button>
                                            }
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveContact(index)" title="移除">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body p-3">
                                        <div class="row g-2">
                                            <div class="col-12">
                                                <label class="form-label small">聯絡類型</label>
                                                <select class="form-select form-select-sm" @bind="contact.ContactTypeId">
                                                    <option value="">請選擇聯絡類型</option>
                                                    @foreach (var contactType in contactTypes)
                                                    {
                                                        <option value="@contactType.Id">@contactType.TypeName</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label small">聯絡內容</label>
                                                <input type="text" class="form-control form-control-sm" 
                                                       placeholder="請輸入聯絡內容"
                                                       @bind="contact.ContactValue"
                                                       @bind:event="oninput" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-4 text-muted">
                        <i class="bi bi-telephone-slash fs-1 mb-3 d-block"></i>
                        <p>尚未建立聯絡方式</p>
                        <button class="btn btn-outline-primary" @onclick="AddContact">
                            <i class="bi bi-plus me-1"></i>
                            新增第一個聯絡方式
                        </button>
                    </div>
                }
            </div>
        </div>

        @* 地址管理 *@
        <div class="card mb-4">
            <GenericHeaderComponent Title="地址資料"
                                   Subtitle="@($"管理廠商的地址資訊 ({supplierAddresses.Count} 筆)")"
                                   TitleIcon="geo-alt"
                                   IsCardHeader="true">                <ActionButtons>
                    <button class="btn btn-primary" @onclick="AddAddress">
                        <i class="bi-plus me-1"></i>
                        新增地址
                    </button>
                </ActionButtons>
            </GenericHeaderComponent>
            <div class="card-body">
                @if (supplierAddresses.Any())
                {
                    <div class="row g-3">
                        @for (int i = 0; i < supplierAddresses.Count; i++)
                        {
                            var index = i; // 為了閉包
                            var address = supplierAddresses[index];
                            <div class="col-md-6">
                                <div class="card border-secondary">
                                    <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                        <small class="fw-bold text-muted">地址 #@(index + 1)</small>
                                        <div class="btn-group btn-group-sm">
                                            @if (address.IsPrimary)
                                            {
                                                <span class="badge bg-primary">主要</span>
                                            }
                                            else
                                            {
                                                <button class="btn btn-outline-primary btn-sm" @onclick="() => SetPrimaryAddress(index)" title="設為主要">
                                                    <i class="bi bi-star"></i>
                                                </button>
                                            }
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveAddress(index)" title="移除">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body p-3">
                                        <div class="row g-2">
                                            <div class="col-12">
                                                <label class="form-label small">地址類型</label>
                                                <select class="form-select form-select-sm" @bind="address.AddressTypeId">
                                                    <option value="">請選擇地址類型</option>
                                                    @foreach (var addressType in addressTypes)
                                                    {
                                                        <option value="@addressType.Id">@addressType.TypeName</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-6">
                                                <label class="form-label small">郵遞區號</label>
                                                <input type="text" class="form-control form-control-sm" 
                                                       placeholder="郵遞區號"
                                                       @bind="address.PostalCode"
                                                       @bind:event="oninput" />
                                            </div>
                                            <div class="col-6">
                                                <label class="form-label small">城市</label>
                                                <input type="text" class="form-control form-control-sm" 
                                                       placeholder="城市"
                                                       @bind="address.City"
                                                       @bind:event="oninput" />
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label small">行政區</label>
                                                <input type="text" class="form-control form-control-sm" 
                                                       placeholder="行政區"
                                                       @bind="address.District"
                                                       @bind:event="oninput" />
                                            </div>
                                            <div class="col-12">
                                                <label class="form-label small">詳細地址</label>
                                                <textarea class="form-control form-control-sm" 
                                                          rows="2" 
                                                          placeholder="詳細地址"
                                                          @bind="address.Address"
                                                          @bind:event="oninput"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-4 text-muted">
                        <i class="bi bi-geo-alt-slash fs-1 mb-3 d-block"></i>
                        <p>尚未建立地址資料</p>
                        <button class="btn btn-outline-primary" @onclick="AddAddress">
                            <i class="bi bi-plus me-1"></i>
                            新增第一個地址
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 資料模型
    private Supplier supplier = new();
    private List<SupplierContact> supplierContacts = new();
    private List<SupplierAddress> supplierAddresses = new();
    
    // 選項清單
    private List<SupplierType> supplierTypes = new();
    private List<IndustryType> industryTypes = new();
    private List<ContactType> contactTypes = new();
    private List<AddressType> addressTypes = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> basicFormFields = new();
    private Dictionary<string, string> basicFormSections = new();
    
    // 狀態管理
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool isEditMode => Id.HasValue && Id.Value > 0;
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await InitializePageAsync();
    }

    private async Task InitializePageAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // 初始化麵包屑
            InitializeBreadcrumbs();
            
            // 載入基礎資料
            await LoadBasicDataAsync();
            
            // 初始化表單欄位
            InitializeFormFields();
            
            if (isEditMode)
            {
                // 編輯模式：載入現有廠商資料
                await LoadSupplierDataAsync(Id!.Value);
            }
            else
            {
                // 新增模式：初始化新廠商
                InitializeNewSupplier();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入廠商資料時發生錯誤：", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"載入資料失敗：{ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("廠商管理", "/suppliers"),
            new(isEditMode ? "編輯廠商" : "新增廠商")
        };
    }    private async Task LoadBasicDataAsync()
    {
        supplierTypes = await SupplierService.GetSupplierTypesAsync();
        industryTypes = await SupplierService.GetIndustryTypesAsync();
        contactTypes = await ContactTypeService.GetActiveAsync();
        addressTypes = await AddressTypeService.GetActiveAsync();
    }

    private void InitializeFormFields()
    {
        // 廠商類型選項
        var supplierTypeOptions = supplierTypes.Select(st => new SelectOption
        {
            Text = st.TypeName,
            Value = st.Id.ToString()
        }).ToList();

        // 行業類型選項
        var industryTypeOptions = industryTypes.Select(it => new SelectOption
        {
            Text = it.IndustryTypeName,
            Value = it.Id.ToString()
        }).ToList();

        basicFormFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = nameof(Supplier.SupplierCode),
                Label = "廠商代碼",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入廠商代碼",
                IsRequired = true,
                ContainerCssClass = "col-md-4"
            },
            new()
            {
                PropertyName = nameof(Supplier.CompanyName),
                Label = "公司名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入公司名稱",
                IsRequired = true,
                ContainerCssClass = "col-md-8"
            },
            new()
            {
                PropertyName = nameof(Supplier.ContactPerson),
                Label = "聯絡人",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入聯絡人姓名",
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Supplier.TaxNumber),
                Label = "統一編號",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入統一編號",
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Supplier.SupplierTypeId),
                Label = "廠商類型",
                FieldType = FormFieldType.Select,
                Options = supplierTypeOptions,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Supplier.IndustryTypeId),
                Label = "行業類型",
                FieldType = FormFieldType.Select,
                Options = industryTypeOptions,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Supplier.PaymentTerms),
                Label = "付款條件",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入付款條件",
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Supplier.CreditLimit),
                Label = "信用額度",
                FieldType = FormFieldType.Number,
                Placeholder = "請輸入信用額度",
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Supplier.Remarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入備註",
                ContainerCssClass = "col-12"
            }
        };        basicFormSections = new Dictionary<string, string>
        {
            { nameof(Supplier.SupplierCode), "基本資訊" },
            { nameof(Supplier.CompanyName), "基本資訊" },
            { nameof(Supplier.ContactPerson), "基本資訊" },
            { nameof(Supplier.TaxNumber), "基本資訊" },
            { nameof(Supplier.SupplierTypeId), "分類資訊" },
            { nameof(Supplier.IndustryTypeId), "分類資訊" },
            { nameof(Supplier.PaymentTerms), "財務資訊" },
            { nameof(Supplier.CreditLimit), "財務資訊" },
            { nameof(Supplier.Remarks), "其他資訊" }
        };}    private async Task LoadSupplierDataAsync(int supplierId)
    {
        var result = await SupplierService.GetByIdAsync(supplierId);
        if (result != null)
        {
            supplier = result;
            
            // 載入聯絡方式
            supplierContacts = await SupplierService.GetSupplierContactsAsync(supplierId);
            
            // 載入地址資料
            supplierAddresses = await SupplierService.GetSupplierAddressesAsync(supplierId);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "找不到指定的廠商資料");
            Navigation.NavigateTo("/suppliers");
        }
    }    private void InitializeNewSupplier()
    {
        supplier = new Supplier
        {
            Status = EntityStatus.Active,
            CreatedAt = DateTime.Now
        };
        
        // 初始化空的聯絡方式清單
        supplierContacts = new List<SupplierContact>();
        
        // 初始化空的地址資料清單
        supplierAddresses = new List<SupplierAddress>();
    }

    private async Task HandleBasicFormSubmit(object model)
    {
        // 基本表單提交處理
        if (model is Supplier submittedSupplier)
        {
            supplier = submittedSupplier;
        }
        await Task.CompletedTask;
    }

    private async Task SaveSupplier()
    {
        try
        {
            isSubmitting = true;
            StateHasChanged();

            ServiceResult<Supplier> result;
            
            if (isEditMode)
            {
                // 更新廠商
                result = await SupplierService.UpdateAsync(supplier);
                if (result.IsSuccess)
                {
                    // 更新聯絡方式
                    await SupplierService.UpdateSupplierContactsAsync(supplier.Id, supplierContacts);
                    
                    // 更新地址資料
                    await SupplierService.UpdateSupplierAddressesAsync(supplier.Id, supplierAddresses);
                }
            }
            else
            {
                // 新增廠商
                result = await SupplierService.CreateAsync(supplier);
                if (result.IsSuccess && result.Data != null)
                {
                    supplier = result.Data;
                    
                    // 設定聯絡方式的廠商ID
                    foreach (var contact in supplierContacts)
                    {
                        contact.SupplierId = supplier.Id;
                    }
                    await SupplierService.UpdateSupplierContactsAsync(supplier.Id, supplierContacts);
                    
                    // 設定地址的廠商ID
                    foreach (var address in supplierAddresses)
                    {
                        address.SupplierId = supplier.Id;
                    }
                    await SupplierService.UpdateSupplierAddressesAsync(supplier.Id, supplierAddresses);
                }
            }

            if (result.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"廠商{(isEditMode ? "更新" : "新增")}成功！");
                Navigation.NavigateTo("/suppliers");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"儲存失敗：{result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"儲存時發生錯誤：{ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task Cancel()
    {
        Navigation.NavigateTo("/suppliers");
        await Task.CompletedTask;
    }

    #region 聯絡方式管理

    private async Task AddContact()
    {
        var newContact = SupplierContactService.CreateNewContact(supplier.Id, supplierContacts.Count);
        supplierContacts.Add(newContact);
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task RemoveContact(int index)
    {
        if (index >= 0 && index < supplierContacts.Count)
        {
            supplierContacts.RemoveAt(index);
            
            // 重新檢查主要聯絡方式
            SupplierContactService.EnsurePrimaryContactExists(supplierContacts);
            StateHasChanged();
        }
        await Task.CompletedTask;
    }

    private async Task SetPrimaryContact(int index)
    {
        if (index >= 0 && index < supplierContacts.Count)
        {
            // 清除所有主要標記
            foreach (var contact in supplierContacts)
            {
                contact.IsPrimary = false;
            }
            
            // 設定新的主要聯絡方式
            supplierContacts[index].IsPrimary = true;
            StateHasChanged();
        }
        await Task.CompletedTask;
    }

    #endregion

    #region 地址管理

    private async Task AddAddress()
    {
        var newAddress = SupplierAddressService.CreateNewAddress(supplier.Id, supplierAddresses.Count);
        supplierAddresses.Add(newAddress);
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task RemoveAddress(int index)
    {
        if (index >= 0 && index < supplierAddresses.Count)
        {
            supplierAddresses.RemoveAt(index);
            
            // 重新檢查主要地址
            SupplierAddressService.EnsurePrimaryAddressExists(supplierAddresses);
            StateHasChanged();
        }
        await Task.CompletedTask;
    }

    private async Task SetPrimaryAddress(int index)
    {
        if (index >= 0 && index < supplierAddresses.Count)
        {
            // 清除所有主要標記
            foreach (var address in supplierAddresses)
            {
                address.IsPrimary = false;
            }
            
            // 設定新的主要地址
            supplierAddresses[index].IsPrimary = true;
            StateHasChanged();
        }
        await Task.CompletedTask;
    }

    #endregion

    #region 輔助方法

    private string GetPageTitle()
    {
        return isEditMode ? "編輯廠商" : "新增廠商";
    }

    private string GetSubtitle()
    {
        if (isEditMode && !string.IsNullOrEmpty(supplier.CompanyName))
        {
            return $"編輯廠商「{supplier.CompanyName}」的詳細資料";
        }
        return "建立新的廠商資料，包含基本資訊、聯絡方式和地址";
    }

    private string GetTitleIcon()
    {
        return isEditMode ? "pencil-square" : "plus-circle";
    }

    #endregion
}
