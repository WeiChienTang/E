@page "/suppliers/edit"
@page "/suppliers/edit/{id:int?}"
@inject ISupplierService SupplierService
@inject ISupplierAddressService SupplierAddressService
@inject ISupplierContactService SupplierContactService
@inject IContactTypeService ContactTypeService
@inject IAddressTypeService AddressTypeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using ERPCore2.Components.Shared.SubCollections
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>@GetPageTitle()</PageTitle>

<GenericEditPageComponent TEntity="Supplier" 
                         TService="ISupplierService"
                         Id="@Id"
                         Entity="@supplier"
                         Service="@SupplierService"
                         EntityName="廠商"
                         EntityNamePlural="廠商"
                         FormTitle="基本資料"
                         FormSubtitle="廠商的基本公司資訊"
                         FormIcon="building-gear"
                         IndexRoute="/suppliers"
                         UseGenericForm="true"
                         FormFields="@basicFormFields"
                         FormSections="@basicFormSections"
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadSupplierData"
                         SaveHandler="@SaveSupplier"
                         AdditionalDataLoader="@LoadAdditionalData">    
                         <AdditionalSections>        @* 聯絡方式管理 *@

        <ContactManagerComponent TContactEntity="SupplierContact"
                               TParentEntity="Supplier"
                               Items="@supplierContacts"
                               Options="@(contactTypes.Cast<ERPCore2.Data.BaseEntity>().ToList())"
                               ParentEntityId="@supplier.Id"
                               GetIsPrimary="@(c => c.IsPrimary)"
                               GetTypeId="@(c => c.ContactTypeId)"
                               GetContactValue="@(c => c.ContactValue)"
                               SetIsPrimary="@((c, isPrimary) => c.IsPrimary = isPrimary)"
                               SetTypeId="@((c, typeId) => c.ContactTypeId = typeId)"
                               SetContactValue="@((c, value) => c.ContactValue = value)"
                               SetParentId="@((c, parentId) => c.SupplierId = parentId)"
                               ItemsChanged="@OnSupplierContactsChanged" />
                               
                               @* 地址管理 *@
        <AddressManagerComponent TAddressEntity="SupplierAddress"
                               TParentEntity="Supplier"
                               Items="@supplierAddresses"
                               Options="@(addressTypes.Cast<ERPCore2.Data.BaseEntity>().ToList())"
                               ParentEntityId="@supplier.Id"
                               GetIsPrimary="@(a => a.IsPrimary)"
                               GetTypeId="@(a => a.AddressTypeId)"
                               GetPostalCode="@(a => a.PostalCode)"
                               GetCity="@(a => a.City)"
                               GetDistrict="@(a => a.District)"
                               GetAddress="@(a => a.Address)"
                               SetIsPrimary="@((a, isPrimary) => a.IsPrimary = isPrimary)"
                               SetTypeId="@((a, typeId) => a.AddressTypeId = typeId)"
                               SetPostalCode="@((a, postalCode) => a.PostalCode = postalCode)"
                               SetCity="@((a, city) => a.City = city)"
                               SetDistrict="@((a, district) => a.District = district)"
                               SetAddress="@((a, address) => a.Address = address)"
                               SetParentId="@((a, parentId) => a.SupplierId = parentId)"
                               ItemsChanged="@OnSupplierAddressesChanged" />
    </AdditionalSections>
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 資料模型
    private Supplier supplier = new();
    private List<SupplierContact> supplierContacts = new();
    private List<SupplierAddress> supplierAddresses = new();
    
    // 選項清單
    private List<SupplierType> supplierTypes = new();
    private List<IndustryType> industryTypes = new();
    private List<ContactType> contactTypes = new();
    private List<AddressType> addressTypes = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> basicFormFields = new();
    private Dictionary<string, string> basicFormSections = new();
    
    // 防止重複載入
    private bool _isLoadingData = false;
    private readonly SemaphoreSlim _loadingSemaphore = new(1, 1);
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        InitializeBreadcrumbs();
        await LoadAdditionalData();
    }    protected override Task OnParametersSetAsync()
    {
        // 當參數變化時（例如從 Detail 導航到 Edit），重新初始化麵包屑
        InitializeBreadcrumbs();
        return Task.CompletedTask;
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("廠商管理", "/suppliers"),
            new(Id.HasValue ? "編輯廠商" : "新增廠商")
        };
    }

    private async Task LoadAdditionalData()
    {
        await _loadingSemaphore.WaitAsync();
        try
        {
            if (_isLoadingData) return; // 防止重複載入
            
            _isLoadingData = true;
            
            // 順序執行以避免DbContext併發問題
            supplierTypes = await SupplierService.GetSupplierTypesAsync();
            industryTypes = await SupplierService.GetIndustryTypesAsync();
            contactTypes = await ContactTypeService.GetActiveAsync();
            addressTypes = await AddressTypeService.GetActiveAsync();
            
            // 在載入完基礎資料後初始化表單欄位
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"載入額外資料時發生錯誤：{ex.Message}");
            // 初始化空列表以防止UI錯誤
            supplierTypes = new List<SupplierType>();
            industryTypes = new List<IndustryType>();
            contactTypes = new List<ContactType>();
            addressTypes = new List<AddressType>();
            InitializeFormFields(); // 即使出錯也要初始化表單欄位
        }
        finally
        {
            _isLoadingData = false;
            _loadingSemaphore.Release();
        }
    }

    private void InitializeFormFields()
    {
        // 廠商類型選項
        var supplierTypeOptions = supplierTypes.Select(st => new SelectOption
        {
            Text = st.TypeName,
            Value = st.Id.ToString()
        }).ToList();

        // 行業類型選項
        var industryTypeOptions = industryTypes.Select(it => new SelectOption
        {
            Text = it.IndustryTypeName,
            Value = it.Id.ToString()
        }).ToList();

        basicFormFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = nameof(Supplier.SupplierCode),
                Label = "廠商代碼",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入廠商代碼",
                IsRequired = true,
                ContainerCssClass = "col-md-4"
            },
            new()
            {
                PropertyName = nameof(Supplier.CompanyName),
                Label = "公司名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入公司名稱",
                IsRequired = true,
                ContainerCssClass = "col-md-8"
            },
            new()
            {
                PropertyName = nameof(Supplier.ContactPerson),
                Label = "聯絡人",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入聯絡人姓名",
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Supplier.TaxNumber),
                Label = "統一編號",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入統一編號",
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Supplier.SupplierTypeId),
                Label = "廠商類型",
                FieldType = FormFieldType.Select,
                Options = supplierTypeOptions,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Supplier.IndustryTypeId),
                Label = "行業類型",
                FieldType = FormFieldType.Select,
                Options = industryTypeOptions,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Supplier.PaymentTerms),
                Label = "付款條件",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入付款條件",
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Supplier.CreditLimit),
                Label = "信用額度",
                FieldType = FormFieldType.Number,
                Placeholder = "請輸入信用額度",
                ContainerCssClass = "col-md-6"
            }
        };

        basicFormSections = new Dictionary<string, string>
        {
            { nameof(Supplier.SupplierCode), "基本資訊" },
            { nameof(Supplier.CompanyName), "基本資訊" },
            { nameof(Supplier.ContactPerson), "聯絡資訊" },
            { nameof(Supplier.TaxNumber), "財務資訊" },
            { nameof(Supplier.SupplierTypeId), "分類資訊" },
            { nameof(Supplier.IndustryTypeId), "分類資訊" },
            { nameof(Supplier.PaymentTerms), "財務資訊" },
            { nameof(Supplier.CreditLimit), "財務資訊" }
        };
    }

    private async Task<Supplier?> LoadSupplierData()
    {
        await _loadingSemaphore.WaitAsync();
        try
        {
            if (!Id.HasValue) 
            {
                var newSupplier = new Supplier
                {
                    SupplierCode = GenerateSupplierCode(),
                    CompanyName = "",
                    ContactPerson = "",
                    TaxNumber = "",
                    Status = EntityStatus.Active
                };
                supplier = newSupplier;
                supplierContacts = new List<SupplierContact>();
                supplierAddresses = new List<SupplierAddress>();
                return newSupplier;
            }

            // 載入廠商基本資料
            var loadedSupplier = await SupplierService.GetByIdAsync(Id.Value);
            if (loadedSupplier != null)
            {
                supplier = loadedSupplier;
                
                // 載入聯絡方式
                supplierContacts = await SupplierService.GetSupplierContactsAsync(Id.Value);
                
                // 載入地址資料
                supplierAddresses = await SupplierAddressService.GetBySupplierIdAsync(Id.Value);
                
                // 觸發 UI 更新
                StateHasChanged();
                
                return supplier;
            }
            else
            {
                // 如果找不到廠商，建立新的
                supplier = new Supplier();
                supplierContacts = new List<SupplierContact>();
                supplierAddresses = new List<SupplierAddress>();
                return supplier;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入廠商詳細資料失敗：", ex.Message);
            throw;
        }
        finally
        {
            _loadingSemaphore.Release();
        }
    }

    private string GenerateSupplierCode()
    {
        return $"S{DateTime.Now:yyyyMMddHHmmss}";
    }

    private string GetPageTitle()
    {
        return Id.HasValue ? "編輯廠商" : "新增廠商";
    }

    private async Task<bool> SaveSupplier(Supplier entity)
    {
        try
        {
            // 驗證基本資料
            if (string.IsNullOrWhiteSpace(entity.SupplierCode))
            {
                await JSRuntime.InvokeVoidAsync("alert", "廠商代碼為必填");
                return false;
            }

            if (string.IsNullOrWhiteSpace(entity.CompanyName))
            {
                await JSRuntime.InvokeVoidAsync("alert", "公司名稱為必填");
                return false;
            }

            ServiceResult result;
            
            if (Id.HasValue)
            {
                // 更新現有廠商
                result = await SupplierService.UpdateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新聯絡方式
                    await SupplierService.UpdateSupplierContactsAsync(entity.Id, supplierContacts);
                    
                    // 更新地址資料
                    await SupplierAddressService.UpdateSupplierAddressesAsync(entity.Id, supplierAddresses);
                }
            }
            else
            {
                // 新增廠商
                result = await SupplierService.CreateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新聯絡方式的廠商ID
                    foreach (var contact in supplierContacts)
                    {
                        contact.SupplierId = entity.Id;
                    }
                    
                    // 更新地址的廠商ID
                    foreach (var address in supplierAddresses)
                    {
                        address.SupplierId = entity.Id;
                    }
                    
                    // 儲存聯絡方式和地址
                    await SupplierService.UpdateSupplierContactsAsync(entity.Id, supplierContacts);
                    await SupplierAddressService.UpdateSupplierAddressesAsync(entity.Id, supplierAddresses);
                }
            }

            if (result.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", "廠商資料儲存成功！");
                return true;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"儲存失敗：{result.ErrorMessage}");
                return false;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "儲存廠商資料時發生錯誤：", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"儲存時發生錯誤：{ex.Message}");
            return false;
        }    }

#region 事件處理方法

    private Task OnSupplierContactsChanged(List<SupplierContact> updatedContacts)
    {
        supplierContacts = updatedContacts;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnSupplierAddressesChanged(List<SupplierAddress> updatedAddresses)
    {
        supplierAddresses = updatedAddresses;
        StateHasChanged();
        return Task.CompletedTask;
    }

#endregion

    public void Dispose()
    {
        _loadingSemaphore?.Dispose();
    }
}
