@page "/suppliers/edit"
@page "/suppliers/edit/{id:int?}"

@inject ISupplierService SupplierService
@inject IAddressService AddressService
@inject IContactService ContactService
@inject IContactTypeService ContactTypeService
@inject IAddressTypeService AddressTypeService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IErrorLogService ErrorLogService

@inject INotificationService NotificationService
@rendermode InteractiveServer
@implements IDisposable

<GenericEditPageComponent TEntity="Supplier" 
                         TService="ISupplierService"
                         Id="@Id"
                         Entity="@supplier"
                         Service="@SupplierService"
                         RequiredPermission="Supplier.Read"
                             EntityName="廠商"
                             EntityNamePlural="廠商"
                             PageTitle="@GetPageTitle()"
                             FormTitle="基本資料"
                             FormSubtitle="廠商的基本公司資訊"
                             IndexRoute="/suppliers"
                         UseGenericForm="true"
                         FormFields="@basicFormFields"
                         FormSections="@basicFormSections"
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadSupplierData"
                         SaveHandler="@SaveSupplier"
                         AdditionalDataLoader="@LoadAdditionalData">    
                         <AdditionalSections>        
                        
                        @* 聯絡方式管理 *@
        <ContactManagerComponent TContactEntity="Contact"
                               TParentEntity="Supplier"
                               Items="@supplierContacts"
                               Options="@(contactTypes.Cast<ERPCore2.Data.BaseEntity>().ToList())"
                               ParentEntityId="@supplier.Id"
                               GetIsPrimary="@(c => c.IsPrimary)"
                               GetTypeId="@(c => c.ContactTypeId)"
                               GetContactValue="@(c => c.ContactValue)"
                               SetIsPrimary="@((c, isPrimary) => c.IsPrimary = isPrimary)"
                               SetTypeId="@((c, typeId) => c.ContactTypeId = typeId)"
                               SetContactValue="@((c, value) => c.ContactValue = value)"
                               SetParentId="@((c, parentId) => { c.OwnerType = ContactOwnerTypes.Supplier; c.OwnerId = parentId; })"
                               ItemsChanged="@OnSupplierContactsChanged" />
                               
                               @* 地址管理 *@
        <AddressManagerComponent TAddressEntity="Address"
                               TParentEntity="Supplier"
                               Items="@supplierAddresses"
                               Options="@(addressTypes.Cast<ERPCore2.Data.BaseEntity>().ToList())"
                               ParentEntityId="@supplier.Id"
                               GetIsPrimary="@(a => a.IsPrimary)"
                               GetTypeId="@(a => a.AddressTypeId)"
                               GetPostalCode="@(a => a.PostalCode)"
                               GetCity="@(a => a.City)"
                               GetAddress="@(a => a.AddressLine)"
                               SetIsPrimary="@((a, isPrimary) => a.IsPrimary = isPrimary)"
                               SetTypeId="@((a, typeId) => a.AddressTypeId = typeId)"
                               SetPostalCode="@((a, postalCode) => a.PostalCode = postalCode)"
                               SetCity="@((a, city) => a.City = city)"
                               SetAddress="@((a, address) => a.AddressLine = address)"
                               SetParentId="@((a, parentId) => SetSupplierIdForAddress(a, parentId))"
                               ItemsChanged="@OnSupplierAddressesChanged" />
    </AdditionalSections>
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 資料模型
    private Supplier supplier = new();
    private List<Contact> supplierContacts = new();
    private List<Address> supplierAddresses = new();
    
    // 選項清單
    private List<SupplierType> supplierTypes = new();
    private List<ContactType> contactTypes = new();
    private List<AddressType> addressTypes = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> basicFormFields = new();
    private Dictionary<string, string> basicFormSections = new();
    
    // 防止重複載入
    private bool _isLoadingData = false;
    private readonly SemaphoreSlim _loadingSemaphore = new(1, 1);
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            await LoadAdditionalData();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(),
                additionalData: new { Id });
        }
    }    protected override Task OnParametersSetAsync()
    {
        try
        {
            // 當參數變化時（例如從 Detail 導航到 Edit），重新初始化麵包屑
            InitializeBreadcrumbs();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnParametersSetAsync), GetType(),
                additionalData: new { Id });
            return Task.CompletedTask;
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("廠商管理", "/suppliers"),
                new(Id.HasValue ? "編輯廠商" : "新增廠商")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: new { Id });
        }
    }

    private async Task LoadAdditionalData()
    {
        await _loadingSemaphore.WaitAsync();
        try
        {
            if (_isLoadingData) return; // 防止重複載入
            
            _isLoadingData = true;
            
            // 順序執行以避免DbContext併發問題
            supplierTypes = await SupplierService.GetSupplierTypesAsync();
            contactTypes = await ContactTypeService.GetActiveAsync();
            addressTypes = await AddressTypeService.GetActiveAsync();
            
            // 在載入完基礎資料後初始化表單欄位
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAdditionalData), GetType(),
                additionalData: new { Id, _isLoadingData });
            // 初始化空列表以防止UI錯誤
            supplierTypes = new List<SupplierType>();
            contactTypes = new List<ContactType>();
            addressTypes = new List<AddressType>();
            InitializeFormFields(); // 即使出錯也要初始化表單欄位
        }
        finally
        {
            _isLoadingData = false;
            _loadingSemaphore.Release();
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            // 廠商類型選項
            var supplierTypeOptions = supplierTypes.Select(st => new SelectOption
            {
                Text = st.TypeName,
                Value = st.Id.ToString()
            }).ToList();

            basicFormFields = new List<FormFieldDefinition>
            {
                // ...existing form fields...
                new()
                {
                    PropertyName = nameof(Supplier.SupplierCode),
                    Label = "廠商代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入廠商代碼",
                    IsRequired = true,
                },
                new()
                {
                    PropertyName = nameof(Supplier.CompanyName),
                    Label = "公司名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司名稱",
                    IsRequired = true,
                },
                new()
                {
                    PropertyName = nameof(Supplier.ContactPerson),
                    Label = "聯絡人",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入聯絡人姓名",
                    
                },
                new()
                {
                    PropertyName = nameof(Supplier.TaxNumber),
                    Label = "統一編號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入統一編號",
                    
                },
                new()
                {
                    PropertyName = nameof(Supplier.SupplierTypeId),
                    Label = "廠商類型",
                    FieldType = FormFieldType.Select,
                    Options = supplierTypeOptions,
                    
                }
            };

            basicFormSections = new Dictionary<string, string>
            {
                { nameof(Supplier.SupplierCode), "基本資訊" },
                { nameof(Supplier.CompanyName), "基本資訊" },
                { nameof(Supplier.ContactPerson), "聯絡資訊" },
                { nameof(Supplier.TaxNumber), "財務資訊" },
                { nameof(Supplier.SupplierTypeId), "分類資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFields), GetType(),
                additionalData: new { 
                    SupplierTypesCount = supplierTypes?.Count ?? 0
                });
        }
    }

    private async Task<Supplier?> LoadSupplierData()
    {
        await _loadingSemaphore.WaitAsync();
        try
        {
            if (!Id.HasValue) 
            {
                var newSupplier = new Supplier
                {
                    SupplierCode = GenerateSupplierCode(),
                    CompanyName = "",
                    ContactPerson = "",
                    TaxNumber = "",
                    Status = EntityStatus.Active
                };
                supplier = newSupplier;
                supplierContacts = new List<Contact>();
                supplierAddresses = new List<Address>();
                return newSupplier;
            }

            // 載入廠商基本資料
            var loadedSupplier = await SupplierService.GetByIdAsync(Id.Value);
            if (loadedSupplier != null)
            {
                supplier = loadedSupplier;
                
                // 載入聯絡方式
                supplierContacts = await ContactService.GetByOwnerAsync(ContactOwnerTypes.Supplier, Id.Value);
                
                // 載入地址資料
                supplierAddresses = await AddressService.GetSupplierAddressesAsync(Id.Value);
                
                // 觸發 UI 更新
                StateHasChanged();
                
                return supplier;
            }
            else
            {
                // 如果找不到廠商，建立新的
                supplier = new Supplier();
                supplierContacts = new List<Contact>();
                supplierAddresses = new List<Address>();
                return supplier;
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSupplierData), GetType(),
                additionalData: new { Id, SupplierId = supplier?.Id });
            throw;
        }
        finally
        {
            _loadingSemaphore.Release();
        }
    }

    private string GenerateSupplierCode()
    {
        try
        {
            return $"S{DateTime.Now:yyyyMMddHHmmss}";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GenerateSupplierCode), GetType(),
                additionalData: new { Timestamp = DateTime.Now });
            return string.Empty;
        }
    }

    private string GetPageTitle()
    {
        try
        {
            return Id.HasValue ? "編輯廠商" : "新增廠商";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetPageTitle), GetType(),
                additionalData: new { Id });
            return "廠商管理";
        }
    }

    private void SetSupplierIdForAddress(Address address, int parentId)
    {
        address.OwnerId = parentId;
        address.OwnerType = AddressOwnerTypes.Supplier;
    }

    private async Task UpdateSupplierAddressesAsync(int supplierId, List<Address> addresses)
    {
        try
        {
            // 確保所有地址都有正確的 OwnerType 和 OwnerId
            foreach (var address in addresses)
            {
                SetSupplierIdForAddress(address, supplierId);
                
                if (address.Id == 0)
                {
                    // 新增地址
                    await AddressService.CreateAddressAsync(AddressOwnerTypes.Supplier, supplierId, address);
                }
                else
                {
                    // 更新地址
                    await AddressService.UpdateAddressAsync(address);
                }
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(UpdateSupplierAddressesAsync), GetType(),
                additionalData: new { SupplierId = supplierId, AddressCount = addresses?.Count ?? 0 });
            throw;
        }
    }    
    private async Task<bool> SaveSupplier(Supplier entity)
    {
        try
        {
            // 基本驗證 - 使用通知服務
            if (string.IsNullOrWhiteSpace(entity.SupplierCode))
            {
                await NotificationService.ShowErrorAsync("廠商代碼為必填");
                return false;
            }

            if (string.IsNullOrWhiteSpace(entity.CompanyName))
            {
                await NotificationService.ShowErrorAsync("公司名稱為必填");
                return false;
            }

            ServiceResult result;
            
            if (Id.HasValue)
            {
                // 更新現有廠商
                result = await SupplierService.UpdateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新聯絡方式和地址資料
                    // ContactManagerComponent 會自動處理聯絡人的保存
                    await UpdateSupplierAddressesAsync(entity.Id, supplierAddresses);
                }
            }
            else
            {
                // 新增廠商
                result = await SupplierService.CreateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新聯絡方式的擁有者資訊
                    foreach (var contact in supplierContacts)
                    {
                        contact.OwnerType = ContactOwnerTypes.Supplier;
                        contact.OwnerId = entity.Id;
                    }
                    
                    // 更新地址的廠商ID
                    foreach (var address in supplierAddresses)
                    {
                        SetSupplierIdForAddress(address, entity.Id);
                    }
                    
                    // 儲存聯絡方式和地址
                    // ContactManagerComponent 會自動處理聯絡人的保存
                    await UpdateSupplierAddressesAsync(entity.Id, supplierAddresses);
                }
            }

            // 讓 GenericEditPageComponent 處理通用的成功/失敗訊息
            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveSupplier), GetType(),
                additionalData: new { 
                    Id, 
                    EntityId = entity?.Id,
                    SupplierCode = entity?.SupplierCode,
                    CompanyName = entity?.CompanyName,
                    ContactsCount = supplierContacts?.Count ?? 0,
                    AddressesCount = supplierAddresses?.Count ?? 0
                });
            return false;
        }
    }

#region 事件處理方法

    private Task OnSupplierContactsChanged(List<Contact> updatedContacts)
    {
        try
        {
            supplierContacts = updatedContacts;
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnSupplierContactsChanged), GetType(),
                additionalData: new { 
                    ContactsCount = updatedContacts?.Count ?? 0,
                    SupplierId = supplier?.Id 
                });
            return Task.CompletedTask;
        }
    }

    private Task OnSupplierAddressesChanged(List<Address> updatedAddresses)
    {
        try
        {
            supplierAddresses = updatedAddresses;
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnSupplierAddressesChanged), GetType(),
                additionalData: new { 
                    AddressesCount = updatedAddresses?.Count ?? 0,
                    SupplierId = supplier?.Id 
                });
            return Task.CompletedTask;
        }
    }

#endregion

    public void Dispose()
    {
        try
        {
            _loadingSemaphore?.Dispose();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(Dispose), GetType(),
                additionalData: new { SemaphoreDisposed = _loadingSemaphore?.CurrentCount });
        }
    }
}
