@page "/suppliers/detail/{supplierId:int}"
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Badges
@using ERPCore2.Components.Shared.Buttons
@inject ISupplierService SupplierService
@inject ISupplierContactService SupplierContactService
@inject ISupplierAddressService SupplierAddressService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>廠商詳細資料</PageTitle>

<GenericDetailPageComponent TEntity="Supplier" 
                           TService="ISupplierService"
                           EntityId="@SupplierId"
                           Entity="@supplier"
                           Service="@SupplierService"
                           EntityName="廠商"
                           EntityNamePlural="廠商"
                           IndexRoute="/suppliers"
                           EditRoute="/suppliers/edit"
                           LoadingText="載入廠商資料中..."
                           BreadcrumbItems="@breadcrumbItems"
                           DataLoader="@LoadSupplierDataAsync"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           EntityTitleSelector="@(s => s.CompanyName)"
                           EntitySubtitleSelector="@(s => $"廠商編號：{s.SupplierCode}")"                           EntityDisplayNameSelector="@(s => s.CompanyName)"                           OnDataLoaded="@OnSupplierDataLoaded"
                           UseTabLayout="true"
                           TabSections="@GetTabSections()">
</GenericDetailPageComponent>

@code {
    [Parameter] public int SupplierId { get; set; }

    private Supplier? supplier;
    private List<SupplierContact> supplierContacts = new();
    private List<SupplierAddress> supplierAddresses = new();
    private bool _isLoading = false; // 防止重複載入

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("廠商管理", "/suppliers"),
        new("廠商詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Supplier?> LoadSupplierDataAsync()
    {
        // 防止重複載入
        if (_isLoading)
        {
            Console.WriteLine("[SupplierDetail] 載入中，跳過重複調用");
            return supplier;
        }
        
        try
        {
            _isLoading = true;
            if (SupplierId <= 0) return null;
            
            var result = await SupplierService.GetByIdAsync(SupplierId);
            supplier = result; // 保持本地變數同步
            
            return result;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[SupplierDetail] 載入廠商資料失敗：{ex.Message}");
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            if (supplier != null)
            {
                // 載入聯絡方式
                supplierContacts = await SupplierService.GetSupplierContactsAsync(SupplierId);
                
                // 載入地址資料
                supplierAddresses = await SupplierService.GetSupplierAddressesAsync(SupplierId);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[SupplierDetail] 載入額外資料失敗：{ex.Message}");
        }
    }

    private Task OnSupplierDataLoaded()
    {
        // 資料載入完成後的處理
        StateHasChanged();
        return Task.CompletedTask;
    }

    private string GetFullAddress(SupplierAddress address)
    {
        var addressParts = new List<string>();
        
        if (!string.IsNullOrEmpty(address.PostalCode))
            addressParts.Add($"({address.PostalCode})");
        if (!string.IsNullOrEmpty(address.City))
            addressParts.Add(address.City);
        if (!string.IsNullOrEmpty(address.District))
            addressParts.Add(address.District);
        if (!string.IsNullOrEmpty(address.Address))
            addressParts.Add(address.Address);

        return addressParts.Any() ? string.Join(" ", addressParts) : "地址不完整";
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Supplier, ISupplierService>.TabSection> GetTabSections()
    {
        return new List<GenericDetailPageComponent<Supplier, ISupplierService>.TabSection>
        {
            new GenericDetailPageComponent<Supplier, ISupplierService>.TabSection
            {
                Id = "basic",
                Title = "基本資料",
                Content = @<div class="row">
                    <DetailFieldComponent Label="廠商代碼" Value="@supplier?.SupplierCode" IsPrimary="true" />
                    <DetailFieldComponent Label="公司名稱" Value="@supplier?.CompanyName" IsBold="true" />
                    <DetailFieldComponent Label="聯絡人" Value="@supplier?.ContactPerson" />
                    <DetailFieldComponent Label="統一編號" Value="@supplier?.TaxNumber" />
                    <DetailFieldComponent Label="付款條件" Value="@supplier?.PaymentTerms" />
                    <DetailFieldComponent Label="信用額度" Value="@(supplier?.CreditLimit?.ToString("C"))" />
                    <DetailFieldComponent Label="廠商類型" Value="@supplier?.SupplierType?.TypeName" />
                    <DetailFieldComponent Label="行業類型" Value="@supplier?.IndustryType?.IndustryTypeName" />
                    <DetailFieldComponent Label="狀態">
                        @if (supplier?.Status != null)
                        {
                            <StatusBadgeComponent Status="@supplier.Status" />
                        }
                    </DetailFieldComponent>
                    @if (!string.IsNullOrEmpty(supplier?.Remarks))
                    {
                        <DetailFieldComponent Label="備註" Value="@supplier.Remarks" ColSize="12" />
                    }
                </div>
            },
            
            new GenericDetailPageComponent<Supplier, ISupplierService>.TabSection
            {
                Id = "contacts",
                Title = "聯絡方式",
                Content = @<div>
                    @if (supplierContacts.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>類型</th>
                                        <th>值</th>
                                        <th>主要</th>
                                        <th>狀態</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var contact in supplierContacts)
                                    {
                                        <tr>
                                            <td>@(contact.ContactType?.TypeName ?? "-")</td>
                                            <td>@contact.ContactValue</td>
                                            <td>
                                                @if (contact.IsPrimary)
                                                {
                                                    <span class="badge bg-primary">主要</span>
                                                }
                                            </td>
                                            <td>
                                                <StatusBadgeComponent Status="@contact.Status" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-muted p-3 text-center">
                            <i class="fas fa-phone-slash fa-2x mb-2 d-block"></i>
                            尚未設定聯絡方式
                        </div>
                    }
                </div>
            },
            
            new GenericDetailPageComponent<Supplier, ISupplierService>.TabSection
            {
                Id = "addresses",
                Title = "地址資料",
                Content = @<div>
                    @if (supplierAddresses.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>類型</th>
                                        <th>地址</th>
                                        <th>主要</th>
                                        <th>狀態</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var address in supplierAddresses)
                                    {
                                        <tr>
                                            <td>@(address.AddressType?.TypeName ?? "-")</td>
                                            <td>@GetFullAddress(address)</td>
                                            <td>
                                                @if (address.IsPrimary)
                                                {
                                                    <span class="badge bg-primary">主要</span>
                                                }
                                            </td>
                                            <td>
                                                <StatusBadgeComponent Status="@address.Status" />
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }                    else
                    {
                        <div class="text-muted p-3 text-center">
                            <i class="fas fa-map-marker-slash fa-2x mb-2 d-block"></i>
                            尚未設定地址
                        </div>
                    }
                </div>
            },
              new GenericDetailPageComponent<Supplier, ISupplierService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div>
                    <SystemInfoDisplayComponent 
                        CreatedAt="@(supplier?.CreatedAt ?? DateTime.MinValue)"
                        UpdatedAt="@supplier?.UpdatedAt"
                        CreatedBy="@supplier?.CreatedBy"
                        UpdatedBy="@supplier?.UpdatedBy"
                        Remarks="@supplier?.Remarks"
                        ShowTimeline="true"
                        ShowRemarks="true" />
                </div>
            }
        };
    }
}
