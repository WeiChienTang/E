@page "/suppliers/detail/{supplierId:int}"
@using Microsoft.AspNetCore.Authorization
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Badges
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Extensions
@using ERPCore2.Helpers
@attribute [Authorize]
@inject ISupplierService SupplierService
@inject ISupplierContactService SupplierContactService
@inject ISupplierAddressService SupplierAddressService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject INotificationService NotificationService
@inject IErrorLogService ErrorLogService
@rendermode InteractiveServer

<PagePermissionCheck RequiredPermission="Supplier.Read">
    <PageTitle>廠商詳細資料</PageTitle>

    <GenericDetailPageComponent TEntity="Supplier" 
                               TService="ISupplierService"
                               EntityId="@SupplierId"
                               Entity="@supplier"
                               Service="@SupplierService"
                               EntityName="廠商"
                               EntityNamePlural="廠商"
                               IndexRoute="/suppliers"
                               EditRoute="/suppliers/edit"
                               LoadingText="載入廠商資料中..."
                               BreadcrumbItems="@breadcrumbItems"
                               DataLoader="@LoadSupplierDataAsync"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           EntityTitleSelector="@(s => s.CompanyName)"
                           EntitySubtitleSelector="@(s => $"廠商編號：{s.SupplierCode}")"                           EntityDisplayNameSelector="@(s => s.CompanyName)"                           OnDataLoaded="@OnSupplierDataLoaded"
                           UseTabLayout="true"
                           TabSections="@GetTabSections()">
    </GenericDetailPageComponent>
</PagePermissionCheck>

@code {
    [Parameter] public int SupplierId { get; set; }

    private Supplier? supplier;
    private List<SupplierContact> supplierContacts = new();
    private List<SupplierAddress> supplierAddresses = new();
    private bool _isLoading = false; // 防止重複載入

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("廠商管理", "/suppliers"),
        new("廠商詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Supplier?> LoadSupplierDataAsync()
    {
        // 防止重複載入
        if (_isLoading)
        {
            return supplier;
        }
        
        try
        {
            _isLoading = true;
            if (SupplierId <= 0) return null;
            
            var result = await SupplierService.GetByIdAsync(SupplierId);
            supplier = result; // 保持本地變數同步
            
            return result;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex,
                nameof(LoadSupplierDataAsync),
                GetType(),
                additionalData: new { SupplierId = SupplierId });
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            if (supplier != null)
            {
                // 載入聯絡方式
                supplierContacts = await SupplierService.GetSupplierContactsAsync(SupplierId);
                
                // 載入地址資料
                supplierAddresses = await SupplierService.GetSupplierAddressesAsync(SupplierId);
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex,
                nameof(LoadAdditionalDataAsync),
                GetType(),
                additionalData: new { SupplierId = SupplierId });
        }
    }

    private Task OnSupplierDataLoaded()
    {
        try
        {
            // 資料載入完成後的處理
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex,
                nameof(OnSupplierDataLoaded),
                GetType(),
                additionalData: new { SupplierId = SupplierId });
            return Task.CompletedTask;
        }
    }

    private string GetFullAddress(SupplierAddress address)
    {
        try
        {
            if (address == null)
                return "地址不完整";
                
            var addressParts = new List<string>();
            
            if (!string.IsNullOrEmpty(address.PostalCode))
                addressParts.Add($"({address.PostalCode})");
            if (!string.IsNullOrEmpty(address.City))
                addressParts.Add(address.City);
            if (!string.IsNullOrEmpty(address.District))
                addressParts.Add(address.District);
            if (!string.IsNullOrEmpty(address.Address))
                addressParts.Add(address.Address);

            return addressParts.Any() ? string.Join(" ", addressParts) : "地址不完整";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex,
                nameof(GetFullAddress),
                GetType(),
                additionalData: new { SupplierId = SupplierId });
            return "地址處理錯誤";
        }
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Supplier, ISupplierService>.TabSection> GetTabSections()
    {
        try
        {
            return new List<GenericDetailPageComponent<Supplier, ISupplierService>.TabSection>
            {            new GenericDetailPageComponent<Supplier, ISupplierService>.TabSection
                {
                    Id = "basic",
                    Title = "基本資料",
                    Content = @<div>
                        <BasicInfoDisplayComponent 
                            Title="廠商基本資訊"
                            IconClass="fas fa-truck"
                            IconColor="text-primary"
                            Fields="@GetSupplierBasicFields()" />
                    </div>
                },
                
                new GenericDetailPageComponent<Supplier, ISupplierService>.TabSection
                {
                    Id = "contacts",
                    Title = "聯絡方式",
                    Content = @<div>
                        <ContactDisplayComponent 
                            Contacts="@GetContactEntities()"
                            Title="廠商聯絡方式"
                            ShowStatus="true"
                            ShowStatistics="true"
                            ShowCreateButton="false"
                            EmptyTitle="尚未設定聯絡方式"
                            EmptyMessage="此廠商目前沒有任何聯絡方式資料" />
                    </div>
                },
                
                new GenericDetailPageComponent<Supplier, ISupplierService>.TabSection
                {
                    Id = "addresses",
                    Title = "地址資料",
                    Content = @<div>
                        <AddressDisplayComponent 
                            Addresses="@GetAddressEntities()"
                            Title="廠商地址資料"
                            ShowStatus="true"
                            ShowAddressDetails="true"
                            ShowMapLink="true"
                            ShowStatistics="true"
                            ShowCreateButton="false"
                            EmptyTitle="尚未設定地址"
                            EmptyMessage="此廠商目前沒有任何地址資料" />
                    </div>
                },
                  new GenericDetailPageComponent<Supplier, ISupplierService>.TabSection
                {
                    Id = "system",
                    Title = "系統資訊",
                    Content = @<div>
                        <SystemInfoDisplayComponent 
                            CreatedAt="@(supplier?.CreatedAt ?? DateTime.MinValue)"
                            UpdatedAt="@supplier?.UpdatedAt"
                            CreatedBy="@supplier?.CreatedBy"
                            UpdatedBy="@supplier?.UpdatedBy"
                            Remarks="@supplier?.Remarks"
                            ShowTimeline="true"
                            ShowRemarks="true" />
                    </div>
                }        };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex,
                nameof(GetTabSections),
                GetType(),
                additionalData: new { SupplierId = SupplierId });
            return new List<GenericDetailPageComponent<Supplier, ISupplierService>.TabSection>();
        }
    }

    // 取得廠商基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetSupplierBasicFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
            {
                new()
                {
                    Label = "廠商代碼",
                    Value = supplier?.SupplierCode,
                    IsPrimary = true,
                    ValueBold = true,
                    IconClass = "fas fa-barcode",
                    IconBgClass = "bg-primary bg-opacity-10",
                    IconTextClass = "text-primary",
                    ColSize = 6
                },
                new()
                {
                    Label = "公司名稱",
                    Value = supplier?.CompanyName,
                    ValueBold = true,
                    IconClass = "fas fa-building",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info",
                    ColSize = 6
                },
                new()
                {
                    Label = "聯絡人",
                    Value = supplier?.ContactPerson,
                    IconClass = "fas fa-user",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success",
                    ColSize = 6
                },
                new()
                {
                    Label = "統一編號",
                    Value = supplier?.TaxNumber,
                    IconClass = "fas fa-id-card",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning",
                    ColSize = 6
                },
                new()
                {
                    Label = "付款條件",
                    Value = supplier?.PaymentTerms,
                    IconClass = "fas fa-credit-card",
                    IconBgClass = "bg-secondary bg-opacity-10",
                    IconTextClass = "text-secondary",
                    ColSize = 6
                },
                new()
                {
                    Label = "信用額度",
                    Value = supplier?.CreditLimit,
                    Format = BasicInfoDisplayComponent.FieldFormat.Currency,
                    IconClass = "fas fa-money-check",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success",
                    ColSize = 6
                },
                new()
                {
                    Label = "廠商類型",
                    Value = supplier?.SupplierType?.TypeName,
                    IconClass = "fas fa-tags",
                    IconBgClass = "bg-info bg-opacity-10",
                    IconTextClass = "text-info",
                    ColSize = 6
                },
                new()
                {
                    Label = "行業類型",
                    Value = supplier?.IndustryType?.IndustryTypeName,
                    IconClass = "fas fa-industry",
                    IconBgClass = "bg-secondary bg-opacity-10",
                    IconTextClass = "text-secondary",
                    ColSize = 6
                },
                new()
                {
                    Label = "狀態",
                    CustomContent = @<div>
                        @if (supplier?.Status != null)
                        {
                            <StatusBadgeComponent Status="@supplier.Status" />
                        }
                    </div>,
                    IconClass = "fas fa-toggle-on",
                    IconBgClass = "bg-success bg-opacity-10",
                    IconTextClass = "text-success",
                    ColSize = 6
                },
                new()
                {
                    Label = "備註",
                    Value = supplier?.Remarks,
                    Format = BasicInfoDisplayComponent.FieldFormat.MultiLine,
                    IconClass = "fas fa-sticky-note",
                    IconBgClass = "bg-warning bg-opacity-10",
                    IconTextClass = "text-warning",
                    ColSize = 12,
                    VisibilityCondition = () => !string.IsNullOrEmpty(supplier?.Remarks)
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex,
                nameof(GetSupplierBasicFields),
                GetType(),
                additionalData: new { SupplierId = SupplierId });
            return new List<BasicInfoDisplayComponent.BasicInfoField>();
        }
    }

    // 轉換方法
    private IEnumerable<IContactEntity> GetContactEntities()
    {
        try
        {
            return supplierContacts.AsContactDisplayEntities();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex,
                nameof(GetContactEntities),
                GetType(),
                additionalData: new { SupplierId = SupplierId });
            return new List<IContactEntity>();
        }
    }

    private IEnumerable<IAddressEntity> GetAddressEntities()
    {
        try
        {
            return supplierAddresses.AsAddressDisplayEntities();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex,
                nameof(GetAddressEntities),
                GetType(),
                additionalData: new { SupplierId = SupplierId });
            return new List<IAddressEntity>();
        }
    }
}
