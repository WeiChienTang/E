@page "/suppliers"
@using Microsoft.AspNetCore.Authorization
@using ERPCore2.Helpers
@attribute [Authorize]
@inject ISupplierService SupplierService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject INotificationService NotificationService
@inject IErrorLogService ErrorLogService
@rendermode InteractiveServer

<PagePermissionCheck RequiredPermission="Supplier.Read">
    <PageTitle>廠商維護</PageTitle>

    <GenericIndexPageComponent TEntity="Supplier" 
                              TService="ISupplierService"
                              Service="@SupplierService"
                              EntityBasePath="/suppliers"                          
                              PageTitle="廠商維護"
                              PageSubtitle="管理所有廠商資料與聯絡資訊"
                              EntityName="廠商"
                              BreadcrumbItems="@breadcrumbItems"
                              FilterDefinitions="@filterDefinitions"
                              ColumnDefinitions="@columnDefinitions"
                              DataLoader="@LoadSuppliersAsync"
                              InitializeBasicData="@LoadBasicDataAsync"
                              FilterApplier="@ApplySupplierFilters"
                              GetEntityDisplayName="@(supplier => supplier.CompanyName)"
                              @ref="indexComponent" />
</PagePermissionCheck>

@code {
    // 組件參考
    private GenericIndexPageComponent<Supplier, ISupplierService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters(); // 初始化基本篩選器
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "OnInitialized" });
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("廠商管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "InitializeBreadcrumbs" });
        }
    }    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 重新初始化篩選器以載入下拉選單選項
            await InitializeFiltersAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadBasicDataAsync), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "LoadBasicDataAsync" });
        }
    }

    // 載入廠商資料
    private async Task<List<Supplier>> LoadSuppliersAsync()
    {
        try
        {
            return await SupplierService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSuppliersAsync), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "LoadSuppliersAsync" });
            
            StateHasChanged();
            return new List<Supplier>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 建立基本篩選定義（不包含下拉選單選項，這些將在 InitializeFiltersAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SupplierCode", "廠商代碼", "輸入廠商代碼搜尋")
                .AddText("CompanyName", "公司名稱", "輸入公司名稱搜尋")
                .AddText("ContactPerson", "聯絡人", "輸入聯絡人姓名搜尋")
                .AddSelect("SupplierTypeId", "廠商類型", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("IndustryTypeId", "行業類型", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("Status", "狀態", statusOptions)
                .AddText("TaxNumber", "統一編號", "輸入統一編號搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFilters), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "InitializeFilters" });
        }
    }

    private async Task InitializeFiltersAsync()
    {
        try
        {
            // 載入廠商類型選項
            var supplierTypes = await SupplierService.GetSupplierTypesAsync();
            var supplierTypeOptions = supplierTypes.Select(st => new SelectOption
            {
                Text = st.TypeName,
                Value = st.Id.ToString()
            }).ToList();

            // 載入行業類型選項
            var industryTypes = await SupplierService.GetIndustryTypesAsync();
            var industryTypeOptions = industryTypes.Select(it => new SelectOption
            {
                Text = it.IndustryTypeName,
                Value = it.Id.ToString()
            }).ToList();

            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SupplierCode", "廠商代碼", "輸入廠商代碼搜尋")
                .AddText("CompanyName", "公司名稱", "輸入公司名稱搜尋")
                .AddText("ContactPerson", "聯絡人", "輸入聯絡人姓名搜尋")
                .AddSelect("SupplierTypeId", "廠商類型", supplierTypeOptions)
                .AddSelect("IndustryTypeId", "行業類型", industryTypeOptions)
                .AddSelect("Status", "狀態", statusOptions)
                .AddText("TaxNumber", "統一編號", "輸入統一編號搜尋")
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，刷新組件以更新篩選器
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFiltersAsync), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "InitializeFiltersAsync" });
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("廠商代碼", nameof(Supplier.SupplierCode)),
                TableColumnDefinition.Text("公司名稱", nameof(Supplier.CompanyName)),
                TableColumnDefinition.Text("聯絡人", nameof(Supplier.ContactPerson)),
                TableColumnDefinition.Text("廠商類型", "SupplierType.TypeName"),
                TableColumnDefinition.Text("行業類型", "IndustryType.IndustryTypeName"),
                TableColumnDefinition.Status("狀態", nameof(Supplier.Status), new Dictionary<object, string>
                {
                    { EntityStatus.Active, "bg-success" },
                    { EntityStatus.Inactive, "bg-secondary" }
                }),
                TableColumnDefinition.Date("建立日期", nameof(Supplier.CreatedAt), "yyyy/MM/dd")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeTableColumns), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "InitializeTableColumns" });
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Supplier> ApplySupplierFilters(SearchFilterModel searchModel, IQueryable<Supplier> query)
    {
        try
        {
            // 廠商代碼篩選
            var supplierCodeFilter = searchModel.GetFilterValue("SupplierCode")?.ToString();
            if (!string.IsNullOrWhiteSpace(supplierCodeFilter))
            {
                query = query.Where(s => 
                    s.SupplierCode.Contains(supplierCodeFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 公司名稱篩選
            var companyNameFilter = searchModel.GetFilterValue("CompanyName")?.ToString();
            if (!string.IsNullOrWhiteSpace(companyNameFilter))
            {
                query = query.Where(s => 
                    s.CompanyName.Contains(companyNameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 聯絡人篩選
            var contactPersonFilter = searchModel.GetFilterValue("ContactPerson")?.ToString();
            if (!string.IsNullOrWhiteSpace(contactPersonFilter))
            {
                query = query.Where(s => 
                    !string.IsNullOrEmpty(s.ContactPerson) && 
                    s.ContactPerson.Contains(contactPersonFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 廠商類型篩選 - 改為ID篩選
            var supplierTypeIdFilter = searchModel.GetFilterValue("SupplierTypeId")?.ToString();
            if (!string.IsNullOrWhiteSpace(supplierTypeIdFilter) && int.TryParse(supplierTypeIdFilter, out var supplierTypeId))
            {
                query = query.Where(s => s.SupplierTypeId == supplierTypeId);
            }

            // 行業類型篩選 - 改為ID篩選
            var industryTypeIdFilter = searchModel.GetFilterValue("IndustryTypeId")?.ToString();
            if (!string.IsNullOrWhiteSpace(industryTypeIdFilter) && int.TryParse(industryTypeIdFilter, out var industryTypeId))
            {
                query = query.Where(s => s.IndustryTypeId == industryTypeId);
            }

            // 狀態篩選
            var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
            {
                query = query.Where(s => s.Status == status);
            }

            // 統一編號篩選
            var taxNumberFilter = searchModel.GetFilterValue("TaxNumber")?.ToString();
            if (!string.IsNullOrWhiteSpace(taxNumberFilter))
            {
                query = query.Where(s => 
                    !string.IsNullOrEmpty(s.TaxNumber) && 
                    s.TaxNumber.Contains(taxNumberFilter, StringComparison.OrdinalIgnoreCase));
            }

            return query.OrderBy(s => s.SupplierCode);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplySupplierFilters), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "ApplySupplierFilters" });
            
            return query.OrderBy(s => s.SupplierCode);
        }
    }
}
