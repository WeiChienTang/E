@page "/suppliers"
@inject ISupplierService SupplierService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Supplier" 
                          TService="ISupplierService"
                          Service="@SupplierService"
                          EntityBasePath="/suppliers"                          
                          PageTitle="廠商維護"
                          PageSubtitle="管理所有廠商資料與聯絡資訊"
                          EntityName="廠商"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSuppliersAsync"
                          FilterApplier="@ApplySupplierFilters"
                          GetEntityDisplayName="@(supplier => supplier.CompanyName)"
                          RequiredPermission="Supplier.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 廠商編輯 Modal *@
<SupplierEditModalComponent IsVisible="@showEditModal"
                           IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                           SupplierId="@editingSupplierId"
                           OnSupplierSaved="@modalHandler.OnEntitySavedAsync"
                           OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Supplier, ISupplierService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingSupplierId = null;
    
    // Modal 處理器
    private ModalHandler<Supplier, GenericIndexPageComponent<Supplier, ISupplierService>> modalHandler = default!;
    
    // 選項清單
    private List<SupplierType> supplierTypes = new();
    
    // 欄位配置
    private SupplierFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Supplier, GenericIndexPageComponent<Supplier, ISupplierService>>(
                id => editingSupplierId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入廠商類型資料
            await LoadSupplierTypesAsync();
            
            // 建立欄位配置（在載入廠商類型後，並傳遞 NotificationService）
            fieldConfiguration = new SupplierFieldConfiguration(supplierTypes, NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化廠商頁面失敗");
            await NotificationService.ShowErrorAsync("初始化廠商頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("廠商管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }    
    // 載入廠商類型資料
    private async Task LoadSupplierTypesAsync()
    {
        try
        {
            supplierTypes = await SupplierService.GetSupplierTypesAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSupplierTypesAsync), GetType(), additionalData: "載入廠商類型資料失敗");
            await NotificationService.ShowErrorAsync("載入廠商類型資料失敗");
            // 設定安全的預設值
            supplierTypes = new List<SupplierType>();
        }
    }

    // 載入廠商資料
    private async Task<List<Supplier>> LoadSuppliersAsync()
    {
        try
        {
            return await SupplierService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSuppliersAsync), GetType(), additionalData: "載入廠商資料失敗");
            await NotificationService.ShowErrorAsync("載入廠商資料失敗");
            // 設定安全的預設值
            return new List<Supplier>();
        }
    }

    private IQueryable<Supplier> ApplySupplierFilters(SearchFilterModel searchModel, IQueryable<Supplier> query)
    {
        try
        {
            return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplySupplierFilters), GetType());
        }
        catch (Exception ex)
        {
            // 記錄錯誤並回傳安全的預設查詢
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplySupplierFilters), GetType(), additionalData: "廠商篩選器應用失敗");
            _ = NotificationService.ShowErrorAsync("篩選條件應用失敗，已顯示全部資料");
            
            // 回傳基本排序的查詢，確保頁面仍能正常運作
            return query.OrderBy(s => s.Code);
        }
    }
}
