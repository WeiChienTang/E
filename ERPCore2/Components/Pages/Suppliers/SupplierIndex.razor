@page "/suppliers"
@inject ISupplierService SupplierService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Supplier" 
                          TService="ISupplierService"
                          Service="@SupplierService"
                          EntityBasePath="/suppliers"                          
                          PageTitle="廠商維護"
                          PageSubtitle="管理所有廠商資料與聯絡資訊"
                          EntityName="廠商"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSuppliersAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplySupplierFilters"
                          GetEntityDisplayName="@(supplier => supplier.CompanyName)"
                          RequiredPermission="Supplier.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 廠商編輯 Modal *@
<SupplierEditModalComponent IsVisible="@showEditModal"
                           IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                           SupplierId="@editingSupplierId"
                           OnSupplierSaved="@modalHandler.OnEntitySavedAsync"
                           OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Supplier, ISupplierService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingSupplierId = null;
    
    // Modal 處理器
    private ModalHandler<Supplier, GenericIndexPageComponent<Supplier, ISupplierService>> modalHandler = default!;
    
    // 選項清單
    private List<SupplierType> supplierTypes = new();
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Supplier, GenericIndexPageComponent<Supplier, ISupplierService>>(
                id => editingSupplierId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "OnInitialized" });
                
            // 確保基本初始化完成，避免程式崩潰
            try
            {
                breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
                {
                    new("首頁", "/"),
                    new("廠商管理")
                };
                filterDefinitions = new List<SearchFilterDefinition>();
                columnDefinitions = new List<TableColumnDefinition>();
            }
            catch
            {
                // 如果連預設值都設定失敗，至少確保不是 null
                breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
                filterDefinitions ??= new List<SearchFilterDefinition>();
                columnDefinitions ??= new List<TableColumnDefinition>();
            }
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("廠商管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "InitializeBreadcrumbs" });
        }
    }    
    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            supplierTypes = await SupplierService.GetSupplierTypesAsync();
            
            // 重新初始化篩選器（因為需要選項資料）
            InitializeFilters();
            
            // 重要：通知組件狀態已改變，確保參數更新
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadBasicDataAsync), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "LoadBasicDataAsync" });
                
            // 設定安全的預設值，確保程式不會崩潰
            supplierTypes = new List<SupplierType>();
            
            // 即使失敗也要重新初始化篩選器
            InitializeFilters();
            StateHasChanged();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備廠商類型選項
            var supplierTypeOptions = supplierTypes.Select(st => new SelectOption
            {
                Text = st.TypeName,
                Value = st.Id.ToString()
            }).ToList();

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Code", "廠商代碼", "輸入廠商代碼搜尋")
                .AddText("CompanyName", "公司名稱", "輸入公司名稱搜尋")
                .AddText("ContactPerson", "聯絡人", "輸入聯絡人姓名搜尋")
                .AddSelect("SupplierTypeId", "廠商類型", supplierTypeOptions)
                .AddText("TaxNumber", "統一編號", "輸入統一編號搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFilters), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "InitializeFilters" });
                
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    // 載入廠商資料
    private async Task<List<Supplier>> LoadSuppliersAsync()
    {
        try
        {
            return await SupplierService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSuppliersAsync), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "LoadSuppliersAsync" });
            
            StateHasChanged();
            return new List<Supplier>();
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("廠商代碼", nameof(Supplier.Code)),
                TableColumnDefinition.Text("公司名稱", nameof(Supplier.CompanyName)),
                TableColumnDefinition.Text("聯絡人", nameof(Supplier.ContactPerson)),
                TableColumnDefinition.Text("廠商類型", "SupplierType.TypeName"),
                TableColumnDefinition.Text("統一編號", nameof(Supplier.TaxNumber)),
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeTableColumns), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "InitializeTableColumns" });
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Supplier> ApplySupplierFilters(SearchFilterModel searchModel, IQueryable<Supplier> query)
    {
        var filterActions = new List<Func<SearchFilterModel, IQueryable<Supplier>, IQueryable<Supplier>>>
        {
            // 應用基礎實體篩選（狀態、備註等）
            (model, q) => FilterHelper.ApplyBaseEntityFilters(model, q),

            // 廠商代碼篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "Code", s => s.Code),
            
            // 公司名稱篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "CompanyName", s => s.CompanyName),
            
            // 聯絡人篩選 - 允許 null 值
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "ContactPerson", s => s.ContactPerson, allowNull: true),
            
            // 廠商類型篩選 - 使用 NullableIntIdFilter 因為 SupplierTypeId 是 int?
            (model, q) => FilterHelper.ApplyNullableIntIdFilter(model, q, "SupplierTypeId", s => s.SupplierTypeId),
            
            // 統一編號篩選 - 允許 null 值
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "TaxNumber", s => s.TaxNumber, allowNull: true),
        };

        return FilterHelper.ApplyFiltersWithErrorHandling(
            searchModel,
            query,
            filterActions,
            q => q.OrderBy(s => s.Code), // 預設排序
            nameof(ApplySupplierFilters),
            GetType()
        );
    }
}
