@page "/suppliers"
@inject ISupplierService SupplierService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Supplier" 
                          TService="ISupplierService"
                          Service="@SupplierService"
                          EntityBasePath="/suppliers"                          
                          PageTitle="廠商維護"
                          PageSubtitle="管理所有廠商資料與聯絡資訊"
                          EntityName="廠商"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSuppliersAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplySupplierFilters"
                          GetEntityDisplayName="@(supplier => supplier.CompanyName)"
                          RequiredPermission="Supplier.Read"
                          OnAddClick="@ShowAddModal"
                          OnRowClick="@ShowEditModal"
                          @ref="indexComponent" />

@* 廠商編輯 Modal *@
<SupplierEditModalComponent IsVisible="@showEditModal"
                           IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                           SupplierId="@editingSupplierId"
                           OnSupplierSaved="@OnSupplierSaved"
                           OnCancel="@OnModalCancel" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Supplier, ISupplierService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingSupplierId = null;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters(); // 初始化基本篩選器
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "OnInitialized" });
        }
    }

    // ===== Modal 相關方法 =====

    private async Task ShowAddModal()
    {
        try
        {
            editingSupplierId = null;
            showEditModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowAddModal), GetType());
        }
    }

    private async Task ShowEditModal(Supplier supplier)
    {
        try
        {
            if (supplier?.Id != null)
            {
                editingSupplierId = supplier.Id;
                showEditModal = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowEditModal), GetType());
        }
    }

    private async Task OnSupplierSaved(Supplier savedSupplier)
    {
        try
        {
            // 關閉 Modal
            showEditModal = false;
            editingSupplierId = null;
            
            // 重新載入資料
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnSupplierSaved), GetType());
        }
    }

    private async Task OnModalCancel()
    {
        try
        {
            showEditModal = false;
            editingSupplierId = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnModalCancel), GetType());
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("廠商管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "InitializeBreadcrumbs" });
        }
    }    
    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 重新初始化篩選器以載入下拉選單選項
            await InitializeFiltersAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadBasicDataAsync), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "LoadBasicDataAsync" });
        }
    }

    // 載入廠商資料
    private async Task<List<Supplier>> LoadSuppliersAsync()
    {
        try
        {
            return await SupplierService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSuppliersAsync), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "LoadSuppliersAsync" });
            
            StateHasChanged();
            return new List<Supplier>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 建立基本篩選定義（不包含下拉選單選項，這些將在 InitializeFiltersAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SupplierCode", "廠商代碼", "輸入廠商代碼搜尋")
                .AddText("CompanyName", "公司名稱", "輸入公司名稱搜尋")
                .AddText("ContactPerson", "聯絡人", "輸入聯絡人姓名搜尋")
                .AddSelect("SupplierTypeId", "廠商類型", new List<SelectOption>()) // 空的選項，稍後載入
                .AddText("TaxNumber", "統一編號", "輸入統一編號搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFilters), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "InitializeFilters" });
        }
    }

    private async Task InitializeFiltersAsync()
    {
        try
        {
            // 載入廠商類型選項
            var supplierTypes = await SupplierService.GetSupplierTypesAsync();
            var supplierTypeOptions = supplierTypes.Select(st => new SelectOption
            {
                Text = st.TypeName,
                Value = st.Id.ToString()
            }).ToList();

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SupplierCode", "廠商代碼", "輸入廠商代碼搜尋")
                .AddText("CompanyName", "公司名稱", "輸入公司名稱搜尋")
                .AddText("ContactPerson", "聯絡人", "輸入聯絡人姓名搜尋")
                .AddSelect("SupplierTypeId", "廠商類型", supplierTypeOptions)
                .AddText("TaxNumber", "統一編號", "輸入統一編號搜尋")
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，刷新組件以更新篩選器
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFiltersAsync), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "InitializeFiltersAsync" });
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("廠商代碼", nameof(Supplier.Code)),
                TableColumnDefinition.Text("公司名稱", nameof(Supplier.CompanyName)),
                TableColumnDefinition.Text("聯絡人", nameof(Supplier.ContactPerson)),
                TableColumnDefinition.Text("廠商類型", "SupplierType.TypeName"),
                TableColumnDefinition.Text("統一編號", nameof(Supplier.TaxNumber)),
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeTableColumns), GetType(),
                additionalData: new { PageName = "SupplierIndex", Action = "InitializeTableColumns" });
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Supplier> ApplySupplierFilters(SearchFilterModel searchModel, IQueryable<Supplier> query)
    {
        var filterActions = new List<Func<SearchFilterModel, IQueryable<Supplier>, IQueryable<Supplier>>>
        {
            // 廠商代碼篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "SupplierCode", s => s.Code),
            
            // 公司名稱篩選
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "CompanyName", s => s.CompanyName),
            
            // 聯絡人篩選 - 允許 null 值
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "ContactPerson", s => s.ContactPerson, allowNull: true),
            
            // 廠商類型篩選 - 使用 NullableIntIdFilter 因為 SupplierTypeId 是 int?
            (model, q) => FilterHelper.ApplyNullableIntIdFilter(model, q, "SupplierTypeId", s => s.SupplierTypeId),
            
            // 統一編號篩選 - 允許 null 值
            (model, q) => FilterHelper.ApplyTextContainsFilter(model, q, "TaxNumber", s => s.TaxNumber, allowNull: true),
        };

        return FilterHelper.ApplyFiltersWithErrorHandling(
            searchModel,
            query,
            filterActions,
            q => q.OrderBy(s => s.Code), // 預設排序
            nameof(ApplySupplierFilters),
            GetType()
        );
    }
}
