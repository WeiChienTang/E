@* 可重用的廠商編輯組件 - 可在任何頁面中嵌入 *@
@inject ISupplierService SupplierService
@inject IProductSupplierService ProductSupplierService
@inject IProductService ProductService
@inject IUnitService UnitService
@inject INotificationService NotificationService
@inject ActionButtonHelper ActionButtonHelper
@using ERPCore2.Helpers

<GenericEditModalComponent TEntity="Supplier" 
                          TService="ISupplierService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@SupplierId"
                          Service="@SupplierService"
                          EntityName="廠商"
                          EntityNamePlural="廠商"
                          ModalTitle="@(SupplierId.HasValue ? "編輯廠商" : "新增廠商")"
                          Size="GenericEditModalComponent<Supplier, ISupplierService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          DataLoader="@LoadSupplierData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          SaveHandler="@SaveSupplier"
                          OnSaveSuccess="@OnSaveSuccess"
                          RequiredPermission="Supplier.Read"
                          OnCancel="@OnCancel"
                          AdditionalSections="@GetAdditionalSections()" />

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? SupplierId { get; set; }
    [Parameter] public EventCallback<Supplier> OnSupplierSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public Dictionary<string, object?>? PrefilledValues { get; set; }

    private GenericEditModalComponent<Supplier, ISupplierService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 產品供應商關聯相關變數
    private List<ProductSupplier> supplierProducts = new();
    private List<Product> availableProducts = new();
    private List<Unit> availableUnits = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化廠商編輯組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // 當 SupplierId 參數變更時，重新初始化表單欄位
        if (formFields != null) // 只有在已經初始化過的情況下才重新設定
        {
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
        
        await base.OnParametersSetAsync();
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入產品和單位選項
            availableProducts = await ProductService.GetActiveProductsAsync();
            availableUnits = await UnitService.GetActiveAsync();
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("載入廠商編輯相關資料時發生錯誤");
            availableProducts = new List<Product>();
            availableUnits = new List<Unit>();
        }
    }

    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(Supplier.Code),
                    Label = "廠商代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入廠商代碼",
                    IsRequired = true,
                    MaxLength = 20,
                    HelpText = "廠商的唯一識別代碼"
                },
                new()
                {
                    PropertyName = nameof(Supplier.CompanyName),
                    Label = "公司名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司名稱",
                    IsRequired = false,
                    MaxLength = 100,
                    HelpText = "廠商的正式公司名稱（公司名稱、負責人或聯絡人至少需填寫一項）"
                },
                new()
                {
                    PropertyName = nameof(Supplier.ContactPerson),
                    Label = "聯絡人",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入聯絡人姓名",
                    IsRequired = false,
                    MaxLength = 50,
                    HelpText = "主要聯絡人姓名（公司名稱、負責人或聯絡人至少需填寫一項）"
                },
                new()
                {
                    PropertyName = nameof(Supplier.TaxNumber),
                    Label = "統一編號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入統一編號",
                    MaxLength = 8,
                    HelpText = "公司統一編號（8位數字）"
                },
                new()
                {
                    PropertyName = nameof(Supplier.ResponsiblePerson),
                    Label = "負責人",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入負責人姓名",
                    IsRequired = false,
                    MaxLength = 10,
                    HelpText = "公司負責人姓名（公司名稱、負責人或聯絡人至少需填寫一項）"
                },
                new()
                {
                    PropertyName = nameof(Supplier.JobTitle),
                    Label = "職稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入職稱",
                    IsRequired = false,
                    MaxLength = 10,
                    HelpText = "聯絡人職稱"
                },
                new()
                {
                    PropertyName = nameof(Supplier.ContactPhone),
                    Label = "聯絡電話",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入聯絡電話",
                    IsRequired = false,
                    MaxLength = 20,
                    HelpText = "聯絡人或是公司聯絡電話"
                },
                new()
                {
                    PropertyName = nameof(Supplier.MobilePhone),
                    Label = "行動電話",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入行動電話",
                    IsRequired = false,
                    MaxLength = 20,
                    HelpText = "聯絡人行動電話"
                },
                new()
                {
                    PropertyName = nameof(Supplier.Fax),
                    Label = "傳真",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入傳真號碼",
                    IsRequired = false,
                    MaxLength = 20,
                    HelpText = "公司傳真號碼"
                },
                new()
                {
                    PropertyName = nameof(Supplier.Email),
                    Label = "信箱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入電子郵件",
                    IsRequired = false,
                    MaxLength = 50,
                    HelpText = "聯絡人電子郵件地址"
                },
                new()
                {
                    PropertyName = nameof(Supplier.Website),
                    Label = "公司網址",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司網址",
                    MaxLength = 50,
                    ContainerCssClass = "col-4",
                    HelpText = "公司官方網站網址"
                },
                new()
                {
                    PropertyName = nameof(Supplier.ContactAddress),
                    Label = "聯絡地址",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入聯絡地址",
                    IsRequired = false,
                    MaxLength = 50,
                    HelpText = "公司聯絡地址",
                    ContainerCssClass = "col-4"
                },
                new()
                {
                    PropertyName = nameof(Supplier.SupplierAddress),
                    Label = "公司地址",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入公司地址",
                    IsRequired = false,
                    MaxLength = 50,
                    HelpText = "公司地址",
                    ContainerCssClass = "col-4"
                },
                new()
                {
                    PropertyName = nameof(Supplier.PaymentMethod),
                    Label = "付款方式",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入付款方式",
                    IsRequired = false,
                    MaxLength = 10,
                    HelpText = "客戶的付款方式（例如：現金、支票、匯款等）"
                },
                new()
                {
                    PropertyName = nameof(Supplier.PaymentTerms),
                    Label = "付款條件",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入付款條件",
                    IsRequired = false,
                    MaxLength = 50,
                    HelpText = "付款條件說明（例如：月結30天、貨到付款等）"
                },
                new FormFieldDefinition()
                {
                    PropertyName = nameof(Supplier.SupplierContactPhone),
                    Label = "聯絡電話",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入聯絡電話",
                    IsRequired = false,
                    MaxLength = 20,
                    HelpText = "負責人或是公司聯絡電話"
                },

                FormFieldConfigurationHelper.CreateRemarksField<Supplier>()
            };

            // 更新表單區段定義
            formSections = new Dictionary<string, string>
            {
            { nameof(Supplier.Code), "基本資訊" },
            { nameof(Supplier.CompanyName), "基本資訊" },
            { nameof(Supplier.ResponsiblePerson), "基本資訊" },       
            { nameof(Supplier.SupplierContactPhone), "基本資訊" },
            { nameof(Supplier.TaxNumber), "基本資訊" },         
            { nameof(Supplier.Fax), "基本資訊" },   
            { nameof(Supplier.Website), "基本資訊" },
            { nameof(Supplier.ContactAddress), "基本資訊" },
            { nameof(Supplier.SupplierAddress), "基本資訊" },
            
            { nameof(Supplier.ContactPerson), "聯絡人資訊" },
            { nameof(Supplier.JobTitle), "聯絡人資訊" },
            { nameof(Supplier.ContactPhone), "聯絡人資訊" },
            { nameof(Supplier.MobilePhone), "聯絡人資訊" },            
            { nameof(Supplier.Email), "聯絡人資訊" },           

            { nameof(Supplier.PaymentMethod), "付款資訊" },
            { nameof(Supplier.PaymentTerms), "付款資訊" },
            { nameof(Supplier.Remarks), "其他資訊" }
            };
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }
    
    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>();
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>();
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>();
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>();
    }

    private async Task<Supplier?> LoadSupplierData()
    {
        try
        {
            if (!SupplierId.HasValue) 
            {
                // 新增模式
                var newSupplier = new Supplier
                {
                    Code = await GenerateSupplierCodeAsync(),
                    CompanyName = "",
                    ContactPerson = "",
                    TaxNumber = "",
                    Status = EntityStatus.Active
                };
                
                // 應用預填值
                if (PrefilledValues != null)
                {
                    foreach (var kvp in PrefilledValues)
                    {
                        var property = typeof(Supplier).GetProperty(kvp.Key);
                        if (property != null && property.CanWrite && kvp.Value != null)
                        {
                            try
                            {
                                // 轉換值的類型
                                var convertedValue = Convert.ChangeType(kvp.Value, property.PropertyType);
                                property.SetValue(newSupplier, convertedValue);
                            }
                            catch (Exception)
                            {
                                // 忽略轉換失敗的值
                            }
                        }
                    }
                }
                
                supplierProducts = new List<ProductSupplier>();
                
                return newSupplier;
            }

            var supplier = await SupplierService.GetByIdAsync(SupplierId.Value);            
            
            if (supplier == null)
            {
                _ = NotificationService.ShowErrorAsync("找不到指定的廠商資料");
                return null;
            }
            
            // 載入供應商產品資訊
            supplierProducts = await ProductSupplierService.GetBySupplierId(SupplierId.Value);
            
            return supplier;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("載入廠商資料時發生錯誤");
            
            // 設定安全的預設值，確保程式不會崩潰
            supplierProducts = new List<ProductSupplier>();
            
            return new Supplier
            {
                Code = "",
                CompanyName = "",
                ContactPerson = "",
                TaxNumber = "",
                Status = EntityStatus.Active
            };
        }
    }

    private async Task<string> GenerateSupplierCodeAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            SupplierService,
            "S",
            (service, code, excludeId) => service.IsSupplierCodeExistsAsync(code, excludeId)
        );
    }

    private async Task<bool> SaveSupplier(Supplier entity)
    {
        try
        {
            // 使用服務的完整驗證邏輯（包含重複檢查）
            var validationResult = await SupplierService.ValidateAsync(entity);
            if (!validationResult.IsSuccess)
            {
                _ = NotificationService.ShowErrorAsync(validationResult.ErrorMessage);
                return false;
            }

            ServiceResult result;
            
            if (SupplierId.HasValue)
            {
                // 更新現有廠商
                result = await SupplierService.UpdateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新產品關聯
                    await UpdateSupplierProductsAsync(entity.Id);
                }
            }
            else
            {
                // 新增廠商
                result = await SupplierService.CreateAsync(entity);
                if (result.IsSuccess)
                {
                    // 更新產品關聯
                    await UpdateSupplierProductsAsync(entity.Id);
                }
            }

            // 讓 GenericEditModalComponent 處理通用的成功/失敗訊息
            return result.IsSuccess;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("儲存廠商資料時發生錯誤");
            return false;
        }
    }

    /// <summary>
    /// 更新供應商產品關聯
    /// </summary>
    private async Task UpdateSupplierProductsAsync(int supplierId)
    {
        try
        {            
            // 確保我們有最新的供應商資料
            if (supplierId <= 0)
            {
                await NotificationService.ShowWarningAsync("供應商ID無效，跳過產品關聯儲存");
                return; 
            }

            // 使用 AutoEmptyRowHelper 過濾掉空行項目，只儲存有效的產品關聯
            var validSupplierProducts = AutoEmptyRowHelper.For<ProductSupplier>.GetNonEmptyItems(
                supplierProducts, 
                item => item.ProductId <= 0
            );

            // 使用 ProductSupplierService 的更新產品關聯方法
            if (validSupplierProducts.Any())
            {
                // 設定每個產品關聯的 SupplierId
                foreach (var supplierProduct in validSupplierProducts)
                {
                    supplierProduct.SupplierId = supplierId;
                }
                
                // 取得產品ID列表並更新關聯
                var productIds = validSupplierProducts.Select(sp => sp.ProductId).Where(id => id > 0).ToList();
                var result = await ProductSupplierService.BatchSetSupplierProductsAsync(supplierId, productIds);
                if (!result.IsSuccess)
                {
                    await NotificationService.ShowErrorAsync($"儲存產品關聯時發生錯誤：{result.ErrorMessage}");
                }
                
                // 更新詳細資訊（價格、交期等）
                foreach (var supplierProduct in validSupplierProducts)
                {
                    if (supplierProduct.ProductId > 0)
                    {
                        var existingRelation = await ProductSupplierService.GetByProductAndSupplierAsync(
                            supplierProduct.ProductId, supplierId);
                        
                        if (existingRelation != null)
                        {
                            // 更新價格資訊
                            if (supplierProduct.SupplierPrice.HasValue || !string.IsNullOrEmpty(supplierProduct.SupplierProductCode))
                            {
                                await ProductSupplierService.UpdateSupplierPriceAsync(
                                    existingRelation.Id, 
                                    supplierProduct.SupplierPrice,
                                    supplierProduct.SupplierProductCode);
                            }
                            
                            // 更新交期資訊
                            if (supplierProduct.LeadTime.HasValue || supplierProduct.MinOrderQuantity.HasValue)
                            {
                                await ProductSupplierService.UpdateDeliveryInfoAsync(
                                    existingRelation.Id,
                                    supplierProduct.LeadTime,
                                    supplierProduct.MinOrderQuantity);
                            }
                        }
                    }
                }
            }
            else
            {
                // 如果沒有有效的產品關聯，清空所有關聯
                var result = await ProductSupplierService.BatchSetSupplierProductsAsync(supplierId, new List<int>());
                if (!result.IsSuccess)
                {
                    await NotificationService.ShowErrorAsync($"清空產品關聯時發生錯誤：{result.ErrorMessage}");
                }
            }

            // 重新載入產品關聯資料以更新UI顯示
            supplierProducts = await ProductSupplierService.GetBySupplierId(supplierId);
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"儲存產品關聯時發生錯誤：{ex.Message}");
            // 記錄錯誤但不中斷流程，因為主要實體已經儲存成功
        }
    }

    private async Task OnSaveSuccess()
    {
        try
        {
            if (editModalComponent?.Entity != null)
            {
                await OnSupplierSaved.InvokeAsync(editModalComponent.Entity);
            }
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("儲存成功回調時發生錯誤");
        }
    }

    /// <summary>
    /// 處理已刪除的供應商產品ID - 實際從資料庫刪除
    /// </summary>
    private async Task HandleDeletedSupplierProductsChanged(List<int> deletedProductSupplierIds)
    {
        try
        {
            if (deletedProductSupplierIds?.Any() == true)
            {
                foreach (var productSupplierId in deletedProductSupplierIds)
                {
                    await ProductSupplierService.DeleteAsync(productSupplierId);
                }
                
                // 顯示成功通知
                await NotificationService.ShowSuccessAsync($"已刪除 {deletedProductSupplierIds.Count} 個供應商產品");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"刪除供應商產品時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理供應商產品變更事件
    /// </summary>
    private Task OnSupplierProductsChanged(List<ProductSupplier> updatedProducts)
    {
        try
        {
            supplierProducts = updatedProducts;
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("更新產品資料時發生錯誤");
            return Task.CompletedTask;
        }
    }

    /// <summary>
    /// 處理供應商產品新增事件
    /// </summary>
    private Task OnSupplierProductAdded(ProductSupplier addedProduct)
    {
        try
        {
            // 可以在這裡添加額外的邏輯
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("新增產品時發生錯誤");
            return Task.CompletedTask;
        }
    }

    /// <summary>
    /// 處理供應商產品移除事件
    /// </summary>
    private Task OnSupplierProductRemoved(ProductSupplier removedProduct)
    {
        try
        {
            // 可以在這裡添加額外的邏輯
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("移除產品時發生錯誤");
            return Task.CompletedTask;
        }
    }

    /// <summary>
    /// 取得額外區段內容（產品管理）
    /// </summary>
    private RenderFragment? GetAdditionalSections()
    {
        return @<div class="mt-4">
            <div class="row">
                <div class="col-12">
                    <SupplierProductManagerComponent TProductSupplierEntity="ProductSupplier"
                                                   TProductEntity="Product"
                                                   TSupplierEntity="Supplier"
                                                   Items="@supplierProducts"
                                                   ProductOptions="@availableProducts"
                                                   UnitOptions="@availableUnits"
                                                   ParentEntityId="@(SupplierId ?? editModalComponent?.Entity?.Id ?? 0)"
                                                   IsReadOnly="@false"
                                                   Title="產品資訊"
                                                   ItemDisplayName="產品"
                                                   EmptyMessage="尚未新增產品"
                                                   GetProductId="@GetProductIdDelegate"
                                                   GetSupplierProductCode="@GetSupplierProductCodeDelegate"
                                                   GetSupplierPrice="@GetSupplierPriceDelegate"
                                                   GetLeadTime="@GetLeadTimeDelegate"
                                                   GetMinOrderQuantity="@GetMinOrderQuantityDelegate"
                                                   GetUnitId="@GetUnitIdDelegate"
                                                   GetProductOptionId="@GetProductOptionIdDelegate"
                                                   GetProductOptionDisplayText="@GetProductOptionDisplayTextDelegate"
                                                   GetUnitOptionId="@GetUnitOptionIdDelegate"
                                                   GetUnitOptionDisplayText="@GetUnitOptionDisplayTextDelegate"
                                                   SetProductId="@SetProductIdDelegate"
                                                   SetSupplierProductCode="@SetSupplierProductCodeDelegate"
                                                   SetSupplierPrice="@SetSupplierPriceDelegate"
                                                   SetLeadTime="@SetLeadTimeDelegate"
                                                   SetMinOrderQuantity="@SetMinOrderQuantityDelegate"
                                                   SetUnitId="@SetUnitIdDelegate"
                                                   SetSupplierId="@SetSupplierIdDelegate"
                                                   ItemsChanged="@OnSupplierProductsChanged"
                                                   ItemAdded="@OnSupplierProductAdded"
                                                   ItemRemoved="@OnSupplierProductRemoved"
                                                   OnDeletedDetailsChanged="@HandleDeletedSupplierProductsChanged" />
                </div>
            </div>
        </div>;
    }

    // ===== SupplierProductManagerComponent 委派屬性 =====
    
    // Getter 委派
    private Func<ProductSupplier, int?> GetProductIdDelegate => item => item.ProductId > 0 ? item.ProductId : (int?)null;
    private Func<ProductSupplier, string?> GetSupplierProductCodeDelegate => item => item.SupplierProductCode;
    private Func<ProductSupplier, decimal?> GetSupplierPriceDelegate => item => item.SupplierPrice;
    private Func<ProductSupplier, int?> GetLeadTimeDelegate => item => item.LeadTime;
    private Func<ProductSupplier, int?> GetMinOrderQuantityDelegate => item => item.MinOrderQuantity;
    private Func<ProductSupplier, int?> GetUnitIdDelegate => item => item.UnitId;
    private Func<Product, int> GetProductOptionIdDelegate => product => product.Id;
    private Func<Product, string> GetProductOptionDisplayTextDelegate => product => $"{product.Code} - {product.Name}";
    private Func<Unit, int> GetUnitOptionIdDelegate => unit => unit.Id;
    private Func<Unit, string> GetUnitOptionDisplayTextDelegate => unit => unit.Name;
    
    // Setter 委派
    private Action<ProductSupplier, int?> SetProductIdDelegate => (item, value) => item.ProductId = value ?? 0;
    private Action<ProductSupplier, string?> SetSupplierProductCodeDelegate => (item, value) => item.SupplierProductCode = value;
    private Action<ProductSupplier, decimal?> SetSupplierPriceDelegate => (item, value) => item.SupplierPrice = value;
    private Action<ProductSupplier, int?> SetLeadTimeDelegate => (item, value) => item.LeadTime = value;
    private Action<ProductSupplier, int?> SetMinOrderQuantityDelegate => (item, value) => item.MinOrderQuantity = value;
    private Action<ProductSupplier, int?> SetUnitIdDelegate => (item, value) => item.UnitId = value;
    private Action<ProductSupplier, int> SetSupplierIdDelegate => (item, supplierId) => item.SupplierId = supplierId;
}
