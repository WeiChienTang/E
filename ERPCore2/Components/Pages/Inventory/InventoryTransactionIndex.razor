@page "/inventory/transactions"
@inject IInventoryTransactionService InventoryTransactionService
@inject IInventoryTransactionTypeService InventoryTransactionTypeService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="InventoryTransaction" 
                      TService="IInventoryTransactionService"
                      Service="@InventoryTransactionService"
                      EntityBasePath="/inventory/transactions"
                      PageTitle="庫存異動記錄"
                      PageSubtitle="檢視所有庫存異動歷史記錄"
                      EntityName="庫存異動記錄"
                      BreadcrumbItems="@breadcrumbItems"
                      FilterDefinitions="@filterDefinitions"
                      ColumnDefinitions="@columnDefinitions"
                      DataLoader="@LoadInventoryTransactionsAsync"
                      InitializeBasicData="@LoadBasicDataAsync"
                      FilterApplier="@ApplyInventoryTransactionFilters"
                      GetEntityDisplayName="@(transaction => transaction.TransactionNumber)"
                      RequiredPermission="InventoryTransaction.Read"
                      @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<InventoryTransaction, IInventoryTransactionService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // 基礎資料
    private List<Product> products = new();
    private List<Warehouse> warehouses = new();
    private List<InventoryTransactionType> inventoryTransactionTypes = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            // 記錄初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(OnInitialized), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionIndex",
                        Action = "Initialize"
                    }
                );
            });
            
            // 確保基本初始化完成，避免程式崩潰
            try
            {
                breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
                filterDefinitions = new List<SearchFilterDefinition>();
                columnDefinitions = new List<TableColumnDefinition>();
            }
            catch
            {
                // 最後的防護，確保不會因為初始化失敗而崩潰
            }
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("庫存管理", "/inventory"),
                new("庫存異動記錄")
            };
        }
        catch (Exception ex)
        {
            // 記錄麵包屑初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeBreadcrumbs), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionIndex",
                        Action = "InitializeBreadcrumbs"
                    }
                );
            });
            
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 載入產品清單
            products = await ProductService.GetAllAsync();
            
            // 載入倉庫清單
            warehouses = await WarehouseService.GetAllAsync();
            
            // 載入庫存異動類型清單
            inventoryTransactionTypes = await InventoryTransactionTypeService.GetAllAsync();
            
            // 重新初始化篩選器以載入下拉選單選項
            await InitializeFiltersAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(LoadBasicDataAsync), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionIndex",
                        Action = "LoadBasicDataAsync"
                    }
                );
            });
        }
    }

    // 載入庫存異動記錄
    private async Task<List<InventoryTransaction>> LoadInventoryTransactionsAsync()
    {
        try
        {
            return await InventoryTransactionService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(LoadInventoryTransactionsAsync), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionIndex",
                        Action = "LoadInventoryTransactionsAsync"
                    }
                );
            });
            
            // 確保 UI 狀態更新，並回傳安全的預設值
            StateHasChanged();
            return new List<InventoryTransaction>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 建立基本篩選定義（不包含下拉選單選項，這些將在 InitializeFiltersAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("TransactionNumber", "異動單號", "輸入異動單號搜尋")
                .AddSelect("TransactionTypeId", "異動類型", new List<SelectOption>())
                .AddSelect("ProductId", "產品", new List<SelectOption>())
                .AddSelect("WarehouseId", "倉庫", new List<SelectOption>())
                .AddDate("TransactionDateStart", "異動日期(起)")
                .AddDate("TransactionDateEnd", "異動日期(迄)")
                .AddText("ReferenceNumber", "參考單號", "輸入參考單號搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            // 記錄篩選器初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeFilters), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionIndex",
                        Action = "InitializeFilters"
                    }
                );
            });
            
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("異動單號", nameof(InventoryTransaction.TransactionNumber)),
                TableColumnDefinition.Text("異動類型", nameof(InventoryTransaction.TransactionType)),
                TableColumnDefinition.Date("異動日期", nameof(InventoryTransaction.TransactionDate)),
                TableColumnDefinition.Text("產品名稱", "Product.ProductName"),
                TableColumnDefinition.Text("倉庫", "Warehouse.WarehouseName"),
                TableColumnDefinition.Number("異動數量", nameof(InventoryTransaction.Quantity)),
                TableColumnDefinition.Number("異動前庫存", nameof(InventoryTransaction.StockBefore)),
                TableColumnDefinition.Number("異動後庫存", nameof(InventoryTransaction.StockAfter)),
                TableColumnDefinition.Currency("單位成本", nameof(InventoryTransaction.UnitCost)),
                TableColumnDefinition.Text("參考單號", nameof(InventoryTransaction.ReferenceNumber))
            };
        }
        catch (Exception ex)
        {
            // 記錄表格欄位初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeTableColumns), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionIndex",
                        Action = "InitializeTableColumns"
                    }
                );
            });
            
            // 設定安全的預設值
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }

    // 自定義篩選邏輯
    private IQueryable<InventoryTransaction> ApplyInventoryTransactionFilters(SearchFilterModel searchModel, IQueryable<InventoryTransaction> query)
    {
        try
        {
            // 異動單號篩選
            var transactionNumberFilter = searchModel.GetFilterValue("TransactionNumber")?.ToString();
            if (!string.IsNullOrWhiteSpace(transactionNumberFilter))
            {
                query = query.Where(t => t.TransactionNumber.Contains(transactionNumberFilter));
            }

            // 異動類型篩選
            var transactionTypeIdFilter = searchModel.GetFilterValue("TransactionTypeId")?.ToString();
            if (!string.IsNullOrWhiteSpace(transactionTypeIdFilter) && int.TryParse(transactionTypeIdFilter, out var transactionTypeId))
            {
                var transactionType = inventoryTransactionTypes.FirstOrDefault(tt => tt.Id == transactionTypeId);
                if (transactionType != null)
                {
                    query = query.Where(t => t.TransactionType == transactionType.TransactionType);
                }
            }

            // 產品篩選
            var productIdFilter = searchModel.GetFilterValue("ProductId")?.ToString();
            if (!string.IsNullOrWhiteSpace(productIdFilter) && int.TryParse(productIdFilter, out var productId))
            {
                query = query.Where(t => t.ProductId == productId);
            }

            // 倉庫篩選
            var warehouseIdFilter = searchModel.GetFilterValue("WarehouseId")?.ToString();
            if (!string.IsNullOrWhiteSpace(warehouseIdFilter) && int.TryParse(warehouseIdFilter, out var warehouseId))
            {
                query = query.Where(t => t.WarehouseId == warehouseId);
            }

            // 異動日期篩選（起）
            var transactionDateStartFilter = searchModel.GetFilterValue("TransactionDateStart")?.ToString();
            if (!string.IsNullOrWhiteSpace(transactionDateStartFilter) && DateTime.TryParse(transactionDateStartFilter, out var startDate))
            {
                query = query.Where(t => t.TransactionDate >= startDate);
            }

            // 異動日期篩選（迄）
            var transactionDateEndFilter = searchModel.GetFilterValue("TransactionDateEnd")?.ToString();
            if (!string.IsNullOrWhiteSpace(transactionDateEndFilter) && DateTime.TryParse(transactionDateEndFilter, out var endDate))
            {
                query = query.Where(t => t.TransactionDate <= endDate.AddDays(1).AddSeconds(-1));
            }

            // 參考單號篩選
            var referenceNumberFilter = searchModel.GetFilterValue("ReferenceNumber")?.ToString();
            if (!string.IsNullOrWhiteSpace(referenceNumberFilter))
            {
                query = query.Where(t => t.ReferenceNumber != null && t.ReferenceNumber.Contains(referenceNumberFilter));
            }

            return query.OrderByDescending(t => t.TransactionDate).ThenByDescending(t => t.Id);
        }
        catch (Exception ex)
        {
            // 記錄篩選錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(ApplyInventoryTransactionFilters), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionIndex",
                        Action = "ApplyInventoryTransactionFilters"
                    }
                );
            });
            
            // 回傳原始查詢，確保程式不會崩潰
            return query.OrderByDescending(t => t.TransactionDate).ThenByDescending(t => t.Id);
        }
    }

    private Task InitializeFiltersAsync()
    {
        try
        {
            // 載入異動類型選項
            var transactionTypeOptions = inventoryTransactionTypes.Select(tt => new SelectOption 
            { 
                Value = tt.Id.ToString(), 
                Text = tt.TypeName 
            }).ToList();

            // 更新產品選項
            var productOptions = products.Select(p => new SelectOption 
            { 
                Value = p.Id.ToString(), 
                Text = p.ProductName 
            }).ToList();

            // 更新倉庫選項
            var warehouseOptions = warehouses.Select(w => new SelectOption 
            { 
                Value = w.Id.ToString(), 
                Text = w.WarehouseName 
            }).ToList();

            // 尋找並更新對應的篩選器
            var transactionTypeFilter = filterDefinitions.FirstOrDefault(f => f.Name == "TransactionTypeId");
            if (transactionTypeFilter != null)
            {
                transactionTypeFilter.Options = transactionTypeOptions;
            }

            var productFilter = filterDefinitions.FirstOrDefault(f => f.Name == "ProductId");
            if (productFilter != null)
            {
                productFilter.Options = productOptions;
            }

            var warehouseFilter = filterDefinitions.FirstOrDefault(f => f.Name == "WarehouseId");
            if (warehouseFilter != null)
            {
                warehouseFilter.Options = warehouseOptions;
            }
        }
        catch (Exception ex)
        {
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeFiltersAsync), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionIndex",
                        Action = "InitializeFiltersAsync"
                    }
                );
            });
        }
        
        return Task.CompletedTask;
    }
}
