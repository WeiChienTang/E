@page "/inventory/stock"
@inject IInventoryStockService InventoryStockService
@inject IWarehouseService WarehouseService
@inject IProductService ProductService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="InventoryStock" 
                      TService="IInventoryStockService"
                      Service="@InventoryStockService"
                      EntityBasePath="/inventory/stock"
                      PageTitle="庫存管理"
                      PageSubtitle="管理產品庫存資料與庫存狀態"
                      EntityName="庫存"
                      BreadcrumbItems="@breadcrumbItems"
                      FilterDefinitions="@filterDefinitions"
                      ColumnDefinitions="@columnDefinitions"
                      DataLoader="@LoadInventoryStocksAsync"
                      InitializeBasicData="@LoadBasicDataAsync"
                      FilterApplier="@ApplyInventoryStockFilters"
                      GetEntityDisplayName="@(stock => $"{stock.Product?.ProductName} - {stock.Warehouse?.WarehouseName}")"
                      RequiredPermission="InventoryStock.Read"
                      @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<InventoryStock, IInventoryStockService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            // 記錄初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(OnInitialized), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryStockIndex",
                        Action = "Initialize",
                        Phase = "ComponentInitialization"
                    });
            });
            
            // 確保基本初始化完成，避免程式崩潰
            try
            {
                breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
                {
                    new("首頁", "/"),
                    new("庫存管理", "/inventory"),
                    new("庫存查詢")
                };
                filterDefinitions = new List<SearchFilterDefinition>();
                columnDefinitions = new List<TableColumnDefinition>();
            }
            catch
            {
                // 如果連預設值都設定失敗，至少確保不是 null
                breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
                filterDefinitions ??= new List<SearchFilterDefinition>();
                columnDefinitions ??= new List<TableColumnDefinition>();
            }
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("庫存管理", "/inventory"),
                new("庫存查詢")
            };
        }
        catch (Exception ex)
        {
            // 記錄麵包屑初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeBreadcrumbs), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryStockIndex",
                        Action = "InitializeBreadcrumbs"
                    });
            });
            
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 重新初始化篩選器以載入下拉選單選項
            await InitializeFiltersAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadBasicDataAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "InventoryStockIndex",
                    Action = "LoadBasicData",
                    ExpectedData = "Warehouses, Products"
                });
        }
    }

    // 載入庫存資料
    private async Task<List<InventoryStock>> LoadInventoryStocksAsync()
    {
        try
        {
            return await InventoryStockService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadInventoryStocksAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "InventoryStockIndex",
                    Action = "LoadInventoryStocks",
                    ExpectedDataType = "List<InventoryStock>"
                });
            
            // 確保 UI 狀態更新，並回傳安全的預設值
            StateHasChanged();
            return new List<InventoryStock>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備庫存狀態選項
            var stockStatusOptions = new List<SelectOption>
            {
                new() { Text = "有庫存", Value = "hasStock" },
                new() { Text = "缺貨", Value = "outOfStock" },
                new() { Text = "低於安全庫存", Value = "lowStock" }
            };

            // 建立基本篩選定義（不包含下拉選單選項，這些將在 InitializeFiltersAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("ProductCode", "產品編號", "輸入產品編號搜尋")
                .AddText("ProductName", "產品名稱", "輸入產品名稱搜尋")
                .AddSelect("WarehouseId", "倉庫", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("ProductId", "產品", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("StockStatus", "庫存狀態", stockStatusOptions)
                .AddNumber("MinStock", "最低庫存量", "輸入最低庫存量")
                .Build();
        }
        catch (Exception ex)
        {
            // 記錄篩選器初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeFilters), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryStockIndex",
                        Action = "InitializeFilters"
                    });
            });
            
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("產品編號", "Product.ProductCode"),
                TableColumnDefinition.Text("產品名稱", "Product.ProductName"),
                TableColumnDefinition.Text("倉庫", "Warehouse.WarehouseName"),
                TableColumnDefinition.Text("位置", "WarehouseLocation.LocationName"),
                TableColumnDefinition.Number("現有庫存", nameof(InventoryStock.CurrentStock), "N0"),
                TableColumnDefinition.Number("可用庫存", nameof(InventoryStock.AvailableStock), "N0"),
                TableColumnDefinition.Number("預留庫存", nameof(InventoryStock.ReservedStock), "N0"),
                TableColumnDefinition.Number("最低庫存", nameof(InventoryStock.MinStockLevel), "N0"),
                TableColumnDefinition.Date("更新時間", nameof(InventoryStock.UpdatedAt), "yyyy/MM/dd HH:mm")
            };
        }
        catch (Exception ex)
        {
            // 記錄表格欄位初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeTableColumns), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryStockIndex",
                        Action = "InitializeTableColumns"
                    });
            });
            
            // 設定安全的預設值
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }

    // 自定義篩選邏輯
    private IQueryable<InventoryStock> ApplyInventoryStockFilters(SearchFilterModel searchModel, IQueryable<InventoryStock> query)
    {
        try
        {
            // 產品編號篩選
            var productCodeFilter = searchModel.GetFilterValue("ProductCode")?.ToString();
            if (!string.IsNullOrWhiteSpace(productCodeFilter))
            {
                query = query.Where(s => 
                    s.Product != null && 
                    s.Product.Code != null && s.Product.Code.Contains(productCodeFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 產品名稱篩選
            var productNameFilter = searchModel.GetFilterValue("ProductName")?.ToString();
            if (!string.IsNullOrWhiteSpace(productNameFilter))
            {
                query = query.Where(s => 
                    s.Product != null && 
                    s.Product.ProductName.Contains(productNameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 倉庫篩選
            var warehouseIdFilter = searchModel.GetFilterValue("WarehouseId")?.ToString();
            if (!string.IsNullOrWhiteSpace(warehouseIdFilter) && int.TryParse(warehouseIdFilter, out var warehouseId))
            {
                query = query.Where(s => s.WarehouseId == warehouseId);
            }

            // 產品篩選
            var productIdFilter = searchModel.GetFilterValue("ProductId")?.ToString();
            if (!string.IsNullOrWhiteSpace(productIdFilter) && int.TryParse(productIdFilter, out var productId))
            {
                query = query.Where(s => s.ProductId == productId);
            }

            // 庫存狀態篩選
            var stockStatusFilter = searchModel.GetFilterValue("StockStatus")?.ToString();
            if (!string.IsNullOrWhiteSpace(stockStatusFilter))
            {
                query = stockStatusFilter switch
                {
                    "hasStock" => query.Where(s => s.CurrentStock > 0),
                    "outOfStock" => query.Where(s => s.CurrentStock <= 0),
                    "lowStock" => query.Where(s => s.MinStockLevel.HasValue && s.CurrentStock <= s.MinStockLevel.Value),
                    _ => query
                };
            }

            // 最低庫存量篩選
            var minStockFilter = searchModel.GetFilterValue("MinStock")?.ToString();
            if (!string.IsNullOrWhiteSpace(minStockFilter) && int.TryParse(minStockFilter, out var minStock))
            {
                query = query.Where(s => s.CurrentStock >= minStock);
            }

            return query.OrderBy(s => s.Product != null ? s.Product.Code : "");
        }
        catch (Exception ex)
        {
            // 記錄篩選錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(ApplyInventoryStockFilters), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryStockIndex",
                        Action = "ApplyFilters",
                        FilterModel = searchModel
                    });
            });
            
            // 回傳原始查詢，確保程式不會崩潰
            return query.OrderBy(s => s.Product != null ? s.Product.Code : "");
        }
    }

    private async Task InitializeFiltersAsync()
    {
        try
        {
            // 載入倉庫選項
            var warehouses = await WarehouseService.GetAllAsync();
            var warehouseOptions = warehouses.Select(w => new SelectOption
            {
                Text = w.WarehouseName,
                Value = w.Id.ToString()
            }).ToList();

            // 載入產品選項
            var products = await ProductService.GetAllAsync();
            var productOptions = products.Select(p => new SelectOption
            {
                Text = p.ProductName,
                Value = p.Id.ToString()
            }).ToList();

            // 準備庫存狀態選項
            var stockStatusOptions = new List<SelectOption>
            {
                new() { Text = "有庫存", Value = "hasStock" },
                new() { Text = "缺貨", Value = "outOfStock" },
                new() { Text = "低於安全庫存", Value = "lowStock" }
            };

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("ProductCode", "產品編號", "輸入產品編號搜尋")
                .AddText("ProductName", "產品名稱", "輸入產品名稱搜尋")
                .AddSelect("WarehouseId", "倉庫", warehouseOptions)
                .AddSelect("ProductId", "產品", productOptions)
                .AddSelect("StockStatus", "庫存狀態", stockStatusOptions)
                .AddNumber("MinStock", "最低庫存量", "輸入最低庫存量")
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，刷新組件以更新篩選器
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFiltersAsync), GetType(),
                additionalData: new { PageName = "InventoryStockIndex", Action = "InitializeFiltersAsync" });
        }
    }
}