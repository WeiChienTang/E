@page "/stock-taking/report/{Id:int}"

@inject IStockTakingService StockTakingService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>盤點差異報告 - @(stockTaking?.TakingNumber ?? "")</PageTitle>

<PagePermissionCheck RequiredPermission="StockTaking.Read">
    <GenericHeaderComponent 
        PageTitle="@($"盤點差異報告 - {stockTaking?.TakingNumber ?? ""}")" 
        BreadcrumbItems="@breadcrumbItems" 
        ShowBackButton="true"
        BackUrl="@($"/stock-taking/{Id}")" />

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">載入中...</span>
            </div>
            <p class="mt-2">載入報告資料中...</p>
        </div>
    }
    else if (stockTaking == null)
    {
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle me-2"></i>
            找不到指定的盤點記錄
        </div>
    }
    else
    {
        <!-- 報告摘要 -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-info-circle me-2"></i>
                            盤點基本資訊
                        </h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-borderless mb-0">
                            <tr>
                                <td class="fw-bold" style="width: 30%;">盤點單號：</td>
                                <td>@stockTaking.TakingNumber</td>
                            </tr>
                            <tr>
                                <td class="fw-bold">盤點日期：</td>
                                <td>@stockTaking.TakingDate.ToString("yyyy/MM/dd")</td>
                            </tr>
                            <tr>
                                <td class="fw-bold">倉庫：</td>
                                <td>@stockTaking.Warehouse?.WarehouseName</td>
                            </tr>
                            <tr>
                                <td class="fw-bold">盤點類型：</td>
                                <td>@GetTypeDisplayName(stockTaking.TakingType)</td>
                            </tr>
                            <tr>
                                <td class="fw-bold">狀態：</td>
                                <td>
                                    <span class="badge bg-@GetStatusBadgeColor(stockTaking.TakingStatus)">
                                        @GetStatusDisplayName(stockTaking.TakingStatus)
                                    </span>
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-chart-pie me-2"></i>
                            差異統計
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="border-end">
                                    <h4 class="text-primary">@stockTaking.TotalItems</h4>
                                    <small class="text-muted">總盤點項目</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <h4 class="@(stockTaking.DifferenceItems > 0 ? "text-warning" : "text-success")">
                                    @stockTaking.DifferenceItems
                                </h4>
                                <small class="text-muted">差異項目</small>
                            </div>
                        </div>
                        
                        <hr />
                        
                        <div class="row text-center">
                            <div class="col-4">
                                <h5 class="text-success">@noVarianceCount</h5>
                                <small class="text-muted">無差異</small>
                            </div>
                            <div class="col-4">
                                <h5 class="text-info">@positiveVarianceCount</h5>
                                <small class="text-muted">盤盈</small>
                            </div>
                            <div class="col-4">
                                <h5 class="text-danger">@negativeVarianceCount</h5>
                                <small class="text-muted">盤虧</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 金額差異摘要 -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-dollar-sign me-2"></i>
                            金額差異摘要
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-3">
                                <div class="border-end">
                                    <h4 class="@(totalDifferenceAmount >= 0 ? "text-success" : "text-danger")">
                                        @totalDifferenceAmount.ToString("C")
                                    </h4>
                                    <small class="text-muted">總差異金額</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="border-end">
                                    <h5 class="text-success">@positiveDifferenceAmount.ToString("C")</h5>
                                    <small class="text-muted">盤盈金額</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="border-end">
                                    <h5 class="text-danger">@negativeDifferenceAmount.ToString("C")</h5>
                                    <small class="text-muted">盤虧金額</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <h5 class="text-info">@Math.Abs(totalDifferenceAmount).ToString("C")</h5>
                                <small class="text-muted">絕對差異金額</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 篩選和操作按鈕 -->
        <div class="card mb-4">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <div class="row g-3">
                            <div class="col-auto">
                                <select class="form-select" value="@selectedVarianceFilter" @onchange="OnVarianceFilterChanged">
                                    <option value="All">全部項目</option>
                                    <option value="Difference">僅差異項目</option>
                                    <option value="Positive">僅盤盈項目</option>
                                    <option value="Negative">僅盤虧項目</option>
                                    <option value="NoVariance">僅無差異項目</option>
                                </select>
                            </div>
                            <div class="col-auto">
                                <input type="text" class="form-control" @bind="searchTerm" @oninput="ApplyFilters" 
                                       placeholder="搜尋商品編號或名稱..." />
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 text-end">
                        @if (HasAdjustmentPermission() && CanCreateAdjustment())
                        {
                            <button type="button" class="btn btn-warning me-2" @onclick="CreateAdjustmentForDifferences" disabled="@isCreatingAdjustment">
                                @if (isCreatingAdjustment)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                <i class="fas fa-balance-scale me-1"></i>
                                產生調整單
                            </button>
                        }
                        <button type="button" class="btn btn-primary" @onclick="ExportReport">
                            <i class="fas fa-download me-1"></i>
                            匯出報告
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- 差異明細表格 -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-list me-2"></i>
                    差異明細 (@filteredDetails.Count 項)
                </h5>
            </div>
            <div class="card-body">
                @if (!filteredDetails.Any())
                {
                    <div class="text-center py-4">
                        <i class="fas fa-search fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">無符合條件的記錄</h5>
                        <p class="text-muted">請調整篩選條件或搜尋關鍵字</p>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>商品編號</th>
                                    <th>商品名稱</th>
                                    <th>倉庫位置</th>
                                    <th class="text-end">系統庫存</th>
                                    <th class="text-end">實盤數量</th>
                                    <th class="text-end">差異數量</th>
                                    <th class="text-end">單位成本</th>
                                    <th class="text-end">差異金額</th>
                                    <th class="text-center">差異類型</th>
                                    <th class="text-center">調整狀態</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detail in pagedDetails)
                                {
                                    <tr class="@GetDetailRowClass(detail)">
                                        <td>@detail.Product?.ProductCode</td>
                                        <td>@detail.Product?.ProductName</td>
                                        <td>@(detail.WarehouseLocation?.LocationName ?? "-")</td>
                                        <td class="text-end">@detail.SystemStock.ToString("N0")</td>
                                        <td class="text-end">@(detail.ActualStock?.ToString("N0") ?? "-")</td>
                                        <td class="text-end">
                                            @if (detail.DifferenceQuantity.HasValue)
                                            {
                                                <span class="@GetDifferenceClass(detail.DifferenceQuantity.Value)">
                                                    @detail.DifferenceQuantity.Value.ToString("N0")
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td class="text-end">@(detail.UnitCost?.ToString("C") ?? "-")</td>
                                        <td class="text-end">
                                            @if (detail.DifferenceAmount.HasValue)
                                            {
                                                <span class="@GetDifferenceAmountClass(detail.DifferenceAmount.Value)">
                                                    @detail.DifferenceAmount.Value.ToString("C")
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td class="text-center">
                                            @if (detail.DifferenceQuantity.HasValue)
                                            {
                                                <span class="badge bg-@GetVarianceTypeBadgeColor(detail.DifferenceQuantity.Value)">
                                                    @GetVarianceTypeDisplayName(detail.DifferenceQuantity.Value)
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">未盤點</span>
                                            }
                                        </td>
                                        <td class="text-center">
                                            @if (detail.IsAdjusted)
                                            {
                                                <span class="badge bg-success">已調整</span>
                                                @if (!string.IsNullOrEmpty(detail.AdjustmentNumber))
                                                {
                                                    <br />
                                                    <small class="text-muted">@detail.AdjustmentNumber</small>
                                                }
                                            }
                                            else if (detail.HasDifference)
                                            {
                                                <span class="badge bg-warning">待調整</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">無需調整</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- 分頁控制 -->
                    @if (filteredDetails.Count > pageSize)
                    {
                        <nav class="mt-3">
                            <ul class="pagination justify-content-center">
                                @{
                                    var totalPages = (int)Math.Ceiling((double)filteredDetails.Count / pageSize);
                                }
                                
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <a class="page-link" @onclick="() => HandlePageChanged(currentPage - 1)">上一頁</a>
                                </li>
                                
                                @for (int i = 1; i <= totalPages; i++)
                                {
                                    var pageNum = i;
                                    <li class="page-item @(currentPage == pageNum ? "active" : "")">
                                        <a class="page-link" @onclick="() => HandlePageChanged(pageNum)">@pageNum</a>
                                    </li>
                                }
                                
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <a class="page-link" @onclick="() => HandlePageChanged(currentPage + 1)">下一頁</a>
                                </li>
                            </ul>
                        </nav>
                    }
                }
            </div>
        </div>
    }
</PagePermissionCheck>

@code {
    [Parameter] public int Id { get; set; }

    private StockTaking? stockTaking;
    private List<ERPCore2.Data.Entities.StockTakingDetail> allDetails = new();
    private List<ERPCore2.Data.Entities.StockTakingDetail> filteredDetails = new();
    private List<ERPCore2.Data.Entities.StockTakingDetail> pagedDetails = new();

    private List<ERPCore2.Components.Shared.Headers.GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private bool isLoading = true;
    private bool isCreatingAdjustment = false;

    // 篩選和搜尋
    private string selectedVarianceFilter = "All";
    private string searchTerm = "";

    // 分頁
    private int currentPage = 1;
    private int pageSize = 20;

    // 統計資料
    private int noVarianceCount = 0;
    private int positiveVarianceCount = 0;
    private int negativeVarianceCount = 0;
    private decimal totalDifferenceAmount = 0;
    private decimal positiveDifferenceAmount = 0;
    private decimal negativeDifferenceAmount = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            breadcrumbItems = new List<ERPCore2.Components.Shared.Headers.GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("庫存管理", "/inventory"),
                new("庫存盤點", "/stock-taking"),
                new("差異報告")
            };

            await LoadDataAsync();
            CalculateStatistics();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType(),
                Navigation
            );
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            stockTaking = await StockTakingService.GetByIdAsync(Id);
            
            if (stockTaking != null)
            {
                allDetails = await StockTakingService.GetStockTakingDetailsAsync(Id);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadDataAsync),
                GetType(),
                additionalData: "載入資料失敗"
            );
        }
    }

    private void CalculateStatistics()
    {
        try
        {
            var completedDetails = allDetails.Where(d => d.ActualStock.HasValue).ToList();
            
            noVarianceCount = completedDetails.Count(d => !d.HasDifference);
            positiveVarianceCount = completedDetails.Count(d => d.DifferenceQuantity > 0);
            negativeVarianceCount = completedDetails.Count(d => d.DifferenceQuantity < 0);

            totalDifferenceAmount = completedDetails.Where(d => d.DifferenceAmount.HasValue)
                                                   .Sum(d => d.DifferenceAmount!.Value);
            
            positiveDifferenceAmount = completedDetails.Where(d => d.DifferenceAmount > 0)
                                                      .Sum(d => d.DifferenceAmount!.Value);
            
            negativeDifferenceAmount = completedDetails.Where(d => d.DifferenceAmount < 0)
                                                      .Sum(d => d.DifferenceAmount!.Value);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(CalculateStatistics),
                GetType(),
                additionalData: "計算統計資料失敗"
            );
        }
    }

    private void OnVarianceFilterChanged(ChangeEventArgs e)
    {
        selectedVarianceFilter = e.Value?.ToString() ?? "All";
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        try
        {
            filteredDetails = allDetails.ToList();

            // 差異類型篩選
            switch (selectedVarianceFilter)
            {
                case "Difference":
                    filteredDetails = filteredDetails.Where(d => d.HasDifference).ToList();
                    break;
                case "Positive":
                    filteredDetails = filteredDetails.Where(d => d.DifferenceQuantity > 0).ToList();
                    break;
                case "Negative":
                    filteredDetails = filteredDetails.Where(d => d.DifferenceQuantity < 0).ToList();
                    break;
                case "NoVariance":
                    filteredDetails = filteredDetails.Where(d => d.ActualStock.HasValue && !d.HasDifference).ToList();
                    break;
            }

            // 搜尋篩選
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                filteredDetails = filteredDetails.Where(d =>
                    (d.Product?.ProductCode?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (d.Product?.ProductName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
                ).ToList();
            }

            currentPage = 1;
            UpdatePagination();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplyFilters),
                GetType(),
                additionalData: "套用篩選條件失敗"
            );
        }
    }

    private void UpdatePagination()
    {
        try
        {
            var totalPages = (int)Math.Ceiling((double)filteredDetails.Count / pageSize);
            if (totalPages == 0) totalPages = 1;
            currentPage = Math.Min(currentPage, Math.Max(1, totalPages));
            
            pagedDetails = filteredDetails
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(UpdatePagination),
                GetType(),
                additionalData: "更新分頁失敗"
            );
        }
    }

    private void HandlePageChanged(int newPage)
    {
        try
        {
            currentPage = newPage;
            UpdatePagination();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(HandlePageChanged),
                GetType(),
                additionalData: "處理頁面變更失敗"
            );
        }
    }

    private async Task CreateAdjustmentForDifferences()
    {
        try
        {
            var differenceItems = allDetails.Where(d => d.HasDifference && !d.IsAdjusted).ToList();
            
            if (!differenceItems.Any())
            {
                await JSRuntime.InvokeVoidAsync("alert", "沒有需要調整的差異項目");
                return;
            }

            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"將為 {differenceItems.Count} 個差異項目產生庫存調整單，確定要繼續嗎？");
            
            if (!confirmed) return;

            isCreatingAdjustment = true;

            var result = await StockTakingService.GenerateAdjustmentTransactionsAsync(Id);
            
            if (result.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", "調整單產生成功");
                await LoadDataAsync();
                CalculateStatistics();
                ApplyFilters();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "產生調整單失敗：" + result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(CreateAdjustmentForDifferences),
                GetType(),
                additionalData: "產生調整單失敗"
            );
            await JSRuntime.InvokeVoidAsync("alert", "產生調整單失敗，請稍後再試");
        }
        finally
        {
            isCreatingAdjustment = false;
        }
    }

    private async Task ExportReport()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", "匯出功能開發中...");
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ExportReport),
                GetType(),
                additionalData: "匯出報告失敗"
            );
        }
    }

    private bool HasAdjustmentPermission()
    {
        // TODO: 實作權限檢查
        return true;
    }

    private bool CanCreateAdjustment()
    {
        return stockTaking?.TakingStatus == StockTakingStatusEnum.Completed ||
               stockTaking?.TakingStatus == StockTakingStatusEnum.Approved;
    }

    private static string GetStatusDisplayName(StockTakingStatusEnum status)
    {
        return status switch
        {
            StockTakingStatusEnum.Draft => "草稿",
            StockTakingStatusEnum.InProgress => "進行中",
            StockTakingStatusEnum.Completed => "已完成",
            StockTakingStatusEnum.PendingApproval => "待審核",
            StockTakingStatusEnum.Approved => "已審核",
            StockTakingStatusEnum.Cancelled => "已取消",
            _ => status.ToString()
        };
    }

    private static string GetTypeDisplayName(StockTakingTypeEnum type)
    {
        return type switch
        {
            StockTakingTypeEnum.Full => "全盤",
            StockTakingTypeEnum.Cycle => "循環盤點",
            StockTakingTypeEnum.Sample => "抽樣盤點",
            StockTakingTypeEnum.Specific => "特定商品",
            StockTakingTypeEnum.Location => "特定位置",
            _ => type.ToString()
        };
    }

    private static string GetStatusBadgeColor(StockTakingStatusEnum status)
    {
        return status switch
        {
            StockTakingStatusEnum.Draft => "secondary",
            StockTakingStatusEnum.InProgress => "warning",
            StockTakingStatusEnum.Completed => "info",
            StockTakingStatusEnum.PendingApproval => "warning",
            StockTakingStatusEnum.Approved => "success",
            StockTakingStatusEnum.Cancelled => "danger",
            _ => "secondary"
        };
    }

    private static string GetDetailRowClass(ERPCore2.Data.Entities.StockTakingDetail detail)
    {
        if (!detail.ActualStock.HasValue) return "table-light";
        if (!detail.HasDifference) return "";
        
        return detail.DifferenceQuantity > 0 ? "table-success" : "table-danger";
    }

    private static string GetDifferenceClass(int difference)
    {
        return difference switch
        {
            > 0 => "text-success fw-bold",
            < 0 => "text-danger fw-bold",
            _ => "text-muted"
        };
    }

    private static string GetDifferenceAmountClass(decimal amount)
    {
        return amount switch
        {
            > 0 => "text-success fw-bold",
            < 0 => "text-danger fw-bold",
            _ => "text-muted"
        };
    }

    private static string GetVarianceTypeBadgeColor(int difference)
    {
        return difference switch
        {
            > 0 => "success",
            < 0 => "danger",
            _ => "secondary"
        };
    }

    private static string GetVarianceTypeDisplayName(int difference)
    {
        return difference switch
        {
            > 0 => "盤盈",
            < 0 => "盤虧",
            _ => "無差異"
        };
    }
}
