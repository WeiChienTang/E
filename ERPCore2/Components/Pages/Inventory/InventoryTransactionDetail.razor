@page "/inventory/transactions/detail/{transactionId:int}"
@inject IInventoryTransactionService InventoryTransactionService
@inject IInventoryTransactionTypeService InventoryTransactionTypeService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@rendermode InteractiveServer

<GenericDetailPageComponent TEntity="InventoryTransaction" 
                        TService="IInventoryTransactionService"
                        EntityId="@TransactionId"
                        Entity="@inventoryTransaction"
                        Service="@InventoryTransactionService"
                        EntityName="庫存異動記錄"
                        EntityNamePlural="庫存異動記錄"
                        IndexRoute="/inventory/transactions"
                        EditRoute="/inventory/transactions/edit"
                        LoadingText="載入庫存異動記錄中..."
                        BreadcrumbItems="@breadcrumbItems"
                        DataLoader="@LoadInventoryTransactionDataAsync"
                        AdditionalDataLoader="@LoadAdditionalDataAsync"
                        EntityTitleSelector="@(t => t.TransactionNumber)"
                        EntitySubtitleSelector="@(t => $"異動日期：{t.TransactionDate:yyyy/MM/dd}")"
                        EntityDisplayNameSelector="@(t => t.TransactionNumber)"
                        OnDataLoaded="@OnInventoryTransactionDataLoaded"
                        UseTabLayout="true"
                        TabSections="@GetTabSections()" 
                        RequiredPermission="InventoryTransaction.Read"/>

@code {
    [Parameter] public int TransactionId { get; set; }

    private InventoryTransaction? inventoryTransaction;
    private Product? product;
    private Warehouse? warehouse;
    private InventoryTransactionType? transactionType;
    private bool _isLoading = false; // 防止重複載入

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("庫存管理", "/inventory"),
        new("庫存異動記錄", "/inventory/transactions"),
        new("異動記錄詳情")
    };

    private async Task<InventoryTransaction?> LoadInventoryTransactionDataAsync()
    {
        try
        {
            if (_isLoading) return inventoryTransaction;
            _isLoading = true;

            inventoryTransaction = await InventoryTransactionService.GetByIdAsync(TransactionId);
            return inventoryTransaction;
        }
        catch (Exception ex)
        {
            // 記錄錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(LoadInventoryTransactionDataAsync), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionDetail",
                        Action = "LoadInventoryTransactionDataAsync",
                        TransactionId = TransactionId
                    }
                );
            });

            return null;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            if (inventoryTransaction == null) return;

            var tasks = new List<Task>();

            // 載入產品資料
            if (inventoryTransaction.ProductId > 0)
            {
                tasks.Add(Task.Run(async () =>
                {
                    try
                    {
                        product = await ProductService.GetByIdAsync(inventoryTransaction.ProductId);
                    }
                    catch (Exception ex)
                    {
                        _ = Task.Run(async () =>
                        {
                            await ErrorHandlingHelper.HandlePageErrorAsync(
                                ex, 
                                nameof(LoadAdditionalDataAsync), 
                                GetType(),
                                additionalData: new { 
                                    Action = "LoadProduct",
                                    ProductId = inventoryTransaction.ProductId
                                }
                            );
                        });
                    }
                }));
            }

            // 載入倉庫資料
            if (inventoryTransaction.WarehouseId > 0)
            {
                tasks.Add(Task.Run(async () =>
                {
                    try
                    {
                        warehouse = await WarehouseService.GetByIdAsync(inventoryTransaction.WarehouseId);
                    }
                    catch (Exception ex)
                    {
                        _ = Task.Run(async () =>
                        {
                            await ErrorHandlingHelper.HandlePageErrorAsync(
                                ex, 
                                nameof(LoadAdditionalDataAsync), 
                                GetType(),
                                additionalData: new { 
                                    Action = "LoadWarehouse",
                                    WarehouseId = inventoryTransaction.WarehouseId
                                }
                            );
                        });
                    }
                }));
            }

            // 載入異動類型資料
            tasks.Add(Task.Run(async () =>
            {
                try
                {
                    var allTransactionTypes = await InventoryTransactionTypeService.GetAllAsync();
                    transactionType = allTransactionTypes.FirstOrDefault(tt => tt.TransactionType == inventoryTransaction.TransactionType);
                }
                catch (Exception ex)
                {
                    _ = Task.Run(async () =>
                    {
                        await ErrorHandlingHelper.HandlePageErrorAsync(
                            ex, 
                            nameof(LoadAdditionalDataAsync), 
                            GetType(),
                            additionalData: new { 
                                Action = "LoadTransactionType",
                                TransactionType = inventoryTransaction.TransactionType
                            }
                        );
                    });
                }
            }));

            await Task.WhenAll(tasks);
        }
        catch (Exception ex)
        {
            // 記錄額外資料載入錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(LoadAdditionalDataAsync), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionDetail",
                        Action = "LoadAdditionalDataAsync",
                        TransactionId = TransactionId
                    }
                );
            });
        }
    }

    private void OnInventoryTransactionDataLoaded()
    {
        // 資料載入完成後的處理
        StateHasChanged();
    }

    private List<GenericDetailPageComponent<InventoryTransaction, IInventoryTransactionService>.TabSection> GetTabSections()
    {
        var sections = new List<GenericDetailPageComponent<InventoryTransaction, IInventoryTransactionService>.TabSection>();

        // 基本資訊分頁
        sections.Add(new GenericDetailPageComponent<InventoryTransaction, IInventoryTransactionService>.TabSection
        {
            Id = "basic",
            Title = "基本資訊",
            Content = GetBasicInfoContent()
        });

        // 產品與倉庫資訊分頁
        sections.Add(new GenericDetailPageComponent<InventoryTransaction, IInventoryTransactionService>.TabSection
        {
            Id = "productwarehouse",
            Title = "產品與倉庫",
            Content = GetProductWarehouseContent()
        });

        // 庫存變動分頁
        sections.Add(new GenericDetailPageComponent<InventoryTransaction, IInventoryTransactionService>.TabSection
        {
            Id = "stockchange",
            Title = "庫存變動",
            Content = GetStockChangeContent()
        });

        return sections;
    }

    private RenderFragment GetBasicInfoContent() => @<div>
        <BasicInfoDisplayComponent 
            Title="異動記錄基本資訊"
            IconClass="fas fa-clipboard-list"
            IconColor="text-primary"
            Fields="@GetBasicInfoFields()" />
    </div>;

    private List<BasicInfoDisplayComponent.BasicInfoField> GetBasicInfoFields()
    {
        if (inventoryTransaction == null) return new List<BasicInfoDisplayComponent.BasicInfoField>();

        return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "異動單號",
                Value = inventoryTransaction.TransactionNumber,
                IconClass = "fas fa-barcode",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary"
            },
            new()
            {
                Label = "異動類型",
                Value = transactionType?.TypeName ?? inventoryTransaction.TransactionType.ToString(),
                IconClass = "fas fa-exchange-alt",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info"
            },
            new()
            {
                Label = "異動日期",
                Value = inventoryTransaction.TransactionDate.ToString("yyyy/MM/dd HH:mm:ss"),
                IconClass = "fas fa-calendar-alt",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success"
            },
            new()
            {
                Label = "參考單號",
                Value = inventoryTransaction.ReferenceNumber ?? "無",
                IconClass = "fas fa-link",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary"
            },
            new()
            {
                Label = "備註",
                Value = inventoryTransaction.TransactionRemarks,
                Format = BasicInfoDisplayComponent.FieldFormat.MultiLine,
                IconClass = "fas fa-sticky-note",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning",
                ColSize = 12,
                VisibilityCondition = () => !string.IsNullOrEmpty(inventoryTransaction.TransactionRemarks)
            }
        };
    }

    private RenderFragment GetProductWarehouseContent() => @<div>
        <BasicInfoDisplayComponent 
            Title="產品資訊"
            IconClass="fas fa-cube"
            IconColor="text-primary"
            Fields="@GetProductFields()" />
        
        <BasicInfoDisplayComponent 
            Title="倉庫資訊"
            IconClass="fas fa-warehouse"
            IconColor="text-info"
            Fields="@GetWarehouseFields()" />
    </div>;

    private List<BasicInfoDisplayComponent.BasicInfoField> GetProductFields()
    {
        return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "產品名稱",
                Value = product?.ProductName ?? "載入中...",
                IconClass = "fas fa-tag",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary"
            },
            new()
            {
                Label = "產品代碼",
                Value = product?.ProductCode ?? "載入中...",
                IconClass = "fas fa-barcode",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary"
            },
            new()
            {
                Label = "產品描述",
                Value = product?.Description,
                Format = BasicInfoDisplayComponent.FieldFormat.MultiLine,
                IconClass = "fas fa-align-left",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 12,
                VisibilityCondition = () => !string.IsNullOrEmpty(product?.Description)
            }
        };
    }

    private List<BasicInfoDisplayComponent.BasicInfoField> GetWarehouseFields()
    {
        return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "倉庫名稱",
                Value = warehouse?.WarehouseName ?? "載入中...",
                IconClass = "fas fa-building",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success"
            },
            new()
            {
                Label = "倉庫代碼",
                Value = warehouse?.WarehouseCode ?? "載入中...",
                IconClass = "fas fa-hashtag",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning"
            },
            new()
            {
                Label = "倉庫地址",
                Value = warehouse?.Address,
                IconClass = "fas fa-map-marker-alt",
                IconBgClass = "bg-danger bg-opacity-10",
                IconTextClass = "text-danger",
                VisibilityCondition = () => !string.IsNullOrEmpty(warehouse?.Address)
            }
        };
    }

    private RenderFragment GetStockChangeContent() => @<div>
        <BasicInfoDisplayComponent 
            Title="庫存變動明細"
            IconClass="fas fa-exchange-alt"
            IconColor="text-success"
            Fields="@GetStockChangeFields()" />
        
        @if (inventoryTransaction != null)
        {
            <div class="mt-4 p-3 border rounded">
                <h6 class="text-primary mb-3">庫存變動說明</h6>
                
                @{
                    var stockChange = inventoryTransaction.StockAfter - inventoryTransaction.StockBefore;
                    var changeType = stockChange > 0 ? "增加" : stockChange < 0 ? "減少" : "無變動";
                    var changeColor = stockChange > 0 ? "text-success" : stockChange < 0 ? "text-danger" : "text-muted";
                }
                
                <p class="mb-0">
                    庫存從 <strong>@inventoryTransaction.StockBefore.ToString("N0")</strong> 單位@(changeType)到 
                    <strong class="@changeColor">@inventoryTransaction.StockAfter.ToString("N0")</strong> 單位
                </p>
            </div>
        }
    </div>;

    private List<BasicInfoDisplayComponent.BasicInfoField> GetStockChangeFields()
    {
        if (inventoryTransaction == null) return new List<BasicInfoDisplayComponent.BasicInfoField>();

        return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "異動數量",
                Value = inventoryTransaction.Quantity.ToString("N0"),
                IconClass = "fas fa-sort-numeric-up",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary"
            },
            new()
            {
                Label = "異動前庫存",
                Value = inventoryTransaction.StockBefore.ToString("N0"),
                IconClass = "fas fa-arrow-left",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info"
            },
            new()
            {
                Label = "異動後庫存",
                Value = inventoryTransaction.StockAfter.ToString("N0"),
                IconClass = "fas fa-arrow-right",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success"
            },
            new()
            {
                Label = "單位成本",
                Value = inventoryTransaction.UnitCost?.ToString("C") ?? "未設定",
                IconClass = "fas fa-dollar-sign",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning"
            },
            new()
            {
                Label = "總成本",
                Value = inventoryTransaction.UnitCost.HasValue ? 
                        (inventoryTransaction.UnitCost.Value * inventoryTransaction.Quantity).ToString("C") : 
                        "未計算",
                IconClass = "fas fa-calculator",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary"
            }
        };
    }
}
