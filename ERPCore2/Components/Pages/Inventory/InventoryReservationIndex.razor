@page "/inventory/reservations"

@inject IInventoryReservationService InventoryReservationService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="InventoryReservation" 
                        TService="IInventoryReservationService"
                        Service="@InventoryReservationService"
                        EntityBasePath="/inventory/reservations"
                        PageTitle="庫存預留管理"
                        PageSubtitle="管理所有庫存預留記錄與預留狀態"
                        EntityName="庫存預留"
                        BreadcrumbItems="@breadcrumbItems"
                        FilterDefinitions="@filterDefinitions"
                        ColumnDefinitions="@columnDefinitions"
                        DataLoader="@LoadInventoryReservationsAsync"
                        InitializeBasicData="@LoadBasicDataAsync"
                        FilterApplier="@ApplyInventoryReservationFilters"
                        GetEntityDisplayName="@(reservation => $"{reservation.ReservationNumber} - {reservation.Product?.Name}")"
                        RequiredPermission="InventoryReservation.Read"
                        @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<InventoryReservation, IInventoryReservationService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // 下拉選項資料
    private List<SelectOption> productOptions = new();
    private List<SelectOption> warehouseOptions = new();
    private List<SelectOption> reservationTypeOptions = new();
    private List<SelectOption> reservationStatusOptions = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            // 記錄初始化錯誤（使用 Fire-and-Forget 因為這裡不能用 async）
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(OnInitialized), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryReservationIndex",
                        Action = "Initialize",
                        Phase = "ComponentInitialization"
                    });
            });
            
            // 確保基本初始化完成，避免程式崩潰
            try
            {
                breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
                {
                    new("首頁", "/"),
                    new("庫存管理"),
                    new("庫存預留管理")
                };
                filterDefinitions = new List<SearchFilterDefinition>();
                columnDefinitions = new List<TableColumnDefinition>();
            }
            catch
            {
                // 如果連預設值都設定失敗，至少確保不是 null
                breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
                filterDefinitions ??= new List<SearchFilterDefinition>();
                columnDefinitions ??= new List<TableColumnDefinition>();
            }
        }
    }

    // 載入基礎資料（選項清單等）
    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 重新初始化篩選器以載入下拉選單選項
            await InitializeFiltersAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadBasicDataAsync), 
                GetType(),
                additionalData: new { 
                    PageName = "InventoryReservationIndex",
                    Action = "LoadBasicData",
                    ExpectedData = "ProductOptions, WarehouseOptions, ReservationTypeOptions, ReservationStatusOptions"
                });
        }
    }

    private async Task LoadProductOptionsAsync()
    {
        try
        {
            var products = await ProductService.GetAllAsync();
            productOptions = products.Select(p => new SelectOption
            {
                Value = p.Id.ToString(),
                Text = $"{p.Code} - {p.Name}"
            }).ToList();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadProductOptionsAsync),
                GetType(),
                additionalData: "載入產品選項失敗"
            );
        }
    }

    private async Task LoadWarehouseOptionsAsync()
    {
        try
        {
            var warehouses = await WarehouseService.GetAllAsync();
            warehouseOptions = warehouses.Select(w => new SelectOption
            {
                Value = w.Id.ToString(),
                Text = $"{w.Code} - {w.Name}"
            }).ToList();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadWarehouseOptionsAsync),
                GetType(),
                additionalData: "載入倉庫選項失敗"
            );
        }
    }

    private Task LoadReservationTypeOptionsAsync()
    {
        try
        {
            reservationTypeOptions = Enum.GetValues<InventoryReservationType>()
                .Select(type => new SelectOption
                {
                    Value = ((int)type).ToString(),
                    Text = type.ToString() // 暫時使用 ToString()，之後可以加入 Description 屬性
                }).ToList();
            
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadReservationTypeOptionsAsync),
                GetType(),
                additionalData: "載入預留類型選項失敗"
            );
            return Task.CompletedTask;
        }
    }

    private Task LoadReservationStatusOptionsAsync()
    {
        try
        {
            reservationStatusOptions = Enum.GetValues<InventoryReservationStatus>()
                .Select(status => new SelectOption
                {
                    Value = ((int)status).ToString(),
                    Text = status.ToString() // 暫時使用 ToString()，之後可以加入 Description 屬性
                }).ToList();
            
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadReservationStatusOptionsAsync),
                GetType(),
                additionalData: "載入預留狀態選項失敗"
            );
            return Task.CompletedTask;
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("庫存管理"),
                new("庫存預留管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化導覽失敗"
            );
        }
    }

    // 載入庫存預留資料
    private async Task<List<InventoryReservation>> LoadInventoryReservationsAsync()
    {
        try
        {
            return await InventoryReservationService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadInventoryReservationsAsync),
                GetType(),
                additionalData: "載入庫存預留資料失敗"
            );
            return new List<InventoryReservation>();
        }
    }

    // 初始化篩選器定義
    private void InitializeFilters()
    {
        try
        {
            // 建立基本篩選定義（不包含下拉選單選項，這些將在載入後更新）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText(nameof(InventoryReservation.ReservationNumber), "預留單號", "輸入預留單號搜尋")
                .AddSelect(nameof(InventoryReservation.ProductId), "產品", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect(nameof(InventoryReservation.WarehouseId), "倉庫", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect(nameof(InventoryReservation.ReservationType), "預留類型", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect(nameof(InventoryReservation.ReservationStatus), "預留狀態", new List<SelectOption>()) // 空的選項，稍後載入
                .AddText(nameof(InventoryReservation.ReferenceNumber), "參考單號", "輸入參考單號搜尋")
                .AddDateRange(nameof(InventoryReservation.ReservationDate), "預留日期")
                .AddDateRange(nameof(InventoryReservation.ExpiryDate), "到期日期")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    // 初始化表格欄位定義
    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("預留單號", nameof(InventoryReservation.ReservationNumber)),
                TableColumnDefinition.Text("產品名稱", "Product.ProductName"),
                TableColumnDefinition.Text("倉庫", "Warehouse.WarehouseName"),
                TableColumnDefinition.Text("預留類型", nameof(InventoryReservation.ReservationType)),
                TableColumnDefinition.Text("預留狀態", nameof(InventoryReservation.ReservationStatus)),
                TableColumnDefinition.Number("預留數量", nameof(InventoryReservation.ReservedQuantity), "N0"),
                TableColumnDefinition.Number("已釋放數量", nameof(InventoryReservation.ReleasedQuantity), "N0"),
                TableColumnDefinition.Number("剩餘數量", nameof(InventoryReservation.RemainingQuantity), "N0"),
                TableColumnDefinition.Text("參考單號", nameof(InventoryReservation.ReferenceNumber)),
                TableColumnDefinition.Date("預留日期", nameof(InventoryReservation.ReservationDate), "yyyy/MM/dd"),
                TableColumnDefinition.Date("到期日期", nameof(InventoryReservation.ExpiryDate), "yyyy/MM/dd")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
        }
    }

    // 應用篩選條件
    private IQueryable<InventoryReservation> ApplyInventoryReservationFilters(SearchFilterModel filterModel, IQueryable<InventoryReservation> query)
    {
        try
        {
            // 預留單號篩選
            var reservationNumberFilter = filterModel.GetFilterValue(nameof(InventoryReservation.ReservationNumber))?.ToString();
            if (!string.IsNullOrWhiteSpace(reservationNumberFilter))
            {
                query = query.Where(r => r.ReservationNumber.Contains(reservationNumberFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 產品篩選
            var productIdFilter = filterModel.GetFilterValue(nameof(InventoryReservation.ProductId))?.ToString();
            if (!string.IsNullOrWhiteSpace(productIdFilter) && int.TryParse(productIdFilter, out var productId))
            {
                query = query.Where(r => r.ProductId == productId);
            }

            // 倉庫篩選
            var warehouseIdFilter = filterModel.GetFilterValue(nameof(InventoryReservation.WarehouseId))?.ToString();
            if (!string.IsNullOrWhiteSpace(warehouseIdFilter) && int.TryParse(warehouseIdFilter, out var warehouseId))
            {
                query = query.Where(r => r.WarehouseId == warehouseId);
            }

            // 預留類型篩選
            var reservationTypeFilter = filterModel.GetFilterValue(nameof(InventoryReservation.ReservationType))?.ToString();
            if (!string.IsNullOrWhiteSpace(reservationTypeFilter) && Enum.TryParse<InventoryReservationType>(reservationTypeFilter, out var reservationType))
            {
                query = query.Where(r => r.ReservationType == reservationType);
            }

            // 預留狀態篩選
            var reservationStatusFilter = filterModel.GetFilterValue(nameof(InventoryReservation.ReservationStatus))?.ToString();
            if (!string.IsNullOrWhiteSpace(reservationStatusFilter) && Enum.TryParse<InventoryReservationStatus>(reservationStatusFilter, out var reservationStatus))
            {
                query = query.Where(r => r.ReservationStatus == reservationStatus);
            }

            // 參考單號篩選
            var referenceNumberFilter = filterModel.GetFilterValue(nameof(InventoryReservation.ReferenceNumber))?.ToString();
            if (!string.IsNullOrWhiteSpace(referenceNumberFilter))
            {
                query = query.Where(r => !string.IsNullOrEmpty(r.ReferenceNumber) && r.ReferenceNumber.Contains(referenceNumberFilter, StringComparison.OrdinalIgnoreCase));
            }

            return query.OrderByDescending(r => r.ReservationDate);
        }
        catch (Exception ex)
        {
            // 記錄篩選錯誤（這裡不能用 async，所以使用 Fire-and-Forget）
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(ApplyInventoryReservationFilters), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryReservationIndex",
                        Action = "ApplyFilters",
                        FilterModel = filterModel
                    });
            });
            
            // 回傳原始查詢，確保程式不會崩潰
            return query.OrderByDescending(r => r.ReservationDate);
        }
    }

    private async Task InitializeFiltersAsync()
    {
        try
        {
            // 並行載入選項資料
            await Task.WhenAll(
                LoadProductOptionsAsync(),
                LoadWarehouseOptionsAsync(),
                LoadReservationTypeOptionsAsync(),
                LoadReservationStatusOptionsAsync()
            );

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText(nameof(InventoryReservation.ReservationNumber), "預留單號", "輸入預留單號搜尋")
                .AddSelect(nameof(InventoryReservation.ProductId), "產品", productOptions)
                .AddSelect(nameof(InventoryReservation.WarehouseId), "倉庫", warehouseOptions)
                .AddSelect(nameof(InventoryReservation.ReservationType), "預留類型", reservationTypeOptions)
                .AddSelect(nameof(InventoryReservation.ReservationStatus), "預留狀態", reservationStatusOptions)
                .AddText(nameof(InventoryReservation.ReferenceNumber), "參考單號", "輸入參考單號搜尋")
                .AddDateRange(nameof(InventoryReservation.ReservationDate), "預留日期")
                .AddDateRange(nameof(InventoryReservation.ExpiryDate), "到期日期")
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，刷新組件以更新篩選器
            if (indexComponent != null)
            {
                await indexComponent.Refresh();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFiltersAsync), GetType(),
                additionalData: new { PageName = "InventoryReservationIndex", Action = "InitializeFiltersAsync" });
        }
    }
}
