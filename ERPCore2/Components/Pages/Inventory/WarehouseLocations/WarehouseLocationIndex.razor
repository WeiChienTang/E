@page "/inventory/warehouse-locations"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Components.Shared
@inject IWarehouseLocationService WarehouseLocationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>庫位管理</PageTitle>

<GenericIndexPageComponent TEntity="WarehouseLocation" 
                          TService="IWarehouseLocationService"
                          Service="@WarehouseLocationService"
                          PageTitle="庫位管理"
                          PageSubtitle="管理所有庫位資料與位置資訊"
                          PageIcon="diagram-3"
                          AddButtonText="新增庫位"
                          AddButtonIcon="bi bi-plus-circle"
                          AddButtonTitle="新增庫位資料"
                          SearchSectionTitle="庫位搜尋與管理"
                          EmptyMessage="沒有找到符合條件的庫位資料"
                          DataLoader="@LoadDataAsync"
                          FilterApplier="@ApplyWarehouseLocationFilters"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          OnRowClick="@HandleRowClick"
                          ActionsTemplate="@ActionButtonsTemplate"
                          @ref="indexComponent">
</GenericIndexPageComponent>

@code {
    private GenericIndexPageComponent<WarehouseLocation, IWarehouseLocationService> indexComponent = default!;
    
    // 設定選項
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    protected override async Task OnInitializedAsync()
    {
        InitializeBreadcrumbs();
        InitializeFilters();
        InitializeTableColumns();
        await Task.CompletedTask;
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("庫存管理", "/inventory"),
            new("庫位管理")
        };
    }

    private void InitializeFilters()
    {
        // 準備狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = "true" },
            new() { Text = "停用", Value = "false" }
        };

        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("LocationCode", "庫位代碼", "輸入庫位代碼搜尋")
            .AddText("LocationName", "庫位名稱", "輸入庫位名稱搜尋")
            .AddText("Description", "描述", "輸入描述搜尋", isAdvanced: true)
            .AddSelect("IsActive", "狀態", statusOptions, isAdvanced: true)
            .Build();
    }

    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("庫位代碼", nameof(WarehouseLocation.LocationCode)),
            TableColumnDefinition.Text("庫位名稱", nameof(WarehouseLocation.LocationName)),
            TableColumnDefinition.Text("所屬倉庫", "Warehouse.WarehouseName"),
            TableColumnDefinition.Text("描述", nameof(WarehouseLocation.Description)),
            TableColumnDefinition.Boolean("狀態", nameof(WarehouseLocation.IsActive)),
            TableColumnDefinition.Date("建立日期", nameof(WarehouseLocation.CreatedAt), "yyyy/MM/dd")
        };
    }

    // 資料載入委派
    private async Task<List<WarehouseLocation>> LoadDataAsync()
    {
        return await WarehouseLocationService.GetAllAsync();
    }

    // 篩選邏輯委派
    private IQueryable<WarehouseLocation> ApplyWarehouseLocationFilters(SearchFilterModel searchModel, IQueryable<WarehouseLocation> query)
    {
        // 庫位代碼篩選
        var locationCodeFilter = searchModel.GetFilterValue("LocationCode")?.ToString();
        if (!string.IsNullOrWhiteSpace(locationCodeFilter))
        {
            query = query.Where(l => l.LocationCode.Contains(locationCodeFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 庫位名稱篩選
        var locationNameFilter = searchModel.GetFilterValue("LocationName")?.ToString();
        if (!string.IsNullOrWhiteSpace(locationNameFilter))
        {
            query = query.Where(l => l.LocationName.Contains(locationNameFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 描述篩選
        var descriptionFilter = searchModel.GetFilterValue("Description")?.ToString();
        if (!string.IsNullOrWhiteSpace(descriptionFilter))
        {
            query = query.Where(l => 
                !string.IsNullOrEmpty(l.Description) && 
                l.Description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 狀態篩選
        var isActiveFilter = searchModel.GetFilterValue("IsActive")?.ToString();
        if (!string.IsNullOrWhiteSpace(isActiveFilter) && bool.TryParse(isActiveFilter, out var isActive))
        {
            query = query.Where(l => l.IsActive == isActive);
        }

        return query.OrderBy(l => l.LocationCode);
    }

    // 行點擊事件
    private async Task HandleRowClick(WarehouseLocation location)
    {
        Navigation.NavigateTo($"/inventory/warehouse-locations/{location.Id}");
        await Task.CompletedTask;
    }

    // 自定義操作按鈕範本
    private RenderFragment<WarehouseLocation> ActionButtonsTemplate => location => 
        @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary" @onclick="() => ViewLocation(location)" title="檢視">
                <i class="bi bi-eye"></i>
            </button>
            <button class="btn btn-outline-warning" @onclick="() => EditLocation(location)" title="編輯">
                <i class="bi bi-pencil"></i>
            </button>
            <button class="btn btn-outline-danger" @onclick="() => DeleteLocation(location)" title="刪除">
                <i class="bi bi-trash"></i>
            </button>
        </div>;

    // 操作方法
    private async Task ViewLocation(WarehouseLocation location)
    {
        Navigation.NavigateTo($"/inventory/warehouse-locations/{location.Id}");
        await Task.CompletedTask;
    }

    private async Task EditLocation(WarehouseLocation location)
    {
        Navigation.NavigateTo($"/inventory/warehouse-locations/{location.Id}/edit");
        await Task.CompletedTask;
    }

    private async Task DeleteLocation(WarehouseLocation location)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"確定要刪除庫位「{location.LocationName}」嗎？");
        
        if (confirmed)
        {
            try
            {
                var result = await WarehouseLocationService.DeleteAsync(location.Id);
                if (result.IsSuccess)
                {
                    await indexComponent.Refresh();
                    await JSRuntime.InvokeVoidAsync("alert", "庫位刪除成功");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除時發生錯誤：{ex.Message}");
            }
        }
    }
}
