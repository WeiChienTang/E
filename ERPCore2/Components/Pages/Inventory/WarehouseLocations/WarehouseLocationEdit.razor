@page "/inventory/warehouse-locations/{id:int}/edit"
@page "/inventory/warehouse-locations/create"
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.Forms
@inject IWarehouseLocationService WarehouseLocationService
@inject IWarehouseService WarehouseService
@inject NavigationManager Navigation

<GenericEditPageComponent TEntity="WarehouseLocation"
                          TService="IWarehouseLocationService"
                          Id="@Id"
                          Entity="@warehouseLocation"
                          Service="@WarehouseLocationService"
                          EntityName="庫位"
                          EntityNamePlural="庫位"
                          FormTitle="庫位設定"
                          FormSubtitle="設定倉庫內的具體儲存位置"
                          FormIcon="diagram-3"
                          IndexRoute="/inventory/warehouse-locations"
                          UseGenericForm="true"
                          FormFields="@formFields"
                          FormSections="@formSections"
                          BreadcrumbItems="@breadcrumbItems"                          DataLoader="@LoadWarehouseLocationData"
                          SaveHandler="@SaveWarehouseLocation"
                          AdditionalDataLoader="@LoadAdditionalData"
                          OnSaveSuccess="@HandleSaveSuccess">
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }

    private WarehouseLocation warehouseLocation = new();
    private List<Warehouse> warehouses = new();
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        SetupFormDefinition();
        SetupBreadcrumbs();
        
        if (Id.HasValue && Id.Value > 0)
        {
            warehouseLocation = await LoadWarehouseLocationData() ?? new WarehouseLocation();
        }
        else
        {
            warehouseLocation = CreateNewWarehouseLocation();
        }
    }

    private void SetupFormDefinition()
    {
        formSections = new Dictionary<string, string>
        {
            { "basic", "基本資訊" },
            { "location", "位置資訊" },
            { "status", "狀態" },
            { "remarks", "備註" }
        };

        formFields = new List<FormFieldDefinition>
        {
            new() { PropertyName = "LocationCode", Label = "庫位代碼", FieldType = FormFieldType.Text, IsRequired = true, GroupName = "basic" },
            new() { PropertyName = "LocationName", Label = "庫位名稱", FieldType = FormFieldType.Text, IsRequired = true, GroupName = "basic" },
            new() { 
                PropertyName = "WarehouseId", 
                Label = "所屬倉庫", 
                FieldType = FormFieldType.Select, 
                IsRequired = true, 
                GroupName = "basic",
                Options = GetWarehouseOptions()
            },
            new() { PropertyName = "Description", Label = "描述", FieldType = FormFieldType.TextArea, GroupName = "basic", Rows = 3 },
            new() { PropertyName = "Zone", Label = "區域", FieldType = FormFieldType.Text, GroupName = "location" },
            new() { PropertyName = "Aisle", Label = "通道", FieldType = FormFieldType.Text, GroupName = "location" },
            new() { PropertyName = "Level", Label = "層級", FieldType = FormFieldType.Text, GroupName = "location" },
            new() { PropertyName = "Position", Label = "位置", FieldType = FormFieldType.Text, GroupName = "location" },
            new() { PropertyName = "MaxCapacity", Label = "最大容量", FieldType = FormFieldType.Number, GroupName = "location" },
            new() { PropertyName = "IsActive", Label = "啟用", FieldType = FormFieldType.Checkbox, GroupName = "status" },
            new() { PropertyName = "Remarks", Label = "備註", FieldType = FormFieldType.TextArea, GroupName = "remarks", Rows = 3 }
        };
    }

    private List<SelectOption> GetWarehouseOptions()
    {
        var options = new List<SelectOption> { new() { Value = "", Text = "請選擇倉庫" } };
        options.AddRange(warehouses.Where(w => w.IsActive).Select(w => new SelectOption 
        { 
            Value = w.Id.ToString(), 
            Text = w.WarehouseName 
        }));
        return options;
    }

    private void SetupBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new() { Text = "首頁", Href = "/" },
            new() { Text = "庫存管理", Href = "/inventory" },
            new() { Text = "庫位管理", Href = "/inventory/warehouse-locations" },
            new() { Text = Id.HasValue && Id.Value > 0 ? "編輯" : "新增" }
        };
    }

    private async Task<WarehouseLocation?> LoadWarehouseLocationData()
    {
        if (!Id.HasValue) return null;
        return await WarehouseLocationService.GetByIdAsync(Id.Value);
    }

    private WarehouseLocation CreateNewWarehouseLocation()
    {
        return new WarehouseLocation
        {
            IsActive = true,
            Status = EntityStatus.Active
        };
    }

    private async Task LoadAdditionalData()
    {
        var result = await WarehouseService.GetAllAsync();
        warehouses = result.ToList();
        // 重新設定 FormFields 以更新選項
        SetupFormDefinition();
    }

    private async Task<bool> SaveWarehouseLocation(WarehouseLocation entity)
    {
        try
        {
            if (Id.HasValue && Id.Value > 0)
            {
                var result = await WarehouseLocationService.UpdateAsync(entity);
                return result.IsSuccess;
            }
            else
            {
                var result = await WarehouseLocationService.CreateAsync(entity);
                return result.IsSuccess;
            }
        }
        catch
        {
            return false;
        }
    }

    private Task HandleSaveSuccess()
    {
        Navigation.NavigateTo("/inventory/warehouse-locations");
        return Task.CompletedTask;
    }
}
