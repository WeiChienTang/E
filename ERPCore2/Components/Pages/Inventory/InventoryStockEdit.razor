@page "/inventory/stock/edit"
@page "/inventory/stock/edit/{id:int?}"
@inject IInventoryStockService InventoryStockService
@inject IWarehouseService WarehouseService
@inject IProductService ProductService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="InventoryStock" 
                     TService="IInventoryStockService"
                     Id="@Id"
                     Entity="@inventoryStock"
                     Service="@InventoryStockService"
                     EntityName="庫存"
                     EntityNamePlural="庫存"
                     PageTitle="@(Id.HasValue ? "編輯庫存" : "新增庫存")"
                     FormTitle="庫存資料"
                     FormSubtitle="產品庫存基本資訊"
                     IndexRoute="/inventory/stock"
                     RequiredPermission="InventoryStock.Read"
                     FormFields="@formFields"
                     FormSections="@formSections"
                     BreadcrumbItems="@breadcrumbItems"                         
                     DataLoader="@LoadInventoryStockData"
                     SaveHandler="@SaveInventoryStock"                         
                     AdditionalDataLoader="@LoadAdditionalData"
                     @ref="editComponent" />

@code {
    // 參數
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<InventoryStock, IInventoryStockService> editComponent = default!;
    
    // 資料模型
    private InventoryStock inventoryStock = new();
    
    // 表單配置
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 選項資料
    private List<SelectOption> warehouseOptions = new();
    private List<SelectOption> productOptions = new();
    private List<SelectOption> warehouseLocationOptions = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
            InitializeFormSections();
        }
        catch (Exception ex)
        {
            // 記錄初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(OnInitialized), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryStockEdit",
                        Action = "Initialize",
                        Id = Id
                    });
            });
        }
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("庫存管理", "/inventory"),
            new("庫存查詢", "/inventory/stock"),
            new(Id.HasValue ? "編輯庫存" : "新增庫存")
        };
    }

    private void InitializeFormFields()
    {
        formFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = nameof(InventoryStock.ProductId),
                Label = "商品",
                FieldType = FormFieldType.Select,
                IsRequired = true,
                Options = productOptions
            },
            new()
            {
                PropertyName = nameof(InventoryStock.WarehouseId),
                Label = "倉庫",
                FieldType = FormFieldType.Select,
                IsRequired = true,
                Options = warehouseOptions
            },
            new()
            {
                PropertyName = nameof(InventoryStock.WarehouseLocationId),
                Label = "倉庫位置",
                FieldType = FormFieldType.Select,
                IsRequired = false,
                Options = warehouseLocationOptions
            },
            new()
            {
                PropertyName = nameof(InventoryStock.CurrentStock),
                Label = "現有庫存",
                FieldType = FormFieldType.Number,
                IsRequired = true
            },
            new()
            {
                PropertyName = nameof(InventoryStock.ReservedStock),
                Label = "預留庫存",
                FieldType = FormFieldType.Number,
                IsRequired = false
            },
            new()
            {
                PropertyName = nameof(InventoryStock.InTransitStock),
                Label = "在途庫存",
                FieldType = FormFieldType.Number,
                IsRequired = false
            },
            new()
            {
                PropertyName = nameof(InventoryStock.MinStockLevel),
                Label = "最低庫存",
                FieldType = FormFieldType.Number,
                IsRequired = false
            },
            new()
            {
                PropertyName = nameof(InventoryStock.MaxStockLevel),
                Label = "最高庫存",
                FieldType = FormFieldType.Number,
                IsRequired = false
            },
            new()
            {
                PropertyName = nameof(InventoryStock.AverageCost),
                Label = "平均成本",
                FieldType = FormFieldType.Number,
                IsRequired = false
            }
        };
    }

    private void InitializeFormSections()
    {
        formSections = new Dictionary<string, string>
        {
            { nameof(InventoryStock.ProductId), "基本資訊" },
            { nameof(InventoryStock.WarehouseId), "基本資訊" },
            { nameof(InventoryStock.WarehouseLocationId), "基本資訊" },
            { nameof(InventoryStock.CurrentStock), "庫存資訊" },
            { nameof(InventoryStock.ReservedStock), "庫存資訊" },
            { nameof(InventoryStock.InTransitStock), "庫存資訊" },
            { nameof(InventoryStock.MinStockLevel), "庫存設定" },
            { nameof(InventoryStock.MaxStockLevel), "庫存設定" },
            { nameof(InventoryStock.AverageCost), "成本資訊" }
        };
    }

    // 載入庫存資料
    private async Task<InventoryStock?> LoadInventoryStockData()
    {
        try
        {
            if (Id.HasValue)
            {
                var stock = await InventoryStockService.GetByIdAsync(Id.Value);
                inventoryStock = stock ?? new InventoryStock();
            }
            else
            {
                inventoryStock = new InventoryStock { Status = EntityStatus.Active };
            }
            
            return inventoryStock;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadInventoryStockData), 
                GetType(),
                additionalData: new { 
                    PageName = "InventoryStockEdit",
                    Action = "LoadData",
                    Id
                });
            
            return new InventoryStock { Status = EntityStatus.Active };
        }
    }

    // 載入額外資料（選項清單等）
    private async Task LoadAdditionalData()
    {
        try
        {
            // 載入倉庫選項
            var warehouses = await WarehouseService.GetAllAsync();
            warehouseOptions = warehouses.Select(w => new SelectOption
            {
                Text = w.WarehouseName,
                Value = w.Id.ToString()
            }).ToList();

            // 載入產品選項
            var products = await ProductService.GetAllAsync();
            productOptions = products.Select(p => new SelectOption
            {
                Text = p.ProductName,
                Value = p.Id.ToString()
            }).ToList();

            // 更新表單欄位中的選項
            UpdateFormFieldOptions();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadAdditionalData), 
                GetType(),
                additionalData: new { 
                    PageName = "InventoryStockEdit",
                    Action = "LoadAdditionalData"
                });
        }
    }

    // 儲存庫存資料
    private async Task<bool> SaveInventoryStock(InventoryStock entity)
    {
        try
        {
            ServiceResult result;
            
            if (entity.Id == 0)
            {
                result = await InventoryStockService.CreateAsync(entity);
            }
            else
            {
                result = await InventoryStockService.UpdateAsync(entity);
            }
            
            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(SaveInventoryStock), 
                GetType(),
                additionalData: new { 
                    PageName = "InventoryStockEdit",
                    Action = "Save",
                    EntityId = entity.Id
                });
            
            return false;
        }
    }

    private void UpdateFormFieldOptions()
    {
        // 更新產品選項
        var productField = formFields.FirstOrDefault(f => f.PropertyName == nameof(InventoryStock.ProductId));
        if (productField != null)
        {
            productField.Options = productOptions;
        }

        // 更新倉庫選項
        var warehouseField = formFields.FirstOrDefault(f => f.PropertyName == nameof(InventoryStock.WarehouseId));
        if (warehouseField != null)
        {
            warehouseField.Options = warehouseOptions;
        }

        // 更新倉庫位置選項
        var locationField = formFields.FirstOrDefault(f => f.PropertyName == nameof(InventoryStock.WarehouseLocationId));
        if (locationField != null)
        {
            locationField.Options = warehouseLocationOptions;
        }
    }
}
