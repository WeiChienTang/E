@page "/inventory/reservations/edit"
@page "/inventory/reservations/edit/{id:int?}"
@inject IInventoryReservationService InventoryReservationService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="InventoryReservation" 
                        TService="IInventoryReservationService"
                        Id="@Id"
                        Entity="@reservation"
                        Service="@InventoryReservationService"
                        EntityName="庫存預留"
                        EntityNamePlural="庫存預留"
                        PageTitle="@(Id.HasValue ? "編輯庫存預留" : "新增庫存預留")"
                        FormTitle="基本資料"
                        FormSubtitle="庫存預留的基本資訊"
                        IndexRoute="/inventory/reservations"
                        RequiredPermission="InventoryReservation.Read"
                        FormFields="@formFields"
                        FormSections="@formSections"
                        BreadcrumbItems="@breadcrumbItems"
                        DataLoader="@LoadReservationData"
                        SaveHandler="@SaveReservation"
                        AdditionalDataLoader="@LoadAdditionalData"
                        @ref="editComponent" />


@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<InventoryReservation, IInventoryReservationService> editComponent = default!;
    
    // 資料模型
    private InventoryReservation reservation = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 選項資料
    private List<SelectOption> productOptions = new();
    private List<SelectOption> warehouseOptions = new();
    private List<SelectOption> warehouseLocationOptions = new();
    private List<SelectOption> reservationTypeOptions = new();
    private List<SelectOption> reservationStatusOptions = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeBasicFormFields();
            await LoadAdditionalData();
        }
        catch (Exception ex)
        {
            // 記錄初始化錯誤（使用 Fire-and-Forget 因為這裡不能用 async）
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(OnInitializedAsync), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryReservationEdit",
                        Action = "Initialize",
                        ReservationId = Id,
                        Phase = "ComponentInitialization"
                    });
            });
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("庫存管理"),
                new("庫存預留管理", "/inventory/reservations"),
                new(Id.HasValue ? "編輯庫存預留" : "新增庫存預留")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化導覽失敗"
            );
        }
    }

    private void InitializeBasicFormFields()
    {
        try
        {
            // 先初始化不需要選項的基本欄位
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(InventoryReservation.ReservationNumber),
                    Label = "預留單號",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    IsReadOnly = Id.HasValue, // 編輯模式時唯讀
                    Placeholder = "系統自動產生",
                },
                new()
                {
                    PropertyName = nameof(InventoryReservation.ProductId),
                    Label = "產品",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = new List<SelectOption>() // 稍後在 LoadAdditionalData 中填充
                },
                new()
                {
                    PropertyName = nameof(InventoryReservation.WarehouseId),
                    Label = "倉庫",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = new List<SelectOption>() // 稍後在 LoadAdditionalData 中填充
                },
                new()
                {
                    PropertyName = nameof(InventoryReservation.WarehouseLocationId),
                    Label = "倉庫位置",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = new List<SelectOption>() // 動態載入
                },
                new()
                {
                    PropertyName = nameof(InventoryReservation.ReservationType),
                    Label = "預留類型",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = new List<SelectOption>() // 稍後在 LoadAdditionalData 中填充
                },
                new()
                {
                    PropertyName = nameof(InventoryReservation.ReservationStatus),
                    Label = "預留狀態",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = new List<SelectOption>() // 稍後在 LoadAdditionalData 中填充
                },
                new()
                {
                    PropertyName = nameof(InventoryReservation.ReservedQuantity),
                    Label = "預留數量",
                    FieldType = FormFieldType.Number,
                    IsRequired = true,
                    Min = 1,
                    Placeholder = "請輸入預留數量"
                },
                new()
                {
                    PropertyName = nameof(InventoryReservation.ReleasedQuantity),
                    Label = "已釋放數量",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    Min = 0,
                    IsReadOnly = !Id.HasValue, // 新增模式時唯讀
                    Placeholder = "已釋放的數量",
                    HelpText = Id.HasValue ? "可手動調整已釋放的數量" : "新增模式下此欄位自動設為 0"
                },
                new()
                {
                    PropertyName = nameof(InventoryReservation.ReferenceNumber),
                    Label = "參考單號",
                    FieldType = FormFieldType.Text,
                    IsRequired = false,
                    MaxLength = 50,
                    Placeholder = "請輸入參考單號"
                },
                new()
                {
                    PropertyName = nameof(InventoryReservation.ReservationDate),
                    Label = "預留日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true
                },
                new()
                {
                    PropertyName = nameof(InventoryReservation.ExpiryDate),
                    Label = "到期日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = false
                },
                new()
                {
                    PropertyName = nameof(InventoryReservation.ReservationRemarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    IsRequired = false,
                    MaxLength = 200,
                    Rows = 3,
                    Placeholder = "請輸入備註資訊"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(InventoryReservation.ReservationNumber), "基本資訊" },
                { nameof(InventoryReservation.ProductId), "基本資訊" },
                { nameof(InventoryReservation.WarehouseId), "基本資訊" },
                { nameof(InventoryReservation.WarehouseLocationId), "基本資訊" },
                { nameof(InventoryReservation.ReservationType), "預留設定" },
                { nameof(InventoryReservation.ReservationStatus), "預留設定" },
                { nameof(InventoryReservation.ReservedQuantity), "數量資訊" },
                { nameof(InventoryReservation.ReleasedQuantity), "數量資訊" },
                { nameof(InventoryReservation.ReferenceNumber), "關聯資訊" },
                { nameof(InventoryReservation.ReservationDate), "日期資訊" },
                { nameof(InventoryReservation.ExpiryDate), "日期資訊" },
                { nameof(InventoryReservation.ReservationRemarks), "備註資訊" }
            };
        }
        catch (Exception ex)
        {
            // 記錄表單欄位初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeBasicFormFields), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryReservationEdit",
                        Action = "InitializeBasicFormFields",
                        ReservationId = Id
                    });
            });
            
            // 設定安全的預設值
            formFields = new List<FormFieldDefinition>();
            formSections = new Dictionary<string, string>();
        }
    }

    private void UpdateFormFieldOptions()
    {
        try
        {
            // 更新產品選項
            var productField = formFields.FirstOrDefault(f => f.PropertyName == nameof(InventoryReservation.ProductId));
            if (productField != null)
            {
                productField.Options = productOptions;
            }

            // 更新倉庫選項
            var warehouseField = formFields.FirstOrDefault(f => f.PropertyName == nameof(InventoryReservation.WarehouseId));
            if (warehouseField != null)
            {
                warehouseField.Options = warehouseOptions;
            }

            // 更新預留類型選項
            var reservationTypeField = formFields.FirstOrDefault(f => f.PropertyName == nameof(InventoryReservation.ReservationType));
            if (reservationTypeField != null)
            {
                reservationTypeField.Options = reservationTypeOptions;
            }

            // 更新預留狀態選項
            var reservationStatusField = formFields.FirstOrDefault(f => f.PropertyName == nameof(InventoryReservation.ReservationStatus));
            if (reservationStatusField != null)
            {
                reservationStatusField.Options = reservationStatusOptions;
            }

            // 倉庫位置選項會在倉庫變更時動態更新
            var warehouseLocationField = formFields.FirstOrDefault(f => f.PropertyName == nameof(InventoryReservation.WarehouseLocationId));
            if (warehouseLocationField != null)
            {
                warehouseLocationField.Options = warehouseLocationOptions;
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(UpdateFormFieldOptions),
                GetType(),
                additionalData: "更新表單欄位選項失敗"
            );
        }
    }

    private async Task LoadAdditionalData()
    {
        try
        {
            // 並行載入選項資料
            await Task.WhenAll(
                LoadProductOptionsAsync(),
                LoadWarehouseOptionsAsync(),
                LoadReservationTypeOptionsAsync(),
                LoadReservationStatusOptionsAsync()
            );
            
            // 更新表單欄位選項
            UpdateFormFieldOptions();
            
            // 檢查是否需要根據當前倉庫載入位置選項
            if (reservation != null && reservation.WarehouseId > 0)
            {
                await LoadWarehouseLocationOptionsAsync(reservation.WarehouseId);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadAdditionalData),
                GetType(),
                additionalData: "載入額外資料失敗"
            );
        }
    }

    private async Task LoadProductOptionsAsync()
    {
        try
        {
            var products = await ProductService.GetAllAsync();
            productOptions = products.Select(p => new SelectOption
            {
                Value = p.Id.ToString(),
                Text = $"{p.Code} - {p.ProductName}"
            }).ToList();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadProductOptionsAsync),
                GetType(),
                additionalData: "載入產品選項失敗"
            );
        }
    }

    private async Task LoadWarehouseOptionsAsync()
    {
        try
        {
            var warehouses = await WarehouseService.GetAllAsync();
            warehouseOptions = warehouses.Select(w => new SelectOption
            {
                Value = w.Id.ToString(),
                Text = $"{w.Code} - {w.WarehouseName}"
            }).ToList();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadWarehouseOptionsAsync),
                GetType(),
                additionalData: "載入倉庫選項失敗"
            );
        }
    }

    private async Task LoadWarehouseLocationOptionsAsync(int warehouseId)
    {
        try
        {
            StateHasChanged();

            var locationsResult = await WarehouseLocationService.GetByWarehouseIdAsync(warehouseId);
            
            if (locationsResult.IsSuccess && locationsResult.Data != null)
            {
                warehouseLocationOptions = locationsResult.Data.Select(l => new SelectOption
                {
                    Value = l.Id.ToString(),
                    Text = l.LocationName
                }).ToList();
            }
            else
            {
                warehouseLocationOptions = new List<SelectOption>();
            }

            // 加入無指定位置選項
            warehouseLocationOptions.Insert(0, new SelectOption
            {
                Value = "",
                Text = "無指定位置"
            });
            
            // 更新表單欄位選項
            var warehouseLocationField = formFields.FirstOrDefault(f => f.PropertyName == nameof(InventoryReservation.WarehouseLocationId));
            if (warehouseLocationField != null)
            {
                warehouseLocationField.Options = warehouseLocationOptions;
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadWarehouseLocationOptionsAsync),
                GetType(),
                additionalData: $"載入倉庫位置選項失敗，倉庫ID: {warehouseId}"
            );
        }
        finally
        {
            StateHasChanged();
        }
    }

    private Task LoadReservationTypeOptionsAsync()
    {
        try
        {
            reservationTypeOptions = Enum.GetValues<InventoryReservationType>()
                .Select(type => new SelectOption
                {
                    Value = ((int)type).ToString(),
                    Text = GetReservationTypeDisplayName(type)
                }).ToList();
            
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadReservationTypeOptionsAsync),
                GetType(),
                additionalData: "載入預留類型選項失敗"
            );
            return Task.CompletedTask;
        }
    }

    private Task LoadReservationStatusOptionsAsync()
    {
        try
        {
            reservationStatusOptions = Enum.GetValues<InventoryReservationStatus>()
                .Select(status => new SelectOption
                {
                    Value = ((int)status).ToString(),
                    Text = GetReservationStatusDisplayName(status)
                }).ToList();
            
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadReservationStatusOptionsAsync),
                GetType(),
                additionalData: "載入預留狀態選項失敗"
            );
            return Task.CompletedTask;
        }
    }

    private async Task<InventoryReservation?> LoadReservationData()
    {
        try
        {
            if (Id.HasValue)
            {
                var result = await InventoryReservationService.GetByIdWithDetailsAsync(Id.Value);
                if (result != null)
                {
                    reservation = result;
                    
                    // 如果有選中倉庫，載入對應的倉庫位置
                    if (reservation.WarehouseId > 0)
                    {
                        await LoadWarehouseLocationOptionsAsync(reservation.WarehouseId);
                    }
                }
                return result;
            }
            else
            {
                // 新增模式，設定預設值
                reservation = new InventoryReservation
                {
                    ReservationDate = DateTime.Now,
                    ReservationStatus = InventoryReservationStatus.Reserved,
                    ReleasedQuantity = 0
                };
                return reservation;
            }
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadReservationData), 
                GetType(),
                additionalData: new { 
                    PageName = "InventoryReservationEdit",
                    Action = "LoadReservationData",
                    ReservationId = Id
                });
            return null;
        }
    }

    private async Task<bool> SaveReservation(InventoryReservation entity)
    {
        try
        {
            ServiceResult result;
            
            if (Id.HasValue)
            {
                // 編輯模式
                var updateResult = await InventoryReservationService.UpdateAsync(entity);
                result = updateResult;
            }
            else
            {
                // 新增模式 - 使用服務的創建方法
                var createResult = await InventoryReservationService.CreateReservationAsync(
                    entity.ProductId,
                    entity.WarehouseId,
                    entity.ReservedQuantity,
                    entity.ReservationType,
                    entity.ReferenceNumber ?? "",
                    entity.ExpiryDate,
                    entity.WarehouseLocationId,
                    entity.ReservationRemarks
                );
                
                result = createResult;
                
                if (!result.IsSuccess)
                {
                    await NotificationService.ShowErrorAsync(result.ErrorMessage ?? "建立庫存預留失敗");
                }
            }

            // 使用通知服務顯示結果，但不重複顯示
            // GenericEditPageComponent 會處理通用的成功/失敗訊息
            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(SaveReservation),
                GetType(),
                additionalData: $"儲存庫存預留失敗，ID: {Id}"
            );
            return false;
        }
    }

    private string GetReservationTypeDisplayName(InventoryReservationType type)
    {
        return type switch
        {
            InventoryReservationType.SalesOrder => "銷售訂單",
            InventoryReservationType.ProductionOrder => "生產訂單",
            InventoryReservationType.TransferOrder => "轉倉單",
            InventoryReservationType.Other => "其他",
            _ => type.ToString()
        };
    }

    private string GetReservationStatusDisplayName(InventoryReservationStatus status)
    {
        return status switch
        {
            InventoryReservationStatus.Reserved => "預留中",
            InventoryReservationStatus.PartiallyReleased => "部分釋放",
            InventoryReservationStatus.Released => "已釋放",
            InventoryReservationStatus.Cancelled => "已取消",
            _ => status.ToString()
        };
    }
}

