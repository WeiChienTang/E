@page "/transaction-types"
@page "/inventory/transaction-types"
@using ERPCore2.Components.Shared
@inject IInventoryTransactionTypeService InventoryTransactionTypeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>庫存異動類型管理</PageTitle>

<GenericIndexPageComponent TEntity="InventoryTransactionType" 
                          TService="IInventoryTransactionTypeService"
                          Service="@InventoryTransactionTypeService"
                          PageTitle="庫存異動類型管理"
                          PageSubtitle="管理所有庫存異動類型與設定"
                          TitleIcon="list-task"
                          BreadcrumbItems="@breadcrumbItems"
                          AddButtonTitle="新增異動類型"
                          AddButtonIcon="bi-plus-circle"
                          SearchSectionTitle="⚙️ 異動類型搜尋與管理"
                          CardIcon="bi-gear"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          EmptyMessage="沒有找到符合條件的異動類型資料"
                          FilterApplier="@ApplyCustomFilter"
                          OnAddClick="@ShowCreateTransactionType"
                          OnRowClick="@HandleRowClick"
                          ActionsTemplate="@ActionsTemplate" />

@code {
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 篩選與表格定義
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeFilters();
        InitializeTableColumns();
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("庫存管理", "/inventory"),
            new("異動類型管理")
        };
    }

    private void InitializeFilters()
    {
        // 準備異動類型選項
        var transactionTypeOptions = new List<SelectOption>
        {
            new() { Text = "入庫", Value = InventoryTransactionTypeEnum.In.ToString() },
            new() { Text = "出庫", Value = InventoryTransactionTypeEnum.Out.ToString() },
            new() { Text = "調整", Value = InventoryTransactionTypeEnum.Adjustment.ToString() },
            new() { Text = "盤點", Value = InventoryTransactionTypeEnum.Stocktaking.ToString() },
            new() { Text = "轉倉", Value = InventoryTransactionTypeEnum.Transfer.ToString() }
        };

        // 準備狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = "true" },
            new() { Text = "停用", Value = "false" }
        };

        // 準備是否選項
        var booleanOptions = new List<SelectOption>
        {
            new() { Text = "是", Value = "true" },
            new() { Text = "否", Value = "false" }
        };

        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("TypeCode", "類型代碼", "輸入類型代碼搜尋")
            .AddText("TypeName", "類型名稱", "輸入類型名稱搜尋")
            .AddSelect("TransactionType", "異動類型", transactionTypeOptions, isAdvanced: true)
            .AddSelect("AffectsCost", "影響成本", booleanOptions, isAdvanced: true)
            .AddSelect("RequiresApproval", "需要審核", booleanOptions, isAdvanced: true)
            .AddSelect("IsActive", "狀態", statusOptions, isAdvanced: true)
            .Build();
    }

    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("類型代碼", nameof(InventoryTransactionType.TypeCode)),
            TableColumnDefinition.Text("類型名稱", nameof(InventoryTransactionType.TypeName)),
            TableColumnDefinition.Text("異動類型", nameof(InventoryTransactionType.TransactionType)),
            TableColumnDefinition.Boolean("影響成本", nameof(InventoryTransactionType.AffectsCost)),
            TableColumnDefinition.Boolean("需要審核", nameof(InventoryTransactionType.RequiresApproval)),
            TableColumnDefinition.Text("單號前綴", nameof(InventoryTransactionType.NumberPrefix)),
            TableColumnDefinition.Status("狀態", nameof(InventoryTransactionType.Status), new Dictionary<object, string>
            {
                { EntityStatus.Active, "bg-success" },
                { EntityStatus.Inactive, "bg-secondary" }
            }),
            TableColumnDefinition.Date("建立日期", nameof(InventoryTransactionType.CreatedAt), "yyyy/MM/dd")
        };
    }

    private IQueryable<InventoryTransactionType> ApplyCustomFilter(SearchFilterModel searchModel, IQueryable<InventoryTransactionType> query)
    {
        // 類型代碼篩選
        var typeCodeFilter = searchModel.GetFilterValue("TypeCode")?.ToString();
        if (!string.IsNullOrWhiteSpace(typeCodeFilter))
        {
            query = query.Where(t => 
                t.TypeCode.Contains(typeCodeFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 類型名稱篩選
        var typeNameFilter = searchModel.GetFilterValue("TypeName")?.ToString();
        if (!string.IsNullOrWhiteSpace(typeNameFilter))
        {
            query = query.Where(t => 
                t.TypeName.Contains(typeNameFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 異動類型篩選
        var transactionTypeFilter = searchModel.GetFilterValue("TransactionType")?.ToString();
        if (!string.IsNullOrWhiteSpace(transactionTypeFilter) && Enum.TryParse<InventoryTransactionTypeEnum>(transactionTypeFilter, out var transactionType))
        {
            query = query.Where(t => t.TransactionType == transactionType);
        }

        // 影響成本篩選
        var affectsCostFilter = searchModel.GetFilterValue("AffectsCost")?.ToString();
        if (!string.IsNullOrWhiteSpace(affectsCostFilter) && bool.TryParse(affectsCostFilter, out var affectsCost))
        {
            query = query.Where(t => t.AffectsCost == affectsCost);
        }

        // 需要審核篩選
        var requiresApprovalFilter = searchModel.GetFilterValue("RequiresApproval")?.ToString();
        if (!string.IsNullOrWhiteSpace(requiresApprovalFilter) && bool.TryParse(requiresApprovalFilter, out var requiresApproval))
        {
            query = query.Where(t => t.RequiresApproval == requiresApproval);
        }

        // 狀態篩選
        var isActiveFilter = searchModel.GetFilterValue("IsActive")?.ToString();
        if (!string.IsNullOrWhiteSpace(isActiveFilter) && bool.TryParse(isActiveFilter, out var isActive))
        {
            query = query.Where(t => t.IsActive == isActive);
        }

        return query.OrderBy(t => t.TypeCode);
    }

    private async Task HandleRowClick(InventoryTransactionType transactionType)
    {
        Navigation.NavigateTo($"/inventory/transaction-types/detail/{transactionType.Id}");
        await Task.CompletedTask;
    }

    private async Task ShowCreateTransactionType()
    {
        Navigation.NavigateTo("/inventory/transaction-types/edit");
        await Task.CompletedTask;
    }

    private async Task EditTransactionType(InventoryTransactionType transactionType)
    {
        Navigation.NavigateTo($"/inventory/transaction-types/edit/{transactionType.Id}");
        await Task.CompletedTask;
    }

    private async Task DeleteTransactionType(InventoryTransactionType transactionType)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"確定要刪除異動類型「{transactionType.TypeName}」嗎？");
        
        if (confirmed)
        {
            try
            {
                var result = await InventoryTransactionTypeService.DeleteAsync(transactionType.Id);
                if (result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "異動類型刪除成功");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除時發生錯誤：{ex.Message}");
            }
        }
    }

    private async Task ViewTransactionType(InventoryTransactionType transactionType)
    {
        Navigation.NavigateTo($"/inventory/transaction-types/detail/{transactionType.Id}");
        await Task.CompletedTask;
    }

    // 表格操作範本
    private RenderFragment<InventoryTransactionType> ActionsTemplate => transactionType => 
        @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary" @onclick="() => ViewTransactionType(transactionType)" title="檢視">
                <i class="bi bi-eye"></i>
            </button>
            <button class="btn btn-outline-warning" @onclick="() => EditTransactionType(transactionType)" title="編輯">
                <i class="bi bi-pencil"></i>
            </button>
            <button class="btn btn-outline-danger" @onclick="() => DeleteTransactionType(transactionType)" title="刪除">
                <i class="bi bi-trash"></i>
            </button>
        </div>;
}