@page "/inventory/transaction-types/{id:int}"
@inject IInventoryTransactionTypeService TransactionTypeService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">載入中...</span>
            </div>
            <div class="mt-2">載入異動類型資料中...</div>
        </div>
    </div>
}
else if (transactionType == null)
{
    <div class="alert alert-warning">
        <h4>找不到異動類型資料</h4>
        <p>指定的異動類型不存在或已被刪除。</p>
        <button class="btn btn-primary" @onclick="BackToTransactionTypeList">
            返回異動類型列表
        </button>
    </div>
}
else
{
    <GenericHeaderComponent Title="@transactionType.TypeName" 
                          Subtitle="@($"類型代碼：{transactionType.TypeCode}")"
                          Icon="bi bi-list-ul"
                          BreadcrumbItems="@breadcrumbItems">        <ActionButtons>
            <DetailActionButtonsComponent 
                EntityStatus="@transactionType?.Status"
                IsLoading="@isLoading"
                OnEditClick="@(() => Navigation.NavigateTo($"/inventory/transaction-types/edit/{transactionType?.Id}"))"
                OnToggleStatusClick="@ToggleStatusAsync"
                OnDeleteClick="@DeleteAsync"
                OnBackClick="@BackToTransactionTypeList"/>
        </ActionButtons>
    </GenericHeaderComponent>

    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-info-circle me-2"></i>基本資訊
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <table class="table table-borderless">
                                    <tbody>
                                        <tr>
                                            <th width="150">類型代碼</th>
                                            <td>@transactionType.TypeCode</td>
                                        </tr>
                                        <tr>
                                            <th>類型名稱</th>
                                            <td>@transactionType.TypeName</td>
                                        </tr>
                                        <tr>
                                            <th>異動類型</th>
                                            <td>
                                                @switch (transactionType.TransactionType)
                                                {
                                                    case InventoryTransactionTypeEnum.In:
                                                        <span class="badge bg-success">入庫</span>
                                                        break;
                                                    case InventoryTransactionTypeEnum.Out:
                                                        <span class="badge bg-danger">出庫</span>
                                                        break;
                                                    case InventoryTransactionTypeEnum.Adjustment:
                                                        <span class="badge bg-warning">調整</span>
                                                        break;
                                                    case InventoryTransactionTypeEnum.Transfer:
                                                        <span class="badge bg-info">移轉</span>
                                                        break;
                                                    default:
                                                        <span class="badge bg-secondary">未知</span>
                                                        break;
                                                }
                                            </td>
                                        </tr>                        <tr>
                            <th>是否影響成本</th>
                            <td>
                                @if (transactionType.AffectsCost)
                                {
                                    <span class="badge bg-primary">是</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">否</span>
                                }
                            </td>
                        </tr>
                        <tr>
                            <th>需要審核</th>
                            <td>
                                @if (transactionType.RequiresApproval)
                                {
                                    <span class="badge bg-warning">是</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">否</span>
                                }
                            </td>
                        </tr>
                        <tr>
                            <th>自動產生單號</th>
                            <td>
                                @if (transactionType.AutoGenerateNumber)
                                {
                                    <span class="badge bg-info">是</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">否</span>
                                }
                            </td>
                        </tr>
                        @if (!string.IsNullOrWhiteSpace(transactionType.NumberPrefix))
                        {
                            <tr>
                                <th>單號前綴</th>
                                <td>@transactionType.NumberPrefix</td>
                            </tr>
                        }
                                    </tbody>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <table class="table table-borderless">
                                    <tbody>
                                        <tr>
                                            <th width="120">狀態</th>
                                            <td>
                                                @if (transactionType.IsActive)
                                                {
                                                    <span class="badge bg-success">
                                                        <i class="bi bi-check-circle me-1"></i>啟用
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">
                                                        <i class="bi bi-x-circle me-1"></i>停用
                                                    </span>
                                                }
                                            </td>
                                        </tr>
                                        <tr>
                                            <th>建立時間</th>
                                            <td>@transactionType.CreatedAt.ToString("yyyy/MM/dd HH:mm")</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>                </div>

                @if (!string.IsNullOrWhiteSpace(transactionType.Remarks))
                {
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-chat-left-text me-2"></i>備註
                            </h5>
                        </div>
                        <div class="card-body">
                            <p class="mb-0">@transactionType.Remarks</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    private InventoryTransactionType? transactionType;
    private bool isLoading = true;
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTransactionTypeAsync();
        SetupBreadcrumb();
    }

    private async Task LoadTransactionTypeAsync()
    {
        try
        {
            isLoading = true;
            transactionType = await TransactionTypeService.GetByIdAsync(Id);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetupBreadcrumb()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new() { Text = "首頁", Href = "/" },
            new() { Text = "庫存管理", Href = "/inventory" },
            new() { Text = "異動類型管理", Href = "/inventory/transaction-types" },
            new() { Text = transactionType?.TypeName ?? "異動類型詳細" }
        };
    }

    private async Task ToggleStatusAsync()
    {
        if (transactionType == null) return;

        try
        {
            var result = await TransactionTypeService.ToggleStatusAsync(transactionType.Id);
            if (result.IsSuccess)
            {
                transactionType.IsActive = !transactionType.IsActive;
                await JSRuntime.InvokeVoidAsync("alert", $"異動類型狀態已{(transactionType.IsActive ? "啟用" : "停用")}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "操作失敗");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"操作失敗：{ex.Message}");
        }
    }

    private async Task DeleteAsync()
    {
        if (transactionType == null) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"確定要刪除異動類型「{transactionType.TypeName}」嗎？");
        if (confirmed)
        {
            try
            {
                var result = await TransactionTypeService.DeleteAsync(transactionType.Id);
                if (result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "異動類型已刪除");
                    BackToTransactionTypeList();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "刪除失敗");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{ex.Message}");
            }
        }
    }

    private void BackToTransactionTypeList()
    {
        Navigation.NavigateTo("/inventory/transaction-types");
    }
}
