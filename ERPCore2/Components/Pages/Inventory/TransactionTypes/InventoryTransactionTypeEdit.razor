@page "/inventory/transaction-types/{id:int}/edit"
@page "/inventory/transaction-types/create"
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Components.Shared.Forms
@inject IInventoryTransactionTypeService TransactionTypeService
@inject NavigationManager Navigation

<GenericEditPageComponent TEntity="InventoryTransactionType"
                          TService="IInventoryTransactionTypeService"
                          Id="@Id"
                          Entity="@transactionType"
                          Service="@TransactionTypeService"
                          EntityName="異動類型"
                          EntityNamePlural="異動類型"
                          FormTitle="異動類型設定"
                          FormSubtitle="庫存異動類型的設定"
                          FormIcon="list-ul"
                          IndexRoute="/inventory/transaction-types"
                          UseGenericForm="true"
                          FormFields="@formFields"
                          FormSections="@formSections"
                          BreadcrumbItems="@breadcrumbItems"
                          DataLoader="@LoadTransactionTypeData"
                          SaveHandler="@SaveTransactionType"
                          OnSaveSuccess="@HandleSaveSuccess">
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }

    private InventoryTransactionType transactionType = new();
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        SetupFormDefinition();
        SetupBreadcrumbs();
        
        if (Id.HasValue && Id.Value > 0)
        {
            transactionType = await LoadTransactionTypeData() ?? new InventoryTransactionType();
        }
        else
        {
            transactionType = CreateNewTransactionType();
        }
    }

    private void SetupFormDefinition()
    {
        formSections = new Dictionary<string, string>
        {
            { "basic", "基本資訊" },
            { "options", "控制選項" },
            { "remarks", "備註" }
        };        formFields = new List<FormFieldDefinition>
        {
            new() { PropertyName = "TypeCode", Label = "類型代碼", FieldType = FormFieldType.Text, IsRequired = true, GroupName = "basic" },
            new() { PropertyName = "TypeName", Label = "類型名稱", FieldType = FormFieldType.Text, IsRequired = true, GroupName = "basic" },
            new() { 
                PropertyName = "TransactionType", 
                Label = "異動類型", 
                FieldType = FormFieldType.Select, 
                IsRequired = true, 
                GroupName = "basic",
                Options = new List<SelectOption>
                {
                    new() { Value = "", Text = "請選擇異動類型" },
                    new() { Value = InventoryTransactionTypeEnum.In.ToString(), Text = "入庫" },
                    new() { Value = InventoryTransactionTypeEnum.Out.ToString(), Text = "出庫" },
                    new() { Value = InventoryTransactionTypeEnum.Adjustment.ToString(), Text = "調整" },
                    new() { Value = InventoryTransactionTypeEnum.Stocktaking.ToString(), Text = "盤點" },
                    new() { Value = InventoryTransactionTypeEnum.Transfer.ToString(), Text = "轉倉" }
                }
            },
            new() { PropertyName = "NumberPrefix", Label = "單號前綴", FieldType = FormFieldType.Text, GroupName = "basic", HelpText = "用於自動產生單號時的前綴" },
            new() { PropertyName = "AffectsCost", Label = "影響成本", FieldType = FormFieldType.Checkbox, GroupName = "options", HelpText = "此類型的異動是否會影響商品成本計算" },
            new() { PropertyName = "RequiresApproval", Label = "需要審核", FieldType = FormFieldType.Checkbox, GroupName = "options", HelpText = "此類型的異動是否需要審核才能生效" },
            new() { PropertyName = "AutoGenerateNumber", Label = "自動產生單號", FieldType = FormFieldType.Checkbox, GroupName = "options", HelpText = "系統是否自動為此類型異動產生單號" },
            new() { PropertyName = "IsActive", Label = "啟用", FieldType = FormFieldType.Checkbox, GroupName = "options" },
            new() { PropertyName = "Remarks", Label = "備註", FieldType = FormFieldType.TextArea, GroupName = "remarks", Rows = 3 }
        };
    }    private void SetupBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new() { Text = "首頁", Href = "/" },
            new() { Text = "庫存管理", Href = "/inventory" },
            new() { Text = "異動類型", Href = "/inventory/transaction-types" },
            new() { Text = Id.HasValue && Id.Value > 0 ? "編輯" : "新增" }
        };
    }

    private async Task<InventoryTransactionType?> LoadTransactionTypeData()
    {
        if (!Id.HasValue) return null;
        return await TransactionTypeService.GetByIdAsync(Id.Value);
    }

    private InventoryTransactionType CreateNewTransactionType()
    {
        return new InventoryTransactionType
        {
            IsActive = true,
            Status = EntityStatus.Active,
            AffectsCost = true,
            RequiresApproval = false,
            AutoGenerateNumber = true
        };
    }

    private async Task<bool> SaveTransactionType(InventoryTransactionType entity)
    {
        try
        {
            if (Id.HasValue && Id.Value > 0)
            {
                var result = await TransactionTypeService.UpdateAsync(entity);
                return result.IsSuccess;
            }
            else
            {
                var result = await TransactionTypeService.CreateAsync(entity);
                return result.IsSuccess;
            }
        }
        catch
        {
            return false;
        }
    }

    private Task HandleSaveSuccess()
    {
        Navigation.NavigateTo("/inventory/transaction-types");
        return Task.CompletedTask;
    }
}
