@page "/units"
@page "/inventory/units"
@inject IUnitService UnitService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>單位管理</PageTitle>

@* 頁面標題 *@
<GenericHeaderComponent Title="單位管理"
                       Subtitle="管理所有計量單位與轉換關係"
                       TitleIcon="rulers"
                       HeadingLevel="h1"
                       BreadcrumbItems="@breadcrumbItems"
                       IsLoading="@isLoading"
                       LoadingText="載入中..."
                       ShowDivider="true">
    <ActionButtons>
        <IndexActionButtonsComponent 
            AddButtonText="新增單位"
            AddButtonIcon="bi-plus-circle"
            OnAddClick="ShowCreateUnit"
            OnRefreshClick="RefreshData"
            IsLoading="@isLoading" />
    </ActionButtons>
</GenericHeaderComponent>

@* 單位管理主要內容區域 *@
<div class="row">
    <div class="col-12">
        <div class="card section-card">
            <div class="card-header section-header-primary">
                <h5 class="card-title mb-0">
                    <i class="bi bi-search me-2"></i>
                    單位搜尋與管理
                </h5>
            </div>
            <div class="card-body">
                @* 搜尋篩選區域 *@
                <GenericSearchFilterComponent TModel="SearchFilterModel"
                                             FilterDefinitions="@filterDefinitions"
                                             FilterModel="@searchModel"
                                             OnSearch="HandleSearch"
                                             OnFilterChanged="HandleFilterChanged"
                                             AutoSearch="true"
                                             ShowSearchButton="true"
                                             ShowAdvancedToggle="true"
                                             SearchDelayMs="500" />

                @* 單位列表表格 *@
                <div class="mt-4">
                    <GenericTableComponent TItem="Unit"
                                          Items="@pagedUnits"
                                          ColumnDefinitions="@columnDefinitions"
                                          ShowActions="true"
                                          ActionsTemplate="@ActionsTemplate"
                                          EnableRowClick="true"
                                          OnRowClick="HandleRowClick"
                                          EnableSorting="false"
                                          IsStriped="true"
                                          IsHoverable="true"
                                          IsBordered="false"
                                          Size="TableSize.Normal"
                                          EmptyMessage="沒有找到符合條件的單位資料"
                                          ActionsHeader="操作"
                                          EnablePagination="true"
                                          CurrentPage="@currentPage"
                                          PageSize="@pageSize"
                                          TotalItems="@totalItems"
                                          OnPageChanged="HandlePageChanged"
                                          OnPageSizeChanged="HandlePageSizeChanged"
                                          ShowPageSizeSelector="true">
                    </GenericTableComponent>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // 資料來源
    private List<Unit> units = new();
    private List<Unit> allUnits = new();
    
    // 篩選相關
    private SearchFilterModel searchModel = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    
    // 表格相關
    private List<TableColumnDefinition> columnDefinitions = new();
    
    // 分頁相關
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalItems = 0;
    private List<Unit> pagedUnits = new();
    
    // 狀態管理
    private bool isLoading = true;
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await InitializePageAsync();
    }

    private async Task InitializePageAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // 初始化麵包屑
            InitializeBreadcrumbs();
            
            // 初始化篩選器
            InitializeFilters();
            
            // 初始化表格欄位
            InitializeTableColumns();
            
            // 載入單位資料
            await LoadUnitsAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入單位資料時發生錯誤：", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("庫存管理", "/inventory"),
            new("單位管理")
        };
    }

    private void InitializeFilters()
    {
        // 準備狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = "true" },
            new() { Text = "停用", Value = "false" }
        };

        // 準備基本單位選項
        var baseUnitOptions = new List<SelectOption>
        {
            new() { Text = "是", Value = "true" },
            new() { Text = "否", Value = "false" }
        };

        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("UnitCode", "單位代碼", "輸入單位代碼搜尋")
            .AddText("UnitName", "單位名稱", "輸入單位名稱搜尋")
            .AddText("Symbol", "符號", "輸入單位符號搜尋", isAdvanced: true)
            .AddSelect("IsBaseUnit", "基本單位", baseUnitOptions, isAdvanced: true)
            .AddSelect("IsActive", "狀態", statusOptions, isAdvanced: true)
            .Build();
    }

    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("單位代碼", nameof(Unit.UnitCode)),
            TableColumnDefinition.Text("單位名稱", nameof(Unit.UnitName)),
            TableColumnDefinition.Text("符號", nameof(Unit.Symbol)),
            TableColumnDefinition.Boolean("基本單位", nameof(Unit.IsBaseUnit)),
            TableColumnDefinition.Status("狀態", nameof(Unit.Status), new Dictionary<object, string>
            {
                { EntityStatus.Active, "bg-success" },
                { EntityStatus.Inactive, "bg-secondary" }
            }),
            TableColumnDefinition.Date("建立日期", nameof(Unit.CreatedAt), "yyyy/MM/dd")
        };
    }

    private async Task LoadUnitsAsync()
    {
        try
        {
            allUnits = await UnitService.GetAllAsync();
            await ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入單位資料失敗：", ex.Message);
            units = new List<Unit>();
            pagedUnits = new List<Unit>();
        }
    }

    private async Task ApplyFilters()
    {
        var filteredUnits = allUnits.AsQueryable();

        // 單位代碼篩選
        var unitCodeFilter = searchModel.GetFilterValue("UnitCode")?.ToString();
        if (!string.IsNullOrWhiteSpace(unitCodeFilter))
        {
            filteredUnits = filteredUnits.Where(u => 
                u.UnitCode.Contains(unitCodeFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 單位名稱篩選
        var unitNameFilter = searchModel.GetFilterValue("UnitName")?.ToString();
        if (!string.IsNullOrWhiteSpace(unitNameFilter))
        {
            filteredUnits = filteredUnits.Where(u => 
                u.UnitName.Contains(unitNameFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 符號篩選
        var symbolFilter = searchModel.GetFilterValue("Symbol")?.ToString();
        if (!string.IsNullOrWhiteSpace(symbolFilter))
        {
            filteredUnits = filteredUnits.Where(u => 
                !string.IsNullOrEmpty(u.Symbol) && 
                u.Symbol.Contains(symbolFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 基本單位篩選
        var isBaseUnitFilter = searchModel.GetFilterValue("IsBaseUnit")?.ToString();
        if (!string.IsNullOrWhiteSpace(isBaseUnitFilter) && bool.TryParse(isBaseUnitFilter, out var isBaseUnit))
        {
            filteredUnits = filteredUnits.Where(u => u.IsBaseUnit == isBaseUnit);
        }

        // 狀態篩選
        var isActiveFilter = searchModel.GetFilterValue("IsActive")?.ToString();
        if (!string.IsNullOrWhiteSpace(isActiveFilter) && bool.TryParse(isActiveFilter, out var isActive))
        {
            filteredUnits = filteredUnits.Where(u => u.IsActive == isActive);
        }

        units = filteredUnits.OrderBy(u => u.UnitCode).ToList();
        totalItems = units.Count;
        
        // 重置分頁到第一頁（如果是搜尋操作）
        currentPage = 1;
        
        // 應用分頁
        ApplyPagination();
        
        await Task.CompletedTask;
    }

    private void ApplyPagination()
    {
        // 確保當前頁面有效
        var maxPage = totalItems > 0 ? (int)Math.Ceiling((double)totalItems / pageSize) : 1;
        if (currentPage > maxPage)
        {
            currentPage = Math.Max(1, maxPage);
        }
        
        // 計算分頁資料
        pagedUnits = units
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task HandlePageChanged(int newPage)
    {
        currentPage = newPage;
        ApplyPagination();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandlePageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1; // 重置到第一頁
        ApplyPagination();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleSearch(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        await ApplyFilters();
        StateHasChanged();
    }

    private async Task HandleFilterChanged(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        await Task.CompletedTask;
    }

    private async Task HandleRowClick(Unit unit)
    {
        Navigation.NavigateTo($"/inventory/units/detail/{unit.Id}");
        await Task.CompletedTask;
    }

    private async Task RefreshData()
    {
        await LoadUnitsAsync();
        StateHasChanged();
    }

    private async Task ShowCreateUnit()
    {
        Navigation.NavigateTo("/inventory/units/edit");
        await Task.CompletedTask;
    }

    private async Task EditUnit(Unit unit)
    {
        Navigation.NavigateTo($"/inventory/units/edit/{unit.Id}");
        await Task.CompletedTask;
    }

    private async Task DeleteUnit(Unit unit)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"確定要刪除單位「{unit.UnitName}」嗎？");
        
        if (confirmed)
        {
            try
            {
                var result = await UnitService.DeleteAsync(unit.Id);
                if (result.IsSuccess)
                {
                    await RefreshData();
                    await JSRuntime.InvokeVoidAsync("alert", "單位刪除成功");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除時發生錯誤：{ex.Message}");
            }
        }
    }

    private async Task ViewUnit(Unit unit)
    {
        Navigation.NavigateTo($"/inventory/units/detail/{unit.Id}");
        await Task.CompletedTask;
    }

    // 表格操作範本
    private RenderFragment<Unit> ActionsTemplate => unit => 
        @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary" @onclick="() => ViewUnit(unit)" title="檢視">
                <i class="bi bi-eye"></i>
            </button>
            <button class="btn btn-outline-warning" @onclick="() => EditUnit(unit)" title="編輯">
                <i class="bi bi-pencil"></i>
            </button>
            <button class="btn btn-outline-danger" @onclick="() => DeleteUnit(unit)" title="刪除">
                <i class="bi bi-trash"></i>
            </button>
        </div>;
}