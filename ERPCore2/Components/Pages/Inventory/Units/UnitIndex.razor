@page "/units"
@page "/inventory/units"
@using ERPCore2.Components.Shared
@inject IUnitService UnitService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>單位管理</PageTitle>

<GenericIndexPageComponent TEntity="Unit" 
                          TService="IUnitService"
                          Service="@UnitService"
                          PageTitle="單位管理"
                          PageSubtitle="管理所有計量單位與轉換關係"
                          PageIcon="rulers"
                          AddButtonText="新增單位"
                          AddButtonIcon="bi bi-plus-circle"
                          AddButtonTitle="新增單位資料"
                          SearchSectionTitle="單位搜尋與管理"
                          EmptyMessage="沒有找到符合條件的單位資料"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadUnitsAsync"
                          FilterApplier="@ApplyUnitFilters"
                          OnAddClick="@ShowCreateUnit"
                          OnRowClick="@HandleRowClick"
                          ActionsTemplate="@ActionsTemplate"
                          AutoSearch="true"
                          ShowSearchButton="true"
                          ShowAdvancedToggle="true"
                          SearchDelayMs="500" />

@code {
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeFilters();
        InitializeTableColumns();
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("庫存管理", "/inventory"),
            new("單位管理")
        };
    }

    // 載入單位資料
    private async Task<List<Unit>> LoadUnitsAsync()
    {
        try
        {
            return await UnitService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入單位資料失敗：", ex.Message);
            return new List<Unit>();
        }
    }

    private void InitializeFilters()
    {
        // 準備狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = "true" },
            new() { Text = "停用", Value = "false" }
        };

        // 準備基本單位選項
        var baseUnitOptions = new List<SelectOption>
        {
            new() { Text = "是", Value = "true" },
            new() { Text = "否", Value = "false" }
        };

        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("UnitCode", "單位代碼", "輸入單位代碼搜尋")
            .AddText("UnitName", "單位名稱", "輸入單位名稱搜尋")
            .AddText("Symbol", "符號", "輸入單位符號搜尋", isAdvanced: true)
            .AddSelect("IsBaseUnit", "基本單位", baseUnitOptions, isAdvanced: true)
            .AddSelect("IsActive", "狀態", statusOptions, isAdvanced: true)
            .Build();
    }

    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("單位代碼", nameof(Unit.UnitCode)),
            TableColumnDefinition.Text("單位名稱", nameof(Unit.UnitName)),
            TableColumnDefinition.Text("符號", nameof(Unit.Symbol)),
            TableColumnDefinition.Boolean("基本單位", nameof(Unit.IsBaseUnit)),
            TableColumnDefinition.Status("狀態", nameof(Unit.Status), new Dictionary<object, string>
            {
                { EntityStatus.Active, "bg-success" },
                { EntityStatus.Inactive, "bg-secondary" }
            }),
            TableColumnDefinition.Date("建立日期", nameof(Unit.CreatedAt), "yyyy/MM/dd")
        };
    }

    // 自定義篩選邏輯
    private IQueryable<Unit> ApplyUnitFilters(SearchFilterModel searchModel, IQueryable<Unit> query)
    {
        // 單位代碼篩選
        var unitCodeFilter = searchModel.GetFilterValue("UnitCode")?.ToString();
        if (!string.IsNullOrWhiteSpace(unitCodeFilter))
        {
            query = query.Where(u => 
                u.UnitCode.Contains(unitCodeFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 單位名稱篩選
        var unitNameFilter = searchModel.GetFilterValue("UnitName")?.ToString();
        if (!string.IsNullOrWhiteSpace(unitNameFilter))
        {
            query = query.Where(u => 
                u.UnitName.Contains(unitNameFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 符號篩選
        var symbolFilter = searchModel.GetFilterValue("Symbol")?.ToString();
        if (!string.IsNullOrWhiteSpace(symbolFilter))
        {
            query = query.Where(u => 
                !string.IsNullOrEmpty(u.Symbol) && 
                u.Symbol.Contains(symbolFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 基本單位篩選
        var isBaseUnitFilter = searchModel.GetFilterValue("IsBaseUnit")?.ToString();
        if (!string.IsNullOrWhiteSpace(isBaseUnitFilter) && bool.TryParse(isBaseUnitFilter, out var isBaseUnit))
        {
            query = query.Where(u => u.IsBaseUnit == isBaseUnit);
        }

        // 狀態篩選
        var isActiveFilter = searchModel.GetFilterValue("IsActive")?.ToString();
        if (!string.IsNullOrWhiteSpace(isActiveFilter) && bool.TryParse(isActiveFilter, out var isActive))
        {
            query = query.Where(u => u.IsActive == isActive);
        }

        return query.OrderBy(u => u.UnitCode);
    }

    // 事件處理
    private async Task HandleRowClick(Unit unit)
    {
        Navigation.NavigateTo($"/inventory/units/detail/{unit.Id}");
        await Task.CompletedTask;
    }

    private async Task ShowCreateUnit()
    {
        Navigation.NavigateTo("/inventory/units/edit");
        await Task.CompletedTask;
    }

    private async Task EditUnit(Unit unit)
    {
        Navigation.NavigateTo($"/inventory/units/edit/{unit.Id}");
        await Task.CompletedTask;
    }

    private async Task DeleteUnit(Unit unit)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"確定要刪除單位「{unit.UnitName}」嗎？");
        
        if (confirmed)
        {
            try
            {
                var result = await UnitService.DeleteAsync(unit.Id);
                if (result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "單位刪除成功");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除時發生錯誤：{ex.Message}");
            }
        }
    }

    private async Task ViewUnit(Unit unit)
    {
        Navigation.NavigateTo($"/inventory/units/detail/{unit.Id}");
        await Task.CompletedTask;
    }

    // 表格操作範本
    private RenderFragment<Unit> ActionsTemplate => unit => 
        @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary" @onclick="() => ViewUnit(unit)" title="檢視">
                <i class="bi bi-eye"></i>
            </button>
            <button class="btn btn-outline-warning" @onclick="() => EditUnit(unit)" title="編輯">
                <i class="bi bi-pencil"></i>
            </button>
            <button class="btn btn-outline-danger" @onclick="() => DeleteUnit(unit)" title="刪除">
                <i class="bi bi-trash"></i>
            </button>
        </div>;
}