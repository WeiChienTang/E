@page "/inventory/stock-taking/edit"
@page "/inventory/stock-taking/edit/{id:int?}"
@inject IStockTakingService StockTakingService
@inject IWarehouseService WarehouseService
@inject IProductService ProductService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="StockTaking" 
                        TService="IStockTakingService"
                        Id="@Id"
                        Entity="@stockTaking"
                        Service="@StockTakingService"
                        EntityName="庫存盤點"
                        EntityNamePlural="庫存盤點"
                        PageTitle="@(Id.HasValue ? "編輯庫存盤點" : "新增庫存盤點")"
                        FormTitle="盤點資料"
                        FormSubtitle="庫存盤點基本資訊"
                        IndexRoute="/inventory/stock-taking"
                        RequiredPermission="StockTaking.Read"
                        FormFields="@formFields"
                        FormSections="@formSections"
                        BreadcrumbItems="@breadcrumbItems"                         
                        DataLoader="@LoadStockTakingData"
                        SaveHandler="@SaveStockTaking"                         
                        AdditionalDataLoader="@LoadAdditionalData"
                        @ref="editComponent" />

@code {
    // 參數
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<StockTaking, IStockTakingService> editComponent = default!;
    
    // 資料模型
    private StockTaking stockTaking = new();
    
    // 表單配置
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 選項資料
    private List<SelectOption> warehouseOptions = new();
    private List<SelectOption> warehouseLocationOptions = new();
    private List<SelectOption> takingTypeOptions = new();
    private List<SelectOption> takingStatusOptions = new();
    private List<SelectOption> employeeOptions = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
            InitializeFormSections();
        }
        catch (Exception ex)
        {
            // 記錄初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(OnInitialized),
                    GetType(),
                    additionalData: "初始化庫存盤點編輯頁面失敗"
                );
            });
        }
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("庫存管理", "/inventory"),
            new("庫存盤點", "/inventory/stock-taking"),
            new(Id.HasValue ? "編輯盤點" : "新增盤點")
        };
    }

    private void InitializeFormFields()
    {
        // 準備盤點類型選項
        takingTypeOptions = Enum.GetValues<StockTakingTypeEnum>()
            .Select(e => new SelectOption
            {
                Value = ((int)e).ToString(),
                Text = e.ToString() // 改為使用 ToString()
            }).ToList();

        // 準備盤點狀態選項
        takingStatusOptions = Enum.GetValues<StockTakingStatusEnum>()
            .Select(e => new SelectOption
            {
                Value = ((int)e).ToString(),
                Text = e.ToString() // 改為使用 ToString()
            }).ToList();

        formFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = nameof(StockTaking.TakingNumber),
                Label = "盤點單號",
                FieldType = FormFieldType.Text,
                IsRequired = true,
                Placeholder = "系統自動產生",
                IsReadOnly = true
            },
            new()
            {
                PropertyName = nameof(StockTaking.TakingDate),
                Label = "盤點日期",
                FieldType = FormFieldType.Date,
                IsRequired = true
            },
            new()
            {
                PropertyName = nameof(StockTaking.WarehouseId),
                Label = "盤點倉庫",
                FieldType = FormFieldType.Select,
                IsRequired = true,
                Options = warehouseOptions
            },
            new()
            {
                PropertyName = nameof(StockTaking.WarehouseLocationId),
                Label = "倉庫位置",
                FieldType = FormFieldType.Select,
                IsRequired = false,
                Options = warehouseLocationOptions
            },
            new()
            {
                PropertyName = nameof(StockTaking.TakingType),
                Label = "盤點類型",
                FieldType = FormFieldType.Select,
                IsRequired = true,
                Options = takingTypeOptions
            },
            new()
            {
                PropertyName = nameof(StockTaking.TakingStatus),
                Label = "盤點狀態",
                FieldType = FormFieldType.Select,
                IsRequired = true,
                Options = takingStatusOptions,
                IsReadOnly = Id.HasValue // 編輯時唯讀
            },
            new()
            {
                PropertyName = nameof(StockTaking.StartTime),
                Label = "開始時間",
                FieldType = FormFieldType.DateTime,
                IsRequired = false,
                IsReadOnly = true
            },
            new()
            {
                PropertyName = nameof(StockTaking.EndTime),
                Label = "結束時間",
                FieldType = FormFieldType.DateTime,
                IsRequired = false,
                IsReadOnly = true
            },
            new()
            {
                PropertyName = nameof(StockTaking.TakingPersonnel),
                Label = "盤點人員",
                FieldType = FormFieldType.Text,
                IsRequired = false,
                Placeholder = "請輸入盤點人員姓名"
            },
            new()
            {
                PropertyName = nameof(StockTaking.SupervisingPersonnel),
                Label = "監盤人員",
                FieldType = FormFieldType.Text,
                IsRequired = false,
                Placeholder = "請輸入監盤人員姓名"
            },
            new()
            {
                PropertyName = nameof(StockTaking.ApprovedBy),
                Label = "審核人員",
                FieldType = FormFieldType.Select,
                IsRequired = false,
                Options = employeeOptions,
                IsReadOnly = true
            },
            new()
            {
                PropertyName = nameof(StockTaking.ApprovedAt),
                Label = "審核時間",
                FieldType = FormFieldType.DateTime,
                IsRequired = false,
                IsReadOnly = true
            },
            new()
            {
                PropertyName = nameof(StockTaking.TakingRemarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                IsRequired = false,
                Placeholder = "請輸入盤點備註"
            },
            new()
            {
                PropertyName = nameof(StockTaking.TotalItems),
                Label = "總項目數",
                FieldType = FormFieldType.Number,
                IsRequired = false,
                IsReadOnly = true
            },
            new()
            {
                PropertyName = nameof(StockTaking.CompletedItems),
                Label = "已盤點項目數",
                FieldType = FormFieldType.Number,
                IsRequired = false,
                IsReadOnly = true
            },
            new()
            {
                PropertyName = nameof(StockTaking.DifferenceItems),
                Label = "差異項目數",
                FieldType = FormFieldType.Number,
                IsRequired = false,
                IsReadOnly = true
            },
            new()
            {
                PropertyName = nameof(StockTaking.CompletionRate),
                Label = "盤點完成率(%)",
                FieldType = FormFieldType.Number,
                IsRequired = false,
                IsReadOnly = true
            }
        };
    }

    private void InitializeFormSections()
    {
        formSections = new Dictionary<string, string>
        {
            { nameof(StockTaking.TakingNumber), "基本資訊" },
            { nameof(StockTaking.TakingDate), "基本資訊" },
            { nameof(StockTaking.WarehouseId), "基本資訊" },
            { nameof(StockTaking.WarehouseLocationId), "基本資訊" },
            { nameof(StockTaking.TakingType), "基本資訊" },
            { nameof(StockTaking.TakingStatus), "基本資訊" },
            { nameof(StockTaking.StartTime), "執行資訊" },
            { nameof(StockTaking.EndTime), "執行資訊" },
            { nameof(StockTaking.TakingPersonnel), "執行資訊" },
            { nameof(StockTaking.SupervisingPersonnel), "執行資訊" },
            { nameof(StockTaking.ApprovedBy), "審核資訊" },
            { nameof(StockTaking.ApprovedAt), "審核資訊" },
            { nameof(StockTaking.TakingRemarks), "其他資訊" },
            { nameof(StockTaking.TotalItems), "統計資訊" },
            { nameof(StockTaking.CompletedItems), "統計資訊" },
            { nameof(StockTaking.DifferenceItems), "統計資訊" },
            { nameof(StockTaking.CompletionRate), "統計資訊" }
        };
    }

    // 載入庫存盤點資料
    private async Task<StockTaking?> LoadStockTakingData()
    {
        try
        {
            if (Id.HasValue)
            {
                stockTaking = await StockTakingService.GetWithDetailsAsync(Id.Value) ?? new StockTaking();
            }
            else
            {
                stockTaking = new StockTaking 
                { 
                    Status = EntityStatus.Active,
                    TakingDate = DateTime.Today,
                    TakingStatus = StockTakingStatusEnum.Draft,
                    TakingType = StockTakingTypeEnum.Full
                };
            }
            
            return stockTaking;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadStockTakingData),
                GetType(),
                additionalData: new { Id = Id }
            );
            
            return new StockTaking { Status = EntityStatus.Active };
        }
    }

    // 載入額外資料（選項清單等）
    private async Task LoadAdditionalData()
    {
        try
        {
            // 載入倉庫選項
            var warehouses = await WarehouseService.GetAllAsync();
            warehouseOptions = warehouses.Select(w => new SelectOption
            {
                Value = w.Id.ToString(),
                Text = w.WarehouseName
            }).ToList();

            // 載入員工選項（用於審核人員）
            // 這裡應該載入員工資料，暫時留空
            employeeOptions = new List<SelectOption>();

            // 更新表單欄位中的選項
            UpdateFormFieldOptions();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadAdditionalData),
                GetType(),
                additionalData: "載入額外資料失敗"
            );
        }
    }

    // 儲存庫存盤點資料
    private async Task<bool> SaveStockTaking(StockTaking entity)
    {
        try
        {
            ServiceResult result;
            
            if (entity.Id == 0)
            {
                result = await StockTakingService.CreateStockTakingAsync(entity);
            }
            else
            {
                result = await StockTakingService.UpdateAsync(entity);
            }
            
            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(SaveStockTaking),
                GetType(),
                additionalData: new { EntityId = entity.Id }
            );
            
            return false;
        }
    }

    private void UpdateFormFieldOptions()
    {
        try
        {
            // 更新倉庫選項
            var warehouseField = formFields.FirstOrDefault(f => f.PropertyName == nameof(StockTaking.WarehouseId));
            if (warehouseField != null)
            {
                warehouseField.Options = warehouseOptions;
            }

            // 更新員工選項
            var employeeField = formFields.FirstOrDefault(f => f.PropertyName == nameof(StockTaking.ApprovedBy));
            if (employeeField != null)
            {
                employeeField.Options = employeeOptions;
            }
        }
        catch (Exception ex)
        {
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(UpdateFormFieldOptions),
                    GetType(),
                    additionalData: "更新表單欄位選項失敗"
                );
            });
        }
    }
}
