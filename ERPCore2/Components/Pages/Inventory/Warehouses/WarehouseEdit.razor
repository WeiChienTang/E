@page "/warehouses/edit"
@page "/warehouses/edit/{id:int?}"
@page "/inventory/warehouses/edit"
@page "/inventory/warehouses/edit/{id:int?}"
@inject IWarehouseService WarehouseService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>@GetPageTitle()</PageTitle>

<GenericEditPageComponent TEntity="Warehouse" 
                         TService="IWarehouseService"
                         Id="@Id"
                         Entity="@warehouse"
                         Service="@WarehouseService"
                         EntityName="倉庫"
                         EntityNamePlural="倉庫"
                         FormTitle="基本資料"
                         FormSubtitle="倉庫的基本資訊設定"
                         FormIcon="house-door"
                         IndexRoute="/inventory/warehouses"
                         BreadcrumbItems="@breadcrumbItems"
                         UseGenericForm="true"
                         FormFields="@formFields"
                         FormSections="@formSections"
                         DataLoader="@LoadEntityAsync"
                         SaveHandler="@SaveEntityAsync"
                         CustomValidation="@ValidateEntityAsync"
                         OnSaveSuccess="@HandleSaveSuccess"
                         OnCancel="@HandleCancel">
    
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 資料模型
    private Warehouse warehouse = new() 
    { 
        IsActive = true,
        IsDefault = false,
        WarehouseType = WarehouseTypeEnum.Main
    };
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnParametersSet()
    {
        InitializeBreadcrumbs();
        InitializeFormFields();
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("庫存管理", "/inventory"),
            new("倉庫管理", "/inventory/warehouses"),
            new(Id.HasValue ? "編輯倉庫" : "新增倉庫")
        };
    }

    private void InitializeFormFields()
    {
        // 倉庫類型選項
        var warehouseTypeOptions = new List<SelectOption>
        {
            new() { Text = "主倉庫", Value = WarehouseTypeEnum.Main.ToString() },
            new() { Text = "分倉庫", Value = WarehouseTypeEnum.Branch.ToString() },
            new() { Text = "虛擬倉庫", Value = WarehouseTypeEnum.Virtual.ToString() },
            new() { Text = "退貨倉庫", Value = WarehouseTypeEnum.Return.ToString() }
        };

        formFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = nameof(Warehouse.WarehouseCode),
                Label = "倉庫代碼",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入倉庫代碼",
                IsRequired = true,
                ContainerCssClass = "col-md-4"
            },
            new()
            {
                PropertyName = nameof(Warehouse.WarehouseName),
                Label = "倉庫名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入倉庫名稱",
                IsRequired = true,
                ContainerCssClass = "col-md-8"
            },
            new()
            {
                PropertyName = nameof(Warehouse.WarehouseType),
                Label = "倉庫類型",
                FieldType = FormFieldType.Select,
                Options = warehouseTypeOptions,
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Warehouse.ContactPerson),
                Label = "聯絡人",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入聯絡人姓名",
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Warehouse.Phone),
                Label = "聯絡電話",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入聯絡電話",
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Warehouse.Address),
                Label = "地址",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入倉庫地址",
                ContainerCssClass = "col-12"
            },
            new()
            {
                PropertyName = nameof(Warehouse.IsDefault),
                Label = "設為預設倉庫",
                FieldType = FormFieldType.Checkbox,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Warehouse.IsActive),
                Label = "啟用狀態",
                FieldType = FormFieldType.Checkbox,
                ContainerCssClass = "col-md-6"
            }
        };

        formSections = new Dictionary<string, string>
        {
            { nameof(Warehouse.WarehouseCode), "基本資訊" },
            { nameof(Warehouse.WarehouseName), "基本資訊" },
            { nameof(Warehouse.WarehouseType), "分類資訊" },
            { nameof(Warehouse.ContactPerson), "聯絡資訊" },
            { nameof(Warehouse.Phone), "聯絡資訊" },
            { nameof(Warehouse.Address), "地址資訊" },
            { nameof(Warehouse.IsDefault), "設定選項" },
            { nameof(Warehouse.IsActive), "設定選項" }
        };
    }

    private string GetPageTitle()
    {
        return Id.HasValue ? "編輯倉庫" : "新增倉庫";
    }

    // GenericEditPageComponent 回調方法
    private async Task<Warehouse?> LoadEntityAsync()
    {
        if (!Id.HasValue) return null;
        
        var result = await WarehouseService.GetByIdAsync(Id.Value);
        if (result == null)
        {
            throw new InvalidOperationException($"找不到 ID 為 {Id.Value} 的倉庫");
        }
        return result;
    }

    private async Task<bool> SaveEntityAsync(Warehouse entity)
    {
        try
        {
            if (Id.HasValue)
            {
                var result = await WarehouseService.UpdateAsync(entity);
                if (!result.IsSuccess)
                {
                    if (OperatingSystem.IsBrowser())
                    {
                        await JSRuntime.InvokeVoidAsync("alert", $"更新失敗：{result.ErrorMessage}");
                    }
                    return false;
                }
                if (OperatingSystem.IsBrowser())
                {
                    await JSRuntime.InvokeVoidAsync("alert", "倉庫更新成功");
                }
            }
            else
            {
                var result = await WarehouseService.CreateAsync(entity);
                if (!result.IsSuccess)
                {
                    if (OperatingSystem.IsBrowser())
                    {
                        await JSRuntime.InvokeVoidAsync("alert", $"新增失敗：{result.ErrorMessage}");
                    }
                    return false;
                }
                if (OperatingSystem.IsBrowser())
                {
                    await JSRuntime.InvokeVoidAsync("alert", "倉庫新增成功");
                }
            }
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"儲存倉庫資料時發生錯誤：{ex.Message}");
            if (OperatingSystem.IsBrowser())
            {
                await JSRuntime.InvokeVoidAsync("alert", $"儲存失敗：{ex.Message}");
            }
            return false;
        }
    }

    private async Task<bool> ValidateEntityAsync(Warehouse entity)
    {
        try
        {
            // 驗證基本資料
            if (string.IsNullOrWhiteSpace(entity.WarehouseCode))
            {
                if (OperatingSystem.IsBrowser())
                {
                    await JSRuntime.InvokeVoidAsync("alert", "倉庫代碼為必填");
                }
                return false;
            }

            if (string.IsNullOrWhiteSpace(entity.WarehouseName))
            {
                if (OperatingSystem.IsBrowser())
                {
                    await JSRuntime.InvokeVoidAsync("alert", "倉庫名稱為必填");
                }
                return false;
            }

            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"驗證倉庫資料時發生錯誤：{ex.Message}");
            return false;
        }
    }

    private Task HandleSaveSuccess()
    {
        Navigation.NavigateTo("/inventory/warehouses");
        return Task.CompletedTask;
    }

    private Task HandleCancel()
    {
        Navigation.NavigateTo("/inventory/warehouses");
        return Task.CompletedTask;
    }
}