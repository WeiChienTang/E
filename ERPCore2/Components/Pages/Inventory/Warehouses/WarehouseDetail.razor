@page "/warehouses/detail/{id:int}"
@page "/inventory/warehouses/detail/{id:int}"
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using Microsoft.AspNetCore.Components.Web
@inject IWarehouseService WarehouseService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">載入中...</span>
            </div>
            <div class="mt-2">載入倉庫資料中...</div>
        </div>
    </div>
}
else if (warehouse == null)
{
    <div class="alert alert-warning">
        <h4>找不到倉庫資料</h4>
        <p>指定的倉庫不存在或已被刪除。</p>
        <button class="btn btn-primary" @onclick="BackToWarehouseList">
            返回倉庫列表
        </button>
    </div>
}
else
{
    <GenericDetailsComponent Configuration="@detailConfiguration" 
                           OnSectionLoad="HandleSectionLoad"
                           OnItemClick="HandleItemClick"
                           ActionButtons="@ActionButtons" />
}

@code {
    [Parameter] public int WarehouseId { get; set; }

    private Warehouse? warehouse;
    private List<WarehouseLocation> warehouseLocations = new();
    private bool isLoading = true;
    private DetailViewConfiguration detailConfiguration = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadWarehouseData();
        InitializeDetailConfiguration();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (WarehouseId > 0)
        {
            await LoadWarehouseData();
            InitializeDetailConfiguration();
        }
    }

    private async Task LoadWarehouseData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // 載入倉庫基本資料
            warehouse = await WarehouseService.GetByIdAsync(WarehouseId);
            
            if (warehouse != null)
            {
                // 載入庫位資料
                var warehouseWithLocations = await WarehouseService.GetWarehouseWithLocationsAsync(WarehouseId);
                if (warehouseWithLocations != null)
                {
                    warehouseLocations = warehouseWithLocations.WarehouseLocations.ToList();
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入倉庫資料失敗：", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeDetailConfiguration()
    {
        if (warehouse == null) return;

        detailConfiguration = new DetailViewConfiguration
        {
            Title = warehouse.WarehouseName,
            Subtitle = $"倉庫代碼：{warehouse.WarehouseCode}",
            TitleIcon = "bi bi-house-door",
            UseTabs = true,
            Sections = new List<DetailSection>
            {
                CreateBasicInfoSection(),
                CreateLocationSection()
            }
        };
    }

    private DetailSection CreateBasicInfoSection()
    {
        var items = new List<DetailItem>
        {
            new() { 
                Label = "倉庫代碼", 
                Value = warehouse!.WarehouseCode, 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "倉庫名稱", 
                Value = warehouse.WarehouseName, 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-md-6",
                IsHighlight = true
            },
            new() { 
                Label = "倉庫類型", 
                Value = GetWarehouseTypeText(warehouse.WarehouseType), 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "聯絡人", 
                Value = warehouse.ContactPerson ?? "-", 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "聯絡電話", 
                Value = warehouse.Phone ?? "-", 
                DisplayType = DetailDisplayType.Phone,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "地址", 
                Value = warehouse.Address ?? "-", 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "預設倉庫", 
                Value = warehouse.IsDefault ? "是" : "否", 
                DisplayType = DetailDisplayType.Status,
                Format = new DetailItemFormat 
                { 
                    StatusColors = new Dictionary<string, string>
                    {
                        { "是", "bg-primary" },
                        { "否", "bg-secondary" }
                    }
                },
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "狀態", 
                Value = warehouse.IsActive ? "啟用" : "停用", 
                DisplayType = DetailDisplayType.Status,
                Format = new DetailItemFormat 
                { 
                    StatusColors = new Dictionary<string, string>
                    {
                        { "啟用", "bg-success" },
                        { "停用", "bg-danger" }
                    }
                },
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "建立日期", 
                Value = warehouse.CreatedAt, 
                DisplayType = DetailDisplayType.DateTime,
                ContainerCssClass = "col-md-6"
            },
            new() { 
                Label = "最後更新", 
                Value = warehouse.UpdatedAt, 
                DisplayType = DetailDisplayType.DateTime,
                ContainerCssClass = "col-md-6"
            }
        };

        return new DetailSection
        {
            Id = "basic",
            Title = "基本資料",
            Icon = "bi bi-info-circle",
            Items = items
        };
    }

    private DetailSection CreateLocationSection()
    {
        var items = new List<DetailItem>();
        
        if (warehouseLocations.Any())
        {
            foreach (var location in warehouseLocations.OrderBy(l => l.LocationCode))
            {
                var locationInfo = BuildLocationInfo(location);
                
                items.Add(new DetailItem 
                { 
                    Label = $"{location.LocationCode} - {location.LocationName}", 
                    Value = locationInfo, 
                    DisplayType = DetailDisplayType.Text,
                    ContainerCssClass = "col-md-6",
                    IsHighlight = location.IsActive
                });
            }
        }
        else
        {
            items.Add(new DetailItem 
            { 
                Label = "庫位資訊", 
                Value = "暫無庫位資料", 
                DisplayType = DetailDisplayType.Text,
                ContainerCssClass = "col-12"
            });
        }

        return new DetailSection
        {
            Id = "locations",
            Title = $"庫位資訊 ({warehouseLocations.Count} 個庫位)",
            Icon = "bi bi-grid-3x3",
            Items = items
        };
    }

    private string GetWarehouseTypeText(WarehouseTypeEnum warehouseType)
    {
        return warehouseType switch
        {
            WarehouseTypeEnum.Main => "主倉庫",
            WarehouseTypeEnum.Branch => "分倉庫",
            WarehouseTypeEnum.Virtual => "虛擬倉庫",
            WarehouseTypeEnum.Return => "退貨倉庫",
            _ => "未知類型"
        };
    }

    private string BuildLocationInfo(WarehouseLocation location)
    {
        var parts = new List<string>();
        
        if (!string.IsNullOrEmpty(location.Zone))
            parts.Add($"區域：{location.Zone}");
        
        if (!string.IsNullOrEmpty(location.Aisle))
            parts.Add($"排：{location.Aisle}");
        
        if (!string.IsNullOrEmpty(location.Level))
            parts.Add($"層：{location.Level}");
        
        if (!string.IsNullOrEmpty(location.Position))
            parts.Add($"位：{location.Position}");

        if (location.MaxCapacity.HasValue)
            parts.Add($"容量：{location.MaxCapacity}");

        var statusText = location.IsActive ? "啟用" : "停用";
        parts.Add($"狀態：{statusText}");

        return parts.Any() ? string.Join(" | ", parts) : "資訊不完整";
    }

    // Action Buttons
    private RenderFragment ActionButtons => __builder =>
    {
        <button class="btn btn-primary btn-sm me-2" @onclick="EditWarehouse">
            <i class="fas fa-edit me-1"></i>編輯
        </button>
        <button class="btn btn-outline-secondary btn-sm me-2" @onclick="PrintWarehouse">
            <i class="fas fa-print me-1"></i>列印
        </button>
        @if (!warehouse!.IsDefault)
        {
            <button class="btn btn-outline-success btn-sm me-2" @onclick="SetAsDefault">
                <i class="fas fa-star me-1"></i>設為預設
            </button>
        }
        <button class="btn btn-outline-primary btn-sm" @onclick="BackToList">
            <i class="fas fa-arrow-left me-1"></i>返回列表
        </button>
    };

    private async Task HandleSectionLoad(string sectionId)
    {
        // 目前所有資料都在初始載入時取得，所以這裡不需要額外處理
        await Task.CompletedTask;
    }

    private async Task HandleItemClick(GenericDetailsComponent.DetailItemClickEventArgs args)
    {
        // 處理項目點擊事件
        if (args.Item.DisplayType == DetailDisplayType.Phone)
        {
            await JSRuntime.InvokeVoidAsync("window.open", $"tel:{args.Item.Value}");
        }
    }

    private void EditWarehouse()
    {
        Navigation.NavigateTo($"/inventory/warehouses/edit/{WarehouseId}");
    }

    private async Task PrintWarehouse()
    {
        await JSRuntime.InvokeVoidAsync("window.print");
    }

    private async Task SetAsDefault()
    {
        try
        {
            var result = await WarehouseService.SetDefaultWarehouseAsync(WarehouseId);
            if (result.IsSuccess)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"已設定「{warehouse!.WarehouseName}」為預設倉庫");
                await LoadWarehouseData();
                InitializeDetailConfiguration();
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"設定失敗：{result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"設定時發生錯誤：{ex.Message}");
        }
    }

    private void BackToList()
    {
        Navigation.NavigateTo("/inventory/warehouses");
    }

    private void BackToWarehouseList()
    {
        Navigation.NavigateTo("/inventory/warehouses");
    }
}