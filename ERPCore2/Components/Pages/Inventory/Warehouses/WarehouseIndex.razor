@page "/warehouses"
@page "/inventory/warehouses"
@inject IWarehouseService WarehouseService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>倉庫管理</PageTitle>

@* 頁面標題 *@
<GenericHeaderComponent Title="倉庫管理"
                       Subtitle="管理所有倉庫資料與庫位資訊"
                       TitleIcon="house-door-fill"
                       HeadingLevel="h1"
                       BreadcrumbItems="@breadcrumbItems"
                       IsLoading="@isLoading"
                       LoadingText="載入中..."
                       ShowDivider="true">
    <ActionButtons>
        <button class="btn btn-primary" @onclick="ShowCreateWarehouse">
            <i class="bi bi-plus-circle me-1"></i>
            新增倉庫
        </button>
        <button class="btn btn-outline-secondary" @onclick="RefreshData">
            <i class="bi bi-arrow-clockwise me-1"></i>
            重新整理
        </button>
    </ActionButtons>
</GenericHeaderComponent>

@* 倉庫管理主要內容區域 *@
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-search me-2"></i>
                    倉庫搜尋與管理
                </h5>
            </div>
            <div class="card-body">
                @* 搜尋篩選區域 *@
                <GenericSearchFilterComponent TModel="WarehouseSearchModel"
                                             FilterDefinitions="@filterDefinitions"
                                             FilterModel="@searchModel"
                                             OnSearch="HandleSearch"
                                             OnFilterChanged="HandleFilterChanged"
                                             AutoSearch="true"
                                             ShowSearchButton="true"
                                             ShowAdvancedToggle="true"
                                             SearchDelayMs="500" />

                @* 倉庫列表表格 *@
                <div class="mt-4">
                    <GenericTableComponent TItem="Warehouse"
                                          Items="@pagedWarehouses"
                                          ColumnDefinitions="@columnDefinitions"
                                          ShowActions="true"
                                          ActionsTemplate="@ActionsTemplate"
                                          EnableRowClick="true"
                                          OnRowClick="HandleRowClick"
                                          EnableSorting="false"
                                          IsStriped="true"
                                          IsHoverable="true"
                                          IsBordered="false"
                                          Size="TableSize.Normal"
                                          EmptyMessage="沒有找到符合條件的倉庫資料"
                                          ActionsHeader="操作"
                                          EnablePagination="true"
                                          CurrentPage="@currentPage"
                                          PageSize="@pageSize"
                                          TotalItems="@totalItems"
                                          OnPageChanged="HandlePageChanged"
                                          OnPageSizeChanged="HandlePageSizeChanged"
                                          ShowPageSizeSelector="true">
                    </GenericTableComponent>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // 資料來源
    private List<Warehouse> warehouses = new();
    private List<Warehouse> allWarehouses = new();
    
    // 篩選相關
    private SearchFilterModel searchModel = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    
    // 表格相關
    private List<TableColumnDefinition> columnDefinitions = new();
    
    // 分頁相關
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalItems = 0;
    private List<Warehouse> pagedWarehouses = new();
    
    // 狀態管理
    private bool isLoading = true;
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await InitializePageAsync();
    }

    private async Task InitializePageAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // 初始化麵包屑
            InitializeBreadcrumbs();
            
            // 初始化篩選器
            InitializeFilters();
            
            // 初始化表格欄位
            InitializeTableColumns();
            
            // 載入倉庫資料
            await LoadWarehousesAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入倉庫資料時發生錯誤：", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("庫存管理", "/inventory"),
            new("倉庫管理")
        };
    }

    private void InitializeFilters()
    {
        // 準備倉庫類型選項
        var warehouseTypeOptions = new List<SelectOption>
        {
            new() { Text = "主倉庫", Value = WarehouseTypeEnum.Main.ToString() },
            new() { Text = "分倉庫", Value = WarehouseTypeEnum.Branch.ToString() },
            new() { Text = "虛擬倉庫", Value = WarehouseTypeEnum.Virtual.ToString() },
            new() { Text = "退貨倉庫", Value = WarehouseTypeEnum.Return.ToString() }
        };

        // 準備狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = "true" },
            new() { Text = "停用", Value = "false" }
        };

        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<WarehouseSearchModel>()
            .AddText("WarehouseCode", "倉庫代碼", "輸入倉庫代碼搜尋")
            .AddText("WarehouseName", "倉庫名稱", "輸入倉庫名稱搜尋")
            .AddSelect("WarehouseType", "倉庫類型", warehouseTypeOptions, isAdvanced: true)
            .AddSelect("IsActive", "狀態", statusOptions, isAdvanced: true)
            .AddText("ContactPerson", "聯絡人", "輸入聯絡人姓名搜尋", isAdvanced: true)
            .Build();
    }

    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("倉庫代碼", nameof(Warehouse.WarehouseCode)),
            TableColumnDefinition.Text("倉庫名稱", nameof(Warehouse.WarehouseName)),
            TableColumnDefinition.Text("倉庫類型", nameof(Warehouse.WarehouseType)),
            TableColumnDefinition.Text("聯絡人", nameof(Warehouse.ContactPerson)),
            TableColumnDefinition.Text("電話", nameof(Warehouse.Phone)),
            TableColumnDefinition.Boolean("預設倉庫", nameof(Warehouse.IsDefault)),
            TableColumnDefinition.Status("狀態", nameof(Warehouse.Status), new Dictionary<object, string>
            {
                { EntityStatus.Active, "bg-success" },
                { EntityStatus.Inactive, "bg-secondary" }
            }),
            TableColumnDefinition.Date("建立日期", nameof(Warehouse.CreatedAt), "yyyy/MM/dd")
        };
    }

    private async Task LoadWarehousesAsync()
    {
        try
        {
            allWarehouses = await WarehouseService.GetAllAsync();
            await ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入倉庫資料失敗：", ex.Message);
            warehouses = new List<Warehouse>();
            pagedWarehouses = new List<Warehouse>();
        }
    }

    private async Task ApplyFilters()
    {
        var filteredWarehouses = allWarehouses.AsQueryable();

        // 倉庫代碼篩選
        var warehouseCodeFilter = searchModel.GetFilterValue("WarehouseCode")?.ToString();
        if (!string.IsNullOrWhiteSpace(warehouseCodeFilter))
        {
            filteredWarehouses = filteredWarehouses.Where(w => 
                w.WarehouseCode.Contains(warehouseCodeFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 倉庫名稱篩選
        var warehouseNameFilter = searchModel.GetFilterValue("WarehouseName")?.ToString();
        if (!string.IsNullOrWhiteSpace(warehouseNameFilter))
        {
            filteredWarehouses = filteredWarehouses.Where(w => 
                w.WarehouseName.Contains(warehouseNameFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 倉庫類型篩選
        var warehouseTypeFilter = searchModel.GetFilterValue("WarehouseType")?.ToString();
        if (!string.IsNullOrWhiteSpace(warehouseTypeFilter) && Enum.TryParse<WarehouseTypeEnum>(warehouseTypeFilter, out var warehouseType))
        {
            filteredWarehouses = filteredWarehouses.Where(w => w.WarehouseType == warehouseType);
        }

        // 狀態篩選
        var isActiveFilter = searchModel.GetFilterValue("IsActive")?.ToString();
        if (!string.IsNullOrWhiteSpace(isActiveFilter) && bool.TryParse(isActiveFilter, out var isActive))
        {
            filteredWarehouses = filteredWarehouses.Where(w => w.IsActive == isActive);
        }

        // 聯絡人篩選
        var contactPersonFilter = searchModel.GetFilterValue("ContactPerson")?.ToString();
        if (!string.IsNullOrWhiteSpace(contactPersonFilter))
        {
            filteredWarehouses = filteredWarehouses.Where(w => 
                !string.IsNullOrEmpty(w.ContactPerson) && 
                w.ContactPerson.Contains(contactPersonFilter, StringComparison.OrdinalIgnoreCase));
        }

        warehouses = filteredWarehouses.OrderBy(w => w.WarehouseCode).ToList();
        totalItems = warehouses.Count;
        
        // 重置分頁到第一頁（如果是搜尋操作）
        currentPage = 1;
        
        // 應用分頁
        ApplyPagination();
        
        await Task.CompletedTask;
    }

    private void ApplyPagination()
    {
        // 確保當前頁面有效
        var maxPage = totalItems > 0 ? (int)Math.Ceiling((double)totalItems / pageSize) : 1;
        if (currentPage > maxPage)
        {
            currentPage = Math.Max(1, maxPage);
        }
        
        // 計算分頁資料
        pagedWarehouses = warehouses
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task HandlePageChanged(int newPage)
    {
        currentPage = newPage;
        ApplyPagination();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandlePageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1; // 重置到第一頁
        ApplyPagination();
        StateHasChanged();
        await Task.CompletedTask;
    }

    private async Task HandleSearch(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        await ApplyFilters();
        StateHasChanged();
    }

    private async Task HandleFilterChanged(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        await Task.CompletedTask;
    }

    private async Task HandleRowClick(Warehouse warehouse)
    {
        Navigation.NavigateTo($"/inventory/warehouses/detail/{warehouse.Id}");
        await Task.CompletedTask;
    }

    private async Task RefreshData()
    {
        await LoadWarehousesAsync();
        StateHasChanged();
    }

    private async Task ShowCreateWarehouse()
    {
        Navigation.NavigateTo("/inventory/warehouses/edit");
        await Task.CompletedTask;
    }

    private async Task EditWarehouse(Warehouse warehouse)
    {
        Navigation.NavigateTo($"/inventory/warehouses/edit/{warehouse.Id}");
        await Task.CompletedTask;
    }

    private async Task DeleteWarehouse(Warehouse warehouse)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"確定要刪除倉庫「{warehouse.WarehouseName}」嗎？");
        
        if (confirmed)
        {
            try
            {
                var result = await WarehouseService.DeleteAsync(warehouse.Id);
                if (result.IsSuccess)
                {
                    await RefreshData();
                    await JSRuntime.InvokeVoidAsync("alert", "倉庫刪除成功");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除時發生錯誤：{ex.Message}");
            }
        }
    }

    private async Task SetDefaultWarehouse(Warehouse warehouse)
    {
        try
        {
            var result = await WarehouseService.SetDefaultWarehouseAsync(warehouse.Id);
            if (result.IsSuccess)
            {
                await RefreshData();
                await JSRuntime.InvokeVoidAsync("alert", $"已設定「{warehouse.WarehouseName}」為預設倉庫");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"設定失敗：{result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"設定時發生錯誤：{ex.Message}");
        }
    }

    private async Task ViewWarehouse(Warehouse warehouse)
    {
        Navigation.NavigateTo($"/inventory/warehouses/detail/{warehouse.Id}");
        await Task.CompletedTask;
    }

    // 表格操作範本
    private RenderFragment<Warehouse> ActionsTemplate => warehouse => 
        @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary" @onclick="() => ViewWarehouse(warehouse)" title="檢視">
                <i class="bi bi-eye"></i>
            </button>
            <button class="btn btn-outline-warning" @onclick="() => EditWarehouse(warehouse)" title="編輯">
                <i class="bi bi-pencil"></i>
            </button>
            @if (!warehouse.IsDefault)
            {
                <button class="btn btn-outline-success" @onclick="() => SetDefaultWarehouse(warehouse)" title="設為預設">
                    <i class="bi bi-star"></i>
                </button>
            }
            <button class="btn btn-outline-danger" @onclick="() => DeleteWarehouse(warehouse)" title="刪除">
                <i class="bi bi-trash"></i>
            </button>
        </div>;
}

@* 倉庫搜尋模型 *@
@code {
    public class WarehouseSearchModel
    {
        public string? WarehouseCode { get; set; }
        public string? WarehouseName { get; set; }
        public WarehouseTypeEnum? WarehouseType { get; set; }
        public bool? IsActive { get; set; }
        public string? ContactPerson { get; set; }
    }
}