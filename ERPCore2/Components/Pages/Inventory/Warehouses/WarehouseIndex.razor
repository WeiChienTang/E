@page "/warehouses"
@page "/inventory/warehouses"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Components.Shared
@inject IWarehouseService WarehouseService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>倉庫管理</PageTitle>

<GenericIndexPageComponent TEntity="Warehouse" 
                          TService="IWarehouseService"
                          Service="@WarehouseService"
                          PageTitle="倉庫管理"
                          PageSubtitle="管理所有倉庫資料與庫位資訊"
                          PageIcon="house-door-fill"
                          AddButtonText="新增倉庫"
                          AddButtonIcon="bi bi-plus-circle"
                          AddButtonTitle="新增倉庫資料"
                          SearchSectionTitle="倉庫搜尋與管理"
                          EmptyMessage="沒有找到符合條件的倉庫資料"
                          DataLoader="@LoadDataAsync"
                          FilterApplier="@ApplyWarehouseFilters"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          OnRowClick="@HandleRowClick"
                          ActionsTemplate="@ActionButtonsTemplate"
                          @ref="indexComponent">
</GenericIndexPageComponent>

@code {
    private GenericIndexPageComponent<Warehouse, IWarehouseService> indexComponent = default!;
    
    // 設定選項
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    protected override async Task OnInitializedAsync()
    {
        InitializeBreadcrumbs();
        InitializeFilters();
        InitializeTableColumns();
        await Task.CompletedTask;
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("庫存管理", "/inventory"),
            new("倉庫管理")
        };
    }

    private void InitializeFilters()
    {
        // 準備倉庫類型選項
        var warehouseTypeOptions = new List<SelectOption>
        {
            new() { Text = "主倉庫", Value = WarehouseTypeEnum.Main.ToString() },
            new() { Text = "分倉庫", Value = WarehouseTypeEnum.Branch.ToString() },
            new() { Text = "虛擬倉庫", Value = WarehouseTypeEnum.Virtual.ToString() },
            new() { Text = "退貨倉庫", Value = WarehouseTypeEnum.Return.ToString() }
        };

        // 準備狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
            new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
        };

        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("WarehouseCode", "倉庫代碼", "輸入倉庫代碼搜尋")
            .AddText("WarehouseName", "倉庫名稱", "輸入倉庫名稱搜尋")
            .AddSelect("WarehouseType", "倉庫類型", warehouseTypeOptions, isAdvanced: true)
            .AddSelect("Status", "狀態", statusOptions, isAdvanced: true)
            .AddText("ContactPerson", "聯絡人", "輸入聯絡人姓名搜尋", isAdvanced: true)
            .Build();
    }

    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("倉庫代碼", nameof(Warehouse.WarehouseCode)),
            TableColumnDefinition.Text("倉庫名稱", nameof(Warehouse.WarehouseName)),
            TableColumnDefinition.Text("倉庫類型", nameof(Warehouse.WarehouseType)),
            TableColumnDefinition.Text("聯絡人", nameof(Warehouse.ContactPerson)),
            TableColumnDefinition.Text("電話", nameof(Warehouse.Phone)),
            TableColumnDefinition.Boolean("預設倉庫", nameof(Warehouse.IsDefault)),
            TableColumnDefinition.Status("狀態", nameof(Warehouse.Status), new Dictionary<object, string>
            {
                { EntityStatus.Active, "bg-success" },
                { EntityStatus.Inactive, "bg-secondary" }
            }),
            TableColumnDefinition.Date("建立日期", nameof(Warehouse.CreatedAt), "yyyy/MM/dd")
        };
    }

    // 資料載入委派
    private async Task<List<Warehouse>> LoadDataAsync()
    {
        return await WarehouseService.GetAllAsync();
    }

    // 篩選邏輯委派
    private IQueryable<Warehouse> ApplyWarehouseFilters(SearchFilterModel searchModel, IQueryable<Warehouse> query)
    {
        // 倉庫代碼篩選
        var warehouseCodeFilter = searchModel.GetFilterValue("WarehouseCode")?.ToString();
        if (!string.IsNullOrWhiteSpace(warehouseCodeFilter))
        {
            query = query.Where(w => w.WarehouseCode.Contains(warehouseCodeFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 倉庫名稱篩選
        var warehouseNameFilter = searchModel.GetFilterValue("WarehouseName")?.ToString();
        if (!string.IsNullOrWhiteSpace(warehouseNameFilter))
        {
            query = query.Where(w => w.WarehouseName.Contains(warehouseNameFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 倉庫類型篩選
        var warehouseTypeFilter = searchModel.GetFilterValue("WarehouseType")?.ToString();
        if (!string.IsNullOrWhiteSpace(warehouseTypeFilter) && Enum.TryParse<WarehouseTypeEnum>(warehouseTypeFilter, out var warehouseType))
        {
            query = query.Where(w => w.WarehouseType == warehouseType);
        }

        // 狀態篩選
        var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
        if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
        {
            query = query.Where(w => w.Status == status);
        }

        // 聯絡人篩選
        var contactPersonFilter = searchModel.GetFilterValue("ContactPerson")?.ToString();
        if (!string.IsNullOrWhiteSpace(contactPersonFilter))
        {
            query = query.Where(w => 
                !string.IsNullOrEmpty(w.ContactPerson) && 
                w.ContactPerson.Contains(contactPersonFilter, StringComparison.OrdinalIgnoreCase));
        }

        return query.OrderBy(w => w.WarehouseCode);
    }

    // 行點擊事件
    private async Task HandleRowClick(Warehouse warehouse)
    {
        Navigation.NavigateTo($"/inventory/warehouses/detail/{warehouse.Id}");
        await Task.CompletedTask;
    }

    // 自定義操作按鈕範本
    private RenderFragment<Warehouse> ActionButtonsTemplate => warehouse => 
        @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary" @onclick="() => ViewWarehouse(warehouse)" title="檢視">
                <i class="bi bi-eye"></i>
            </button>
            <button class="btn btn-outline-warning" @onclick="() => EditWarehouse(warehouse)" title="編輯">
                <i class="bi bi-pencil"></i>
            </button>
            @if (!warehouse.IsDefault)
            {
                <button class="btn btn-outline-success" @onclick="() => SetDefaultWarehouse(warehouse)" title="設為預設">
                    <i class="bi bi-star"></i>
                </button>
            }
            <button class="btn btn-outline-danger" @onclick="() => DeleteWarehouse(warehouse)" title="刪除">
                <i class="bi bi-trash"></i>
            </button>
        </div>;

    // 操作方法
    private async Task ViewWarehouse(Warehouse warehouse)
    {
        Navigation.NavigateTo($"/inventory/warehouses/detail/{warehouse.Id}");
        await Task.CompletedTask;
    }

    private async Task EditWarehouse(Warehouse warehouse)
    {
        Navigation.NavigateTo($"/inventory/warehouses/edit/{warehouse.Id}");
        await Task.CompletedTask;
    }

    private async Task DeleteWarehouse(Warehouse warehouse)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"確定要刪除倉庫「{warehouse.WarehouseName}」嗎？");
        
        if (confirmed)
        {
            try
            {
                var result = await WarehouseService.DeleteAsync(warehouse.Id);
                if (result.IsSuccess)
                {
                    await indexComponent.Refresh();
                    await JSRuntime.InvokeVoidAsync("alert", "倉庫刪除成功");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除時發生錯誤：{ex.Message}");
            }
        }
    }

    private async Task SetDefaultWarehouse(Warehouse warehouse)
    {
        try
        {
            var result = await WarehouseService.SetDefaultWarehouseAsync(warehouse.Id);
            if (result.IsSuccess)
            {
                await indexComponent.Refresh();
                await JSRuntime.InvokeVoidAsync("alert", $"已設定「{warehouse.WarehouseName}」為預設倉庫");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"設定失敗：{result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"設定時發生錯誤：{ex.Message}");
        }
    }
}