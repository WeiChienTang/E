@page "/inventoryoverview"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Services.Inventory
@using ERPCore2.Helpers
@using ERPCore2.Components.Shared.Forms
@using ERPCore2.Components.Shared.Tables
@using Microsoft.AspNetCore.Components.Web
@inject IInventoryStockService InventoryStockService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>庫存查詢總覽</PageTitle>

<GenericHeaderComponent 
    Title="庫存查詢總覽" 
    Subtitle="即時查看所有商品的庫存狀況與警戒提醒"
    HeadingLevel="h1"
    BreadcrumbItems="@breadcrumbItems"
    ShowDivider="true"
    ActionButtons="@actionButtons" />

<div class="container-fluid">
    <!-- 統計卡片 -->
    <InventoryStatisticsCards Statistics="statistics" 
                            OnLowStockClick="ShowLowStockOnly" 
                            OnZeroStockClick="ShowZeroStockOnly" />

    <!-- 篩選區 -->
    <GenericSearchFilterComponent TModel="SearchFilterModel"
                                FilterDefinitions="@filterDefinitions"
                                FilterModel="@searchModel"
                                OnSearch="@HandleSearch"
                                OnFilterChanged="@HandleFilterChanged"
                                AutoSearch="true"
                                ShowSearchButton="false" />

    <!-- 庫存清單 -->
    <div class="card shadow">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">庫存清單</h6>
            <span class="badge bg-primary">共 @filteredInventoryStocks.Count 筆資料</span>
        </div>
        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">載入中...</span>
                    </div>
                    <p class="mt-2 text-muted">載入庫存資料中...</p>
                </div>
            }
            else
            {
                <GenericTableComponent TItem="InventoryStock"
                                     Items="@pagedInventoryStocks"
                                     ColumnDefinitions="@columnDefinitions"
                                     EmptyMessage="沒有找到符合條件的庫存資料"
                                     ShowHeader="true"
                                     IsStriped="true"
                                     IsHoverable="true"
                                     GetRowCssClass="@GetRowCssClass"
                                     EnablePagination="true"
                                     CurrentPage="@currentPage"
                                     PageSize="@pageSize"
                                     TotalItems="@filteredInventoryStocks.Count"
                                     OnPageChanged="@OnPageChanged"
                                     OnPageSizeChanged="@OnPageSizeChanged"
                                     ShowPageSizeSelector="true"
                                     PageSizeOptions="@pageSizeOptions" />
            }
        </div>
    </div>
</div>

@code {
    // 資料相關
    private List<InventoryStock> inventoryStocks = new();
    private List<InventoryStock> filteredInventoryStocks = new();
    private List<InventoryStock> pagedInventoryStocks = new();
    private Dictionary<string, object> statistics = new();
    
    // 選項清單
    private List<Warehouse> warehouses = new();
    private List<ProductCategory> productCategories = new();
    private List<WarehouseLocation> warehouseLocations = new();
    private List<WarehouseLocation> filteredLocations = new();
    
    // 篩選相關 - 使用通用篩選組件
    private SearchFilterModel searchModel = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    
    // 表格相關
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<int> pageSizeOptions = new() { 10, 20, 50, 100 };
    
    // 分頁相關
    private int currentPage = 1;
    private int pageSize = 20;
    
    // 狀態
    private bool isLoading = true;
    
    // GenericHeaderComponent 相關
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("庫存管理"),
        new("庫存查詢總覽")
    };
    
    private RenderFragment actionButtons => __builder =>
    {
        <div class="btn-toolbar" role="toolbar">
            <div class="btn-group me-2" role="group">
                <button type="button" class="btn btn-outline-success" @onclick="ExportToExcel">
                    <i class="fas fa-file-excel me-1"></i>匯出Excel
                </button>
                <button type="button" class="btn btn-outline-primary" @onclick="RefreshData">
                    <i class="fas fa-sync-alt me-1"></i>重新整理
                </button>
            </div>
        </div>
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 依序載入，避免並發問題
            await LoadBasicDataAsync();
            InitializeFilters();
            InitializeColumns();
            await LoadInventoryDataAsync();
            await LoadStatisticsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                "庫存總覽頁面初始化", 
                GetType(), 
                Navigation
            );
        }
        finally
        {
            isLoading = false;
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備倉庫選項
            var warehouseOptions = warehouses.Select(w => new SelectOption
            {
                Text = w.WarehouseName,
                Value = w.Id.ToString()
            }).ToList();

            // 準備商品分類選項
            var categoryOptions = productCategories.Select(c => new SelectOption
            {
                Text = c.CategoryName,
                Value = c.Id.ToString()
            }).ToList();

            // 準備庫存狀態選項
            var stockStatusOptions = new List<SelectOption>
            {
                new() { Text = "正常庫存", Value = "normal" },
                new() { Text = "低庫存", Value = "low" },
                new() { Text = "零庫存", Value = "zero" }
            };

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddSelect("WarehouseId", "倉庫", warehouseOptions)
                .AddSelect("CategoryId", "商品分類", categoryOptions)
                .AddSelect("StockStatus", "庫存狀態", stockStatusOptions)
                .AddText("SearchTerm", "搜尋", "輸入商品代碼或名稱...")
                .Build();

            // 設定容器 CSS 類別
            if (filterDefinitions.Count >= 4)
            {
                filterDefinitions[0].ContainerCssClass = "col-md-3";
                filterDefinitions[1].ContainerCssClass = "col-md-3";
                filterDefinitions[2].ContainerCssClass = "col-md-3";
                filterDefinitions[3].ContainerCssClass = "col-md-3";
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    private void HandleSearch(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        currentPage = 1; // 重設為第一頁
        ApplyFilters();
        StateHasChanged();
    }

    private void HandleFilterChanged(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        currentPage = 1; // 重設為第一頁
        ApplyFilters();
        StateHasChanged();
    }

    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 依序載入基礎資料，避免 DbContext 衝突
            warehouses = await WarehouseService.GetAllAsync();
            productCategories = await ProductService.GetProductCategoriesAsync();
            warehouseLocations = await WarehouseLocationService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadBasicDataAsync),
                GetType(),
                Navigation
            );
        }
    }

    private async Task LoadInventoryDataAsync()
    {
        // 取得篩選值
        var selectedWarehouseId = GetSelectedId("WarehouseId");
        var selectedCategoryId = GetSelectedId("CategoryId");
        
        inventoryStocks = await InventoryStockService.GetInventoryOverviewAsync(
            selectedWarehouseId, 
            selectedCategoryId, 
            null // 暫時不支援庫位篩選
        );
        ApplyFilters();
    }

    private int? GetSelectedId(string filterName)
    {
        var value = searchModel.GetFilterValue(filterName)?.ToString();
        return int.TryParse(value, out var id) ? id : null;
    }

    private void ApplyFilters()
    {
        filteredInventoryStocks = inventoryStocks.ToList();

        // 搜尋篩選
        var searchTerm = searchModel.GetFilterValue("SearchTerm")?.ToString();
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.Trim().ToLower();
            filteredInventoryStocks = filteredInventoryStocks.Where(i =>
                i.Product.ProductCode.ToLower().Contains(term) ||
                i.Product.ProductName.ToLower().Contains(term)
            ).ToList();
        }

        // 庫存狀態篩選
        var stockStatusFilter = searchModel.GetFilterValue("StockStatus")?.ToString();
        switch (stockStatusFilter)
        {
            case "low":
                filteredInventoryStocks = filteredInventoryStocks.Where(i =>
                    i.MinStockLevel.HasValue && i.CurrentStock <= i.MinStockLevel.Value && i.CurrentStock > 0
                ).ToList();
                break;
            case "zero":
                filteredInventoryStocks = filteredInventoryStocks.Where(i => i.CurrentStock == 0).ToList();
                break;
            case "normal":
                filteredInventoryStocks = filteredInventoryStocks.Where(i =>
                    !i.MinStockLevel.HasValue || i.CurrentStock > i.MinStockLevel.Value
                ).ToList();
                break;
        }

        UpdatePagination();
    }

    private void UpdatePagination()
    {
        // 確保當前頁面在有效範圍內
        var totalPages = (int)Math.Ceiling((double)filteredInventoryStocks.Count / pageSize);
        if (totalPages == 0) totalPages = 1; // 避免除零錯誤
        currentPage = Math.Min(currentPage, Math.Max(1, totalPages));
        
        // 計算當前頁面要顯示的資料
        pagedInventoryStocks = filteredInventoryStocks
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task OnFilterChanged()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            // 更新庫位選項
            var selectedWarehouseId = GetSelectedId("WarehouseId");
            if (selectedWarehouseId.HasValue)
            {
                filteredLocations = warehouseLocations.Where(l => l.WarehouseId == selectedWarehouseId.Value).ToList();
            }
            else
            {
                filteredLocations = warehouseLocations;
                searchModel.SetFilterValue("LocationId", "");
            }

            await LoadInventoryDataAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            HandleFilterChanged(searchModel);
        }
    }

    private void ShowLowStockOnly()
    {
        searchModel.SetFilterValue("StockStatus", "low");
        currentPage = 1; // 重設為第一頁
        HandleFilterChanged(searchModel);
    }

    private void ShowZeroStockOnly()
    {
        searchModel.SetFilterValue("StockStatus", "zero");
        currentPage = 1; // 重設為第一頁
        HandleFilterChanged(searchModel);
    }

    private void ClearFilters()
    {
        searchModel = new SearchFilterModel();
        currentPage = 1;
        
        HandleFilterChanged(searchModel);
    }

    private async Task RefreshData()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            await LoadInventoryDataAsync();
            await LoadStatisticsAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            // 這裡可以實作 Excel 匯出功能
            await JSRuntime.InvokeVoidAsync("alert", "Excel 匯出功能開發中...");
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                "匯出Excel", 
                GetType(), 
                Navigation
            );
        }
    }

    private async Task LoadStatisticsAsync()
    {
        statistics = await InventoryStockService.GetInventoryStatisticsAsync();
    }

    private void InitializeColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            // 商品代碼
            new TableColumnDefinition
            {
                Title = "商品代碼",
                PropertyName = "Product.ProductCode",
                DataType = ColumnDataType.Html,
                HeaderStyle = "width: 120px;",
                CustomTemplate = item => builder =>
                {
                    var inventoryStock = (InventoryStock)item;
                    builder.OpenElement(0, "code");
                    builder.AddContent(1, inventoryStock.Product.ProductCode);
                    builder.CloseElement();
                }
            },

            // 商品名稱
            new TableColumnDefinition
            {
                Title = "商品名稱",
                PropertyName = "Product.ProductName",
                DataType = ColumnDataType.Html,
                CustomTemplate = item => builder =>
                {
                    var inventoryStock = (InventoryStock)item;
                    builder.OpenElement(0, "div");
                    
                    builder.OpenElement(1, "strong");
                    builder.AddContent(2, inventoryStock.Product.ProductName);
                    builder.CloseElement();
                    
                    if (!string.IsNullOrEmpty(inventoryStock.Product.Description))
                    {
                        builder.OpenElement(3, "br");
                        builder.CloseElement();
                        builder.OpenElement(4, "small");
                        builder.AddAttribute(5, "class", "text-muted");
                        builder.AddContent(6, inventoryStock.Product.Description);
                        builder.CloseElement();
                    }
                    
                    builder.CloseElement();
                }
            },

            // 分類
            new TableColumnDefinition
            {
                Title = "分類",
                PropertyName = "Product.ProductCategory.CategoryName",
                DataType = ColumnDataType.Text,
                HeaderStyle = "width: 100px;",
                NullDisplayText = "-"
            },

            // 單位
            new TableColumnDefinition
            {
                Title = "單位",
                PropertyName = "Product.Unit.UnitName",
                DataType = ColumnDataType.Text,
                HeaderStyle = "width: 80px;",
                NullDisplayText = "-"
            },

            // 倉庫
            new TableColumnDefinition
            {
                Title = "倉庫",
                PropertyName = "Warehouse.WarehouseName",
                DataType = ColumnDataType.Html,
                HeaderStyle = "width: 120px;",
                CustomTemplate = item => builder =>
                {
                    var inventoryStock = (InventoryStock)item;
                    builder.OpenElement(0, "span");
                    builder.AddAttribute(1, "class", "badge bg-info");
                    builder.AddContent(2, inventoryStock.Warehouse.WarehouseName);
                    builder.CloseElement();
                }
            },

            // 庫位
            new TableColumnDefinition
            {
                Title = "庫位",
                PropertyName = "WarehouseLocation.LocationCode",
                DataType = ColumnDataType.Html,
                HeaderStyle = "width: 100px;",
                CustomTemplate = item => builder =>
                {
                    var inventoryStock = (InventoryStock)item;
                    if (inventoryStock.WarehouseLocation != null)
                    {
                        builder.OpenElement(0, "span");
                        builder.AddAttribute(1, "class", "badge bg-secondary");
                        builder.AddContent(2, inventoryStock.WarehouseLocation.LocationCode);
                        builder.CloseElement();
                    }
                    else
                    {
                        builder.OpenElement(0, "span");
                        builder.AddAttribute(1, "class", "text-muted");
                        builder.AddContent(2, "-");
                        builder.CloseElement();
                    }
                }
            },

            // 現有庫存
            new TableColumnDefinition
            {
                Title = "現有庫存",
                PropertyName = "CurrentStock",
                DataType = ColumnDataType.Html,
                HeaderStyle = "width: 80px;",
                HeaderCssClass = "text-end",
                CellCssClass = "text-end",
                CustomTemplate = item => builder =>
                {
                    var inventoryStock = (InventoryStock)item;
                    var isZeroStock = inventoryStock.CurrentStock == 0;
                    var isLowStock = inventoryStock.MinStockLevel.HasValue && inventoryStock.CurrentStock <= inventoryStock.MinStockLevel.Value;
                    var cssClass = isZeroStock ? "text-danger" : isLowStock ? "text-warning" : "text-success";
                    
                    builder.OpenElement(0, "strong");
                    builder.AddAttribute(1, "class", cssClass);
                    builder.AddContent(2, inventoryStock.CurrentStock.ToString("N0"));
                    builder.CloseElement();
                }
            },

            // 預留庫存
            new TableColumnDefinition
            {
                Title = "預留庫存",
                PropertyName = "ReservedStock",
                DataType = ColumnDataType.Number,
                Format = "N0",
                HeaderStyle = "width: 80px;",
                HeaderCssClass = "text-end",
                CellCssClass = "text-end"
            },

            // 可用庫存
            new TableColumnDefinition
            {
                Title = "可用庫存",
                PropertyName = "AvailableStock",
                DataType = ColumnDataType.Html,
                HeaderStyle = "width: 80px;",
                HeaderCssClass = "text-end",
                CellCssClass = "text-end",
                CustomTemplate = item => builder =>
                {
                    var inventoryStock = (InventoryStock)item;
                    builder.OpenElement(0, "strong");
                    builder.AddContent(1, inventoryStock.AvailableStock.ToString("N0"));
                    builder.CloseElement();
                }
            },

            // 警戒線
            new TableColumnDefinition
            {
                Title = "警戒線",
                PropertyName = "MinStockLevel",
                DataType = ColumnDataType.Number,
                Format = "N0",
                HeaderStyle = "width: 80px;",
                HeaderCssClass = "text-end",
                CellCssClass = "text-end",
                NullDisplayText = "-"
            },

            // 狀態
            new TableColumnDefinition
            {
                Title = "狀態",
                PropertyName = "CurrentStock", // 用於狀態判斷
                DataType = ColumnDataType.Html,
                HeaderStyle = "width: 100px;",
                HeaderCssClass = "text-center",
                CellCssClass = "text-center",
                CustomTemplate = item => builder =>
                {
                    var inventoryStock = (InventoryStock)item;
                    var isZeroStock = inventoryStock.CurrentStock == 0;
                    var isLowStock = inventoryStock.MinStockLevel.HasValue && inventoryStock.CurrentStock <= inventoryStock.MinStockLevel.Value;
                    
                    builder.OpenElement(0, "span");
                    if (isZeroStock)
                    {
                        builder.AddAttribute(1, "class", "badge bg-danger");
                        builder.AddContent(2, "零庫存");
                    }
                    else if (isLowStock)
                    {
                        builder.AddAttribute(1, "class", "badge bg-warning");
                        builder.AddContent(2, "低庫存");
                    }
                    else
                    {
                        builder.AddAttribute(1, "class", "badge bg-success");
                        builder.AddContent(2, "正常");
                    }
                    builder.CloseElement();
                }
            },

            // 平均成本
            new TableColumnDefinition
            {
                Title = "平均成本",
                PropertyName = "AverageCost",
                DataType = ColumnDataType.Html,
                HeaderStyle = "width: 120px;",
                HeaderCssClass = "text-end",
                CellCssClass = "text-end",
                CustomTemplate = item => builder =>
                {
                    var inventoryStock = (InventoryStock)item;
                    builder.OpenElement(0, "span");
                    if (inventoryStock.AverageCost.HasValue)
                    {
                        builder.AddContent(1, $"${inventoryStock.AverageCost.Value:N2}");
                    }
                    else
                    {
                        builder.AddAttribute(1, "class", "text-muted");
                        builder.AddContent(2, "-");
                    }
                    builder.CloseElement();
                }
            },

            // 最後異動
            new TableColumnDefinition
            {
                Title = "最後異動",
                PropertyName = "LastTransactionDate",
                DataType = ColumnDataType.Date,
                Format = "yyyy/MM/dd",
                HeaderStyle = "width: 120px;",
                NullDisplayText = "-"
            }
        };
    }

    // 取得列的 CSS 類別
    private string GetRowCssClass(InventoryStock item)
    {
        var isZeroStock = item.CurrentStock == 0;
        var isLowStock = item.MinStockLevel.HasValue && item.CurrentStock <= item.MinStockLevel.Value;
        
        if (isZeroStock) return "table-danger";
        if (isLowStock) return "table-warning";
        return "";
    }

    // 分頁事件處理
    private Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        UpdatePagination();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnPageSizeChanged(int newPageSize)
    {
        pageSize = newPageSize;
        currentPage = 1; // 重設為第一頁
        UpdatePagination();
        StateHasChanged();
        return Task.CompletedTask;
    }
}
