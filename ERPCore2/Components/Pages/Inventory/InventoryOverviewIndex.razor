@page "/inventoryoverview"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Services.Inventory
@using ERPCore2.Helpers
@using ERPCore2.Components.Shared.Forms
@using Microsoft.AspNetCore.Components.Web
@inject IInventoryStockService InventoryStockService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>庫存查詢總覽</PageTitle>

<GenericHeaderComponent 
    Title="庫存查詢總覽" 
    Subtitle="即時查看所有商品的庫存狀況與警戒提醒"
    HeadingLevel="h1"
    BreadcrumbItems="@breadcrumbItems"
    ShowDivider="true"
    ActionButtons="@actionButtons" />

<div class="container-fluid">
    <!-- 統計卡片 -->
    <InventoryStatisticsCards Statistics="statistics" 
                            OnLowStockClick="ShowLowStockOnly" 
                            OnZeroStockClick="ShowZeroStockOnly" />

    <!-- 篩選區 -->
    <GenericSearchFilterComponent TModel="SearchFilterModel"
                                FilterDefinitions="@filterDefinitions"
                                FilterModel="@searchModel"
                                OnSearch="@HandleSearch"
                                OnFilterChanged="@HandleFilterChanged"
                                AutoSearch="true"
                                ShowSearchButton="false" />

    <!-- 庫存清單 -->
    <div class="card shadow">
        <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary">庫存清單</h6>
            <span class="badge bg-primary">共 @filteredInventoryStocks.Count 筆資料</span>
        </div>
        <div class="card-body p-0">
            @if (isLoading)
            {
                <div class="text-center p-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">載入中...</span>
                    </div>
                    <p class="mt-2 text-muted">載入庫存資料中...</p>
                </div>
            }
            else if (!filteredInventoryStocks.Any())
            {
                <div class="text-center p-4">
                    <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                    <p class="text-muted">沒有找到符合條件的庫存資料</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th style="width: 120px;">商品代碼</th>
                                <th>商品名稱</th>
                                <th style="width: 100px;">分類</th>
                                <th style="width: 80px;">單位</th>
                                <th style="width: 120px;">倉庫</th>
                                <th style="width: 100px;">庫位</th>
                                <th style="width: 80px;" class="text-end">現有庫存</th>
                                <th style="width: 80px;" class="text-end">預留庫存</th>
                                <th style="width: 80px;" class="text-end">可用庫存</th>
                                <th style="width: 80px;" class="text-end">警戒線</th>
                                <th style="width: 100px;" class="text-center">狀態</th>
                                <th style="width: 120px;" class="text-end">平均成本</th>
                                <th style="width: 120px;">最後異動</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in pagedInventoryStocks)
                            {
                                var isLowStock = item.MinStockLevel.HasValue && item.CurrentStock <= item.MinStockLevel.Value;
                                var isZeroStock = item.CurrentStock == 0;
                                
                                <tr class="@(isZeroStock ? "table-danger" : isLowStock ? "table-warning" : "")">
                                    <td>
                                        <code>@item.Product.ProductCode</code>
                                    </td>
                                    <td>
                                        <strong>@item.Product.ProductName</strong>
                                        @if (!string.IsNullOrEmpty(item.Product.Description))
                                        {
                                            <br><small class="text-muted">@item.Product.Description</small>
                                        }
                                    </td>
                                    <td>
                                        @(item.Product.ProductCategory?.CategoryName ?? "-")
                                    </td>
                                    <td>
                                        @(item.Product.Unit?.UnitName ?? "-")
                                    </td>
                                    <td>
                                        <span class="badge bg-info">@item.Warehouse.WarehouseName</span>
                                    </td>
                                    <td>
                                        @if (item.WarehouseLocation != null)
                                        {
                                            <span class="badge bg-secondary">@item.WarehouseLocation.LocationCode</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td class="text-end">
                                        <strong class="@(isZeroStock ? "text-danger" : isLowStock ? "text-warning" : "text-success")">
                                            @item.CurrentStock.ToString("N0")
                                        </strong>
                                    </td>
                                    <td class="text-end">
                                        @item.ReservedStock.ToString("N0")
                                    </td>
                                    <td class="text-end">
                                        <strong>@item.AvailableStock.ToString("N0")</strong>
                                    </td>
                                    <td class="text-end">
                                        @(item.MinStockLevel?.ToString("N0") ?? "-")
                                    </td>
                                    <td class="text-center">
                                        @if (isZeroStock)
                                        {
                                            <span class="badge bg-danger">零庫存</span>
                                        }
                                        else if (isLowStock)
                                        {
                                            <span class="badge bg-warning">低庫存</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-success">正常</span>
                                        }
                                    </td>
                                    <td class="text-end">
                                        @if (item.AverageCost.HasValue)
                                        {
                                            <span>$@item.AverageCost.Value.ToString("N2")</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        @if (item.LastTransactionDate.HasValue)
                                        {
                                            <span>@item.LastTransactionDate.Value.ToString("yyyy/MM/dd")</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                <!-- 分頁 -->
                @if (totalPages > 1)
                {
                    <div class="card-footer">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <small class="text-muted">
                                    顯示第 @((currentPage - 1) * pageSize + 1) - @Math.Min(currentPage * pageSize, filteredInventoryStocks.Count) 筆，共 @filteredInventoryStocks.Count 筆
                                </small>
                            </div>
                            <nav>
                                <ul class="pagination pagination-sm mb-0">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                            <i class="fas fa-chevron-left"></i>
                                        </button>
                                    </li>
                                    
                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                    {
                                        var pageNum = i;
                                        <li class="page-item @(currentPage == pageNum ? "active" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(pageNum)">@pageNum</button>
                                        </li>
                                    }
                                    
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                            <i class="fas fa-chevron-right"></i>
                                        </button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    // 資料相關
    private List<InventoryStock> inventoryStocks = new();
    private List<InventoryStock> filteredInventoryStocks = new();
    private List<InventoryStock> pagedInventoryStocks = new();
    private Dictionary<string, object> statistics = new();
    
    // 選項清單
    private List<Warehouse> warehouses = new();
    private List<ProductCategory> productCategories = new();
    private List<WarehouseLocation> warehouseLocations = new();
    private List<WarehouseLocation> filteredLocations = new();
    
    // 篩選相關 - 使用通用篩選組件
    private SearchFilterModel searchModel = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    
    // 分頁相關
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;
    
    // 狀態
    private bool isLoading = true;
    
    // GenericHeaderComponent 相關
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("庫存管理"),
        new("庫存查詢總覽")
    };
    
    private RenderFragment actionButtons => __builder =>
    {
        <div class="btn-toolbar" role="toolbar">
            <div class="btn-group me-2" role="group">
                <button type="button" class="btn btn-outline-success" @onclick="ExportToExcel">
                    <i class="fas fa-file-excel me-1"></i>匯出Excel
                </button>
                <button type="button" class="btn btn-outline-primary" @onclick="RefreshData">
                    <i class="fas fa-sync-alt me-1"></i>重新整理
                </button>
            </div>
        </div>
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadBasicDataAsync();
            InitializeFilters();
            await LoadInventoryDataAsync();
            await LoadStatisticsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                "庫存總覽頁面初始化", 
                GetType(), 
                Navigation
            );
        }
        finally
        {
            isLoading = false;
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備倉庫選項
            var warehouseOptions = warehouses.Select(w => new SelectOption
            {
                Text = w.WarehouseName,
                Value = w.Id.ToString()
            }).ToList();

            // 準備商品分類選項
            var categoryOptions = productCategories.Select(c => new SelectOption
            {
                Text = c.CategoryName,
                Value = c.Id.ToString()
            }).ToList();

            // 準備庫存狀態選項
            var stockStatusOptions = new List<SelectOption>
            {
                new() { Text = "正常庫存", Value = "normal" },
                new() { Text = "低庫存", Value = "low" },
                new() { Text = "零庫存", Value = "zero" }
            };

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddSelect("WarehouseId", "倉庫", warehouseOptions)
                .AddSelect("CategoryId", "商品分類", categoryOptions)
                .AddSelect("StockStatus", "庫存狀態", stockStatusOptions)
                .AddText("SearchTerm", "搜尋", "輸入商品代碼或名稱...")
                .Build();

            // 設定容器 CSS 類別
            if (filterDefinitions.Count >= 4)
            {
                filterDefinitions[0].ContainerCssClass = "col-md-3";
                filterDefinitions[1].ContainerCssClass = "col-md-3";
                filterDefinitions[2].ContainerCssClass = "col-md-3";
                filterDefinitions[3].ContainerCssClass = "col-md-3";
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    private void HandleSearch(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        ApplyFilters();
        StateHasChanged();
    }

    private void HandleFilterChanged(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        ApplyFilters();
        StateHasChanged();
    }

    private async Task LoadBasicDataAsync()
    {
        warehouses = await WarehouseService.GetAllAsync();
        productCategories = await ProductService.GetProductCategoriesAsync();
        warehouseLocations = await WarehouseLocationService.GetAllAsync();
    }

    private async Task LoadInventoryDataAsync()
    {
        // 取得篩選值
        var selectedWarehouseId = GetSelectedId("WarehouseId");
        var selectedCategoryId = GetSelectedId("CategoryId");
        
        inventoryStocks = await InventoryStockService.GetInventoryOverviewAsync(
            selectedWarehouseId, 
            selectedCategoryId, 
            null // 暫時不支援庫位篩選
        );
        ApplyFilters();
    }

    private int? GetSelectedId(string filterName)
    {
        var value = searchModel.GetFilterValue(filterName)?.ToString();
        return int.TryParse(value, out var id) ? id : null;
    }

    private void ApplyFilters()
    {
        filteredInventoryStocks = inventoryStocks.ToList();

        // 搜尋篩選
        var searchTerm = searchModel.GetFilterValue("SearchTerm")?.ToString();
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.Trim().ToLower();
            filteredInventoryStocks = filteredInventoryStocks.Where(i =>
                i.Product.ProductCode.ToLower().Contains(term) ||
                i.Product.ProductName.ToLower().Contains(term)
            ).ToList();
        }

        // 庫存狀態篩選
        var stockStatusFilter = searchModel.GetFilterValue("StockStatus")?.ToString();
        switch (stockStatusFilter)
        {
            case "low":
                filteredInventoryStocks = filteredInventoryStocks.Where(i =>
                    i.MinStockLevel.HasValue && i.CurrentStock <= i.MinStockLevel.Value && i.CurrentStock > 0
                ).ToList();
                break;
            case "zero":
                filteredInventoryStocks = filteredInventoryStocks.Where(i => i.CurrentStock == 0).ToList();
                break;
            case "normal":
                filteredInventoryStocks = filteredInventoryStocks.Where(i =>
                    !i.MinStockLevel.HasValue || i.CurrentStock > i.MinStockLevel.Value
                ).ToList();
                break;
        }

        UpdatePagination();
    }

    private void UpdatePagination()
    {
        totalPages = (int)Math.Ceiling((double)filteredInventoryStocks.Count / pageSize);
        currentPage = Math.Min(currentPage, Math.Max(1, totalPages));
        
        pagedInventoryStocks = filteredInventoryStocks
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task OnFilterChanged()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            // 更新庫位選項
            var selectedWarehouseId = GetSelectedId("WarehouseId");
            if (selectedWarehouseId.HasValue)
            {
                filteredLocations = warehouseLocations.Where(l => l.WarehouseId == selectedWarehouseId.Value).ToList();
            }
            else
            {
                filteredLocations = warehouseLocations;
                searchModel.SetFilterValue("LocationId", "");
            }

            await LoadInventoryDataAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            HandleFilterChanged(searchModel);
        }
    }

    private void ShowLowStockOnly()
    {
        searchModel.SetFilterValue("StockStatus", "low");
        HandleFilterChanged(searchModel);
    }

    private void ShowZeroStockOnly()
    {
        searchModel.SetFilterValue("StockStatus", "zero");
        HandleFilterChanged(searchModel);
    }

    private void ClearFilters()
    {
        searchModel = new SearchFilterModel();
        currentPage = 1;
        
        HandleFilterChanged(searchModel);
    }

    private async Task RefreshData()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            await LoadInventoryDataAsync();
            await LoadStatisticsAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            UpdatePagination();
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            // 這裡可以實作 Excel 匯出功能
            await JSRuntime.InvokeVoidAsync("alert", "Excel 匯出功能開發中...");
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                "匯出Excel", 
                GetType(), 
                Navigation
            );
        }
    }

    private async Task LoadStatisticsAsync()
    {
        statistics = await InventoryStockService.GetInventoryStatisticsAsync();
    }
}
