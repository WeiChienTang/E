@page "/inventoryoverview"
@inject IInventoryStockService InventoryStockService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<PageTitle>庫存查詢總覽</PageTitle>

<GenericIndexPageComponent TEntity="InventoryStock" 
                           TService="IInventoryStockService"
                           PageTitle="庫存查詢總覽"
                           PageSubtitle="即時查看所有商品的庫存狀況與警戒提醒"
                           EntityName="庫存資料"
                           BreadcrumbItems="@breadcrumbItems"
                           Service="@InventoryStockService"
                           DataLoader="@LoadInventoryDataAsync"
                           InitializeBasicData="@LoadBasicDataAsync"
                           FilterDefinitions="@filterDefinitions"
                           ColumnDefinitions="@columnDefinitions"
                           RequiredPermission="Inventory.Overview"
                               FilterApplier="@ApplyCustomFilters"
                               ShowStatisticsCards="true"
                               StatisticsCardConfigs="@statisticsCardConfigs"
                               StatisticsDataLoader="@LoadStatisticsAsync"
                               OnRowClick="@HandleRowClick"
                               ShowDefaultActions="false"
                               CustomActionButtons="@customActionButtons"
                               EnableRowClick="true"
                               ShowActions="false" />

@code {
    // ===== 資料服務和選項清單 =====
    private List<Warehouse> warehouses = new();
    private List<ProductCategory> productCategories = new();
    private List<WarehouseLocation> warehouseLocations = new();
    
    // ===== GenericIndexPageComponent 必要屬性 =====
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<StatisticsCardConfig> statisticsCardConfigs = new();
    
    // ===== 頁面設定 =====
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("庫存管理"),
        new("庫存查詢總覽")
    };
    
    // ===== 自訂動作按鈕 =====
    private RenderFragment customActionButtons => __builder =>
    {
        <div class="btn-toolbar" role="toolbar">
            <div class="btn-group me-2" role="group">
                <button type="button" class="btn btn-outline-success" @onclick="ExportToExcel">
                    <i class="fas fa-file-excel me-1"></i>匯出Excel
                </button>
            </div>
        </div>
    };

    // ===== 生命週期 =====
    protected override Task OnInitializedAsync()
    {
        InitializeStatisticsCards();
        InitializeColumns();
        InitializeFilters(); // 初始化篩選器設定
        return Task.CompletedTask;
    }

    // ===== 資料載入方法 (供 GenericIndexPageComponent 使用) =====
    
    /// <summary>
    /// 載入基礎資料 - 供 GenericIndexPageComponent 的 InitializeBasicData 使用
    /// </summary>
    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 依序載入基礎資料，避免 DbContext 衝突
            warehouses = await WarehouseService.GetAllAsync();
            productCategories = await ProductService.GetProductCategoriesAsync();
            warehouseLocations = await WarehouseLocationService.GetAllAsync();
            
            // 載入完基礎資料後更新篩選器的選項
            UpdateFilterOptions();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadBasicDataAsync),
                GetType(),
                Navigation
            );
        }
    }

    /// <summary>
    /// 載入庫存資料 - 供 GenericIndexPageComponent 的 DataLoader 使用
    /// </summary>
    private async Task<List<InventoryStock>> LoadInventoryDataAsync()
    {
        try
        {
            // 直接取得所有庫存資料，篩選邏輯交給 ApplyCustomFilters
            return await InventoryStockService.GetInventoryOverviewAsync(null, null, null);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadInventoryDataAsync),
                GetType(),
                Navigation
            );
            return new List<InventoryStock>();
        }
    }

    /// <summary>
    /// 載入統計資料 - 供 GenericIndexPageComponent 的 StatisticsDataLoader 使用
    /// </summary>
    private async Task<Dictionary<string, object>> LoadStatisticsAsync()
    {
        try
        {
            return await InventoryStockService.GetInventoryStatisticsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadStatisticsAsync),
                GetType(),
                Navigation
            );
            return new Dictionary<string, object>();
        }
    }

    // ===== 篩選邏輯 =====
    
    /// <summary>
    /// 自訂篩選邏輯 - 供 GenericIndexPageComponent 的 FilterApplier 使用
    /// </summary>
    private IQueryable<InventoryStock> ApplyCustomFilters(SearchFilterModel searchModel, IQueryable<InventoryStock> query)
    {
        try
        {
            // 倉庫篩選
            var warehouseId = GetSelectedId(searchModel, "WarehouseId");
            if (warehouseId.HasValue)
            {
                query = query.Where(i => i.WarehouseId == warehouseId.Value);
            }

            // 商品分類篩選
            var categoryId = GetSelectedId(searchModel, "CategoryId");
            if (categoryId.HasValue)
            {
                query = query.Where(i => i.Product.ProductCategoryId == categoryId.Value);
            }

            // 搜尋篩選
            var searchTerm = searchModel.GetFilterValue("SearchTerm")?.ToString();
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var term = searchTerm.Trim().ToLower();
                query = query.Where(i =>
                    i.Product.ProductCode.ToLower().Contains(term) ||
                    i.Product.ProductName.ToLower().Contains(term)
                );
            }

            // 庫存狀態篩選
            var stockStatusFilter = searchModel.GetFilterValue("StockStatus")?.ToString();
            switch (stockStatusFilter)
            {
                case "low":
                    query = query.Where(i =>
                        i.MinStockLevel.HasValue && 
                        i.CurrentStock <= i.MinStockLevel.Value && 
                        i.CurrentStock > 0
                    );
                    break;
                case "zero":
                    query = query.Where(i => i.CurrentStock == 0);
                    break;
                case "normal":
                    query = query.Where(i =>
                        !i.MinStockLevel.HasValue || 
                        i.CurrentStock > i.MinStockLevel.Value
                    );
                    break;
            }

            return query;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplyCustomFilters),
                GetType(),
                additionalData: "套用自訂篩選失敗"
            );
            return query;
        }
    }

    private int? GetSelectedId(SearchFilterModel searchModel, string filterName)
    {
        try
        {
            var value = searchModel.GetFilterValue(filterName)?.ToString();
            return int.TryParse(value, out var id) ? id : null;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GetSelectedId),
                GetType(),
                additionalData: $"取得篩選ID失敗，篩選名稱：{filterName}"
            );
            return null;
        }
    }

    // ===== 事件處理 =====
    
    /// <summary>
    /// 處理行點擊事件
    /// </summary>
    private Task HandleRowClick(InventoryStock item)
    {
        try
        {
            Navigation.NavigateTo($"/inventory/detail/{item.ProductId}");
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            return ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(HandleRowClick),
                GetType(),
                additionalData: $"跳轉到庫存詳細頁面失敗，商品ID：{item.ProductId}"
            );
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            // 這裡可以實作 Excel 匯出功能
            await JSRuntime.InvokeVoidAsync("alert", "Excel 匯出功能開發中...");
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                "匯出Excel", 
                GetType(), 
                Navigation
            );
        }
    }

    // ===== 初始化方法 =====
    
    private void InitializeStatisticsCards()
    {
        try
        {
            statisticsCardConfigs = new List<StatisticsCardConfig>
            {
                new StatisticsCardConfig
                {
                    DataKey = "TotalItems",
                    Title = "總庫存項目",
                    IconClass = "bi bi-box-seam",
                    BorderColor = "primary",
                    TextColor = "primary"
                },
                new StatisticsCardConfig
                {
                    DataKey = "LowStockItems", 
                    Title = "低庫存警戒",
                    IconClass = "bi bi-exclamation-triangle",
                    BorderColor = "warning",
                    TextColor = "warning"
                },
                new StatisticsCardConfig
                {
                    DataKey = "ZeroStockItems",
                    Title = "零庫存項目", 
                    IconClass = "bi bi-x-circle",
                    BorderColor = "danger",
                    TextColor = "danger"
                },
                new StatisticsCardConfig
                {
                    DataKey = "TotalValue",
                    Title = "總庫存價值",
                    IconClass = "bi bi-currency-dollar",
                    BorderColor = "success",
                    TextColor = "success",
                    IsCurrency = true
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeStatisticsCards),
                GetType(),
                additionalData: "初始化統計卡片失敗"
            );
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備庫存狀態選項（不依賴資料庫載入）
            var stockStatusOptions = new List<SelectOption>
            {
                new() { Text = "正常庫存", Value = "normal" },
                new() { Text = "低庫存", Value = "low" },
                new() { Text = "零庫存", Value = "zero" }
            };

            // 建立基本篩選定義（下拉選單選項稍後在 LoadBasicDataAsync 中更新）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddSelect("WarehouseId", "倉庫", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("CategoryId", "商品分類", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("StockStatus", "庫存狀態", stockStatusOptions)
                .AddText("SearchTerm", "搜尋", "輸入商品代碼或名稱...")
                .Build();

            // 設定容器 CSS 類別
            if (filterDefinitions.Count >= 4)
            {
                filterDefinitions[0].ContainerCssClass = "col-md-3";
                filterDefinitions[1].ContainerCssClass = "col-md-3";
                filterDefinitions[2].ContainerCssClass = "col-md-3";
                filterDefinitions[3].ContainerCssClass = "col-md-3";
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    /// <summary>
    /// 更新篩選器選項 - 在載入基礎資料後呼叫
    /// </summary>
    private void UpdateFilterOptions()
    {
        try
        {
            // 準備倉庫選項
            var warehouseOptions = warehouses.Select(w => new SelectOption
            {
                Text = w.WarehouseName,
                Value = w.Id.ToString()
            }).ToList();

            // 準備商品分類選項
            var categoryOptions = productCategories.Select(c => new SelectOption
            {
                Text = c.CategoryName,
                Value = c.Id.ToString()
            }).ToList();

            // 更新已存在的篩選器選項
            var warehouseFilter = filterDefinitions.FirstOrDefault(f => f.Name == "WarehouseId");
            if (warehouseFilter != null)
            {
                warehouseFilter.Options = warehouseOptions;
            }

            var categoryFilter = filterDefinitions.FirstOrDefault(f => f.Name == "CategoryId");
            if (categoryFilter != null)
            {
                categoryFilter.Options = categoryOptions;
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(UpdateFilterOptions),
                GetType(),
                additionalData: "更新篩選器選項失敗"
            );
        }
    }

    private void InitializeColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                // 商品代碼
                new TableColumnDefinition
                {
                    Title = "商品代碼",
                    PropertyName = "Product.ProductCode",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 120px;",
                    CustomTemplate = item => builder =>
                    {
                        var inventoryStock = (InventoryStock)item;
                        builder.OpenElement(0, "code");
                        builder.AddContent(1, inventoryStock.Product.ProductCode);
                        builder.CloseElement();
                    }
                },

                // 商品名稱
                new TableColumnDefinition
                {
                    Title = "商品名稱",
                    PropertyName = "Product.ProductName",
                    DataType = ColumnDataType.Html,
                    CustomTemplate = item => builder =>
                    {
                        var inventoryStock = (InventoryStock)item;
                        builder.OpenElement(0, "div");
                        
                        builder.OpenElement(1, "strong");
                        builder.AddContent(2, inventoryStock.Product.ProductName);
                        builder.CloseElement();
                        
                        if (!string.IsNullOrEmpty(inventoryStock.Product.Description))
                        {
                            builder.OpenElement(3, "br");
                            builder.CloseElement();
                            builder.OpenElement(4, "small");
                            builder.AddAttribute(5, "class", "text-muted");
                            builder.AddContent(6, inventoryStock.Product.Description);
                            builder.CloseElement();
                        }
                        
                        builder.CloseElement();
                    }
                },

                // 分類
                new TableColumnDefinition
                {
                    Title = "分類",
                    PropertyName = "Product.ProductCategory.CategoryName",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 100px;",
                    NullDisplayText = "-"
                },

                // 單位
                new TableColumnDefinition
                {
                    Title = "單位",
                    PropertyName = "Product.Unit.UnitName",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 80px;",
                    NullDisplayText = "-"
                },

                // 倉庫
                new TableColumnDefinition
                {
                    Title = "倉庫",
                    PropertyName = "Warehouse.WarehouseName",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 120px;",
                    CustomTemplate = item => builder =>
                    {
                        var inventoryStock = (InventoryStock)item;
                        builder.OpenElement(0, "span");
                        builder.AddAttribute(1, "class", "badge bg-info");
                        builder.AddContent(2, inventoryStock.Warehouse.WarehouseName);
                        builder.CloseElement();
                    }
                },

                // 庫位
                new TableColumnDefinition
                {
                    Title = "庫位",
                    PropertyName = "WarehouseLocation.LocationCode",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 100px;",
                    CustomTemplate = item => builder =>
                    {
                        var inventoryStock = (InventoryStock)item;
                        if (inventoryStock.WarehouseLocation != null)
                        {
                            builder.OpenElement(0, "span");
                            builder.AddAttribute(1, "class", "badge bg-secondary");
                            builder.AddContent(2, inventoryStock.WarehouseLocation.LocationCode);
                            builder.CloseElement();
                        }
                        else
                        {
                            builder.OpenElement(0, "span");
                            builder.AddAttribute(1, "class", "text-muted");
                            builder.AddContent(2, "-");
                            builder.CloseElement();
                        }
                    }
                },

                // 現有庫存
                new TableColumnDefinition
                {
                    Title = "現有庫存",
                    PropertyName = "CurrentStock",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 80px;",
                    HeaderCssClass = "text-end",
                    CellCssClass = "text-end",
                    CustomTemplate = item => builder =>
                    {
                        var inventoryStock = (InventoryStock)item;
                        var isZeroStock = inventoryStock.CurrentStock == 0;
                        var isLowStock = inventoryStock.MinStockLevel.HasValue && inventoryStock.CurrentStock <= inventoryStock.MinStockLevel.Value;
                        var cssClass = isZeroStock ? "text-danger" : isLowStock ? "text-warning" : "text-success";
                        
                        builder.OpenElement(0, "strong");
                        builder.AddAttribute(1, "class", cssClass);
                        builder.AddContent(2, inventoryStock.CurrentStock.ToString("N0"));
                        builder.CloseElement();
                    }
                },

                // 預留庫存
                new TableColumnDefinition
                {
                    Title = "預留庫存",
                    PropertyName = "ReservedStock",
                    DataType = ColumnDataType.Number,
                    Format = "N0",
                    HeaderStyle = "width: 80px;",
                    HeaderCssClass = "text-end",
                    CellCssClass = "text-end"
                },

                // 可用庫存
                new TableColumnDefinition
                {
                    Title = "可用庫存",
                    PropertyName = "AvailableStock",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 80px;",
                    HeaderCssClass = "text-end",
                    CellCssClass = "text-end",
                    CustomTemplate = item => builder =>
                    {
                        var inventoryStock = (InventoryStock)item;
                        builder.OpenElement(0, "strong");
                        builder.AddContent(1, inventoryStock.AvailableStock.ToString("N0"));
                        builder.CloseElement();
                    }
                },

                // 警戒線
                new TableColumnDefinition
                {
                    Title = "警戒線",
                    PropertyName = "MinStockLevel",
                    DataType = ColumnDataType.Number,
                    Format = "N0",
                    HeaderStyle = "width: 80px;",
                    HeaderCssClass = "text-end",
                    CellCssClass = "text-end",
                    NullDisplayText = "-"
                },

                // 狀態
                new TableColumnDefinition
                {
                    Title = "狀態",
                    PropertyName = "CurrentStock",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 100px;",
                    HeaderCssClass = "text-center",
                    CellCssClass = "text-center",
                    CustomTemplate = item => builder =>
                    {
                        var inventoryStock = (InventoryStock)item;
                        var isZeroStock = inventoryStock.CurrentStock == 0;
                        var isLowStock = inventoryStock.MinStockLevel.HasValue && inventoryStock.CurrentStock <= inventoryStock.MinStockLevel.Value;
                        
                        builder.OpenElement(0, "span");
                        if (isZeroStock)
                        {
                            builder.AddAttribute(1, "class", "badge bg-danger");
                            builder.AddContent(2, "零庫存");
                        }
                        else if (isLowStock)
                        {
                            builder.AddAttribute(1, "class", "badge bg-warning");
                            builder.AddContent(2, "低庫存");
                        }
                        else
                        {
                            builder.AddAttribute(1, "class", "badge bg-success");
                            builder.AddContent(2, "正常");
                        }
                        builder.CloseElement();
                    }
                },

                // 平均成本
                new TableColumnDefinition
                {
                    Title = "平均成本",
                    PropertyName = "AverageCost",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 120px;",
                    HeaderCssClass = "text-end",
                    CellCssClass = "text-end",
                    CustomTemplate = item => builder =>
                    {
                        var inventoryStock = (InventoryStock)item;
                        builder.OpenElement(0, "span");
                        if (inventoryStock.AverageCost.HasValue)
                        {
                            builder.AddContent(1, $"${inventoryStock.AverageCost.Value:N2}");
                        }
                        else
                        {
                            builder.AddAttribute(1, "class", "text-muted");
                            builder.AddContent(2, "-");
                        }
                        builder.CloseElement();
                    }
                },

                // 最後異動
                new TableColumnDefinition
                {
                    Title = "最後異動",
                    PropertyName = "LastTransactionDate",
                    DataType = ColumnDataType.Date,
                    Format = "yyyy/MM/dd",
                    HeaderStyle = "width: 120px;",
                    NullDisplayText = "-"
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeColumns),
                GetType(),
                additionalData: "初始化欄位定義失敗"
            );
        }
    }
}
