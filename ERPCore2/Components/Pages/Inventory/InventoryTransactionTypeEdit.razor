@page "/inventory-transaction-types/edit"
@page "/inventory-transaction-types/edit/{id:int?}"
@inject IInventoryTransactionTypeService InventoryTransactionTypeService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="InventoryTransactionType" 
                     TService="IInventoryTransactionTypeService"
                     Id="@Id"
                     Entity="@inventoryTransactionType"
                     Service="@InventoryTransactionTypeService"
                     EntityName="庫存異動類型"
                     EntityNamePlural="庫存異動類型"
                     PageTitle="@(Id.HasValue ? "編輯庫存異動類型" : "新增庫存異動類型")"
                     FormTitle="類型資訊"
                     FormSubtitle="庫存異動類型的詳細設定"
                     IndexRoute="/inventory-transaction-types"
                     RequiredPermission="InventoryTransactionType.Read"
                     UseGenericForm="true"
                     FormFields="@formFields"
                     FormSections="@formSections"
                     BreadcrumbItems="@breadcrumbItems"                         
                     DataLoader="@LoadInventoryTransactionTypeData"
                     SaveHandler="@SaveInventoryTransactionType"                         
                     AdditionalDataLoader="@LoadAdditionalData"
                     @ref="editComponent" />

@code {
    [Parameter] public int? Id { get; set; }

    // 組件參考
    private GenericEditPageComponent<InventoryTransactionType, IInventoryTransactionTypeService> editComponent = default!;

    // 主要實體
    private InventoryTransactionType inventoryTransactionType = new();

    // 表單配置
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
            InitializeFormSections();
        }
        catch (Exception ex)
        {
            // 記錄初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(OnInitialized), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionTypeEdit",
                        Action = "Initialize",
                        Id = Id
                    }
                );
            });
            
            // 確保基本初始化完成，避免程式崩潰
            try
            {
                breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
                formFields = new List<FormFieldDefinition>();
                formSections = new Dictionary<string, string>();
            }
            catch
            {
                // 最後的防護，確保不會因為初始化失敗而崩潰
            }
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("庫存管理", "/inventory"),
                new("庫存異動類型", "/inventory-transaction-types"),
                new(Id.HasValue ? "編輯異動類型" : "新增異動類型")
            };
        }
        catch (Exception ex)
        {
            // 記錄麵包屑初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeBreadcrumbs), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionTypeEdit",
                        Action = "InitializeBreadcrumbs",
                        Id = Id
                    }
                );
            });
            
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(InventoryTransactionType.Code),
                    Label = "類型代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入類型代碼",
                    IsRequired = true,
                },
                new()
                {
                    PropertyName = nameof(InventoryTransactionType.TypeName),
                    Label = "類型名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入類型名稱",
                    IsRequired = true,
                },
                new()
                {
                    PropertyName = nameof(InventoryTransactionType.TransactionType),
                    Label = "異動類型",
                    FieldType = FormFieldType.Select,
                    Options = GetTransactionTypeOptions(),
                    IsRequired = true,
                },
                new()
                {
                    PropertyName = nameof(InventoryTransactionType.AffectsCost),
                    Label = "影響成本",
                    FieldType = FormFieldType.Checkbox,
                    IsRequired = false,
                },
                new()
                {
                    PropertyName = nameof(InventoryTransactionType.RequiresApproval),
                    Label = "需要審核",
                    FieldType = FormFieldType.Checkbox,
                    IsRequired = false,
                },
                new()
                {
                    PropertyName = nameof(InventoryTransactionType.AutoGenerateNumber),
                    Label = "自動產生單號",
                    FieldType = FormFieldType.Checkbox,
                    IsRequired = false,
                },
                new()
                {
                    PropertyName = nameof(InventoryTransactionType.NumberPrefix),
                    Label = "單號前綴",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入單號前綴",
                    IsRequired = false,
                },
                new()
                {
                    PropertyName = nameof(InventoryTransactionType.IsActive),
                    Label = "啟用狀態",
                    FieldType = FormFieldType.Checkbox,
                    IsRequired = false,
                }
            };
        }
        catch (Exception ex)
        {
            // 記錄表單欄位初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeFormFields), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionTypeEdit",
                        Action = "InitializeFormFields",
                        Id = Id
                    }
                );
            });
            
            // 設定安全的預設值
            formFields = new List<FormFieldDefinition>();
        }
    }

    private void InitializeFormSections()
    {
        try
        {
            formSections = new Dictionary<string, string>
            {
                { nameof(InventoryTransactionType.Code), "基本資訊" },
                { nameof(InventoryTransactionType.TypeName), "基本資訊" },
                { nameof(InventoryTransactionType.TransactionType), "基本資訊" },
                { nameof(InventoryTransactionType.AffectsCost), "進階設定" },
                { nameof(InventoryTransactionType.RequiresApproval), "進階設定" },
                { nameof(InventoryTransactionType.AutoGenerateNumber), "單號設定" },
                { nameof(InventoryTransactionType.NumberPrefix), "單號設定" },
                { nameof(InventoryTransactionType.IsActive), "狀態設定" }
            };
        }
        catch (Exception ex)
        {
            // 記錄表單區段初始化錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(InitializeFormSections), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionTypeEdit",
                        Action = "InitializeFormSections",
                        Id = Id
                    }
                );
            });
            
            // 設定安全的預設值
            formSections = new Dictionary<string, string>();
        }
    }

    private async Task<InventoryTransactionType> LoadInventoryTransactionTypeData()
    {
        try
        {
            if (Id.HasValue)
            {
                var result = await InventoryTransactionTypeService.GetByIdAsync(Id.Value);
                if (result != null)
                {
                    inventoryTransactionType = result;
                }
                else
                {
                    // 如果找不到記錄，創建新的實體
                    inventoryTransactionType = new InventoryTransactionType
                    {
                        IsActive = true,
                        TransactionType = InventoryTransactionTypeEnum.OpeningBalance
                    };
                }
            }
            else
            {
                inventoryTransactionType = new InventoryTransactionType
                {
                    IsActive = true,
                    TransactionType = InventoryTransactionTypeEnum.OpeningBalance
                };
            }

            return inventoryTransactionType;
        }
        catch (Exception ex)
        {
            // 記錄資料載入錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(LoadInventoryTransactionTypeData), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionTypeEdit",
                        Action = "LoadInventoryTransactionTypeData",
                        Id = Id
                    }
                );
            });

            // 回傳安全的預設值
            return new InventoryTransactionType
            {
                IsActive = true,
                TransactionType = InventoryTransactionTypeEnum.OpeningBalance
            };
        }
    }

    private async Task LoadAdditionalData()
    {
        try
        {
            // 更新表單欄位選項
            await UpdateFormFieldOptions();
        }
        catch (Exception ex)
        {
            // 記錄額外資料載入錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(LoadAdditionalData), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionTypeEdit",
                        Action = "LoadAdditionalData",
                        Id = Id
                    }
                );
            });
        }
    }

    private Task UpdateFormFieldOptions()
    {
        try
        {
            // 更新異動類型選項
            var transactionTypeOptions = GetTransactionTypeOptions();

            // 尋找並更新對應的表單欄位
            var transactionTypeField = formFields.FirstOrDefault(f => f.PropertyName == nameof(InventoryTransactionType.TransactionType));
            if (transactionTypeField != null)
            {
                transactionTypeField.Options = transactionTypeOptions;
            }

            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            // 記錄表單選項更新錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(UpdateFormFieldOptions), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionTypeEdit",
                        Action = "UpdateFormFieldOptions",
                        Id = Id
                    }
                );
            });

            return Task.CompletedTask;
        }
    }

    private async Task<bool> SaveInventoryTransactionType(InventoryTransactionType entity)
    {
        try
        {
            ServiceResult result;
            
            if (Id.HasValue)
            {
                result = await InventoryTransactionTypeService.UpdateAsync(entity);
            }
            else
            {
                result = await InventoryTransactionTypeService.CreateAsync(entity);
            }

            if (result.IsSuccess)
            {
                await NotificationService.ShowSuccessAsync(
                    Id.HasValue ? "庫存異動類型更新成功！" : "庫存異動類型新增成功！"
                );
            }

            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            // 記錄儲存錯誤
            _ = Task.Run(async () =>
            {
                await ErrorHandlingHelper.HandlePageErrorAsync(
                    ex, 
                    nameof(SaveInventoryTransactionType), 
                    GetType(),
                    additionalData: new { 
                        PageName = "InventoryTransactionTypeEdit",
                        Action = "SaveInventoryTransactionType",
                        Id = Id,
                        EntityId = entity.Id
                    }
                );
            });

            await NotificationService.ShowErrorAsync(
                Id.HasValue ? "庫存異動類型更新失敗，請重試！" : "庫存異動類型新增失敗，請重試！"
            );

            return false;
        }
    }

    private List<SelectOption> GetTransactionTypeOptions()
    {
        var options = new List<SelectOption>();

        foreach (InventoryTransactionTypeEnum type in Enum.GetValues<InventoryTransactionTypeEnum>())
        {
            options.Add(new SelectOption 
            { 
                Value = ((int)type).ToString(), 
                Text = GetTransactionTypeDisplayName(type) 
            });
        }

        return options;
    }

    private string GetTransactionTypeDisplayName(InventoryTransactionTypeEnum transactionType)
    {
        return transactionType switch
        {
            InventoryTransactionTypeEnum.OpeningBalance => "期初庫存",
            InventoryTransactionTypeEnum.Purchase => "進貨",
            InventoryTransactionTypeEnum.Sale => "銷貨",
            InventoryTransactionTypeEnum.Return => "退貨",
            InventoryTransactionTypeEnum.Adjustment => "調整",
            InventoryTransactionTypeEnum.Transfer => "轉倉",
            InventoryTransactionTypeEnum.StockTaking => "盤點",
            InventoryTransactionTypeEnum.ProductionConsumption => "生產投料",
            InventoryTransactionTypeEnum.ProductionCompletion => "生產完工",
            InventoryTransactionTypeEnum.Scrap => "報廢",
            _ => transactionType.ToString()
        };
    }
}
