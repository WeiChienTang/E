@page "/inventory/transactions"

@inject IInventoryTransactionService InventoryTransactionService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PagePermissionCheck RequiredPermission="Inventory.TransactionHistory">
    <PageTitle>庫存異動歷史</PageTitle>

    <GenericHeaderComponent 
        Title="庫存異動歷史" 
        Subtitle="追蹤所有庫存異動記錄，滿足稽核需求"
        HeadingLevel="h1"
        BreadcrumbItems="@breadcrumbItems"
        ShowDivider="true"
        ActionButtons="@actionButtons" />

    <div class="container-fluid">
        <!-- 統計資訊卡片 -->
        <div class="row mb-4">
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-primary shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    今日異動次數
                                </div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@todayTransactionCount</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-exchange-alt fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-success shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                    本月異動次數
                                </div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@monthlyTransactionCount</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-calendar-alt fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-info shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                    進貨筆數 (本月)
                                </div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@monthlyInboundCount</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-arrow-up fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-warning shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                    出貨筆數 (本月)
                                </div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">@monthlyOutboundCount</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-arrow-down fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 篩選區 -->
        <GenericSearchFilterComponent TModel="SearchFilterModel"
                                    FilterDefinitions="@filterDefinitions"
                                    FilterModel="@searchModel"
                                    OnSearch="@HandleSearch"
                                    OnFilterChanged="@HandleFilterChanged"
                                    AutoSearch="true"
                                    ShowSearchButton="false" />

        <!-- 庫存異動列表 -->
        <div class="card shadow mt-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">庫存異動記錄</h6>
                <div class="d-flex align-items-center">
                    <span class="badge bg-primary me-3">共 @filteredItems.Count 筆資料</span>
                    @if (filteredItems.Any())
                    {
                        <button class="btn btn-success btn-sm" @onclick="ExportToExcel" disabled="@isExporting">
                            <i class="fas fa-file-excel me-1"></i>
                            @(isExporting ? "匯出中..." : "匯出 Excel")
                        </button>
                    }
                </div>
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">載入中...</span>
                        </div>
                        <p class="mt-2">載入庫存異動記錄中...</p>
                    </div>
                }
                else
                {
                    <GenericTableComponent TItem="InventoryTransaction"
                                         Items="@pagedItems"
                                         ColumnDefinitions="@columnDefinitions"
                                         ShowActions="true"
                                         ActionsTemplate="@GetActionsTemplate"
                                         EnableRowClick="true"
                                         OnRowClick="@HandleRowClick"
                                         EmptyMessage="目前沒有符合條件的庫存異動記錄"
                                         IsStriped="true"
                                         IsHoverable="true"
                                         IsBordered="true">
                    </GenericTableComponent>

                    <!-- 分頁控制項 -->
                    @if (totalItems > pageSize)
                    {
                        <nav aria-label="頁面導航" class="mt-3">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)">
                                        <i class="fas fa-angle-double-left"></i>
                                    </button>
                                </li>
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                        <i class="fas fa-angle-left"></i>
                                    </button>
                                </li>

                                @for (int page = Math.Max(1, currentPage - 2); page <= Math.Min(totalPages, currentPage + 2); page++)
                                {
                                    var pageNumber = page;
                                    <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(pageNumber)">
                                            @pageNumber
                                        </button>
                                    </li>
                                }

                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                        <i class="fas fa-angle-right"></i>
                                    </button>
                                </li>
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(totalPages)" disabled="@(currentPage == totalPages)">
                                        <i class="fas fa-angle-double-right"></i>
                                    </button>
                                </li>
                            </ul>

                            <div class="d-flex justify-content-between align-items-center mt-2">
                                <small class="text-muted">
                                    顯示第 @((currentPage - 1) * pageSize + 1) 到 @Math.Min(currentPage * pageSize, totalItems) 筆，共 @totalItems 筆記錄
                                </small>
                                <div class="d-flex align-items-center">
                                    <label class="me-2">每頁顯示：</label>
                                    <select class="form-select form-select-sm" style="width: auto;" @onchange="ChangePageSize">
                                        <option value="20" selected="@(pageSize == 20)">20</option>
                                        <option value="50" selected="@(pageSize == 50)">50</option>
                                        <option value="100" selected="@(pageSize == 100)">100</option>
                                        <option value="200" selected="@(pageSize == 200)">200</option>
                                    </select>
                                </div>
                            </div>
                        </nav>
                    }
                }
            </div>
        </div>
    </div>
</PagePermissionCheck>

@code {
    // 資料清單
    private List<InventoryTransaction> items = new();
    private List<InventoryTransaction> filteredItems = new();
    private List<InventoryTransaction> pagedItems = new();

    // 選項清單
    private List<Product> products = new();
    private List<Warehouse> warehouses = new();
    private List<WarehouseLocation> warehouseLocations = new();

    // 篩選相關
    private SearchFilterModel searchModel = new();
    private List<SearchFilterDefinition> filterDefinitions = new();

    // 表格相關
    private List<TableColumnDefinition> columnDefinitions = new();

    // 分頁相關
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalItems = 0;
    private int totalPages => (int)Math.Ceiling((double)totalItems / pageSize);

    // 統計數據
    private int todayTransactionCount = 0;
    private int monthlyTransactionCount = 0;
    private int monthlyInboundCount = 0;
    private int monthlyOutboundCount = 0;

    // 狀態管理
    private bool isLoading = true;
    private bool isExporting = false;

    // UI 相關
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private RenderFragment? actionButtons;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeActionButtons();
            await LoadOptionsAsync();
            InitializeFilters();
            InitializeTableColumns();
            await LoadDataAsync();
            await LoadStatisticsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType(),
                additionalData: new { PageName = "InventoryTransactionsIndex" });
        }
        finally
        {
            isLoading = false;
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("庫存管理", "#"),
                new("庫存異動歷史")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化麵包屑失敗");
        }
    }

    private void InitializeActionButtons()
    {
        try
        {
            actionButtons = @<div class="d-flex gap-2">
                <button class="btn btn-outline-primary" @onclick="RefreshData">
                    <i class="fas fa-sync-alt me-1"></i>重新整理
                </button>
                <button class="btn btn-outline-secondary" @onclick="ClearFilters">
                    <i class="fas fa-eraser me-1"></i>清除篩選
                </button>
            </div>;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeActionButtons),
                GetType(),
                additionalData: "初始化動作按鈕失敗");
        }
    }

    private async Task LoadOptionsAsync()
    {
        try
        {
            // 並行載入選項資料
            var loadProductsTask = ProductService.GetActiveProductsAsync();
            var loadWarehousesTask = WarehouseService.GetAllAsync();
            var loadWarehouseLocationsTask = WarehouseLocationService.GetAllAsync();

            await Task.WhenAll(loadProductsTask, loadWarehousesTask, loadWarehouseLocationsTask);

            products = await loadProductsTask;
            warehouses = await loadWarehousesTask;
            warehouseLocations = await loadWarehouseLocationsTask;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadOptionsAsync),
                GetType(),
                additionalData: "載入選項資料失敗");
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備異動類型選項
            var transactionTypeOptions = Enum.GetValues<InventoryTransactionTypeEnum>()
                .Select(t => new SelectOption 
                { 
                    Text = GetTransactionTypeDisplayName(t), 
                    Value = ((int)t).ToString() 
                })
                .ToList();

            // 準備商品選項
            var productOptions = products
                .Select(p => new SelectOption 
                { 
                    Text = $"{p.ProductCode} - {p.ProductName}", 
                    Value = p.Id.ToString() 
                })
                .ToList();

            // 準備倉庫選項
            var warehouseOptions = warehouses
                .Select(w => new SelectOption 
                { 
                    Text = $"{w.WarehouseCode} - {w.WarehouseName}", 
                    Value = w.Id.ToString() 
                })
                .ToList();

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("TransactionNumber", "交易單號", "輸入交易單號搜尋")
                .AddSelect("TransactionType", "異動類型", transactionTypeOptions)
                .AddSelect("ProductId", "商品", productOptions)
                .AddSelect("WarehouseId", "倉庫", warehouseOptions)
                .AddDateRange("TransactionDate", "異動日期")
                .AddNumberRange("Quantity", "異動數量")
                .AddText("ReferenceNumber", "參考單號", "輸入參考單號搜尋")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗");
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.DateTime("異動日期", nameof(InventoryTransaction.TransactionDate), "yyyy/MM/dd HH:mm"),
                TableColumnDefinition.Text("交易單號", nameof(InventoryTransaction.TransactionNumber)),
                TableColumnDefinition.Template("異動類型", item => {
                    var transaction = (InventoryTransaction)item;
                    var badgeClass = GetTransactionTypeBadgeClass(transaction.TransactionType);
                    return @<span class="badge @badgeClass">@GetTransactionTypeDisplayName(transaction.TransactionType)</span>;
                }),
                TableColumnDefinition.Text("商品代碼", "Product.ProductCode"),
                TableColumnDefinition.Text("商品名稱", "Product.ProductName"),
                TableColumnDefinition.Text("倉庫", "Warehouse.WarehouseName"),
                TableColumnDefinition.Template("異動數量", item => {
                    var transaction = (InventoryTransaction)item;
                    var textClass = transaction.Quantity >= 0 ? "text-success" : "text-danger";
                    var icon = transaction.Quantity >= 0 ? "fa-plus" : "fa-minus";
                    return @<span class="@textClass">
                        <i class="fas @icon me-1"></i>@transaction.Quantity.ToString("N0")
                    </span>;
                }),
                TableColumnDefinition.Number("異動前庫存", nameof(InventoryTransaction.StockBefore), "N0"),
                TableColumnDefinition.Number("異動後庫存", nameof(InventoryTransaction.StockAfter), "N0"),
                TableColumnDefinition.Currency("單位成本", nameof(InventoryTransaction.UnitCost)),
                TableColumnDefinition.Text("參考單號", nameof(InventoryTransaction.ReferenceNumber)),
                TableColumnDefinition.Text("備註", nameof(InventoryTransaction.TransactionRemarks))
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗");
        }
    }

    private async Task LoadDataAsync()
    {
        try
        {
            items = await InventoryTransactionService.GetAllAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadDataAsync),
                GetType(),
                additionalData: "載入庫存異動資料失敗");
        }
    }

    private async Task LoadStatisticsAsync()
    {
        try
        {
            var today = DateTime.Today;
            var startOfMonth = new DateTime(today.Year, today.Month, 1);
            var endOfMonth = startOfMonth.AddMonths(1).AddDays(-1);

            // 計算統計數據
            todayTransactionCount = items.Count(t => t.TransactionDate.Date == today);
            monthlyTransactionCount = items.Count(t => t.TransactionDate >= startOfMonth && t.TransactionDate <= endOfMonth);
            
            monthlyInboundCount = items.Count(t => 
                t.TransactionDate >= startOfMonth && 
                t.TransactionDate <= endOfMonth && 
                IsInboundTransaction(t.TransactionType));
                
            monthlyOutboundCount = items.Count(t => 
                t.TransactionDate >= startOfMonth && 
                t.TransactionDate <= endOfMonth && 
                IsOutboundTransaction(t.TransactionType));
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadStatisticsAsync),
                GetType(),
                additionalData: "載入統計資料失敗");
        }
    }

    private void ApplyFilters()
    {
        try
        {
            var filtered = items.AsQueryable();

            // 交易單號篩選
            var transactionNumberFilter = searchModel.GetFilterValue("TransactionNumber")?.ToString();
            if (!string.IsNullOrWhiteSpace(transactionNumberFilter))
            {
                filtered = filtered.Where(t => t.TransactionNumber.Contains(transactionNumberFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 異動類型篩選
            var transactionTypeFilter = searchModel.GetFilterValue("TransactionType")?.ToString();
            if (!string.IsNullOrWhiteSpace(transactionTypeFilter) && int.TryParse(transactionTypeFilter, out var typeValue))
            {
                filtered = filtered.Where(t => (int)t.TransactionType == typeValue);
            }

            // 商品篩選
            var productIdFilter = searchModel.GetFilterValue("ProductId")?.ToString();
            if (!string.IsNullOrWhiteSpace(productIdFilter) && int.TryParse(productIdFilter, out var productId))
            {
                filtered = filtered.Where(t => t.ProductId == productId);
            }

            // 倉庫篩選
            var warehouseIdFilter = searchModel.GetFilterValue("WarehouseId")?.ToString();
            if (!string.IsNullOrWhiteSpace(warehouseIdFilter) && int.TryParse(warehouseIdFilter, out var warehouseId))
            {
                filtered = filtered.Where(t => t.WarehouseId == warehouseId);
            }

            // 異動日期範圍篩選
            var dateRangeFilter = searchModel.DateRangeFilters.GetValueOrDefault("TransactionDate");
            if (dateRangeFilter?.StartDate.HasValue == true)
            {
                filtered = filtered.Where(t => t.TransactionDate.Date >= dateRangeFilter.StartDate.Value.Date);
            }
            if (dateRangeFilter?.EndDate.HasValue == true)
            {
                filtered = filtered.Where(t => t.TransactionDate.Date <= dateRangeFilter.EndDate.Value.Date);
            }

            // 異動數量範圍篩選
            var quantityRangeFilter = searchModel.NumberRangeFilters.GetValueOrDefault("Quantity");
            if (quantityRangeFilter?.Min.HasValue == true)
            {
                filtered = filtered.Where(t => Math.Abs(t.Quantity) >= quantityRangeFilter.Min.Value);
            }
            if (quantityRangeFilter?.Max.HasValue == true)
            {
                filtered = filtered.Where(t => Math.Abs(t.Quantity) <= quantityRangeFilter.Max.Value);
            }

            // 參考單號篩選
            var referenceNumberFilter = searchModel.GetFilterValue("ReferenceNumber")?.ToString();
            if (!string.IsNullOrWhiteSpace(referenceNumberFilter))
            {
                filtered = filtered.Where(t => !string.IsNullOrEmpty(t.ReferenceNumber) && 
                                             t.ReferenceNumber.Contains(referenceNumberFilter, StringComparison.OrdinalIgnoreCase));
            }

            filteredItems = filtered.OrderByDescending(t => t.TransactionDate).ToList();
            totalItems = filteredItems.Count;
            UpdatePagination();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplyFilters),
                GetType(),
                additionalData: "套用篩選條件失敗");
        }
    }

    private void UpdatePagination()
    {
        try
        {
            // 確保當前頁面在有效範圍內
            if (currentPage > totalPages && totalPages > 0)
            {
                currentPage = totalPages;
            }
            else if (currentPage < 1)
            {
                currentPage = 1;
            }

            // 計算分頁資料
            var skip = (currentPage - 1) * pageSize;
            pagedItems = filteredItems.Skip(skip).Take(pageSize).ToList();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(UpdatePagination),
                GetType(),
                additionalData: "更新分頁失敗");
        }
    }

    #region 事件處理方法

    private void HandleSearch(SearchFilterModel filterModel)
    {
        try
        {
            searchModel = filterModel;
            currentPage = 1; // 重置到第一頁
            ApplyFilters();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(HandleSearch),
                GetType(),
                additionalData: "處理搜尋事件失敗");
        }
    }

    private void HandleFilterChanged(SearchFilterModel filterModel)
    {
        try
        {
            searchModel = filterModel;
            currentPage = 1; // 重置到第一頁
            ApplyFilters();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(HandleFilterChanged),
                GetType(),
                additionalData: "處理篩選變更事件失敗");
        }
    }

    private void HandleRowClick(InventoryTransaction transaction)
    {
        try
        {
            // 導航到異動詳細頁面
            Navigation.NavigateTo($"/inventory/transactions/{transaction.Id}");
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(HandleRowClick),
                GetType(),
                additionalData: new { TransactionId = transaction.Id });
        }
    }

    private void ChangePage(int newPage)
    {
        try
        {
            if (newPage >= 1 && newPage <= totalPages)
            {
                currentPage = newPage;
                UpdatePagination();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ChangePage),
                GetType(),
                additionalData: new { NewPage = newPage });
        }
    }

    private void ChangePageSize(ChangeEventArgs e)
    {
        try
        {
            if (int.TryParse(e.Value?.ToString(), out var newPageSize))
            {
                pageSize = newPageSize;
                currentPage = 1; // 重置到第一頁
                UpdatePagination();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ChangePageSize),
                GetType(),
                additionalData: new { NewPageSize = e.Value });
        }
    }

    private async Task RefreshData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            await LoadDataAsync();
            await LoadStatisticsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(RefreshData),
                GetType(),
                additionalData: "重新整理資料失敗");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ClearFilters()
    {
        try
        {
            searchModel = new SearchFilterModel();
            currentPage = 1;
            ApplyFilters();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ClearFilters),
                GetType(),
                additionalData: "清除篩選條件失敗");
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            isExporting = true;
            StateHasChanged();

            // 這裡應該實作 Excel 匯出功能
            // 由於需要額外的套件支援，暫時顯示訊息
            await JSRuntime.InvokeVoidAsync("alert", "Excel 匯出功能開發中，請稍後再試。");
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ExportToExcel),
                GetType(),
                additionalData: "匯出 Excel 失敗");
        }
        finally
        {
            isExporting = false;
            StateHasChanged();
        }
    }

    #endregion

    #region 輔助方法

    private RenderFragment<InventoryTransaction> GetActionsTemplate => transaction => @<div class="btn-group" role="group">
        <button type="button" class="btn btn-outline-primary btn-sm" 
                @onclick="() => HandleRowClick(transaction)" 
                title="查看詳細">
            <i class="fas fa-eye"></i>
        </button>
    </div>;

    private string GetTransactionTypeDisplayName(InventoryTransactionTypeEnum transactionType)
    {
        return transactionType switch
        {
            InventoryTransactionTypeEnum.OpeningBalance => "期初庫存",
            InventoryTransactionTypeEnum.Purchase => "進貨",
            InventoryTransactionTypeEnum.Sale => "銷貨",
            InventoryTransactionTypeEnum.Return => "退貨",
            InventoryTransactionTypeEnum.Adjustment => "調整",
            InventoryTransactionTypeEnum.Transfer => "轉倉",
            InventoryTransactionTypeEnum.StockTaking => "盤點",
            InventoryTransactionTypeEnum.ProductionConsumption => "生產投料",
            InventoryTransactionTypeEnum.ProductionCompletion => "生產完工",
            InventoryTransactionTypeEnum.Scrap => "報廢",
            _ => transactionType.ToString()
        };
    }

    private string GetTransactionTypeBadgeClass(InventoryTransactionTypeEnum transactionType)
    {
        return transactionType switch
        {
            InventoryTransactionTypeEnum.Purchase => "bg-success",
            InventoryTransactionTypeEnum.Sale => "bg-primary",
            InventoryTransactionTypeEnum.Return => "bg-warning",
            InventoryTransactionTypeEnum.Adjustment => "bg-info",
            InventoryTransactionTypeEnum.Transfer => "bg-secondary",
            InventoryTransactionTypeEnum.StockTaking => "bg-dark",
            InventoryTransactionTypeEnum.ProductionConsumption => "bg-danger",
            InventoryTransactionTypeEnum.ProductionCompletion => "bg-success",
            InventoryTransactionTypeEnum.Scrap => "bg-danger",
            InventoryTransactionTypeEnum.OpeningBalance => "bg-light text-dark",
            _ => "bg-secondary"
        };
    }

    private bool IsInboundTransaction(InventoryTransactionTypeEnum transactionType)
    {
        return transactionType == InventoryTransactionTypeEnum.Purchase ||
               transactionType == InventoryTransactionTypeEnum.ProductionCompletion ||
               transactionType == InventoryTransactionTypeEnum.OpeningBalance;
    }

    private bool IsOutboundTransaction(InventoryTransactionTypeEnum transactionType)
    {
        return transactionType == InventoryTransactionTypeEnum.Sale ||
               transactionType == InventoryTransactionTypeEnum.ProductionConsumption ||
               transactionType == InventoryTransactionTypeEnum.Scrap;
    }

    #endregion
}
