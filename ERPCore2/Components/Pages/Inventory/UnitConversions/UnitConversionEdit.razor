@page "/inventory/unit-conversions/add"
@page "/inventory/unit-conversions/{Id:int}/edit"
@using ERPCore2.Data.Entities
@using ERPCore2.Components.Shared.Forms
@inject IUnitConversionService UnitConversionService
@inject IUnitService UnitService
@inject NavigationManager Navigation

<GenericEditPageComponent TEntity="UnitConversion"
                          TService="IUnitConversionService"
                          Id="@Id"
                          Entity="@unitConversion"
                          Service="@UnitConversionService"
                          EntityName="單位轉換"
                          EntityNamePlural="單位轉換"
                          FormTitle="單位轉換設定"
                          FormSubtitle="設定不同單位間的轉換關係"
                          FormIcon="arrow-left-right"
                          IndexRoute="/inventory/unit-conversions"
                          UseGenericForm="true"
                          FormFields="@formFields"
                          FormSections="@formSections"
                          BreadcrumbItems="@breadcrumbItems"
                          DataLoader="@LoadUnitConversionData"
                          SaveHandler="@SaveUnitConversion"
                          AdditionalDataLoader="@LoadAdditionalData"
                          OnSaveSuccess="@HandleSaveSuccess">
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }

    private UnitConversion unitConversion = new();
    private List<Unit> units = new();
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        SetupFormDefinition();
        SetupBreadcrumbs();
        
        if (Id.HasValue && Id.Value > 0)
        {
            unitConversion = await LoadUnitConversionData() ?? new UnitConversion();
        }
        else
        {
            unitConversion = CreateNewUnitConversion();
        }
    }

    private void SetupFormDefinition()
    {
        formSections = new Dictionary<string, string>
        {
            { "conversion", "轉換設定" },
            { "status", "狀態" },
            { "remarks", "備註" }
        };

        formFields = new List<FormFieldDefinition>
        {
            new() { 
                PropertyName = "FromUnitId", 
                Label = "來源單位", 
                FieldType = FormFieldType.Select, 
                IsRequired = true, 
                GroupName = "conversion",
                Options = GetUnitOptions()
            },
            new() { 
                PropertyName = "ToUnitId", 
                Label = "目標單位", 
                FieldType = FormFieldType.Select, 
                IsRequired = true, 
                GroupName = "conversion",
                Options = GetUnitOptions()
            },
            new() { 
                PropertyName = "ConversionRate", 
                Label = "轉換率", 
                FieldType = FormFieldType.Number, 
                IsRequired = true, 
                GroupName = "conversion",
                HelpText = "例如：1 公斤 = 1000 公克，轉換率為 1000",
                Step = 0.0001m
            },
            new() { PropertyName = "IsActive", Label = "啟用", FieldType = FormFieldType.Checkbox, GroupName = "status" },
            new() { PropertyName = "Remarks", Label = "備註", FieldType = FormFieldType.TextArea, GroupName = "remarks", Rows = 3 }
        };
    }

    private List<SelectOption> GetUnitOptions()
    {
        var options = new List<SelectOption> { new() { Value = "", Text = "請選擇單位" } };
        options.AddRange(units.Select(u => new SelectOption 
        { 
            Value = u.Id.ToString(), 
            Text = $"{u.UnitName} ({u.UnitCode})" 
        }));
        return options;
    }

    private void SetupBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new() { Text = "首頁", Href = "/" },
            new() { Text = "庫存管理", Href = "/inventory" },
            new() { Text = "單位轉換", Href = "/inventory/unit-conversions" },
            new() { Text = Id.HasValue && Id.Value > 0 ? "編輯" : "新增" }
        };
    }

    private async Task<UnitConversion?> LoadUnitConversionData()
    {
        if (!Id.HasValue) return null;
        return await UnitConversionService.GetByIdAsync(Id.Value);
    }

    private UnitConversion CreateNewUnitConversion()
    {
        return new UnitConversion
        {
            IsActive = true,
            Status = EntityStatus.Active
        };
    }

    private async Task LoadAdditionalData()
    {
        units = await UnitService.GetAllAsync();
        // 重新設定 FormFields 以更新選項
        SetupFormDefinition();
    }

    private async Task<bool> SaveUnitConversion(UnitConversion entity)
    {
        try
        {
            if (Id.HasValue && Id.Value > 0)
            {
                var result = await UnitConversionService.UpdateAsync(entity);
                return result?.IsSuccess ?? false;
            }
            else
            {
                var result = await UnitConversionService.CreateAsync(entity);
                return result?.IsSuccess ?? false;
            }
        }
        catch
        {
            return false;
        }
    }

    private Task HandleSaveSuccess()
    {
        Navigation.NavigateTo("/inventory/unit-conversions");
        return Task.CompletedTask;
    }
}
