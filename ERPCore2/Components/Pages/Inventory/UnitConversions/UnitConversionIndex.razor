@page "/inventory/unit-conversions"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Components.Shared
@inject IUnitConversionService UnitConversionService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>單位轉換管理</PageTitle>

<GenericIndexPageComponent TEntity="UnitConversion" 
                          TService="IUnitConversionService"
                          Service="@UnitConversionService"
                          PageTitle="單位轉換管理"
                          PageSubtitle="管理所有單位轉換規則與換算比率"
                          PageIcon="arrow-left-right"
                          AddButtonText="新增單位轉換"
                          AddButtonIcon="bi bi-plus-circle"
                          AddButtonTitle="新增單位轉換規則"
                          SearchSectionTitle="單位轉換搜尋與管理"
                          EmptyMessage="沒有找到符合條件的單位轉換資料"
                          DataLoader="@LoadDataAsync"
                          FilterApplier="@ApplyUnitConversionFilters"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          OnRowClick="@HandleRowClick"
                          ActionsTemplate="@ActionButtonsTemplate"
                          @ref="indexComponent">
</GenericIndexPageComponent>

@code {
    private GenericIndexPageComponent<UnitConversion, IUnitConversionService> indexComponent = default!;
    
    // 設定選項
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    protected override async Task OnInitializedAsync()
    {
        InitializeBreadcrumbs();
        InitializeFilters();
        InitializeTableColumns();
        await Task.CompletedTask;
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("庫存管理", "/inventory"),
            new("單位轉換管理")
        };
    }

    private void InitializeFilters()
    {
        // 準備狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = "true" },
            new() { Text = "停用", Value = "false" }
        };

        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("FromUnitName", "來源單位", "輸入來源單位名稱搜尋")
            .AddText("ToUnitName", "目標單位", "輸入目標單位名稱搜尋")
            .AddSelect("IsActive", "狀態", statusOptions, isAdvanced: true)
            .Build();
    }    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("來源單位", "FromUnit.UnitName"),
            TableColumnDefinition.Text("目標單位", "ToUnit.UnitName"),
            TableColumnDefinition.Number("轉換率", nameof(UnitConversion.ConversionRate), "N4"),
            TableColumnDefinition.Boolean("狀態", nameof(UnitConversion.IsActive)),
            TableColumnDefinition.Date("建立日期", nameof(UnitConversion.CreatedAt), "yyyy/MM/dd")
        };
    }

    // 資料載入委派
    private async Task<List<UnitConversion>> LoadDataAsync()
    {
        return await UnitConversionService.GetAllAsync();
    }

    // 篩選邏輯委派
    private IQueryable<UnitConversion> ApplyUnitConversionFilters(SearchFilterModel searchModel, IQueryable<UnitConversion> query)
    {
        // 來源單位篩選
        var fromUnitFilter = searchModel.GetFilterValue("FromUnitName")?.ToString();
        if (!string.IsNullOrWhiteSpace(fromUnitFilter))
        {
            query = query.Where(c => 
                c.FromUnit != null && 
                c.FromUnit.UnitName.Contains(fromUnitFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 目標單位篩選
        var toUnitFilter = searchModel.GetFilterValue("ToUnitName")?.ToString();
        if (!string.IsNullOrWhiteSpace(toUnitFilter))
        {
            query = query.Where(c => 
                c.ToUnit != null && 
                c.ToUnit.UnitName.Contains(toUnitFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 狀態篩選
        var isActiveFilter = searchModel.GetFilterValue("IsActive")?.ToString();
        if (!string.IsNullOrWhiteSpace(isActiveFilter) && bool.TryParse(isActiveFilter, out var isActive))
        {
            query = query.Where(c => c.IsActive == isActive);
        }

        return query.OrderBy(c => c.FromUnit!.UnitName).ThenBy(c => c.ToUnit!.UnitName);
    }

    // 行點擊事件
    private async Task HandleRowClick(UnitConversion conversion)
    {
        Navigation.NavigateTo($"/inventory/unit-conversions/{conversion.Id}/edit");
        await Task.CompletedTask;
    }

    // 自定義操作按鈕範本
    private RenderFragment<UnitConversion> ActionButtonsTemplate => conversion => 
        @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-warning" @onclick="() => EditConversion(conversion)" title="編輯">
                <i class="bi bi-pencil"></i>
            </button>
            <button class="btn btn-outline-danger" @onclick="() => DeleteConversion(conversion)" title="刪除">
                <i class="bi bi-trash"></i>
            </button>
        </div>;

    // 操作方法
    private async Task EditConversion(UnitConversion conversion)
    {
        Navigation.NavigateTo($"/inventory/unit-conversions/{conversion.Id}/edit");
        await Task.CompletedTask;
    }

    private async Task DeleteConversion(UnitConversion conversion)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "確定要刪除此單位轉換嗎？");
        
        if (confirmed)
        {
            try
            {
                var result = await UnitConversionService.DeleteAsync(conversion.Id);
                if (result.IsSuccess)
                {
                    await indexComponent.Refresh();
                    await JSRuntime.InvokeVoidAsync("alert", "單位轉換刪除成功");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除時發生錯誤：{ex.Message}");
            }
        }
    }
}
