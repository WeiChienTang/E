@page "/test-error"
@inject ILogger<TestErrorPage> Logger
@inject IErrorLogService ErrorLogService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>錯誤測試頁面</PageTitle>

<div class="container mt-4">
    <h3>✅ 簡化版錯誤處理測試</h3>
    <p class="text-success"><strong>主要策略：使用 try-catch 處理所有錯誤</strong></p>
    
    <div class="row">
        <div class="col-md-6">
            <div class="card border-success">
                <div class="card-header bg-success text-white">
                    <h5>✅ 安全的錯誤處理（推薦）</h5>
                </div>
                <div class="card-body">
                    <p class="text-success">
                        <strong>使用 try-catch 捕獲並記錄錯誤</strong>
                    </p>
                    
                    <button class="btn btn-success mb-2" @onclick="ThrowNullReferenceExceptionSafe">
                        <i class="fas fa-shield-alt me-1"></i>拋出 NullReferenceException
                    </button>
                    <br>
                    <button class="btn btn-success mb-2" @onclick="ThrowArgumentExceptionSafe">
                        <i class="fas fa-shield-alt me-1"></i>拋出 ArgumentException
                    </button>
                    <br>
                    <button class="btn btn-success mb-2" @onclick="ThrowCustomExceptionSafe">
                        <i class="fas fa-shield-alt me-1"></i>拋出自訂例外
                    </button>
                    <br>
                    <button class="btn btn-info mb-2" @onclick="TriggerSafeRenderError">
                        <i class="fas fa-code me-1"></i>安全渲染錯誤測試
                    </button>
                    
                    @if (safeRenderResult != null)
                    {
                        <div class="alert alert-success mt-2">
                            <i class="fas fa-check-circle me-2"></i>
                            <strong>渲染結果：</strong>@safeRenderResult
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card border-danger">
                <div class="card-header bg-danger text-white">
                    <h5>⚠️ 危險的錯誤處理（不推薦）</h5>
                </div>
                <div class="card-body">
                    <p class="text-danger">
                        <strong>以下會導致 circuit 當機，需要 F5 重新載入</strong>
                    </p>
                    
                    <button class="btn btn-outline-danger mb-2" @onclick="ThrowNullReferenceException">
                        <i class="fas fa-exclamation-triangle me-1"></i>拋出 NullReferenceException (危險)
                    </button>
                    <br>
                    <button class="btn btn-outline-warning mb-2" @onclick="ThrowArgumentException">
                        <i class="fas fa-exclamation-triangle me-1"></i>拋出 ArgumentException (危險)
                    </button>
                    <br>
                    <button class="btn btn-outline-info mb-2" @onclick="ThrowCustomException">
                        <i class="fas fa-exclamation-triangle me-1"></i>拋出自訂例外 (危險)
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    @if (!string.IsNullOrEmpty(lastErrorId))
    {
        <div class="alert alert-success mt-3">
            <i class="fas fa-check-circle me-2"></i>
            錯誤已安全處理並記錄，錯誤ID: <strong>@lastErrorId</strong>
            <br>
            <small class="text-muted">所有錯誤詳情都已記錄到資料庫</small>
        </div>
    }
    
    <div class="mt-4">
        <div class="alert alert-info">
            <h6><i class="fas fa-lightbulb me-2"></i>最佳實踐總結：</h6>
            <ul class="mb-0">
                <li>✅ <strong>API 錯誤</strong>：由 GlobalExceptionMiddleware 自動處理</li>
                <li>✅ <strong>Service 錯誤</strong>：在 Service 層使用 try-catch</li>
                <li>✅ <strong>UI 錯誤</strong>：在事件處理器使用 try-catch</li>
                <li>✅ <strong>渲染錯誤</strong>：在方法內部使用 try-catch</li>
                <li>⚠️ <strong>Circuit 當機</strong>：Blazor Server 框架限制，無法完全避免</li>
            </ul>
        </div>
    </div>
</div>

@code {
    private string? lastErrorId;
    private string? safeRenderResult;
    
    // ✅ 安全的錯誤處理版本 - 手動捕獲並記錄錯誤
    private async Task ThrowNullReferenceExceptionSafe()
    {
        try
        {
            Logger.LogInformation("即將拋出 NullReferenceException (安全版本)");
            string? nullString = null;
            var length = nullString!.Length;
        }
        catch (Exception ex)
        {
            await HandleErrorSafely(ex, "NullReferenceException 測試");
        }
    }
    
    private async Task ThrowArgumentExceptionSafe()
    {
        try
        {
            Logger.LogInformation("即將拋出 ArgumentException (安全版本)");
            throw new ArgumentException("這是一個測試用的參數例外 (安全版本)");
        }
        catch (Exception ex)
        {
            await HandleErrorSafely(ex, "ArgumentException 測試");
        }
    }
    
    private async Task ThrowCustomExceptionSafe()
    {
        try
        {
            Logger.LogInformation("即將拋出自訂例外 (安全版本)");
            throw new InvalidOperationException("這是一個測試用的操作例外，包含更詳細的錯誤資訊 (安全版本)");
        }
        catch (Exception ex)
        {
            await HandleErrorSafely(ex, "自訂例外測試");
        }
    }
    
    private async Task TriggerSafeRenderError()
    {
        try
        {
            Logger.LogInformation("開始安全渲染錯誤測試");
            // 手動觸發錯誤並捕獲
            string? nullString = null;
            var result = nullString!.ToUpper(); // 會拋出 NullReferenceException
            safeRenderResult = result;
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "安全渲染錯誤測試捕獲到例外");
            safeRenderResult = $"✅ 已安全捕獲渲染錯誤: {ex.Message}";
            await HandleErrorSafely(ex, "渲染錯誤測試");
        }
    }
    
    private async Task HandleErrorSafely(Exception exception, string testType)
    {
        try
        {
            // 記錄錯誤到資料庫
            lastErrorId = await ErrorLogService.LogErrorAsync(
                exception,
                new
                {
                    ComponentType = "TestErrorPage",
                    TestType = testType,
                    UserAgent = "Blazor Server",
                    Timestamp = DateTime.UtcNow,
                    RequestPath = Navigation.Uri,
                    IsTestError = true
                }
            );
            
            Logger.LogError(exception, "測試錯誤已安全處理並記錄，錯誤ID: {ErrorId}, 測試類型: {TestType}", 
                lastErrorId, testType);
            
            // 重新渲染以顯示成功訊息
            StateHasChanged();
        }
        catch (Exception logEx)
        {
            Logger.LogCritical(logEx, "記錄測試錯誤時發生例外");
            // 就算記錄失敗，也不要讓使用者看到錯誤
            lastErrorId = "LOG_ERROR_" + DateTime.UtcNow.Ticks;
            StateHasChanged();
        }
    }
    
    // ⚠️ 危險的錯誤測試 - 會導致 circuit 當機
    private void ThrowNullReferenceException()
    {
        Logger.LogWarning("即將拋出 NullReferenceException (危險版本) - 這會導致 circuit 當機");
        string? nullString = null;
        var length = nullString!.Length; // 這會拋出 NullReferenceException 並導致 circuit 當機
    }
    
    private void ThrowArgumentException()
    {
        Logger.LogWarning("即將拋出 ArgumentException (危險版本) - 這會導致 circuit 當機");
        throw new ArgumentException("這是一個測試用的參數例外");
    }
    
    private void ThrowCustomException()
    {
        Logger.LogWarning("即將拋出自訂例外 (危險版本) - 這會導致 circuit 當機");
        throw new InvalidOperationException("這是一個測試用的操作例外，包含更詳細的錯誤資訊");
    }
}