@page "/colors/edit"
@page "/colors/edit/{id:int?}"
@inject IColorService ColorService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using ERPCore2.Services.Notifications
@rendermode InteractiveServer

<PageTitle>@(Id.HasValue ? "編輯顏色" : "新增顏色")</PageTitle>

<GenericEditPageComponent TEntity="Color" 
                         TService="IColorService"
                         @ref="editComponent"
                         Id="@Id"
                         Service="@ColorService"
                         EntityName="顏色"
                         EntityNamePlural="顏色"
                         IndexRoute="/colors"
                         FormTitle="基本資料"
                         FormSubtitle="顏色的基本資訊"
                         UseGenericForm="true"
                         FormFields="@GetFormFields()"
                         FormSections="@formSections"
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadColorData"
                         UseGenericSave="true"
                         SaveSuccessMessage="@(Id.HasValue ? "顏色更新成功" : "顏色新增成功")"
                         SaveFailureMessage="顏色儲存失敗"
 />

@code {
    [Parameter] public int? Id { get; set; }
    
    private GenericEditPageComponent<Color, IColorService>? editComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeFormFields();
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("基礎資料", "#"),
            new("顏色管理", "/colors"),
            new(Id.HasValue ? "編輯顏色" : "新增顏色")
        };
    }    private void InitializeFormFields()
    {        formFields = new List<FormFieldDefinition>
        {
            // 基本資訊區段
            new()
            {
                PropertyName = nameof(Color.Name),
                Label = "名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入顏色名稱",
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Color.Code),
                Label = "編碼",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入顏色編碼",
                IsRequired = false,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Color.Status),
                Label = "狀態",
                FieldType = FormFieldType.Select,
                Options = new List<SelectOption>
                {
                    new() { Text = "啟用", Value = "Active" },
                    new() { Text = "停用", Value = "Inactive" }
                },
                ContainerCssClass = "col-md-6"
            },
            // 詳細資訊區段
            new()
            {
                PropertyName = nameof(Color.Description),
                Label = "描述",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入顏色描述",
                Rows = 3,
                ContainerCssClass = "col-12"
            },
            // 其他資訊區段
            new()
            {
                PropertyName = nameof(Color.Remarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入備註",
                Rows = 2,
                ContainerCssClass = "col-12"
            }
        };        formSections = new Dictionary<string, string>
        {
            { nameof(Color.Name), "基本資訊" },
            { nameof(Color.Code), "基本資訊" },
            { nameof(Color.Status), "設定" },
            { nameof(Color.Description), "詳細資訊" },
            { nameof(Color.Remarks), "額外資訊" }
        };
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    private async Task<Color?> LoadColorData()
    {
        if (!Id.HasValue) 
        {
            return new Color
            {
                Status = EntityStatus.Active
            };
        }

        try
        {
            var color = await ColorService.GetByIdAsync(Id.Value);            
            
            if (color == null)
            {
                await NotificationService.ShowErrorAsync("找不到指定的顏色資料");
                Navigation.NavigateTo("/colors");
                return null;
            }
            return color;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入顏色資料時發生錯誤：", ex.Message);
            Navigation.NavigateTo("/colors");
            return null;
        }
    }

}
