@page "/colors"
@using Microsoft.AspNetCore.Authorization
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Components.Shared
@using ERPCore2.Helpers
@attribute [Authorize]
@inject IColorService ColorService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject INotificationService NotificationService

@rendermode InteractiveServer

<PageTitle>顏色</PageTitle>

<PagePermissionCheck RequiredPermission="Color.Read">
    <GenericIndexPageComponent TEntity="Color" 
                            TService="IColorService"
                            Service="@ColorService"
                            EntityBasePath="/colors"                          
                            PageTitle="顏色"
                            PageSubtitle="管理所有顏色資料與色彩資訊"
                            AddButtonText="新增顏色"
                            AddButtonTitle="新增顏色資料"
                            SearchSectionTitle="顏色搜尋與管理"
                            EmptyMessage="沒有找到符合條件的顏色資料"                          
                            DataLoader="@LoadDataAsync"
                            FilterApplier="@ApplyColorFilters"
                            BreadcrumbItems="@breadcrumbItems"
                            FilterDefinitions="@filterDefinitions"
                            ColumnDefinitions="@columnDefinitions"
                            EntityName="顏色"
                            GetEntityDisplayName="@(color => color.Name)"
                            DeleteSuccessMessage="顏色刪除成功"
                            DeleteConfirmMessage="確定要刪除顏色「{0}」嗎？"
                            EnableStandardActions="true"
                            ShowViewButton="true"
                            ShowEditButton="true"
                            ShowDeleteButton="true"
                            @ref="indexComponent">
    </GenericIndexPageComponent>
</PagePermissionCheck>

@code {
    private GenericIndexPageComponent<Color, IColorService> indexComponent = default!;
    
    // 設定選項
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InitializeBreadcrumbs();
            await InitializeFilters();
            await InitializeTableColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitializedAsync),
                GetType(),
                additionalData: "初始化顏色頁面失敗"
            );
        }
    }

    private async Task InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("顏色管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType()
            );
        }
    }

    private async Task InitializeFilters()
    {
        try
        {
            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Name", "顏色名稱", "輸入顏色名稱搜尋")
                .AddText("HexCode", "色碼", "輸入HEX色碼搜尋")
                .AddText("Description", "描述", "輸入描述搜尋")
                .AddSelect("Status", "狀態", statusOptions)            
                .Build();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    private async Task InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("顏色名稱", nameof(Color.Name)),
                TableColumnDefinition.Text("顏色代碼", nameof(Color.Code)),
                TableColumnDefinition.Text("HEX色碼", nameof(Color.HexCode)),
                TableColumnDefinition.Text("描述", nameof(Color.Description)),
                TableColumnDefinition.Status("狀態", nameof(Color.Status), new Dictionary<object, string>
                {
                    { EntityStatus.Active, "bg-success" },
                    { EntityStatus.Inactive, "bg-secondary" }
                }),
                TableColumnDefinition.Date("建立日期", nameof(Color.CreatedAt), "yyyy/MM/dd")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
        }
    }

    // 資料載入委派
    private async Task<List<Color>> LoadDataAsync()
    {
        try
        {
            return await ColorService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadDataAsync),
                GetType(),
                additionalData: "載入顏色資料失敗"
            );
            return new List<Color>();
        }
    }

    // 篩選邏輯委派
    private IQueryable<Color> ApplyColorFilters(SearchFilterModel searchModel, IQueryable<Color> query)
    {
        try
        {
            // 顏色名稱篩選
            var nameFilter = searchModel.GetFilterValue("Name")?.ToString();
            if (!string.IsNullOrWhiteSpace(nameFilter))
            {
                query = query.Where(c => c.Name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // HEX色碼篩選
            var hexCodeFilter = searchModel.GetFilterValue("HexCode")?.ToString();
            if (!string.IsNullOrWhiteSpace(hexCodeFilter))
            {
                query = query.Where(c => 
                    !string.IsNullOrEmpty(c.HexCode) && 
                    c.HexCode.Contains(hexCodeFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 描述篩選
            var descriptionFilter = searchModel.GetFilterValue("Description")?.ToString();
            if (!string.IsNullOrWhiteSpace(descriptionFilter))
            {
                query = query.Where(c => 
                    !string.IsNullOrEmpty(c.Description) && 
                    c.Description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 狀態篩選
            var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
            {
                query = query.Where(c => c.Status == status);
            }

            return query.OrderBy(c => c.Name);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplyColorFilters),
                GetType(),
                additionalData: "應用篩選條件失敗"
            );
            return query.OrderBy(c => c.Name);
        }
    }
}
