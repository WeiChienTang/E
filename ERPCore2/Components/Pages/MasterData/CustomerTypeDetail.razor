@page "/customer-types/detail/{customerTypeId:int}"

@inject ICustomerTypeService CustomerTypeService
@rendermode InteractiveServer


    <GenericDetailPageComponent TEntity="CustomerType" 
                            TService="ICustomerTypeService"
                            EntityId="@CustomerTypeId"
                            Entity="@customerType"
                            Service="@CustomerTypeService"
                            EntityName="客戶類型"
                            EntityNamePlural="客戶類型"
                            IndexRoute="/customer-types"
                            EditRoute="/customer-types/edit"
                            LoadingText="載入客戶類型資料中..."
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadCustomerTypeDataAsync"
                            EntityTitleSelector="@(ct => ct.TypeName)"
                            EntitySubtitleSelector="@(ct => $"描述：{ct.Description ?? "未設定"}")"                           
                            EntityDisplayNameSelector="@(ct => ct.TypeName)"
                            OnDataLoaded="@OnCustomerTypeDataLoaded"                           
                            TabSections="@GetTabSections()"
                            RequiredPermission="CustomerType.Read">
    </GenericDetailPageComponent>

@code {
    [Parameter] public int CustomerTypeId { get; set; }

    private CustomerType? customerType;
    private bool _isLoading = false; // 防止重複載入

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("客戶管理", "/customers"),
        new("客戶類型管理", "/customer-types"),
        new("客戶類型詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<CustomerType?> LoadCustomerTypeDataAsync()
    {
        // 防止重複載入
        if (_isLoading)
        {
            return customerType;
        }
        
        try
        {
            _isLoading = true;
            if (CustomerTypeId <= 0) return null;
              var result = await CustomerTypeService.GetByIdAsync(CustomerTypeId);
            customerType = result; // 保持本地變數同步
            
            return result;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadCustomerTypeDataAsync),
                GetType() 
                );
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Task OnCustomerTypeDataLoaded()
    {
        try
        {
            // 資料載入完成後的處理
            StateHasChanged();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnCustomerTypeDataLoaded),
                GetType()
                );
            return Task.CompletedTask;
        }
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<CustomerType, ICustomerTypeService
                        >.TabSection> GetTabSections()
    {
        try
        {
            return new List<GenericDetailPageComponent<CustomerType, ICustomerTypeService
                        >.TabSection>
        {            new GenericDetailPageComponent<CustomerType, ICustomerTypeService>.TabSection
            {
                Id = "basic",
                Title = "基本資料",
                Content = @<div>
                    <BasicInfoDisplayComponent 
                        Title="客戶類型基本資訊"
                        IconClass="fas fa-users"
                        IconColor="text-primary"
                        Fields="@GetCustomerTypeBasicFields()"
                        ShowFieldCount="false" />
                </div>
            },
            
            new GenericDetailPageComponent<CustomerType, ICustomerTypeService>.TabSection
            {
                Id = "statistics",
                Title = "使用統計",
                Content = @<div>
                    <div class="row mb-3">
                        <DetailFieldComponent Label="使用此類型的客戶數" Value="@(customerType?.Customers?.Count().ToString() ?? "0")" IsBold="true" />
                    </div>
                    @if (customerType?.Customers?.Any() == true)
                    {
                        <div class="row">
                            @foreach (var customer in customerType.Customers.Take(10))
                            {
                                <div class="col-md-6 mb-2">
                                    <a href="/customers/detail/@customer.Id" class="btn btn-outline-primary btn-sm w-100">
                                        <i class="fas fa-building me-1"></i> @customer.CompanyName
                                    </a>
                                </div>
                            }
                            @if (customerType.Customers.Count() > 10)
                            {
                                <div class="col-12">
                                    <div class="text-muted mt-2 text-center">
                                        還有 @(customerType.Customers.Count() - 10) 個客戶使用此類型...
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-muted p-3 text-center">
                            <i class="fas fa-users fa-2x mb-2 d-block"></i>
                            目前沒有客戶使用此類型
                        </div>
                    }
                </div>
            },
              new GenericDetailPageComponent<CustomerType, ICustomerTypeService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div>
                    <SystemInfoDisplayComponent 
                        CreatedAt="@(customerType?.CreatedAt ?? DateTime.MinValue)"
                        UpdatedAt="@customerType?.UpdatedAt"
                        CreatedBy="@customerType?.CreatedBy"
                        UpdatedBy="@customerType?.UpdatedBy"
                        Remarks="@customerType?.Remarks"
                        ShowTimeline="true"
                        ShowRemarks="true" />
                </div>
            }
        };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, 
                nameof(GetTabSections),
                GetType()
                );
            return new List<GenericDetailPageComponent<CustomerType, ICustomerTypeService
                        >.TabSection>();
        }
    }

    // 取得客戶類型基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetCustomerTypeBasicFields()
    {
        try
        {
            return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "類型名稱",
                Value = customerType?.TypeName,
                IsPrimary = true,
                ValueBold = true,
                IconClass = "fas fa-users",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary"
            },
            new()
            {
                Label = "狀態",
                Type = BasicInfoDisplayComponent.FieldType.Status,
                Value = customerType?.Status,
                IconClass = "fas fa-flag",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success"
            },
            new()
            {
                Label = "描述",
                Value = customerType?.Description,
                EmptyText = "未設定",
                IconClass = "fas fa-align-left",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 12
            },
            new()
            {
                Label = "備註",
                Value = customerType?.Remarks,
                VisibilityCondition = () => !string.IsNullOrEmpty(customerType?.Remarks),
                IconClass = "fas fa-sticky-note",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary",
                ColSize = 12
            }
        };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, 
                nameof(GetCustomerTypeBasicFields),
                GetType()
                );
            return new List<BasicInfoDisplayComponent.BasicInfoField>();
        }
    }
}


