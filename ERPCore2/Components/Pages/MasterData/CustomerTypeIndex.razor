@page "/customer-types"
@using Microsoft.AspNetCore.Authorization
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Helpers
@attribute [Authorize]
@inject ICustomerTypeService CustomerTypeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>客戶類型</PageTitle>

<PagePermissionCheck RequiredPermission="CustomerType.Read">
    <GenericIndexPageComponent TEntity="CustomerType" 
                            TService="ICustomerTypeService"
                            Service="@CustomerTypeService"
                            EntityBasePath="/customer-types"                          
                            PageTitle="客戶類型"
                            PageSubtitle="管理客戶分類類型設定"
                            AddButtonText="新增客戶類型"
                            AddButtonTitle="新增客戶類型"
                            SearchSectionTitle="客戶類型搜尋與管理"
                            EmptyMessage="沒有找到符合條件的客戶類型資料"
                            BreadcrumbItems="@breadcrumbItems"
                            FilterDefinitions="@filterDefinitions"
                            ColumnDefinitions="@columnDefinitions"
                            DataLoader="@LoadCustomerTypesAsync"
                            FilterApplier="@ApplyCustomerTypeFilters"
                            AutoSearch="true"
                            ShowSearchButton="true"
                            SearchDelayMs="500"
                            EntityName="客戶類型"
                            GetEntityDisplayName="@(customerType => customerType.TypeName)"
                            DeleteSuccessMessage="客戶類型刪除成功"
                            DeleteConfirmMessage="確定要刪除客戶類型「{0}」嗎？"
                            @ref="indexComponent" />
</PagePermissionCheck>

@code {
    // 組件參考
    private GenericIndexPageComponent<CustomerType, ICustomerTypeService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitialized),
                GetType(),
                additionalData: "初始化客戶類型頁面失敗"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("客戶管理", "/customers"),
                new("客戶類型管理")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化麵包屑導航失敗"
            );
        }
    }

    // 載入客戶類型資料
    private async Task<List<CustomerType>> LoadCustomerTypesAsync()
    {
        try
        {
            return await CustomerTypeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadCustomerTypesAsync),
                GetType(),
                additionalData: "載入客戶類型資料失敗"
            );
            return new List<CustomerType>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("TypeName", "類型名稱", "輸入類型名稱搜尋")
                .AddText("Description", "描述", "輸入描述搜尋")
                .AddSelect("Status", "狀態", statusOptions)
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeFilters),
                GetType(),
                additionalData: "初始化篩選器失敗"
            );
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("類型名稱", nameof(CustomerType.TypeName)),
                TableColumnDefinition.Text("描述", nameof(CustomerType.Description)),
                TableColumnDefinition.Status("狀態", nameof(CustomerType.Status), new Dictionary<object, string>
                {
                    { EntityStatus.Active, "bg-success" },
                    { EntityStatus.Inactive, "bg-secondary" }
                }),
                TableColumnDefinition.Date("建立日期", nameof(CustomerType.CreatedAt), "yyyy/MM/dd"),
                TableColumnDefinition.Date("更新日期", nameof(CustomerType.UpdatedAt), "yyyy/MM/dd")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeTableColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
        }
    }

    // 自定義篩選邏輯
    private IQueryable<CustomerType> ApplyCustomerTypeFilters(SearchFilterModel searchModel, IQueryable<CustomerType> query)
    {
        try
        {
            // 類型名稱篩選
            var typeNameFilter = searchModel.GetFilterValue("TypeName")?.ToString();
            if (!string.IsNullOrWhiteSpace(typeNameFilter))
            {
                query = query.Where(ct => 
                    ct.TypeName.Contains(typeNameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 描述篩選
            var descriptionFilter = searchModel.GetFilterValue("Description")?.ToString();
            if (!string.IsNullOrWhiteSpace(descriptionFilter))
            {
                query = query.Where(ct => 
                    !string.IsNullOrEmpty(ct.Description) && 
                    ct.Description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 狀態篩選
            var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
            {
                query = query.Where(ct => ct.Status == status);
            }
            
            return query.OrderBy(ct => ct.TypeName);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplyCustomerTypeFilters),
                GetType(),
                additionalData: "套用客戶類型篩選失敗"
            );
            return query.OrderBy(ct => ct.TypeName);
        }
    }
}
