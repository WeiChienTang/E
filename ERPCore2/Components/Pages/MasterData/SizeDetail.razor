@page "/sizes/detail/{sizeId:int}"
@inject ISizeService SizeService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject INotificationService NotificationService
@inject IErrorLogService ErrorLogService
@rendermode InteractiveServer

<PageTitle>尺寸詳細資料</PageTitle>

<GenericDetailPageComponent TEntity="Size" 
                           TService="ISizeService"
                           EntityId="@SizeId"
                           Entity="@size"
                           Service="@SizeService"
                           EntityName="尺寸"
                           EntityNamePlural="尺寸"
                           IndexRoute="/sizes"
                           EditRoute="/sizes/edit"
                           LoadingText="載入尺寸資料中..."
                           BreadcrumbItems="@breadcrumbItems"
                           DataLoader="@LoadSizeDataAsync"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           EntityTitleSelector="@(s => s.SizeName)"
                           EntitySubtitleSelector="@(s => $"尺寸代碼：{s.SizeCode}")"
                           EntityDisplayNameSelector="@(s => s.SizeName)"
                           OnDataLoaded="@OnSizeDataLoaded"
                           UseTabLayout="true"
                           TabSections="@GetTabSections()">
</GenericDetailPageComponent>

@code {
    [Parameter] public int SizeId { get; set; }

    private Size? size;
    private bool _isLoading = false; // 防止重複載入

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("基礎資料", "#"),
        new("尺寸維護", "/sizes"),
        new("尺寸詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Size?> LoadSizeDataAsync()
    {
        // 防止重複載入
        if (_isLoading)
        {
            Console.WriteLine("[SizeDetail] 載入中，跳過重複調用");
            return size;
        }
        
        try
        {
            _isLoading = true;
            if (SizeId <= 0) return null;
            
            var result = await SizeService.GetByIdAsync(SizeId);
            size = result; // 保持本地變數同步
            
            return result;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[SizeDetail] 載入尺寸資料失敗：{ex.Message}");
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private Task LoadAdditionalDataAsync()
    {
        // Size 實體比較簡單，不需要額外查詢
        return Task.CompletedTask;
    }

    private Task OnSizeDataLoaded()
    {
        // 資料載入完成後的處理
        StateHasChanged();        
        return Task.CompletedTask;
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Size, ISizeService>.TabSection> GetTabSections()
    {        
        return new List<GenericDetailPageComponent<Size, ISizeService>.TabSection>
        {           
             new GenericDetailPageComponent<Size, ISizeService>.TabSection
            {
                Id = "basic",
                Title = "基本資料",
                Content = @<div>
                    <BasicInfoDisplayComponent 
                        Title="尺寸基本資訊"
                        IconClass="fas fa-ruler"
                        IconColor="text-primary"
                        Fields="@GetSizeBasicFields()" />
                </div>
            },
            
            new GenericDetailPageComponent<Size, ISizeService>.TabSection
            {
                Id = "products",
                Title = "關聯商品",
                Content = @<div>
                    @if (size?.Products?.Any() == true)
                    {
                        <div class="card">
                            <div class="card-header">
                                <h5 class="card-title mb-0">
                                    <i class="fas fa-box-open text-info me-2"></i>
                                    使用此尺寸的商品 (@size.Products.Count)
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    @foreach (var product in size.Products)
                                    {
                                        <div class="col-md-6 col-lg-4 mb-3">
                                            <div class="card border-0 shadow-sm">
                                                <div class="card-body">
                                                    <h6 class="card-title text-truncate">@product.ProductName</h6>
                                                    <p class="card-text text-muted small mb-1">
                                                        代碼：@product.ProductCode
                                                    </p>
                                                    @if (!string.IsNullOrEmpty(product.Description))
                                                    {
                                                        <p class="card-text small text-truncate">@product.Description</p>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">尚無關聯商品</h5>
                            <p class="text-muted">此尺寸目前沒有被任何商品使用</p>
                        </div>
                    }
                </div>
            },
            
            new GenericDetailPageComponent<Size, ISizeService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div>
                    <SystemInfoDisplayComponent 
                        CreatedAt="@(size?.CreatedAt ?? DateTime.MinValue)"
                        UpdatedAt="@size?.UpdatedAt"
                        CreatedBy="@size?.CreatedBy"
                        UpdatedBy="@size?.UpdatedBy"
                        Remarks="@size?.Description"
                        ShowTimeline="true"
                        ShowRemarks="true" />
                </div>
            }        
        };
    }

    // 取得尺寸基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetSizeBasicFields()
    {
        return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "尺寸代碼",
                Value = size?.SizeCode,
                IsPrimary = true,
                ValueBold = true,
                IconClass = "fas fa-barcode",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary",
                EmptyText = "未設定",
                ColSize = 6
            },
            new()
            {
                Label = "尺寸名稱",
                Value = size?.SizeName,
                ValueBold = true,
                IconClass = "fas fa-tag",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 6
            },
            new()
            {
                Label = "啟用狀態",
                CustomContent = @<div>
                    @if (size?.IsActive == true)
                    {
                        <span class="badge bg-success">
                            <i class="fas fa-check me-1"></i>啟用
                        </span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">
                            <i class="fas fa-times me-1"></i>停用
                        </span>
                    }
                </div>,
                IconClass = "fas fa-toggle-on",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success",
                ColSize = 6
            },
            new()
            {
                Label = "描述",
                Value = size?.Description,
                Format = BasicInfoDisplayComponent.FieldFormat.MultiLine,
                IconClass = "fas fa-sticky-note",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning",
                ColSize = 12,
                VisibilityCondition = () => !string.IsNullOrEmpty(size?.Description)
            }        
        };
    }
}
