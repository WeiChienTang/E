@page "/industrytypes/detail/{industryTypeId:int}"
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Badges
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.PageModels
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@inject IIndustryTypeService IndustryTypeService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>行業類型詳細資料</PageTitle>

<GenericDetailPageComponent TEntity="IndustryType" 
                           TService="IIndustryTypeService"
                           EntityId="@IndustryTypeId"
                           Entity="@industryType"
                           Service="@IndustryTypeService"
                           EntityName="行業類型"
                           EntityNamePlural="行業類型"
                           PageIcon="buildings"
                           IndexRoute="/industrytypes"
                           EditRoute="/industrytypes/edit"
                           LoadingText="載入行業類型資料中..."
                           BreadcrumbItems="@breadcrumbItems"
                           DataLoader="@LoadIndustryTypeDataAsync"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           EntityTitleSelector="@(it => it.IndustryTypeName)"
                           EntitySubtitleSelector="@(it => $"代碼：{it.IndustryTypeCode ?? "未設定"}")"
                           EntityDisplayNameSelector="@(it => it.IndustryTypeName)"
                           OnDataLoaded="@OnIndustryTypeDataLoaded"
                           UseGenericDetails="false">    
                           
    <CustomDetailContent>
        @* 基本資料 *@
        <DetailCardComponent Title="基本資料" Icon="info-circle">
            <div class="row">
                <DetailFieldComponent Label="行業類型代碼" Value="@industryType?.IndustryTypeCode" IsPrimary="true" EmptyText="未設定" />
                <DetailFieldComponent Label="行業類型名稱" Value="@industryType?.IndustryTypeName" IsBold="true" />
                <DetailFieldComponent Label="狀態">
                    @if (industryType?.Status != null)
                    {
                        <StatusBadgeComponent Status="@industryType.Status" />
                    }
                </DetailFieldComponent>
                <DetailFieldComponent Label="建立時間" Value="@industryType?.CreatedAt" />
                <DetailFieldComponent Label="更新時間" Value="@industryType?.UpdatedAt" />
                <DetailFieldComponent Label="建立者" Value="@industryType?.CreatedBy" EmptyText="系統" />
            </div>
        </DetailCardComponent>

        @* 使用統計 - 客戶 *@
        <DetailCardComponent Title="客戶使用統計" Icon="people">
            @if (relatedCustomers.Any())
            {
                <div class="row">
                    <div class="col-12 mb-3">
                        <div class="alert alert-info">
                            <strong>@relatedCustomers.Count</strong> 個客戶使用此行業類型
                        </div>
                    </div>
                    @foreach (var customer in relatedCustomers.Take(10))
                    {
                        <div class="col-md-6 mb-2">
                            <a href="/customers/detail/@customer.Id" class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-building"></i> @customer.CompanyName
                            </a>
                        </div>
                    }
                    @if (relatedCustomers.Count > 10)
                    {
                        <div class="col-12">
                            <small class="text-muted">還有 @(relatedCustomers.Count - 10) 個客戶使用此行業類型...</small>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-muted">目前沒有客戶使用此行業類型</div>
            }
        </DetailCardComponent>

        @* 使用統計 - 廠商 *@
        <DetailCardComponent Title="廠商使用統計" Icon="truck">
            @if (relatedSuppliers.Any())
            {
                <div class="row">
                    <div class="col-12 mb-3">
                        <div class="alert alert-info">
                            <strong>@relatedSuppliers.Count</strong> 個廠商使用此行業類型
                        </div>
                    </div>
                    @foreach (var supplier in relatedSuppliers.Take(10))
                    {
                        <div class="col-md-6 mb-2">
                            <a href="/suppliers/detail/@supplier.Id" class="btn btn-outline-success btn-sm">
                                <i class="bi bi-truck"></i> @supplier.CompanyName
                            </a>
                        </div>
                    }
                    @if (relatedSuppliers.Count > 10)
                    {
                        <div class="col-12">
                            <small class="text-muted">還有 @(relatedSuppliers.Count - 10) 個廠商使用此行業類型...</small>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-muted">目前沒有廠商使用此行業類型</div>
            }
        </DetailCardComponent>
    </CustomDetailContent>
</GenericDetailPageComponent>

@code {
    [Parameter] public int IndustryTypeId { get; set; }

    private IndustryType? industryType;
    private List<Customer> relatedCustomers = new();
    private List<Supplier> relatedSuppliers = new();
    private bool _isLoading = false; // 防止重複載入

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("行業類型管理", "/industrytypes"),
        new("行業類型詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<IndustryType?> LoadIndustryTypeDataAsync()
    {
        // 防止重複載入
        if (_isLoading)
        {
            Console.WriteLine("[IndustryTypeDetail] 載入中，跳過重複調用");
            return industryType;
        }
        
        try
        {
            _isLoading = true;
            if (IndustryTypeId <= 0) return null;
              
            var result = await IndustryTypeService.GetByIdAsync(IndustryTypeId);
            industryType = result; // 保持本地變數同步
            
            return result;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[IndustryTypeDetail] 載入行業類型資料失敗：{ex.Message}");
            throw;        
        }
        finally
        {
            _isLoading = false;
        }
    }    private Task LoadAdditionalDataAsync()
    {
        try
        {
            if (industryType != null)
            {
                // 載入相關的客戶
                relatedCustomers = industryType.Customers?.Where(c => !c.IsDeleted).ToList() ?? new List<Customer>();
                
                // 載入相關的廠商
                relatedSuppliers = industryType.Suppliers?.Where(s => !s.IsDeleted).ToList() ?? new List<Supplier>();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[IndustryTypeDetail] 載入額外資料失敗：{ex.Message}");
            relatedCustomers = new List<Customer>();
            relatedSuppliers = new List<Supplier>();
        }
        
        return Task.CompletedTask;
    }

    private Task OnIndustryTypeDataLoaded()
    {
        // 資料載入完成後的處理
        StateHasChanged();
        return Task.CompletedTask;
    }
}
