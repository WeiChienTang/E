@page "/product-categories/edit"
@page "/product-categories/edit/{id:int?}"

@inject IProductCategoryService ProductCategoryService
@inject NavigationManager Navigation
@inject INotificationService NotificationService 
@rendermode InteractiveServer

    <GenericEditPageComponent TEntity="ProductCategory" 
                            TService="IProductCategoryService"
                            @ref="editComponent"
                            Id="@Id"
                            Service="@ProductCategoryService"
                            EntityName="商品分類"
                            EntityNamePlural="商品分類"
                            PageTitle="@(Id.HasValue ? "編輯商品分類" : "新增商品分類")"
                            IndexRoute="/product-categories"
                            FormTitle="基本資料"
                            FormSubtitle="商品分類的基本資訊與階層設定"
                            UseGenericForm="true"
                            FormFields="@GetFormFields()"
                            FormSections="@formSections"
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadProductCategoryData"
                            UseGenericSave="true"
                            SaveSuccessMessage="@(Id.HasValue ? "商品分類更新成功" : "商品分類新增成功")"
                            SaveFailureMessage="商品分類儲存失敗"
                            RequiredPermission="@(Id.HasValue ? "ProductCategory.Update" : "ProductCategory.Create")" />

@code {
    [Parameter] public int? Id { get; set; }
    
    private GenericEditPageComponent<ProductCategory, IProductCategoryService>? editComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SelectOption> parentCategoryOptions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            await LoadParentCategoryOptions();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), NotificationService);
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("商品分類管理", "/product-categories"),
                new(Id.HasValue ? "編輯商品分類" : "新增商品分類")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(), NotificationService);
        }
    }

    private async Task LoadParentCategoryOptions()
    {
        try
        {
            var allCategories = await ProductCategoryService.GetAllAsync();
            
            // 如果是編輯模式，排除自己和自己的子分類（避免循環參考）
            if (Id.HasValue)
            {
                var currentCategory = allCategories.FirstOrDefault(c => c.Id == Id.Value);
                if (currentCategory != null)
                {
                    // 取得所有子分類ID（遞歸）
                    var excludeIds = GetAllChildCategoryIds(allCategories, Id.Value);
                    excludeIds.Add(Id.Value); // 排除自己
                    
                    allCategories = allCategories.Where(c => !excludeIds.Contains(c.Id)).ToList();
                }
            }
            
            parentCategoryOptions = allCategories
                .Select(c => new SelectOption 
                { 
                    Text = GetCategoryDisplayName(c, allCategories), 
                    Value = c.Id.ToString() 
                })
                .ToList();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "載入父分類選項時發生錯誤", GetType(), NotificationService);
        }
    }

    // 遞歸取得所有子分類ID
    private List<int> GetAllChildCategoryIds(List<ProductCategory> allCategories, int parentId)
    {
        var childIds = new List<int>();
        var directChildren = allCategories.Where(c => c.ParentCategoryId == parentId).ToList();
        
        foreach (var child in directChildren)
        {
            childIds.Add(child.Id);
            childIds.AddRange(GetAllChildCategoryIds(allCategories, child.Id));
        }
        
        return childIds;
    }

    // 建立階層顯示名稱
    private string GetCategoryDisplayName(ProductCategory category, List<ProductCategory> allCategories)
    {
        var path = new List<string>();
        var current = category;
        
        while (current != null)
        {
            path.Insert(0, current.CategoryName);
            current = current.ParentCategoryId.HasValue 
                ? allCategories.FirstOrDefault(c => c.Id == current.ParentCategoryId.Value)
                : null;
        }
        
        return string.Join(" > ", path);
    }

    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(ProductCategory.CategoryName),
                    Label = "分類名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入分類名稱",
                    IsRequired = true,
                    
                },
                new()
                {
                    PropertyName = nameof(ProductCategory.CategoryCode),
                    Label = "分類代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入分類代碼",
                    IsRequired = false,
                    
                },
                
                // 階層設定區段
                new()
                {
                    PropertyName = nameof(ProductCategory.ParentCategoryId),
                    Label = "父分類",
                    FieldType = FormFieldType.Select,
                    Options = parentCategoryOptions,
                    Placeholder = "請選擇父分類（可選）",
                    ContainerCssClass = "col-md-12"
                },
                
                // 詳細資訊區段
                new()
                {
                    PropertyName = nameof(ProductCategory.Description),
                    Label = "描述",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入分類描述",
                    Rows = 3,
                    ContainerCssClass = "col-12"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(ProductCategory.CategoryName), "基本資訊" },
                { nameof(ProductCategory.CategoryCode), "基本資訊" },
                { nameof(ProductCategory.ParentCategoryId), "階層設定" },
                { nameof(ProductCategory.Description), "詳細資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "初始化表單欄位時發生錯誤", GetType(), NotificationService);
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        try
        {
            return formFields;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, "取得表單欄位時發生錯誤", GetType(), NotificationService);
            return new List<FormFieldDefinition>();
        }
    }

    private async Task<ProductCategory?> LoadProductCategoryData()
    {
        try
        {
            if (!Id.HasValue) 
            {
                return new ProductCategory
                {
                    CategoryName = string.Empty,
                    CategoryCode = null,
                    Description = null,
                    ParentCategoryId = null
                };
            }

            var productCategory = await ProductCategoryService.GetByIdAsync(Id.Value);            
            
            if (productCategory == null)
            {
                await NotificationService.ShowErrorAsync("找不到指定的商品分類資料");
                Navigation.NavigateTo("/product-categories");
                return null;
            }
            return productCategory;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadProductCategoryData), GetType());
            Navigation.NavigateTo("/product-categories");
            return null;
        }
    }
}

