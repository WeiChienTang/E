@page "/weather"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Components.Shared
@using ERPCore2.Helpers
@inject IWeatherService WeatherService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject INotificationService NotificationService
@inject IErrorLogService ErrorLogService
@rendermode InteractiveServer

<PageTitle>天氣</PageTitle>

<GenericIndexPageComponent TEntity="Weather" 
                          TService="IWeatherService"
                          Service="@WeatherService"
                          EntityBasePath="/weather"                          PageTitle="天氣"
                          PageSubtitle="管理所有天氣類型資料"
                          AddButtonText="新增天氣"
                          AddButtonTitle="新增天氣資料"
                          SearchSectionTitle="天氣搜尋與管理"
                          EmptyMessage="沒有找到符合條件的天氣資料"
                          DataLoader="@LoadDataAsync"
                          FilterApplier="@ApplyWeatherFilters"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          EnableStandardActions="true"
                          EntityName="天氣"
                          GetEntityDisplayName="@(weather => weather.Name)"
                          DeleteSuccessMessage="天氣刪除成功"                          DeleteConfirmMessage="確定要刪除天氣「{0}」嗎？"
                          @ref="indexComponent">
</GenericIndexPageComponent>


@code {
    private GenericIndexPageComponent<Weather, IWeatherService> indexComponent = default!;
    
    // 設定選項
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InitializeBreadcrumbsAsync();
            await InitializeFiltersAsync();
            await InitializeTableColumnsAsync();
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandleErrorSafelyAsync(
                ex,
                nameof(OnInitializedAsync),
                typeof(WeatherIndex),
                ErrorLogService,
                NotificationService
            );
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("天氣管理")
            };
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandleErrorSafelyAsync(
                ex,
                nameof(InitializeBreadcrumbsAsync),
                typeof(WeatherIndex),
                ErrorLogService,
                NotificationService
            );
        }
    }

    private async Task InitializeFiltersAsync()
    {
        try
        {
            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("Name", "天氣名稱", "輸入天氣名稱搜尋")
                .AddText("Description", "描述", "輸入描述搜尋")
                .AddSelect("Status", "狀態", statusOptions, isAdvanced: true)
                .Build();
                
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandleErrorSafelyAsync(
                ex,
                nameof(InitializeFiltersAsync),
                typeof(WeatherIndex),
                ErrorLogService,
                NotificationService
            );
        }
    }

    private async Task InitializeTableColumnsAsync()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("天氣名稱", nameof(Weather.Name)),
                TableColumnDefinition.Text("描述", nameof(Weather.Description)),
                TableColumnDefinition.Status("狀態", nameof(Weather.Status), new Dictionary<object, string>
                {
                    { EntityStatus.Active, "bg-success" },
                    { EntityStatus.Inactive, "bg-secondary" }
                }),
                TableColumnDefinition.Date("建立日期", nameof(Weather.CreatedAt), "yyyy/MM/dd")
            };
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandleErrorSafelyAsync(
                ex,
                nameof(InitializeTableColumnsAsync),
                typeof(WeatherIndex),
                ErrorLogService,
                NotificationService
            );
        }
    }    // 資料載入委派
    private async Task<List<Weather>> LoadDataAsync()
    {
        try
        {
            return await WeatherService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandleErrorSafelyAsync(
                ex,
                nameof(LoadDataAsync),
                typeof(WeatherIndex),
                ErrorLogService,
                NotificationService
            );
            return new List<Weather>();
        }
    }

    // 篩選邏輯委派
    private IQueryable<Weather> ApplyWeatherFilters(SearchFilterModel searchModel, IQueryable<Weather> query)
    {
        try
        {
            // 天氣名稱篩選
            var nameFilter = searchModel.GetFilterValue("Name")?.ToString();
            if (!string.IsNullOrWhiteSpace(nameFilter))
            {
                query = query.Where(w => w.Name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 描述篩選
            var descriptionFilter = searchModel.GetFilterValue("Description")?.ToString();
            if (!string.IsNullOrWhiteSpace(descriptionFilter))
            {
                query = query.Where(w => 
                    !string.IsNullOrEmpty(w.Description) && 
                    w.Description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 狀態篩選
            var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
            {
                query = query.Where(w => w.Status == status);
            }
            
            return query.OrderBy(w => w.Name);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandleErrorSafelyAsync(
                ex,
                nameof(ApplyWeatherFilters),
                typeof(WeatherIndex),
                ErrorLogService,
                NotificationService
            );
            return query.OrderBy(w => w.Name);
        }
    }
}