@page "/units"
@using Microsoft.AspNetCore.Authorization
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Helpers
@attribute [Authorize]
@inject IUnitService UnitService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject INotificationService NotificationService
@inject IErrorLogService ErrorLogService
@rendermode InteractiveServer

<PagePermissionCheck RequiredPermission="Unit.Read">
<GenericIndexPageComponent TEntity="Unit" 
                          TService="IUnitService"
                          Service="@UnitService"
                          EntityBasePath="/units"
                          PageTitle="單位維護"
                          PageSubtitle="管理所有計量單位資料與轉換關係"
                          EntityName="單位"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadUnitsAsync"
                          FilterApplier="@ApplyUnitFilters"
                          GetEntityDisplayName="@(unit => unit.UnitName)"
                          @ref="indexComponent" />
</PagePermissionCheck>

@code {
    // 組件參考
    private GenericIndexPageComponent<Unit, IUnitService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFilters();
            InitializeTableColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: null
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("單位維護")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: null
            );
        }
    }

    // 載入單位資料
    private async Task<List<Unit>> LoadUnitsAsync()
    {
        try
        {
            return await UnitService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadUnitsAsync),
                GetType()
            );
            await NotificationService.ShowErrorAsync("載入單位資料失敗");
            return new List<Unit>();
        }
    }

    private void InitializeFilters()
    {
        try
        {
            // 準備狀態選項
            var activeOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = "true" },
                new() { Text = "停用", Value = "false" }
            };

            var baseUnitOptions = new List<SelectOption>
            {
                new() { Text = "是", Value = "true" },
                new() { Text = "否", Value = "false" }
            };

            // 建立篩選定義
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("UnitCode", "單位代碼", "輸入單位代碼搜尋")
                .AddText("UnitName", "單位名稱", "輸入單位名稱搜尋")
                .AddText("Symbol", "單位符號", "輸入單位符號搜尋")
                .AddSelect("IsBaseUnit", "基本單位", baseUnitOptions)
                .AddSelect("IsActive", "狀態", activeOptions)
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFilters), GetType(),
                additionalData: null
            );
        }
    }

    private void InitializeTableColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                TableColumnDefinition.Text("單位代碼", nameof(Unit.UnitCode)),
                TableColumnDefinition.Text("單位名稱", nameof(Unit.UnitName)),
                TableColumnDefinition.Text("符號", nameof(Unit.Symbol)),
                TableColumnDefinition.Boolean("基本單位", nameof(Unit.IsBaseUnit), 
                    trueText: "是", falseText: "否"),
                TableColumnDefinition.Boolean("狀態", nameof(Unit.IsActive), 
                    trueText: "啟用", falseText: "停用"),
                TableColumnDefinition.Date("建立日期", nameof(Unit.CreatedAt), "yyyy/MM/dd")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeTableColumns), GetType(),
                additionalData: null
            );
        }
    }

    // 自定義篩選邏輯
    private IQueryable<Unit> ApplyUnitFilters(SearchFilterModel searchModel, IQueryable<Unit> query)
    {
        try
        {
            // 單位代碼篩選
            var unitCodeFilter = searchModel.GetFilterValue("UnitCode")?.ToString();
            if (!string.IsNullOrWhiteSpace(unitCodeFilter))
            {
                query = query.Where(u => 
                    u.UnitCode.Contains(unitCodeFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 單位名稱篩選
            var unitNameFilter = searchModel.GetFilterValue("UnitName")?.ToString();
            if (!string.IsNullOrWhiteSpace(unitNameFilter))
            {
                query = query.Where(u => 
                    u.UnitName.Contains(unitNameFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 單位符號篩選
            var symbolFilter = searchModel.GetFilterValue("Symbol")?.ToString();
            if (!string.IsNullOrWhiteSpace(symbolFilter))
            {
                query = query.Where(u => 
                    !string.IsNullOrEmpty(u.Symbol) && 
                    u.Symbol.Contains(symbolFilter, StringComparison.OrdinalIgnoreCase));
            }

            // 基本單位篩選
            var isBaseUnitFilter = searchModel.GetFilterValue("IsBaseUnit")?.ToString();
            if (!string.IsNullOrWhiteSpace(isBaseUnitFilter) && bool.TryParse(isBaseUnitFilter, out var isBaseUnit))
            {
                query = query.Where(u => u.IsBaseUnit == isBaseUnit);
            }

            // 狀態篩選
            var isActiveFilter = searchModel.GetFilterValue("IsActive")?.ToString();
            if (!string.IsNullOrWhiteSpace(isActiveFilter) && bool.TryParse(isActiveFilter, out var isActive))
            {
                query = query.Where(u => u.IsActive == isActive);
            }

            return query.OrderBy(u => u.UnitCode);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApplyUnitFilters), GetType(),
                additionalData: new { SearchModel = searchModel }
            );
            
            // 發生錯誤時返回原始查詢
            return query.OrderBy(u => u.UnitCode);
        }
    }
}
