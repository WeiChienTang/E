@page "/weather/edit"
@page "/weather/edit/{id:int?}"

@inject IWeatherService WeatherService
@inject INotificationService NotificationService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<GenericEditPageComponent TEntity="Weather" 
                         TService="IWeatherService"
                         @ref="editComponent"
                         Id="@Id"
                         Service="@WeatherService"
                         EntityName="天氣"
                         EntityNamePlural="天氣"
                         PageTitle="@(Id.HasValue ? "編輯天氣" : "新增天氣")"
                         IndexRoute="/weather"
                         FormTitle="基本資料"
                         FormSubtitle="天氣的基本資訊"
                         UseGenericForm="true"
                         FormFields="@GetFormFields()"
                         FormSections="@formSections"                         
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadWeatherData"
                         UseGenericSave="true"
                         SaveSuccessMessage="@(Id.HasValue ? "天氣更新成功" : "天氣新增成功")"
                         SaveFailureMessage="天氣儲存失敗"
                         RequiredPermission="@(Id.HasValue ? "Weather.Update" : "Weather.Create")" />


@code {
    [Parameter] public int? Id { get; set; }
    
    private GenericEditPageComponent<Weather, IWeatherService>? editComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: new { Id });
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("天氣管理", "/weather"),
                new(Id.HasValue ? "編輯天氣" : "新增天氣")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: new { Id });
        }
    }    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(Weather.Name),
                    Label = "名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入天氣名稱",
                    IsRequired = true,
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(Weather.Status),
                    Label = "狀態",
                    FieldType = FormFieldType.Select,
                    Options = new List<SelectOption>
                    {
                        new() { Text = "啟用", Value = "Active" },
                        new() { Text = "停用", Value = "Inactive" }
                    },
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(Weather.Description),
                    Label = "描述",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入天氣描述",
                    Rows = 3,
                    ContainerCssClass = "col-12"
                },
                new()
                {
                    PropertyName = nameof(Weather.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註",
                    Rows = 2,
                    ContainerCssClass = "col-12"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(Weather.Name), "基本資訊" },
                { nameof(Weather.Status), "設定" },
                { nameof(Weather.Description), "詳細資訊" },
                { nameof(Weather.Remarks), "額外資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFields), GetType(),
                additionalData: new { Id });
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        try
        {
            return formFields;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetFormFields), GetType(),
                additionalData: new { Id });
            return new List<FormFieldDefinition>();
        }
    }

    private async Task<Weather?> LoadWeatherData()
    {
        if (!Id.HasValue) 
        {
            return new Weather
            {
                Status = EntityStatus.Active
            };
        }

        try
        {
            var weather = await WeatherService.GetByIdAsync(Id.Value);            if (weather == null)
            {
                await NotificationService.ShowErrorAsync("找不到指定的天氣資料");
                Navigation.NavigateTo("/weather");
                return null;
            }
            return weather;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadWeatherData), GetType(),
                additionalData: new { Id });
            Navigation.NavigateTo("/weather");
            return null;
        }
    }
}

