@page "/materials/edit"
@page "/materials/edit/{id:int?}"
@inject IMaterialService MaterialService
@inject ISupplierService SupplierService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using ERPCore2.Services.Notifications
@using ERPCore2.Helpers
@rendermode InteractiveServer

<PageTitle>@(Id.HasValue ? "編輯材質" : "新增材質")</PageTitle>

<GenericEditPageComponent TEntity="Material" 
                         TService="IMaterialService"
                         @ref="editComponent"
                         Id="@Id"
                         Service="@MaterialService"
                         EntityName="材質"
                         EntityNamePlural="材質"
                         IndexRoute="/materials"
                         FormTitle="基本資料"
                         FormSubtitle="材質的基本資訊"
                         UseGenericForm="true"
                         FormFields="@GetFormFields()"
                         FormSections="@formSections"
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadMaterialData"
                         UseGenericSave="true"
                         SaveSuccessMessage="@(Id.HasValue ? "材質更新成功" : "材質新增成功")"
                         SaveFailureMessage="材質儲存失敗"
 />

@code {
    [Parameter] public int? Id { get; set; }
    
    private GenericEditPageComponent<Material, IMaterialService>? editComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: new { Id });
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "#"),
                new("材質管理", "/materials"),
                new(Id.HasValue ? "編輯材質" : "新增材質")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: new { Id });
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                // 基本資訊區段
                new()
                {
                    PropertyName = nameof(Material.Code),
                    Label = "材質代碼",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入材質代碼",
                    IsRequired = true,
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(Material.Name),
                    Label = "材質名稱",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入材質名稱",
                    IsRequired = true,
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(Material.Category),
                    Label = "材質類別",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入材質類別",
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(Material.Status),
                    Label = "狀態",
                    FieldType = FormFieldType.Select,
                    Options = new List<SelectOption>
                    {
                        new() { Text = "啟用", Value = "Active" },
                        new() { Text = "停用", Value = "Inactive" }
                    },
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(Material.Description),
                    Label = "材質描述",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入材質描述",
                    Rows = 3,
                    ContainerCssClass = "col-12"
                },
                new()
                {
                    PropertyName = nameof(Material.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註",
                    Rows = 3,
                    ContainerCssClass = "col-12"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(Material.Code), "基本資訊" },
                { nameof(Material.Name), "基本資訊" },
                { nameof(Material.Category), "基本資訊" },
                { nameof(Material.Status), "設定" },
                { nameof(Material.Description), "詳細資訊" },
                { nameof(Material.Remarks), "額外資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFields), GetType(),
                additionalData: new { Id });
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        try
        {
            return formFields;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetFormFields), GetType(),
                additionalData: new { Id });
            return new List<FormFieldDefinition>();
        }
    }

    private async Task<Material?> LoadMaterialData()
    {
        if (!Id.HasValue) 
        {
            return new Material
            {
                Status = EntityStatus.Active
            };
        }

        try
        {
            var material = await MaterialService.GetByIdAsync(Id.Value);            
            
            if (material == null)
            {
                await NotificationService.ShowErrorAsync("找不到指定的材質資料");
                Navigation.NavigateTo("/materials");
                return null;
            }
            return material;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadMaterialData), GetType(),
                additionalData: new { Id });
            Navigation.NavigateTo("/materials");
            return null;
        }
    }
}
