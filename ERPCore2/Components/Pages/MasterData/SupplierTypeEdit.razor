@page "/supplier-types/edit"
@page "/supplier-types/edit/{id:int?}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services
@using ERPCore2.Helpers
@inject ISupplierTypeService SupplierTypeService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using ERPCore2.Services.Notifications
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>@GetPageTitle()</PageTitle>
<PagePermissionCheck RequiredPermission="@(Id.HasValue ? "SupplierType.Update" : "SupplierType.Create")">
<GenericEditPageComponent TEntity="SupplierType" 
                         TService="ISupplierTypeService"
                         Id="@Id"
                         Entity="@supplierType"
                         Service="@SupplierTypeService"
                         EntityName="廠商類型"
                         EntityNamePlural="廠商類型"                         
                         FormTitle="基本資料"
                         FormSubtitle="廠商類型的基本設定資訊"
                         IndexRoute="/supplier-types"
                         UseGenericForm="true"
                         FormFields="@formFields"
                         FormSections="@formSections"                         
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadSupplierTypeData"
                         UseGenericSave="true"
                         CustomValidator="@ValidateSupplierType"
                         SaveSuccessMessage="@(Id.HasValue ? "廠商類型更新成功" : "廠商類型新增成功")"
                         SaveFailureMessage="廠商類型儲存失敗">
</GenericEditPageComponent>
</PagePermissionCheck>
@code {
    [Parameter] public int? Id { get; set; }
    
    // 資料模型
    private SupplierType supplierType = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();    
    private Dictionary<string, string> formSections = new();
    
    // 防止重複載入
    private readonly SemaphoreSlim _loadingSemaphore = new(1, 1);
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitialized), GetType(),
                additionalData: new { Id, SupplierTypeId = Id });
        }
    }

    protected override void OnParametersSet()
    {
        try
        {
            // 當參數變化時（例如從 Detail 導航到 Edit），重新初始化麵包屑
            InitializeBreadcrumbs();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnParametersSet), GetType(),
                additionalData: new { Id, SupplierTypeId = Id });
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("基礎資料", "/"),
                new("廠商類型管理", "/supplier-types"),
                new(Id.HasValue ? "編輯廠商類型" : "新增廠商類型")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType(),
                additionalData: new { Id, SupplierTypeId = Id });
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            formFields = new List<FormFieldDefinition>
            {            
                new()
                {
                    PropertyName = nameof(SupplierType.TypeName),
                    Label = "類型名稱",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "請輸入類型名稱",
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(SupplierType.Status),
                    Label = "狀態",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = statusOptions,
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(SupplierType.Description),
                    Label = "描述",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入類型描述（選填）",
                    Rows = 3,
                    ContainerCssClass = "col-12"
                },            
                new()
                {
                    PropertyName = nameof(SupplierType.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註資訊（選填）",
                    Rows = 2,
                    ContainerCssClass = "col-12"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(SupplierType.TypeName), "基本資訊" },
                { nameof(SupplierType.Status), "基本資訊" },
                { nameof(SupplierType.Description), "詳細資訊" },
                { nameof(SupplierType.Remarks), "詳細資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFields), GetType(),
                additionalData: new { Id, SupplierTypeId = Id });
        }
    }

    private async Task<SupplierType?> LoadSupplierTypeData()
    {
        var semaphoreAcquired = false;
        try
        {
            await _loadingSemaphore.WaitAsync();
            semaphoreAcquired = true;
            
            if (!Id.HasValue) 
            {
                // 新增模式 - 建立新的廠商類型實體
                supplierType = new SupplierType
                {
                    Status = EntityStatus.Active,
                    TypeName = string.Empty,
                    Description = null,
                    Remarks = null
                };
                return supplierType;
            }

            // 編輯模式 - 載入現有資料
            var loadedSupplierType = await SupplierTypeService.GetByIdAsync(Id.Value);
            if (loadedSupplierType != null)
            {
                supplierType = loadedSupplierType;
                return supplierType;
            }            
            else
            {
                await NotificationService.ShowErrorAsync("找不到指定的廠商類型資料");
                Navigation.NavigateTo("/supplier-types");
                return null;
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSupplierTypeData), GetType(),
                additionalData: new { Id, SupplierTypeId = Id });
            throw;
        }
        finally
        {
            if (semaphoreAcquired)
            {
                _loadingSemaphore.Release();
            }
        }
    }

    private string GetPageTitle()
    {
        try
        {
            return Id.HasValue ? "編輯廠商類型" : "新增廠商類型";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetPageTitle), GetType(),
                additionalData: new { Id, SupplierTypeId = Id });
            return "廠商類型";
        }
    }    

    private async Task<bool> ValidateSupplierType(SupplierType entity)
    {
        try
        {
            // 驗證基本資料
            if (string.IsNullOrWhiteSpace(entity.TypeName))
            {
                await NotificationService.ShowErrorAsync("類型名稱為必填欄位");
                return false;
            }
            
            // 檢查類型名稱是否重複
            var isNameExists = await SupplierTypeService.IsSupplierTypeNameExistsAsync(entity.TypeName, Id);
            if (isNameExists)
            {
                await NotificationService.ShowErrorAsync("此類型名稱已存在，請使用其他名稱");
                return false;
            }

            return true;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ValidateSupplierType), GetType(),
                additionalData: new { Id, SupplierTypeId = Id, EntityTypeName = entity?.TypeName });
            return false;
        }
    }

    public void Dispose()
    {
        try
        {
            _loadingSemaphore?.Dispose();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(Dispose), GetType(),
                additionalData: new { Id, SupplierTypeId = Id });
        }
    }
}
