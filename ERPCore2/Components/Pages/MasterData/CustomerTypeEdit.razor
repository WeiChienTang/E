@page "/customer-types/edit"
@page "/customer-types/edit/{id:int?}"

@inject ICustomerTypeService CustomerTypeService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IErrorLogService ErrorLogService
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>@GetPageTitle()</PageTitle>

<PagePermissionCheck RequiredPermission="@(Id.HasValue ? "CustomerType.Update" : "CustomerType.Create")">
    <GenericEditPageComponent TEntity="CustomerType" 
                            TService="ICustomerTypeService"
                            Id="@Id"
                            Entity="@customerType"
                            Service="@CustomerTypeService"
                            EntityName="客戶類型"
                            EntityNamePlural="客戶類型"                         
                            FormTitle="基本資料"
                            FormSubtitle="客戶類型的基本設定資訊"
                            IndexRoute="/customer-types"
                            UseGenericForm="true"
                            FormFields="@formFields"
                            FormSections="@formSections"                         
                            BreadcrumbItems="@breadcrumbItems"
                            DataLoader="@LoadCustomerTypeData"
                            UseGenericSave="true"
                            CustomValidator="@ValidateCustomerType"
                            SaveSuccessMessage="@(Id.HasValue ? "客戶類型更新成功" : "客戶類型新增成功")"
                            SaveFailureMessage="客戶類型儲存失敗">
    </GenericEditPageComponent>
</PagePermissionCheck>
@code {
    [Parameter] public int? Id { get; set; }
    
    // 資料模型
    private CustomerType customerType = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();    private Dictionary<string, string> formSections = new();
    
    // 防止重複載入
    private readonly SemaphoreSlim _loadingSemaphore = new(1, 1);
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();    
    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnInitialized), 
                GetType()
                );
        }
    }

    protected override void OnParametersSet()
    {
        try
        {
            // 當參數變化時（例如從 Detail 導航到 Edit），重新初始化麵包屑
            InitializeBreadcrumbs();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnParametersSet), 
                GetType()
                );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("客戶管理", "/customers"),
                new("客戶類型管理", "/customer-types"),
                new(Id.HasValue ? "編輯客戶類型" : "新增客戶類型")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbs), GetType());
        }
    }

    private void InitializeFormFields()
    {
        try
        {
            // 準備狀態選項
            var statusOptions = new List<SelectOption>
            {
                new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
                new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
            };

            formFields = new List<FormFieldDefinition>
            {            
                new()
                {
                    PropertyName = nameof(CustomerType.TypeName),
                    Label = "類型名稱",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "請輸入類型名稱",
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(CustomerType.Status),
                    Label = "狀態",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = statusOptions,
                    ContainerCssClass = "col-md-6"
                },
                new()
                {
                    PropertyName = nameof(CustomerType.Description),
                    Label = "描述",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入類型描述（選填）",
                    Rows = 3,
                    ContainerCssClass = "col-12"
                },            
                new()
                {
                    PropertyName = nameof(CustomerType.Remarks),
                    Label = "備註",
                    FieldType = FormFieldType.TextArea,
                    Placeholder = "請輸入備註資訊（選填）",
                    Rows = 2,
                    ContainerCssClass = "col-12"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(CustomerType.TypeName), "基本資訊" },
                { nameof(CustomerType.Status), "基本資訊" },
                { nameof(CustomerType.Description), "詳細資訊" },
                { nameof(CustomerType.Remarks), "詳細資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeFormFields), GetType());
        }
    }

    private async Task<CustomerType?> LoadCustomerTypeData()
    {
        await _loadingSemaphore.WaitAsync();
        try
        {
            if (!Id.HasValue) 
            {
                // 新增模式 - 建立新的客戶類型實體
                customerType = new CustomerType
                {
                    Status = EntityStatus.Active,
                    TypeName = string.Empty,
                    Description = null,
                    Remarks = null
                };
                return customerType;
            }

            // 編輯模式 - 載入現有資料
            var loadedCustomerType = await CustomerTypeService.GetByIdAsync(Id.Value);
            if (loadedCustomerType != null)
            {
                customerType = loadedCustomerType;
                return customerType;
            }            else
            {
                await NotificationService.ShowErrorAsync("找不到指定的客戶類型資料");
                Navigation.NavigateTo("/customer-types");
                return null;
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCustomerTypeData), GetType());
            throw;
        }
        finally
        {
            _loadingSemaphore.Release();
        }
    }

    private string GetPageTitle()
    {
        try
        {
            return Id.HasValue ? "編輯客戶類型" : "新增客戶類型";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetPageTitle), GetType());
            return "客戶類型";
        }
    }    
    private async Task<bool> ValidateCustomerType(CustomerType entity)
    {
        try
        {
            // 驗證基本資料
            if (string.IsNullOrWhiteSpace(entity.TypeName))
            {
                await NotificationService.ShowErrorAsync("類型名稱為必填欄位");
                return false;
            }

            // 檢查類型名稱是否重複
            var isNameExists = await CustomerTypeService.IsTypeNameExistsAsync(entity.TypeName, Id);
            if (isNameExists)
            {
                await NotificationService.ShowErrorAsync("此類型名稱已存在，請使用其他名稱");
                return false;
            }

            return true;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ValidateCustomerType), GetType());
            return false;
        }
    }    
    public void Dispose()
    {
        try
        {
            _loadingSemaphore?.Dispose();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(Dispose), GetType());
        }
    }
}
