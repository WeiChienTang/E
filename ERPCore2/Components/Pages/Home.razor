@page "/"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject INavigationSearchService NavigationSearchService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>美莊磚業 - 系統首頁</PageTitle>

<div class="container-fluid">

    @* 功能搜尋區域 *@
    <div class="row mb-4">
        <div class="col-12">
            <div class="card section-card">
                <div class="card-header section-header-primary">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-search me-2"></i>
                        頁面搜尋
                    </h5>
                </div>
                <div class="card-body">
                    @* 搜尋篩選區域 *@
                    <GenericSearchFilterComponent TModel="SearchFilterModel"
                                                 FilterDefinitions="@filterDefinitions"
                                                 FilterModel="@searchModel"
                                                 OnSearch="HandleSearch"
                                                 OnFilterChanged="HandleFilterChanged"
                                                 AutoSearch="true"
                                                 ShowSearchButton="false"
                                                 ShowAdvancedToggle="false"
                                                 SearchDelayMs="300" />

                    @* 搜尋結果 *@
                    @if (searchResults.Any())
                    {
                        <div class="search-results-section mt-4">
                            <h6 class="mb-3">
                                <i class="bi bi-grid-fill me-2"></i>
                                搜尋結果 (共 @searchResults.Count 個功能)
                            </h6>
                            <div class="row">
                                @foreach (var item in searchResults)
                                {
                                    <div class="col-lg-4 col-md-6 mb-3">
                                        <div class="search-result-card">
                                            <NavigationCard Item="@item" 
                                                          ShowRoute="true" 
                                                          ShowActionButton="false" />
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    else if (hasSearched)
                    {
                        <div class="search-empty-state mt-4 text-center">
                            <i class="bi bi-search-heart fs-1 d-block mb-3"></i>
                            <p>沒有找到符合條件的功能，請嘗試使用其他關鍵字</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @* 系統更新通知區域 *@
    <div class="row mb-3">
        <div class="col-12">
            <div class="alert alert-info d-flex align-items-center" role="alert">
                <i class="bi bi-info-circle-fill me-2"></i>
                <div class="flex-grow-1">
                    <strong>系統更新</strong> - 查看最新的系統功能與改進
                </div>
                <a href="/updates" class="btn btn-outline-primary btn-sm">
                    <i class="bi-arrow-up-circle me-1"></i>
                    查看更新
                </a>
            </div>
        </div>
    </div>

</div>



@code {
    // 搜尋結果
    private List<NavigationItem> searchResults = new();
    
    // 搜尋相關
    private SearchFilterModel searchModel = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private bool hasSearched = false;

    protected override void OnInitialized()
    {
        InitializeFilters();
    }

    private void InitializeFilters()
    {
        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("SearchTerm", "", "輸入功能名稱或關鍵字搜尋...")
            .Build();
    }

    private async Task HandleSearch(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        await PerformSearch();
    }

    private async Task HandleFilterChanged(SearchFilterModel filterModel)
    {
        searchModel = filterModel;
        // 使用自動搜尋功能
        await PerformSearch();
    }

    private async Task PerformSearch()
    {
        var searchTerm = searchModel.GetFilterValue("SearchTerm")?.ToString();
        
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            searchResults.Clear();
            hasSearched = false;
        }
        else
        {
            searchResults = NavigationSearchService.SearchNavigationItems(searchTerm)
                .Where(item => !item.IsParent && !string.IsNullOrEmpty(item.Route) && item.Route != "#")
                .ToList();
            hasSearched = true;
        }
        
        StateHasChanged();
        await Task.CompletedTask;
    }
}
