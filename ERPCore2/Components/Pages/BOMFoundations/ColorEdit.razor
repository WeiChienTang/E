@page "/BOMFoundation/colors/edit"
@page "/BOMFoundation/colors/edit/{id:int?}"
@inject IColorService ColorService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>@(Id.HasValue ? "編輯顏色" : "新增顏色")</PageTitle>

<GenericEditPageComponent TEntity="Color" 
                         TService="IColorService"
                         @ref="editComponent"
                         Id="@Id"
                         Service="@ColorService"
                         EntityName="顏色"
                         EntityNamePlural="顏色"
                         IndexRoute="/BOMFoundation/colors"
                         FormTitle="基本資料"
                         FormSubtitle="顏色的基本資訊"
                         FormIcon="info-circle"
                         UseGenericForm="true"
                         FormFields="@formFields"
                         FormSections="@formSections"
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadColorData"
                         SaveHandler="@SaveColorData"
                         OnSaveSuccess="@HandleSaveSuccess"
                         OnCancel="@HandleCancel" />

@code {
    [Parameter] public int? Id { get; set; }
    
    private GenericEditPageComponent<Color, IColorService>? editComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeFormFields();
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("產品基礎元素", "#"),
            new("顏色管理", "/BOMFoundation/colors"),
            new(Id.HasValue ? "編輯顏色" : "新增顏色")
        };
    }

    private void InitializeFormFields()
    {
        formFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = nameof(Color.Name),
                Label = "名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入顏色名稱",
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Color.Status),
                Label = "狀態",
                FieldType = FormFieldType.Select,
                Options = new List<SelectOption>
                {
                    new() { Text = "啟用", Value = "Active" },
                    new() { Text = "停用", Value = "Inactive" }
                },
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Color.Description),
                Label = "描述",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入顏色描述",
                Rows = 3,
                ContainerCssClass = "col-12"
            },
            new()
            {
                PropertyName = nameof(Color.Remarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入備註",
                Rows = 2,
                ContainerCssClass = "col-12"
            }
        };

        formSections = new Dictionary<string, string>
        {
            { nameof(Color.Name), "基本資訊" },
            { nameof(Color.Status), "基本資訊" },
            { nameof(Color.Description), "詳細資訊" },
            { nameof(Color.Remarks), "其他資訊" }
        };
    }

    private async Task<Color?> LoadColorData()
    {
        if (!Id.HasValue) 
        {
            return new Color
            {
                Status = EntityStatus.Active
            };
        }

        try
        {
            var color = await ColorService.GetByIdAsync(Id.Value);
            if (color == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "找不到指定的顏色資料");
                Navigation.NavigateTo("/BOMFoundation/colors");
                return null;
            }
            return color;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入顏色資料時發生錯誤：", ex.Message);
            Navigation.NavigateTo("/BOMFoundation/colors");
            return null;
        }
    }

    private async Task<bool> SaveColorData(Color color)
    {
        try
        {
            ServiceResult<Color> result;
            
            if (Id.HasValue)
            {
                result = await ColorService.UpdateAsync(color);
            }
            else
            {
                result = await ColorService.CreateAsync(color);
            }
            
            return result.IsSuccess;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "儲存顏色資料時發生錯誤：", ex.Message);
            return false;
        }
    }

    private Task HandleSaveSuccess()
    {
        Navigation.NavigateTo("/BOMFoundation/colors");
        return Task.CompletedTask;
    }

    private Task HandleCancel()
    {
        Navigation.NavigateTo("/BOMFoundation/colors");
        return Task.CompletedTask;
    }
}
