@page "/BOMFoundation/weather/edit"
@page "/BOMFoundation/weather/edit/{id:int?}"
@page "/weather/edit"
@page "/weather/edit/{id:int?}"
@inject IWeatherService WeatherService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>@(Id.HasValue ? "編輯天氣" : "新增天氣")</PageTitle>

<GenericEditPageComponent TEntity="Weather" 
                         TService="IWeatherService"
                         @ref="editComponent"
                         Id="@Id"
                         Service="@WeatherService"
                         EntityName="天氣"
                         EntityNamePlural="天氣"
                         IndexRoute="/BOMFoundation/weather"
                         FormTitle="基本資料"
                         FormSubtitle="天氣的基本資訊"
                         FormIcon="info-circle"
                         UseGenericForm="true"
                         FormFields="@GetFormFields()"
                         FormSections="@formSections"
                         BreadcrumbItems="@breadcrumbItems"
                         DataLoader="@LoadWeatherData"
                         SaveHandler="@SaveWeatherData"
                         OnSaveSuccess="@HandleSaveSuccess"
                         OnCancel="@HandleCancel" />

@code {
    [Parameter] public int? Id { get; set; }
    
    private GenericEditPageComponent<Weather, IWeatherService>? editComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeFormFields();
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("產品基礎元素", "#"),
            new("天氣管理", "/BOMFoundation/weather"),
            new(Id.HasValue ? "編輯天氣" : "新增天氣")
        };
    }    private void InitializeFormFields()
    {
        formFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = nameof(Weather.Name),
                Label = "名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入天氣名稱",
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Weather.Status),
                Label = "狀態",
                FieldType = FormFieldType.Select,
                Options = new List<SelectOption>
                {
                    new() { Text = "啟用", Value = "Active" },
                    new() { Text = "停用", Value = "Inactive" }
                },
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = nameof(Weather.Description),
                Label = "描述",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入天氣描述",
                Rows = 3,
                ContainerCssClass = "col-12"
            },
            new()
            {
                PropertyName = nameof(Weather.Remarks),
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "請輸入備註",
                Rows = 2,
                ContainerCssClass = "col-12"
            }
        };        formSections = new Dictionary<string, string>
        {
            { nameof(Weather.Name), "基本資訊" },
            { nameof(Weather.Status), "基本資訊" },
            { nameof(Weather.Description), "詳細資訊" },
            { nameof(Weather.Remarks), "其他資訊" }
        };
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    private async Task<Weather?> LoadWeatherData()
    {
        if (!Id.HasValue) 
        {
            return new Weather
            {
                Status = EntityStatus.Active
            };
        }

        try
        {
            var weather = await WeatherService.GetByIdAsync(Id.Value);
            if (weather == null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "找不到指定的天氣資料");
                Navigation.NavigateTo("/BOMFoundation/weather");
                return null;
            }
            return weather;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入天氣資料時發生錯誤：", ex.Message);
            Navigation.NavigateTo("/BOMFoundation/weather");
            return null;
        }
    }

    private async Task<bool> SaveWeatherData(Weather weather)
    {
        try
        {
            if (Id.HasValue)
            {
                var result = await WeatherService.UpdateAsync(weather);
                return result.IsSuccess;
            }
            else
            {
                var result = await WeatherService.CreateAsync(weather);
                return result.IsSuccess;
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "儲存天氣資料時發生錯誤：", ex.Message);
            return false;
        }
    }    private Task HandleSaveSuccess()
    {
        Navigation.NavigateTo("/BOMFoundation/weather");
        return Task.CompletedTask;
    }

    private Task HandleCancel()
    {
        Navigation.NavigateTo("/BOMFoundation/weather");
        return Task.CompletedTask;
    }
}