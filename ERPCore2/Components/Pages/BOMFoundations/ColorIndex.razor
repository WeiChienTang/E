@page "/colors"
@page "/BOMFoundation/colors"
@using ERPCore2.Data.Entities
@using ERPCore2.Services
@using ERPCore2.Components.Shared
@inject IColorService ColorService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>顏色管理</PageTitle>

<GenericIndexPageComponent TEntity="Color" 
                          TService="IColorService"
                          Service="@ColorService"
                          PageTitle="顏色管理"
                          PageSubtitle="管理所有顏色資料與色彩資訊"
                          PageIcon="palette-fill"
                          AddButtonText="新增顏色"
                          AddButtonIcon="bi bi-plus-circle"
                          AddButtonTitle="新增顏色資料"
                          SearchSectionTitle="顏色搜尋與管理"
                          EmptyMessage="沒有找到符合條件的顏色資料"
                          DataLoader="@LoadDataAsync"
                          FilterApplier="@ApplyColorFilters"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          OnRowClick="@HandleRowClick"
                          ActionsTemplate="@ActionButtonsTemplate"
                          @ref="indexComponent">
</GenericIndexPageComponent>

@code {
    private GenericIndexPageComponent<Color, IColorService> indexComponent = default!;
    
    // 設定選項
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();

    protected override async Task OnInitializedAsync()
    {
        InitializeBreadcrumbs();
        InitializeFilters();
        InitializeTableColumns();
        await Task.CompletedTask;
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("產品基礎元素", "/BOMFoundation"),
            new("顏色管理")
        };
    }

    private void InitializeFilters()
    {
        // 準備狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
            new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
        };

        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("Name", "顏色名稱", "輸入顏色名稱搜尋")
            .AddText("HexCode", "色碼", "輸入HEX色碼搜尋")
            .AddText("Description", "描述", "輸入描述搜尋")
            .AddSelect("Status", "狀態", statusOptions, isAdvanced: true)
            .Build();
    }    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("顏色名稱", nameof(Color.Name)),
            TableColumnDefinition.Text("顏色代碼", nameof(Color.Code)),
            TableColumnDefinition.Text("HEX色碼", nameof(Color.HexCode)),
            TableColumnDefinition.Text("描述", nameof(Color.Description)),
            TableColumnDefinition.Status("狀態", nameof(Color.Status), new Dictionary<object, string>
            {
                { EntityStatus.Active, "bg-success" },
                { EntityStatus.Inactive, "bg-secondary" }
            }),
            TableColumnDefinition.Date("建立日期", nameof(Color.CreatedAt), "yyyy/MM/dd")
        };
    }

    // 資料載入委派
    private async Task<List<Color>> LoadDataAsync()
    {
        return await ColorService.GetAllAsync();
    }

    // 篩選邏輯委派
    private IQueryable<Color> ApplyColorFilters(SearchFilterModel searchModel, IQueryable<Color> query)
    {
        // 顏色名稱篩選
        var nameFilter = searchModel.GetFilterValue("Name")?.ToString();
        if (!string.IsNullOrWhiteSpace(nameFilter))
        {
            query = query.Where(c => c.Name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase));
        }

        // HEX色碼篩選
        var hexCodeFilter = searchModel.GetFilterValue("HexCode")?.ToString();
        if (!string.IsNullOrWhiteSpace(hexCodeFilter))
        {
            query = query.Where(c => 
                !string.IsNullOrEmpty(c.HexCode) && 
                c.HexCode.Contains(hexCodeFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 描述篩選
        var descriptionFilter = searchModel.GetFilterValue("Description")?.ToString();
        if (!string.IsNullOrWhiteSpace(descriptionFilter))
        {
            query = query.Where(c => 
                !string.IsNullOrEmpty(c.Description) && 
                c.Description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 狀態篩選
        var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
        if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
        {
            query = query.Where(c => c.Status == status);
        }

        return query.OrderBy(c => c.Name);
    }

    // 行點擊事件
    private async Task HandleRowClick(Color color)
    {
        Navigation.NavigateTo($"/BOMFoundation/colors/detail/{color.Id}");
        await Task.CompletedTask;
    }

    // 自定義操作按鈕範本
    private RenderFragment<Color> ActionButtonsTemplate => color => 
        @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary" @onclick="() => ViewColor(color)" title="檢視">
                <i class="bi bi-eye"></i>
            </button>
            <button class="btn btn-outline-warning" @onclick="() => EditColor(color)" title="編輯">
                <i class="bi bi-pencil"></i>
            </button>
            <button class="btn btn-outline-danger" @onclick="() => DeleteColor(color)" title="刪除">
                <i class="bi bi-trash"></i>
            </button>
        </div>;

    // 操作方法
    private async Task ViewColor(Color color)
    {
        Navigation.NavigateTo($"/BOMFoundation/colors/detail/{color.Id}");
        await Task.CompletedTask;
    }

    private async Task EditColor(Color color)
    {
        Navigation.NavigateTo($"/BOMFoundation/colors/edit/{color.Id}");
        await Task.CompletedTask;
    }

    private async Task DeleteColor(Color color)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"確定要刪除顏色「{color.Name}」嗎？");
        
        if (confirmed)
        {
            try
            {
                var result = await ColorService.DeleteAsync(color.Id);
                if (result.IsSuccess)
                {
                    await indexComponent.Refresh();
                    await JSRuntime.InvokeVoidAsync("alert", "顏色刪除成功");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除時發生錯誤：{ex.Message}");
            }
        }
    }
}
