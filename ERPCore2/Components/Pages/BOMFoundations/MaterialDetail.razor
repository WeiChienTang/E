@page "/BOMFoundation/materials/detail/{materialId:int}"
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Badges
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@inject IMaterialService MaterialService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">載入中...</span>
            </div>
            <div class="mt-2">載入材質資料中...</div>
        </div>
    </div>
}
else if (material == null)
{
    <div class="alert alert-warning">
        <h4>找不到材質資料</h4>
        <p>指定的材質不存在或已被刪除。</p>
        <button class="btn btn-primary" @onclick="BackToMaterialList">
            返回材質列表
        </button>
    </div>
}
else
{
    <GenericHeaderComponent Title="@material.Name" 
                          Subtitle="@($"材質代碼：{material.Code}")"
                          BreadcrumbItems="@breadcrumbItems">        
        <ActionButtons>
            <DetailActionButtonsComponent 
                EntityStatus="@material?.Status"
                IsLoading="@isLoading"
                EntityName="材質"
                EntityId="@MaterialId.ToString()"
                EntityDisplayName="@material?.Name"
                EntityService="@MaterialService"
                ListRoute="/BOMFoundation/materials"
                EditRoute="/BOMFoundation/materials/edit"
                OnReloadData="@LoadMaterialData"/>
        </ActionButtons>
    </GenericHeaderComponent>

    @* 基本資訊 - 使用模組化元件 *@
    <DetailCardComponent Title="基本資訊" >
        <div class="row">
            <DetailFieldComponent Label="材質代碼" Value="@material.Code" IsPrimary="true" />
            <DetailFieldComponent Label="材質名稱" Value="@material.Name" IsBold="true" />
            @if (!string.IsNullOrEmpty(material.Category))
            {
                <DetailFieldComponent Label="材質類別" Value="@material.Category" />
            }
            <DetailFieldComponent Label="環保材質">
                @if (material.IsEcoFriendly)
                {
                    <span class="badge bg-success">是</span>
                }
                else
                {
                    <span class="badge bg-secondary">否</span>
                }
            </DetailFieldComponent>
            <DetailFieldComponent Label="狀態">
                @if (material.Status == Data.Enums.EntityStatus.Active)
                {
                    <span class="badge bg-success">啟用</span>
                }
                else
                {
                    <span class="badge bg-danger">停用</span>
                }
            </DetailFieldComponent>
            @if (!string.IsNullOrEmpty(material.Description))
            {
                <DetailFieldComponent Label="描述" Value="@material.Description" ColSize="12" />
            }
            @if (!string.IsNullOrEmpty(material.Remarks))
            {
                <DetailFieldComponent Label="備註" Value="@material.Remarks" ColSize="12" />
            }
        </div>
    </DetailCardComponent>

    @* 物理特性 - 使用模組化元件 *@
    @if (material.Density.HasValue || material.MeltingPoint.HasValue)
    {
        <DetailCardComponent Title="物理特性" >
            <div class="row">
                @if (material.Density.HasValue)
                {
                    <DetailFieldComponent Label="密度" Value="@($"{material.Density} g/cm³")" />
                }
                @if (material.MeltingPoint.HasValue)
                {
                    <DetailFieldComponent Label="熔點" Value="@($"{material.MeltingPoint}°C")" />
                }
            </div>
        </DetailCardComponent>
    }

    @* 系統資訊 - 使用模組化元件 *@
    <DetailCardComponent Title="系統資訊" >
        <div class="row">
            <DetailFieldComponent Label="建立時間" Value="@material.CreatedAt.ToString("yyyy/MM/dd HH:mm:ss")" />
            <DetailFieldComponent Label="建立者" Value="@material.CreatedBy" EmptyText="系統" />
            @if (material.UpdatedAt.HasValue)
            {
                <DetailFieldComponent Label="更新時間" Value="@material.UpdatedAt.Value.ToString("yyyy/MM/dd HH:mm:ss")" />
                <DetailFieldComponent Label="更新者" Value="@material.UpdatedBy" EmptyText="無" />
            }
        </div>
    </DetailCardComponent>
}

@code {
    [Parameter] public int MaterialId { get; set; }

    private Material? material;
    private bool isLoading = true;
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        InitializeBreadcrumb();
        await LoadMaterialData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (MaterialId > 0)
        {
            await LoadMaterialData();
        }
    }

    private void InitializeBreadcrumb()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new() { Text = "首頁", Href = "/" },
            new() { Text = "BOM 基礎資料", Href = "/BOMFoundation" },
            new() { Text = "材質管理", Href = "/BOMFoundation/materials" },
            new() { Text = "材質詳情" }
        };
    }

    private async Task LoadMaterialData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            material = await MaterialService.GetByIdAsync(MaterialId);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入材質資料失敗：", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void BackToMaterialList()
    {
        Navigation.NavigateTo("/BOMFoundation/materials");
    }
}
