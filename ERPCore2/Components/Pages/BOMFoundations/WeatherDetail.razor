@page "/BOMFoundation/weather/detail/{weatherId:int}"
@page "/weather/detail/{weatherId:int}"
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Badges
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@inject IWeatherService WeatherService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>天氣詳細資料</PageTitle>

<GenericDetailPageComponent TEntity="Weather" 
                           TService="IWeatherService"
                           EntityId="@WeatherId"
                           Entity="@weather"
                           Service="@WeatherService"
                           EntityName="天氣"
                           EntityNamePlural="天氣"
                           IndexRoute="/BOMFoundation/weather"
                           EditRoute="/BOMFoundation/weather/edit"
                           LoadingText="載入天氣資料中..."
                           BreadcrumbItems="@breadcrumbItems"
                           DataLoader="@LoadWeatherDataAsync"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           EntityTitleSelector="@(w => w.Name)"
                           EntitySubtitleSelector="@(w => $"天氣代碼：{w.Code ?? "未設定"}")"
                           EntityDisplayNameSelector="@(w => w.Name)"
                           OnDataLoaded="@OnWeatherDataLoaded"
                           UseTabLayout="true"
                           TabSections="@GetTabSections()">
</GenericDetailPageComponent>

@code {
    [Parameter] public int WeatherId { get; set; }

    private Weather? weather;
    private bool _isLoading = false;

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("BOM 基礎資料", "/BOMFoundation"),
        new("天氣管理", "/BOMFoundation/weather"),
        new("天氣詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Weather?> LoadWeatherDataAsync()
    {
        if (_isLoading)
        {
            Console.WriteLine("[WeatherDetail] 載入中，跳過重複調用");
            return weather;
        }
        
        try
        {
            _isLoading = true;
            if (WeatherId <= 0) return null;
            
            var result = await WeatherService.GetByIdAsync(WeatherId);
            weather = result;
            return result;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[WeatherDetail] 載入天氣資料失敗：{ex.Message}");
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Task LoadAdditionalDataAsync()
    {
        return Task.CompletedTask;
    }

    private Task OnWeatherDataLoaded()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Weather, IWeatherService>.TabSection> GetTabSections()
    {
        return new List<GenericDetailPageComponent<Weather, IWeatherService>.TabSection>
        {
            new GenericDetailPageComponent<Weather, IWeatherService>.TabSection
            {
                Id = "basic",
                Title = "基本資料",
                Content = @<div class="row">
                    <DetailFieldComponent Label="天氣代碼" Value="@weather?.Code" IsPrimary="true" EmptyText="未設定" />
                    <DetailFieldComponent Label="天氣名稱" Value="@weather?.Name" IsBold="true" />
                    @if (!string.IsNullOrEmpty(weather?.Icon))
                    {
                        <DetailFieldComponent Label="圖示" Value="@weather.Icon" />
                    }
                    @if (weather?.ReferenceTemperature.HasValue == true)
                    {
                        <DetailFieldComponent Label="參考溫度" Value="@($"{weather.ReferenceTemperature}°C")" />
                    }
                    <DetailFieldComponent Label="狀態">
                        @if (weather?.Status != null)
                        {
                            <StatusBadgeComponent Status="@weather.Status" />
                        }
                    </DetailFieldComponent>
                    @if (!string.IsNullOrEmpty(weather?.Description))
                    {
                        <DetailFieldComponent Label="描述" Value="@weather.Description" ColSize="12" />
                    }
                    @if (!string.IsNullOrEmpty(weather?.Remarks))
                    {
                        <DetailFieldComponent Label="備註" Value="@weather.Remarks" ColSize="12" />
                    }
                </div>
            },
            
            new GenericDetailPageComponent<Weather, IWeatherService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div class="row">
                    <DetailFieldComponent Label="建立時間" Value="@weather?.CreatedAt.ToString("yyyy/MM/dd HH:mm")" />
                    <DetailFieldComponent Label="建立者" Value="@weather?.CreatedBy" EmptyText="系統" />
                    @if (weather?.UpdatedAt.HasValue == true)
                    {
                        <DetailFieldComponent Label="更新時間" Value="@weather.UpdatedAt.Value.ToString("yyyy/MM/dd HH:mm")" />
                        <DetailFieldComponent Label="更新者" Value="@weather?.UpdatedBy" EmptyText="系統" />
                    }
                </div>
            }
        };
    }
}
