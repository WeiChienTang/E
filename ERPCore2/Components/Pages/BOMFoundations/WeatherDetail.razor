@page "/BOMFoundation/weather/detail/{weatherId:int}"
@page "/weather/detail/{weatherId:int}"
@using ERPCore2.Components.Shared
@using ERPCore2.Components.Shared.Details
@using ERPCore2.Components.Shared.Badges
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@inject IWeatherService WeatherService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>天氣詳細資料</PageTitle>

<GenericDetailPageComponent TEntity="Weather" 
                           TService="IWeatherService"
                           EntityId="@WeatherId"
                           Entity="@weather"
                           Service="@WeatherService"
                           EntityName="天氣"
                           EntityNamePlural="天氣"
                           IndexRoute="/BOMFoundation/weather"
                           EditRoute="/BOMFoundation/weather/edit"
                           LoadingText="載入天氣資料中..."
                           BreadcrumbItems="@breadcrumbItems"
                           DataLoader="@LoadWeatherDataAsync"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           EntityTitleSelector="@(w => w.Name)"
                           EntitySubtitleSelector="@(w => $"天氣代碼：{w.Code ?? "未設定"}")"
                           EntityDisplayNameSelector="@(w => w.Name)"
                           OnDataLoaded="@OnWeatherDataLoaded"
                           UseTabLayout="true"
                           TabSections="@GetTabSections()">
</GenericDetailPageComponent>

@code {
    [Parameter] public int WeatherId { get; set; }

    private Weather? weather;
    private bool _isLoading = false;

    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new()
    {
        new("首頁", "/"),
        new("BOM 基礎資料", "/BOMFoundation"),
        new("天氣管理", "/BOMFoundation/weather"),
        new("天氣詳細資料")
    };

    // GenericDetailPageComponent 需要的方法
    private async Task<Weather?> LoadWeatherDataAsync()
    {
        if (_isLoading)
        {
            Console.WriteLine("[WeatherDetail] 載入中，跳過重複調用");
            return weather;
        }
        
        try
        {
            _isLoading = true;
            if (WeatherId <= 0) return null;
            
            var result = await WeatherService.GetByIdAsync(WeatherId);
            weather = result;
            return result;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"[WeatherDetail] 載入天氣資料失敗：{ex.Message}");
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Task LoadAdditionalDataAsync()
    {
        return Task.CompletedTask;
    }

    private Task OnWeatherDataLoaded()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    // 設定標籤頁結構
    private List<GenericDetailPageComponent<Weather, IWeatherService>.TabSection> GetTabSections()
    {
        return new List<GenericDetailPageComponent<Weather, IWeatherService>.TabSection>
        {            new GenericDetailPageComponent<Weather, IWeatherService>.TabSection
            {
                Id = "basic",
                Title = "基本資料",
                Content = @<div>
                    <BasicInfoDisplayComponent 
                        Title="天氣基本資訊"
                        IconClass="fas fa-cloud-sun"
                        IconColor="text-primary"
                        Fields="@GetWeatherBasicFields()"
                        ShowFieldCount="false"
                        DefaultColSize="6" />
                </div>
            },
              new GenericDetailPageComponent<Weather, IWeatherService>.TabSection
            {
                Id = "system",
                Title = "系統資訊",
                Content = @<div>
                    <SystemInfoDisplayComponent 
                        CreatedAt="@(weather?.CreatedAt ?? DateTime.MinValue)"
                        UpdatedAt="@weather?.UpdatedAt"
                        CreatedBy="@weather?.CreatedBy"
                        UpdatedBy="@weather?.UpdatedBy"
                        Remarks="@weather?.Remarks"
                        ShowTimeline="true"
                        ShowRemarks="true" />
                </div>
            }
        };
    }

    // 取得天氣基本資料欄位
    private IEnumerable<BasicInfoDisplayComponent.BasicInfoField> GetWeatherBasicFields()
    {
        return new List<BasicInfoDisplayComponent.BasicInfoField>
        {
            new()
            {
                Label = "天氣代碼",
                Value = weather?.Code,
                IsPrimary = true,
                EmptyText = "未設定",
                IconClass = "fas fa-barcode",
                IconBgClass = "bg-primary bg-opacity-10",
                IconTextClass = "text-primary",
                ColSize = 6
            },
            new()
            {
                Label = "天氣名稱",
                Value = weather?.Name,
                ValueBold = true,
                IconClass = "fas fa-cloud-sun",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 6
            },
            new()
            {
                Label = "圖示",
                Value = weather?.Icon,
                VisibilityCondition = () => !string.IsNullOrEmpty(weather?.Icon),
                IconClass = "fas fa-image",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary",
                ColSize = 6
            },
            new()
            {
                Label = "參考溫度",
                Value = weather?.ReferenceTemperature,
                Format = BasicInfoDisplayComponent.FieldFormat.Temperature,
                VisibilityCondition = () => weather?.ReferenceTemperature.HasValue == true,
                IconClass = "fas fa-thermometer-half",
                IconBgClass = "bg-warning bg-opacity-10",
                IconTextClass = "text-warning",
                ColSize = 6
            },
            new()
            {
                Label = "狀態",
                Type = BasicInfoDisplayComponent.FieldType.Status,
                Value = weather?.Status,
                IconClass = "fas fa-flag",
                IconBgClass = "bg-success bg-opacity-10",
                IconTextClass = "text-success",
                ColSize = 6
            },
            new()
            {
                Label = "描述",
                Value = weather?.Description,
                VisibilityCondition = () => !string.IsNullOrEmpty(weather?.Description),
                IconClass = "fas fa-align-left",
                IconBgClass = "bg-info bg-opacity-10",
                IconTextClass = "text-info",
                ColSize = 12
            },
            new()
            {
                Label = "備註",
                Value = weather?.Remarks,
                VisibilityCondition = () => !string.IsNullOrEmpty(weather?.Remarks),
                IconClass = "fas fa-sticky-note",
                IconBgClass = "bg-secondary bg-opacity-10",
                IconTextClass = "text-secondary",
                ColSize = 12
            }
        };
    }
}
