@page "/materials"
@page "/BOMFoundation/materials"
@using ERPCore2.Components.Shared
@inject IMaterialService MaterialService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>材質管理</PageTitle>

<GenericIndexPageComponent TEntity="Material" 
                          TService="IMaterialService"
                          Service="@MaterialService"
                          EntityBasePath="/BOMFoundation/materials"
                          PageTitle="材質管理"
                          PageSubtitle="管理所有材質資料與屬性設定"
                          PageIcon="layers-fill"
                          AddButtonText="新增材質"
                          AddButtonIcon="bi bi-plus-circle"
                          AddButtonTitle="新增材質資料"
                          SearchSectionTitle="材質搜尋與管理"
                          EmptyMessage="沒有找到符合條件的材質資料"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadMaterialsAsync"
                          FilterApplier="@ApplyMaterialFilters"
                          ActionsTemplate="@ActionsTemplate"
                          AutoSearch="true"
                          ShowSearchButton="true"
                          ShowAdvancedToggle="true"
                          SearchDelayMs="500"
                          @ref="indexComponent" />

@code {
    // 組件參考
    private GenericIndexPageComponent<Material, IMaterialService> indexComponent = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        InitializeBreadcrumbs();
        InitializeFilters();
        InitializeTableColumns();
    }

    private void InitializeBreadcrumbs()
    {
        breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
        {
            new("首頁", "/"),
            new("產品基礎元素", "/BOMFoundation"),
            new("材質管理")
        };
    }

    // 載入材質資料
    private async Task<List<Material>> LoadMaterialsAsync()
    {
        try
        {
            return await MaterialService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入材質資料失敗：", ex.Message);
            return new List<Material>();
        }
    }

    private void InitializeFilters()
    {
        // 準備狀態選項
        var statusOptions = new List<SelectOption>
        {
            new() { Text = "啟用", Value = EntityStatus.Active.ToString() },
            new() { Text = "停用", Value = EntityStatus.Inactive.ToString() }
        };

        // 準備環保選項
        var ecoFriendlyOptions = new List<SelectOption>
        {
            new() { Text = "是", Value = "true" },
            new() { Text = "否", Value = "false" }
        };

        // 建立篩選定義
        filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
            .AddText("Name", "材質名稱", "輸入材質名稱搜尋")
            .AddText("Code", "材質代碼", "輸入材質代碼搜尋")
            .AddText("Category", "材質類別", "輸入材質類別搜尋")
            .AddText("Description", "描述", "輸入描述搜尋")
            .AddSelect("Status", "狀態", statusOptions, isAdvanced: true)
            .AddSelect("IsEcoFriendly", "環保材質", ecoFriendlyOptions, isAdvanced: true)
            .Build();
    }

    private void InitializeTableColumns()
    {
        columnDefinitions = new List<TableColumnDefinition>
        {
            TableColumnDefinition.Text("材質代碼", nameof(Material.Code)),
            TableColumnDefinition.Text("材質名稱", nameof(Material.Name)),
            TableColumnDefinition.Text("類別", nameof(Material.Category)),
            TableColumnDefinition.Text("描述", nameof(Material.Description)),
            TableColumnDefinition.Template("密度", item => 
            {
                var material = (Material)item;
                return @<span>@(material.Density?.ToString("0.00") + " g/cm³" ?? "-")</span>;
            }),
            TableColumnDefinition.Template("環保", item => 
            {
                var material = (Material)item;
                return @<span>@(material.IsEcoFriendly ? "是" : "否")</span>;
            }),
            TableColumnDefinition.Status("狀態", nameof(Material.Status), new Dictionary<object, string>
            {
                { EntityStatus.Active, "bg-success" },
                { EntityStatus.Inactive, "bg-secondary" }
            }),
            TableColumnDefinition.Date("建立日期", nameof(Material.CreatedAt), "yyyy/MM/dd")
        };
    }

    // 自定義篩選邏輯
    private IQueryable<Material> ApplyMaterialFilters(SearchFilterModel searchModel, IQueryable<Material> query)
    {
        // 材質名稱篩選
        var nameFilter = searchModel.GetFilterValue("Name")?.ToString();
        if (!string.IsNullOrWhiteSpace(nameFilter))
        {
            query = query.Where(m => 
                m.Name.Contains(nameFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 材質代碼篩選
        var codeFilter = searchModel.GetFilterValue("Code")?.ToString();
        if (!string.IsNullOrWhiteSpace(codeFilter))
        {
            query = query.Where(m => 
                m.Code.Contains(codeFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 材質類別篩選
        var categoryFilter = searchModel.GetFilterValue("Category")?.ToString();
        if (!string.IsNullOrWhiteSpace(categoryFilter))
        {
            query = query.Where(m => 
                !string.IsNullOrEmpty(m.Category) && 
                m.Category.Contains(categoryFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 描述篩選
        var descriptionFilter = searchModel.GetFilterValue("Description")?.ToString();
        if (!string.IsNullOrWhiteSpace(descriptionFilter))
        {
            query = query.Where(m => 
                !string.IsNullOrEmpty(m.Description) && 
                m.Description.Contains(descriptionFilter, StringComparison.OrdinalIgnoreCase));
        }

        // 狀態篩選
        var statusFilter = searchModel.GetFilterValue("Status")?.ToString();
        if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<EntityStatus>(statusFilter, out var status))
        {
            query = query.Where(m => m.Status == status);
        }

        // 環保材質篩選
        var ecoFriendlyFilter = searchModel.GetFilterValue("IsEcoFriendly")?.ToString();
        if (!string.IsNullOrWhiteSpace(ecoFriendlyFilter) && bool.TryParse(ecoFriendlyFilter, out var isEcoFriendly))
        {
            query = query.Where(m => m.IsEcoFriendly == isEcoFriendly);
        }

        return query.OrderBy(m => m.Code);
    }

    // 事件處理
    private async Task HandleRowClick(Material material)
    {
        Navigation.NavigateTo($"/BOMFoundation/materials/detail/{material.Id}");
        await Task.CompletedTask;
    }

    // 刪除操作方法
    private async Task DeleteMaterial(Material material)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"確定要刪除材質「{material.Name}」嗎？");
        
        if (confirmed)
        {
            try
            {
                var result = await MaterialService.DeleteAsync(material.Id);
                if (result.IsSuccess)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "材質刪除成功");
                    // 觸發基底組件重新載入
                    await indexComponent.Refresh();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"刪除失敗：{result.ErrorMessage}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"刪除時發生錯誤：{ex.Message}");
            }
        }
    }

    // 表格操作範本
    private RenderFragment<Material> ActionsTemplate => material => 
        @<div class="btn-group btn-group-sm">
            <button class="btn btn-outline-primary" @onclick="() => indexComponent.NavigateToDetail(material)" title="檢視">
                <i class="bi bi-eye"></i>
            </button>
            <button class="btn btn-outline-warning" @onclick="() => indexComponent.NavigateToEdit(material)" title="編輯">
                <i class="bi bi-pencil"></i>
            </button>
            <button class="btn btn-outline-danger" @onclick="() => DeleteMaterial(material)" title="刪除">
                <i class="bi bi-trash"></i>
            </button>
        </div>;
}