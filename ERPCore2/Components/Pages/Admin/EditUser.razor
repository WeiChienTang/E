@page "/admin/users/{EmployeeId:int}/edit"
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Services.Interfaces
@using ERPCore2.Components.Shared.Headers
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.Loading
@using ERPCore2.Components.Shared
@inject IEmployeeService EmployeeService
@inject IRoleService RoleService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>編輯員工</PageTitle>

@* 頁面標題區 *@
<UnifiedHeaderComponent Title="編輯員工" 
                       IconClass="bi bi-person-gear"
                       IsCardHeader="false">
    <Actions>
        <ButtonComponent Text="檢視詳細" 
                        Variant="ButtonVariant.OutlineInfo" 
                        IconClass="bi bi-eye"
                        OnClick="ViewEmployee" />
        <ButtonComponent Text="返回列表" 
                        Variant="ButtonVariant.OutlineSecondary" 
                        IconClass="bi bi-arrow-left"
                        OnClick="Cancel" />
    </Actions>
</UnifiedHeaderComponent>

@* 麵包屑導航 *@
<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/admin/users" class="text-decoration-none">員工管理</a>
        </li>
        <li class="breadcrumb-item active">編輯員工</li>
    </ol>
</nav>

@if (isLoading)
{
    <LoadingComponent LoadingText="載入員工資料中..." />
}
else if (employee != null)
{
    @* 表單區域 *@
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-person-badge me-2"></i>員工基本資料
                    </h5>
                </div>
                <div class="card-body">
                    <AdminEmployeeFormComponent Employee="employee"
                                              Roles="roles"
                                              IsCreateMode="false"
                                              IsSubmitting="isSubmitting"
                                              SubmitButtonText="更新員工"
                                              OnSubmit="HandleSubmit"
                                              OnCancel="Cancel" />
                </div>
            </div>

            @* 密碼重設區域 *@
            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-key me-2"></i>密碼重設
                    </h5>
                </div>
                <div class="card-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        重設密碼後，員工需要使用新密碼重新登入
                    </div>

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">新密碼</label>
                            <input type="password" class="form-control" @bind="newPassword" placeholder="請輸入新密碼" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">確認密碼</label>
                            <input type="password" class="form-control" @bind="confirmNewPassword" placeholder="請再次輸入新密碼" />
                        </div>
                    </div>

                    <div class="mt-3">
                        <ButtonComponent Text="重設密碼" 
                                        Variant="ButtonVariant.Warning" 
                                        IconClass="bi bi-key"
                                        IsLoading="isResettingPassword"
                                        LoadingText="重設中..."
                                        OnClick="ResetPassword" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@* 錯誤訊息 *@
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        <i class="bi bi-exclamation-triangle me-2"></i>@errorMessage
    </div>
}

@* 成功訊息 *@
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-3">
        <i class="bi bi-check-circle me-2"></i>@successMessage
    </div>
}

@code {
    [Parameter] public int EmployeeId { get; set; }
    
    private Employee? employee;
    private List<Role>? roles;
    private string newPassword = string.Empty;
    private string confirmNewPassword = string.Empty;
    
    // 狀態管理
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool isResettingPassword = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployee();
        await LoadRoles();
    }

    private async Task LoadEmployee()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            employee = await EmployeeService.GetByIdAsync(EmployeeId);
            if (employee == null)
            {
                errorMessage = "找不到指定的員工";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"載入員工資料時發生錯誤：{ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }    private async Task LoadRoles()
    {
        try
        {
            var result = await RoleService.GetAllAsync();
            roles = result?.Where(r => r.Status == EntityStatus.Active).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入角色資料時發生錯誤：{ex.Message}");
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // 設定更新資訊
            employee!.UpdatedAt = DateTime.Now;
            employee.UpdatedBy = "System"; // TODO: 從身份驗証系統取得

            var result = await EmployeeService.UpdateAsync(employee);
            if (result.IsSuccess)
            {
                successMessage = "員工資料更新成功";
                await Task.Delay(1500); // 顯示成功訊息
                Navigation.NavigateTo($"/admin/users/{EmployeeId}");
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "更新員工資料失敗";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"更新員工資料時發生錯誤：{ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private Task ResetPassword()
    {
        try
        {
            isResettingPassword = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;            // 驗證密碼
            if (string.IsNullOrWhiteSpace(newPassword))
            {
                errorMessage = "請輸入新密碼";
                return Task.CompletedTask;
            }

            if (newPassword.Length < 8)
            {
                errorMessage = "密碼至少需要8個字元";
                return Task.CompletedTask;
            }

            if (newPassword != confirmNewPassword)
            {
                errorMessage = "密碼與確認密碼不一致";
                return Task.CompletedTask;
            }            // TODO: 實作密碼重設功能
            successMessage = "密碼重設功能尚未實作";
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            errorMessage = $"重設密碼時發生錯誤：{ex.Message}";
            return Task.CompletedTask;
        }
        finally
        {
            isResettingPassword = false;
        }
    }

    private void ViewEmployee()
    {
        Navigation.NavigateTo($"/admin/users/{EmployeeId}");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/admin/users");
    }
}
