@page "/generic-components-demo"
@using ERPCore2.Data.Entities
@using ERPCore2.Components.Shared.Tables
@using ERPCore2.Components.Shared.Forms
@inject IJSRuntime JSRuntime

<div class="container-fluid">
    <h1>通用組件示範</h1>
    
    <div class="row">
        <div class="col-12">
            <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                <strong>組件架構說明：</strong>
                此頁面展示了重構後的三個核心通用組件：
                <code>GenericTableComponent</code>、
                <code>GenericFormComponent</code> 和 
                <code>GenericSearchFilterComponent</code>。
                這些組件完全基於配置驅動，遵循 DRY 和 SOLID 原則。
            </div>
        </div>
    </div>

    @* 搜尋篩選區域 *@
    <div class="row mb-4">
        <div class="col-12">
            <GenericSearchFilterComponent TModel="CustomerSearchModel"
                                        FilterDefinitions="@searchFilterDefinitions"
                                        FilterModel="@searchModel"
                                        OnSearch="HandleSearch"
                                        ShowAdvancedToggle="true"
                                        ShowSearchButton="true"
                                        AutoSearch="false" />
        </div>
    </div>

    @* 資料表格區域 *@
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-table me-2"></i>
                        客戶清單 (@customers.Count 筆記錄)
                    </h6>
                </div>
                <div class="card-body p-0">
                    @if (!isLoading)
                    {
                        <GenericTableComponent TItem="Customer"
                                             Items="@customers"
                                             ColumnDefinitions="@tableColumnDefinitions"
                                             OnRowClick="HandleRowClick"
                                             AllowSorting="true"
                                             ShowRowNumbers="true"
                                             EmptyText="沒有找到符合條件的客戶資料"
                                             CssClass="table table-hover table-striped" />
                    }
                    else
                    {
                        <div class="p-4 text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">載入中...</span>
                            </div>
                            <p class="mt-2">載入客戶資料中...</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @* 表單示範區域 *@
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-form me-2"></i>
                        表單組件示範
                    </h6>
                </div>
                <div class="card-body">
                    <GenericFormComponent TModel="Customer"
                                        Model="@currentCustomer"
                                        FieldDefinitions="@formFieldDefinitions"
                                        OnValidSubmit="HandleFormSubmit"
                                        OnCancel="ResetForm"
                                        ShowSubmitButton="true"
                                        ShowCancelButton="true"
                                        SubmitButtonText="儲存"
                                        CancelButtonText="重設" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // 資料
    private List<Customer> customers = new();
    private Customer currentCustomer = new();
    private CustomerSearchModel searchModel = new();
    
    // 狀態
    private bool isLoading = true;
    
    // 配置定義
    private List<TableColumnDefinition> tableColumnDefinitions = new();
    private List<FormFieldDefinition> formFieldDefinitions = new();
    private List<SearchFilterDefinition> searchFilterDefinitions = new();

    protected override async Task OnInitializedAsync()
    {
        InitializeConfigurations();
        await LoadSampleDataAsync();
    }

    private void InitializeConfigurations()
    {
        // 配置表格欄位
        tableColumnDefinitions = new List<TableColumnDefinition>
        {
            new() { PropertyName = "Id", Header = "編號", DataType = ColumnDataType.Number, Width = "80px" },
            new() { PropertyName = "Code", Header = "客戶代碼", DataType = ColumnDataType.Text, IsSortable = true },
            new() { PropertyName = "Name", Header = "客戶名稱", DataType = ColumnDataType.Text, IsSortable = true },
            new() { PropertyName = "Email", Header = "電子郵件", DataType = ColumnDataType.Text },
            new() { PropertyName = "Phone", Header = "電話", DataType = ColumnDataType.Text },
            new() { PropertyName = "Status", Header = "狀態", DataType = ColumnDataType.Status, Width = "100px" },
            new() { PropertyName = "CreatedAt", Header = "建立時間", DataType = ColumnDataType.DateTime, IsSortable = true, Width = "120px" }
        };

        // 配置表單欄位
        formFieldDefinitions = new List<FormFieldDefinition>
        {
            new() { PropertyName = "Code", Label = "客戶代碼", Type = FormFieldType.Text, IsRequired = true, Placeholder = "請輸入客戶代碼", CssClass = "col-md-6" },
            new() { PropertyName = "Name", Label = "客戶名稱", Type = FormFieldType.Text, IsRequired = true, Placeholder = "請輸入客戶名稱", CssClass = "col-md-6" },
            new() { PropertyName = "Email", Label = "電子郵件", Type = FormFieldType.Email, Placeholder = "請輸入電子郵件", CssClass = "col-md-6" },
            new() { PropertyName = "Phone", Label = "電話號碼", Type = FormFieldType.Text, Placeholder = "請輸入電話號碼", CssClass = "col-md-6" },
            new() { PropertyName = "Address", Label = "地址", Type = FormFieldType.TextArea, Rows = 3, CssClass = "col-12" },
            new() { PropertyName = "ContactPerson", Label = "聯絡人", Type = FormFieldType.Text, Placeholder = "請輸入聯絡人姓名", CssClass = "col-md-6" },
            new() { PropertyName = "Status", Label = "狀態", Type = FormFieldType.Select, Options = GetStatusOptions(), CssClass = "col-md-6" }
        };

        // 配置搜尋篩選
        searchFilterDefinitions = new SearchFilterBuilder<CustomerSearchModel>()
            .AddText("Name", "客戶名稱", "輸入客戶名稱進行搜尋")
            .AddText("Code", "客戶代碼", "輸入客戶代碼進行搜尋")
            .AddSelect("Status", "狀態", GetStatusOptions())
            .AddText("Email", "電子郵件", "輸入電子郵件進行搜尋", isAdvanced: true)
            .AddText("Phone", "電話", "輸入電話號碼進行搜尋", isAdvanced: true)
            .AddDateRange("CreatedDateRange", "建立日期範圍", isAdvanced: true)
            .Build();
    }

    private List<SelectOption> GetStatusOptions()
    {
        return new List<SelectOption>
        {
            new() { Value = "", Text = "全部狀態" },
            new() { Value = "Active", Text = "啟用" },
            new() { Value = "Inactive", Text = "停用" },
            new() { Value = "Pending", Text = "待審核" }
        };
    }

    private async Task LoadSampleDataAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            // 模擬載入延遲
            await Task.Delay(1000);
            
            // 創建示範資料
            customers = new List<Customer>
            {
                new() { Id = 1, Code = "C001", Name = "示範客戶一", Email = "demo1@example.com", Phone = "02-12345678", Status = EntityStatus.Active, CreatedAt = DateTime.Now.AddDays(-30), Address = "台北市信義區", ContactPerson = "張先生" },
                new() { Id = 2, Code = "C002", Name = "示範客戶二", Email = "demo2@example.com", Phone = "02-87654321", Status = EntityStatus.Active, CreatedAt = DateTime.Now.AddDays(-20), Address = "台中市西屯區", ContactPerson = "李小姐" },
                new() { Id = 3, Code = "C003", Name = "示範客戶三", Email = "demo3@example.com", Phone = "07-11111111", Status = EntityStatus.Inactive, CreatedAt = DateTime.Now.AddDays(-10), Address = "高雄市前鎮區", ContactPerson = "王先生" }
            };
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "載入示範資料失敗", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSearch()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "搜尋功能執行", searchModel);
            // 這裡可以實作實際的搜尋邏輯
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "搜尋失敗", ex.Message);
        }
    }

    private async Task HandleRowClick(Customer customer)
    {
        currentCustomer = new Customer
        {
            Id = customer.Id,
            Code = customer.Code,
            Name = customer.Name,
            Email = customer.Email,
            Phone = customer.Phone,
            Address = customer.Address,
            ContactPerson = customer.ContactPerson,
            Status = customer.Status
        };
        
        await JSRuntime.InvokeVoidAsync("alert", $"點擊了客戶：{customer.Name}");
    }

    private async Task HandleFormSubmit()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", $"表單提交：{currentCustomer.Name}");
            await ResetForm();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"提交失敗：{ex.Message}");
        }
    }

    private async Task ResetForm()
    {
        currentCustomer = new Customer { Status = EntityStatus.Active };
        StateHasChanged();
    }

    // 搜尋模型類別
    public class CustomerSearchModel : SearchFilterModel
    {
    }
}
