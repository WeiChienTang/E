@page "/demo/forms/generic"
@using ERPCore2.Components.Shared.Forms
@using System.ComponentModel.DataAnnotations

<PageTitle>GenericFormComponent 示範</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>
                    <i class="fas fa-form me-2"></i>
                    GenericFormComponent 示範
                </h2>
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a href="/">首頁</a></li>
                        <li class="breadcrumb-item"><a href="/demo">組件示範</a></li>
                        <li class="breadcrumb-item active">表單組件</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>

    <!-- 基本表單示範 -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-edit me-2"></i>
                        基本表單
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted mb-4">展示基本的表單功能，包含各種輸入欄位類型</p>
                    
                    <GenericFormComponent TModel="PersonModel"
                                        Model="@personModel"
                                        FieldDefinitions="@personFormFields"
                                        FormTitle="人員資料表單"
                                        FormIconClass="fas fa-user"
                                        OnFormSubmit="HandlePersonSubmit"
                                        OnCancel="HandleCancel"
                                        IsSubmitting="@isSubmittingPerson">
                    </GenericFormComponent>
                </div>
            </div>
        </div>
    </div>

    <!-- 產品表單示範 -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-box me-2"></i>
                        產品管理表單
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted mb-4">展示更複雜的表單，包含分組欄位和進階功能</p>
                    
                    <GenericFormComponent TModel="ProductModel"
                                        Model="@productModel"
                                        FieldDefinitions="@productFormFields"
                                        FieldSections="@productSections"
                                        FormTitle="產品管理"
                                        FormIconClass="fas fa-box"
                                        OnFormSubmit="HandleProductSubmit"
                                        OnCancel="HandleCancel"
                                        IsSubmitting="@isSubmittingProduct"
                                        ShowResetButton="true">
                    </GenericFormComponent>
                </div>
            </div>
        </div>
    </div>

    <!-- 唯讀表單示範 -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-eye me-2"></i>
                        唯讀表單
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted mb-4">展示唯讀模式的表單顯示</p>
                    
                    <GenericFormComponent TModel="PersonModel"
                                        Model="@readOnlyPersonModel"
                                        FieldDefinitions="@readOnlyPersonFormFields"
                                        FormTitle="人員資料檢視"
                                        FormIconClass="fas fa-user-circle"
                                        ShowFormButtons="false"
                                        ShowFormHeader="true">
                    </GenericFormComponent>
                </div>
            </div>
        </div>
    </div>

    <!-- 自定義樣式表單 -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="card border-primary">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-palette me-2"></i>
                        自定義樣式表單
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted mb-4">展示自定義樣式和佈局的表單</p>
                    
                    <GenericFormComponent TModel="SettingsModel"
                                        Model="@settingsModel"
                                        FieldDefinitions="@settingsFormFields"
                                        FormTitle="系統設定"
                                        FormIconClass="fas fa-cogs"
                                        FormCssClass=""
                                        FormBodyCssClass=""
                                        FieldContainerCssClass="col-md-12"
                                        OnFormSubmit="HandleSettingsSubmit"
                                        ShowFormHeader="false"
                                        SubmitButtonText="儲存設定"
                                        CancelButtonText="復原"
                                        IsSubmitting="@isSubmittingSettings">
                    </GenericFormComponent>
                </div>
            </div>
        </div>
    </div>

    <!-- 提交結果顯示 -->
    @if (formResults.Any())
    {
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-check-circle me-2"></i>
                            表單提交結果
                        </h5>
                    </div>
                    <div class="card-body">
                        @foreach (var result in formResults.TakeLast(5))
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <strong>[@result.Time.ToString("HH:mm:ss")]</strong> @result.Message
                                <button type="button" class="btn-close" @onclick="() => RemoveResult(result)"></button>
                            </div>
                        }
                        
                        @if (formResults.Count > 5)
                        {
                            <div class="text-muted">
                                ... 還有 @(formResults.Count - 5) 筆較早的紀錄
                            </div>
                        }
                        
                        <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="ClearResults">
                            清除所有結果
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // 模型定義
    public class PersonModel
    {
        [Required(ErrorMessage = "姓名為必填")]
        public string Name { get; set; } = "";
        
        [EmailAddress(ErrorMessage = "請輸入有效的電子郵件")]
        public string Email { get; set; } = "";
        
        [Range(18, 100, ErrorMessage = "年齡必須在 18-100 之間")]
        public int Age { get; set; }
        
        public DateTime BirthDate { get; set; } = DateTime.Today.AddYears(-25);
        
        public string Phone { get; set; } = "";
        
        public string Department { get; set; } = "";
        
        public bool IsActive { get; set; } = true;
        
        public string Notes { get; set; } = "";
    }

    public class ProductModel
    {
        [Required(ErrorMessage = "產品名稱為必填")]
        public string Name { get; set; } = "";
        
        public string Code { get; set; } = "";
        
        [Range(0, double.MaxValue, ErrorMessage = "價格必須大於 0")]
        public decimal Price { get; set; }
        
        public string Category { get; set; } = "";
        
        public string Brand { get; set; } = "";
        
        public int StockQuantity { get; set; }
        
        public bool IsAvailable { get; set; } = true;
        
        public DateTime LaunchDate { get; set; } = DateTime.Today;
        
        public string Description { get; set; } = "";
        
        public string Specifications { get; set; } = "";
    }

    public class SettingsModel
    {
        public string CompanyName { get; set; } = "";
        public string Theme { get; set; } = "light";
        public string Language { get; set; } = "zh-TW";
        public bool EnableNotifications { get; set; } = true;
        public bool AutoSave { get; set; } = false;
        public int SessionTimeout { get; set; } = 30;
    }

    // 表單實例
    private PersonModel personModel = new();
    private ProductModel productModel = new();
    private PersonModel readOnlyPersonModel = new()
    {
        Name = "張小明",
        Email = "ming@example.com",
        Age = 30,
        BirthDate = new DateTime(1993, 5, 15),
        Phone = "0912-345-678",
        Department = "資訊部",
        IsActive = true,
        Notes = "資深系統工程師，負責後端開發"
    };
    private SettingsModel settingsModel = new();

    // 狀態變數
    private bool isSubmittingPerson = false;
    private bool isSubmittingProduct = false;
    private bool isSubmittingSettings = false;

    // 表單結果
    private List<FormResult> formResults = new();

    public class FormResult
    {
        public DateTime Time { get; set; }
        public string Message { get; set; } = "";
    }

    // 表單欄位定義
    private List<FormFieldDefinition> personFormFields = new();
    private List<FormFieldDefinition> productFormFields = new();
    private List<FormFieldDefinition> readOnlyPersonFormFields = new();
    private List<FormFieldDefinition> settingsFormFields = new();

    // 產品表單分組
    private Dictionary<string, string> productSections = new();

    protected override void OnInitialized()
    {
        InitializePersonFormFields();
        InitializeProductFormFields();
        InitializeReadOnlyPersonFormFields();
        InitializeSettingsFormFields();
        InitializeProductSections();
    }

    private void InitializePersonFormFields()
    {
        personFormFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = "Name",
                Label = "姓名",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入姓名",
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = "Email",
                Label = "電子郵件",
                FieldType = FormFieldType.Email,
                Placeholder = "user@example.com",
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = "Age",
                Label = "年齡",
                FieldType = FormFieldType.Number,
                Min = 18,
                Max = 100,
                ContainerCssClass = "col-md-4"
            },
            new()
            {
                PropertyName = "BirthDate",
                Label = "出生日期",
                FieldType = FormFieldType.Date,
                ContainerCssClass = "col-md-4"
            },
            new()
            {
                PropertyName = "Phone",
                Label = "電話",
                FieldType = FormFieldType.Text,
                Placeholder = "0912-345-678",
                ContainerCssClass = "col-md-4"
            },
            new()
            {
                PropertyName = "Department",
                Label = "部門",
                FieldType = FormFieldType.Select,                Options = new List<SelectOption>
                {
                    new() { Text = "資訊部", Value = "IT" },
                    new() { Text = "人事部", Value = "HR" },
                    new() { Text = "財務部", Value = "Finance" },
                    new() { Text = "業務部", Value = "Sales" },
                    new() { Text = "行銷部", Value = "Marketing" }
                },
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = "IsActive",
                Label = "是否在職",
                FieldType = FormFieldType.Checkbox,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = "Notes",
                Label = "備註",
                FieldType = FormFieldType.TextArea,
                Placeholder = "其他相關資訊...",
                Rows = 3,
                ContainerCssClass = "col-12"
            }
        };
    }

    private void InitializeProductFormFields()
    {
        productFormFields = new List<FormFieldDefinition>
        {
            // 基本資訊
            new()
            {
                PropertyName = "Name",
                Label = "產品名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入產品名稱",
                IsRequired = true,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = "Code",
                Label = "產品代碼",
                FieldType = FormFieldType.Text,
                Placeholder = "P001",
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = "Category",
                Label = "類別",
                FieldType = FormFieldType.Select,                Options = new List<SelectOption>
                {
                    new() { Text = "電子產品", Value = "Electronics" },
                    new() { Text = "服飾", Value = "Clothing" },
                    new() { Text = "書籍", Value = "Books" },
                    new() { Text = "家具", Value = "Furniture" },
                    new() { Text = "運動用品", Value = "Sports" }
                },
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = "Brand",
                Label = "品牌",
                FieldType = FormFieldType.Text,
                Placeholder = "品牌名稱",
                ContainerCssClass = "col-md-6"
            },
            
            // 價格與庫存
            new()
            {
                PropertyName = "Price",
                Label = "價格",
                FieldType = FormFieldType.Number,
                Min = 0,
                Step = 0.01m,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = "StockQuantity",
                Label = "庫存數量",
                FieldType = FormFieldType.Number,
                Min = 0,
                ContainerCssClass = "col-md-6"
            },
            
            // 狀態與日期
            new()
            {
                PropertyName = "IsAvailable",
                Label = "是否可販售",
                FieldType = FormFieldType.Checkbox,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = "LaunchDate",
                Label = "上市日期",
                FieldType = FormFieldType.Date,
                ContainerCssClass = "col-md-6"
            },
            
            // 詳細資訊
            new()
            {
                PropertyName = "Description",
                Label = "產品描述",
                FieldType = FormFieldType.TextArea,
                Placeholder = "產品的詳細描述...",
                Rows = 4,
                ContainerCssClass = "col-12"
            },
            new()
            {
                PropertyName = "Specifications",
                Label = "產品規格",
                FieldType = FormFieldType.TextArea,
                Placeholder = "詳細規格說明...",
                Rows = 3,
                ContainerCssClass = "col-12"
            }
        };
    }

    private void InitializeReadOnlyPersonFormFields()
    {
        readOnlyPersonFormFields = personFormFields.Select(field => new FormFieldDefinition
        {
            PropertyName = field.PropertyName,
            Label = field.Label,
            FieldType = field.FieldType,
            Options = field.Options,
            ContainerCssClass = field.ContainerCssClass,
            IsReadOnly = true
        }).ToList();
    }

    private void InitializeSettingsFormFields()
    {
        settingsFormFields = new List<FormFieldDefinition>
        {
            new()
            {
                PropertyName = "CompanyName",
                Label = "公司名稱",
                FieldType = FormFieldType.Text,
                Placeholder = "請輸入公司名稱",
                ContainerCssClass = "col-12"
            },
            new()
            {
                PropertyName = "Theme",
                Label = "主題",
                FieldType = FormFieldType.Select,                Options = new List<SelectOption>
                {
                    new() { Text = "淺色主題", Value = "light" },
                    new() { Text = "深色主題", Value = "dark" },
                    new() { Text = "自動", Value = "auto" }
                },
                ContainerCssClass = "col-md-4"
            },
            new()
            {
                PropertyName = "Language",
                Label = "語言",
                FieldType = FormFieldType.Select,                Options = new List<SelectOption>
                {
                    new() { Text = "繁體中文", Value = "zh-TW" },
                    new() { Text = "簡體中文", Value = "zh-CN" },
                    new() { Text = "English", Value = "en-US" },
                    new() { Text = "日本語", Value = "ja-JP" }
                },
                ContainerCssClass = "col-md-4"
            },
            new()
            {
                PropertyName = "SessionTimeout",
                Label = "工作階段逾時 (分鐘)",
                FieldType = FormFieldType.Number,
                Min = 5,
                Max = 480,
                ContainerCssClass = "col-md-4"
            },
            new()
            {
                PropertyName = "EnableNotifications",
                Label = "啟用通知",
                FieldType = FormFieldType.Checkbox,
                ContainerCssClass = "col-md-6"
            },
            new()
            {
                PropertyName = "AutoSave",
                Label = "自動儲存",
                FieldType = FormFieldType.Checkbox,
                ContainerCssClass = "col-md-6"
            }
        };
    }

    private void InitializeProductSections()
    {
        productSections = new Dictionary<string, string>
        {
            { "Name", "基本資訊" },
            { "Code", "基本資訊" },
            { "Category", "基本資訊" },
            { "Brand", "基本資訊" },
            { "Price", "價格與庫存" },
            { "StockQuantity", "價格與庫存" },
            { "IsAvailable", "狀態設定" },
            { "LaunchDate", "狀態設定" },
            { "Description", "詳細資訊" },
            { "Specifications", "詳細資訊" }
        };
    }

    // 事件處理
    private async Task HandlePersonSubmit(PersonModel model)
    {
        isSubmittingPerson = true;
        StateHasChanged();

        // 模擬 API 呼叫
        await Task.Delay(1500);

        formResults.Add(new FormResult
        {
            Time = DateTime.Now,
            Message = $"人員資料已提交：{model.Name} ({model.Email})"
        });

        isSubmittingPerson = false;
        StateHasChanged();
    }

    private async Task HandleProductSubmit(ProductModel model)
    {
        isSubmittingProduct = true;
        StateHasChanged();

        // 模擬 API 呼叫
        await Task.Delay(2000);

        formResults.Add(new FormResult
        {
            Time = DateTime.Now,
            Message = $"產品資料已提交：{model.Name} (價格: ${model.Price:N2})"
        });

        isSubmittingProduct = false;
        StateHasChanged();
    }

    private async Task HandleSettingsSubmit(SettingsModel model)
    {
        isSubmittingSettings = true;
        StateHasChanged();

        // 模擬 API 呼叫
        await Task.Delay(1000);

        formResults.Add(new FormResult
        {
            Time = DateTime.Now,
            Message = $"系統設定已儲存：主題 {model.Theme}，語言 {model.Language}"
        });

        isSubmittingSettings = false;
        StateHasChanged();
    }

    private Task HandleCancel()
    {
        formResults.Add(new FormResult
        {
            Time = DateTime.Now,
            Message = "使用者取消了操作"
        });

        StateHasChanged();
        return Task.CompletedTask;
    }

    private void RemoveResult(FormResult result)
    {
        formResults.Remove(result);
        StateHasChanged();
    }

    private void ClearResults()
    {
        formResults.Clear();
        StateHasChanged();
    }
}
