@page "/test/sales-product-manager"
@using ERPCore2.Data.Entities
@using ERPCore2.Data.Enums
@using ERPCore2.Data.Context
@using ERPCore2.Components.Shared.SubCollections
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext

<PageTitle>銷貨訂單商品管理測試頁面</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">銷貨訂單商品管理測試</h5>
                </div>
                <div class="card-body">
                    <!-- 測試資訊顯示 -->
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <strong>測試銷貨單：</strong> @(testSalesOrder?.SalesOrderNumber ?? "尚未建立")
                        </div>
                        <div class="col-md-6">
                            <strong>明細數量：</strong> @salesOrderDetails.Count 筆
                        </div>
                    </div>

                    <!-- 操作按鈕 -->
                    <div class="mb-3">
                        <button class="btn btn-primary me-2" @onclick="CreateTestSalesOrder">
                            建立測試銷貨訂單
                        </button>
                        <button class="btn btn-success me-2" @onclick="SaveDetails" disabled="@(testSalesOrder == null)">
                            儲存明細
                        </button>
                        <button class="btn btn-warning me-2" @onclick="LoadExistingDetails" disabled="@(testSalesOrder == null)">
                            載入現有明細
                        </button>
                        <button class="btn btn-danger" @onclick="ClearTest">
                            清除測試資料
                        </button>
                    </div>

                    <!-- 商品管理組件 - 泛型版本 (銷貨訂單) -->
                    <ProductManagerComponent TMainEntity="SalesOrder" 
                                           TDetailEntity="SalesOrderDetail"
                                           Products="@products"
                                           MainEntity="@testSalesOrder"
                                           ExistingDetails="@salesOrderDetails"
                                           OnDetailsChanged="@HandleDetailsChanged"
                                           MainEntityIdPropertyName="SalesOrderId"
                                           QuantityPropertyName="OrderQuantity"
                                           UnitPricePropertyName="UnitPrice"
                                           RemarksPropertyName="DetailRemarks"
                                           QuantityLabel="銷售數量"
                                           PriceLabel="銷售單價"
                                           RemarksLabel="銷售備註" />
                                           
                    <!-- 測試結果顯示 -->
                    @if (salesOrderDetails.Any())
                    {
                        <div class="mt-4">
                            <h6>目前明細資料：</h6>
                            <div class="table-responsive">
                                <table class="table table-sm table-striped">
                                    <thead>
                                        <tr>
                                            <th>商品編號</th>
                                            <th>商品名稱</th>
                                            <th>銷售數量</th>
                                            <th>銷售單價</th>
                                            <th>小計</th>
                                            <th>備註</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var detail in salesOrderDetails)
                                        {
                                            var product = products.FirstOrDefault(p => p.Id == detail.ProductId);
                                            <tr>
                                                <td>@product?.Code</td>
                                                <td>@product?.Name</td>
                                                <td>@detail.OrderQuantity</td>
                                                <td>@detail.UnitPrice.ToString("C")</td>
                                                <td>@detail.Subtotal.ToString("C")</td>
                                                <td>@detail.DetailRemarks</td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr class="table-secondary">
                                            <th colspan="4">總計</th>
                                            <th>@salesOrderDetails.Sum(d => d.Subtotal).ToString("C")</th>
                                            <th></th>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Product> products = new List<Product>();
    private SalesOrder? testSalesOrder = null;
    private List<SalesOrderDetail> salesOrderDetails = new List<SalesOrderDetail>();

    protected override async Task OnInitializedAsync()
    {
        // 從資料庫取得商品資料
        products = await DbContext.Products
            .Where(p => p.Status == EntityStatus.Active)
            .OrderBy(p => p.Code)
            .ToListAsync();
    }

    /// <summary>
    /// 建立測試用的銷貨訂單
    /// </summary>
    private async Task CreateTestSalesOrder()
    {
        try
        {
            // 檢查是否已有客戶，如果沒有就建立一個測試客戶
            var customer = await DbContext.Customers.FirstOrDefaultAsync();
            if (customer == null)
            {
                customer = new Customer
                {
                    Code = "CUST001",
                    CompanyName = "測試客戶",
                    Status = EntityStatus.Active
                };
                DbContext.Customers.Add(customer);
                await DbContext.SaveChangesAsync();
            }

            // 建立測試銷貨訂單
            testSalesOrder = new SalesOrder
            {
                SalesOrderNumber = $"SO{DateTime.Now:yyyyMMddHHmmss}",
                OrderDate = DateTime.Today,
                CustomerId = customer.Id,
                Status = EntityStatus.Active,
                SalesPersonnel = "測試銷售員",
                OrderRemarks = "測試用銷貨訂單"
            };

            DbContext.SalesOrders.Add(testSalesOrder);
            await DbContext.SaveChangesAsync();

            // 清空現有明細
            salesOrderDetails.Clear();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"建立測試銷貨訂單時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理明細變更事件
    /// </summary>
    private void HandleDetailsChanged(List<SalesOrderDetail> details)
    {
        salesOrderDetails = details ?? new List<SalesOrderDetail>();
        StateHasChanged();
    }

    /// <summary>
    /// 儲存明細到資料庫
    /// </summary>
    private async Task SaveDetails()
    {
        if (testSalesOrder == null) return;

        try
        {
            // 取得資料庫中現有的明細
            var existingDetails = await DbContext.SalesOrderDetails
                .Where(d => d.SalesOrderId == testSalesOrder.Id)
                .ToListAsync();

            // 刪除不在新清單中的明細
            var detailsToRemove = existingDetails
                .Where(existing => !salesOrderDetails.Any(newDetail => 
                    newDetail.Id > 0 && newDetail.Id == existing.Id))
                .ToList();

            DbContext.SalesOrderDetails.RemoveRange(detailsToRemove);

            // 更新或新增明細
            foreach (var detail in salesOrderDetails)
            {
                if (detail.Id > 0)
                {
                    // 更新現有明細
                    var existingDetail = existingDetails.FirstOrDefault(d => d.Id == detail.Id);
                    if (existingDetail != null)
                    {
                        existingDetail.OrderQuantity = detail.OrderQuantity;
                        existingDetail.UnitPrice = detail.UnitPrice;
                        existingDetail.DetailRemarks = detail.DetailRemarks;
                        existingDetail.Subtotal = detail.OrderQuantity * detail.UnitPrice;
                        existingDetail.UpdatedAt = DateTime.Now;
                    }
                }
                else
                {
                    // 新增明細
                    detail.SalesOrderId = testSalesOrder.Id;
                    detail.Subtotal = detail.OrderQuantity * detail.UnitPrice;
                    detail.CreatedAt = DateTime.Now;
                    detail.Status = EntityStatus.Active;
                    DbContext.SalesOrderDetails.Add(detail);
                }
            }

            // 更新銷貨訂單總金額
            testSalesOrder.TotalAmount = salesOrderDetails.Sum(d => d.Subtotal);
            testSalesOrder.UpdatedAt = DateTime.Now;

            await DbContext.SaveChangesAsync();

            Console.WriteLine($"成功儲存 {salesOrderDetails.Count} 筆明細");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"儲存明細時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 載入現有明細
    /// </summary>
    private async Task LoadExistingDetails()
    {
        if (testSalesOrder == null) return;

        try
        {
            salesOrderDetails = await DbContext.SalesOrderDetails
                .Where(d => d.SalesOrderId == testSalesOrder.Id)
                .Include(d => d.Product)
                .ToListAsync();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入現有明細時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 清除測試資料
    /// </summary>
    private async Task ClearTest()
    {
        try
        {
            if (testSalesOrder != null)
            {
                // 刪除明細
                var details = await DbContext.SalesOrderDetails
                    .Where(d => d.SalesOrderId == testSalesOrder.Id)
                    .ToListAsync();
                DbContext.SalesOrderDetails.RemoveRange(details);

                // 刪除銷貨訂單
                DbContext.SalesOrders.Remove(testSalesOrder);

                await DbContext.SaveChangesAsync();
            }

            // 重置狀態
            testSalesOrder = null;
            salesOrderDetails.Clear();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"清除測試資料時發生錯誤：{ex.Message}");
        }
    }
}
