@* 印表機測試頁面 - 用於展示和測試印表機測試功能 *@
@page "/printer-test"
@inject IPrinterTestService PrinterTestService
@inject INotificationService NotificationService

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title mb-0">
                        <i class="fas fa-print me-2"></i>
                        印表機測試功能展示
                    </h4>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h5>網路印表機測試</h5>
                            <div class="mb-3">
                                <label class="form-label">IP位址</label>
                                <input type="text" class="form-control" @bind="networkPrinter.IpAddress" placeholder="192.168.1.100" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">連接埠</label>
                                <input type="number" class="form-control" @bind="networkPrinter.Port" placeholder="9100" />
                            </div>
                            <button class="btn btn-primary" @onclick="TestNetworkPrinter" disabled="@isTestingNetwork">
                                @if (isTestingNetwork)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>測試中...</span>
                                }
                                else
                                {
                                    <i class="fas fa-network-wired me-2"></i>
                                    <span>測試網路印表機</span>
                                }
                            </button>
                        </div>

                        <div class="col-md-6">
                            <h5>USB印表機測試</h5>
                            <div class="mb-3">
                                <label class="form-label">USB埠</label>
                                <select class="form-select" @bind="usbPrinter.UsbPort">
                                    <option value="LPT1">LPT1</option>
                                    <option value="LPT2">LPT2</option>
                                    <option value="USB001">USB001</option>
                                    <option value="USB002">USB002</option>
                                </select>
                            </div>
                            <button class="btn btn-success" @onclick="TestUsbPrinter" disabled="@isTestingUsb">
                                @if (isTestingUsb)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                    <span>測試中...</span>
                                }
                                else
                                {
                                    <i class="fas fa-usb me-2"></i>
                                    <span>測試USB印表機</span>
                                }
                            </button>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(testResult))
                    {
                        <div class="mt-4">
                            <h5>測試結果</h5>
                            <div class="alert @(isLastTestSuccess ? "alert-success" : "alert-danger")">
                                <pre>@testResult</pre>
                            </div>
                        </div>
                    }

                    <div class="mt-4">
                        <h5>測試頁預覽</h5>
                        <div class="border p-3 bg-light">
                            <pre>@testPageContent</pre>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private PrinterConfiguration networkPrinter = new()
    {
        Name = "網路測試印表機",
        ConnectionType = PrinterConnectionType.Network,
        IpAddress = "192.168.1.100",
        Port = 9100
    };

    private PrinterConfiguration usbPrinter = new()
    {
        Name = "USB測試印表機",
        ConnectionType = PrinterConnectionType.USB,
        UsbPort = "LPT1"
    };

    private bool isTestingNetwork = false;
    private bool isTestingUsb = false;
    private string testResult = string.Empty;
    private bool isLastTestSuccess = false;
    private string testPageContent = string.Empty;

    protected override void OnInitialized()
    {
        // 產生測試頁預覽
        testPageContent = PrinterTestService.GenerateTestPageContent(networkPrinter);
    }

    private async Task TestNetworkPrinter()
    {
        if (string.IsNullOrWhiteSpace(networkPrinter.IpAddress))
        {
            await NotificationService.ShowErrorAsync("請輸入IP位址");
            return;
        }

        if (!networkPrinter.Port.HasValue || networkPrinter.Port <= 0)
        {
            await NotificationService.ShowErrorAsync("請輸入有效的連接埠");
            return;
        }

        isTestingNetwork = true;
        testResult = string.Empty;
        StateHasChanged();

        try
        {
            await NotificationService.ShowInfoAsync("開始測試網路印表機...");
            
            var result = await PrinterTestService.TestPrintAsync(networkPrinter);
            
            isLastTestSuccess = result.IsSuccess;
            
            if (result.IsSuccess)
            {
                testResult = $"✅ 網路印表機測試成功！\n" +
                           $"IP位址: {networkPrinter.IpAddress}\n" +
                           $"連接埠: {networkPrinter.Port}\n" +
                           $"測試時間: {DateTime.Now:yyyy-MM-dd HH:mm:ss}";
                           
                await NotificationService.ShowSuccessAsync("網路印表機測試成功！");
            }
            else
            {
                testResult = $"❌ 網路印表機測試失敗\n" +
                           $"錯誤訊息: {result.ErrorMessage}\n" +
                           $"IP位址: {networkPrinter.IpAddress}\n" +
                           $"連接埠: {networkPrinter.Port}\n" +
                           $"測試時間: {DateTime.Now:yyyy-MM-dd HH:mm:ss}";
                           
                await NotificationService.ShowErrorAsync($"網路印表機測試失敗: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            isLastTestSuccess = false;
            testResult = $"❌ 測試過程發生錯誤\n" +
                       $"錯誤訊息: {ex.Message}\n" +
                       $"測試時間: {DateTime.Now:yyyy-MM-dd HH:mm:ss}";
                       
            await NotificationService.ShowErrorAsync($"測試過程發生錯誤: {ex.Message}");
        }
        finally
        {
            isTestingNetwork = false;
            StateHasChanged();
        }
    }

    private async Task TestUsbPrinter()
    {
        if (string.IsNullOrWhiteSpace(usbPrinter.UsbPort))
        {
            await NotificationService.ShowErrorAsync("請選擇USB埠");
            return;
        }

        isTestingUsb = true;
        testResult = string.Empty;
        StateHasChanged();

        try
        {
            await NotificationService.ShowInfoAsync("開始測試USB印表機...");
            
            var result = await PrinterTestService.TestPrintAsync(usbPrinter);
            
            isLastTestSuccess = result.IsSuccess;
            
            if (result.IsSuccess)
            {
                testResult = $"✅ USB印表機測試成功！\n" +
                           $"USB埠: {usbPrinter.UsbPort}\n" +
                           $"測試時間: {DateTime.Now:yyyy-MM-dd HH:mm:ss}";
                           
                await NotificationService.ShowSuccessAsync("USB印表機測試成功！");
            }
            else
            {
                testResult = $"❌ USB印表機測試失敗\n" +
                           $"錯誤訊息: {result.ErrorMessage}\n" +
                           $"USB埠: {usbPrinter.UsbPort}\n" +
                           $"測試時間: {DateTime.Now:yyyy-MM-dd HH:mm:ss}";
                           
                await NotificationService.ShowErrorAsync($"USB印表機測試失敗: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            isLastTestSuccess = false;
            testResult = $"❌ 測試過程發生錯誤\n" +
                       $"錯誤訊息: {ex.Message}\n" +
                       $"測試時間: {DateTime.Now:yyyy-MM-dd HH:mm:ss}";
                       
            await NotificationService.ShowErrorAsync($"測試過程發生錯誤: {ex.Message}");
        }
        finally
        {
            isTestingUsb = false;
            StateHasChanged();
        }
    }
}
