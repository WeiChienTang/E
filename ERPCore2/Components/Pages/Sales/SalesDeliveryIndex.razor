@page "/sales-deliveries"
@inject ISalesDeliveryService SalesDeliveryService
@inject ISalesOrderService SalesOrderService
@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="SalesDelivery" 
                          TService="ISalesDeliveryService"
                          Service="@SalesDeliveryService"
                          EntityBasePath="/sales-deliveries"
                          PageTitle="銷貨出貨管理"
                          PageSubtitle="管理所有銷貨出貨與配送資料"
                          EntityName="銷貨出貨"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSalesDeliveriesAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplySalesDeliveryFilters"
                          GetEntityDisplayName="@(delivery => delivery.DeliveryNumber)"
                          RequiredPermission="SalesDelivery.Read"
                          @ref="indexPageRef" />

@code {
    // 組件參考
    private GenericIndexPageComponent<SalesDelivery, ISalesDeliveryService> indexPageRef = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 選項清單
    private List<SelectOption> salesOrderOptions = new();
    private List<SelectOption> employeeOptions = new();
    private List<SelectOption> statusOptions = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeBasicFilters();
            InitializeColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitialized),
                GetType(),
                additionalData: "初始化銷貨出貨頁面失敗"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("銷貨管理", "/"),
                new("銷貨出貨", "/sales-deliveries")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化麵包屑失敗"
            );
        }
    }

    private void InitializeBasicFilters()
    {
        try
        {
            // 建立基本篩選定義（不包含下拉選單選項，這些將在 LoadBasicDataAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SearchTerm", "搜尋", "請輸入出貨單號、銷貨單號、追蹤號碼...")
                .AddSelect("SalesOrderId", "銷貨訂單", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("EmployeeId", "出貨人員", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("DeliveryStatus", "出貨狀態", new List<SelectOption>()) // 空的選項，稍後載入
                .AddDateRange("DeliveryDateRange", "出貨日期")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBasicFilters),
                GetType(),
                additionalData: "初始化基本篩選器失敗"
            );
            
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 載入銷貨訂單選項
            var salesOrders = await SalesOrderService.GetAllAsync();
            salesOrderOptions = salesOrders
                .Where(so => !so.IsDeleted)
                .OrderBy(so => so.SalesOrderNumber)
                .Select(so => new SelectOption 
                { 
                    Value = so.Id.ToString(),
                    Text = $"{so.SalesOrderNumber} - {so.Customer?.CompanyName ?? "未知客戶"}"
                })
                .ToList();

            // 載入員工選項
            var employees = await EmployeeService.GetAllAsync();
            employeeOptions = employees
                .Where(e => !e.IsDeleted && e.Status == EntityStatus.Active)
                .OrderBy(e => e.FirstName)
                .ThenBy(e => e.LastName)
                .Select(e => new SelectOption 
                { 
                    Value = e.Id.ToString(),
                    Text = $"{e.FirstName} {e.LastName}"
                })
                .ToList();

            // 準備出貨狀態選項
            statusOptions = Enum.GetValues<SalesDeliveryStatus>()
                .Select(status => new SelectOption
                {
                    Value = status.ToString(),
                    Text = GetDeliveryStatusDisplayName(status)
                })
                .ToList();

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SearchTerm", "搜尋", "請輸入出貨單號、銷貨單號、追蹤號碼...")
                .AddSelect("SalesOrderId", "銷貨訂單", salesOrderOptions)
                .AddSelect("EmployeeId", "出貨人員", employeeOptions)
                .AddSelect("DeliveryStatus", "出貨狀態", statusOptions)
                .AddDateRange("DeliveryDateRange", "出貨日期")
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，刷新組件以更新篩選器
            if (indexPageRef != null)
            {
                await indexPageRef.Refresh();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadBasicDataAsync),
                GetType(),
                additionalData: "載入基礎資料失敗"
            );
        }
    }

    private async Task<List<SalesDelivery>> LoadSalesDeliveriesAsync()
    {
        try
        {
            return await SalesDeliveryService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadSalesDeliveriesAsync), 
                GetType(),
                additionalData: new { PageName = "SalesDeliveryIndex", Action = "LoadSalesDeliveriesAsync" });
            
            StateHasChanged();
            return new List<SalesDelivery>();
        }
    }

    private IQueryable<SalesDelivery> ApplySalesDeliveryFilters(SearchFilterModel searchModel, IQueryable<SalesDelivery> query)
    {
        try
        {
            // 文字搜尋篩選
            var searchTerm = searchModel.GetFilterValue("SearchTerm")?.ToString();
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var lowerSearchTerm = searchTerm.ToLower();
                query = query.Where(sd => 
                    sd.DeliveryNumber.ToLower().Contains(lowerSearchTerm) ||
                    sd.SalesOrder.SalesOrderNumber.ToLower().Contains(lowerSearchTerm) ||
                    sd.SalesOrder.Customer.CompanyName.ToLower().Contains(lowerSearchTerm) ||
                    (sd.DeliveryPersonnel != null && sd.DeliveryPersonnel.ToLower().Contains(lowerSearchTerm)) ||
                    (sd.TrackingNumber != null && sd.TrackingNumber.ToLower().Contains(lowerSearchTerm)));
            }

            // 銷貨訂單篩選
            var salesOrderIdFilter = searchModel.GetFilterValue("SalesOrderId")?.ToString();
            if (!string.IsNullOrWhiteSpace(salesOrderIdFilter) && int.TryParse(salesOrderIdFilter, out var salesOrderId))
            {
                query = query.Where(sd => sd.SalesOrderId == salesOrderId);
            }

            // 出貨人員篩選
            var employeeIdFilter = searchModel.GetFilterValue("EmployeeId")?.ToString();
            if (!string.IsNullOrWhiteSpace(employeeIdFilter) && int.TryParse(employeeIdFilter, out var employeeId))
            {
                query = query.Where(sd => sd.EmployeeId == employeeId);
            }

            // 出貨狀態篩選
            var statusFilter = searchModel.GetFilterValue("DeliveryStatus")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<SalesDeliveryStatus>(statusFilter, out var status))
            {
                query = query.Where(sd => sd.DeliveryStatus == status);
            }

            // 日期範圍篩選
            var dateRange = searchModel.GetFilterValue("DeliveryDateRange") as DateRange;
            if (dateRange != null)
            {
                if (dateRange.StartDate.HasValue)
                {
                    query = query.Where(sd => sd.DeliveryDate >= dateRange.StartDate.Value);
                }
                if (dateRange.EndDate.HasValue)
                {
                    query = query.Where(sd => sd.DeliveryDate <= dateRange.EndDate.Value);
                }
            }

            return query.OrderByDescending(sd => sd.DeliveryDate)
                        .ThenBy(sd => sd.DeliveryNumber);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplySalesDeliveryFilters),
                GetType(),
                additionalData: new { 
                    SearchModel = searchModel, 
                    PageName = "SalesDeliveryIndex", 
                    Action = "ApplySalesDeliveryFilters" 
                });
            return query; // 回傳原始查詢作為後備
        }
    }

    private void InitializeColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryNumber),
                    Title = "出貨單號",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 120px"
                },
                new()
                {
                    PropertyName = "SalesOrder.SalesOrderNumber",
                    Title = "銷貨單號",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 120px"
                },
                new()
                {
                    PropertyName = "SalesOrder.Customer.CompanyName",
                    Title = "客戶名稱",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 150px"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryDate),
                    Title = "出貨日期",
                    DataType = ColumnDataType.Date,
                    IsSortable = true,
                    HeaderStyle = "width: 100px"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.ExpectedArrivalDate),
                    Title = "預計送達",
                    DataType = ColumnDataType.Date,
                    IsSortable = true,
                    HeaderStyle = "width: 100px"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryStatus),
                    Title = "出貨狀態",
                    DataType = ColumnDataType.Status,
                    IsSortable = true,
                    HeaderStyle = "width: 100px",
                    StatusBadgeMap = new Dictionary<object, string>
                    {
                        { SalesDeliveryStatus.Pending, "badge-warning" },
                        { SalesDeliveryStatus.Preparing, "badge-info" },
                        { SalesDeliveryStatus.Delivered, "badge-primary" },
                        { SalesDeliveryStatus.Received, "badge-success" },
                        { SalesDeliveryStatus.Cancelled, "badge-danger" }
                    }
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryPersonnel),
                    Title = "出貨人員",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 100px"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.TrackingNumber),
                    Title = "追蹤號碼",
                    DataType = ColumnDataType.Text,
                    IsSortable = false,
                    HeaderStyle = "width: 120px"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.ShippingMethod),
                    Title = "運送方式",
                    DataType = ColumnDataType.Text,
                    IsSortable = false,
                    HeaderStyle = "width: 100px"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.ActualArrivalDate),
                    Title = "實際送達",
                    DataType = ColumnDataType.Date,
                    IsSortable = true,
                    HeaderStyle = "width: 100px"
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
            
            // 設定安全的預設值
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }

    private static string GetDeliveryStatusDisplayName(SalesDeliveryStatus status)
    {
        return status switch
        {
            SalesDeliveryStatus.Pending => "待出貨",
            SalesDeliveryStatus.Preparing => "備貨中",
            SalesDeliveryStatus.Delivered => "已出貨",
            SalesDeliveryStatus.Received => "已送達",
            SalesDeliveryStatus.Cancelled => "已取消",
            _ => status.ToString()
        };
    }
}
