@page "/sales-deliveries/edit"
@page "/sales-deliveries/edit/{id:int?}"

@inject ISalesDeliveryService SalesDeliveryService
@inject ISalesOrderService SalesOrderService
@inject IEmployeeService EmployeeService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="SalesDelivery" 
                        TService="ISalesDeliveryService"
                        Id="@Id"
                        Entity="@salesDelivery"
                        Service="@SalesDeliveryService"
                        EntityName="銷貨出貨"
                        EntityNamePlural="銷貨出貨"
                        PageTitle="@(Id.HasValue ? "編輯銷貨出貨" : "新增銷貨出貨")"
                        FormTitle="基本資料"
                        FormSubtitle="銷貨出貨的基本資訊"
                        RequiredPermission="SalesDelivery.Read"
                        IndexRoute="/sales-deliveries"
                        FormFields="@formFields"
                        FormSections="@formSections"
                        BreadcrumbItems="@breadcrumbItems"
                        DataLoader="@LoadSalesDeliveryData"
                        AdditionalDataLoader="@LoadAdditionalData"
                        @ref="editComponent">
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<SalesDelivery, ISalesDeliveryService> editComponent = default!;
    
    // 資料模型
    private SalesDelivery salesDelivery = new();
    
    // 選項清單
    private List<SalesOrder> salesOrders = new();
    private List<Employee> employees = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            await InitializeDefaultValues();
            InitializeBasicFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnInitializedAsync), 
                GetType()
            );
            
            // 確保基本初始化完成，避免程式崩潰
            breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
            formFields ??= new List<FormFieldDefinition>();
            formSections ??= new Dictionary<string, string>();
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new() { Text = "首頁", Href = "/" },
                new() { Text = "銷售管理", Href = "/sales" },
                new() { Text = "銷貨出貨", Href = "/sales-deliveries" },
                new() { Text = Id.HasValue ? "編輯銷貨出貨" : "新增銷貨出貨" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType()
            );
        }
    }

    private async Task InitializeDefaultValues()
    {
        try
        {
            if (!Id.HasValue)
            {
                salesDelivery = new SalesDelivery
                {
                    DeliveryNumber = await GenerateDeliveryNumberAsync(),
                    DeliveryDate = DateTime.Today,
                    DeliveryStatus = SalesDeliveryStatus.Pending,
                    Status = EntityStatus.Active,
                    CreatedAt = DateTime.Now,
                    CreatedBy = "CurrentUser" // TODO: 從當前用戶獲取
                };
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeDefaultValues),
                GetType()
            );
        }
    }

    private void InitializeBasicFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryNumber),
                    Label = "出貨單號",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    Placeholder = "請輸入出貨單號"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.SalesOrderId),
                    Label = "銷貨訂單",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = new List<SelectOption>()
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryDate),
                    Label = "出貨日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.ExpectedArrivalDate),
                    Label = "預計送達日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = false
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.ActualArrivalDate),
                    Label = "實際送達日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = false
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryStatus),
                    Label = "出貨狀態",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = Enum.GetValues<SalesDeliveryStatus>()
                        .Select(status => new SelectOption
                        {
                            Value = status.ToString(),
                            Text = GetDeliveryStatusDisplayName(status)
                        })
                        .ToList()
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.EmployeeId),
                    Label = "出貨人員",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = new List<SelectOption>()
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryPersonnel),
                    Label = "出貨人員名稱",
                    FieldType = FormFieldType.Text,
                    IsRequired = false,
                    Placeholder = "請輸入出貨人員名稱"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.ShippingMethod),
                    Label = "運送方式",
                    FieldType = FormFieldType.Text,
                    IsRequired = false,
                    Placeholder = "請輸入運送方式"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.TrackingNumber),
                    Label = "追蹤號碼",
                    FieldType = FormFieldType.Text,
                    IsRequired = false,
                    Placeholder = "請輸入追蹤號碼"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryAddress),
                    Label = "收貨地址",
                    FieldType = FormFieldType.TextArea,
                    IsRequired = false,
                    Placeholder = "請輸入收貨地址"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryContact),
                    Label = "收貨聯絡人",
                    FieldType = FormFieldType.Text,
                    IsRequired = false,
                    Placeholder = "請輸入收貨聯絡人"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryPhone),
                    Label = "收貨聯絡電話",
                    FieldType = FormFieldType.Text,
                    IsRequired = false,
                    Placeholder = "請輸入收貨聯絡電話"
                },
                new()
                {
                    PropertyName = nameof(SalesDelivery.DeliveryRemarks),
                    Label = "出貨備註",
                    FieldType = FormFieldType.TextArea,
                    IsRequired = false,
                    Placeholder = "請輸入出貨備註"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(SalesDelivery.DeliveryNumber), "基本資訊" },
                { nameof(SalesDelivery.SalesOrderId), "基本資訊" },
                { nameof(SalesDelivery.DeliveryDate), "基本資訊" },
                { nameof(SalesDelivery.DeliveryStatus), "基本資訊" },
                { nameof(SalesDelivery.ExpectedArrivalDate), "配送資訊" },
                { nameof(SalesDelivery.ActualArrivalDate), "配送資訊" },
                { nameof(SalesDelivery.EmployeeId), "配送資訊" },
                { nameof(SalesDelivery.DeliveryPersonnel), "配送資訊" },
                { nameof(SalesDelivery.ShippingMethod), "配送資訊" },
                { nameof(SalesDelivery.TrackingNumber), "配送資訊" },
                { nameof(SalesDelivery.DeliveryAddress), "收貨資訊" },
                { nameof(SalesDelivery.DeliveryContact), "收貨資訊" },
                { nameof(SalesDelivery.DeliveryPhone), "收貨資訊" },
                { nameof(SalesDelivery.DeliveryRemarks), "額外資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBasicFormFields),
                GetType()
            );
        }
    }

    private async Task<string> GenerateDeliveryNumberAsync()
    {
        try
        {
            var today = DateTime.Today;
            var prefix = $"SD{today:yyyyMMdd}";
            
            // 取得今天的最大編號
            var existingDeliveries = await SalesDeliveryService.GetAllAsync();
            var todayDeliveries = existingDeliveries
                .Where(d => d.DeliveryNumber.StartsWith(prefix))
                .ToList();

            var maxNumber = 0;
            foreach (var delivery in todayDeliveries)
            {
                var numberPart = delivery.DeliveryNumber.Substring(prefix.Length);
                if (int.TryParse(numberPart, out var number) && number > maxNumber)
                {
                    maxNumber = number;
                }
            }

            return $"{prefix}{(maxNumber + 1):D3}";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GenerateDeliveryNumberAsync),
                GetType()
            );
            return $"SD{DateTime.Today:yyyyMMdd}001";
        }
    }

    private async Task<SalesDelivery?> LoadSalesDeliveryData()
    {
        if (!Id.HasValue) return null;
        
        try
        {
            var delivery = await SalesDeliveryService.GetByIdAsync(Id.Value);
            if (delivery != null)
            {
                salesDelivery = delivery;
            }
            return delivery;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadSalesDeliveryData),
                GetType(),
                additionalData: new { SalesDeliveryId = Id }
            );
            return null;
        }
    }

    private async Task LoadAdditionalData()
    {
        try
        {
            // 載入銷貨訂單清單
            salesOrders = await SalesOrderService.GetAllAsync();
            
            // 載入員工清單
            employees = await EmployeeService.GetAllAsync();

            // 更新表單欄位的選項
            UpdateFormFieldOptions();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadAdditionalData),
                GetType()
            );
        }
    }

    private void UpdateFormFieldOptions()
    {
        try
        {
            // 更新銷貨訂單選項
            var salesOrderField = formFields.FirstOrDefault(f => f.PropertyName == nameof(SalesDelivery.SalesOrderId));
            if (salesOrderField != null)
            {
                salesOrderField.Options = salesOrders
                    .Where(so => !so.IsDeleted)
                    .OrderBy(so => so.SalesOrderNumber)
                    .Select(so => new SelectOption
                    {
                        Value = so.Id.ToString(),
                        Text = $"{so.SalesOrderNumber} - {so.Customer?.CompanyName ?? "未知客戶"}"
                    })
                    .ToList();
            }

            // 更新員工選項
            var employeeField = formFields.FirstOrDefault(f => f.PropertyName == nameof(SalesDelivery.EmployeeId));
            if (employeeField != null)
            {
                employeeField.Options = employees
                    .Where(e => !e.IsDeleted && e.Status == EntityStatus.Active)
                    .OrderBy(e => e.FirstName)
                    .ThenBy(e => e.LastName)
                    .Select(e => new SelectOption
                    {
                        Value = e.Id.ToString(),
                        Text = $"{e.FirstName} {e.LastName}"
                    })
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(UpdateFormFieldOptions),
                GetType()
            );
        }
    }

    private static string GetDeliveryStatusDisplayName(SalesDeliveryStatus status)
    {
        return status switch
        {
            SalesDeliveryStatus.Pending => "待出貨",
            SalesDeliveryStatus.Preparing => "備貨中",
            SalesDeliveryStatus.Delivered => "已出貨",
            SalesDeliveryStatus.Received => "已送達",
            SalesDeliveryStatus.Cancelled => "已取消",
            _ => status.ToString()
        };
    }
}
