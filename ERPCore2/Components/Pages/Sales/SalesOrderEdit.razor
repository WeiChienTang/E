@page "/sales-orders/edit"
@page "/sales-orders/edit/{id:int?}"

@inject ISalesOrderService SalesOrderService
@inject ICustomerService CustomerService
@inject IEmployeeService EmployeeService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<GenericEditPageComponent TEntity="SalesOrder" 
                        TService="ISalesOrderService"
                        Id="@Id"
                        Entity="@salesOrder"
                        Service="@SalesOrderService"
                        EntityName="銷貨訂單"
                        EntityNamePlural="銷貨訂單"
                        PageTitle="@(Id.HasValue ? "編輯銷貨訂單" : "新增銷貨訂單")"
                        FormTitle="基本資料"
                        FormSubtitle="銷貨訂單的基本資訊"
                        RequiredPermission="Sales.Read"
                        IndexRoute="/sales-orders"
                        FormFields="@formFields"
                        FormSections="@formSections"
                        BreadcrumbItems="@breadcrumbItems"
                        DataLoader="@LoadSalesOrderData"
                        AdditionalDataLoader="@LoadAdditionalData"
                        @ref="editComponent">
</GenericEditPageComponent>

@code {
    [Parameter] public int? Id { get; set; }
    
    // 組件參考
    private GenericEditPageComponent<SalesOrder, ISalesOrderService> editComponent = default!;
    
    // 資料模型
    private SalesOrder salesOrder = new();
    
    // 選項清單
    private List<Customer> customers = new();
    private List<Employee> employees = new();
    
    // 表單欄位定義
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeBreadcrumbs();
            await InitializeDefaultValues();
            InitializeBasicFormFields();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(OnInitializedAsync), 
                GetType()
            );
            
            // 確保基本初始化完成，避免程式崩潰
            breadcrumbItems ??= new List<GenericHeaderComponent.BreadcrumbItem>();
            formFields ??= new List<FormFieldDefinition>();
            formSections ??= new Dictionary<string, string>();
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new() { Text = "首頁", Href = "/" },
                new() { Text = "銷售管理", Href = "/sales" },
                new() { Text = "銷貨訂單", Href = "/sales-orders" },
                new() { Text = Id.HasValue ? "編輯銷貨訂單" : "新增銷貨訂單" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType()
            );
        }
    }

    private async Task InitializeDefaultValues()
    {
        try
        {
            if (!Id.HasValue)
            {
                salesOrder = new SalesOrder
                {
                    SalesOrderNumber = await GenerateSalesOrderNumberAsync(),
                    OrderDate = DateTime.Today,
                    OrderStatus = SalesOrderStatus.Draft,
                    SalesType = SalesType.Normal,
                    Status = EntityStatus.Active
                };
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeDefaultValues),
                GetType()
            );
        }
    }

    private void InitializeBasicFormFields()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(SalesOrder.SalesOrderNumber),
                    Label = "銷貨單號",
                    FieldType = FormFieldType.Text,
                    IsRequired = true,
                    MaxLength = 30,
                    Placeholder = "請輸入銷貨單號"
                },
                new()
                {
                    PropertyName = nameof(SalesOrder.OrderDate),
                    Label = "訂單日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true
                },
                new()
                {
                    PropertyName = nameof(SalesOrder.CustomerId),
                    Label = "客戶",
                    FieldType = FormFieldType.Select,
                    IsRequired = true,
                    Options = new List<SelectOption>()
                },
                new()
                {
                    PropertyName = nameof(SalesOrder.EmployeeId),
                    Label = "銷售人員",
                    FieldType = FormFieldType.Select,
                    Options = new List<SelectOption>()
                },
                new()
                {
                    PropertyName = nameof(SalesOrder.ExpectedDeliveryDate),
                    Label = "預計交貨日期",
                    FieldType = FormFieldType.Date
                },
                new()
                {
                    PropertyName = nameof(SalesOrder.OrderRemarks),
                    Label = "訂單備註",
                    FieldType = FormFieldType.TextArea,
                    MaxLength = 500,
                    Rows = 3,
                    Placeholder = "請輸入訂單備註"
                }
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(SalesOrder.SalesOrderNumber), "基本資訊" },
                { nameof(SalesOrder.OrderDate), "基本資訊" },
                { nameof(SalesOrder.CustomerId), "基本資訊" },
                { nameof(SalesOrder.EmployeeId), "基本資訊" },
                { nameof(SalesOrder.ExpectedDeliveryDate), "交貨資訊" },
                { nameof(SalesOrder.OrderRemarks), "額外資訊" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBasicFormFields),
                GetType()
            );
        }
    }

    private async Task<string> GenerateSalesOrderNumberAsync()
    {
        try
        {
            var today = DateTime.Today;
            var prefix = $"SO{today:yyyyMMdd}";
            
            // 取得今天的最大編號
            var existingOrders = await SalesOrderService.GetAllAsync();
            var todayOrders = existingOrders
                .Where(o => o.SalesOrderNumber.StartsWith(prefix))
                .ToList();

            var maxNumber = 0;
            foreach (var order in todayOrders)
            {
                var numberPart = order.SalesOrderNumber.Substring(prefix.Length);
                if (int.TryParse(numberPart, out var number) && number > maxNumber)
                {
                    maxNumber = number;
                }
            }

            return $"{prefix}{(maxNumber + 1):D3}";
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(GenerateSalesOrderNumberAsync),
                GetType()
            );
            return $"SO{DateTime.Today:yyyyMMdd}001";
        }
    }

    private async Task<SalesOrder?> LoadSalesOrderData()
    {
        if (!Id.HasValue) return null;
        
        try
        {
            var order = await SalesOrderService.GetByIdAsync(Id.Value);
            if (order != null)
            {
                salesOrder = order;
            }
            return order;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadSalesOrderData),
                GetType(),
                additionalData: new { SalesOrderId = Id }
            );
            return null;
        }
    }

    private async Task LoadAdditionalData()
    {
        try
        {
            // 載入客戶清單
            customers = await CustomerService.GetAllAsync();
            
            // 載入員工清單
            employees = await EmployeeService.GetAllAsync();

            // 更新表單欄位的選項
            UpdateFormFieldOptions();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadAdditionalData),
                GetType()
            );
        }
    }

    private void UpdateFormFieldOptions()
    {
        try
        {
            // 更新客戶選項
            var customerField = formFields.FirstOrDefault(f => f.PropertyName == nameof(SalesOrder.CustomerId));
            if (customerField != null)
            {
                customerField.Options = customers
                    .Where(c => !c.IsDeleted)
                    .OrderBy(c => c.CompanyName)
                    .Select(c => new SelectOption 
                    { 
                        Text = $"{c.CompanyName} ({c.Code})", 
                        Value = c.Id.ToString() 
                    }).ToList();
            }

            // 更新員工選項
            var employeeField = formFields.FirstOrDefault(f => f.PropertyName == nameof(SalesOrder.EmployeeId));
            if (employeeField != null)
            {
                employeeField.Options = employees
                    .Where(e => !e.IsDeleted && e.Status == EntityStatus.Active)
                    .OrderBy(e => e.Name)
                    .Select(e => new SelectOption 
                    { 
                        Text = e.Name ?? "", 
                        Value = e.Id.ToString() 
                    }).ToList();
            }
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(UpdateFormFieldOptions),
                GetType()
            );
        }
    }
}
