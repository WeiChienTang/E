@page "/salesReturnReasons"
@inject ISalesReturnReasonService SalesReturnReasonService
@inject INotificationService NotificationService
@rendermode InteractiveServer

@using ERPCore2.Services.Sales
@using ERPCore2.Helpers.FieldConfiguration
@using ERPCore2.Helpers

<GenericIndexPageComponent TEntity="SalesReturnReason" 
                          TService="ISalesReturnReasonService"
                          Service="@SalesReturnReasonService"
                          EntityBasePath="/salesReturnReasons"
                          PageTitle="銷貨退貨原因管理"
                          PageSubtitle="管理銷貨退貨原因資料"
                          EntityName="退貨原因"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSalesReturnReasonsAsync"
                          FilterApplier="@ApplySalesReturnReasonFilters"
                          GetEntityDisplayName="@(reason => reason.Name)"
                          RequiredPermission="SalesReturnReason.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 退貨原因編輯 Modal *@
<SalesReturnReasonEditModalComponent IsVisible="@showEditModal"
                                    IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                                    SalesReturnReasonId="@editingSalesReturnReasonId"
                                    OnSalesReturnReasonSaved="@modalHandler.OnEntitySavedAsync"
                                    OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<SalesReturnReason, ISalesReturnReasonService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingSalesReturnReasonId = null;
    
    // Modal 處理器
    private ModalHandler<SalesReturnReason, GenericIndexPageComponent<SalesReturnReason, ISalesReturnReasonService>> modalHandler = default!;
    
    // 欄位配置
    private SalesReturnReasonFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<SalesReturnReason, GenericIndexPageComponent<SalesReturnReason, ISalesReturnReasonService>>(
                id => editingSalesReturnReasonId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 建立欄位配置
            fieldConfiguration = new SalesReturnReasonFieldConfiguration(NotificationService);
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化銷貨退貨原因頁面失敗");
            await NotificationService.ShowErrorAsync("初始化銷貨退貨原因頁面失敗");
        }
    }

    /// <summary>
    /// 初始化麵包屑導航
    /// </summary>
    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("銷售管理", "#"),
                new("退貨原因管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    /// <summary>
    /// 載入銷貨退貨原因資料
    /// </summary>
    private async Task<List<SalesReturnReason>> LoadSalesReturnReasonsAsync()
    {
        try
        {
            return await SalesReturnReasonService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSalesReturnReasonsAsync), GetType(), additionalData: "載入銷貨退貨原因資料失敗");
            await NotificationService.ShowErrorAsync("載入銷貨退貨原因資料失敗");
            return new List<SalesReturnReason>();
        }
    }

    /// <summary>
    /// 應用銷貨退貨原因篩選器
    /// </summary>
    private IQueryable<SalesReturnReason> ApplySalesReturnReasonFilters(SearchFilterModel searchModel, IQueryable<SalesReturnReason> query)
    {
        // 確保 fieldConfiguration 已初始化（避免與 GenericIndexPageComponent 初始化的競爭條件）
        if (fieldConfiguration == null)
        {
            // 如果配置未初始化，回傳基本排序的查詢
            return query.OrderBy(r => r.Name);
        }

        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplySalesReturnReasonFilters), GetType());
    }
}