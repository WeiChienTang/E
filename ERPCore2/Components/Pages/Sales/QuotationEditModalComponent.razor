@inject IQuotationService QuotationService
@inject IQuotationDetailService QuotationDetailService
@inject ICustomerService CustomerService
@inject IEmployeeService EmployeeService
@inject IProductService ProductService
@inject IUnitService UnitService
@inject INotificationService NotificationService
@inject IReportPrintConfigurationService ReportPrintConfigurationService
@inject NavigationManager NavigationManager
@inject ActionButtonHelper ActionButtonHelper
@inject IJSRuntime JSRuntime
@using System.ComponentModel.DataAnnotations
@using System.Reflection

@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Components.Shared.SubCollections

<GenericEditModalComponent TEntity="Quotation" 
                          TService="IQuotationService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@QuotationId"
                          Service="@QuotationService"
                          EntityName="報價單"
                          EntityNamePlural="報價單"
                          ModalTitle="@(QuotationId.HasValue ? "編輯報價單" : "新增報價單")"
                          Size="GenericEditModalComponent<Quotation, IQuotationService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadQuotationData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="true"
                          CustomValidator="@ValidateQuotationDetailsAsync"
                          AfterSave="@SaveQuotationDetailsAsync"
                          SaveSuccessMessage="@(QuotationId.HasValue ? "報價單更新成功" : "報價單新增成功")"
                          SaveFailureMessage="報價單儲存失敗"
                          RequiredPermission="Quotation.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          CustomModules="@GetCustomModules()"
                          ShowPrintButton="true"
                          OnPrint="@HandlePrint">
</GenericEditModalComponent>

@* 客戶編輯 Modal *@
<CustomerEditModalComponent @ref="customerEditModal"
                           IsVisible="@customerModalManager.IsModalVisible"
                           IsVisibleChanged="@customerModalManager.HandleModalVisibilityChangedAsync"
                           CustomerId="@customerModalManager.SelectedEntityId"
                           OnCustomerSaved="@OnCustomerSavedWrapper"
                           OnCancel="@customerModalManager.HandleModalCancelAsync" />

@* 業務員編輯 Modal *@
<EmployeeEditModalComponent @ref="employeeEditModal"
                           IsVisible="@employeeModalManager.IsModalVisible"
                           IsVisibleChanged="@employeeModalManager.HandleModalVisibilityChangedAsync"
                           EmployeeId="@employeeModalManager.SelectedEntityId"
                           OnEmployeeSaved="@OnEmployeeSavedWrapper"
                           OnCancel="@employeeModalManager.HandleModalCancelAsync" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? QuotationId { get; set; }
    [Parameter] public EventCallback<Quotation> OnQuotationSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<Quotation, IQuotationService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    
    // 原始資料集合（用於 AutoComplete）
    private List<Customer> availableCustomers = new();
    private List<Employee> availableEmployees = new();
    private List<Product> availableProducts = new();
    private List<Unit> availableUnits = new();
    
    // 報價單明細
    private List<QuotationDetail> quotationDetails = new();
    private QuotationDetailManagerComponent<Quotation, QuotationDetail>? quotationDetailManager;
    
    // Modal 管理器
    private CustomerEditModalComponent? customerEditModal;
    private RelatedEntityModalManager<Customer> customerModalManager = default!;
    private EmployeeEditModalComponent? employeeEditModal;
    private RelatedEntityModalManager<Employee> employeeModalManager = default!;
    
    // 下拉選單選項（向下相容）
    private List<Customer> customers = new();
    private List<Employee> employees = new();
    private List<SelectOption> customerOptions = new();
    private List<SelectOption> employeeOptions = new();

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeCustomerModalManager();
            InitializeEmployeeModalManager();
            
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化報價單編輯組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // 當 QuotationId 參數變更時，重新初始化表單欄位
        if (formFields != null) // 只有在已經初始化過的情況下才重新設定
        {
            await LoadAdditionalDataAsync();
            await InitializeFormFieldsAsync();
        }
        
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// 初始化客戶 Modal 管理器
    /// </summary>
    private void InitializeCustomerModalManager()
    {
        customerModalManager = RelatedEntityModalManagerHelper.CreateStandardManager(
            new StandardModalManagerConfig<Quotation, Customer, IQuotationService>
            {
                NotificationService = NotificationService,
                EntityDisplayName = "客戶",
                PropertyName = nameof(Quotation.CustomerId),
                GetEditModalComponent = () => editModalComponent,
                ReloadDataCallback = LoadAdditionalDataAsync,
                StateChangedCallback = StateHasChanged,
                AutoSelectAction = (entity, customerId) =>
                {
                    if (entity != null)
                    {
                        entity.CustomerId = customerId;
                    }
                },
                InitializeFormFieldsCallback = InitializeFormFieldsAsync,
                RefreshAutoCompleteFields = true  // 刷新 Quotation EditModal 的 Customer AutoComplete
            });
    }

    /// <summary>
    /// 初始化業務員 Modal 管理器
    /// </summary>
    private void InitializeEmployeeModalManager()
    {
        employeeModalManager = RelatedEntityModalManagerHelper.CreateStandardManager(
            new StandardModalManagerConfig<Quotation, Employee, IQuotationService>
            {
                NotificationService = NotificationService,
                EntityDisplayName = "業務人員",
                PropertyName = nameof(Quotation.EmployeeId),
                GetEditModalComponent = () => editModalComponent,
                ReloadDataCallback = LoadAdditionalDataAsync,
                StateChangedCallback = StateHasChanged,
                AutoSelectAction = (entity, employeeId) =>
                {
                    if (entity != null)
                    {
                        entity.EmployeeId = employeeId;
                    }
                },
                InitializeFormFieldsCallback = InitializeFormFieldsAsync,
                RefreshAutoCompleteFields = true  // 刷新 Quotation EditModal 的 Employee AutoComplete
            });
    }

    private async Task HandleSaveSuccess()
    {
        if (editModalComponent?.Entity != null)
        {
            await OnQuotationSaved.InvokeAsync(editModalComponent.Entity);
        }
        await CloseModal();
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task<Quotation?> LoadQuotationData()
    {
        try
        {
            if (!QuotationId.HasValue)
            {
                // 新增模式
                var newQuotation = new Quotation
                {
                    QuotationNumber = await GenerateQuotationNumberAsync(),
                    QuotationDate = DateTime.Today,
                    Status = EntityStatus.Active
                };

                // 初始化空的子集合
                quotationDetails = new List<QuotationDetail>();

                return newQuotation;
            }

            // 編輯模式
            var quotation = await QuotationService.GetWithDetailsAsync(QuotationId.Value);
            
            if (quotation != null)
            {
                // 載入報價單明細
                quotationDetails = quotation.QuotationDetails?.ToList() ?? new List<QuotationDetail>();
            }
            else
            {
                quotationDetails = new List<QuotationDetail>();
            }

            return quotation;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入報價單資料時發生錯誤：{ex.Message}");
            return null;
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入客戶列表
            availableCustomers = await CustomerService.GetAllAsync();
            customers = availableCustomers;
            customerOptions = customers.Select(c => new SelectOption 
            { 
                Text = c.CompanyName ?? "", 
                Value = c.Id.ToString() 
            }).ToList();
            
            // 載入業務人員列表
            availableEmployees = await EmployeeService.GetAllAsync();
            employees = availableEmployees;
            employeeOptions = employees.Select(e => new SelectOption 
            { 
                Text = e.Name ?? "", 
                Value = e.Id.ToString() 
            }).ToList();
            
            // 載入產品列表（用於明細）
            availableProducts = await ProductService.GetAllAsync();
            
            // 載入單位列表（用於明細）
            availableUnits = await UnitService.GetAllAsync();
        }
        catch (Exception)
        {
            _ = NotificationService.ShowErrorAsync("載入報價單編輯相關資料時發生錯誤");
            availableCustomers = new List<Customer>();
            availableEmployees = new List<Employee>();
            availableProducts = new List<Product>();
            availableUnits = new List<Unit>();
            customers = new List<Customer>();
            employees = new List<Employee>();
            customerOptions = new List<SelectOption>();
            employeeOptions = new List<SelectOption>();
        }
    }

    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(Quotation.QuotationNumber),
                    Label = "報價單號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入報價單號",
                    IsRequired = true,
                    MaxLength = 30,
                    HelpText = "報價單的唯一識別編號，新增時系統會自動產生，也可手動修改"
                },
                new()
                {
                    PropertyName = nameof(Quotation.CustomerId),
                    Label = "客戶",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇客戶",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "輸入客戶名稱進行搜尋，或直接選擇",
                    ActionButtons = await GetCustomerActionButtonsAsync()
                },
                new()
                {
                    PropertyName = nameof(Quotation.EmployeeId),
                    Label = "業務人員",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇業務人員",
                    IsRequired = false,
                    MinSearchLength = 0,
                    HelpText = "輸入業務人員姓名進行搜尋，或直接選擇",
                    ActionButtons = await GetEmployeeActionButtonsAsync()
                },
                new()
                {
                    PropertyName = nameof(Quotation.QuotationDate),
                    Label = "報價日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    HelpText = "報價單的建立日期"
                },
                new()
                {
                    PropertyName = nameof(Quotation.PaymentTerms),
                    Label = "付款條件",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入付款條件",
                    IsRequired = false,
                    MaxLength = 200,
                    HelpText = "例如：貨到付款、月結30天等"
                },
                new()
                {
                    PropertyName = nameof(Quotation.DeliveryTerms),
                    Label = "交貨條件",
                    FieldType = FormFieldType.Text,
                    Placeholder = "請輸入交貨條件",
                    IsRequired = false,
                    MaxLength = 200,
                    HelpText = "例如：工廠交貨、送貨到府等"
                },
                new()
                {
                    PropertyName = nameof(Quotation.TotalAmount),
                    Label = "報價總金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    IsReadOnly = true,
                    HelpText = "系統根據明細自動計算"
                },
                new()
                {
                    PropertyName = nameof(Quotation.DiscountAmount),
                    Label = "折扣金額",
                    FieldType = FormFieldType.Number,
                    Placeholder = "請輸入折扣金額",
                    IsRequired = false,
                    HelpText = "整張報價單的額外折扣金額"
                },
                FormFieldConfigurationHelper.CreateRemarksField<Quotation>(label: "報價說明")
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(Quotation.QuotationNumber), "基本資訊" },
                { nameof(Quotation.CustomerId), "基本資訊" },
                { nameof(Quotation.EmployeeId), "基本資訊" },
                { nameof(Quotation.QuotationDate), "基本資訊" },
                { nameof(Quotation.PaymentTerms), "交易條件" },
                { nameof(Quotation.DeliveryTerms), "交易條件" },
                { nameof(Quotation.TotalAmount), "金額資訊" },
                { nameof(Quotation.DiscountAmount), "金額資訊" },
                { "Remarks", "其他資訊" }
            };
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化表單欄位時發生錯誤");
        }
    }

    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 驗證報價單明細 - 在儲存主檔之前執行
    /// </summary>
    private async Task<bool> ValidateQuotationDetailsAsync(Quotation quotation)
    {
        try
        {
            if (quotationDetailManager != null)
            {
                return await quotationDetailManager.ValidateAsync();
            }
            return true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ValidateQuotationDetailsAsync), GetType());
            return false;
        }
    }

    /// <summary>
    /// 儲存後處理 - 儲存報價單明細
    /// </summary>
    private async Task SaveQuotationDetailsAsync(Quotation quotation)
    {
        try
        {
            if (quotationDetailManager == null)
            {
                await NotificationService.ShowWarningAsync("明細管理器尚未初始化");
                return;
            }

            // 從明細管理器取得所有有效的明細資料
            var detailsToSave = quotation.QuotationDetails?.ToList() ?? new List<QuotationDetail>();
            
            // 確保每個明細都關聯到正確的主檔ID
            foreach (var detail in detailsToSave)
            {
                detail.QuotationId = quotation.Id;
            }

            // 批次儲存或更新明細
            if (detailsToSave.Any())
            {
                foreach (var detail in detailsToSave)
                {
                    if (detail.Id == 0)
                    {
                        await QuotationDetailService.CreateAsync(detail);
                    }
                    else
                    {
                        await QuotationDetailService.UpdateAsync(detail);
                    }
                }
            }

            // 計算並更新主檔的總金額
            quotation.TotalAmount = detailsToSave.Sum(d => d.SubtotalAmount);
            
            // 更新主檔
            await QuotationService.UpdateAsync(quotation);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveQuotationDetailsAsync), GetType(), 
                additionalData: new { QuotationId = quotation.Id, QuotationNumber = quotation.QuotationNumber });
            throw;
        }
    }

    /// <summary>
    /// 配置自訂模組
    /// </summary>
    private List<GenericEditModalComponent<Quotation, IQuotationService>.CustomModule> GetCustomModules()
    {
        try
        {
            return new List<GenericEditModalComponent<Quotation, IQuotationService>.CustomModule>
            {
                new()
                {
                    Title = "",
                    Content = CreateQuotationDetailManagerContent()
                }
            };
        }
        catch
        {
            return new List<GenericEditModalComponent<Quotation, IQuotationService>.CustomModule>();
        }
    }

    /// <summary>
    /// 創建報價單明細管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreateQuotationDetailManagerContent() => __builder =>
    {
        try
        {
            <QuotationDetailManagerComponent @ref="quotationDetailManager"
                                            TMainEntity="Quotation"
                                            TDetailEntity="QuotationDetail"
                                            MainEntity="@editModalComponent?.Entity"
                                            ExistingDetails="@quotationDetails"
                                            OnDetailsChanged="@HandleQuotationDetailsChanged"
                                            OnDeletedDetailsChanged="@HandleDeletedDetailsChanged"
                                            Products="@availableProducts"
                                            Units="@availableUnits"
                                            SelectedCustomerId="@editModalComponent?.Entity?.CustomerId"
                                            MainEntityIdPropertyName="@nameof(QuotationDetail.QuotationId)"
                                            QuantityPropertyName="@nameof(QuotationDetail.Quantity)"
                                            UnitPricePropertyName="@nameof(QuotationDetail.UnitPrice)"
                                            DiscountPercentagePropertyName="@nameof(QuotationDetail.DiscountPercentage)"
                                            RemarksPropertyName="@nameof(BaseEntity.Remarks)"
                                            UnitIdPropertyName="@nameof(QuotationDetail.UnitId)"
                                            IsReadOnly="false"
                                            Title="報價明細"
                                            EmptyMessage="尚未新增報價商品" />
        }
        catch
        {
            <div class="alert alert-danger" role="alert">
                <i class="bi bi-exclamation-triangle me-2"></i>
                載入報價明細管理器時發生錯誤
            </div>
        }
    };

    /// <summary>
    /// 處理報價單明細變更 - 自動計算總金額
    /// </summary>
    private async Task HandleQuotationDetailsChanged(List<QuotationDetail> details)
    {
        try
        {
            quotationDetails = details;
            
            if (editModalComponent?.Entity != null)
            {
                // 計算總金額
                editModalComponent.Entity.TotalAmount = details.Sum(d => d.SubtotalAmount);
                
                // 更新主檔的 QuotationDetails 集合
                editModalComponent.Entity.QuotationDetails = details;
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleQuotationDetailsChanged), GetType());
        }
    }

    /// <summary>
    /// 處理已刪除的報價單明細ID
    /// </summary>
    private async Task HandleDeletedDetailsChanged(List<int> deletedDetailIds)
    {
        try
        {
            if (deletedDetailIds?.Any() == true)
            {
                foreach (var detailId in deletedDetailIds)
                {
                    await QuotationDetailService.DeleteAsync(detailId);
                }
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleDeletedDetailsChanged), GetType());
        }
    }
    private async Task SaveQuotationWrapper(Quotation quotation)
    {
        try
        {
            // 驗證資料
            var validationResult = await QuotationService.ValidateAsync(quotation);
            if (!validationResult.IsSuccess)
            {
                await NotificationService.ShowErrorAsync(validationResult.ErrorMessage ?? "驗證失敗");
                return;
            }

            // 儲存主檔
            ServiceResult result;
            if (quotation.Id == 0)
            {
                result = await QuotationService.CreateAsync(quotation);
            }
            else
            {
                result = await QuotationService.UpdateAsync(quotation);
            }

            if (!result.IsSuccess)
            {
                await NotificationService.ShowErrorAsync(result.ErrorMessage ?? "儲存失敗");
                return;
            }

            // TODO: 儲存明細（如果有明細管理組件）

            await NotificationService.ShowSuccessAsync(quotation.Id == 0 ? "報價單新增成功" : "報價單更新成功");
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveQuotationWrapper), GetType(), 
                additionalData: new { QuotationId = quotation.Id, QuotationNumber = quotation.QuotationNumber });
            await NotificationService.ShowErrorAsync("儲存報價單時發生錯誤");
        }
    }

    /// <summary>
    /// 取得枚舉的顯示名稱
    /// </summary>
    private static string GetEnumDisplayName(Enum enumValue)
    {
        var displayAttribute = enumValue.GetType()
            .GetField(enumValue.ToString())?
            .GetCustomAttribute<DisplayAttribute>();
        
        return displayAttribute?.Name ?? enumValue.ToString();
    }

    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(Quotation.CustomerId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["CompanyName"] = searchTerm,
                    ["Status"] = 1 // EntityStatus.Active
                }
            },
            {
                nameof(Quotation.EmployeeId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["Name"] = searchTerm,
                    ["Status"] = 1 // EntityStatus.Active
                }
            }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(Quotation.CustomerId), availableCustomers.Cast<object>() },
            { nameof(Quotation.EmployeeId), availableEmployees.Cast<object>() }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Quotation.CustomerId), "CompanyName" },
            { nameof(Quotation.EmployeeId), "Name" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(Quotation.CustomerId), "Id" },
            { nameof(Quotation.EmployeeId), "Id" }
        };
    }

    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(Quotation.CustomerId), customerModalManager },
            { nameof(Quotation.EmployeeId), employeeModalManager }
        };
    }

    /// <summary>
    /// 包裝客戶儲存事件以符合原有介面
    /// </summary>
    private async Task OnCustomerSavedWrapper(Customer savedCustomer)
    {
        await customerModalManager.HandleEntitySavedAsync(savedCustomer, shouldAutoSelect: true);
    }

    /// <summary>
    /// 包裝業務員儲存事件以符合原有介面
    /// </summary>
    private async Task OnEmployeeSavedWrapper(Employee savedEmployee)
    {
        await employeeModalManager.HandleEntitySavedAsync(savedEmployee, shouldAutoSelect: true);
    }

    /// <summary>
    /// 使用統一 Helper 產生客戶操作按鈕
    /// </summary>
    private async Task<List<FieldActionButton>> GetCustomerActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            customerModalManager, 
            nameof(Quotation.CustomerId)
        );
    }

    /// <summary>
    /// 使用統一 Helper 產生業務員操作按鈕
    /// </summary>
    private async Task<List<FieldActionButton>> GetEmployeeActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            employeeModalManager, 
            nameof(Quotation.EmployeeId)
        );
    }

    /// <summary>
    /// 處理欄位值變更事件 - 使用統一 Helper
    /// </summary>
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            // 使用統一 Helper 處理客戶欄位變更
            if (fieldChange.PropertyName == nameof(Quotation.CustomerId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    customerModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
            // 使用統一 Helper 處理業務員欄位變更
            else if (fieldChange.PropertyName == nameof(Quotation.EmployeeId))
            {
                await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                    employeeModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
            }
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("欄位變更處理時發生錯誤");
        }
    }

    /// <summary>
    /// 生成報價單號
    /// </summary>
    private async Task<string> GenerateQuotationNumberAsync()
    {
        return await CodeGenerationHelper.GenerateEntityCodeAsync(
            QuotationService,
            "QT",
            (service, code, excludeId) => service.IsQuotationNumberExistsAsync(code, excludeId)
        );
    }

    /// <summary>
    /// 處理列印事件
    /// </summary>
    private async Task HandlePrint()
    {
        try
        {
            // 使用通用 Helper 進行完整驗證（實體、ID）
            // 報價單不需要核准即可列印
            var (isValid, errorMessage) = ReportPrintHelper.ValidateForPrint(
                entity: editModalComponent?.Entity,
                entityId: QuotationId,
                isApproved: true, // 報價單不需審核
                entityName: "報價單",
                requireApproval: false
            );
            
            if (!isValid)
            {
                await NotificationService.ShowWarningAsync(errorMessage);
                return;
            }
            
            // 直接執行列印，使用預設設定
            await HandleDirectPrint(null);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandlePrint), GetType(), 
                additionalData: $"報價單列印處理失敗 - ID: {QuotationId}");
            await NotificationService.ShowErrorAsync("列印處理時發生錯誤");
        }
    }

    /// <summary>
    /// 直接執行列印 - 可以使用指定的列印配置或預設配置
    /// </summary>
    private async Task HandleDirectPrint(ReportPrintConfiguration? printConfig)
    {
        try
        {
            if (!QuotationId.HasValue)
            {
                await NotificationService.ShowWarningAsync("請先儲存報價單後再進行列印");
                return;
            }

            // 驗證列印配置
            var (isValid, errorMessage) = ReportPrintHelper.ValidateConfiguration(printConfig);
            if (!isValid)
            {
                await NotificationService.ShowWarningAsync(errorMessage);
                return;
            }

            // 使用通用 Helper 建立列印 URL（新版路由）
            var printUrl = ReportPrintHelper.BuildPrintUrl(
                baseUrl: NavigationManager.BaseUri,
                reportType: "sales-report/quotation",
                documentId: QuotationId.Value,
                configuration: printConfig,
                autoprint: true
            );

            // 使用通用 Helper 執行列印（隱藏 iframe 方式）
            var success = await ReportPrintHelper.ExecutePrintWithHiddenIframeAsync(
                printUrl: printUrl,
                jsRuntime: JSRuntime,
                iframeId: "printFrame"
            );
            
            if (success)
            {
                // 可選：顯示成功訊息
                // await NotificationService.ShowSuccessAsync("報價單列印已送出");
            }
            else
            {
                await NotificationService.ShowErrorAsync("列印執行失敗");
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleDirectPrint), GetType(), 
                additionalData: $"報價單直接列印失敗 - ID: {QuotationId}, Config: {printConfig?.ReportName}");
            await NotificationService.ShowErrorAsync("列印執行時發生錯誤");
        }
    }
}
