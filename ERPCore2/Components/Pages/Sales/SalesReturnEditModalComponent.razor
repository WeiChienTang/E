@* 銷售退貨編輯模態組件 *@
@inject ISalesReturnService SalesReturnService
@inject ISalesReturnDetailService SalesReturnDetailService
@inject ISalesOrderService SalesOrderService
@inject ISalesOrderDetailService SalesOrderDetailService
@inject IWarehouseService WarehouseService
@inject IWarehouseLocationService WarehouseLocationService
@inject ISalesReturnReasonService SalesReturnReasonService
@inject INotificationService NotificationService
@inject ICustomerService CustomerService
@inject IEmployeeService EmployeeService
@inject IProductService ProductService
@inject ISystemParameterService SystemParameterService
@inject ActionButtonHelper ActionButtonHelper
@inject ISetoffDocumentService SetoffDocumentService
@inject IReportPrintConfigurationService ReportPrintConfigurationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

@using ERPCore2.FieldConfiguration

<GenericEditModalComponent TEntity="SalesReturn" 
                          TService="ISalesReturnService"
                          @ref="editModalComponent"
                          IsVisible="@IsVisible"
                          IsVisibleChanged="@IsVisibleChanged"
                          Id="@SalesReturnId"
                          Service="@SalesReturnService"
                          EntityName="銷售退貨"
                          EntityNamePlural="銷售退貨"
                          ModalTitle="@(SalesReturnId.HasValue ? "編輯銷售退貨" : "新增退貨單")"
                          Size="GenericEditModalComponent<SalesReturn, ISalesReturnService>.ModalSize.Desktop"
                          UseGenericForm="true"
                          FormFields="@GetFormFields()"
                          FormSections="@formSections"
                          AutoCompletePrefillers="@GetAutoCompletePrefillers()"
                          AutoCompleteCollections="@GetAutoCompleteCollections()"
                          AutoCompleteDisplayProperties="@GetAutoCompleteDisplayProperties()"
                          AutoCompleteValueProperties="@GetAutoCompleteValueProperties()"
                          ModalManagers="@GetModalManagers()"
                          DataLoader="@LoadSalesReturnData"
                          AdditionalDataLoader="@LoadAdditionalDataAsync"
                          UseGenericSave="false"
                          CustomValidator="@ValidateSalesReturnDetailsAsync"
                          SaveHandler="@SaveSalesReturnWithDetails"
                          SaveSuccessMessage="@(SalesReturnId.HasValue ? "銷售退貨更新成功" : "銷售退貨新增成功")"
                          SaveFailureMessage="銷售退貨儲存失敗"
                          RequiredPermission="SalesReturn.Read"
                          OnSaveSuccess="@HandleSaveSuccess"
                          OnCancel="@HandleCancel"
                          OnFieldChanged="@OnFieldValueChanged"
                          GetStatusMessage="@GetStatusMessage"
                          FormHeaderContent="@GetWarningMessage()"
                          CustomModules="@GetCustomModules()"
                          ShowPrintButton="true"
                          OnPrint="@HandlePrint" />

@* 客戶編輯 Modal *@
<CustomerEditModalComponent @ref="customerEditModal"
                           IsVisible="@customerModalManager.IsModalVisible"
                           IsVisibleChanged="@customerModalManager.HandleModalVisibilityChangedAsync"
                           CustomerId="@customerModalManager.SelectedEntityId"
                           OnCustomerSaved="@OnCustomerSavedWrapper"
                           OnCancel="@customerModalManager.HandleModalCancelAsync" />

@* 沖款單編輯 Modal *@
<SetoffDocumentEditModalComponent @ref="setoffDocumentEditModal"
                                 IsVisible="@showSetoffDocumentModal"
                                 IsVisibleChanged="@((bool visible) => showSetoffDocumentModal = visible)"
                                 SetoffDocumentId="@selectedSetoffDocumentId"
                                 OnSetoffDocumentSaved="@HandleSetoffDocumentSaved"
                                 OnCancel="@(() => showSetoffDocumentModal = false)" />

@code {
    // ===== 必要參數 =====
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public int? SalesReturnId { get; set; }
    [Parameter] public EventCallback<SalesReturn> OnSalesReturnSaved { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    // ===== 預填參數（用於從銷貨訂單轉單） =====
    [Parameter] public int? PrefilledCustomerId { get; set; }
    [Parameter] public int? PrefilledSalesOrderId { get; set; }

    // ===== 內部狀態 =====
    private GenericEditModalComponent<SalesReturn, ISalesReturnService>? editModalComponent;
    private List<FormFieldDefinition> formFields = new();
    private Dictionary<string, string> formSections = new();
    private List<SalesOrder> salesOrders = new();
    private List<Warehouse> warehouses = new();
    private List<WarehouseLocation> warehouseLocations = new();
    private List<Customer> customers = new();
    private List<Employee> employees = new();
    private List<Product> products = new();
    private List<ERPCore2.Data.Entities.SalesReturnReason> returnReasons = new();
    
    // ===== 銷售退貨明細 =====
    private List<SalesReturnDetail> salesReturnDetails = new();
    private SalesReturnDetailManagerComponent? salesReturnDetailManager;
    
    // ===== 篩選狀態 =====
    private int? filterProductId = null;
    private int? FilterProductId => filterProductId;
    private int? FilterSalesOrderId = null;
    
    // ===== 明細載入狀態 =====
    private bool shouldAutoLoadReturnable = false;  // 標記是否需要自動載入可退貨商品
    
    // ===== 稅率快取 =====
    private decimal currentTaxRate = 5.0m; // 預設 5%，實際值會在初始化時從資料庫載入
    
    // ===== 鎖定狀態 =====
    private bool hasUndeletableDetails = false;
    private bool isDetailDataReady = false;
    
    // ===== Modal 管理器 =====
    private CustomerEditModalComponent? customerEditModal;
    private RelatedEntityModalManager<Customer> customerModalManager = default!;
    
    // ===== 相關單據 Modal =====
    private SetoffDocumentEditModalComponent? setoffDocumentEditModal;
    private bool showSetoffDocumentModal = false;
    private int? selectedSetoffDocumentId = null;

    // ===== 必要方法 =====
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 管理器
            InitializeCustomerModalManager();
            await Task.CompletedTask;
        }
        catch (Exception)
        {
            await NotificationService.ShowErrorAsync("初始化組件時發生錯誤");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (IsVisible)
            {
                await LoadAdditionalDataAsync();
                await InitializeFormFieldsAsync();
                
                // 再次觸發選項更新（在表單欄位初始化後）
                // 當從銷貨訂單轉單時，確保銷售單選項正確篩選
                if (PrefilledCustomerId.HasValue && PrefilledCustomerId.Value > 0)
                {
                    await UpdateSalesOrderOptions(PrefilledCustomerId.Value);
                    await UpdateFilterProductOptions(PrefilledCustomerId.Value);
                    StateHasChanged(); // 強制UI更新
                }
            }
            else
            {
                // 🔑 Modal 關閉時重置自動載入相關標記
                shouldAutoLoadReturnable = false;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"參數設置時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 開啟新增銷售退貨單 Modal 並預填銷貨訂單資訊（公開方法供外部調用）
    /// </summary>
    public async Task ShowAddModalWithPrefilledOrder(int customerId, int salesOrderId)
    {
        try
        {
            // 設定為新增模式
            SalesReturnId = null;
            
            // 設定預填值
            PrefilledCustomerId = customerId;
            PrefilledSalesOrderId = salesOrderId;
            
            // 重置自動載入相關標記
            shouldAutoLoadReturnable = true;
            
            // 觸發 Modal 顯示
            if (IsVisibleChanged.HasDelegate)
            {
                await IsVisibleChanged.InvokeAsync(true);
            }
            
            // 🔑 等待 Modal 和子組件完全渲染後再觸發自動載入
            // 增加延遲時間以確保子組件完全就緒（500ms 為經驗值，可應對大多數情況）
            await Task.Delay(500);
            
            // 檢查子組件是否已就緒並執行自動載入
            if (salesReturnDetailManager != null && shouldAutoLoadReturnable)
            {
                shouldAutoLoadReturnable = false;
                
                await InvokeAsync(async () =>
                {
                    // 調用子組件的公開方法載入可退貨商品
                    await salesReturnDetailManager.LoadAllReturnableItems();
                    StateHasChanged();
                });
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ShowAddModalWithPrefilledOrder), GetType(), 
                additionalData: $"開啟預填銷售退貨單Modal失敗 - CustomerId: {customerId}, OrderId: {salesOrderId}");
            await NotificationService.ShowErrorAsync("開啟銷售退貨單時發生錯誤");
        }
    }

    /// <summary>
    /// 處理儲存成功事件
    /// </summary>
    private async Task HandleSaveSuccess()
    {
        try
        {
            // 如果父組件需要知道銷售退貨已儲存
            if (editModalComponent?.Entity != null && OnSalesReturnSaved.HasDelegate)
            {
                await OnSalesReturnSaved.InvokeAsync(editModalComponent.Entity);
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理儲存成功事件時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理取消事件
    /// </summary>
    private async Task HandleCancel()
    {
        try
        {
            if (OnCancel.HasDelegate)
            {
                await OnCancel.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理取消事件時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理列印事件
    /// </summary>
    private async Task HandlePrint()
    {
        try
        {
            // 使用通用 Helper 進行完整驗證（實體、ID）
            // 銷貨退回單不需要核准即可列印
            var (isValid, errorMessage) = ReportPrintHelper.ValidateForPrint(
                entity: editModalComponent?.Entity,
                entityId: SalesReturnId,
                isApproved: true, // 不需要核准狀態檢查
                entityName: "銷貨退回單",
                requireApproval: false // 銷貨退回單不需要核准即可列印
            );
            
            if (!isValid)
            {
                await NotificationService.ShowWarningAsync(errorMessage);
                return;
            }
            
            // 直接執行列印，使用預設設定
            await HandleDirectPrint(null);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandlePrint), GetType(), 
                additionalData: $"銷貨退回單列印處理失敗 - ID: {SalesReturnId}");
            await NotificationService.ShowErrorAsync("列印失敗，請稍後再試");
        }
    }

    /// <summary>
    /// 直接執行列印 - 可以使用指定的列印配置或預設配置
    /// </summary>
    private async Task HandleDirectPrint(ReportPrintConfiguration? printConfig)
    {
        try
        {
            // 建立列印 URL - 使用新的路由格式 /api/sales-report/return/{id}
            var printUrl = ReportPrintHelper.BuildPrintUrl(
                baseUrl: NavigationManager.BaseUri,
                reportType: "sales-report/return",
                documentId: SalesReturnId!.Value,
                configuration: printConfig,
                autoprint: true
            );

            // 使用隱藏 iframe 列印（不阻擋主視窗操作）
            var printSuccess = await ReportPrintHelper.ExecutePrintWithHiddenIframeAsync(
                printUrl: printUrl,
                jsRuntime: JSRuntime,
                iframeId: "salesReturnPrintFrame"
            );

            if (printSuccess)
            {
                await NotificationService.ShowSuccessAsync("列印指令已送出");
            }
            else
            {
                await NotificationService.ShowWarningAsync("列印指令送出失敗，請稍後再試");
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleDirectPrint), GetType(), 
                additionalData: $"銷貨退回單直接列印失敗 - ID: {SalesReturnId}");
            await NotificationService.ShowErrorAsync($"執行列印時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 載入銷售退貨資料
    /// </summary>
    private async Task<SalesReturn?> LoadSalesReturnData()
    {
        try
        {
            isDetailDataReady = false;
            hasUndeletableDetails = false;
            
            if (SalesReturnId.HasValue)
            {
                // 編輯模式：載入現有資料
                var salesReturn = await SalesReturnService.GetByIdAsync(SalesReturnId.Value);
                if (salesReturn != null)
                {
                    // 載入對應的退貨明細
                    await LoadSalesReturnDetails(salesReturn.Id);
                    
                    // 🔑 關鍵：載入明細相關資料（沖款記錄）
                    await LoadDetailRelatedDataAsync();
                    isDetailDataReady = true;
                    StateHasChanged();
                }
                else
                {
                    isDetailDataReady = true;
                }
                return salesReturn;
            }
            else
            {
                // 新增模式：建立新的退貨單並生成退貨單號
                var newSalesReturn = new SalesReturn
                {
                    SalesReturnNumber = await GenerateReturnNumberAsync(),
                    ReturnDate = DateTime.Today,
                    TotalReturnAmount = 0,
                    ReturnReasonId = null // 預設為 null，選擇性填寫
                };
                
                // 🔑 使用預填參數（從銷貨訂單轉單時）
                if (PrefilledCustomerId.HasValue && PrefilledCustomerId.Value > 0)
                {
                    newSalesReturn.CustomerId = PrefilledCustomerId.Value;
                }
                
                if (PrefilledSalesOrderId.HasValue && PrefilledSalesOrderId.Value > 0)
                {
                    newSalesReturn.SalesOrderId = PrefilledSalesOrderId.Value;
                    // 設定篩選條件，讓明細管理器只顯示這張銷貨訂單的可退貨商品
                    FilterSalesOrderId = PrefilledSalesOrderId.Value;
                }
                
                // 初始化空的明細列表
                salesReturnDetails = new List<SalesReturnDetail>();
                isDetailDataReady = true;
                
                return newSalesReturn;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入銷售退貨資料時發生錯誤：{ex.Message}");
            isDetailDataReady = true; // 錯誤也要允許渲染
            return null;
        }
    }

    /// <summary>
    /// 載入明細相關資料（沖款記錄）- 用於判斷是否有不可刪除的明細
    /// 必須在 DataLoader 中同步執行，確保狀態訊息正確顯示
    /// </summary>
    private async Task LoadDetailRelatedDataAsync()
    {
        try
        {
            if (!salesReturnDetails.Any())
            {
                hasUndeletableDetails = false;
                return;
            }

            bool hasUndeletable = false;
            
            foreach (var detail in salesReturnDetails.Where(d => d.Id > 0))
            {
                // 檢查沖款記錄
                if (detail.TotalPaidAmount > 0)
                {
                    hasUndeletable = true;
                    break;
                }
            }
            
            hasUndeletableDetails = hasUndeletable;
            
            if (hasUndeletableDetails)
            {
                UpdateFieldsReadOnlyState();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadDetailRelatedDataAsync), GetType());
            hasUndeletableDetails = false;
        }
    }

    /// <summary>
    /// 載入額外資料
    /// </summary>
    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            await LoadSalesOrdersAsync();
            await LoadWarehousesAsync();
            await LoadWarehouseLocationsAsync();
            await LoadCustomersAsync();
            await LoadEmployeesAsync();
            await LoadProductsAsync();
            await LoadReturnReasonsAsync();
            
            // 🔑 一次性載入系統稅率（避免每次計算都查詢資料庫）
            await LoadTaxRateAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入額外資料時發生錯誤：{ex.Message}");
        }
    }

    private async Task LoadSalesOrdersAsync()
    {
        try
        {
            salesOrders = await SalesOrderService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入銷售訂單資料時發生錯誤：{ex.Message}");
            salesOrders = new List<SalesOrder>();
        }
    }

    private async Task LoadWarehousesAsync()
    {
        try
        {
            warehouses = await WarehouseService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫資料時發生錯誤：{ex.Message}");
            warehouses = new List<Warehouse>();
        }
    }

    private async Task LoadWarehouseLocationsAsync()
    {
        try
        {
            warehouseLocations = await WarehouseLocationService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入倉庫位置資料時發生錯誤：{ex.Message}");
            warehouseLocations = new List<WarehouseLocation>();
        }
    }

    private async Task LoadCustomersAsync()
    {
        try
        {
            customers = await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入客戶資料時發生錯誤：{ex.Message}");
            customers = new List<Customer>();
        }
    }

    private async Task LoadEmployeesAsync()
    {
        try
        {
            var result = await EmployeeService.GetActiveEmployeesAsync();
            if (result.IsSuccess && result.Data != null)
            {
                employees = result.Data;
            }
            else
            {
                employees = new List<Employee>();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入員工資料時發生錯誤：{ex.Message}");
            employees = new List<Employee>();
        }
    }

    private async Task LoadProductsAsync()
    {
        try
        {
            products = await ProductService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入商品資料時發生錯誤：{ex.Message}");
            products = new List<Product>();
        }
    }

    private async Task LoadReturnReasonsAsync()
    {
        try
        {
            returnReasons = await SalesReturnReasonService.GetActiveReasonsAsync();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入退貨原因資料時發生錯誤：{ex.Message}");
            returnReasons = new List<ERPCore2.Data.Entities.SalesReturnReason>();
        }
    }

    /// <summary>
    /// 載入系統稅率 - 一次性載入並快取，避免每次計算都查詢資料庫
    /// </summary>
    private async Task LoadTaxRateAsync()
    {
        try
        {
            currentTaxRate = await SystemParameterService.GetTaxRateAsync();
        }
        catch (Exception)
        {
            // 如果載入失敗，使用預設值 5%
            currentTaxRate = 5.0m;
        }
    }

    /// <summary>
    /// 更新銷售單選項 - 根據客戶ID過濾，並排除已完成的銷售單
    /// </summary>
    private async Task UpdateSalesOrderOptions(int? customerId = null)
    {
        try
        {
            var filteredSalesOrders = salesOrders;

            if (customerId.HasValue)
            {
                // 根據選擇的客戶過濾銷售單
                filteredSalesOrders = salesOrders
                    .Where(so => so.CustomerId == customerId.Value && !IsOrderFullyReturned(so))
                    .ToList();
            }
            else
            {
                // 顯示所有未完全退貨的銷售單
                filteredSalesOrders = salesOrders
                    .Where(so => !IsOrderFullyReturned(so))
                    .ToList();
            }

            // 更新表單中銷售單選項
            var salesOrderField = formFields.FirstOrDefault(f => f.PropertyName == nameof(SalesReturn.SalesOrderId));
            if (salesOrderField != null)
            {
                salesOrderField.Options = filteredSalesOrders.Select(so => new SelectOption
                {
                    Text = so.SalesOrderNumber,
                    Value = so.Id.ToString()
                }).ToList();
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"更新銷售單選項時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 判斷銷售單是否已完全退貨
    /// 退貨條件：所有明細都已完成退貨（退貨數量 == 銷售數量 或 標記為已完成）
    /// </summary>
    private bool IsOrderFullyReturned(SalesOrder salesOrder)
    {
        try
        {
            // 如果沒有明細，視為未完成
            if (salesOrder.SalesOrderDetails == null || !salesOrder.SalesOrderDetails.Any())
                return false;

            // 這裡需要實作檢查邏輯，暫時回傳 false
            // 檢查所有明細是否都已完成退貨
            // return salesOrder.SalesOrderDetails.All(detail => detail.ReturnedQuantity >= detail.Quantity);
            return false;
        }
        catch
        {
            // 發生錯誤時，視為未完成
            return false;
        }
    }

    /// <summary>
    /// 初始化表單欄位
    /// </summary>
    private async Task InitializeFormFieldsAsync()
    {
        try
        {
            formFields = new List<FormFieldDefinition>
            {
                new()
                {
                    PropertyName = nameof(SalesReturn.SalesReturnNumber),
                    Label = "退貨單號",
                    FieldType = FormFieldType.Text,
                    Placeholder = "系統自動產生",
                    IsRequired = true,
                    IsReadOnly = true,
                    MaxLength = 50,
                    HelpText = "系統自動產生的退貨單號"
                },
                new()
                {
                    PropertyName = nameof(SalesReturn.CustomerId),
                    Label = "客戶",
                    FieldType = FormFieldType.AutoComplete,
                    Placeholder = "請輸入或選擇客戶",
                    IsRequired = true,
                    MinSearchLength = 0,
                    HelpText = "輸入客戶名稱進行篩選，或直接選擇",
                    ActionButtons = await GetCustomerActionButtonsAsync()
                },
                new()
                {
                    PropertyName = "FilterProductId", // 篩選用的虛擬欄位
                    Label = "篩選產品",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = await GetFilterProductOptions(),
                    HelpText = "選擇特定產品進行篩選，或留空顯示所有產品"
                },
                new()
                {
                    PropertyName = nameof(SalesReturn.SalesOrderId),
                    Label = "篩選銷售單",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = new List<SelectOption>(), // 初始化空選項，稍後由 UpdateSalesOrderOptions 更新
                    HelpText = "可選擇特定銷售單進行篩選，或留空使用多銷售單模式"
                },
                new()
                {
                    PropertyName = nameof(SalesReturn.ReturnDate),
                    Label = "退貨日期",
                    FieldType = FormFieldType.Date,
                    IsRequired = true,
                    HelpText = "貨品實際退貨日期"
                },
                new()
                {
                    PropertyName = nameof(SalesReturn.ReturnReasonId),
                    Label = "退貨原因",
                    FieldType = FormFieldType.Select,
                    IsRequired = false,
                    Options = new List<SelectOption> 
                    { 
                        new SelectOption { Text = "請選擇...", Value = "" } 
                    }
                    .Concat(returnReasons.Select(r => new SelectOption
                    {
                        Text = r.Name,
                        Value = r.Id.ToString()
                    })).ToList(),
                    HelpText = "選擇性填寫退貨原因"
                },

                new FormFieldDefinition()
                {
                    PropertyName = nameof(SalesReturn.TotalReturnAmount),
                    Label = "退貨總金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    HelpText = "退貨單的總金額，根據明細自動計算",
                    IsReadOnly = true // 總金額欄位始終為唯讀
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(SalesReturn.ReturnTaxAmount),
                    Label = $"退貨稅額({currentTaxRate:F2}%)",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    HelpText = $"退貨單的稅額，根據明細自動計算（稅率：{currentTaxRate:F2}%）",
                    IsReadOnly = true // 稅額欄位始終為唯讀
                },
                new FormFieldDefinition
                {
                    PropertyName = nameof(SalesReturn.TotalReturnAmountWithTax),
                    Label = "含稅總金額",
                    FieldType = FormFieldType.Number,
                    IsRequired = false,
                    HelpText = "退貨單的含稅總金額，根據明細自動計算",
                    IsReadOnly = true // 含稅總金額欄位始終為唯讀
                },

                FormFieldConfigurationHelper.CreateRemarksField<SalesReturn>()
            };

            formSections = new Dictionary<string, string>
            {
                { nameof(SalesReturn.SalesReturnNumber), "基本資訊" },
                { nameof(SalesReturn.CustomerId), "基本資訊" },
                { "FilterProductId", "基本資訊" },
                { nameof(SalesReturn.SalesOrderId), "基本資訊" },
                { nameof(SalesReturn.ReturnDate), "基本資訊" },
                { nameof(SalesReturn.ReturnReasonId), "基本資訊" },
                { nameof(SalesReturn.TotalReturnAmount), "金額資訊(系統自動計算)" },
                { nameof(SalesReturn.ReturnTaxAmount), "金額資訊(系統自動計算)" },
                { nameof(SalesReturn.TotalReturnAmountWithTax), "金額資訊(系統自動計算)" },
                { nameof(BaseEntity.Remarks), "其他資訊" }
            };
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"初始化表單欄位時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 取得產品篩選選項 - 根據選擇的客戶篩選
    /// </summary>
    private async Task<List<SelectOption>> GetFilterProductOptions()
    {
        try
        {
            var options = new List<SelectOption>();
            
            // 目前暫時顯示所有產品，未來可以根據客戶-產品關聯來篩選
            options.AddRange(products.Select(p => new SelectOption
            {
                Value = p.Id.ToString(),
                Text = $"{p.Code} - {p.Name}"
            }));
            
            return options;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入產品選項時發生錯誤：{ex.Message}");
            return new List<SelectOption>();
        }
    }

    /// <summary>
    /// 更新產品篩選選項 - 當客戶變更時調用
    /// </summary>
    private async Task UpdateFilterProductOptions(int? customerId = null)
    {
        try
        {
            // 找到產品篩選欄位並更新其選項
            var filterProductField = formFields.FirstOrDefault(f => f.PropertyName == "FilterProductId");
            if (filterProductField != null)
            {
                var options = new List<SelectOption>();
                
                // 目前暫時顯示所有產品，未來可以根據客戶-產品關聯來篩選
                options.AddRange(products.Select(p => new SelectOption
                {
                    Value = p.Id.ToString(),
                    Text = $"{p.Code} - {p.Name}"
                }));
                
                filterProductField.Options = options;
                
                // 清空目前的產品篩選選擇
                filterProductId = null;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"更新產品篩選選項時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 取得表單欄位清單
    /// </summary>
    private List<FormFieldDefinition> GetFormFields()
    {
        return formFields;
    }

    /// <summary>
    /// 配置 AutoComplete 預填器
    /// </summary>
    private Dictionary<string, Func<string, Dictionary<string, object?>>> GetAutoCompletePrefillers()
    {
        return new Dictionary<string, Func<string, Dictionary<string, object?>>>
        {
            {
                nameof(SalesReturn.CustomerId),
                searchTerm => new Dictionary<string, object?>
                {
                    ["CompanyName"] = searchTerm
                }
            }
        };
    }

    /// <summary>
    /// 配置 Modal 管理器
    /// </summary>
    private Dictionary<string, object> GetModalManagers()
    {
        return new Dictionary<string, object>
        {
            { nameof(SalesReturn.CustomerId), customerModalManager }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 資料集合
    /// </summary>
    private Dictionary<string, IEnumerable<object>> GetAutoCompleteCollections()
    {
        return new Dictionary<string, IEnumerable<object>>
        {
            { nameof(SalesReturn.CustomerId), customers.Cast<object>() }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 顯示屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteDisplayProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(SalesReturn.CustomerId), "CompanyName" }
        };
    }

    /// <summary>
    /// 配置 AutoComplete 值屬性
    /// </summary>
    private Dictionary<string, string> GetAutoCompleteValueProperties()
    {
        return new Dictionary<string, string>
        {
            { nameof(SalesReturn.CustomerId), "Id" }
        };
    }

    /// <summary>
    /// 生成銷售退貨單號
    /// </summary>
    private Task<string> GenerateReturnNumberAsync()
    {
        // 簡化實作，直接使用時間戳生成
        var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
        return Task.FromResult($"SR{timestamp}");
    }

    // ===== 銷售退貨明細管理方法 =====
    
    /// <summary>
    /// 載入銷售退貨明細
    /// </summary>
    private async Task LoadSalesReturnDetails(int salesReturnId)
    {
        try
        {
            salesReturnDetails = await SalesReturnDetailService.GetBySalesReturnIdAsync(salesReturnId);
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"載入退貨明細時發生錯誤：{ex.Message}");
            salesReturnDetails = new List<SalesReturnDetail>();
        }
    }

    /// <summary>
    /// 處理退貨明細變更 - 自動計算總金額和稅額
    /// </summary>
    private async Task HandleReturnDetailsChanged(List<SalesReturnDetail> details)
    {
        try
        {
            salesReturnDetails = details;
            
            if (editModalComponent?.Entity != null)
            {
                // 1. 計算總金額（未稅）- 考慮折扣
                editModalComponent.Entity.TotalReturnAmount = details
                    .Where(d => d.ProductId > 0)
                    .Sum(d => d.ReturnQuantity * d.OriginalUnitPrice * (1 - d.DiscountPercentage / 100));
                
                // 2. 計算稅額 = 總金額 × 稅率（使用快取的稅率，避免每次都查詢資料庫）
                editModalComponent.Entity.ReturnTaxAmount = Math.Round(
                    editModalComponent.Entity.TotalReturnAmount * (currentTaxRate / 100), 
                    2  // 四捨五入到小數點後2位
                );
                
                // 3. 含稅總金額會自動計算（TotalReturnAmountWithTax 是計算屬性）
                //    = TotalReturnAmount + ReturnTaxAmount
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理退貨明細變更時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 處理有不可刪除明細的狀態變更
    /// 當有不可刪除的明細時(已有沖款記錄),鎖定主檔的所有使用者可輸入欄位
    /// </summary>
    private async Task HandleHasUndeletableDetailsChanged(bool hasUndeletable)
    {
        try
        {
            hasUndeletableDetails = hasUndeletable;
            
            // 更新欄位的唯讀狀態
            UpdateFieldsReadOnlyState();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理明細鎖定狀態時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 更新欄位的唯讀狀態
    /// 當有不可刪除的明細時,所有使用者可輸入的欄位都應設為唯讀:
    /// - 客戶 (CustomerId) - 同時禁用新增/編輯按鈕
    /// - 篩選產品 (FilterProductId)
    /// - 銷售單 (SalesOrderId)
    /// - 退貨日期 (ReturnDate)
    /// - 退貨原因 (ReturnReasonId)
    /// - 備註 (Remarks)
    /// 
    /// 不鎖定的欄位（系統自動計算/生成）:
    /// - 退貨單號 (SalesReturnNumber) - 已經是唯讀
    /// - 退貨總金額 (TotalReturnAmount) - 已經是唯讀
    /// - 退貨稅額 (ReturnTaxAmount) - 已經是唯讀
    /// - 含稅總金額 (TotalReturnAmountWithTax) - 已經是唯讀
    /// </summary>
    private void UpdateFieldsReadOnlyState()
    {
        // 客戶欄位 - 設為唯讀並清空 ActionButtons
        var customerField = formFields.FirstOrDefault(f => f.PropertyName == nameof(SalesReturn.CustomerId));
        if (customerField != null)
        {
            customerField.IsReadOnly = hasUndeletableDetails;
            
            // 如果有不可刪除的明細，移除操作按鈕；否則恢復操作按鈕
            if (hasUndeletableDetails)
            {
                customerField.ActionButtons = new List<FieldActionButton>();
            }
            else
            {
                customerField.ActionButtons = GetCustomerActionButtonsAsync().Result;
            }
        }
        
        // 篩選產品欄位
        var filterProductField = formFields.FirstOrDefault(f => f.PropertyName == "FilterProductId");
        if (filterProductField != null)
        {
            filterProductField.IsReadOnly = hasUndeletableDetails;
        }
        
        // 銷售單欄位
        var salesOrderField = formFields.FirstOrDefault(f => f.PropertyName == nameof(SalesReturn.SalesOrderId));
        if (salesOrderField != null)
        {
            salesOrderField.IsReadOnly = hasUndeletableDetails;
        }
        
        // 退貨日期欄位
        var returnDateField = formFields.FirstOrDefault(f => f.PropertyName == nameof(SalesReturn.ReturnDate));
        if (returnDateField != null)
        {
            returnDateField.IsReadOnly = hasUndeletableDetails;
        }
        
        // 退貨原因欄位
        var returnReasonField = formFields.FirstOrDefault(f => f.PropertyName == nameof(SalesReturn.ReturnReasonId));
        if (returnReasonField != null)
        {
            returnReasonField.IsReadOnly = hasUndeletableDetails;
        }
        
        // 備註欄位
        var remarksField = formFields.FirstOrDefault(f => f.PropertyName == nameof(BaseEntity.Remarks));
        if (remarksField != null)
        {
            remarksField.IsReadOnly = hasUndeletableDetails;
        }
    }

    /// <summary>
    /// 取得狀態訊息（頂部徽章）
    /// 當有不可刪除的明細時，顯示鎖定提示
    /// </summary>
    private async Task<(string Message, GenericEditModalComponent<SalesReturn, ISalesReturnService>.BadgeVariant Variant, string IconClass)?> 
        GetStatusMessage()
    {
        try
        {
            if (!isDetailDataReady || editModalComponent?.Entity == null)
                return null;
            
            if (hasUndeletableDetails)
            {
                return (
                    "明細有沖款記錄，主檔欄位已鎖定",
                    GenericEditModalComponent<SalesReturn, ISalesReturnService>.BadgeVariant.Warning,
                    "fas fa-lock"
                );
            }
            
            return null;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(GetStatusMessage), GetType());
            return null;
        }
    }

    /// <summary>
    /// 取得警告訊息（表單頂部）
    /// 當有不可刪除的明細時，顯示詳細說明
    /// </summary>
    private RenderFragment? GetWarningMessage() => __builder =>
    {
        @if (isDetailDataReady && hasUndeletableDetails)
        {
            <div class="alert alert-warning mb-2 py-2" role="alert">
                <i class="fas fa-lock me-2"></i>因部分明細有沖款記錄，為保護資料完整性主檔欄位已設唯讀。
            </div>
        }
    };

    /// <summary>
    /// 處理欄位值變更事件
    /// </summary>
    private async Task OnFieldValueChanged((string PropertyName, object? Value) fieldChange)
    {
        try
        {
            switch (fieldChange.PropertyName)
            {
                case nameof(SalesReturn.CustomerId):
                    if (int.TryParse(fieldChange.Value?.ToString(), out var customerId))
                    {
                        // 當客戶變更時，更新銷售單選項和產品篩選選項
                        await UpdateSalesOrderOptions(customerId);
                        await UpdateFilterProductOptions(customerId);
                        
                        // 🔑 只有在沒有不可刪除明細時才更新 ActionButtons
                        if (!hasUndeletableDetails)
                        {
                            // 使用統一 Helper 更新客戶欄位的操作按鈕
                            await ActionButtonHelper.UpdateFieldActionButtonsAsync(
                                customerModalManager, formFields, fieldChange.PropertyName, fieldChange.Value);
                        }
                        
                        // 清除現有的銷售單選擇
                        if (editModalComponent?.Entity != null)
                        {
                            editModalComponent.Entity.SalesOrderId = null;
                            StateHasChanged();
                        }
                    }
                    break;

                case "FilterProductId":
                    if (int.TryParse(fieldChange.Value?.ToString(), out var productId))
                    {
                        filterProductId = productId == 0 ? null : productId;
                        
                        // 通知退貨明細管理器篩選變更
                        // if (salesReturnDetailManager != null)
                        // {
                        //     // 這裡可以調用明細管理器的篩選方法
                        //     StateHasChanged();
                        // }
                        StateHasChanged();
                    }
                    break;

                case nameof(SalesReturn.SalesOrderId):
                    // 當銷售單ID變更時，觸發重新渲染以篩選對應的銷售明細
                    StateHasChanged();
                    break;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理欄位變更時發生錯誤：{ex.Message}");
        }
    }

    /// <summary>
    /// 驗證銷售退貨明細 - 在儲存主檔之前執行
    /// </summary>
    private async Task<bool> ValidateSalesReturnDetailsAsync(SalesReturn salesReturn)
    {
        try
        {
            // 驗證必填欄位
            if (salesReturn.CustomerId <= 0)
            {
                await NotificationService.ShowErrorAsync("請選擇客戶");
                return false;
            }
            
            // 首先呼叫明細管理器的驗證方法
            if (salesReturnDetailManager != null)
            {
                bool isValidDetails = await salesReturnDetailManager.ValidateAsync();
                if (!isValidDetails)
                {
                    return false;
                }
            }
            
            // 檢查是否有有效的明細
            var validDetails = salesReturnDetails.Where(d => d.ProductId > 0 && d.ReturnQuantity > 0).ToList();
            if (!validDetails.Any())
            {
                await NotificationService.ShowErrorAsync("至少需要一筆退貨明細");
                return false;
            }
            
            return true;
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"驗證退貨明細時發生錯誤：{ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// 自訂儲存邏輯 - 同時儲存主檔和明細，並更新庫存
    /// </summary>
    private async Task<bool> SaveSalesReturnWithDetails(SalesReturn salesReturn)
    {
        try
        {
            if (salesReturn == null)
            {
                return false;
            }
            
            // 先執行自訂驗證
            if (!await ValidateSalesReturnDetailsAsync(salesReturn))
            {
                return false;
            }
            
            if (SalesReturnService == null)
            {
                return false;
            }
            
            if (salesReturnDetails == null)
            {
                salesReturnDetails = new List<SalesReturnDetail>();
            }
            
            // 🔑 儲存前再次計算總金額和稅額（確保資料一致性）
            salesReturn.TotalReturnAmount = salesReturnDetails
                .Where(d => d.ProductId > 0)
                .Sum(d => d.ReturnQuantity * d.OriginalUnitPrice * (1 - d.DiscountPercentage / 100));
            
            salesReturn.ReturnTaxAmount = Math.Round(
                salesReturn.TotalReturnAmount * (currentTaxRate / 100), 
                2
            );
                        
            // 呼叫服務的 SaveWithDetailsAsync 方法
            var result = await SalesReturnService.SaveWithDetailsAsync(salesReturn, salesReturnDetails);
            
            if (result == null)
            {
                return false;
            }
            
            if (result.IsSuccess)
            {
                return true;
            }
            else
            {
                await NotificationService.ShowErrorAsync($"儲存失敗：{result.ErrorMessage}");
                return false;
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"儲存銷貨退回時發生錯誤：{ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// 配置自訂模組
    /// </summary>
    private List<GenericEditModalComponent<SalesReturn, ISalesReturnService>.CustomModule> GetCustomModules()
    {
        try
        {
            return new List<GenericEditModalComponent<SalesReturn, ISalesReturnService>.CustomModule>
            {
                new()
                {
                    Title = "",
                    Content = CreateReturnDetailManagerContent(),
                    Order = 1
                }
            };
        }
        catch
        {
            return new List<GenericEditModalComponent<SalesReturn, ISalesReturnService>.CustomModule>();
        }
    }

    /// <summary>
    /// 創建退貨明細管理器內容的 RenderFragment
    /// </summary>
    private RenderFragment CreateReturnDetailManagerContent() => __builder =>
    {
        try
        {
            @if (editModalComponent?.Entity != null)
            {
                @if (!isDetailDataReady)
                {
                    <div class="d-flex justify-content-center align-items-center py-4">
                        <div class="spinner-border spinner-border-sm text-primary me-2" role="status"></div>
                        <span class="text-muted">載入明細資料中...</span>
                    </div>
                }
                // 檢查是否有可用的商品和倉庫資料
                else if (products != null && products.Any() && warehouses != null && warehouses.Any())
                {
                    // 檢查是否已選擇客戶
                    @if (editModalComponent.Entity.CustomerId > 0)
                    {
                        <SalesReturnDetailManagerComponent @ref="salesReturnDetailManager"
                            Products="@products"
                            CustomerId="@(editModalComponent?.Entity?.CustomerId)"
                            FilterSalesOrderId="@FilterSalesOrderId"
                            FilterProductId="@FilterProductId"
                            ExistingReturnDetails="@salesReturnDetails"
                            OnReturnDetailsChanged="@HandleReturnDetailsChanged"
                            OnHasUndeletableDetailsChanged="@HandleHasUndeletableDetailsChanged"
                            OnOpenRelatedDocument="@HandleOpenRelatedDocument"
                            IsEditMode="@SalesReturnId.HasValue" />
                    }
                    else
                    {
                        <div class="alert alert-info text-center" role="alert">
                            <i class="fas fa-info-circle me-2"></i>
                            請先選擇客戶後再進行退貨明細管理
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-warning text-center" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        無可用的商品或倉庫資料，請聯繫系統管理員
                    </div>
                }
            }
            else
            {
                <div class="text-center py-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">載入中...</span>
                    </div>
                </div>
            }
        }
        catch
        {
            <div class="alert alert-warning text-center" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                明細管理器載入失敗，請重新整理頁面。
            </div>
        }
    };
    
    // ===== Modal 管理器初始化方法 =====
    
    /// <summary>
    /// 初始化客戶 Modal 管理器
    /// </summary>
    private void InitializeCustomerModalManager()
    {
        customerModalManager = new RelatedEntityManagerBuilder<Customer>(NotificationService, "客戶")
            .WithPropertyName(nameof(SalesReturn.CustomerId))
            .WithReloadCallback(LoadAdditionalDataAsync)
            .WithStateChangedCallback(StateHasChanged)
            .WithAutoSelectCallback(customerId => 
            {
                if (editModalComponent?.Entity != null)
                {
                    editModalComponent.Entity.CustomerId = customerId;
                }
            })
            .WithCustomPostProcess(async customer => 
            {
                await InitializeFormFieldsAsync();
            })
            .Build();
    }

    /// <summary>
    /// 產生客戶操作按鈕 - 使用統一 Helper
    /// </summary>
    private async Task<List<FieldActionButton>> GetCustomerActionButtonsAsync()
    {
        return await ActionButtonHelper.GenerateFieldActionButtonsAsync(
            editModalComponent, 
            customerModalManager, 
            nameof(SalesReturn.CustomerId)
        );
    }

    /// <summary>
    /// 包裝客戶儲存事件
    /// </summary>
    private async Task OnCustomerSavedWrapper(Customer savedCustomer)
    {
        await customerModalManager.HandleEntitySavedAsync(savedCustomer, shouldAutoSelect: true);
    }
    
    /// <summary>
    /// 處理開啟相關單據的事件
    /// </summary>
    private async Task HandleOpenRelatedDocument((RelatedDocumentType type, int id) args)
    {
        try
        {
            if (args.type == RelatedDocumentType.SetoffDocument)
            {
                // 開啟沖款單
                selectedSetoffDocumentId = args.id;
                showSetoffDocumentModal = true;
                StateHasChanged();
            }
            else
            {
                await NotificationService.ShowWarningAsync("不支援的單據類型", "提示");
            }
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"開啟單據失敗：{ex.Message}");
        }
    }
    
    /// <summary>
    /// 處理沖款單儲存後的事件
    /// </summary>
    private async Task HandleSetoffDocumentSaved(SetoffDocument savedDocument)
    {
        try
        {
            showSetoffDocumentModal = false;
            await NotificationService.ShowSuccessAsync("沖款單已更新");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await NotificationService.ShowErrorAsync($"處理沖款單儲存事件失敗：{ex.Message}");
        }
    }

    /// <summary>
    /// 建立庫存交易記錄 - 新增模式
    /// </summary>
    private async Task CreateInventoryTransactionsAsync(List<SalesReturnDetail> details, string returnNumber)
    {
        // 這裡應該實作庫存交易建立邏輯
        // 退貨會增加庫存，所以交易類型為正數
        await Task.CompletedTask;
    }

    /// <summary>
    /// 使用差異比較更新庫存
    /// </summary>
    private async Task UpdateInventoryByDifferenceAsync(List<SalesReturnDetail> originalDetails, List<SalesReturnDetail> newDetails, string returnNumber)
    {
        // 這裡應該實作庫存差異更新邏輯
        // 比較原始明細和新明細的差異，只更新變更的部分
        await Task.CompletedTask;
    }

    /// <summary>
    /// 釋放資源
    /// </summary>
    public void Dispose()
    {
        try
        {
            // 清理資源
            editModalComponent = null;
            salesReturnDetailManager = null;
            // customerEditModal = null;
            
            // 清理事件訂閱（如果有的話）
            // ...
        }
        catch
        {
            // 忽略清理過程中的錯誤
        }
    }
}