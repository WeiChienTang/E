@page "/salesReturns"
@using ERPCore2.Components.Shared.Report
@using ERPCore2.Models
@inject ISalesReturnService SalesReturnService
@inject ISalesOrderService SalesOrderService
@inject IWarehouseService WarehouseService
@inject ISalesReturnReasonService SalesReturnReasonService
@inject ICustomerService CustomerService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="SalesReturn" 
                          TService="ISalesReturnService"
                          Service="@SalesReturnService"
                          EntityBasePath="/salesReturns"
                          PageTitle="退貨管理"
                          PageSubtitle="管理所有退貨單資料與退貨狀態"
                          EntityName="退貨單"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSalesReturnsAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplySalesReturnFilters"
                          GetEntityDisplayName="@(salesReturn => salesReturn.SalesReturnNumber)"
                          RequiredPermission="SalesReturn.Read"
                          ShowBatchPrintButton="true"
                          OnBatchPrintClick="@HandleBatchPrintAsync"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 退貨單編輯 Modal *@
<SalesReturnEditModalComponent IsVisible="@showEditModal"
                               IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                               SalesReturnId="@editingSalesReturnId"
                               OnSalesReturnSaved="@modalHandler.OnEntitySavedAsync"
                               OnCancel="@modalHandler.OnModalCancelAsync" />

@* 批次列印篩選 Modal - 使用新架構 *@
<BatchPrintFilterModalComponent IsVisible="@showBatchPrintModal"
                               IsVisibleChanged="@((bool visible) => showBatchPrintModal = visible)"
                               Title="銷貨退回單批次列印條件"
                               OnConfirm="@HandleBatchPrintConfirmAsync"
                               OnCancel="@HandleBatchPrintCancelAsync">
    @* 區塊 1: 客戶多選篩選 *@
    <FilterSectionComponent Title="客戶篩選 (可多選)" 
                           Badge="@($"{selectedCustomers.Count} / {customers.Count}")">
        <MultiSelectFilterComponent TItem="Customer"
                                   Items="@customers"
                                   @bind-SelectedItems="@selectedCustomers"
                                   DisplayProperty="CompanyName"
                                   ValueProperty="Id"
                                   Placeholder="請輸入客戶名稱搜尋..."
                                   EmptyMessage="尚未選擇客戶，留空表示列印所有客戶的銷貨退回單"
                                   ShowCard="false" />
    </FilterSectionComponent>
    
    @* 區塊 2: 退回日期範圍 - 使用日期範圍元件 *@
    <FilterSectionComponent Title="退回日期" 
                           IconClass="bi bi-calendar-range">
        <DateRangeFilterComponent @bind-StartDate="@batchPrintStartDate"
                                 @bind-EndDate="@batchPrintEndDate"
                                 StartDateLabel="起始日期"
                                 EndDateLabel="結束日期"
                                 ShowQuickSelectors="true"
                                 AutoValidate="true"
                                 ShowValidationMessage="true" />
    </FilterSectionComponent>
</BatchPrintFilterModalComponent>

@code {
    // 組件參考
    private GenericIndexPageComponent<SalesReturn, ISalesReturnService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingSalesReturnId = null;
    
    // 批次列印 Modal 相關狀態
    private bool showBatchPrintModal = false;
    private List<Customer> selectedCustomers = new();
    private DateTime? batchPrintStartDate = null;
    private DateTime? batchPrintEndDate = null;
    
    // Modal 處理器
    private ModalHandler<SalesReturn, GenericIndexPageComponent<SalesReturn, ISalesReturnService>> modalHandler = default!;
    
    // 欄位配置
    private SalesReturnFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    // 相關資料
    private List<SalesOrder> salesOrders = new();
    private List<Warehouse> warehouses = new();
    private List<ERPCore2.Data.Entities.SalesReturnReason> returnReasons = new();
    private List<Customer> customers = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<SalesReturn, GenericIndexPageComponent<SalesReturn, ISalesReturnService>>(
                id => editingSalesReturnId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入相關資料
            await LoadSalesOrdersAsync();
            await LoadWarehousesAsync();
            await LoadReturnReasonsAsync();
            await LoadCustomersAsync();
            
            // 建立欄位配置
            fieldConfiguration = new SalesReturnFieldConfiguration(salesOrders, warehouses, returnReasons, NotificationService);
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化退貨頁面失敗");
            await NotificationService.ShowErrorAsync("初始化退貨頁面失敗");
        }
    }

    /// <summary>
    /// 初始化麵包屑導航
    /// </summary>
    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("銷售管理", "#"),
                new("退貨管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    /// <summary>
    /// 載入退貨單資料
    /// </summary>
    private async Task<List<SalesReturn>> LoadSalesReturnsAsync()
    {
        try
        {
            return await SalesReturnService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSalesReturnsAsync), GetType(), additionalData: "載入退貨單資料失敗");
            await NotificationService.ShowErrorAsync("載入退貨單資料失敗");
            return new List<SalesReturn>();
        }
    }

    /// <summary>
    /// 載入基礎資料
    /// </summary>
    private async Task LoadBasicDataAsync()
    {
        try
        {
            await LoadSalesOrdersAsync();
            await LoadWarehousesAsync();
            await LoadReturnReasonsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadBasicDataAsync), GetType(), additionalData: "載入基礎資料失敗");
            await NotificationService.ShowErrorAsync("載入基礎資料失敗");
        }
    }

    /// <summary>
    /// 載入銷售訂單資料
    /// </summary>
    private async Task LoadSalesOrdersAsync()
    {
        try
        {
            // 載入所有銷售訂單
            salesOrders = await SalesOrderService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSalesOrdersAsync), GetType(), additionalData: "載入銷售訂單資料失敗");
            await NotificationService.ShowErrorAsync("載入銷售訂單資料失敗");
            salesOrders = new List<SalesOrder>();
        }
    }

    /// <summary>
    /// 載入倉庫資料
    /// </summary>
    private async Task LoadWarehousesAsync()
    {
        try
        {
            warehouses = await WarehouseService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadWarehousesAsync), GetType(), additionalData: "載入倉庫資料失敗");
            await NotificationService.ShowErrorAsync("載入倉庫資料失敗");
            warehouses = new List<Warehouse>();
        }
    }

    /// <summary>
    /// 載入退貨原因資料
    /// </summary>
    private async Task LoadReturnReasonsAsync()
    {
        try
        {
            returnReasons = await SalesReturnReasonService.GetActiveReasonsAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadReturnReasonsAsync), GetType(), additionalData: "載入退貨原因資料失敗");
            await NotificationService.ShowErrorAsync("載入退貨原因資料失敗");
            returnReasons = new List<ERPCore2.Data.Entities.SalesReturnReason>();
        }
    }

    /// <summary>
    /// 載入客戶資料
    /// </summary>
    private async Task LoadCustomersAsync()
    {
        try
        {
            customers = await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCustomersAsync), GetType(), additionalData: "載入客戶資料失敗");
            await NotificationService.ShowErrorAsync("載入客戶資料失敗");
            customers = new List<Customer>();
        }
    }

    /// <summary>
    /// 應用退貨單篩選器
    /// </summary>
    private IQueryable<SalesReturn> ApplySalesReturnFilters(SearchFilterModel searchModel, IQueryable<SalesReturn> query)
    {
        // 確保 fieldConfiguration 已初始化（避免與 GenericIndexPageComponent 初始化的競爭條件）
        if (fieldConfiguration == null)
        {
            // 如果配置未初始化，回傳基本排序的查詢
            return query.OrderByDescending(sr => sr.ReturnDate)
                       .ThenByDescending(sr => sr.SalesReturnNumber);
        }

        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplySalesReturnFilters), GetType());
    }

    // 批次列印處理方法
    private async Task HandleBatchPrintAsync()
    {
        try
        {
            // 顯示批次列印篩選 Modal
            showBatchPrintModal = true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintAsync), GetType(), additionalData: "開啟多筆列印視窗失敗");
            await NotificationService.ShowErrorAsync("開啟多筆列印視窗失敗");
        }
    }

    // 處理批次列印確認
    private async Task HandleBatchPrintConfirmAsync()
    {
        try
        {
            // 組裝批次列印條件
            var criteria = new BatchPrintCriteria
            {
                StartDate = batchPrintStartDate,
                EndDate = batchPrintEndDate,
                RelatedEntityIds = selectedCustomers.Select(c => c.Id).ToList(),
                ReportType = "SalesReturn",
                MaxResults = 100,
                IncludeCancelled = false
            };

            // 驗證篩選條件
            var validation = criteria.Validate();
            if (!validation.IsValid)
            {
                await NotificationService.ShowErrorAsync($"篩選條件錯誤：{validation.GetAllErrors()}");
                return;
            }

            // 序列化條件為 JSON
            var jsonPayload = System.Text.Json.JsonSerializer.Serialize(criteria);

            // 開啟新視窗顯示批次報表（使用新路由）
            var apiUrl = "/api/sales-report/return/batch?autoprint=true";
            await JSRuntime.InvokeVoidAsync("openBatchPrintWindow", apiUrl, jsonPayload);

            // 顯示成功訊息
            await NotificationService.ShowSuccessAsync($"已開啟批次列印視窗 ({criteria.GetSummary()})");
            
            // 關閉 Modal
            showBatchPrintModal = false;
            
            // 清空選擇
            selectedCustomers.Clear();
            batchPrintStartDate = null;
            batchPrintEndDate = null;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintConfirmAsync), GetType(), additionalData: "執行批次列印失敗");
            await NotificationService.ShowErrorAsync("執行批次列印失敗");
        }
    }

    // 處理批次列印取消
    private async Task HandleBatchPrintCancelAsync()
    {
        try
        {
            showBatchPrintModal = false;
            
            // 清空所有篩選條件
            selectedCustomers.Clear();
            batchPrintStartDate = null;
            batchPrintEndDate = null;
            
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintCancelAsync), GetType(), additionalData: "取消批次列印失敗");
        }
    }
}