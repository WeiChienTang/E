@page "/sales-returns"
@inject ISalesReturnService SalesReturnService
@inject ISalesOrderService SalesOrderService
@inject ISalesDeliveryService SalesDeliveryService
@inject ICustomerService CustomerService
@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="SalesReturn" 
                          TService="ISalesReturnService"
                          Service="@SalesReturnService"
                          EntityBasePath="/sales-returns"
                          PageTitle="銷貨退回管理"
                          PageSubtitle="管理所有銷貨退回與退款資料"
                          EntityName="銷貨退回"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSalesReturnsAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplySalesReturnFilters"
                          GetEntityDisplayName="@(salesReturn => salesReturn.SalesReturnNumber)"
                          RequiredPermission="SalesReturn.Read"
                          @ref="indexPageRef" />

@code {
    // 組件參考
    private GenericIndexPageComponent<SalesReturn, ISalesReturnService> indexPageRef = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 選項清單
    private List<SelectOption> customerOptions = new();
    private List<SelectOption> salesOrderOptions = new();
    private List<SelectOption> salesDeliveryOptions = new();
    private List<SelectOption> employeeOptions = new();
    private List<SelectOption> statusOptions = new();
    private List<SelectOption> reasonOptions = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeBasicFilters();
            InitializeColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitialized),
                GetType(),
                additionalData: "初始化銷貨退回頁面失敗"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("銷貨管理", "/"),
                new("銷貨退回", "/sales-returns")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化麵包屑失敗"
            );
        }
    }

    private void InitializeBasicFilters()
    {
        try
        {
            // 建立基本篩選定義（不包含下拉選單選項，這些將在 LoadBasicDataAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SearchTerm", "搜尋", "請輸入退回單號、客戶名稱、處理人員...")
                .AddSelect("CustomerId", "客戶", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("SalesOrderId", "銷貨訂單", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("SalesDeliveryId", "銷貨出貨", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("ReturnStatus", "退回狀態", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("ReturnReason", "退回原因", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("EmployeeId", "處理人員", new List<SelectOption>()) // 空的選項，稍後載入
                .AddDateRange("ReturnDateRange", "退回日期")
                .AddSelect("IsRefunded", "退款狀態", new List<SelectOption>()) // 改為下拉選單
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBasicFilters),
                GetType(),
                additionalData: "初始化基本篩選器失敗"
            );
            
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 載入客戶選項
            var customers = await CustomerService.GetAllAsync();
            customerOptions = customers
                .Where(c => !c.IsDeleted)
                .OrderBy(c => c.CompanyName)
                .Select(c => new SelectOption 
                { 
                    Value = c.Id.ToString(),
                    Text = $"{c.CompanyName} ({c.Code})"
                })
                .ToList();

            // 載入銷貨訂單選項
            var salesOrders = await SalesOrderService.GetAllAsync();
            salesOrderOptions = salesOrders
                .Where(so => !so.IsDeleted)
                .OrderBy(so => so.SalesOrderNumber)
                .Select(so => new SelectOption 
                { 
                    Value = so.Id.ToString(),
                    Text = $"{so.SalesOrderNumber} - {so.Customer?.CompanyName ?? "未知客戶"}"
                })
                .ToList();

            // 載入銷貨出貨選項
            var salesDeliveries = await SalesDeliveryService.GetAllAsync();
            salesDeliveryOptions = salesDeliveries
                .Where(sd => !sd.IsDeleted)
                .OrderBy(sd => sd.DeliveryNumber)
                .Select(sd => new SelectOption 
                { 
                    Value = sd.Id.ToString(),
                    Text = $"{sd.DeliveryNumber} - {sd.SalesOrder?.Customer?.CompanyName ?? "未知客戶"}"
                })
                .ToList();

            // 載入員工選項
            var employees = await EmployeeService.GetAllAsync();
            employeeOptions = employees
                .Where(e => !e.IsDeleted && e.Status == EntityStatus.Active)
                .OrderBy(e => e.FirstName)
                .ThenBy(e => e.LastName)
                .Select(e => new SelectOption 
                { 
                    Value = e.Id.ToString(),
                    Text = $"{e.FirstName} {e.LastName}"
                })
                .ToList();

            // 準備退回狀態選項
            statusOptions = Enum.GetValues<SalesReturnStatus>()
                .Select(status => new SelectOption
                {
                    Value = ((int)status).ToString(),
                    Text = GetReturnStatusDisplayName(status)
                })
                .ToList();

            // 準備退回原因選項
            reasonOptions = Enum.GetValues<SalesReturnReason>()
                .Select(reason => new SelectOption
                {
                    Value = ((int)reason).ToString(),
                    Text = GetReturnReasonDisplayName(reason)
                })
                .ToList();

            // 準備退款狀態選項
            var refundStatusOptions = new List<SelectOption>
            {
                new() { Value = "", Text = "全部" },
                new() { Value = "true", Text = "已退款" },
                new() { Value = "false", Text = "未退款" }
            };

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SearchTerm", "搜尋", "請輸入退回單號、客戶名稱、處理人員...")
                .AddSelect("CustomerId", "客戶", customerOptions)
                .AddSelect("SalesOrderId", "銷貨訂單", salesOrderOptions)
                .AddSelect("SalesDeliveryId", "銷貨出貨", salesDeliveryOptions)
                .AddSelect("ReturnStatus", "退回狀態", statusOptions)
                .AddSelect("ReturnReason", "退回原因", reasonOptions)
                .AddSelect("EmployeeId", "處理人員", employeeOptions)
                .AddDateRange("ReturnDateRange", "退回日期")
                .AddSelect("IsRefunded", "退款狀態", refundStatusOptions)
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadBasicDataAsync),
                GetType(),
                additionalData: "載入基礎資料失敗"
            );
        }
    }

    private async Task<List<SalesReturn>> LoadSalesReturnsAsync()
    {
        try
        {
            return await SalesReturnService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadSalesReturnsAsync),
                GetType(),
                additionalData: "載入銷貨退回資料失敗"
            );
            
            StateHasChanged();
            return new List<SalesReturn>();
        }
    }

    private IQueryable<SalesReturn> ApplySalesReturnFilters(SearchFilterModel searchModel, IQueryable<SalesReturn> query)
    {
        try
        {
            // 文字搜尋篩選
            var searchTerm = searchModel.GetFilterValue("SearchTerm")?.ToString();
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                query = query.Where(sr => 
                    sr.SalesReturnNumber.Contains(searchTerm) ||
                    (sr.Customer != null && sr.Customer.CompanyName.Contains(searchTerm)) ||
                    (sr.ProcessPersonnel != null && sr.ProcessPersonnel.Contains(searchTerm)) ||
                    (sr.ReturnDescription != null && sr.ReturnDescription.Contains(searchTerm)));
            }

            // 客戶篩選
            var customerIdFilter = searchModel.GetFilterValue("CustomerId")?.ToString();
            if (!string.IsNullOrWhiteSpace(customerIdFilter) && int.TryParse(customerIdFilter, out var customerId))
            {
                query = query.Where(sr => sr.CustomerId == customerId);
            }

            // 銷貨訂單篩選
            var salesOrderIdFilter = searchModel.GetFilterValue("SalesOrderId")?.ToString();
            if (!string.IsNullOrWhiteSpace(salesOrderIdFilter) && int.TryParse(salesOrderIdFilter, out var salesOrderId))
            {
                query = query.Where(sr => sr.SalesOrderId == salesOrderId);
            }

            // 銷貨出貨篩選
            var salesDeliveryIdFilter = searchModel.GetFilterValue("SalesDeliveryId")?.ToString();
            if (!string.IsNullOrWhiteSpace(salesDeliveryIdFilter) && int.TryParse(salesDeliveryIdFilter, out var salesDeliveryId))
            {
                query = query.Where(sr => sr.SalesDeliveryId == salesDeliveryId);
            }

            // 退回狀態篩選
            var statusFilter = searchModel.GetFilterValue("ReturnStatus")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<SalesReturnStatus>(statusFilter, out var status))
            {
                query = query.Where(sr => sr.ReturnStatus == status);
            }

            // 退回原因篩選
            var reasonFilter = searchModel.GetFilterValue("ReturnReason")?.ToString();
            if (!string.IsNullOrWhiteSpace(reasonFilter) && Enum.TryParse<SalesReturnReason>(reasonFilter, out var reason))
            {
                query = query.Where(sr => sr.ReturnReason == reason);
            }

            // 處理人員篩選
            var employeeIdFilter = searchModel.GetFilterValue("EmployeeId")?.ToString();
            if (!string.IsNullOrWhiteSpace(employeeIdFilter) && int.TryParse(employeeIdFilter, out var employeeId))
            {
                query = query.Where(sr => sr.EmployeeId == employeeId);
            }

            // 日期範圍篩選
            var dateRange = searchModel.GetFilterValue("ReturnDateRange") as DateRange;
            if (dateRange != null)
            {
                if (dateRange.StartDate.HasValue)
                    query = query.Where(sr => sr.ReturnDate >= dateRange.StartDate.Value);
                if (dateRange.EndDate.HasValue)
                    query = query.Where(sr => sr.ReturnDate <= dateRange.EndDate.Value);
            }

            // 已退款篩選
            var isRefundedFilter = searchModel.GetFilterValue("IsRefunded")?.ToString();
            if (!string.IsNullOrWhiteSpace(isRefundedFilter) && bool.TryParse(isRefundedFilter, out var isRefunded))
            {
                query = query.Where(sr => sr.IsRefunded == isRefunded);
            }

            return query.OrderByDescending(sr => sr.ReturnDate)
                       .ThenBy(sr => sr.SalesReturnNumber);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(ApplySalesReturnFilters),
                GetType(),
                additionalData: new { 
                    Method = nameof(ApplySalesReturnFilters),
                    SearchModel = searchModel?.ToString()
                });
            return query; // 回傳原始查詢作為後備
        }
    }

    private void InitializeColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                new()
                {
                    PropertyName = nameof(SalesReturn.SalesReturnNumber),
                    Title = "退回單號",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 120px"
                },
                new()
                {
                    PropertyName = nameof(SalesReturn.ReturnDate),
                    Title = "退回日期",
                    DataType = ColumnDataType.Date,
                    IsSortable = true,
                    HeaderStyle = "width: 110px"
                },
                new()
                {
                    PropertyName = "Customer.CompanyName",
                    Title = "客戶名稱",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 150px"
                },
                new()
                {
                    PropertyName = nameof(SalesReturn.ReturnStatus),
                    Title = "退回狀態",
                    DataType = ColumnDataType.Status,
                    IsSortable = true,
                    HeaderStyle = "width: 100px",
                    StatusBadgeMap = new Dictionary<object, string>
                    {
                        { SalesReturnStatus.Draft, "bg-secondary" },
                        { SalesReturnStatus.Submitted, "bg-warning" },
                        { SalesReturnStatus.Confirmed, "bg-info" },
                        { SalesReturnStatus.Processing, "bg-primary" },
                        { SalesReturnStatus.Completed, "bg-success" },
                        { SalesReturnStatus.Cancelled, "bg-danger" },
                        { SalesReturnStatus.Closed, "bg-dark" }
                    }
                },
                new()
                {
                    PropertyName = nameof(SalesReturn.ReturnReason),
                    Title = "退回原因",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 120px"
                },
                new()
                {
                    PropertyName = nameof(SalesReturn.TotalReturnAmountWithTax),
                    Title = "退回總金額",
                    DataType = ColumnDataType.Currency,
                    IsSortable = true,
                    HeaderStyle = "width: 120px",
                    CellCssClass = "text-end"
                },
                new()
                {
                    PropertyName = nameof(SalesReturn.IsRefunded),
                    Title = "退款狀態",
                    DataType = ColumnDataType.Boolean,
                    IsSortable = true,
                    HeaderStyle = "width: 100px",
                    TrueText = "已退款",
                    FalseText = "未退款"
                },
                new()
                {
                    PropertyName = nameof(SalesReturn.ProcessPersonnel),
                    Title = "處理人員",
                    DataType = ColumnDataType.Text,
                    IsSortable = true,
                    HeaderStyle = "width: 120px"
                },
                new()
                {
                    PropertyName = "Actions",
                    Title = "操作",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 120px",
                    IsSortable = false,
                    CellCssClass = "text-center"
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeColumns),
                GetType(),
                additionalData: "初始化欄位定義失敗"
            );
            
            // 設定安全的預設值
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }

    private static string GetReturnStatusDisplayName(SalesReturnStatus status)
    {
        return status switch
        {
            SalesReturnStatus.Draft => "草稿",
            SalesReturnStatus.Submitted => "已提交",
            SalesReturnStatus.Processing => "處理中",
            SalesReturnStatus.Completed => "已完成",
            SalesReturnStatus.Cancelled => "已取消",
            _ => status.ToString()
        };
    }

    private static string GetReturnReasonDisplayName(SalesReturnReason reason)
    {
        return reason switch
        {
            SalesReturnReason.CustomerRequest => "客戶要求",
            SalesReturnReason.QualityIssue => "品質不良",
            SalesReturnReason.ShippingDamage => "運送損壞",
            SalesReturnReason.SpecificationMismatch => "規格不符",
            SalesReturnReason.QuantityError => "數量錯誤",
            SalesReturnReason.ExpiredProduct => "過期商品",
            SalesReturnReason.Other => "其他",
            _ => reason.ToString()
        };
    }

    private static string GetReturnStatusBadgeClass(SalesReturnStatus status)
    {
        return status switch
        {
            SalesReturnStatus.Draft => "bg-secondary",
            SalesReturnStatus.Submitted => "bg-primary",
            SalesReturnStatus.Processing => "bg-warning",
            SalesReturnStatus.Completed => "bg-success",
            SalesReturnStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
