@page "/sales-returns/{id:int}"
@inject ISalesReturnService SalesReturnService
@rendermode InteractiveServer

<GenericDetailPageComponent TEntity="SalesReturn" 
                           TService="ISalesReturnService"
                           EntityId="@Id"
                           Entity="@salesReturn"
                           Service="@SalesReturnService"
                           EntityName="銷貨退回"
                           EntityNamePlural="銷貨退回"
                           IndexRoute="/sales-returns"
                           EditRoute="/sales-returns/edit"
                           LoadingText="載入銷貨退回資料中..."
                           BreadcrumbItems="@breadcrumbItems"
                           DataLoader="@LoadSalesReturnData"
                           AdditionalDataLoader="@LoadAdditionalDataAsync"
                           EntityTitleSelector="@(sr => sr.SalesReturnNumber)"
                           EntitySubtitleSelector="@(sr => $"退回日期：{sr.ReturnDate:yyyy/MM/dd}")"
                           EntityDisplayNameSelector="@(sr => sr.SalesReturnNumber)"
                           OnDataLoaded="@OnSalesReturnDataLoaded"
                           UseTabLayout="false"
                           RequiredPermission="SalesReturn.Read"
                           @ref="detailComponent">
</GenericDetailPageComponent>

@code {
    [Parameter] public int Id { get; set; }
    
    // 組件參考
    private GenericDetailPageComponent<SalesReturn, ISalesReturnService> detailComponent = default!;
    
    // 資料模型
    private SalesReturn? salesReturn;
    
    // 詳細資料區段定義
    //private Dictionary<string, List<DetailFieldDefinition>> detailSections = new();
    
    // 麵包屑導航
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            //InitializeDetailSections();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitialized),
                GetType()
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new() { Text = "首頁", Href = "/" },
                new() { Text = "銷貨管理", Href = "/sales" },
                new() { Text = "銷貨退回", Href = "/sales-returns" },
                new() { Text = "詳細資料" }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType()
            );
        }
    }

    private async Task LoadAdditionalDataAsync()
    {
        try
        {
            // 載入額外的相關資料（如需要）
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadAdditionalDataAsync),
                GetType(),
                additionalData: "載入額外資料失敗"
            );
        }
    }

    private void OnSalesReturnDataLoaded()
    {
        StateHasChanged();
    }

    private async Task<SalesReturn?> LoadSalesReturnData()
    {
        try
        {
            salesReturn = await SalesReturnService.GetByIdAsync(Id);
            return salesReturn;
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadSalesReturnData),
                GetType(),
                additionalData: new { Id }
            );
            return null;
        }
    }

    private static string GetReturnStatusDisplayName(SalesReturnStatus status)
    {
        return status switch
        {
            SalesReturnStatus.Draft => "草稿",
            SalesReturnStatus.Submitted => "已提交",
            SalesReturnStatus.Processing => "處理中",
            SalesReturnStatus.Completed => "已完成",
            SalesReturnStatus.Cancelled => "已取消",
            _ => status.ToString()
        };
    }

    private static string GetReturnReasonDisplayName(SalesReturnReason reason)
    {
        return reason switch
        {
            SalesReturnReason.CustomerRequest => "客戶要求",
            SalesReturnReason.QualityIssue => "品質不良",
            SalesReturnReason.ShippingDamage => "運送損壞",
            SalesReturnReason.SpecificationMismatch => "規格不符",
            SalesReturnReason.QuantityError => "數量錯誤",
            SalesReturnReason.ExpiredProduct => "過期商品",
            SalesReturnReason.Other => "其他",
            _ => reason.ToString()
        };
    }

    private static string GetReturnStatusBadgeClass(SalesReturnStatus status)
    {
        return status switch
        {
            SalesReturnStatus.Draft => "bg-secondary",
            SalesReturnStatus.Submitted => "bg-primary",
            SalesReturnStatus.Processing => "bg-warning",
            SalesReturnStatus.Completed => "bg-success",
            SalesReturnStatus.Cancelled => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
