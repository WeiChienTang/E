@page "/quotations"
@using ERPCore2.Components.Shared.Report
@using ERPCore2.Components.Shared.Buttons
@using ERPCore2.Models
@inject IQuotationService QuotationService
@inject ICustomerService CustomerService
@inject IEmployeeService EmployeeService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="Quotation" 
                      TService="IQuotationService"
                      Service="@QuotationService"
                      EntityBasePath="/quotations"
                      PageTitle="報價管理"
                      PageSubtitle="管理所有報價單資料與明細資訊"
                      EntityName="報價單"
                      BreadcrumbItems="@breadcrumbItems"
                      FilterDefinitions="@filterDefinitions"
                      ColumnDefinitions="@columnDefinitions"
                      DataLoader="@LoadQuotationsAsync"
                      FilterApplier="@ApplyQuotationFilters"
                      GetEntityDisplayName="@(quotation => quotation.QuotationNumber)"
                      RequiredPermission="Quotation.Read"
                      ShowDefaultActions="false"
                      OnAddClick="@modalHandler.ShowAddModalAsync"
                      OnRowClick="@modalHandler.ShowEditModalAsync"
                      @ref="indexComponent">
    <CustomActionButtons>
            @* 新增按鈕 *@
        <GenericButtonComponent Variant="ButtonVariant.Primary" 
                               Text="新增報價單" 
                               OnClick="@modalHandler.ShowAddModalAsync" 
                               IsDisabled="@indexComponent.IsLoading" 
                               Title="新增報價單資料"
                               CssClass="index-action-btn" />
        @* 批次列印按鈕 *@
        <GenericButtonComponent Variant="ButtonVariant.Info" 
                               Text="多筆列印" 
                               OnClick="@HandleBatchPrintAsync" 
                               IsDisabled="@indexComponent.IsLoading" 
                               Title="批次列印報價單"
                               CssClass="index-action-btn" />
        @* 批次審核按鈕 *@
        <GenericButtonComponent Variant="ButtonVariant.Warning" 
                               Text="批次審核" 
                               OnClick="@HandleBatchApprovalAsync" 
                               IsDisabled="@indexComponent.IsLoading" 
                               Title="批次審核報價單"
                               CssClass="index-action-btn" />  

        @* 重新整理按鈕 *@
        <GenericButtonComponent Variant="ButtonVariant.Success" 
                               Text="重新整理" 
                               OnClick="@indexComponent.Refresh" 
                               IsDisabled="@indexComponent.IsLoading" 
                               Title="重新整理資料"
                               CssClass="index-action-btn" />
    </CustomActionButtons>
</GenericIndexPageComponent>

@* 報價單編輯 Modal *@
<QuotationEditModalComponent IsVisible="@showEditModal"
                           IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                           QuotationId="@editingQuotationId"
                           OnQuotationSaved="@modalHandler.OnEntitySavedAsync"
                           OnCancel="@modalHandler.OnModalCancelAsync" />

@* 批次審核 Modal - 使用新組件 *@
<BatchApprovalModalComponent TEntity="Quotation"
                            IsVisible="@showBatchApprovalModal"
                            IsVisibleChanged="@((bool visible) => showBatchApprovalModal = visible)"
                            Title="報價單批次審核"
                            EntityName="報價單"
                            LoadPendingItems="@LoadPendingQuotationsAsync"
                            OnApproveItem="@ApproveSingleQuotationAsync"
                            OnApproveAll="@ApproveAllQuotationsAsync"
                            OnViewClick="@HandleApprovalViewClick"
                            ColumnDefinitions="@GetApprovalColumnDefinitions()"
                            OnApprovalCompleted="@HandleApprovalCompleted" />

@* 批次列印篩選 Modal - 使用新架構 *@
<BatchPrintFilterModalComponent IsVisible="@showBatchPrintModal"
                               IsVisibleChanged="@((bool visible) => showBatchPrintModal = visible)"
                               Title="報價單批次列印條件"
                               OnConfirm="@HandleBatchPrintConfirmAsync"
                               OnCancel="@HandleBatchPrintCancelAsync">
    @* 區塊 1: 客戶多選篩選 *@
    <FilterSectionComponent Title="客戶篩選 (可多選)" 
                           Badge="@($"{selectedCustomers.Count} / {customers.Count}")">
        <MultiSelectFilterComponent TItem="Customer"
                                   Items="@customers"
                                   @bind-SelectedItems="@selectedCustomers"
                                   DisplayProperty="CompanyName"
                                   ValueProperty="Id"
                                   Placeholder="請輸入客戶名稱搜尋..."
                                   EmptyMessage="尚未選擇客戶，留空表示列印所有客戶的報價單"
                                   ShowCard="false" />
    </FilterSectionComponent>
    
    @* 區塊 2: 報價日期範圍 - 使用日期範圍元件 *@
    <FilterSectionComponent Title="報價日期" 
                           IconClass="bi bi-calendar-range">
        <DateRangeFilterComponent @bind-StartDate="@batchPrintStartDate"
                                 @bind-EndDate="@batchPrintEndDate"
                                 StartDateLabel="起始日期"
                                 EndDateLabel="結束日期"
                                 ShowQuickSelectors="true"
                                 AutoValidate="true"
                                 ShowValidationMessage="true" />
    </FilterSectionComponent>
</BatchPrintFilterModalComponent>

@code {
    // 組件參考
    private GenericIndexPageComponent<Quotation, IQuotationService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingQuotationId = null;
    
    // 批次審核 Modal 相關狀態
    private bool showBatchApprovalModal = false;
    
    // 批次列印 Modal 相關狀態
    private bool showBatchPrintModal = false;
    private List<Customer> selectedCustomers = new();
    private DateTime? batchPrintStartDate = null;
    private DateTime? batchPrintEndDate = null;
    
    // Modal 處理器
    private ModalHandler<Quotation, GenericIndexPageComponent<Quotation, IQuotationService>> modalHandler = default!;
    
    // 選項清單
    private List<Customer> customers = new();
    private List<Employee> employees = new();
    
    // 欄位配置
    private QuotationFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<Quotation, GenericIndexPageComponent<Quotation, IQuotationService>>(
                id => editingQuotationId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入相關資料
            await LoadCustomersAsync();
            await LoadEmployeesAsync();
            
            // 建立欄位配置（在載入相關資料後，並傳遞 NotificationService）
            fieldConfiguration = new QuotationFieldConfiguration(customers, employees, NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化報價單頁面失敗");
            await NotificationService.ShowErrorAsync("初始化報價單頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("報價管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入報價單資料
    private async Task<List<Quotation>> LoadQuotationsAsync()
    {
        try
        {
            return await QuotationService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadQuotationsAsync), GetType(), additionalData: "載入報價單資料失敗");
            await NotificationService.ShowErrorAsync("載入報價單資料失敗");
            // 設定安全的預設值
            return new List<Quotation>();
        }
    }

    // 載入客戶資料
    private async Task LoadCustomersAsync()
    {
        try
        {
            customers = await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCustomersAsync), GetType(), additionalData: "載入客戶資料失敗");
            await NotificationService.ShowErrorAsync("載入客戶資料失敗");
            // 設定安全的預設值
            customers = new List<Customer>();
        }
    }

    // 載入業務人員資料
    private async Task LoadEmployeesAsync()
    {
        try
        {
            employees = await EmployeeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadEmployeesAsync), GetType(), additionalData: "載入業務人員資料失敗");
            await NotificationService.ShowErrorAsync("載入業務人員資料失敗");
            // 設定安全的預設值
            employees = new List<Employee>();
        }
    }

    private IQueryable<Quotation> ApplyQuotationFilters(SearchFilterModel searchModel, IQueryable<Quotation> query)
    {
        // 確保 fieldConfiguration 已初始化（避免與 GenericIndexPageComponent 初始化的競爭條件）
        if (fieldConfiguration == null)
        {
            // 如果配置未初始化，回傳基本排序的查詢
            return query.OrderByDescending(q => q.QuotationDate).ThenBy(q => q.QuotationNumber);
        }

        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyQuotationFilters), GetType());
    }

    // ===== 批次審核相關方法 =====

    /// <summary>
    /// 處理批次審核按鈕點擊事件
    /// </summary>
    private async Task HandleBatchApprovalAsync()
    {
        try
        {
            // 直接顯示批次審核 Modal
            showBatchApprovalModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchApprovalAsync), GetType(), additionalData: "開啟批次審核視窗失敗");
            await NotificationService.ShowErrorAsync("開啟批次審核視窗失敗");
        }
    }

    /// <summary>
    /// 載入待審核的報價單
    /// </summary>
    private async Task<List<Quotation>> LoadPendingQuotationsAsync()
    {
        try
        {
            var allQuotations = await QuotationService.GetAllAsync();
            return allQuotations.Where(q => !q.IsApproved).ToList();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPendingQuotationsAsync), GetType(), additionalData: "載入待審核報價單失敗");
            await NotificationService.ShowErrorAsync("載入待審核報價單失敗");
            return new List<Quotation>();
        }
    }

    /// <summary>
    /// 審核單筆報價單
    /// </summary>
    private async Task<bool> ApproveSingleQuotationAsync(Quotation quotation)
    {
        try
        {
            quotation.IsApproved = true;
            quotation.ApprovedAt = DateTime.Now;
            // TODO: 設定 ApprovedBy 為當前使用者
            
            await QuotationService.UpdateAsync(quotation);
            return true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApproveSingleQuotationAsync), GetType(), 
                additionalData: new { QuotationId = quotation.Id, QuotationNumber = quotation.QuotationNumber });
            return false;
        }
    }

    /// <summary>
    /// 批次審核所有報價單
    /// </summary>
    private async Task<(int successCount, int failCount)> ApproveAllQuotationsAsync(List<Quotation> quotations)
    {
        int successCount = 0;
        int failCount = 0;

        foreach (var quotation in quotations)
        {
            try
            {
                if (!quotation.IsApproved)
                {
                    quotation.IsApproved = true;
                    quotation.ApprovedAt = DateTime.Now;
                    // TODO: 設定 ApprovedBy 為當前使用者
                    
                    await QuotationService.UpdateAsync(quotation);
                    successCount++;
                }
            }
            catch (Exception ex)
            {
                failCount++;
                await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(ApproveAllQuotationsAsync), GetType(), 
                    additionalData: new { QuotationId = quotation.Id, QuotationNumber = quotation.QuotationNumber });
            }
        }

        return (successCount, failCount);
    }

    /// <summary>
    /// 處理審核 Modal 中的查看按鈕點擊
    /// </summary>
    private async Task HandleApprovalViewClick(Quotation quotation)
    {
        try
        {
            // 不關閉批次審核 Modal，直接開啟編輯 Modal
            await modalHandler.ShowEditModalAsync(quotation);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleApprovalViewClick), GetType(), 
                additionalData: new { QuotationId = quotation.Id });
            await NotificationService.ShowErrorAsync("開啟查看視窗失敗");
        }
    }

    /// <summary>
    /// 審核完成後的處理
    /// </summary>
    private async Task HandleApprovalCompleted()
    {
        try
        {
            // 刷新主列表
            await indexComponent.Refresh();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleApprovalCompleted), GetType(), 
                additionalData: "刷新列表失敗");
        }
    }

    /// <summary>
    /// 取得批次審核 Modal 的表格欄位定義
    /// </summary>
    private List<InteractiveColumnDefinition> GetApprovalColumnDefinitions()
    {
        return new List<InteractiveColumnDefinition>
        {
            new()
            {
                Title = "",
                PropertyName = "IsApproved",
                ColumnType = InteractiveColumnType.Checkbox,
                Width = "60px",
                CellCssClass = "text-center"
            },
            new()
            {
                Title = "報價單號",
                PropertyName = nameof(Quotation.QuotationNumber),
                ColumnType = InteractiveColumnType.Display,
                Width = "150px"
            },
            new()
            {
                Title = "客戶",
                PropertyName = "Customer.CompanyName",
                ColumnType = InteractiveColumnType.Display,
                Width = "200px"
            },
            new()
            {
                Title = "報價日期",
                PropertyName = nameof(Quotation.QuotationDate),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CustomTemplate = item =>
                {
                    var quotation = item as Quotation;
                    var dateStr = quotation?.QuotationDate.ToString("yyyy/MM/dd") ?? "";
                    return @<span style="font-size: 0.875rem;">@dateStr</span>;
                }
            },
            new()
            {
                Title = "有效期限",
                PropertyName = nameof(Quotation.ValidUntilDate),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CustomTemplate = item =>
                {
                    var quotation = item as Quotation;
                    var dateStr = quotation?.ValidUntilDate?.ToString("yyyy/MM/dd") ?? "-";
                    return @<span style="font-size: 0.875rem;">@dateStr</span>;
                }
            },
            new()
            {
                Title = "總金額",
                PropertyName = nameof(Quotation.TotalAmount),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var quotation = item as Quotation;
                    var amountStr = quotation?.TotalAmount.ToString("N0") ?? "";
                    return @<span style="font-size: 0.875rem;" class="fw-bold">@amountStr</span>;
                }
            },
            new()
            {
                Title = "建立日期",
                PropertyName = nameof(Quotation.CreatedAt),
                ColumnType = InteractiveColumnType.Custom,
                Width = "150px",
                CustomTemplate = item =>
                {
                    var quotation = item as Quotation;
                    var dateStr = quotation?.CreatedAt.ToString("yyyy/MM/dd HH:mm") ?? "";
                    return @<span style="font-size: 0.875rem;">@dateStr</span>;
                }
            }
        };
    }

    // ===== 批次列印相關方法 =====

    /// <summary>
    /// 處理批次列印按鈕點擊事件
    /// </summary>
    private async Task HandleBatchPrintAsync()
    {
        try
        {
            // 初始化批次列印條件
            selectedCustomers = new List<Customer>();
            batchPrintStartDate = null;
            batchPrintEndDate = null;
            
            // 顯示批次列印篩選 Modal
            showBatchPrintModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintAsync), GetType(), additionalData: "開啟批次列印篩選失敗");
            await NotificationService.ShowErrorAsync("開啟批次列印篩選失敗");
        }
    }

    /// <summary>
    /// 處理批次列印確認
    /// </summary>
    private async Task HandleBatchPrintConfirmAsync()
    {
        try
        {
            // 建立篩選條件
            var criteria = new BatchPrintCriteria
            {
                StartDate = batchPrintStartDate,
                EndDate = batchPrintEndDate,
                RelatedEntityIds = selectedCustomers.Select(c => c.Id).ToList(),
                SortDirection = SortDirection.Descending,
                MaxResults = 1000 // 限制最大筆數
            };

            // 取得符合條件的報價單
            var quotations = await QuotationService.GetByBatchCriteriaAsync(criteria);

            if (!quotations.Any())
            {
                await NotificationService.ShowWarningAsync("沒有符合條件的報價單資料");
                showBatchPrintModal = false;
                return;
            }

            // TODO: 實作報價單批次列印邏輯
            // 這裡可以調用報表服務來產生 PDF 或直接列印
            await NotificationService.ShowInfoAsync($"找到 {quotations.Count} 筆報價單，準備列印...");
            
            // 關閉 Modal
            showBatchPrintModal = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintConfirmAsync), GetType(), 
                additionalData: new {
                    SelectedCustomersCount = selectedCustomers?.Count ?? 0,
                    StartDate = batchPrintStartDate,
                    EndDate = batchPrintEndDate
                });
            await NotificationService.ShowErrorAsync("批次列印處理失敗");
        }
    }

    /// <summary>
    /// 處理批次列印取消
    /// </summary>
    private Task HandleBatchPrintCancelAsync()
    {
        showBatchPrintModal = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
