@page "/sales-orders"
@inject ISalesOrderService SalesOrderService
@inject ICustomerService CustomerService
@inject IEmployeeService EmployeeService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="SalesOrder" 
                          TService="ISalesOrderService"
                          Service="@SalesOrderService"
                          EntityBasePath="/sales-orders"
                          PageTitle="銷貨訂單管理"
                          PageSubtitle="管理所有銷貨訂單與客戶銷售資料"
                          EntityName="銷貨訂單"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          DataLoader="@LoadSalesOrdersAsync"
                          InitializeBasicData="@LoadBasicDataAsync"
                          FilterApplier="@ApplySalesOrderFilters"
                          GetEntityDisplayName="@(order => order.SalesOrderNumber)"
                          RequiredPermission="SalesOrder.Read"
                          @ref="indexPageRef" />

@code {
    // 組件參考
    private GenericIndexPageComponent<SalesOrder, ISalesOrderService> indexPageRef = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 選項清單
    private List<SelectOption> customerOptions = new();
    private List<SelectOption> employeeOptions = new();
    private List<SelectOption> statusOptions = new();

    protected override void OnInitialized()
    {
        try
        {
            InitializeBreadcrumbs();
            InitializeBasicFilters();
            InitializeColumns();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(OnInitialized),
                GetType(),
                additionalData: "初始化銷貨訂單頁面失敗"
            );
        }
    }

    private void InitializeBreadcrumbs()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("銷貨管理", "/"),
                new("銷貨訂單", "/sales-orders")
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBreadcrumbs),
                GetType(),
                additionalData: "初始化麵包屑失敗"
            );
        }
    }

    private void InitializeBasicFilters()
    {
        try
        {
            // 建立基本篩選定義（不包含下拉選單選項，這些將在 LoadBasicDataAsync 中載入）
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SearchTerm", "搜尋", "請輸入銷貨單號、客戶名稱...")
                .AddSelect("CustomerId", "客戶", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("EmployeeId", "銷售人員", new List<SelectOption>()) // 空的選項，稍後載入
                .AddSelect("OrderStatus", "訂單狀態", new List<SelectOption>()) // 空的選項，稍後載入
                .AddDateRange("OrderDateRange", "訂單日期")
                .Build();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeBasicFilters),
                GetType(),
                additionalData: "初始化基本篩選器失敗"
            );
            
            // 設定安全的預設值
            filterDefinitions = new List<SearchFilterDefinition>();
        }
    }

    private async Task LoadBasicDataAsync()
    {
        try
        {
            // 載入客戶選項
            var customers = await CustomerService.GetAllAsync();
            customerOptions = customers
                .Where(c => !c.IsDeleted)
                .OrderBy(c => c.CompanyName)
                .Select(c => new SelectOption 
                { 
                    Text = $"{c.CompanyName} ({c.Code})", 
                    Value = c.Id.ToString() 
                })
                .ToList();

            // 載入員工選項
            var employees = await EmployeeService.GetAllAsync();
            employeeOptions = employees
                .Where(e => !e.IsDeleted && e.Status == EntityStatus.Active)
                .OrderBy(e => e.FirstName)
                .ThenBy(e => e.LastName)
                .Select(e => new SelectOption 
                { 
                    Text = $"{e.FirstName} {e.LastName} ({e.Code})", 
                    Value = e.Id.ToString() 
                })
                .ToList();

            // 準備訂單狀態選項
            statusOptions = Enum.GetValues<SalesOrderStatus>()
                .Select(status => new SelectOption
                {
                    Text = status switch
                    {
                        SalesOrderStatus.Draft => "草稿",
                        SalesOrderStatus.Submitted => "已送出",
                        SalesOrderStatus.Confirmed => "已確認",
                        SalesOrderStatus.PartialDelivered => "部分出貨",
                        SalesOrderStatus.Completed => "已完成",
                        SalesOrderStatus.Cancelled => "已取消",
                        SalesOrderStatus.Closed => "已關閉",
                        _ => status.ToString()
                    },
                    Value = status.ToString()
                })
                .ToList();

            // 重新建立篩選定義，包含載入的選項
            filterDefinitions = new SearchFilterBuilder<SearchFilterModel>()
                .AddText("SearchTerm", "搜尋", "請輸入銷貨單號、客戶名稱...")
                .AddSelect("CustomerId", "客戶", customerOptions)
                .AddSelect("EmployeeId", "銷售人員", employeeOptions)
                .AddSelect("OrderStatus", "訂單狀態", statusOptions)
                .AddDateRange("OrderDateRange", "訂單日期")
                .Build();

            // 通知組件狀態已改變
            StateHasChanged();
            
            // 如果組件已經初始化，刷新組件以更新篩選器
            if (indexPageRef != null)
            {
                await indexPageRef.Refresh();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(LoadBasicDataAsync),
                GetType(),
                additionalData: "載入基礎資料失敗"
            );
        }
    }

    private async Task<List<SalesOrder>> LoadSalesOrdersAsync()
    {
        try
        {
            return await SalesOrderService.GetAllAsync();
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(LoadSalesOrdersAsync), 
                GetType(),
                additionalData: new { PageName = "SalesOrderIndex", Action = "LoadSalesOrdersAsync" });
            
            StateHasChanged();
            return new List<SalesOrder>();
        }
    }

    private IQueryable<SalesOrder> ApplySalesOrderFilters(SearchFilterModel searchModel, IQueryable<SalesOrder> query)
    {
        try
        {
            // 文字搜尋篩選
            var searchTerm = searchModel.GetFilterValue("SearchTerm")?.ToString();
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var lowerSearchTerm = searchTerm.ToLower();
                query = query.Where(so => 
                    so.SalesOrderNumber.ToLower().Contains(lowerSearchTerm) ||
                    so.Customer.CompanyName.ToLower().Contains(lowerSearchTerm) ||
                    (so.SalesPersonnel != null && so.SalesPersonnel.ToLower().Contains(lowerSearchTerm)) ||
                    (so.OrderRemarks != null && so.OrderRemarks.ToLower().Contains(lowerSearchTerm))
                );
            }

            // 客戶篩選
            var customerIdFilter = searchModel.GetFilterValue("CustomerId")?.ToString();
            if (!string.IsNullOrWhiteSpace(customerIdFilter) && int.TryParse(customerIdFilter, out var customerId))
            {
                query = query.Where(so => so.CustomerId == customerId);
            }

            // 銷售人員篩選
            var employeeIdFilter = searchModel.GetFilterValue("EmployeeId")?.ToString();
            if (!string.IsNullOrWhiteSpace(employeeIdFilter) && int.TryParse(employeeIdFilter, out var employeeId))
            {
                query = query.Where(so => so.EmployeeId == employeeId);
            }

            // 訂單狀態篩選
            var statusFilter = searchModel.GetFilterValue("OrderStatus")?.ToString();
            if (!string.IsNullOrWhiteSpace(statusFilter) && Enum.TryParse<SalesOrderStatus>(statusFilter, out var status))
            {
                query = query.Where(so => so.OrderStatus == status);
            }

            // 日期範圍篩選
            var dateRange = searchModel.GetFilterValue("OrderDateRange") as DateRange;
            if (dateRange != null)
            {
                if (dateRange.StartDate.HasValue)
                {
                    query = query.Where(so => so.OrderDate >= dateRange.StartDate.Value);
                }
                if (dateRange.EndDate.HasValue)
                {
                    query = query.Where(so => so.OrderDate <= dateRange.EndDate.Value);
                }
            }

            return query.OrderByDescending(so => so.OrderDate)
                       .ThenBy(so => so.SalesOrderNumber);
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex, 
                nameof(ApplySalesOrderFilters), 
                GetType(),
                additionalData: new { 
                    PageName = "SalesOrderIndex", 
                    Action = "ApplySalesOrderFilters", 
                    SearchModel = searchModel 
                });
            return query; // 回傳原始查詢作為後備
        }
    }

    private void InitializeColumns()
    {
        try
        {
            columnDefinitions = new List<TableColumnDefinition>
            {
                new TableColumnDefinition
                {
                    Title = "銷貨單號",
                    PropertyName = "SalesOrderNumber",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 120px;",
                    IsSortable = true
                },
                new TableColumnDefinition
                {
                    Title = "訂單日期",
                    PropertyName = "OrderDate",
                    DataType = ColumnDataType.Date,
                    HeaderStyle = "width: 100px;",
                    IsSortable = true
                },
                new TableColumnDefinition
                {
                    Title = "客戶",
                    PropertyName = "Customer.CompanyName",
                    DataType = ColumnDataType.Text,
                    HeaderStyle = "width: 200px;"
                },
                new TableColumnDefinition
                {
                    Title = "銷售人員",
                    PropertyName = "Employee.FirstName",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 130px;",
                    NullDisplayText = "-",
                    CustomTemplate = entity =>
                    {
                        var order = entity as SalesOrder;
                        if (order?.Employee != null)
                        {
                            return @<span>@($"{order.Employee.FirstName} {order.Employee.LastName}")</span>;
                        }
                        return @<span>@(order?.SalesPersonnel ?? "-")</span>;
                    }
                },
                new TableColumnDefinition
                {
                    Title = "訂單狀態",
                    PropertyName = "OrderStatus",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "width: 100px;",
                    CustomTemplate = entity =>
                    {
                        var order = entity as SalesOrder;
                        var statusClass = order?.OrderStatus switch
                        {
                            SalesOrderStatus.Draft => "badge bg-secondary",
                            SalesOrderStatus.Submitted => "badge bg-info",
                            SalesOrderStatus.Confirmed => "badge bg-primary",
                            SalesOrderStatus.PartialDelivered => "badge bg-warning",
                            SalesOrderStatus.Completed => "badge bg-success",
                            SalesOrderStatus.Cancelled => "badge bg-danger",
                            SalesOrderStatus.Closed => "badge bg-dark",
                            _ => "badge bg-secondary"
                        };
                        var statusText = order?.OrderStatus switch
                        {
                            SalesOrderStatus.Draft => "草稿",
                            SalesOrderStatus.Submitted => "已送出",
                            SalesOrderStatus.Confirmed => "已確認",
                            SalesOrderStatus.PartialDelivered => "部分出貨",
                            SalesOrderStatus.Completed => "已完成",
                            SalesOrderStatus.Cancelled => "已取消",
                            SalesOrderStatus.Closed => "已關閉",
                            _ => order?.OrderStatus.ToString() ?? ""
                        };
                        return @<span class="@statusClass">@statusText</span>;
                    }
                },
                new TableColumnDefinition
                {
                    Title = "交期",
                    PropertyName = "DeliveryDate",
                    DataType = ColumnDataType.Date,
                    HeaderStyle = "width: 100px;",
                    NullDisplayText = "-"
                },
                new TableColumnDefinition
                {
                    Title = "訂單金額",
                    PropertyName = "TotalAmount",
                    DataType = ColumnDataType.Currency,
                    HeaderStyle = "width: 150px;",
                    IsSortable = true
                },
                new TableColumnDefinition
                {
                    Title = "備註",
                    PropertyName = "OrderRemarks",
                    DataType = ColumnDataType.Html,
                    HeaderStyle = "min-width: 100px;",
                    NullDisplayText = "-",
                    CustomTemplate = entity =>
                    {
                        var order = entity as SalesOrder;
                        var remarks = order?.OrderRemarks;
                        if (string.IsNullOrEmpty(remarks)) return @<span>-</span>;
                        
                        // 截斷過長的備註
                        if (remarks.Length > 50)
                        {
                            return @<span title="@remarks">@(remarks[..50])...</span>;
                        }
                        return @<span>@remarks</span>;
                    }
                }
            };
        }
        catch (Exception ex)
        {
            _ = ErrorHandlingHelper.HandlePageErrorAsync(
                ex,
                nameof(InitializeColumns),
                GetType(),
                additionalData: "初始化表格欄位失敗"
            );
            
            // 設定安全的預設值
            columnDefinitions = new List<TableColumnDefinition>();
        }
    }
}
