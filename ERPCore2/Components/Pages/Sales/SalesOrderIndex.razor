@page "/salesOrders"
@using ERPCore2.Components.Shared.Report
@using ERPCore2.Models
@inject ISalesOrderService SalesOrderService
@inject ICustomerService CustomerService
@inject IEmployeeService EmployeeService
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="SalesOrder" 
                      TService="ISalesOrderService"
                      Service="@SalesOrderService"
                      EntityBasePath="/sales-orders"
                      PageTitle="銷貨管理"
                      PageSubtitle="管理所有銷貨訂單資料與明細資訊"
                      EntityName="銷貨訂單"
                      BreadcrumbItems="@breadcrumbItems"
                      FilterDefinitions="@filterDefinitions"
                      ColumnDefinitions="@columnDefinitions"
                      DataLoader="@LoadSalesOrdersAsync"
                      FilterApplier="@ApplySalesOrderFilters"
                      GetEntityDisplayName="@(salesOrder => salesOrder.SalesOrderNumber)"
                      RequiredPermission="SalesOrder.Read"
                      ShowBatchPrintButton="true"
                      OnBatchPrintClick="@HandleBatchPrintAsync"
                      OnAddClick="@modalHandler.ShowAddModalAsync"
                      OnRowClick="@modalHandler.ShowEditModalAsync"
                      @ref="indexComponent" />

@* 銷貨訂單編輯 Modal *@
<SalesOrderEditModalComponent IsVisible="@showEditModal"
                           IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                           SalesOrderId="@editingSalesOrderId"
                           OnSalesOrderSaved="@modalHandler.OnEntitySavedAsync"
                           OnCancel="@modalHandler.OnModalCancelAsync" />

@* 批次列印篩選 Modal - 使用新架構 *@
<BatchPrintFilterModalComponent IsVisible="@showBatchPrintModal"
                               IsVisibleChanged="@((bool visible) => showBatchPrintModal = visible)"
                               Title="銷貨訂單批次列印條件"
                               OnConfirm="@HandleBatchPrintConfirmAsync"
                               OnCancel="@HandleBatchPrintCancelAsync">
    @* 區塊 1: 客戶多選篩選 *@
    <FilterSectionComponent Title="客戶篩選 (可多選)" 
                           Badge="@($"{selectedCustomers.Count} / {customers.Count}")">
        <MultiSelectFilterComponent TItem="Customer"
                                   Items="@customers"
                                   @bind-SelectedItems="@selectedCustomers"
                                   DisplayProperty="CompanyName"
                                   ValueProperty="Id"
                                   Placeholder="請輸入客戶名稱搜尋..."
                                   EmptyMessage="尚未選擇客戶，留空表示列印所有客戶的銷貨訂單"
                                   ShowCard="false" />
    </FilterSectionComponent>
    
    @* 區塊 2: 訂單日期範圍 - 使用日期範圍元件 *@
    <FilterSectionComponent Title="訂單日期" 
                           IconClass="bi bi-calendar-range">
        <DateRangeFilterComponent @bind-StartDate="@batchPrintStartDate"
                                 @bind-EndDate="@batchPrintEndDate"
                                 StartDateLabel="起始日期"
                                 EndDateLabel="結束日期"
                                 ShowQuickSelectors="true"
                                 AutoValidate="true"
                                 ShowValidationMessage="true" />
    </FilterSectionComponent>
</BatchPrintFilterModalComponent>

@code {
    // 組件參考
    private GenericIndexPageComponent<SalesOrder, ISalesOrderService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingSalesOrderId = null;
    
    // 批次列印 Modal 相關狀態
    private bool showBatchPrintModal = false;
    private List<Customer> selectedCustomers = new();
    private DateTime? batchPrintStartDate = null;
    private DateTime? batchPrintEndDate = null;
    
    // Modal 處理器
    private ModalHandler<SalesOrder, GenericIndexPageComponent<SalesOrder, ISalesOrderService>> modalHandler = default!;
    
    // 選項清單
    private List<Customer> customers = new();
    private List<Employee> employees = new();
    
    // 欄位配置
    private SalesOrderFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<SalesOrder, GenericIndexPageComponent<SalesOrder, ISalesOrderService>>(
                id => editingSalesOrderId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入相關資料
            await LoadCustomersAsync();
            await LoadEmployeesAsync();
            
            // 建立欄位配置（在載入相關資料後，並傳遞 NotificationService）
            fieldConfiguration = new SalesOrderFieldConfiguration(customers, employees, NotificationService);
            
            // 使用欄位配置建立篩選器和表格欄位
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化銷貨訂單頁面失敗");
            await NotificationService.ShowErrorAsync("初始化銷貨訂單頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("銷售管理", "#"),
                new("銷貨管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");
            await NotificationService.ShowErrorAsync("初始化麵包屑導航失敗");
            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    // 載入銷貨訂單資料
    private async Task<List<SalesOrder>> LoadSalesOrdersAsync()
    {
        try
        {
            return await SalesOrderService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadSalesOrdersAsync), GetType(), additionalData: "載入銷貨訂單資料失敗");
            await NotificationService.ShowErrorAsync("載入銷貨訂單資料失敗");
            // 設定安全的預設值
            return new List<SalesOrder>();
        }
    }

    // 載入客戶資料
    private async Task LoadCustomersAsync()
    {
        try
        {
            customers = await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCustomersAsync), GetType(), additionalData: "載入客戶資料失敗");
            await NotificationService.ShowErrorAsync("載入客戶資料失敗");
            // 設定安全的預設值
            customers = new List<Customer>();
        }
    }

    // 載入員工資料
    private async Task LoadEmployeesAsync()
    {
        try
        {
            employees = await EmployeeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadEmployeesAsync), GetType(), additionalData: "載入員工資料失敗");
            await NotificationService.ShowErrorAsync("載入員工資料失敗");
            // 設定安全的預設值
            employees = new List<Employee>();
        }
    }

    private IQueryable<SalesOrder> ApplySalesOrderFilters(SearchFilterModel searchModel, IQueryable<SalesOrder> query)
    {
        // 確保 fieldConfiguration 已初始化（避免與 GenericIndexPageComponent 初始化的競爭條件）
        if (fieldConfiguration == null)
        {
            return query.OrderByDescending(so => so.OrderDate);
        }

        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplySalesOrderFilters), GetType());
    }

    // 多筆列印處理方法
    private async Task HandleBatchPrintAsync()
    {
        try
        {
            // 顯示批次列印篩選 Modal
            showBatchPrintModal = true;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintAsync), GetType(), additionalData: "開啟多筆列印視窗失敗");
            await NotificationService.ShowErrorAsync("開啟多筆列印視窗失敗");
        }
    }

    // 處理批次列印確認
    private async Task HandleBatchPrintConfirmAsync()
    {
        try
        {
            // 組裝批次列印條件
            var criteria = new BatchPrintCriteria
            {
                StartDate = batchPrintStartDate,
                EndDate = batchPrintEndDate,
                RelatedEntityIds = selectedCustomers.Select(c => c.Id).ToList(),
                ReportType = "SalesOrder",
                MaxResults = 100,
                IncludeCancelled = false
            };

            // 驗證篩選條件
            var validation = criteria.Validate();
            if (!validation.IsValid)
            {
                await NotificationService.ShowErrorAsync($"篩選條件錯誤：{validation.GetAllErrors()}");
                return;
            }

            // 序列化條件為 JSON
            var jsonPayload = System.Text.Json.JsonSerializer.Serialize(criteria);

            // 開啟新視窗顯示批次報表（使用新路由）
            var apiUrl = "/api/sales-report/order/batch?autoprint=true";
            await JSRuntime.InvokeVoidAsync("openBatchPrintWindow", apiUrl, jsonPayload);

            // 顯示成功訊息
            await NotificationService.ShowSuccessAsync($"已開啟批次列印視窗 ({criteria.GetSummary()})");
            
            // 關閉 Modal
            showBatchPrintModal = false;
            
            // 清空選擇
            selectedCustomers.Clear();
            batchPrintStartDate = null;
            batchPrintEndDate = null;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintConfirmAsync), GetType(), additionalData: "執行批次列印失敗");
            await NotificationService.ShowErrorAsync("執行批次列印失敗");
        }
    }

    // 處理批次列印取消
    private async Task HandleBatchPrintCancelAsync()
    {
        try
        {
            showBatchPrintModal = false;
            
            // 清空所有篩選條件
            selectedCustomers.Clear();
            batchPrintStartDate = null;
            batchPrintEndDate = null;
            
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleBatchPrintCancelAsync), GetType(), additionalData: "取消批次列印失敗");
        }
    }
}
