@* 沖款預收/預付款管理組件 - 使用 InteractiveTableComponent 來管理預收/預付款明細 *@
@using ERPCore2.Data.Enums
@using ERPCore2.Models
@* TODO: 重構中 - PrepaymentDetailService 已移除，需改用 FinancialTransaction *@
@* @inject IPrepaymentDetailService SetoffPrepaymentDetailService *@
@inject INotificationService NotificationService

<div class="setoff-prepayment-manager @GetModeClass()">
    @if (IsLoading)
    {
        <div class="d-flex justify-content-center align-items-center my-3">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">載入中...</span>
            </div>
        </div>
    }

    <InteractiveTableComponent TItem="PrepaymentDto"
                                Items="@GetDisplayPrepayments()"
                                ColumnDefinitions="@GetColumnDefinitions()"
                                ShowHeader="true"
                                ShowRowNumbers="false"
                                ShowActions="true"
                                ActionsColumnWidth = "60px"
                                ShowBuiltInActions="true"
                                ShowBuiltInDeleteButton="true"
                                OnItemDelete="RemoveItemFromSelection"
                                IsStriped="true"
                                IsHoverable="true"
                                IsBordered="true"
                                IsReadOnly="@IsReadOnly"
                                EmptyMessage="@GetEmptyMessage()"
                                CssClass="setoff-prepayment-table"
                                ValidationErrors="@ValidationErrors"
                                OnValidationFailed="@HandleValidationFailed" />
</div>

@code {
    #region 參數定義
    
    /// <summary>
    /// 沖款模式：應收或應付
    /// </summary>
    [Parameter] public SetoffMode Mode { get; set; } = SetoffMode.Receivable;
    
    /// <summary>
    /// 客戶 ID（應收模式使用）
    /// </summary>
    [Parameter] public int? CustomerId { get; set; }
    
    /// <summary>
    /// 供應商 ID（應付模式使用）
    /// </summary>
    [Parameter] public int? SupplierId { get; set; }
    
    /// <summary>
    /// 沖款單 ID
    /// </summary>
    [Parameter] public int? SetoffId { get; set; }
    
    /// <summary>
    /// 沖款單號（從主檔傳入）
    /// </summary>
    [Parameter] public string? SetoffNumber { get; set; }
    
    /// <summary>
    /// 是否為唯讀模式
    /// </summary>
    [Parameter] public bool IsReadOnly { get; set; } = false;
    
    /// <summary>
    /// 是否為編輯模式
    /// </summary>
    [Parameter] public bool IsEditMode { get; set; } = false;
    
    /// <summary>
    /// 預收/預付款變更事件
    /// </summary>
    [Parameter] public EventCallback<List<PrepaymentDto>> OnPrepaymentsChanged { get; set; }
    
    /// <summary>
    /// 總使用金額變更事件
    /// </summary>
    [Parameter] public EventCallback<decimal> OnTotalUseAmountChanged { get; set; }
    
    #endregion

    #region 私有狀態
    
    private bool IsLoading { get; set; } = false;
    private List<PrepaymentDto> Prepayments { get; set; } = new();
    private List<PrepaymentDto> AvailableSetoffs { get; set; } = new(); // 有剩餘預收/預付的沖款單列表
    private Dictionary<string, string> ValidationErrors { get; set; } = new();
    private decimal TotalUseAmount => GetValidPrepayments().Sum(p => p.ThisTimeAddAmount);
    
    // 用於追蹤參數變更，避免不必要的重新渲染
    private int? _previousCustomerId = null;
    private int? _previousSupplierId = null;
    private SetoffMode _previousMode = SetoffMode.Receivable;
    private bool _previousIsEditMode = false;
    private int? _previousSetoffId = null;
    private string? _previousSetoffNumber = null;
    private bool _previousIsReadOnly = false;
    private bool _previousIsLoading = false;
    private int _previousPrepaymentsCount = 0;
    private bool _isInitialized = false; // 追蹤是否已初始化
    private bool _shouldRenderOverride = false; // 強制渲染標記（用於數據變更時）
    
    #endregion

    #region 生命週期方法
    
    /// <summary>
    /// 控制組件是否需要重新渲染
    /// </summary>
    protected override bool ShouldRender()
    {
        // 如果有強制渲染標記，立即渲染並清除標記
        if (_shouldRenderOverride)
        {
            _shouldRenderOverride = false;
            return true;
        }
        
        // 檢查關鍵參數或狀態是否有變更
        bool hasChanges = _previousCustomerId != CustomerId ||
                          _previousSupplierId != SupplierId ||
                          _previousMode != Mode ||
                          _previousIsEditMode != IsEditMode ||
                          _previousSetoffId != SetoffId ||
                          _previousSetoffNumber != SetoffNumber ||
                          _previousIsReadOnly != IsReadOnly ||
                          _previousIsLoading != IsLoading ||
                          _previousPrepaymentsCount != Prepayments.Count;
        
        // 更新狀態追蹤
        _previousIsLoading = IsLoading;
        _previousPrepaymentsCount = Prepayments.Count;
        
        return hasChanges;
    }
    
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            // 檢查關鍵參數是否真的有變更
            bool keyParametersChanged = _previousCustomerId != CustomerId ||
                                       _previousSupplierId != SupplierId ||
                                       _previousMode != Mode ||
                                       _previousIsEditMode != IsEditMode ||
                                       _previousSetoffId != SetoffId ||
                                       _previousSetoffNumber != SetoffNumber ||
                                       _previousIsReadOnly != IsReadOnly;
            
            if (keyParametersChanged)
            {
                // 更新追蹤的參數值
                _previousCustomerId = CustomerId;
                _previousSupplierId = SupplierId;
                _previousMode = Mode;
                _previousIsEditMode = IsEditMode;
                _previousSetoffId = SetoffId;
                _previousSetoffNumber = SetoffNumber;
                _previousIsReadOnly = IsReadOnly;
                
                // 重新載入資料
                await LoadPrepaymentsAsync();
                _isInitialized = true;
            }
            else if (!_isInitialized)
            {
                // 首次初始化時，確保有一個空行
                EnsureOneEmptyRow();
                _isInitialized = true;
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnParametersSetAsync), GetType());
        }
    }
    
    #endregion

    #region 資料載入方法
    
    /// <summary>
    /// 載入預收/預付款資料
    /// </summary>
    private async Task LoadPrepaymentsAsync()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();
            
            Prepayments.Clear();
            AvailableSetoffs.Clear();
            
            if (Mode == SetoffMode.Receivable && CustomerId.HasValue)
            {
                // 應收模式：載入客戶的預收款
                if (IsEditMode && SetoffId.HasValue)
                {
                    // 編輯模式：載入所有相關預收款
                    Prepayments = await SetoffPrepaymentDetailService.GetAllPrepaymentsForEditAsync(CustomerId.Value, SetoffId.Value);
                }
                else
                {
                    // 新增模式：只載入可用的預收款
                    Prepayments = await SetoffPrepaymentDetailService.GetAvailablePrepaymentsByCustomerAsync(CustomerId.Value);
                }
                
                // 載入有剩餘預收款的沖款單
                AvailableSetoffs = await SetoffPrepaymentDetailService.GetReceivableSetoffsWithAvailablePrepaymentAsync(CustomerId.Value, SetoffId);
            }
            else if (Mode == SetoffMode.Payable && SupplierId.HasValue)
            {
                // 應付模式：載入供應商的預付款
                if (IsEditMode && SetoffId.HasValue)
                {
                    // 編輯模式：載入所有相關預付款
                    Prepayments = await SetoffPrepaymentDetailService.GetAllPrepaidsForEditAsync(SupplierId.Value, SetoffId.Value);
                }
                else
                {
                    // 新增模式：只載入可用的預付款
                    Prepayments = await SetoffPrepaymentDetailService.GetAvailablePrepaidsBySupplierAsync(SupplierId.Value);
                }
                
                // 載入有剩餘預付款的沖款單
                AvailableSetoffs = await SetoffPrepaymentDetailService.GetPayableSetoffsWithAvailablePrepaidAsync(SupplierId.Value, SetoffId);
            }
            
            // 確保有一個空行可以新增
            EnsureOneEmptyRow();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPrepaymentsAsync), GetType());
            await NotificationService.ShowErrorAsync("載入預收/預付款資料時發生錯誤");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    
    #endregion

    #region 欄位定義
    
    /// <summary>
    /// 取得欄位定義
    /// </summary>
    private List<InteractiveColumnDefinition> GetColumnDefinitions()
    {
        var columns = new List<InteractiveColumnDefinition>
        {
            // 1. 類別 (下拉選單)
            new InteractiveColumnDefinition
            {
                Title = "類別",
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CustomTemplate = item =>
                {
                    var prepayment = (PrepaymentDto)item;
                    bool isEmptyRow = IsEmptyRow(prepayment);
                    var options = GetPrepaymentTypeOptions();
                    
                    return @<select class="form-select form-select-sm"
                                   value="@((int)prepayment.PrepaymentType)"
                                   @onchange="@(async (e) => await HandlePrepaymentTypeChanged(prepayment, e.Value?.ToString()))"
                                   disabled="@(!isEmptyRow || IsReadOnly)">                        
                        @foreach (var opt in options)
                        {
                            <option value="@opt.Value">@opt.Text</option>
                        }
                    </select>;
                }
            },
            
            // 2. 來源單號 (下拉選單)
            new InteractiveColumnDefinition
            {
                Title = "來源單號",
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "200px",
                CustomTemplate = item =>
                {
                    var prepayment = (PrepaymentDto)item;
                    bool isEmptyRow = IsEmptyRow(prepayment);
                    bool isFromSetoff = prepayment.PrepaymentType == PrepaymentType.PrepaymentToSetoff || 
                                       prepayment.PrepaymentType == PrepaymentType.PrepaidToSetoff;
                    
                    // 如果是"預收/預付轉沖款"類型且為空行，顯示下拉選單
                    if (isFromSetoff && isEmptyRow && !IsReadOnly)
                    {
                        var options = GetSourceSetoffOptions();
                        return @<select class="form-select form-select-sm"
                                       value="@(prepayment.SourceSetoffId?.ToString() ?? "0")"
                                       @onchange="@(async (e) => await HandleSourceSetoffChanged(prepayment, e.Value?.ToString()))">
                            @foreach (var opt in options)
                            {
                                <option value="@opt.Value">@opt.Text</option>
                            }
                        </select>;
                    }
                    else
                    {
                        // 其他情況顯示唯讀文字
                        return @<span>@prepayment.Code</span>;
                    }
                }
            },
            
            // 3. 款項日期 (唯讀文字)
            new InteractiveColumnDefinition
            {
                Title = "款項日期",
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CustomTemplate = item =>
                {
                    var prepayment = (PrepaymentDto)item;
                    return @<span>@prepayment.PaymentDate.ToString("yyyy-MM-dd")</span>;
                }
            },
            
            // 4. 原始金額 (唯讀數字)
            new InteractiveColumnDefinition
            {
                Title = "原始金額",
                PropertyName = nameof(PrepaymentDto.Amount),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var prepayment = (PrepaymentDto)item;
                    var displayValue = prepayment.Amount.ToString("N2");
                    return @<span class="text-muted">@displayValue</span>;
                }
            },
            
            // 5. 已用金額 (唯讀數字)
            new InteractiveColumnDefinition
            {
                Title = "已用金額",
                PropertyName = nameof(PrepaymentDto.UsedAmount),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var prepayment = (PrepaymentDto)item;
                    var displayValue = prepayment.UsedAmount.ToString("N2");
                    return @<span class="text-muted">@displayValue</span>;
                }
            },
            
            // 6. 可用金額 (唯讀數字，突出顯示)
            new InteractiveColumnDefinition
            {
                Title = "可用金額",
                PropertyName = nameof(PrepaymentDto.AvailableAmount),
                ColumnType = InteractiveColumnType.Custom,
                Width = "120px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var prepayment = (PrepaymentDto)item;
                    var displayValue = prepayment.AvailableAmount.ToString("N2");
                    return @<span class="text-primary fw-bold">@displayValue</span>;
                }
            },
            
            // 7. 本次新增金額 (可編輯數字輸入 - 用於新增預收/預付款)
            new InteractiveColumnDefinition
            {
                Title = "本次金額",
                PropertyName = "",
                ColumnType = InteractiveColumnType.Custom,
                Width = "150px",
                CellCssClass = "text-end",
                CustomTemplate = item =>
                {
                    var prepayment = (PrepaymentDto)item;
                    // 只有沒有來源的項目才能輸入新增金額（新增的預收/預付款）
                    bool canAddNew = prepayment.PrepaymentId == 0;
                    
                    return @<input type="text"
                                  class="form-control form-control-sm text-end @(canAddNew ? "" : "bg-light")"
                                  value="@(prepayment.ThisTimeAddAmount > 0 ? prepayment.ThisTimeAddAmount.ToString("N0") : "")"
                                  pattern="[0-9]*"
                                  inputmode="numeric"
                                  @oninput="@(async (e) => await HandleAddAmountChanged(prepayment, e.Value?.ToString()))"
                                  placeholder="@(canAddNew ? "輸入金額" : "")"
                                  readonly="@(!canAddNew || IsReadOnly)" />;
                }
            },
            
            // 8. 備註 (可編輯文字)
            new InteractiveColumnDefinition
            {
                Title = "備註",
                PropertyName = nameof(PrepaymentDto.Remarks),
                ColumnType = InteractiveColumnType.Custom,
                Width = "200px",
                CustomTemplate = item =>
                {
                    var prepayment = (PrepaymentDto)item;
                    return @<input type="text" 
                                   class="form-control form-control-sm" 
                                   value="@prepayment.Remarks"
                                   @oninput="@(async (e) => await HandleRemarksChanged(prepayment, e.Value?.ToString()))"
                                   placeholder="選填"
                                   readonly="@IsReadOnly" />;
                }
            }
        };

        return columns;
    }
    
    #endregion

    #region 事件處理方法
    
    /// <summary>
    /// 處理類別變更事件
    /// </summary>
    private async Task HandlePrepaymentTypeChanged(PrepaymentDto prepayment, string? value)
    {
        try
        {
            if (int.TryParse(value, out int typeValue))
            {
                prepayment.PrepaymentType = (PrepaymentType)typeValue;
                
                // 如果改變類別，重置相關欄位
                prepayment.SourceSetoffId = null;
                prepayment.SourceSetoffNumber = null;
                prepayment.Code = "(新增)";
                prepayment.Amount = 0;
                prepayment.UsedAmount = 0;
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandlePrepaymentTypeChanged), GetType());
        }
    }
    
    /// <summary>
    /// 處理來源沖款單變更事件
    /// </summary>
    private async Task HandleSourceSetoffChanged(PrepaymentDto prepayment, string? value)
    {
        try
        {
            if (int.TryParse(value, out int setoffId) && setoffId > 0)
            {
                // 從可用沖款單列表中找到選中的沖款單
                var selectedSetoff = AvailableSetoffs.FirstOrDefault(s => s.SourceSetoffId == setoffId);
                
                if (selectedSetoff != null)
                {
                    // 更新預收/預付款資訊
                    prepayment.SourceSetoffId = selectedSetoff.SourceSetoffId;
                    prepayment.SourceSetoffNumber = selectedSetoff.SourceSetoffNumber;
                    prepayment.Code = selectedSetoff.SourceSetoffNumber ?? "";
                    prepayment.PaymentDate = selectedSetoff.PaymentDate;
                    prepayment.Amount = selectedSetoff.Amount;
                    prepayment.UsedAmount = selectedSetoff.UsedAmount;
                    prepayment.Remarks = selectedSetoff.Remarks;
                    
                    // 處理自動空行邏輯
                    var wasEmpty = IsEmptyRow(prepayment);
                    AutoEmptyRowHelper.ForAny<PrepaymentDto>.HandleInputChange(
                        Prepayments, prepayment, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(prepayment));
                    
                    await NotifyChanges();
                }
            }
            else
            {
                // 選擇"新增"選項，重置欄位
                prepayment.SourceSetoffId = null;
                prepayment.SourceSetoffNumber = null;
                prepayment.Code = "(新增)";
                prepayment.Amount = 0;
                prepayment.UsedAmount = 0;
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleSourceSetoffChanged), GetType());
        }
    }
    
    /// <summary>
    /// 處理備註變更事件
    /// </summary>
    private async Task HandleRemarksChanged(PrepaymentDto prepayment, string? value)
    {
        try
        {
            prepayment.Remarks = value ?? string.Empty;
            await NotifyChanges();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleRemarksChanged), GetType());
        }
    }
    
    /// <summary>
    /// 處理新增金額變更事件
    /// </summary>
    private async Task HandleAddAmountChanged(PrepaymentDto prepayment, string? value)
    {
        try
        {
            var wasEmpty = IsEmptyRow(prepayment);
            
            // 解析金額
            if (decimal.TryParse(value, out decimal amount))
            {
                prepayment.ThisTimeAddAmount = amount;
            }
            else
            {
                prepayment.ThisTimeAddAmount = 0;
            }
            
            // 驗證金額
            ValidateAmounts();
            
            // 如果輸入了新增金額，更新相關欄位
            if (prepayment.ThisTimeAddAmount > 0)
            {
                // 設定原始金額為新增金額（持續更新，讓使用者可以修改）
                prepayment.Amount = prepayment.ThisTimeAddAmount;
                
                // 只有在第一次輸入時才設定日期和單號
                if (wasEmpty)
                {
                    prepayment.PaymentDate = DateTime.Today;
                }
                
                // 根據類型決定單號來源
                bool isFromSetoff = prepayment.PrepaymentType == PrepaymentType.PrepaymentToSetoff || 
                                   prepayment.PrepaymentType == PrepaymentType.PrepaidToSetoff;
                
                if (isFromSetoff)
                {
                    // 預收/預付轉沖款：使用來源沖款單號（已在 HandleSourceSetoffChanged 中設定）
                    // 這裡不需要做任何事，保持原有的 Code 值
                }
                else if (wasEmpty)
                {
                    // 一般預收/預付：使用主檔的沖款單號（只在第一次輸入時設定）
                    if (!string.IsNullOrEmpty(SetoffNumber))
                    {
                        prepayment.Code = SetoffNumber;
                    }
                    else
                    {
                        // 如果主檔單號還沒有（理論上不應該發生），使用臨時單號
                        var prefix = Mode == SetoffMode.Receivable ? "預收" : "預付";
                        prepayment.Code = $"{prefix}-{DateTime.Now:yyyyMMddHHmmss}";
                    }
                }
            }
            else if (prepayment.ThisTimeAddAmount == 0)
            {
                // 如果清空新增金額，也清空相關欄位
                prepayment.Amount = 0;
                prepayment.Code = "(新增)";
            }
            
            // 處理自動空行邏輯
            AutoEmptyRowHelper.ForAny<PrepaymentDto>.HandleInputChange(
                Prepayments, prepayment, IsEmptyRow, CreateEmptyItem, wasEmpty, !IsEmptyRow(prepayment));
            
            // 設置強制渲染標記（因為預收預付數據變更了）
            _shouldRenderOverride = true;
            
            // 通知變更（NotifyChanges 內部會調用 StateHasChanged）
            await NotifyChanges();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleAddAmountChanged), GetType());
        }
    }
    
    /// <summary>
    /// 從選擇中移除指定項目（清除使用金額）
    /// </summary>
    private async Task RemoveItemFromSelection(PrepaymentDto item)
    {
        try
        {
            // 使用 AutoEmptyRowHelper 處理項目移除
            AutoEmptyRowHelper.ForAny<PrepaymentDto>.HandleItemRemove(
                Prepayments,
                item,
                IsEmptyRow,
                CreateEmptyItem
            );
            
            ValidationErrors.Clear();
            await NotifyChanges();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(RemoveItemFromSelection), GetType());
        }
    }
    
    /// <summary>
    /// 處理驗證失敗事件
    /// </summary>
    private async Task HandleValidationFailed((PrepaymentDto item, string propertyName, string? errorMessage) args)
    {
        try
        {
            if (!string.IsNullOrEmpty(args.errorMessage))
            {
                await NotificationService.ShowErrorAsync(args.errorMessage);
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(HandleValidationFailed), GetType());
        }
    }
    
    #endregion

    #region 驗證方法
    
    /// <summary>
    /// 驗證所有金額
    /// </summary>
    private void ValidateAmounts()
    {
        ValidationErrors.Clear();
        
        foreach (var prepayment in Prepayments.Where(p => p.ThisTimeAddAmount > 0))
        {
            // 驗證新增金額必須大於0
            if (prepayment.ThisTimeAddAmount <= 0)
            {
                ValidationErrors[$"{prepayment.GetHashCode()}_ThisTimeAddAmount"] = "新增金額必須大於0";
            }
        }
    }
    
    #endregion

    #region UI 輔助方法
    
    /// <summary>
    /// 取得要顯示的預收/預付款列表
    /// </summary>
    private List<PrepaymentDto> GetDisplayPrepayments()
    {
        if (IsEditMode)
        {
            // 編輯模式：顯示原本有使用記錄的項目 + 可用的項目 + 空行
            return Prepayments.Where(p => p.OriginalThisTimeUseAmount > 0 || p.AvailableAmount > 0 || IsEmptyRow(p)).ToList();
        }
        else
        {
            // 新增模式：顯示所有可用的項目 + 空行
            return Prepayments.Where(p => p.AvailableAmount > 0 || IsEmptyRow(p)).ToList();
        }
    }
    
    /// <summary>
    /// 取得模式對應的 CSS 類別
    /// </summary>
    private string GetModeClass() => Mode == SetoffMode.Receivable ? "receivable" : "payable";
    
    /// <summary>
    /// 取得空白訊息
    /// </summary>
    private string GetEmptyMessage() => Mode == SetoffMode.Receivable 
        ? "此客戶沒有可用的預收款" 
        : "此供應商沒有可用的預付款";
    
    #endregion

    #region 輔助方法
    
    /// <summary>
    /// 檢查是否為空行
    /// 業務邏輯：如果本次新增金額為 0、沒有原始金額且原始金額為0，就算是空行
    /// </summary>
    private bool IsEmptyRow(PrepaymentDto prepayment)
    {
        return prepayment.ThisTimeAddAmount == 0 
            && prepayment.OriginalThisTimeUseAmount == 0 
            && prepayment.Amount == 0
            && prepayment.Id == 0;
    }
    
    /// <summary>
    /// 創建空的預收/預付款項目
    /// </summary>
    private PrepaymentDto CreateEmptyItem()
    {
        return new PrepaymentDto
        {
            SetoffId = SetoffId ?? 0,
            PaymentDate = DateTime.Today,
            Amount = 0,
            UsedAmount = 0,
            OriginalThisTimeUseAmount = 0,
            PrepaymentType = Mode == SetoffMode.Receivable ? PrepaymentType.Prepayment : PrepaymentType.Prepaid,
            Code = "(新增)"
        };
    }
    
    /// <summary>
    /// 確保有一個空行
    /// </summary>
    private void EnsureOneEmptyRow()
    {
        if (IsReadOnly) return;

        var emptyRows = Prepayments.Where(IsEmptyRow).ToList();

        if (emptyRows.Count == 0)
        {
            // 沒有空行,新增一個
            Prepayments.Add(CreateEmptyItem());
        }
        else if (emptyRows.Count > 1)
        {
            // 超過一個空行,只保留最後一個
            for (int i = 0; i < emptyRows.Count - 1; i++)
            {
                Prepayments.Remove(emptyRows[i]);
            }
        }
    }
    
    /// <summary>
    /// 取得有效的預收/預付款（本次新增金額 > 0）
    /// </summary>
    private List<PrepaymentDto> GetValidPrepayments()
    {
        return Prepayments.Where(p => p.ThisTimeAddAmount > 0).ToList();
    }
    
    /// <summary>
    /// 取得類別選項列表
    /// </summary>
    private List<(string Value, string Text)> GetPrepaymentTypeOptions()
    {
        if (Mode == SetoffMode.Receivable)
        {
            return new List<(string Value, string Text)>
            {
                (((int)PrepaymentType.Prepayment).ToString(), "預收"),
                (((int)PrepaymentType.PrepaymentToSetoff).ToString(), "預收轉沖款")
            };
        }
        else
        {
            return new List<(string Value, string Text)>
            {
                (((int)PrepaymentType.Prepaid).ToString(), "預付"),
                (((int)PrepaymentType.PrepaidToSetoff).ToString(), "預付轉沖款")
            };
        }
    }
    
    /// <summary>
    /// 取得來源單號選項列表
    /// </summary>
    private List<(string Value, string Text)> GetSourceSetoffOptions()
    {
        var options = new List<(string Value, string Text)>
        {
            ("0", "(新增)")  // 空選項，代表新增
        };
        
        // 加入可用的沖款單
        foreach (var setoff in AvailableSetoffs)
        {
            var displayText = $"{setoff.SourceSetoffNumber} (可用: {setoff.AvailableAmount:N2})";
            options.Add((setoff.SourceSetoffId.ToString() ?? "0", displayText));
        }
        
        return options;
    }
    
    /// <summary>
    /// 通知變更
    /// </summary>
    private async Task NotifyChanges()
    {
        try
        {
            var validPrepayments = GetValidPrepayments();
            
            // 通知預收/預付款變更
            if (OnPrepaymentsChanged.HasDelegate)
            {
                await OnPrepaymentsChanged.InvokeAsync(validPrepayments);
            }
            
            // 通知總金額變更
            if (OnTotalUseAmountChanged.HasDelegate)
            {
                await OnTotalUseAmountChanged.InvokeAsync(TotalUseAmount);
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(NotifyChanges), GetType());
        }
    }
    
    #endregion

    #region 公開方法
    
    /// <summary>
    /// 重新整理資料
    /// </summary>
    public async Task RefreshAsync()
    {
        await LoadPrepaymentsAsync();
    }
    
    /// <summary>
    /// 清除選擇
    /// </summary>
    public void ClearSelection()
    {
        Prepayments.Clear();
        ValidationErrors.Clear();
        _isInitialized = false;
        EnsureOneEmptyRow();
        StateHasChanged();
    }
    
    /// <summary>
    /// 取得選中的預收/預付款列表
    /// </summary>
    public List<PrepaymentDto> GetSelectedPrepayments()
    {
        return GetValidPrepayments();
    }
    
    /// <summary>
    /// 取得總使用金額
    /// </summary>
    public decimal GetTotalUseAmount()
    {
        return TotalUseAmount;
    }
    
    /// <summary>
    /// 驗證預收/預付款選擇
    /// </summary>
    public (bool IsValid, List<string> Errors) ValidateSelection()
    {
        var errors = new List<string>();
        var validPrepayments = GetValidPrepayments();
        
        // 不強制要求必須選擇預收/預付款
        // 只驗證如果有選擇，金額是否正確
        
        foreach (var prepayment in validPrepayments)
        {
            var validation = prepayment.ValidateUseAmount();
            if (!validation.IsValid && validation.ErrorMessage != null)
            {
                errors.Add($"{prepayment.Code}: {validation.ErrorMessage}");
            }
        }

        return (errors.Count == 0, errors);
    }
    
    /// <summary>
    /// 儲存預收/預付款明細
    /// </summary>
    public async Task<(bool Success, string Message)> SaveAsync()
    {
        try
        {
            if (!SetoffId.HasValue)
            {
                return (false, "沖款單ID不存在");
            }
            
            var validPrepayments = GetValidPrepayments();
            var deletedDetailIds = Prepayments
                .Where(p => p.Id > 0 && p.ThisTimeAddAmount == 0 && p.OriginalThisTimeUseAmount > 0)
                .Select(p => p.Id)
                .ToList();
            
            ServiceResult result;
            if (Mode == SetoffMode.Receivable)
            {
                result = await SetoffPrepaymentDetailService.SaveReceivableSetoffPrepaymentsAsync(
                    SetoffId.Value, validPrepayments, deletedDetailIds);
            }
            else
            {
                result = await SetoffPrepaymentDetailService.SavePayableSetoffPrepaymentsAsync(
                    SetoffId.Value, validPrepayments, deletedDetailIds);
            }
            
            if (result.IsSuccess)
            {
                await RefreshAsync();
            }
            
            return (result.IsSuccess, result.ErrorMessage);
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(SaveAsync), GetType());
            return (false, "儲存預收/預付款明細時發生錯誤");
        }
    }
    
    #endregion
}
