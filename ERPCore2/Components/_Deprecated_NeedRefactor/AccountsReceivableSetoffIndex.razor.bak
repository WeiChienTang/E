@page "/accountsReceivableSetoffs"
@inject IAccountsReceivableSetoffService AccountsReceivableSetoffService
@inject ICustomerService CustomerService
@inject IPaymentMethodService PaymentMethodService
@inject IEmployeeService EmployeeService
@inject INotificationService NotificationService
@rendermode InteractiveServer

<GenericIndexPageComponent TEntity="AccountsReceivableSetoff" 
                          TService="IAccountsReceivableSetoffService"
                          Service="@AccountsReceivableSetoffService"
                          EntityBasePath="/accountsReceivableSetoffs"                          
                          PageTitle="應收帳款沖款管理"
                          PageSubtitle="管理所有應收帳款沖款作業與記錄"
                          DataLoader="@LoadAccountsReceivableSetoffsAsync"
                          FilterApplier="@ApplyAccountsReceivableSetoffFilters"
                          BreadcrumbItems="@breadcrumbItems"
                          FilterDefinitions="@filterDefinitions"
                          ColumnDefinitions="@columnDefinitions"
                          EntityName="應收帳款沖款"
                          GetEntityDisplayName="@(setoff => $"{setoff.SetoffNumber} - {setoff.Customer?.CompanyName}")"
                          RequiredPermission="AccountsReceivableSetoff.Read"
                          OnAddClick="@modalHandler.ShowAddModalAsync"
                          OnRowClick="@modalHandler.ShowEditModalAsync"
                          @ref="indexComponent" />

@* 應收帳款沖款編輯 Modal *@
<AccountsReceivableSetoffEditModalComponent IsVisible="@showEditModal"
                                           IsVisibleChanged="@((bool visible) => showEditModal = visible)"
                                           SetoffId="@editingSetoffId"
                                           OnSetoffSaved="@modalHandler.OnEntitySavedAsync"
                                           OnCancel="@modalHandler.OnModalCancelAsync" />

@code {
    // 組件參考
    private GenericIndexPageComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService> indexComponent = default!;
    
    // Modal 相關狀態
    private bool showEditModal = false;
    private int? editingSetoffId = null;
    
    // Modal 處理器
    private ModalHandler<AccountsReceivableSetoff, GenericIndexPageComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>> modalHandler = default!;
    
    // 欄位配置
    private AccountsReceivableSetoffFieldConfiguration fieldConfiguration = default!;
    
    // 配置相關
    private List<SearchFilterDefinition> filterDefinitions = new();
    private List<TableColumnDefinition> columnDefinitions = new();
    private List<GenericHeaderComponent.BreadcrumbItem> breadcrumbItems = new();
    
    // 相關資料
    private List<Customer> customers = new();
    private List<PaymentMethod> paymentMethods = new();
    private List<Employee> employees = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 初始化 Modal 處理器
            modalHandler = ModalHelper.CreateModalHandler<AccountsReceivableSetoff, GenericIndexPageComponent<AccountsReceivableSetoff, IAccountsReceivableSetoffService>>(
                id => editingSetoffId = id,
                visible => showEditModal = visible,
                () => indexComponent,
                StateHasChanged,
                GetType());
            
            await InitializeBreadcrumbsAsync();
            
            // 載入相關資料
            await LoadCustomersAsync();
            await LoadPaymentMethodsAsync();
            await LoadEmployeesAsync();
            
            // 建立欄位配置
            fieldConfiguration = new AccountsReceivableSetoffFieldConfiguration(customers, paymentMethods, employees, NotificationService);
            filterDefinitions = fieldConfiguration.BuildFilters();
            columnDefinitions = fieldConfiguration.BuildColumns();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(OnInitializedAsync), GetType(), additionalData: "初始化應收帳款沖款頁面失敗");
            await NotificationService.ShowErrorAsync("初始化應收帳款沖款頁面失敗");
        }
    }

    private async Task InitializeBreadcrumbsAsync()
    {
        try
        {
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>
            {
                new("首頁", "/"),
                new("財務管理", "/financial"),
                new("應收帳款沖款管理")
            };
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(InitializeBreadcrumbsAsync), GetType(), additionalData: "初始化麵包屑導航失敗");

            // 設定安全的預設值
            breadcrumbItems = new List<GenericHeaderComponent.BreadcrumbItem>();
        }
    }

    private async Task<List<AccountsReceivableSetoff>> LoadAccountsReceivableSetoffsAsync()
    {
        try
        {
            return await AccountsReceivableSetoffService.GetAllAsync();
        }
        catch (Exception ex)
        {
            // 記錄錯誤到資料庫並通知使用者
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadAccountsReceivableSetoffsAsync), GetType(), additionalData: "載入應收帳款沖款資料失敗");
            await NotificationService.ShowErrorAsync("載入應收帳款沖款資料失敗");
            // 設定安全的預設值
            return new List<AccountsReceivableSetoff>();
        }
    }

    private async Task LoadCustomersAsync()
    {
        try
        {
            customers = await CustomerService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadCustomersAsync), GetType(), additionalData: "載入客戶資料失敗");
            await NotificationService.ShowErrorAsync("載入客戶資料失敗");
            // 設定安全的預設值
            customers = new List<Customer>();
        }
    }

    private async Task LoadPaymentMethodsAsync()
    {
        try
        {
            paymentMethods = await PaymentMethodService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadPaymentMethodsAsync), GetType(), additionalData: "載入付款方式資料失敗");
            await NotificationService.ShowErrorAsync("載入付款方式資料失敗");
            // 設定安全的預設值
            paymentMethods = new List<PaymentMethod>();
        }
    }

    private async Task LoadEmployeesAsync()
    {
        try
        {
            employees = await EmployeeService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await ErrorHandlingHelper.HandlePageErrorAsync(ex, nameof(LoadEmployeesAsync), GetType(), additionalData: "載入員工資料失敗");
            await NotificationService.ShowErrorAsync("載入員工資料失敗");
            // 設定安全的預設值
            employees = new List<Employee>();
        }
    }

    private IQueryable<AccountsReceivableSetoff> ApplyAccountsReceivableSetoffFilters(SearchFilterModel searchModel, IQueryable<AccountsReceivableSetoff> query)
    {
        // 確保 fieldConfiguration 已初始化（避免與 GenericIndexPageComponent 初始化的競爭條件）
        if (fieldConfiguration == null)
        {
            // 如果配置未初始化，回傳基本排序的查詢
            return query.OrderByDescending(s => s.SetoffDate);
        }

        return fieldConfiguration.ApplyFilters(searchModel, query, nameof(ApplyAccountsReceivableSetoffFilters), GetType());
    }
}